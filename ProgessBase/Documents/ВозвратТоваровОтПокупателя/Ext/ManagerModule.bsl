// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст ошибки)
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в которой был выведен объект)
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	//{06.07.2016 Островерхий заявка №53363 
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М15ЗалоговаяСтоимость") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М15ЗалоговаяСтоимость", "М-15 (по залоговой стоимости)", ПечатьМ15ЗалоговаяСтоимость(МассивОбъектов, ОбъектыПечати));
	КонецЕсли; 
	//06.07.2016 Островерхий}
	
КонецПроцедуры

// Функция формирует табличный документ унифицированной формы М-15
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме М-15.
//
Функция ПечатьМ15ЗалоговаяСтоимость(МассивОбъектов, ОбъектыПечати)
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;
	
	ТекстЗапросаШапка = "
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер                   КАК Номер,
	|	РеализацияТоваровУслуг.Дата                    КАК ДатаСоставления,
	|	РеализацияТоваровУслуг.Дата                    КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Организация             КАК Организация,
	|	РеализацияТоваровУслуг.Организация             КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация             КАК Руководители,
	|	РеализацияТоваровУслуг.Склад                   КАК Склад,
	|	РеализацияТоваровУслуг.Склад.Наименование      КАК СкладНаименование,
	|	РеализацияТоваровУслуг.Контрагент.Код          КАК КонтрагентКод,
	|	РеализацияТоваровУслуг.Контрагент              КАК Контрагент,
	|	РеализацияТоваровУслуг.ВалютаДокумента         КАК ВалютаДокумента,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов      КАК Курс,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов КАК Кратность,
	|	РеализацияТоваровУслуг.УчитыватьНДС            КАК УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС        КАК СуммаВключаетНДС,
	|	ОтветственныеЛица.ФизическоеЛицо               КАК ОтветственноеЛицо,
	|	РеализацияТоваровУслуг.ОтпускРазрешил          КАК ОтпускРазрешил,
	|	РеализацияТоваровУслуг.ОтпускПроизвел          КАК ОтпускПроизвел,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер		   КАК ГлавныйБухгалтер,
	|	РеализацияТоваровУслуг.ЗаГлавногоБухгалтераПоПриказу КАК ЗаГлавногоБухгалтераПоПриказу,
	|	РеализацияТоваровУслуг.ЗаРуководителяПоПриказу	КАК ЗаРуководителяПоПриказу,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента      КАК Основание
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	
	ТекстЗапросаТовары = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.НомерТабличнойЧасти                          КАК НомерТабличнойЧасти,
	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                КАК ТоварКод,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК ЕдиницаИзмеренияНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВложенныйЗапрос.КоличествоПринято                            КАК КоличествоПринято,
	|	ВложенныйЗапрос.Цена                                         КАК Цена,
	|	ВложенныйЗапрос.Сумма                                        КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС                                     КАК СуммаНДС,
	|	ВложенныйЗапрос.СтавкаНДС                                    КАК СтавкаНДС,
	|	ВложенныйЗапрос.Характеристика                               КАК Характеристика,
	|	ВложенныйЗапрос.Серия                                        КАК Серия
	|
	|ИЗ (
	|	ВЫБРАТЬ
	|		0.00                                        КАК НомерТабличнойЧасти,
	|		МАКСИМУМ(Товары.НомерСтроки)                КАК НомерСтроки,
	|		Товары.Номенклатура                         КАК Номенклатура,
	|		Товары.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|		СУММА(Товары.Количество)                    КАК КоличествоПринято,
	|		Товары.Цена * &Курс / &Кратность            КАК Цена,
	|		СУММА(Товары.Сумма * &Курс / &Кратность)    КАК Сумма,
	|		СУММА(Товары.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|		Товары.СтавкаНДС           					КАК СтавкаНДС,
	|		Товары.ХарактеристикаНоменклатуры           КАК Характеристика,
	|		Товары.СерияНоменклатуры                    КАК Серия
	|	ИЗ
	//|		Документ.РеализацияТоваровУслуг.Товары КАК Товары //Blik б/н 240816 
	|		Документ.ВозвратТоваровОтПокупателя.Товары КАК Товары
	|	ГДЕ
	|		Товары.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.Номенклатура,
	|		Товары.ЕдиницаИзмерения,
	|		Товары.ХарактеристикаНоменклатуры,
	|		Товары.СтавкаНДС,
	|		Товары.СерияНоменклатуры,
	|		Товары.Цена
	//Blik б/н 240816 н нет услуг в возврате
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|
	//|	ВЫБРАТЬ
	//|		1.00                                        КАК НомерТабличнойЧасти,
	//|		МАКСИМУМ(Услуги.НомерСтроки)                КАК НомерСтроки,
	//|		Услуги.Номенклатура                         КАК Номенклатура,
	//|		Услуги.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	//|		СУММА(Услуги.Количество)                    КАК КоличествоПринято,
	//|		Услуги.Цена * &Курс / &Кратность            КАК Цена,
	//|		СУММА(Услуги.Сумма * &Курс / &Кратность)    КАК Сумма,
	//|		СУММА(Услуги.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	//|		Услуги.СтавкаНДС                            КАК СтавкаНДС,
	//|		Неопределено                                КАК Характеристика,
	//|		Неопределено                                КАК Серия
	//|	ИЗ
	//|		Документ.РеализацияТоваровУслуг.Услуги КАК Услуги
	//|	ГДЕ
	//|		Услуги.Ссылка = &ТекущийДокумент
	//|	СГРУППИРОВАТЬ ПО
	//|		Услуги.Номенклатура,
	//|		Услуги.СтавкаНДС,
	//|		Услуги.Цена
	//Blik б/н 240816 к нет услуг в возврате
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		2.00                                                КАК НомерТабличнойЧасти,
	|		МАКСИМУМ(ВозвратнаяТара.НомерСтроки)                КАК НомерСтроки,
	|		ВозвратнаяТара.Номенклатура                         КАК Номенклатура,
	|		ВозвратнаяТара.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		СУММА(ВозвратнаяТара.Количество)                    КАК КоличествоПринято,
	|		ВозвратнаяТара.Цена * &Курс / &Кратность            КАК Цена,
	|		СУММА(ВозвратнаяТара.Сумма * &Курс / &Кратность)    КАК Сумма,
	|		0.00                                                КАК СуммаНДС,
	|		""Без НДС""                                        	КАК СтавкаНДС,
	|		Неопределено                                        КАК Характеристика,
	|		Неопределено                                        КАК Серия
	|	ИЗ
	//|		Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК ВозвратнаяТара
	|		Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара КАК ВозвратнаяТара
	|	ГДЕ
	|		ВозвратнаяТара.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВозвратнаяТара.Номенклатура,
	|		ВозвратнаяТара.Цена
    |
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТабличнойЧасти ВОЗР,
	|	ВложенныйЗапрос.НомерСтроки ВОЗР
	|";

	Макет = ПолучитьОбщийМакет("ПРГМ15ЗалоговаяСтоимость");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры печатной формы по умолчанию
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Восстановим установленные пользователем параметры печатной формы
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_М15ЗалоговаяСтоимость";

	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаСреза",          Ссылка.Дата);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Ссылка.СкладОрдер);//Ссылка.Склад);  //Blik б/н 240816 нет такого реквизита
		Запрос.УстановитьПараметр("ТекущийДокумент",    Ссылка.ДокументОснование);//Ссылка);   //Blik б/н 240816 берем не ссылку а реализацию указанную в ссылке
		Запрос.Текст = ТекстЗапросаШапка;
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросПоТоварам = Новый Запрос();
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);

		ЗапросПоТоварам.УстановитьПараметр("Курс",      ЗаполнениеДокументов.КурсДокумента(Ссылка, мВалютаРегламентированногоУчета));
		ЗапросПоТоварам.УстановитьПараметр("Кратность", ЗаполнениеДокументов.КратностьДокумента(Ссылка, мВалютаРегламентированногоУчета));
		ЗапросПоТоварам.Текст = ТекстЗапросаТовары;
		ЗапросТовары = ЗапросПоТоварам.Выполнить().Выгрузить();
		
		// Вычислим курс документа для печати
		Если Ссылка.ВалютаДокумента <> мВалютаРегламентированногоУчета
			И (Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
			ИЛИ Ссылка.Дата >= '20090101000000') Тогда
			
			ЗапросКурсАванса = Новый Запрос;
			ЗапросКурсАванса.УстановитьПараметр("ДокументСсылка", Ссылка);
			ЗапросКурсАванса.Текст =
			"ВЫБРАТЬ
			|	Док.СуммаВзаиморасчетов,
			|	Док.СуммаРегл
			|ИЗ 
			|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК Док
			|ГДЕ Док.Ссылка = &ДокументСсылка
			|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаРегл) ПО ОБЩИЕ";
			
			Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если Выборка.Следующий() Тогда
				ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
				ВыборкаСуммаРегл           = Выборка.СуммаРегл;
			Иначе
				ВыборкаСуммаВзаиморасчетов = 0;
				ВыборкаСуммаРегл           = 0;
			КонецЕсли;
			
			РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(Шапка.ДатаДокумента);
			
			СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(Ссылка),
																Ссылка.ВалютаДокумента, Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
																ЗаполнениеДокументов.КурсДокумента(Ссылка, мВалютаРегламентированногоУчета), Ссылка.КурсВзаиморасчетов,
																ЗаполнениеДокументов.КратностьДокумента(Ссылка, мВалютаРегламентированногоУчета), Ссылка.КратностьВзаиморасчетов);
			НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
			
			НеоплаченнаяСуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НеоплаченнаяСумма,
																Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
																Ссылка.КурсВзаиморасчетов, 1,
																Ссылка.КратностьВзаиморасчетов, 1);
																
			СуммаРегл = ВыборкаСуммаРегл + НеоплаченнаяСуммаРегл;
			
			Если НЕ СуммаРегл = 0 Тогда
				
				ЗапросТовары.Колонки.Добавить("СуммаБезНДС");
				МассивРаспределения = Новый Массив;
				
				Для Каждого СтрокаТовар Из ЗапросТовары Цикл
					Если (СтрокаТовар.НомерТабличнойЧасти = 2) Тогда
						Продолжить;
					КонецЕсли;
					СуммаСНДС = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
					СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;
					МассивРаспределения.Добавить(СуммаСНДС);
					СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
				КонецЦикла;
				
				ЗапросТовары.Колонки.Добавить("СуммаРублевая");
				УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаРегл, ЗапросТовары, "СуммаРублевая");
				
				Для Каждого СтрокаТовар Из ЗапросТовары Цикл
					Если (СтрокаТовар.НомерТабличнойЧасти = 2) Тогда
						Продолжить;
					КонецЕсли;
					Если РасчетСуммыНДСПоСтавке Тогда
						//Выделение суммы НДС, Расчет суммы без НДС
						ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаТовар.СтавкаНДС);
						СтрокаТовар.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТовар.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
						СтрокаТовар.Сумма = СтрокаТовар.СуммаРублевая - СтрокаТовар.СуммаНДС;
					Иначе
						МассивРаспределения.Очистить();
						МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДС);
						МассивРаспределения.Добавить(СтрокаТовар.СуммаНДС);
						МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.СуммаРублевая, МассивРаспределения);
						Если МассивРаспределенныхСумм <> Неопределено Тогда
							СтрокаТовар.Сумма = МассивРаспределенныхСумм[0];
							СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
						КонецЕсли;
					КонецЕсли;
					
					Если Шапка.СуммаВключаетНДС Тогда
						СтрокаТовар.Сумма = СтрокаТовар.Сумма+СтрокаТовар.СуммаНДС;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(СведенияОбОрганизации);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
		
		ПредставлениеКонтрагента = ФормированиеПечатныхФормСервер.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаСоставления), "ПолноеНаименование,");
		ОбластьМакета.Параметры.КонтрагентНаименование = ПредставлениеКонтрагента;
		
		ТабДокумент.Вывести(ОбластьМакета);
	
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабДокумент.Вывести(ЗаголовокТаблицы);
		
		НомерСтраницы   = 1;
		
		КоличествоСтрок = ЗапросТовары.Количество();
		
		Для Инд = 1 По КоличествоСтрок Цикл
			СтрокаТовара = ЗапросТовары[КоличествоСтрок - Инд];
			Если (СтрокаТовара.НомерТабличнойЧасти = 1) Тогда
				ЗапросТовары.Удалить(СтрокаТовара);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоСтрок = ЗапросТовары.Количество();
		
		// Инициализация итогов в документе
		ИтогоКоличествоПринято = 0;
		ИтогоСуммаБезНДС = 0;
		ИтогоСуммаНДС    = 0;
		ИтогоВсегоСНДС   = 0;
		Ном              = 0;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
	
		// Выводим многострочную часть докмента
		ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
		ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			Если Ном = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;		
			
			Если НЕ ФормированиеПечатныхФормСервер.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивВыводимыхОбластей) Тогда
				НомерСтраницы	= НомерСтраницы + 1;
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
				ТабДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
			СуммаСНДС   = (ВыборкаСтрокТовары.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС));
			СуммаНДС    = ВыборкаСтрокТовары.СуммаНДС;
			СуммаБезНДС = СуммаСНДС  - СуммаНДС;
			
			Количество 		= ВыборкаСтрокТовары.КоличествоПринято;
			Цена            = СуммаБезНДС / Количество;
			
			ОбластьМакета.Параметры.Количество 		  = Количество;
			ОбластьМакета.Параметры.СуммаСНДС         = СуммаСНДС;
			ОбластьМакета.Параметры.СуммаБезНДС       = СуммаБезНДС;
			ОбластьМакета.Параметры.СуммаНДС          = СуммаНДС;
			ОбластьМакета.Параметры.Цена              = Цена;
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) 
				+ ФормированиеПечатныхФормСервер.ПредставлениеСерий(ВыборкаСтрокТовары)
				+ ?(ВыборкаСтрокТовары.НомерТабличнойЧасти = 2, " (возвратная тара)", "");
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ИтогоКоличествоПринято = ИтогоКоличествоПринято + Количество;
			ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + СуммаБезНДС;
			ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + СуммаСНДС;
			
		КонецЦикла;
	
		// Выводим итоги по документу
		ОбластьПодвала.Параметры.Заполнить(Шапка);
		
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		// Главный бухгалтер
		Если НЕ ЗначениеЗаполнено(Шапка.ГлавныйБухгалтер) Тогда
			ФИОБухгалтер 					 = Бухгалтер;	
		Иначе
			ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ГлавныйБухгалтер, Шапка.ДатаДокумента);
			ФамилияИмяОтчествоБухгалтер 	 = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИОБухгалтер                	 = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоБухгалтер);
			ФИОБухгалтер					 = ФИОБухгалтер + " " + Шапка.ЗаГлавногоБухгалтераПоПриказу;
		КонецЕсли;
		ОбластьПодвала.Параметры.ФИОГлавБухгалтера = ФИОБухгалтер;
		
		// Отпуск товара разрешил
		Если НЕ ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
			ФИООтпускРазрешил       = Руководитель;
			ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
		Иначе
			ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента);
			ПодразделениеДолжностьФизЛица    = ПолныеПрава.СведенияОСотруднике(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента, Шапка.Организация);
			ФамилияИмяОтчествоОтпускРазрешил = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИООтпускРазрешил                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускРазрешил);
			ДолжностьОтпускРазрешил          = ПодразделениеДолжностьФизЛица.Должность;
			ФИООтпускРазрешил			 	 = ФИООтпускРазрешил  + " " + Шапка.ЗаРуководителяПоПриказу;
		КонецЕсли;
		
		ОбластьПодвала.Параметры.ФИОРуководителя       = ФИООтпускРазрешил;
		ОбластьПодвала.Параметры.ДолжностьРуководителя = ДолжностьОтпускРазрешил;
		
		// Отпуск товара произвел
		Если НЕ ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
			ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
			ПодразделениеДолжностьФизЛица = ПолныеПрава.СведенияОСотруднике(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента, Шапка.Организация);
		Иначе
			ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФормСервер.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента);
			ПодразделениеДолжностьФизЛица = ПолныеПрава.СведенияОСотруднике(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента, Шапка.Организация);
		КонецЕсли;
		
		ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
		ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;
		
		ОбластьПодвала.Параметры.ФИОКладовщика       = ФИООтпускПроизвел;
		ОбластьПодвала.Параметры.ДолжностьКладовщика = ДолжностьОтпускПроизвел;
		
		ОбластьПодвала.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
		ОбластьПодвала.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоВсегоСНДС, мВалютаРегламентированногоУчета);
		ОбластьПодвала.Параметры.ИтогНДС       = ИтогоВсегоСНДС - ИтогоСуммаБезНДС;
		
		ТабДокумент.Вывести(ОбластьПодвала);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьМ15()

