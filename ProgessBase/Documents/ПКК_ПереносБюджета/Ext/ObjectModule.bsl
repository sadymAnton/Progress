Перем мУдалятьДвижения;

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Ответственный");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаГрафик, ТаблицаБюджет;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);
		
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Получим остатки
	СпГрафиков = ПереносыБюджетов.ВыгрузитьКолонку("УИграфик");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПКК_РаспределенныйБюджетБонусовУслугОстатки.УИграфик,
	               |	СУММА(ПКК_РаспределенныйБюджетБонусовУслугОстатки.СуммаОстаток) КАК СуммаОстаток,
	               |	ПКК_РаспределенныйБюджетБонусовУслугОстатки.Бонус
	               |ИЗ
	               |	РегистрНакопления.ПКК_РаспределенныйБюджетБонусовУслуг.Остатки(
	               |			&ДатаОстатков,
	               |			УИграфик В (&УИГрафиков)) КАК ПКК_РаспределенныйБюджетБонусовУслугОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПКК_РаспределенныйБюджетБонусовУслугОстатки.УИграфик,
	               |	ПКК_РаспределенныйБюджетБонусовУслугОстатки.Бонус";
	Запрос.УстановитьПараметр("УИГрафиков", СпГрафиков);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(Новый МоментВремени(Дата,Ссылка),ВидГраницы.Исключая));
	
	ТаблицаОстатковБюджета = Запрос.Выполнить().Выгрузить();
		
	НаборДвиженийРаспределениеБюджета = Движения.ПКК_РаспределенныйБюджетБонусовУслуг;
	ТаблицаДвиженийРаспределениеБюджета	= НаборДвиженийРаспределениеБюджета.ВыгрузитьКолонки();
	ТаблицаДвиженийРаспределениеБюджета.Очистить();
	
	//{29.10.2015 Островерхий заявка №45338 
	НаборДвиженийБюджет = Движения.ПКК_БюджетБонусовУслуг;
	ТаблицаДвиженийБюджет	= НаборДвиженийБюджет.ВыгрузитьКолонки();
	ТаблицаДвиженийБюджет.Очистить(); 
	//29.10.2015 Островерхий}
	
	Для Каждого СтрокаПереноса Из ПереносыБюджетов Цикл
		
		//Проверим заполнение
		Если ЗначениеЗаполнено(СтрокаПереноса.График) Тогда
			Если Не ЗначениеЗаполнено(СтрокаПереноса.Бонус)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПереноса.СтатьяДДС)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПереноса.КонПериод)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПереноса.ПериодВыплаты)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПереноса.УИграфик)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПереноса.СуммаБюджета)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПереноса.Валюта) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("В строке " + СокрЛП(СтрокаПереноса.НомерСтроки) + " указаны не все данные по графику списания", Отказ,Заголовок);
			Иначе
				//Нужно проверить на остаток
				СтрокиОстатка = ТаблицаОстатковБюджета.НайтиСтроки(Новый Структура("УИграфик,Бонус",СтрокаПереноса.УИграфик,СтрокаПереноса.Бонус));
				ОстатокБюджета = СтрокаПереноса.СуммаБюджета;
				Для каждого СтрокаОстатка Из СтрокиОстатка Цикл
					
					Если СтрокаОстатка.СуммаОстаток <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ДоступенБюджет = Мин(ОстатокБюджета,СтрокаОстатка.СуммаОстаток);
					
					ОстатокБюджета = ОстатокБюджета - ДоступенБюджет;
					СтрокаОстатка.СуммаОстаток = СтрокаОстатка.СуммаОстаток - ДоступенБюджет;
				
				КонецЦикла; 
				
				Если ОстатокБюджета > 0 Тогда
					//{30.10.2015 Островерхий заявка №45338 
					Если РольДоступна(Метаданные.ОсновнаяРоль.Имя) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("По строке " + СокрЛП(СтрокаПереноса.НомерСтроки) + " не хватает остатка бюджета. Необходимо " + СокрЛП(СтрокаПереноса.СуммаБюджета) + " Остаток " + СокрЛП(СтрокаПереноса.СуммаБюджета - ОстатокБюджета), Ложь,Заголовок);	
					Иначе
						ОбщегоНазначения.СообщитьОбОшибке("По строке " + СокрЛП(СтрокаПереноса.НомерСтроки) + " не хватает остатка бюджета. Необходимо " + СокрЛП(СтрокаПереноса.СуммаБюджета) + " Остаток " + СокрЛП(СтрокаПереноса.СуммаБюджета - ОстатокБюджета), Отказ,Заголовок);	
					КонецЕсли; 
					//30.10.2015 Островерхий} 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПереноса.ГрафикНовый) Тогда
			Если Не ЗначениеЗаполнено(СтрокаПереноса.БонусНовый)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПереноса.СтатьяДДСНовый)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПереноса.КонПериодНовый)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПереноса.ПериодВыплатыНовый)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПереноса.УИграфикНовый)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПереноса.СуммаБюджета)
				ИЛИ Не ЗначениеЗаполнено(СтрокаПереноса.ВалютаНовый) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("В строке " + СокрЛП(СтрокаПереноса.НомерСтроки) + " указаны не все данные по графику зачисления", Отказ,Заголовок);
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаПереноса.График) Тогда
				//Нужно вставить проверку на доступный бюджет (аналог распределения бюджета в графике)
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПереноса.График) И ЗначениеЗаполнено(СтрокаПереноса.ГрафикНовый) Тогда
			Если Не НачалоГода(СтрокаПереноса.ПериодВыплатыНовый) = НачалоГода(СтрокаПереноса.ПериодВыплаты) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке " + СокрЛП(СтрокаПереноса.НомерСтроки) + " указаны периоды выплаты не в рамках календарного года. Такие переносы запрещены!", Отказ,Заголовок);	
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
						
		Если ЗначениеЗаполнено(СтрокаПереноса.График) Тогда
			Движение = ТаблицаДвиженийРаспределениеБюджета.Добавить();
			Движение.Активность = Истина;
			Движение.Дата = СтрокаПереноса.ПериодВыплаты;
			
			Движение.Организация        = СтрокаПереноса.График.Организация;
			Движение.Контрагент         = СтрокаПереноса.График.Контрагент;
			Движение.ДоговорКонтрагента = СтрокаПереноса.График.ДоговорКонтрагента;
			Движение.График             = СтрокаПереноса.График;
			Движение.УИграфик           = СтрокаПереноса.УИграфик;
			Движение.Валюта             = СтрокаПереноса.Валюта;
			Движение.Бонус              = СтрокаПереноса.Бонус;
			Движение.СтатьяДДС          = СтрокаПереноса.СтатьяДДС;
			
			Движение.Период = Дата;
			
			Если ЗначениеЗаполнено(СтрокаПереноса.ГрафикНовый) Тогда
				Движение.Сумма = СтрокаПереноса.СуммаБюджета;
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				Движение.Сумма = -СтрокаПереноса.СуммаБюджета;
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПереноса.ГрафикНовый) Тогда
			Движение = ТаблицаДвиженийРаспределениеБюджета.Добавить();
			Движение.Активность = Истина;
			Движение.Дата = СтрокаПереноса.ПериодВыплатыНовый;
			
			Движение.Организация        = СтрокаПереноса.ГрафикНовый.Организация;
			Движение.Контрагент         = СтрокаПереноса.ГрафикНовый.Контрагент;
			Движение.ДоговорКонтрагента = СтрокаПереноса.ГрафикНовый.ДоговорКонтрагента;
			Движение.График             = СтрокаПереноса.ГрафикНовый;
			Движение.УИграфик           = СтрокаПереноса.УИграфикНовый;
			Движение.Валюта             = СтрокаПереноса.ВалютаНовый;
			Движение.Бонус              = СтрокаПереноса.БонусНовый;
			Движение.СтатьяДДС          = СтрокаПереноса.СтатьяДДСНовый;
			
			Движение.Период = Дата;
			
			Если ЗначениеЗаполнено(СтрокаПереноса.График) Тогда
				Движение.Сумма = - СтрокаПереноса.СуммаБюджета;
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				Движение.Сумма = СтрокаПереноса.СуммаБюджета;
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;
		КонецЕсли;
		
		//{29.10.2015 Островерхий заявка №45338 
		Если НЕ СтрокаПереноса.График.Контрагент.Дивизион = Справочники.ПРГДивизионы.ФКК
			И НЕ СтрокаПереноса.График.Контрагент.НСИ_Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка() Тогда
			
			Движение = ТаблицаДвиженийБюджет.Добавить();
			Движение.Дивизион  = СтрокаПереноса.График.Контрагент.Дивизион; //Нельзя переносить между дивизионами
			Движение.Вывеска   = СтрокаПереноса.ГрафикНовый.Контрагент.НСИ_Вывеска;
			Движение.СтатьяДДС = ?(ЗначениеЗаполнено(СтрокаПереноса.СтатьяДДСНовый),СтрокаПереноса.СтатьяДДСНовый,СтрокаПереноса.СтатьяДДС);
			Движение.Сумма     = СтрокаПереноса.СуммаБюджета;	
			Движение.Период    = СтрокаПереноса.ПериодВыплаты;
			
			Движение = ТаблицаДвиженийБюджет.Добавить();
			Движение.Дивизион  = СтрокаПереноса.График.Контрагент.Дивизион;
			Движение.Вывеска   = СтрокаПереноса.График.Контрагент.НСИ_Вывеска;
			Движение.СтатьяДДС = СтрокаПереноса.СтатьяДДС;
			Движение.Сумма     = - СтрокаПереноса.СуммаБюджета;	
			Движение.Период    = СтрокаПереноса.ПериодВыплаты;
		
		КонецЕсли; 
		//29.10.2015 Островерхий}
		
	КонецЦикла;
	
    Если Не Отказ Тогда
		НаборДвиженийРаспределениеБюджета.мТаблицаДвижений  = ТаблицаДвиженийРаспределениеБюджета;
		НаборДвиженийРаспределениеБюджета.мПериод			=  Дата;
	
		//Движения.ПКК_РаспределенныйБюджетБонусовУслуг.ВыполнитьРасход();
		Движения.ПКК_РаспределенныйБюджетБонусовУслуг.ВыполнитьДвижения();
		
		//{06.11.2015 Островерхий заявка №45338 
		//Если Дата >= '20151106' Тогда //breakpoint Островерхий, 11.11.2015 17:38:16  
			
			//{30.10.2015 Островерхий заявка №45338 
			НаборДвиженийБюджет.мТаблицаДвижений  = ТаблицаДвиженийБюджет;
			Движения.ПКК_БюджетБонусовУслуг.ВыполнитьДвижения();
			//30.10.2015 Островерхий}  	
			
		//КонецЕсли;  
		//06.11.2015 Островерхий}
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	мУдалятьДвижения = НЕ ЭтоНовый();
		
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	//{17.11.2015 Островерхий заявка №46026 
	//Если ОбменДанными.Загрузка Тогда 
	Если РольДоступна("АП_Администратор") 
		ИЛИ РольДоступна(Метаданные.ОсновнаяРоль.Имя)
		ИЛИ РольДоступна("ПКК_РуководительОКК")
		Тогда
	//17.11.2015 Островерхий} 
		Возврат;
	КонецЕсли;
		
	СпУИГрафиков = Новый СписокЗначений;
	
	Для каждого СтрокаПереноса Из ПереносыБюджетов Цикл
		
		Если ЗначениеЗаполнено(СтрокаПереноса.УИграфик) Тогда
			СпУИГрафиков.Добавить(СтрокаПереноса.УИграфик);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПереноса.УИграфикНовый) Тогда
			СпУИГрафиков.Добавить(СтрокаПереноса.УИграфикНовый);
		КонецЕсли;
	
	КонецЦикла; 
	
	Отказ = ПроверитьСуществованиеДвиженяПоУИграфик(СпУИГрафиков);
		
	
	//Если Не РольДоступна("АП_Администратор") Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение документа переноса бюджета ретробонусов", Отказ);
	//КонецЕсли;
КонецПроцедуры

Функция ПроверитьСуществованиеДвиженяПоУИграфик(УИграфик)
	
	Отказ = ложь;	

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПКК_ВедомостиБонусовУслуг.Регистратор
	|ИЗ
	|	РегистрНакопления.ПКК_ВедомостиБонусовУслуг КАК ПКК_ВедомостиБонусовУслуг
	|ГДЕ
	|	ПКК_ВедомостиБонусовУслуг.УИграфик В (&УИграфик)
	|	И ПКК_ВедомостиБонусовУслуг.Исключено = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПКК_РаспределенныйБюджетБонусовУслуг.Регистратор
	|ИЗ
	|	РегистрНакопления.ПКК_РаспределенныйБюджетБонусовУслуг КАК ПКК_РаспределенныйБюджетБонусовУслуг
	|ГДЕ
	|	ПКК_РаспределенныйБюджетБонусовУслуг.УИграфик В (&УИграфик)
	|	И ПКК_РаспределенныйБюджетБонусовУслуг.Регистратор ССЫЛКА Документ.ПКК_ПереносБюджета
	|	И НЕ ПКК_РаспределенныйБюджетБонусовУслуг.Регистратор = &Ссылка
	|	И ПКК_РаспределенныйБюджетБонусовУслуг.Регистратор.Дата >= &Дата";

	Запрос.УстановитьПараметр("УИграфик", УИграфик);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбщегоНазначения.СообщитьОбОшибке("Отмена проведения запрещена. По указанным графикам существуют движения:"+ СокрЛП(ВыборкаДетальныеЗаписи.Регистратор));
		Отказ = истина; 		
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

