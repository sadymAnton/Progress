Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента Экспорт;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

// Хранит информацию о сумме без скидки документа.
Перем мСуммаДокументаБезСкидок Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;

Перем мУчетнаяПолитика Экспорт;

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли; 
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,, Ссылка));
		
КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
	Возврат Новый Структура();
		
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли


// Процедура - обработчик события "ОбработкаПроведения"
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 09.06.2015 40193 
	Если ПометкаУдаления или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУдалятьЗаказы() Тогда
			//провери есть ли введенные на основании проведенные заказы покупателей
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ЗаказПокупателя.Ссылка
			                      |ИЗ
			                      |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
			                      |ГДЕ
			                      |	ЗаказПокупателя.ДокументОснование = &ДокументОснование
			                      |	И ЗаказПокупателя.Проведен");
								  
			Запрос.УстановитьПараметр("ДокументОснование",Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий()  Тогда
				Отказ = Истина;
				Сообщить("Недостачно прав для удаления заказа !!!");
			КонецЕсли;	
		КонецЕсли;	
		//дальнейшие проверки не нужны
		возврат;
	КонецЕсли;	
	//конец изменений 
	
	/// Кунов О.В., 24.08.2015
	Если Не РольДоступна("ПолныеПрава") Тогда
		ПРГ_ДопФункцииКлиентСервер.ПроверитьВладельцаАдресаДоставки(ЭтотОбъект, Отказ);
	КонецЕсли;
	///
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//m.ionov@a-prof.ru 20.02.2015
	ЦеныОтличаются = Ложь;
	//----m.ionov@a-prof.ru---
	
	//++ Spl_Апроф 06.03.2015 (k.russkih@a-prof.ru)
	АП_НастройкиПодсистемы = РегистрыСведений.АП_НастройкаПодсистемыПродаж.Выбрать();
	
	мСтатусГПЗакрыт = Справочники.ПРГ_СтатусыНоменклатуры.ПустаяСсылка();
	Если АП_НастройкиПодсистемы.Следующий() Тогда	
		мСтатусГПЗакрыт = АП_НастройкиПодсистемы.СтатусГПЗакрыт;	
	КонецЕсли;
	мОтказ = Ложь;
	
	//{21.09.2015 Островерхий заявка №б/н 
	///// Кунов О.В., 02.04.2015 - 38301
	//Товары.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Цена,
	//|ЦенаЗагрузки, СтавкаНДС, Коэффициент, ПЦ_ТипЦен, КП_ОСГ, ПроцентАвтоматическихСкидок,
	//|УсловиеАвтоматическойСкидки, ЗначениеУсловияАвтоматическойСкидки, ПроцентСкидкиНаценки, КП_КонтрольКратности",
	//"Количество, КоличествоМест, Сумма, СуммаНДС, СуммаЗагрузки, СуммаНДСЗагрузки"
	//);
	///// 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.ХарактеристикаНоменклатуры,
		|	Товары.СерияНоменклатуры,
		|	Товары.ЕдиницаИзмерения,
		|	Товары.ЕдиницаИзмеренияМест,
		|	Товары.Цена,
		|	Товары.ЦенаЗагрузки,
		|	Товары.СтавкаНДС,
		|	Товары.Коэффициент,
		|	Товары.ПЦ_ТипЦен,
		|	Товары.КП_ОСГ,
		|	Товары.ПроцентАвтоматическихСкидок,
		|	Товары.УсловиеАвтоматическойСкидки,
		|	Товары.ЗначениеУсловияАвтоматическойСкидки,
		|	Товары.ПроцентСкидкиНаценки,
		|	Товары.КП_КонтрольКратности,
		|	Товары.Количество,
		|	Товары.КоличествоМест,
		|	Товары.Сумма,
		|	Товары.СуммаНДС,
		|	Товары.СуммаЗагрузки,
		|	Товары.СуммаНДСЗагрузки,
		|	Товары.НомерСтроки
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТовары.Номенклатура,
		|	втТовары.ХарактеристикаНоменклатуры,
		|	втТовары.СерияНоменклатуры,
		|	втТовары.ЕдиницаИзмерения,
		|	втТовары.ЕдиницаИзмеренияМест,
		|	втТовары.Цена,
		|	втТовары.ЦенаЗагрузки,
		|	втТовары.СтавкаНДС,
		|	втТовары.Коэффициент,
		|	втТовары.ПЦ_ТипЦен,
		|	втТовары.КП_ОСГ,
		|	втТовары.ПроцентАвтоматическихСкидок,
		|	втТовары.УсловиеАвтоматическойСкидки,
		|	втТовары.ЗначениеУсловияАвтоматическойСкидки,
		|	втТовары.ПроцентСкидкиНаценки,
		|	втТовары.КП_КонтрольКратности,
		|	СУММА(втТовары.Количество) КАК Количество,
		|	СУММА(втТовары.КоличествоМест) КАК КоличествоМест,
		|	СУММА(втТовары.Сумма) КАК Сумма,
		|	СУММА(втТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(втТовары.СуммаЗагрузки) КАК СуммаЗагрузки,
		|	СУММА(втТовары.СуммаНДСЗагрузки) КАК СуммаНДСЗагрузки,
		|	спрНоменклатура.Код КАК НоменклатураКод,
		|	спрНоменклатура.Наименование КАК НоменклатураНаименование,
		|	спрНоменклатура.ПометкаУдаления КАК НоменклатураПометкаУдаления,
		|	спрНоменклатура.СтатусСКЮ КАК НоменклатураСтатусСКЮ,
		|	втТовары.НомерСтроки
		|ИЗ
		|	втТовары КАК втТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		|		ПО втТовары.Номенклатура = спрНоменклатура.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	втТовары.Номенклатура,
		|	втТовары.ХарактеристикаНоменклатуры,
		|	втТовары.СерияНоменклатуры,
		|	втТовары.ЕдиницаИзмерения,
		|	втТовары.ЕдиницаИзмеренияМест,
		|	втТовары.Цена,
		|	втТовары.ЦенаЗагрузки,
		|	втТовары.СтавкаНДС,
		|	втТовары.Коэффициент,
		|	втТовары.ПЦ_ТипЦен,
		|	втТовары.КП_ОСГ,
		|	втТовары.ПроцентАвтоматическихСкидок,
		|	втТовары.УсловиеАвтоматическойСкидки,
		|	втТовары.ЗначениеУсловияАвтоматическойСкидки,
		|	втТовары.ПроцентСкидкиНаценки,
		|	втТовары.КП_КонтрольКратности,
		|	спрНоменклатура.Код,
		|	спрНоменклатура.Наименование,
		|	спрНоменклатура.ПометкаУдаления,
		|	спрНоменклатура.СтатусСКЮ,
		|	втТовары.НомерСтроки";

	Запрос.УстановитьПараметр("Товары",Товары.Выгрузить());	
	тТовары = Запрос.Выполнить().Выгрузить();
	//21.09.2015 Островерхий} 
	
	Для каждого Стр Из тТовары Цикл	
		
		//{21.09.2015 Островерхий заявка №б/н, оптимизируем запись документа. перенесено в модуль формы 
		//m.ionov@a-prof.ru 20.02.2015
		//начало изменений Ожиганов 22.09.2015 пока оставим  
		АП_ОбщегоНазначенияКлиент.ПроверитьНаКратностьВВода(Стр, Ложь, Истина);  
		//конец изменений 
		//----m.ionov@a-prof.ru--- 
		//21.09.2015 Островерхий} 
		
		
		мСуммеЗагрузки 	= Стр.СуммаЗагрузки + (?(СуммаВключаетНДС, 0, Стр.СуммаНДСЗагрузки));
		мСуммеНакладная = Стр.Сумма + (?(СуммаВключаетНДС, 0, Стр.СуммаНДС));
		
		Если НЕ мСуммеЗагрузки = мСуммеНакладная И НЕ Стр.ЦенаЗагрузки = 0 Тогда			
			ЦеныОтличаются = Истина;
			//m.ionov@a-prof.ru 20.02.2015
			//прервать;
			//----m.ionov@a-prof.ru---
		КонецЕсли; 	
		
		//{21.09.2015 Островерхий заявка №б/н 
		//структураНоменклатура = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(Стр.Номенклатура,"Код,Наименование,СтатусСКЮ,ПометкаУдаления");
		//21.09.2015 Островерхий}
			
		//++ Spl_Апроф 06.03.2015 (k.russkih@a-prof.ru)
		Если ЗначениеЗаполнено(мСтатусГПЗакрыт) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			//{21.09.2015 Островерхий заявка №б/н 
			//Если Стр.Номенклатура.СтатусСКЮ = мСтатусГПЗакрыт Тогда
			Если Стр.НоменклатураСтатусСКЮ = мСтатусГПЗакрыт Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Строка №" + СокрЛП(Стр.НомерСтроки) + ", номенклатура " + Стр.НоменклатураНаименование + " (Код: " + СокрЛП(Стр.НоменклатураКод) + ") нельзя отгружать, т.к. она в статусе: " + СокрЛП(мСтатусГПЗакрыт));
			//21.09.2015 Островерхий} 	
				мОтказ = Истина;
			КонецЕсли; 
			
		КонецЕсли;
		
		/// Кунов О.В., 02.04.2015
		Если Стр.НоменклатураПометкаУдаления Тогда
			Сообщение = "Строка №%1, номенклатура %2 (код: %3) помечена на удаление, отгружать нельзя!";
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
				Стр.НомерСтроки, Стр.НоменклатураНаименование, СокрЛП(Стр.НоменклатураКод));
			ОбщегоНазначения.СообщитьОбОшибке(Сообщение);
			мОтказ = Истина;
		КонецЕсли;
		///
		
	КонецЦикла;
	
	Если мОтказ Тогда	
		Отказ = Истина;
		Возврат;			
	КонецЕсли; 
	//-- Spl_Апроф	
	
	////++ Spl_Апроф 05.02.2015 (k.russkih@a-prof.ru)
	//Для каждого Стр Из Товары Цикл			
	//	АП_ОбщегоНазначенияКлиент.ПроверитьНаКратностьВВода(Стр, Ложь, Истина);		
	//КонецЦикла;
	
	СуммаДокумента = Товары.Итог("СуммаЗагрузки") + ?(СуммаВключаетНДС, 0, Товары.Итог("СуммаНДСЗагрузки"));
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента, 
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");
					
		
	СтруктураОбязательныхПолей.Вставить("КП_Отделение");	
	СтруктураОбязательныхПолей.Вставить("КП_УсловиеПоставки");	
	СтруктураОбязательныхПолей.Вставить("СкладГруппа");	
	//СтруктураОбязательныхПолей.Вставить("КП_ДатаДоставки");
	СтруктураОбязательныхПолей.Вставить("Ответственный");
		   
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
    	
	//m.ionov@a-prof.ru 15.10.2014
	Если Не Отказ Тогда
		Если Не ТипЗнч(СкладГруппа) = Тип("СправочникСсылка.Склады") ИЛИ Не СкладГруппа.НСИ_ДоступенДляРезервирования Тогда	
			ОбщегоНазначения.СообщитьОбОшибке("Выбран склад отгрузки не доступный для резервирования!", Отказ, Заголовок);	
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---

	//{23.03.2017 Островерхий заявка №63689 
	ТекстОшибки = "";
	Если НЕ ПРГ_ДопФункцииКлиентСервер.ПроверитьЭтоДействующийДоговор(Дата,ДоговорКонтрагента,ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);	
	КонецЕсли; 
	//23.03.2017 Островерхий} 
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru = 'Проведение документа """ + СокрЛП(Ссылка) + """: '");
	
	//УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,      "ВалютаУправленческогоУчета",       "ВалютаУправленческогоУчета");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке(),
	ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект), мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"				, "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ИмпортированныйЗаказ"		, "Ссылка");
	//СтруктураПолей.Вставить("ДоговорКонтрагента"		, "Ссылка.ДоговорКонтрагента");
	СтруктураПолей.Вставить("Количество"				, "Количество");
	СтруктураПолей.Вставить("Сумма"						, "Сумма");
	СтруктураПолей.Вставить("СуммаНДС"					, "СуммаНДС");
	СтруктураПолей.Вставить("Период"					, "Ссылка.Дата");

	ТаблицаДвижений = ПодготовитьТаблицуДвижений(УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей), СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаДвижений, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	/// Кунов О.В., 20.03.2017 - 63050
	Если Не РольДоступна("ПолныеПрава") И Не ПараметрыСеанса.ПроведениеДокументов Тогда
		ПРГ_ДопФункцииКлиентСервер.ПроверитьЗаказНаБлокировкиПродукции(Ссылка, Товары, Отказ);
	КонецЕсли;
	///
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДвижений);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаДвижений", ТаблицаДвижений));
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуДвижений(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаДвижений = РезультатЗапросаПоТоварам.Выгрузить();
	
	Для каждого Строка Из ТаблицаДвижений Цикл
	
		Строка.Сумма = ?(СуммаВключаетНДС, Строка.Сумма, Строка.Сумма + Строка.СуммаНДС);
	
	КонецЦикла; 
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДвижений)
	
	//Движения по регистру накопления "КП_ИмпортированныеЗаказы"
	Движения.КП_ИмпортированныеЗаказы.Записывать = Истина;
	Движения.КП_ИмпортированныеЗаказы.Очистить();
	Движения.КП_ИмпортированныеЗаказы.Загрузить(ТаблицаДвижений);	
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Здесь услуг быть не должно.
	//УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	//УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	//УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	//ПроверитьСтрокиТабличнойЧасти("Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

//Проверяет заполнение реквизитов табличных частей, которые зависят от указания реквизита ВнутреннийЗаказ
Процедура  ПроверитьСтрокиТабличнойЧасти(ИмяТЧ, ТЧ, Отказ, Заголовок)
	
	//Для каждого Строка из ТЧ цикл
	//	
	//	СтрокаНачалаСообщенияОбОшибке = Нстр("ru = 'В строке номер """+ СокрЛП(Строка.НомерСтроки) + """ табличной части """ + ИмяТЧ + """: '");
	//	
	//	// Описываем механизмы проверки строк 
	//	
	//КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

		
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ОбъектКопирования.Ссылка);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("КП_Отделение");
	ПроверяемыеРеквизиты.Добавить("СкладГруппа");
	ПроверяемыеРеквизиты.Добавить("КП_ДатаДоставки");
	ПроверяемыеРеквизиты.Добавить("КП_УсловиеПоставки");
	
КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора() Экспорт

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	
	//m.ionov@a-prof.ru 18.02.2015
	//Обнулим установленную скидку
	ВремТовары = Товары.Выгрузить();
	ВремТовары.ЗаполнитьЗначения(0,"ПроцентСкидкиНаценки");
	Товары.Загрузить(ВремТовары);
	
	ПЦ_ПересчитыватьЦеныПриОтгрузке = ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке;
	//----m.ionov@a-prof.ru---

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
		//m.ionov@a-prof.ru 02.03.2015
		Если ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(ДатаОтгрузки));
		Иначе
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(Дата));
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

	КонецЕсли;	
	
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДоговорКонтрагента",мТекущийДоговорКонтрагента);
		
КонецПроцедуры // ПриИзмененииДоговора()

// Процедура вызывается при изменении значения Контрагент
//
Процедура ПриИзмененииКонтрагента() Экспорт

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);
	
	//m.ionov@a-prof.ru 23.09.2014
	Если ЗначениеЗаполнено(Контрагент.НСИ_Отделение) Тогда
		КП_Отделение = Контрагент.НСИ_Отделение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент.НСИ_УсловияПоставки) Тогда
		КП_УсловиеПоставки = Контрагент.НСИ_УсловияПоставки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент.НСИ_АП) Тогда
		Грузополучатель = Контрагент.НСИ_АП;
		
		ПриИзмененииАдресаПоставки();
	Иначе
		Грузополучатель = Справочники.АдресаПоставки.ПустаяСсылка();
	КонецЕсли;
	
	ПересчитатьЦены(Истина);
		
	//----m.ionov@a-prof.ru---
	
КонецПроцедуры // ПриИзмененииКонтрагента()

// Процедура при изменении поля ввода номенклатуры в строке табличной части "Товары".
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти) Экспорт
	
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
	
	//m.ionov@a-prof.ru 02.10.2014
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	//ПересчитатьЦеныПоСтроке(СтрокаТабличнойЧасти, Истина);
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
		//m.ionov@a-prof.ru 02.03.2015
		Если ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(ДатаОтгрузки));
		Иначе
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(Дата));
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

Процедура ПересчитатьЦены(ПересчитатьОСГ = ЛОжь) Экспорт
	
	ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДатаДокумента",ДоговорКонтрагента);
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);
	КонецЕсли;	
	//m.ionov@a-prof.ru 18.02.2015
	ПроцентСкидкиПоПредоплате = 0;
	Если ДоговорКонтрагента.ПроцентПредоплаты > 0 Тогда
		ДанныеНастройки = РегистрыСведений.АП_НастройкаПодсистемыПродаж.Получить();
		Если ДанныеНастройки.Количество() > 0 Тогда
        	ПроцентСкидкиПоПредоплате = ДанныеНастройки.ПроцентСкидкиПоПредоплате;
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//++ Spl_Апроф 15.04.2015 (k.russkih@a-prof.ru)
	ЕстьОтсрочкаПовышенияЦены = ПЦ_Ценообразование.ПроверимНаличиеДокументовПоОтсрочкеПовышенияЦены(?(ПЦ_ПересчитыватьЦеныПриОтгрузке, ДатаОтгрузки, Дата),
	//{25.03.2016 Островерхий заявка №50566 
		//Грузополучатель.Дивизион, Грузополучатель.НСИ_КаналПродаж, Контрагент, Грузополучатель.НСИ_Регион, Контрагент.НСИ_Вывеска,Грузополучатель); 
	    Контрагент.Дивизион, Контрагент.НСИ_КаналПродаж, Контрагент, Грузополучатель.НСИ_Регион, Контрагент.НСИ_Вывеска,Грузополучатель);
	//25.03.2016 Островерхий} 
																						
	//-- Spl_Апроф
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		//m.ionov@a-prof.ru 18.02.2015
		Если ДоговорКонтрагента.ПроцентПредоплаты > 0 И
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0 Тогда
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидкиПоПредоплате;
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		//++ Spl_Апроф 15.04.2015 (k.russkih@a-prof.ru) Получим дату цены, в случае если есть документ "Отсрочка повышения цены"
		Если ЕстьОтсрочкаПовышенияЦены Тогда
			
			СтрокаТабличнойЧасти.ПЦ_ДатаЦены = ПЦ_Ценообразование.ПолучимДатуЦеныПоОтсрочкеПовышенияЦены(?(ПЦ_ПересчитыватьЦеныПриОтгрузке, ДатаОтгрузки, Дата),
			//{25.03.2016 Островерхий заявка №50566 
				//Грузополучатель.Дивизион, Грузополучатель.НСИ_КаналПродаж, Контрагент, Грузополучатель.НСИ_Регион, Контрагент.НСИ_Вывеска, 
			    Контрагент.Дивизион, Контрагент.НСИ_КаналПродаж, Контрагент, Грузополучатель.НСИ_Регион, Контрагент.НСИ_Вывеска,
			//25.03.2016 Островерхий} 
				СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.Номенклатура.Проект, 
				СтрокаТабличнойЧасти.Номенклатура.НСИ_ТоварнаяКатегория, СтрокаТабличнойЧасти.Номенклатура.НСИ_Брендообъем,Грузополучатель)			
		Иначе
			СтрокаТабличнойЧасти.ПЦ_ДатаЦены = Дата(1,1,1);		
		КонецЕсли; 
		//-- Spl_Апроф
			
		ПересчитатьЦеныПоСтроке(СтрокаТабличнойЧасти);
		
		Если ПересчитатьОСГ Тогда
			СтрокаТабличнойЧасти.КП_ОСГ = АП_ОбщегоНазначенияСервер.ПолучитьСтратегиюОСГ(Контрагент, СтрокаТабличнойЧасти.Номенклатура);	
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПересчитатьЦеныПоСтроке(СтрокаТабличнойЧасти, МожноИзменитьКоличество = Ложь) Экспорт
	
	Если Ложь Тогда
		
		СтрокаТабличнойЧасти.Цена = 0;
		СтрокаТабличнойЧасти.ПЦ_ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		
		СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		
	Иначе
	
	   	//++ Spl_Апроф 15.04.2015 (k.russkih@a-prof.ru)
		мДатаЦены = ?(СтрокаТабличнойЧасти.ПЦ_ДатаЦены = Дата(1,1,1), ?(ПЦ_ПересчитыватьЦеныПриОтгрузке,КонецДня(ДатаОтгрузки),КонецДня(Дата)), СтрокаТабличнойЧасти.ПЦ_ДатаЦены);			
		//-- Spl_Апроф
		
		СпТипЦен = ПЦ_Ценообразование.ПолучитьТипЦенПродажи(мДатаЦены, 
														?(ЗначениеЗаполнено(Грузополучатель) и ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки"), Грузополучатель.НСИ_Регион, Контрагент.НСИ_Регион),
														СтрокаТабличнойЧасти.Номенклатура.Проект,
														Контрагент.НСИ_КаналПродаж,
														//?(ЗначениеЗаполнено(Грузополучатель) и ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки"), Грузополучатель.НСИ_КаналПродаж, Контрагент.НСИ_КаналПродаж),
														КП_УсловиеПоставки,//?(ЗначениеЗаполнено(Грузополучатель) и ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки"), Грузополучатель.НСИ_УсловияПоставки, Контрагент.НСИ_УсловияПоставки),
														Контрагент,
														ДоговорКонтрагента,
														Грузополучатель,
														СтрокаТабличнойЧасти.Номенклатура.НСИ_ТоварнаяКатегория,
														СтрокаТабличнойЧасти.Номенклатура.НСИ_Брендообъем,
														СтрокаТабличнойЧасти.Номенклатура,
														СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	
		Если СпТипЦен.Количество() = 1 Тогда
			СтрокаТабличнойЧасти.ПЦ_ТипЦен = СпТипЦен[0].Значение;
		ИначеЕсли СпТипЦен.Количество() = 0 Тогда
			СтрокаТабличнойЧасти.ПЦ_ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		Иначе
			ОбщегоНазначения.Сообщение("По номенклатуре " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " (код: " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура.Код) + ") найдено несколько типов цен!", СтатусСообщения.Важное);
			СтрокаТабличнойЧасти.ПЦ_ТипЦен = СпТипЦен[0].Значение;
		КонецЕсли;
	
		СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	
		Если МожноИзменитьКоличество Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		Иначе
			ПЦ_Ценообразование.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
		//m.ionov@a-prof.ru 02.03.2015
		/// Кунов О.В., 25.08.2017 - 69762
		Если ПЦ_ПересчитыватьЦеныПриОтгрузке Или ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(ДатаОтгрузки));
		ИначеЕсли ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(КП_ДатаДоставки));
		///
		Иначе
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(Дата));
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

//Проверяет необходимость расчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки() Экспорт

	//m.ionov@a-prof.ru 07.10.2014
	//Возврат Не Проведен И (мРассчитыватьАвтоматическиеСкидки = Неопределено Или мРассчитыватьАвтоматическиеСкидки);
	Возврат (мРассчитыватьАвтоматическиеСкидки = Неопределено Или мРассчитыватьАвтоматическиеСкидки);
    //----m.ionov@a-prof.ru---
	
КонецФункции

Процедура ОбновимДанныеПоСуммамЗагрузки(СтрокаТабличнойЧасти) Экспорт

	//СтрокаТабличнойЧасти.СуммаЗагрузки = СтрокаТабличнойЧасти.ЦенаЗагрузки * СтрокаТабличнойЧасти.Количество;
	
	Сумма = СтрокаТабличнойЧасти.ЦенаЗагрузки * СтрокаТабличнойЧасти.Количество;
	СуммаСкидки = 0;

	//СуммаСкидки = Сумма * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100;
		
	//СуммаСкидки = СуммаСкидки + (Сумма * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);

	СтрокаТабличнойЧасти.СуммаЗагрузки = Сумма - СуммаСкидки;	
		
	СтрокаТабличнойЧасти.СуммаНДСЗагрузки = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаЗагрузки,
	                                                   УчитыватьНДС, СуммаВключаетНДС,
	                                                   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));	

КонецПроцедуры

Процедура ПриИзмененииАдресаПоставки() Экспорт
	Если Грузополучатель = Неопределено Тогда
		ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДатаДокумента",ДоговорКонтрагента);
		Возврат;
	КонецЕсли;
	
	АдресДоставки = АП_ОбщегоНазначенияСервер.ПолучитьАдресДоставкиСтрокой(Грузополучатель, ДополнениеКАдресуДоставки);	
	
	Если ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда
		Если ПустаяСтрока(АдресДоставки) Тогда
			АдресДоставки = СокрЛП(Грузополучатель);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_УсловияПоставки) Тогда
			КП_УсловиеПоставки = Грузополучатель.НСИ_УсловияПоставки;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Отделение) Тогда//И Не ЗначениеЗаполнено(КП_Отделение) Тогда
			КП_Отделение = Грузополучатель.НСИ_Отделение;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Склад) Тогда// И Не ЗначениеЗаполнено(СкладГруппа) Тогда
			СкладГруппа = Грузополучатель.НСИ_Склад;
		КонецЕсли;
		//Если ЗначениеЗаполнено(Грузополучатель.ПТЛ_Маршрут) Тогда
		//	КП_Маршрут = Грузополучатель.ПТЛ_Маршрут;
		//КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Город) Тогда
			КП_ГородДоставки = Грузополучатель.НСИ_Город;
		КонецЕсли;
		//Если ЗначениеЗаполнено(Грузополучатель.НСИ_ЖДСтанция) Тогда
		//	КП_ЖДСтанция = Грузополучатель.НСИ_ЖДСтанция;
		//КонецЕсли; 
		//Если ЗначениеЗаполнено(Грузополучатель.ПТЛ_ТЭК) Тогда
		//	КП_ТЭК = Грузополучатель.ПТЛ_ТЭК;
		//	КомментарийАдреса = "";
		//	КП_АдресТЭК = АП_ОбщегоНазначенияСервер.ПолучитьАдресДоставкиСтрокой(КП_ТЭК, КомментарийАдреса);
		//КонецЕсли;
		//Если ЗначениеЗаполнено(Грузополучатель.ПТЛ_КомментарийДиспетчеру) Тогда
		//	КП_КомментарийКДоставке = Грузополучатель.ПТЛ_КомментарийДиспетчеру;
		//КонецЕсли;   
				
        //m.ionov@a-prof.ru 31.01.2015
		Если ЗначениеЗаполнено(ДоговорКонтрагента.НСИ_РасчетныйСчетОрганизации) Тогда
			СтруктурнаяЕдиница = ДоговорКонтрагента.НСИ_РасчетныйСчетОрганизации;
		Иначе
			СтруктурнаяЕдиница = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		//----m.ionov@a-prof.ru---
	Иначе
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_УсловияПоставки) Тогда
			КП_УсловиеПоставки = Грузополучатель.НСИ_УсловияПоставки;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Отделение) Тогда//И Не ЗначениеЗаполнено(КП_Отделение) Тогда
			КП_Отделение = Грузополучатель.НСИ_Отделение;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Склад) Тогда//И Не ЗначениеЗаполнено(СкладГруппа) Тогда
			СкладГруппа = Грузополучатель.НСИ_Склад;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Город) Тогда
			КП_ГородДоставки = Грузополучатель.НСИ_Город;
		КонецЕсли;
		//m.ionov@a-prof.ru 31.01.2015
		Если ЗначениеЗаполнено(ДоговорКонтрагента.НСИ_РасчетныйСчетОрганизации) Тогда
			СтруктурнаяЕдиница = ДоговорКонтрагента.НСИ_РасчетныйСчетОрганизации;
		Иначе
			СтруктурнаяЕдиница = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		//----m.ionov@a-prof.ru---
	КонецЕсли;
	
	ДатаОтгрузки = АП_ОбщегоНазначенияСервер.РассчитатьДатуОтгрузки(КП_ДатаДоставки, КП_Отделение, КП_УсловиеПоставки, КП_ГородДоставки, Грузополучатель);
	ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДатаДокумента",ДоговорКонтрагента);
	
	Если Не КП_Отделение = Ссылка.КП_Отделение Тогда
		Номер = "";
	КонецЕсли;
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя();

#Если Клиент Тогда
	Если мСписокФильтров = Неопределено Тогда
		мСписокФильтров = УправлениеДопПравамиПользователей.ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа();
	КонецЕсли;
#КонецЕсли
