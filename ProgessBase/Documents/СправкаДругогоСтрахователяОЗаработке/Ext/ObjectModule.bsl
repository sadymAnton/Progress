////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке() Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Дата,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Документ.Организация
	|		ИНАЧЕ Документ.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Документ.Организация,
	|	Документ.Ссылка,
	|	Документ.Сотрудник,
	|	Документ.Сотрудник.Физлицо КАК Физлицо,
	|	Документ.Страхователь,
	|	Документ.ПериодРаботыС,
	|	Документ.ПериодРаботыПо,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаработокСотрудниковУДругихСтрахователей.Регистратор ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОшибкаТакаяСправкаЕсть
	|ИЗ
	|	Документ.СправкаДругогоСтрахователяОЗаработке КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СправкаДругогоСтрахователяОЗаработке.ДанныеОЗаработке КАК СправкаДругогоСтрахователяОЗаработкеДанныеОЗаработке
	|		ПО Документ.Ссылка = СправкаДругогоСтрахователяОЗаработкеДанныеОЗаработке.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаработокСотрудниковУДругихСтрахователей КАК ЗаработокСотрудниковУДругихСтрахователей
	|		ПО Документ.Страхователь = ЗаработокСотрудниковУДругихСтрахователей.Страхователь
	|			И (ВЫБОР
	|				КОГДА Документ.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА Документ.Организация
	|				ИНАЧЕ Документ.Организация.ГоловнаяОрганизация
	|			КОНЕЦ = ЗаработокСотрудниковУДругихСтрахователей.ГоловнаяОрганизация)
	|			И Документ.Сотрудник.Физлицо = ЗаработокСотрудниковУДругихСтрахователей.ФизЛицо
	|			И (СправкаДругогоСтрахователяОЗаработкеДанныеОЗаработке.РасчетныйГод = ЗаработокСотрудниковУДругихСтрахователей.РасчетныйГод)
	|			И Документ.Ссылка <> ЗаработокСотрудниковУДругихСтрахователей.Регистратор
	|ГДЕ
	|	Документ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.Дата,
	|	Документ.Организация,
	|	Документ.Ссылка,
	|	Документ.Сотрудник,
	|	Документ.Сотрудник.Физлицо,
	|	Документ.Страхователь,
	|	ВЫБОР
	|		КОГДА Документ.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Документ.Организация
	|		ИНАЧЕ Документ.Организация.ГоловнаяОрганизация
	|	КОНЕЦ";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоДанныеОЗаработке() 

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.РасчетныйГод КАК РасчетныйГод,
	|	СУММА(Документ.Заработок) КАК Заработок,
	|	СУММА(Документ.ДнейБолезниУходаЗаДетьми) КАК ДнейБолезниУходаЗаДетьми
	|ИЗ
	|	Документ.СправкаДругогоСтрахователяОЗаработке.ДанныеОЗаработке КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &ДокументСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Документ.РасчетныйГод
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйГод";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Страхователь
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Страхователь) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан страхователь, выдавший справку!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.Страхователь = Справочники.Работодатели.ТекущийРаботодатель Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Документ предназначен для регистрации справок других страхователей наших сотрудников!", Отказ, Заголовок);
	КонецЕсли;

	// Страхователь
	Если ВыборкаПоШапкеДокумента.ОшибкаТакаяСправкаЕсть Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Справка указанного страхователя за указанные годы уже регистрировалась!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ДанныеОЗаработке" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиДанныеОЗаработке(ВыборкаПоСтрокамДокумента, Отказ, Заголовок) 

	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.РасчетныйГод) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("В данных о заработке не указан расчетный год!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуДанныеОЗаработке(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборДанныеОЗаработке)  
	
	Движение = НаборДанныеОЗаработке.Добавить();
	
	СтрокаСвойствИзДокумента = "ФизЛицо,ГоловнаяОрганизация,Страхователь";
	СтрокаСвойствИзСтрокиДокумента = "РасчетныйГод,Заработок,ДнейБолезниУходаЗаДетьми"; 
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРаботыС) И ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРаботыПо) Тогда
		
		КонецГода = Дата(ВыборкаПоСтрокамДокумента.РасчетныйГод, 12, 31);
		НачалоГода = Дата(ВыборкаПоСтрокамДокумента.РасчетныйГод, 1, 1);
		Если ВыборкаПоШапкеДокумента.ПериодРаботыПо >= НачалоГода И ВыборкаПоШапкеДокумента.ПериодРаботыС <= КонецГода Тогда
			Движение.ПериодРаботыС = Макс(НачалоГода, ВыборкаПоШапкеДокумента.ПериодРаботыС);
			Движение.ПериодРаботыПо = Мин(КонецГода, ВыборкаПоШапкеДокумента.ПериодРаботыПо);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРасчетаСреднего()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		// получим реквизиты табличной части
		ВыборкаСтрок = СформироватьЗапросПоДанныеОЗаработке().Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиДанныеОЗаработке(ВыборкаСтрок, Отказ, Заголовок);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуДанныеОЗаработке(ВыборкаПоШапкеДокумента, ВыборкаСтрок, Движения.ЗаработокСотрудниковУДругихСтрахователей);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Сотрудник	= ДанныеЗаполнения;
		Организация	= ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(Сотрудник, "ТекущееОбособленноеПодразделение");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

