Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУпрУчета Экспорт;

// Предопределенные значения справочника "КлассификаторИспользованияРабочегоВремени"
Перем КлассификаторНочноеВремя, КлассификаторВечернееВремя;

// Значения справочника Классификатор использования рабочего времени. 
Перем КлассификаторЯвка;
Перем КлассификаторНочныеЧасы;
Перем КлассификаторВечерниеЧасы;
Перем КлассификаторПустаяСсылка;
// Значение  "ПоДням" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоДням;
// Значение  "ПоЧасам" перечисления ВидыУчетаВремени
Перем ВидУчетаВремениПоЧасам;
Перем ВидУчетаВремениПоВечернимЧасам;
Перем ВидУчетаВремениПоНочнымЧасам;

// Индекс записи в наборе записей регистра сведений Графика
Перем ИндексЗаписиЯвка;
// Дата на которую происходит получение записи регистра.
Перем ДатаИндексаЗаписиЯвка;
// Количество часов работы которое проставляется для вида времени ПоДням
Перем ВремяЯвки;
// Массив строк "Первый", "Второй", "Третий" - приставки элементов табличной части документа.

Перем МассивПриставок;

//Перем ПериодРегистрации;
Перем СтруктураПоиска;

Перем РабочееВремяЗаполнено;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура предназначена для автозаполнения документа
// Если заполнен параметр сотрудники, то в табличную часть будут добавлены 
// строки по указаным сотрудникам.
Процедура Автозаполнение(Запрос = Неопределено, Сотрудник = Неопределено, ТекущаяСтрокаТабличнойЧасти = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		СтрокаВерхнегоУровняСообщений = ОбработкаКомментариев.ДобавитьСообщение("Автозаполнение документа", Перечисления.ВидыСообщений.Раздел);
		СтрокаВерхнегоУровняСообщений = Неопределено;
	#КонецЕсли 
	
	Если Запрос = Неопределено Тогда 
		
		ЗапросАвтоЗаполнения = Новый Запрос;
		
		Если Сотрудник = Неопределено Тогда
			ЗапросАвтоЗаполнения.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РаботникиОрганизаций.Сотрудник КАК Ссылка,
			|	РаботникиОрганизаций.Сотрудник.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&НачалоМесяца, Организация = &ГоловнаяОрганизация) КАК РаботникиОрганизаций
			|ГДЕ
			|	ВЫБОР
			|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизаций.ПричинаИзмененияСостоянияЗавершения
			|			ИНАЧЕ РаботникиОрганизаций.ПричинаИзмененияСостояния
			|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|	И ВЫБОР
			|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				ТОГДА РаботникиОрганизаций.ОбособленноеПодразделениеЗавершения
			|			ИНАЧЕ РаботникиОрганизаций.ОбособленноеПодразделение
			|		КОНЕЦ = &ОбособленноеПодразделение
			|	И (ВЫБОР
			|				КОГДА РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
			|						И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|					ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
			|				ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
			|			КОНЕЦ = &Подразделение
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РаботникиОрганизаций.Сотрудник,
			|	РаботникиОрганизаций.Сотрудник.Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
			|ГДЕ
			|	РаботникиОрганизаций.Период > &НачалоМесяца
			|	И РаботникиОрганизаций.Период <= &КонецМесяца
			|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|	И РаботникиОрганизаций.Организация = &ГоловнаяОрганизация
			|	И РаботникиОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
			|	И (РаботникиОрганизаций.ПодразделениеОрганизации = &Подразделение
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Работники.Сотрудник,
			|	Работники.Сотрудник.Физлицо
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК Работники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
			|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
			|			И (ПериодыПерекрытия.Период > Работники.Период)
			|			И (ПериодыПерекрытия.Сотрудник.Физлицо = Работники.Сотрудник.Физлицо)
			|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
			|ГДЕ
			|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	И Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|	И Работники.ПериодЗавершения > &НачалоМесяца
			|	И Работники.ПериодЗавершения <= &КонецМесяца
			|	И Работники.Организация = &ГоловнаяОрганизация
			|	И Работники.ОбособленноеПодразделениеЗавершения = &ОбособленноеПодразделение
			|	И (Работники.ПодразделениеОрганизацииЗавершения = &Подразделение
			|			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
			|	И ПериодыПерекрытия.Период ЕСТЬ NULL "; 
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("ОбособленноеПодразделение", Организация);
			ЗапросАвтоЗаполнения.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", ?(УчитыватьОтработанноеВремя,Ложь, Истина));
		Иначе
			ЗапросАвтоЗаполнения.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка,
			|	СотрудникиОрганизаций.Физлицо
			|ПОМЕСТИТЬ ВТСписокРаботников
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
			ЗапросАвтоЗаполнения.УстановитьПараметр("Сотрудник", Сотрудник);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Истина);
		КонецЕсли;
	Иначе
		
		ЗапросАвтоЗаполнения = Запрос;
		Если ОтражатьВУправленческомУчете Тогда
			ЗапросАвтоЗаполненияТекст = СтрЗаменить(ЗапросАвтоЗаполнения.Текст,"Сотрудники.Сотрудник КАК Сотрудник","Сотрудники.Сотрудник КАК Ссылка");
		Иначе
			ЗапросАвтоЗаполненияТекст = СтрЗаменить(ЗапросАвтоЗаполнения.Текст,"РаботникиОрганизации.Сотрудник КАК Сотрудник","РаботникиОрганизации.Сотрудник КАК Ссылка");
		КонецЕсли;
		ПозицияИндексирования = Найти(ЗапросАвтоЗаполненияТекст,"ИНДЕКСИРОВАТЬ");
		ЗапросАвтоЗаполнения.Текст = Лев(ЗапросАвтоЗаполненияТекст,ПозицияИндексирования - 1) + "
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		ЗапросАвтоЗаполнения.УстановитьПараметр("ВключатьВРезультатПустыеЗаписи", Ложь);
		
	КонецЕсли;
	
	ЗапросАвтоЗаполнения.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	ЗапросАвтоЗаполнения.УстановитьПараметр("НачалоМесяца", ПериодРегистрации);
	ЗапросАвтоЗаполнения.УстановитьПараметр("КонецМесяца", КонецМесяца(ПериодРегистрации));
	
	ЗапросАвтоЗаполнения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросАвтоЗаполнения.Выполнить();
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		Если УчитыватьОтработанноеВремя Тогда
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("ДокументСсылка", Ссылка);
			Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
				ЗапросАвтоЗаполнения.УстановитьПараметр("ДатаНачалаПериода", ДатаНачалаПериода);
				ДатаОкончанияПериода = ДатаНачалаПериода;
				ЗапросАвтоЗаполнения.УстановитьПараметр("ДатаОкончанияПериода", ДатаОкончанияПериода);
			Иначе
				ЗапросАвтоЗаполнения.УстановитьПараметр("ДатаНачалаПериода", ПериодРегистрации);
				ДатаОкончанияПериода = КонецМесяца(ПериодРегистрации);
				ЗапросАвтоЗаполнения.УстановитьПараметр("ДатаОкончанияПериода", ДатаОкончанияПериода);
			КонецЕсли;
			ЗапросАвтоЗаполнения.УстановитьПараметр("УчитыватьОтработанноеВремя", УчитыватьОтработанноеВремя);
			ЗапросАвтоЗаполнения.УстановитьПараметр("УчитыватьВремяТолькоПриРасчете", УчитыватьВремяТолькоПриРасчете);
			ЗапросАвтоЗаполнения.УстановитьПараметр("Месяц", ПериодРегистрации);
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоДням", ВидУчетаВремениПоДням);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоЧасам", ВидУчетаВремениПоЧасам);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоВечернимЧасам", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВидУчетаВремениПоНочнымЧасам", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам);
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("КлассификаторЯ", Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
			ЗапросАвтоЗаполнения.УстановитьПараметр("КлассификаторВЧ", КлассификаторВечернееВремя);
			ЗапросАвтоЗаполнения.УстановитьПараметр("КлассификаторНЧ", КлассификаторНочноеВремя);
			
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("ДокументСсылка", Ссылка);
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("СверхНормы", Перечисления.ВидыВремени.ОтработанноеСверхНормы);
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("ПоЧасам", Перечисления.ВидыУчетаВремени.ПоЧасам);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ПоВечерним", Перечисления.ВидыУчетаВремени.ПоВечернимЧасам);
			ЗапросАвтоЗаполнения.УстановитьПараметр("ПоНочным", Перечисления.ВидыУчетаВремени.ПоНочнымЧасам); 
			
			ВидыВремениУчитываемыеВВыходные = Новый Массив(2);
			ВидыВремениУчитываемыеВВыходные[0] = Перечисления.ВидыВремени.ОтработанноеСверхНормы;
			ВидыВремениУчитываемыеВВыходные[1] = Перечисления.ВидыВремени.ЦелодневноеНеотработанное;
			ЗапросАвтоЗаполнения.УстановитьПараметр("ВидыВремениУчитываемыеВВыходные", ВидыВремениУчитываемыеВВыходные);
			
			ЗапросАвтоЗаполненияТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Период
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|	КОНЕЦ КАК Период,
			|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
			|	ВЫБОР
			|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|	КОНЕЦ КАК ВидРасчета,
			|	ВЫБОР
			|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Действие
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ДействиеЗавершения
			|	КОНЕЦ КАК Действие
			|ПОМЕСТИТЬ ВТОсновныеНачисленияДляПроизводственныхНарядов
			|ИЗ
			|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
			|			&ДатаНачалаПериода,
			|			(НЕ Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИЗМЕНЯТЬ))
			|				И Сотрудник В
			|					(ВЫБРАТЬ
			|						ВТСписокРаботников.Ссылка
			|					ИЗ
			|						ВТСписокРаботников)) КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
			|		ПО (ОсновныеНачисления.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисления.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияПоказатели
			|		ПО (ОсновныеНачисленияПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.СдельнаяВыработка))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисленияПоказатели.Ссылка)
			|ГДЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
			|	И ((НЕ ОсновныеНачисления.Ссылка ЕСТЬ NULL )
			|			ИЛИ (НЕ ОсновныеНачисленияПоказатели.Ссылка ЕСТЬ NULL ))
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения,
			|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
			|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения,
			|	ПлановыеНачисленияРаботниковОрганизаций.ДействиеЗавершения
			|ИЗ
			|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
			|			&ДатаНачалаПериода,
			|			(НЕ Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИЗМЕНЯТЬ))
			|				И Сотрудник В
			|					(ВЫБРАТЬ
			|						ВТСписокРаботников.Ссылка
			|					ИЗ
			|						ВТСписокРаботников)) КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
			|		ПО (ОсновныеНачисления.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисления.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияПоказатели
			|		ПО (ОсновныеНачисленияПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.СдельнаяВыработка))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисленияПоказатели.Ссылка)
			|ГДЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения > &ДатаНачалаПериода
			|	И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <= &ДатаОкончанияПериода
			|	И ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
			|	И ((НЕ ОсновныеНачисления.Ссылка ЕСТЬ NULL )
			|			ИЛИ (НЕ ОсновныеНачисленияПоказатели.Ссылка ЕСТЬ NULL ))
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.Период,
			|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
			|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета,
			|	ПлановыеНачисленияРаботниковОрганизаций.Действие
			|ИЗ
			|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
			|		ПО (ОсновныеНачисления.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисления.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияПоказатели
			|		ПО (ОсновныеНачисленияПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.СдельнаяВыработка))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисленияПоказатели.Ссылка)
			|ГДЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник В
			|			(ВЫБРАТЬ
			|				ВТСписокРаботников.Ссылка
			|			ИЗ
			|				ВТСписокРаботников)
			|	И ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
			|	И ПлановыеНачисленияРаботниковОрганизаций.Период > &ДатаНачалаПериода
			|	И ПлановыеНачисленияРаботниковОрганизаций.Период <= &ДатаОкончанияПериода
			|	И ((НЕ ОсновныеНачисления.Ссылка ЕСТЬ NULL )
			|			ИЛИ (НЕ ОсновныеНачисленияПоказатели.Ссылка ЕСТЬ NULL ))
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения,
			|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
			|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения,
			|	ПлановыеНачисленияРаботниковОрганизаций.ДействиеЗавершения
			|ИЗ
			|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
			|		ПО (ОсновныеНачисления.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисления.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияПоказатели
			|		ПО (ОсновныеНачисленияПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.СдельнаяВыработка))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисленияПоказатели.Ссылка)
			|ГДЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник В
			|			(ВЫБРАТЬ
			|				ВТСписокРаботников.Ссылка
			|			ИЗ
			|				ВТСписокРаботников)
			|	И ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
			|	И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
			|	И ПлановыеНачисленияРаботниковОрганизаций.Период > &ДатаНачалаПериода
			|	И ПлановыеНачисленияРаботниковОрганизаций.Период <= &ДатаОкончанияПериода
			|	И ((НЕ ОсновныеНачисления.Ссылка ЕСТЬ NULL )
			|			ИЛИ (НЕ ОсновныеНачисленияПоказатели.Ссылка ЕСТЬ NULL ))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
			|	ОсновныеНачисления.Период КАК Период,
			|	МИНИМУМ(КонецОсновныеНачисления.Период) КАК КонецПериода
			|ПОМЕСТИТЬ ВТОкончанияПериодов
			|ИЗ
			|	ВТОсновныеНачисленияДляПроизводственныхНарядов КАК ОсновныеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисленияДляПроизводственныхНарядов КАК КонецОсновныеНачисления
			|		ПО (КонецОсновныеНачисления.Период > ОсновныеНачисления.Период)
			|			И ОсновныеНачисления.Сотрудник = КонецОсновныеНачисления.Сотрудник
			|
			|СГРУППИРОВАТЬ ПО
			|	ОсновныеНачисления.Сотрудник,
			|	ОсновныеНачисления.Период
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НачалаПериодов.Сотрудник КАК Сотрудник,
			|	НачалаПериодов.Период КАК НачалоПериода,
			|	ВЫБОР
			|		КОГДА ОкончанияПериодов.КонецПериода ЕСТЬ NULL 
			|			ТОГДА &ДатаОкончанияПериода
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ОкончанияПериодов.КонецПериода, СЕКУНДА, -1)
			|	КОНЕЦ КАК КонецПериода
			|ПОМЕСТИТЬ ВТПериодыОплатыПоПроизводственнымНарядам
			|ИЗ
			|	ВТОсновныеНачисленияДляПроизводственныхНарядов КАК НачалаПериодов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОкончанияПериодов КАК ОкончанияПериодов
			|		ПО (ОкончанияПериодов.Период = НачалаПериодов.Период)
			|			И (ОкончанияПериодов.Сотрудник = НачалаПериодов.Сотрудник)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";
			
			
			ЗапросАвтоЗаполнения.Текст = ЗапросАвтоЗаполненияТекст;
			ЗапросАвтоЗаполнения.Выполнить();
			
			ГодПериода = Формат(Год(ПериодРегистрации), "ЧГ=4");
			МесяцПериода = Месяц(ПериодРегистрации);
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДатаТабеля,
			|	ДЕНЬ(ДатаТабеля) КАК ИндексДня
			|ПОМЕСТИТЬ ВТДатыТабеля 
			|	ИЗ (ВЫБРАТЬ
			|		ДАТАВРЕМЯ(" + ГодПериода + ", " + МесяцПериода + " , " + День(ДатаНачалаПериода) + ") КАК ДатаТабеля
			|	";
			
			Для НомерДня = День(ДатаНачалаПериода) + 1 По День(ДатаОкончанияПериода) Цикл
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
				|  ДАТАВРЕМЯ(" + ГодПериода + ", " + МесяцПериода + " ," + НомерДня + ")
				|	";
			КонецЦикла;
			ТекстЗапроса = ТекстЗапроса + ") КАК ДатыТабеля";
			ЗапросАвтоЗаполнения.Текст = ТекстЗапроса;
			ЗапросАвтоЗаполнения.Выполнить();
			
			Если НЕ ПодразделениеОрганизации.Пустая() Тогда
				ЗапросАвтоЗаполнения.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
				ЗапросАвтоЗаполнения.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВЫБОР
				|		КОГДА РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
				|				И РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
				|			ТОГДА РаботникиОрганизаций.ПериодЗавершения
				|		ИНАЧЕ РаботникиОрганизаций.Период
				|	КОНЕЦ КАК Период,
				|	ВЫБОР
				|		КОГДА РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
				|				И РаботникиОрганизаций.ПериодЗавершения <= &НачалоМесяца
				|			ТОГДА РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения
				|		ИНАЧЕ РаботникиОрганизаций.ПодразделениеОрганизации
				|	КОНЕЦ КАК ПодразделениеОрганизации,
				|	РаботникиОрганизаций.Сотрудник КАК Сотрудник
				|ПОМЕСТИТЬ ВТКадровыеПеремещенияРаботниковОрганизаций
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
				|			&НачалоМесяца,
				|			Сотрудник В
				|				(ВЫБРАТЬ
				|					ВТСписокРаботников.Ссылка
				|				ИЗ
				|					ВТСписокРаботников)) КАК РаботникиОрганизаций
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	РаботникиОрганизаций.Период,
				|	РаботникиОрганизаций.ПодразделениеОрганизации,
				|	РаботникиОрганизаций.Сотрудник
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
				|ГДЕ
				|	РаботникиОрганизаций.Сотрудник В
				|			(ВЫБРАТЬ
				|				ВТСписокРаботников.Ссылка
				|			ИЗ
				|				ВТСписокРаботников)
				|	И РаботникиОрганизаций.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	РаботникиОрганизаций.ПериодЗавершения,
				|	РаботникиОрганизаций.ПодразделениеОрганизацииЗавершения,
				|	РаботникиОрганизаций.Сотрудник
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
				|		ПО (ПериодыПерекрытия.Период <= РаботникиОрганизаций.ПериодЗавершения)
				|			И (ПериодыПерекрытия.Период > РаботникиОрганизаций.Период)
				|			И РаботникиОрганизаций.Сотрудник = ПериодыПерекрытия.Сотрудник
				|ГДЕ
				|	РаботникиОрганизаций.Сотрудник В
				|			(ВЫБРАТЬ
				|				ВТСписокРаботников.Ссылка
				|			ИЗ
				|				ВТСписокРаботников)
				|	И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|	И РаботникиОрганизаций.ПериодЗавершения > &НачалоМесяца
				|	И РаботникиОрганизаций.ПериодЗавершения <= &КонецМесяца
				|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Сотрудник,
				|	Период,
				|	ПодразделениеОрганизации
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДатыПеремещенийРаботников.Сотрудник КАК Сотрудник,
				|	ДатыПеремещенийРаботников.ДатаТабеля КАК ДатаТабеля
				|ПОМЕСТИТЬ ВТПодразделенияСотрудников
				|ИЗ
				|	(ВЫБРАТЬ
				|		КадровыеПеремещенияРаботников.Сотрудник КАК Сотрудник,
				|		ДатыТабеля.ДатаТабеля КАК ДатаТабеля,
				|		МАКСИМУМ(КадровыеПеремещенияРаботников.Период) КАК ДатаПеремещения
				|	ИЗ
				|		ВТДатыТабеля КАК ДатыТабеля
				|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПеремещенияРаботниковОрганизаций КАК КадровыеПеремещенияРаботников
				|			ПО ДатыТабеля.ДатаТабеля >= КадровыеПеремещенияРаботников.Период
				|	
				|	СГРУППИРОВАТЬ ПО
				|		КадровыеПеремещенияРаботников.Сотрудник,
				|		ДатыТабеля.ДатаТабеля) КАК ДатыПеремещенийРаботников
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПеремещенияРаботниковОрганизаций КАК ПодразделенияРаботников
				|		ПО ДатыПеремещенийРаботников.ДатаПеремещения = ПодразделенияРаботников.Период
				|			И ДатыПеремещенийРаботников.Сотрудник = ПодразделенияРаботников.Сотрудник
				|ГДЕ
				|	ПодразделенияРаботников.ПодразделениеОрганизации В ИЕРАРХИИ(&ПодразделениеОрганизации)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Сотрудник,
				|	ДатаТабеля";
				ЗапросАвтоЗаполнения.Выполнить();
			КонецЕсли;
			
			Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
				
				// Заполнение за целый период.
				
				ЗапросАвтоЗаполненияТекст = 
				"ВЫБРАТЬ
				|	ДатыТабеля.ДатаТабеля КАК ДатаТабеля,
				|	Начисления.Сотрудник КАК Сотрудник,
				|	Начисления.ГрафикРаботы,
				|	Начисления.ВидРасчета КАК ВидРасчета,
				|	Начисления.ВидУчетаВремени,
				|	Начисления.ВидРасчета.ВидВремени КАК ВидВремени,
				|	Начисления.ПериодДействияНачало,
				|	Начисления.ПериодДействияКонец,
				|	ВЫБОР
				|		КОГДА Начисления.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
				|			ТОГДА ВЫБОР
				|					КОГДА ДатыТабеля.ДатаТабеля = Начисления.ПериодДействияНачало
				|						ТОГДА Начисления.ОтработаноЧасов
				|					ИНАЧЕ 0
				|				КОНЕЦ
				|		ИНАЧЕ NULL
				|	КОНЕЦ КАК ВремяЗаДень
				|ПОМЕСТИТЬ ВТОсновныеНачисления
				|ИЗ
				|	ВТДатыТабеля КАК ДатыТабеля
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
				|				Сотрудник В
				|					(ВЫБРАТЬ
				|						ВТСписокРаботников.Ссылка
				|					ИЗ
				|						ВТСписокРаботников)) КАК Начисления
				|		ПО (ДатыТабеля.ДатаТабеля МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
				|			И ((НЕ Начисления.Сторно))
				|			И (Начисления.ПериодДействия = &Месяц)
				|			И (Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
				|			И ((НЕ Начисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))))
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
				|				Сотрудник В
				|					(ВЫБРАТЬ
				|						ВТСписокРаботников.Ссылка
				|					ИЗ
				|						ВТСписокРаботников)) КАК СторноНачисления
				|		ПО (ДатыТабеля.ДатаТабеля МЕЖДУ СторноНачисления.ПериодДействияНачало И СторноНачисления.ПериодДействияКонец)
				|			И (СторноНачисления.Сторно)
				|			И (СторноНачисления.Сотрудник = Начисления.Сотрудник)
				|			И (СторноНачисления.ВидРасчета = Начисления.ВидРасчета)
				|			И (СторноНачисления.ПериодРегистрации > Начисления.ПериодРегистрации)
				|			И (СторноНачисления.ПериодДействия = &Месяц)
				|			И (СторноНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
				|			И ((НЕ СторноНачисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))))
				|ГДЕ
				|	СторноНачисления.Сотрудник ЕСТЬ NULL 
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Сотрудник,
				|	ДатаТабеля,
				|	ВидРасчета
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
				|	ГрафикиРаботыПоВидамВремени.Месяц КАК Месяц,
				|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
				|	ГрафикиРаботыПоВидамВремени.План КАК План,
				|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
				|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
				|	ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение,
				|	ГрафикиРаботыПоВидамВремени.Документ
				|ПОМЕСТИТЬ ВТГрафикиРаботыПоВидамВремени
				|ИЗ
				|	(ВЫБРАТЬ
				|		ВЫБОР
				|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &НачалоМесяца
				|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|				ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения
				|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы
				|		КОНЕЦ КАК ГрафикРаботы
				|	ИЗ
				|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
				|				&НачалоМесяца,
				|				Сотрудник В
				|					(ВЫБРАТЬ
				|						ВТСписокРаботников.Ссылка
				|					ИЗ
				|						ВТСписокРаботников)) КАК РаботникиОрганизацийСрезПоследних
				|	ГДЕ
				|		ВЫБОР
				|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &НачалоМесяца
				|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|					ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения
				|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы
				|			КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		РаботникиОрганизаций.ГрафикРаботы
				|	ИЗ
				|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
				|	ГДЕ
				|		РаботникиОрганизаций.Сотрудник В
				|				(ВЫБРАТЬ
				|					ВТСписокРаботников.Ссылка
				|				ИЗ
				|					ВТСписокРаботников)
				|		И РаботникиОрганизаций.Период > &НачалоМесяца
				|		И РаботникиОрганизаций.Период <= &КонецМесяца
				|		И РаботникиОрганизаций.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		Работники.ГрафикРаботыЗавершения
				|	ИЗ
				|		РегистрСведений.РаботникиОрганизаций КАК Работники
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
				|			ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
				|				И (ПериодыПерекрытия.Период > Работники.Период)
				|				И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
				|	ГДЕ
				|		Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|		И Работники.ПериодЗавершения > &НачалоМесяца
				|		И Работники.ПериодЗавершения <= &КонецМесяца
				|		И Работники.ГрафикРаботыЗавершения <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
				|		И ПериодыПерекрытия.Период ЕСТЬ NULL 
				|		И Работники.Сотрудник В
				|				(ВЫБРАТЬ
				|					ВТСписокРаботников.Ссылка
				|				ИЗ
				|					ВТСписокРаботников)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ВыбранныеСотрудники.Ссылка
				|	ИЗ
				|		ВТСписокРаботников КАК ВыбранныеСотрудники) КАК ГрафикиРаботы
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
				|		ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
				|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
				|			И (ГрафикиРаботыПоВидамВремени.Документ <> ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка))
				|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
				|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
				|			И ((НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ))
				|ГДЕ
				|	(НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL )
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ГрафикРаботы,
				|	Месяц,
				|	Дата,
				|	План,
				|	ВидУчетаВремени
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
				|	СотрудникиОрганизаций.Физлицо КАК ФизЛицо,
				|	ЕСТЬNULL(ПосчитанноеВремя.Дней, 0) КАК Дней,
				|	ЕСТЬNULL(ПосчитанноеВремя.Часов, 0) КАК Часов,
				|	ЕСТЬNULL(ПосчитанноеВремя.ЧасовВечерних, 0) КАК ЧасовВечерних,
				|	ЕСТЬNULL(ПосчитанноеВремя.ЧасовНочных, 0) КАК ЧасовНочных,
				|	ПосчитанноеВремя.ВидВремени КАК ВидВремени
				|ИЗ
				|	ВТСписокРаботников КАК СотрудникиОрганизаций
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			СотрудникиОрганизаций.Ссылка КАК Сотрудник,
				|			ЕСТЬNULL(СводныеИндивидуальныеГрафики.Дней, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоДням) КАК Дней,
				|			ЕСТЬNULL(СводныеИндивидуальныеГрафики.Часов, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоЧасам) КАК Часов,
				|			ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовВечерних, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоВечерним) КАК ЧасовВечерних,
				|			ЕСТЬNULL(СводныеИндивидуальныеГрафики.ЧасовНочных, ПосчитаннаяНормаВремени.ОсновноеЗначениеПоНочным) КАК ЧасовНочных,
				|			ПосчитаннаяНормаВремени.ОбозначениеВТабеле КАК ВидВремени
				|		ИЗ
				|			ВТСписокРаботников КАК СотрудникиОрганизаций
				|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|					ДниСотрудников.Сотрудник КАК Сотрудник,
				|					СУММА(ВЫБОР
				|							КОГДА ДневныеНеявки.ВидВремени = 1
				|								ТОГДА 0
				|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
				|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ДополнительноеЗначение, ОбщиеГрафики.ДополнительноеЗначение)
				|						КОНЕЦ) КАК ОсновноеЗначениеПоДням,
				|					СУММА(ВЫБОР
				|							КОГДА ДневныеНеявки.ВидВремени = 1
				|									И ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
				|								ТОГДА ЕСТЬNULL(ДневныеНеявки.Часов, 0)
				|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
				|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) - ЕСТЬNULL(ДневныеНеявки.Часов, 0)
				|						КОНЕЦ) КАК ОсновноеЗначениеПоЧасам,
				|					СУММА(ВЫБОР
				|							КОГДА (НЕ ДневныеНеявки.Сотрудник ЕСТЬ NULL )
				|								ТОГДА 0
				|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
				|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
				|						КОНЕЦ) КАК ОсновноеЗначениеПоВечерним,
				|					СУММА(ВЫБОР
				|							КОГДА (НЕ ДневныеНеявки.Сотрудник ЕСТЬ NULL )
				|								ТОГДА 0
				|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
				|								ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
				|						КОНЕЦ) КАК ОсновноеЗначениеПоНочным,
				|					КОЛИЧЕСТВО(ВведенныеТабеля.ГрафикРаботы) КАК ВведенныеТабеля,
				|					ДневныеНеявки.ВидРасчета КАК ВидРасчета,
				|					ДневныеНеявки.ОбозначениеВТабеле КАК ОбозначениеВТабеле,
				|					ЕСТЬNULL(ДневныеНеявки.ДействуетВесьПериод, ИСТИНА) КАК ДействуетВесьПериод
				|				ИЗ
				|					(ВЫБРАТЬ
				|						ДатыПериода.ДатаТабеля КАК Дата,
				|						РаботникиОрганизаций.Сотрудник КАК Сотрудник,
				|						МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаИзменения
				|					ИЗ
				|						ВТДатыТабеля КАК ДатыПериода
				|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
				|							ПО (РаботникиОрганизаций.Сотрудник В
				|									(ВЫБРАТЬ
				|										ВТСписокРаботников.Ссылка
				|									ИЗ
				|										ВТСписокРаботников))
				|								И (РаботникиОрганизаций.Период <= ДатыПериода.ДатаТабеля)
				|					
				|					СГРУППИРОВАТЬ ПО
				|						РаботникиОрганизаций.Сотрудник,
				|						ДатыПериода.ДатаТабеля) КАК ДниСотрудников
				|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
				|						ПО (РаботникиОрганизаций.Сотрудник = ДниСотрудников.Сотрудник)
				|							И (РаботникиОрганизаций.Период = ДниСотрудников.ДатаИзменения)
				|						ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ВведенныеТабеля
				|						ПО (ВведенныеТабеля.ГрафикРаботы = ДниСотрудников.Сотрудник)
				|							И ((НЕ ВведенныеТабеля.План))
				|							И (ВведенныеТабеля.Документ <> &ДокументСсылка)
				|							И (ВведенныеТабеля.Документ <> ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка))
				|							И (ВведенныеТабеля.Дата = ДниСотрудников.Дата)
				|							И (ВведенныеТабеля.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
				|							И (ВведенныеТабеля.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
				|							И ((НЕ &УчитыватьВремяТолькоПриРасчете))
				|						ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныеГрафики
				|						ПО (ИндивидуальныеГрафики.ГрафикРаботы = ДниСотрудников.Сотрудник)
				|							И (ИндивидуальныеГрафики.План)
				|							И (ИндивидуальныеГрафики.Дата = ДниСотрудников.Дата)
				|							И (ИндивидуальныеГрафики.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)))
				|							И (ИндивидуальныеГрафики.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации)
				|						ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ОбщиеГрафики
				|						ПО (ОбщиеГрафики.ГрафикРаботы = ВЫБОР
				|								КОГДА РаботникиОрганизаций.ПериодЗавершения <= ДниСотрудников.Дата
				|										И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|									ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения
				|								ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы
				|							КОНЕЦ)
				|							И (ОбщиеГрафики.План)
				|							И (ОбщиеГрафики.Дата = ДниСотрудников.Дата)
				|							И (ОбщиеГрафики.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)))
				|							И (ИндивидуальныеГрафики.ГрафикРаботы ЕСТЬ NULL )
				|						ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|							ДневныеНеявки.Сотрудник КАК Сотрудник,
				|							ДневныеНеявки.ПериодДействияНачало КАК ПериодДействияНачало,
				|							ДневныеНеявки.ПериодДействияКонец КАК ПериодДействияКонец,
				|							ДневныеНеявки.ДатаТабеля КАК ДатаТабеля,
				|							ВЫБОР
				|								КОГДА ВнутрисменноеВремя.ВидВремени = 0
				|									ТОГДА NULL
				|								ИНАЧЕ ДневныеНеявки.ВидРасчета
				|							КОНЕЦ КАК ВидРасчета,
				|							ВЫБОР
				|								КОГДА ВнутрисменноеВремя.ВидВремени = 0
				|									ТОГДА NULL
				|								ИНАЧЕ ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
				|							КОНЕЦ КАК ОбозначениеВТабеле,
				|							ЕСТЬNULL(ВнутрисменноеВремя.Часов, ДневныеНеявки.ВремяЗаДень) КАК Часов,
				|							ВЫБОР
				|								КОГДА (НЕ ЕСТЬNULL(ВнутрисменноеВремя.Часов, ДневныеНеявки.ВремяЗаДень) ЕСТЬ NULL )
				|									ТОГДА ЕСТЬNULL(ВнутрисменноеВремя.ВидВремени, 1)
				|								ИНАЧЕ ВнутрисменноеВремя.ВидВремени
				|							КОНЕЦ КАК ВидВремени,
				|							ВЫБОР
				|								КОГДА ВнутрисменноеВремя.ВидВремени = 0
				|									ТОГДА NULL
				|								КОГДА ДневныеНеявки.ПериодДействияНачало = &НачалоМесяца
				|										И НАЧАЛОПЕРИОДА(ДневныеНеявки.ПериодДействияКонец, ДЕНЬ) = &КонецМесяца
				|									ТОГДА ИСТИНА
				|								ИНАЧЕ ЛОЖЬ
				|							КОНЕЦ КАК ДействуетВесьПериод
				|						ИЗ
				|							ВТОсновныеНачисления КАК ДневныеНеявки
				|								ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|									ВнутрисменноеВремя.Сотрудник КАК Сотрудник,
				|									ВнутрисменноеВремя.Период КАК Период,
				|									ВнутрисменноеВремя.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
				|									ВнутрисменноеВремя.Часов КАК Часов,
				|									0 КАК ВидВремени
				|								ИЗ
				|									РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ВнутрисменноеВремя
				|								ГДЕ
				|									ВнутрисменноеВремя.Сотрудник В
				|											(ВЫБРАТЬ
				|												ВТСписокРаботников.Ссылка
				|											ИЗ
				|												ВТСписокРаботников)
				|									И НАЧАЛОПЕРИОДА(ВнутрисменноеВремя.Период, МЕСЯЦ) = &Месяц
				|								
				|								ОБЪЕДИНИТЬ ВСЕ
				|								
				|								ВЫБРАТЬ
				|									ВнутрисменноеВремя.Сотрудник,
				|									ВнутрисменноеВремя.Период,
				|									ВнутрисменноеВремя.ВидИспользованияРабочегоВремени,
				|									ВнутрисменноеВремя.Часов,
				|									1
				|								ИЗ
				|									РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ВнутрисменноеВремя
				|								ГДЕ
				|									ВнутрисменноеВремя.Сотрудник В
				|											(ВЫБРАТЬ
				|												ВТСписокРаботников.Ссылка
				|											ИЗ
				|												ВТСписокРаботников)
				|									И НАЧАЛОПЕРИОДА(ВнутрисменноеВремя.Период, МЕСЯЦ) = &Месяц) КАК ВнутрисменноеВремя
				|								ПО (ВнутрисменноеВремя.Сотрудник = ДневныеНеявки.Сотрудник)
				|									И (ВнутрисменноеВремя.Период = ДневныеНеявки.ДатаТабеля)
				|									И (ВнутрисменноеВремя.ВидИспользованияРабочегоВремени = ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени)) КАК ДневныеНеявки
				|						ПО (ДневныеНеявки.Сотрудник = ДниСотрудников.Сотрудник)
				|							И ДниСотрудников.Дата = ДневныеНеявки.ДатаТабеля
				|						ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыОплатыПоПроизводственнымНарядам КАК ПериодыОплатыПоПроизводственнымНарядам
				|						ПО (ПериодыОплатыПоПроизводственнымНарядам.Сотрудник = ДниСотрудников.Сотрудник)
				|							И (ДниСотрудников.Дата МЕЖДУ ПериодыОплатыПоПроизводственнымНарядам.НачалоПериода И ПериодыОплатыПоПроизводственнымНарядам.КонецПериода)" +
				?(ПодразделениеОрганизации.Пустая(), "", "	ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделенияСотрудников КАК ПодразделенияСотрудников
				|	ПО
				|	ПодразделенияСотрудников.Сотрудник = ДниСотрудников.Сотрудник
				|	И ПодразделенияСотрудников.ДатаТабеля = ДниСотрудников.Дата ") +
				"				ГДЕ
				|					(НЕ ПериодыОплатыПоПроизводственнымНарядам.Сотрудник ЕСТЬ NULL )" +
				?(ПодразделениеОрганизации.Пустая(), "", "	И НЕ ПодразделенияСотрудников.Сотрудник ЕСТЬ NULL") +
				"					И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
				|				
				|				СГРУППИРОВАТЬ ПО
				|					ДниСотрудников.Сотрудник,
				|					ДневныеНеявки.ВидРасчета,
				|					ДневныеНеявки.ОбозначениеВТабеле,
				|					ДневныеНеявки.ДействуетВесьПериод) КАК ПосчитаннаяНормаВремени
				|				ПО (ПосчитаннаяНормаВремени.Сотрудник = СотрудникиОрганизаций.Ссылка)
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
				|				ПО (СводныеИндивидуальныеГрафики.Сотрудник = СотрудникиОрганизаций.Ссылка)
				|					И (СводныеИндивидуальныеГрафики.Месяц = &Месяц)
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеТабеля
				|				ПО (СводныеТабеля.Сотрудник = СотрудникиОрганизаций.Ссылка)
				|					И (СводныеТабеля.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
				|					И (СводныеТабеля.Регистратор <> &ДокументСсылка)
				|					И (СводныеТабеля.Период = &Месяц)
				|					И ((НЕ &УчитыватьВремяТолькоПриРасчете))
				|		ГДЕ
				|			ПосчитаннаяНормаВремени.ВведенныеТабеля = 0
				|			И СводныеТабеля.Сотрудник ЕСТЬ NULL 
				|			И (СводныеИндивидуальныеГрафики.Сотрудник ЕСТЬ NULL 
				|					ИЛИ ПосчитаннаяНормаВремени.ДействуетВесьПериод)) КАК ПосчитанноеВремя
				|		ПО СотрудникиОрганизаций.Ссылка = ПосчитанноеВремя.Сотрудник И (ПосчитанноеВремя.ВидВремени.РабочееВремя ИЛИ ПосчитанноеВремя.ВидВремени ЕСТЬ NULL)
				|ГДЕ
				|	(&ВключатьВРезультатПустыеЗаписи
				|			ИЛИ (НЕ ПосчитанноеВремя.Часов ЕСТЬ NULL ))
				|
				|УПОРЯДОЧИТЬ ПО
				|	Сотрудник,
				|	ВидВремени";
			Иначе
				// Заполнение с разбивкой по дням.
				
				ЗапросАвтоЗаполненияТекст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
				|	ГрафикиРаботыПоВидамВремени.Месяц,
				|	ГрафикиРаботыПоВидамВремени.Дата,
				|	ГрафикиРаботыПоВидамВремени.План,
				|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
				|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
				|	ГрафикиРаботыПоВидамВремени.Документ
				|ПОМЕСТИТЬ ВТГрафикиРаботыПоВидамВремени
				|ИЗ
				|	(ВЫБРАТЬ
				|		ВЫБОР
				|			КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &НачалоМесяца
				|					И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|				ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботыЗавершения
				|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы
				|		КОНЕЦ КАК ГрафикРаботы
				|	ИЗ
				|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
				|				&НачалоМесяца,
				|				Сотрудник В
				|						(ВЫБРАТЬ
				|							ВТСписокРаботников.Ссылка
				|						ИЗ
				|							ВТСписокРаботников)
				|					И ВЫБОР
				|						КОГДА ПериодЗавершения <= &НачалоМесяца
				|								И ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|							ТОГДА ГрафикРаботыЗавершения
				|						ИНАЧЕ ГрафикРаботы
				|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)) КАК РаботникиОрганизацийСрезПоследних
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		РаботникиОрганизаций.ГрафикРаботы
				|	ИЗ
				|		РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
				|	ГДЕ
				|		РаботникиОрганизаций.Сотрудник В
				|				(ВЫБРАТЬ
				|					ВТСписокРаботников.Ссылка
				|				ИЗ
				|					ВТСписокРаботников)
				|		И РаботникиОрганизаций.Период > &НачалоМесяца
				|		И РаботникиОрганизаций.Период <= &КонецМесяца
				|		И РаботникиОрганизаций.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		Работники.ГрафикРаботыЗавершения
				|	ИЗ
				|		РегистрСведений.РаботникиОрганизаций КАК Работники
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
				|			ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
				|				И (ПериодыПерекрытия.Период > Работники.Период)
				|				И (ПериодыПерекрытия.Сотрудник.Физлицо = Работники.Сотрудник.Физлицо)
				|	ГДЕ
				|		Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|		И Работники.ПериодЗавершения > &НачалоМесяца
				|		И Работники.ПериодЗавершения <= &КонецМесяца
				|		И Работники.ГрафикРаботыЗавершения <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
				|		И ПериодыПерекрытия.Период ЕСТЬ NULL 
				|		И Работники.Сотрудник В
				|				(ВЫБРАТЬ
				|					ВТСписокРаботников.Ссылка
				|				ИЗ
				|					ВТСписокРаботников)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ВыбранныеСотрудники.Ссылка
				|	ИЗ
				|		ВТСписокРаботников КАК ВыбранныеСотрудники) КАК ГрафикиРаботы
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
				|		ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
				|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
				|			И (ГрафикиРаботыПоВидамВремени.Документ <> ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка))
				|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
				|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
				|			И ((НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ))
				|ГДЕ
				|	(НЕ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL )
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ФактическийПериодДействия.Сотрудник,
				|	ФактическийПериодДействия.ВидРасчета,
				|	ФактическийПериодДействия.НормаЧасов,
				|	ФактическийПериодДействия.ВидУчетаВремени,
				|	ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидВремени,
				|	ФактическийПериодДействия.ВидРасчета.ВидВремени КАК ПеречислениеВидВремени,
				|	ФактическийПериодДействия.ГрафикРаботы КАК ГрафикРаботы,
				|	ФактическийПериодДействия.ПериодДействияНачало,
				|	ФактическийПериодДействия.ПериодРегистрации,
				|	ФактическийПериодДействия.Сторно,
				|	ФактическийПериодДействия.ПериодДействияКонец,
				|	ФактическийПериодДействия.ОтработаноЧасов,
				|	ФактическийПериодДействия.Регистратор
				|ПОМЕСТИТЬ ВТНефильтрованныеОсновныеНачисления
				|ИЗ
				|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
				|			Сотрудник В
				|				(ВЫБРАТЬ
				|					ВТСписокРаботников.Ссылка КАК Сотрудник
				|				ИЗ
				|					ВТСписокРаботников)) КАК ФактическийПериодДействия
				|ГДЕ
				|	ФактическийПериодДействия.ПериодДействия = &Месяц
				|	И ((НЕ ФактическийПериодДействия.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)))
				|			ИЛИ ФактическийПериодДействия.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)))
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДатыТабеля.ДатаТабеля КАК ДатаТабеля,
				|	ВЫБОР
				|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
				|			ТОГДА ПлановыеНачисления.Сотрудник
				|		ИНАЧЕ Начисления.Сотрудник
				|	КОНЕЦ КАК Сотрудник,
				|	ВЫБОР
				|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
				|			ТОГДА NULL
				|		ИНАЧЕ Начисления.ГрафикРаботы
				|	КОНЕЦ КАК ГрафикРаботы,
				|	ВЫБОР
				|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
				|			ТОГДА ПлановыеНачисления.ВидРасчета
				|		ИНАЧЕ Начисления.ВидРасчета
				|	КОНЕЦ КАК ВидРасчета,
				|	ВЫБОР
				|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
				|			ТОГДА ВЫБОР
				|					КОГДА ПлановыеНачисления.ВидРасчетаИзмерение ЕСТЬ NULL 
				|						ТОГДА NULL
				|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
				|				КОНЕЦ
				|		ИНАЧЕ Начисления.ВидУчетаВремени
				|	КОНЕЦ КАК ВидУчетаВремени,
				|	ВЫБОР
				|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
				|			ТОГДА ПлановыеНачисления.ВидРасчетаИзмерение.ВидВремени
				|		ИНАЧЕ Начисления.ВидВремени
				|	КОНЕЦ КАК ВидВремени,
				|	ВЫБОР
				|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
				|			ТОГДА ВЫБОР
				|					КОГДА ПлановыеНачисления.ВидРасчетаИзмерение ЕСТЬ NULL 
				|						ТОГДА NULL
				|					ИНАЧЕ &НачалоМесяца
				|				КОНЕЦ
				|		ИНАЧЕ Начисления.ПериодДействияНачало
				|	КОНЕЦ КАК ПериодДействияНачало,
				|	ВЫБОР
				|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
				|			ТОГДА ВЫБОР
				|					КОГДА ПлановыеНачисления.ВидРасчетаИзмерение ЕСТЬ NULL 
				|						ТОГДА NULL
				|					ИНАЧЕ &КонецМесяца
				|				КОНЕЦ
				|		ИНАЧЕ Начисления.ПериодДействияКонец
				|	КОНЕЦ КАК ПериодДействияКонец,
				|	ВЫБОР
				|		КОГДА Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
				|			ТОГДА ВЫБОР
				|					КОГДА ДатыТабеля.ДатаТабеля = Начисления.ПериодДействияНачало
				|						ТОГДА Начисления.ОтработаноЧасов
				|					ИНАЧЕ 0
				|				КОНЕЦ
				|		КОГДА Начисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное)
				|			ТОГДА ВЫБОР
				|					КОГДА ДатыТабеля.ДатаТабеля = Начисления.ПериодДействияНачало
				|						ТОГДА Начисления.НормаЧасов
				|					ИНАЧЕ 0
				|				КОНЕЦ
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ПлановыеНачисления.ВидРасчетаИзмерение ЕСТЬ NULL 
				|					ТОГДА NULL
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|	КОНЕЦ КАК ВремяЗаДень,
				|	ВЫБОР
				|		КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
				|			ТОГДА ВЫБОР
				|					КОГДА ПлановыеНачисления.ВидРасчетаИзмерение ЕСТЬ NULL 
				|						ТОГДА NULL
				|					ИНАЧЕ 0
				|				КОНЕЦ
				|		ИНАЧЕ ЕСТЬNULL(ВнутрисменныеПрогулы.Часов, 0)
				|	КОНЕЦ КАК ЧасовОтклонение
				|ПОМЕСТИТЬ ВТОсновныеНачисления
				|ИЗ
				|	ВТДатыТабеля КАК ДатыТабеля
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСписокРаботников КАК СотрудникиОрганизаций
				|		ПО (ИСТИНА)
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			СотрудникиОрганизаций.Ссылка КАК Сотрудник,
				|			ПлановыеНачисления.Период КАК Период,
				|			ПлановыеНачисления.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение,
				|			ПлановыеНачисления.ВидРасчета КАК ВидРасчета,
				|			ПлановыеНачисления.Действие КАК Действие,
				|			ЕСТЬNULL(ОкончаниеПлановыхНачислений.Период, ПлановыеНачисления.ПериодЗавершения) КАК ПериодЗавершения,
				|			ЕСТЬNULL(ОкончаниеПлановыхНачислений.Действие, ПлановыеНачисления.ДействиеЗавершения) КАК ДействиеЗавершения
				|		ИЗ
				|			ВТСписокРаботников КАК СотрудникиОрганизаций
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
				|				ПО (ПлановыеНачисления.Сотрудник = СотрудникиОрганизаций.Ссылка)
				|					И (ПлановыеНачисления.ВидРасчетаИзмерение = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты))
				|					И (ВЫБОР
				|						КОГДА ПлановыеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
				|							ТОГДА &НачалоМесяца <= ПлановыеНачисления.Период
				|						КОГДА ПлановыеНачисления.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
				|							ТОГДА &КонецМесяца >= ПлановыеНачисления.Период
				|						ИНАЧЕ ПлановыеНачисления.Период <= &КонецМесяца
				|					КОНЕЦ)
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ОкончаниеПлановыхНачислений
				|				ПО (ОкончаниеПлановыхНачислений.Период <= &КонецМесяца)
				|					И (ОкончаниеПлановыхНачислений.Сотрудник = СотрудникиОрганизаций.Ссылка)
				|					И (ОкончаниеПлановыхНачислений.ВидРасчетаИзмерение = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты))
				|					И (ОкончаниеПлановыхНачислений.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить))
				|					И (ОкончаниеПлановыхНачислений.Период МЕЖДУ ПлановыеНачисления.Период И ПлановыеНачисления.ПериодЗавершения)) КАК ПлановыеНачисления
				|		ПО (ПлановыеНачисления.Сотрудник = СотрудникиОрганизаций.Ссылка)
				|			И (ВЫБОР
				|				КОГДА ПлановыеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
				|					ТОГДА ДатыТабеля.ДатаТабеля <= ПлановыеНачисления.Период
				|				КОГДА ПлановыеНачисления.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
				|					ТОГДА ДатыТабеля.ДатаТабеля >= ПлановыеНачисления.Период
				|				ИНАЧЕ ДатыТабеля.ДатаТабеля МЕЖДУ ПлановыеНачисления.Период И ДОБАВИТЬКДАТЕ(ПлановыеНачисления.ПериодЗавершения, ДЕНЬ, -1)
				|			КОНЕЦ)
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ВТДатыТабеля.ДатаТабеля КАК ДатаТабеля,
				|			Начисления.Сотрудник КАК Сотрудник,
				|			Начисления.ГрафикРаботы КАК ГрафикРаботы,
				|			Начисления.ВидРасчета КАК ВидРасчета,
				|			Начисления.ВидУчетаВремени КАК ВидУчетаВремени,
				|			Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
				|			Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
				|			Начисления.ПеречислениеВидВремени КАК ВидВремени,
				|			Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
				|			Начисления.НормаЧасов КАК НормаЧасов,
				|			Начисления.Регистратор КАК Регистратор
				|		ИЗ
				|			ВТДатыТабеля КАК ВТДатыТабеля
				|				ЛЕВОЕ СОЕДИНЕНИЕ ВТНефильтрованныеОсновныеНачисления КАК Начисления
				|				ПО (ВТДатыТабеля.ДатаТабеля МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
				|					И ((НЕ Начисления.Сторно))
				|					И (Начисления.Регистратор <> &ДокументСсылка)
				|				ЛЕВОЕ СОЕДИНЕНИЕ ВТНефильтрованныеОсновныеНачисления КАК СторноНачисления
				|				ПО (ВТДатыТабеля.ДатаТабеля МЕЖДУ СторноНачисления.ПериодДействияНачало И СторноНачисления.ПериодДействияКонец)
				|					И (СторноНачисления.Сторно)
				|					И (СторноНачисления.Сотрудник = Начисления.Сотрудник)
				|					И (СторноНачисления.ВидРасчета = Начисления.ВидРасчета)
				|					И (СторноНачисления.ПериодРегистрации > Начисления.ПериодРегистрации)
				|		ГДЕ
				|			СторноНачисления.Сотрудник ЕСТЬ NULL 
				|			И Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
				|			И ((НЕ Начисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы)))
				|					ИЛИ Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)))) КАК Начисления
				|		ПО ДатыТабеля.ДатаТабеля = Начисления.ДатаТабеля
				|			И (СотрудникиОрганизаций.Ссылка = Начисления.Сотрудник)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ВнутрисменныеПрогулы
				|		ПО (ВнутрисменныеПрогулы.Сотрудник = Начисления.Сотрудник)
				|			И (ВнутрисменныеПрогулы.Период = ДатыТабеля.ДатаТабеля)
				|			И ((НЕ ВнутрисменныеПрогулы.ВидИспользованияРабочегоВремени.РабочееВремя))
				|			И (Начисления.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы)))
				|ГДЕ
				|	(НЕ ВЫБОР
				|				КОГДА Начисления.ВидРасчета ЕСТЬ NULL 
				|					ТОГДА ПлановыеНачисления.Сотрудник
				|				ИНАЧЕ Начисления.Сотрудник
				|			КОНЕЦ ЕСТЬ NULL )
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Сотрудник,
				|	ДатаТабеля,
				|	ВидРасчета
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ВТОсновныеНачисления.ДатаТабеля,
				|	ВТОсновныеНачисления.Сотрудник,
				|	ВТОсновныеНачисления.ГрафикРаботы,
				|	ВТОсновныеНачисления.ВидРасчета,
				|	ВТОсновныеНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ОбозначениеВТабелеУчетаРабочегоВремени,
				|	ВТОсновныеНачисления.ВидВремени,
				|	ВТОсновныеНачисления.ПериодДействияНачало,
				|	ВТОсновныеНачисления.ПериодДействияКонец,
				|	ВТОсновныеНачисления.ВремяЗаДень,
				|	ВТОсновныеНачисления.ВидУчетаВремени,
				|	ВТОсновныеНачисления.ЧасовОтклонение
				|ПОМЕСТИТЬ ВТОтредактированныеНачисления
				|ИЗ
				|	ВТОсновныеНачисления КАК ВТОсновныеНачисления
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	ВТОсновныеНачисления.ДатаТабеля,
				|	ВТОсновныеНачисления.Сотрудник,
				|	ЕСТЬNULL(ГрафикиРаботы.ГрафикРаботы, РаботникиОрганизаций.ГрафикРаботы),
				|	""ПланируемаяЯвка"",
				|	NULL,
				|	NULL,
				|	ВТОсновныеНачисления.ПериодДействияНачало,
				|	ВТОсновныеНачисления.ПериодДействияКонец,
				|	0,
				|	ВТОсновныеНачисления.ВидУчетаВремени,
				|	СУММА(ВЫБОР
				|			КОГДА ВТОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное)
				|				ТОГДА ВТОсновныеНачисления.ВремяЗаДень
				|			ИНАЧЕ 0
				|		КОНЕЦ)
				|ИЗ
				|	ВТОсновныеНачисления КАК ВТОсновныеНачисления
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисления КАК Явки
				|		ПО (Явки.ДатаТабеля = ВТОсновныеНачисления.ДатаТабеля)
				|			И (Явки.Сотрудник = ВТОсновныеНачисления.Сотрудник)
				|			И (Явки.ГрафикРаботы = ВТОсновныеНачисления.ГрафикРаботы
				|				ИЛИ Явки.ГрафикРаботы = ВТОсновныеНачисления.Сотрудник)
				|			И (Явки.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы))
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ДатыПериода.ДатаТабеля КАК Дата,
				|			РаботникиОрганизаций.Сотрудник КАК Сотрудник,
				|			МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаИзменения
				|		ИЗ
				|			ВТДатыТабеля КАК ДатыПериода
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
				|				ПО (РаботникиОрганизаций.Сотрудник В
				|						(ВЫБРАТЬ
				|							ВТСписокРаботников.Ссылка
				|						ИЗ
				|							ВТСписокРаботников))
				|					И (РаботникиОрганизаций.Период <= ДатыПериода.ДатаТабеля)
				|		
				|		СГРУППИРОВАТЬ ПО
				|			РаботникиОрганизаций.Сотрудник,
				|			ДатыПериода.ДатаТабеля) КАК ДниСотрудников
				|		ПО (ДниСотрудников.Сотрудник = ВТОсновныеНачисления.Сотрудник)
				|			И (ДниСотрудников.Дата = ВТОсновныеНачисления.ДатаТабеля)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
				|		ПО (РаботникиОрганизаций.Сотрудник = ДниСотрудников.Сотрудник)
				|			И (РаботникиОрганизаций.Период = ДниСотрудников.ДатаИзменения)
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
				|		ПО (ГрафикиРаботы.ГрафикРаботы = ВТОсновныеНачисления.ГрафикРаботы)
				|			И (ГрафикиРаботы.Дата = ВТОсновныеНачисления.ДатаТабеля)
				|			И (ГрафикиРаботы.ВидУчетаВремени = ВТОсновныеНачисления.ВидУчетаВремени)
				|ГДЕ
				|	Явки.Сотрудник ЕСТЬ NULL 
				|	И ВТОсновныеНачисления.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
				|
				|СГРУППИРОВАТЬ ПО
				|	ВТОсновныеНачисления.ДатаТабеля,
				|	ВТОсновныеНачисления.Сотрудник,
				|	ЕСТЬNULL(ГрафикиРаботы.ГрафикРаботы, РаботникиОрганизаций.ГрафикРаботы),
				|	ВТОсновныеНачисления.ПериодДействияНачало,
				|	ВТОсновныеНачисления.ПериодДействияКонец,
				|	ВТОсновныеНачисления.ВидУчетаВремени
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Сотрудники.Ссылка КАК Сотрудник,
				|	Сотрудники.ФизЛицо КАК ФизЛицо,
				|	ДниСотрудников.Дата,
				|	ДЕНЬ(ДниСотрудников.Дата) КАК День,
				|	ДниСотрудников.ВидВремени КАК БукваВидаВремени,
				|	СУММА(ВЫБОР
				|			КОГДА ДниСотрудников.ВидВремени.РабочееВремя
				|				ТОГДА ДниСотрудников.ОсновноеЗначение
				|			ИНАЧЕ 0
				|		КОНЕЦ) КАК ОсновноеЗначение
				|ИЗ
				|	ВТСписокРаботников КАК Сотрудники
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			ДниСотрудников.Сотрудник КАК Сотрудник,
				|			ДниСотрудников.Дата КАК Дата,
				|			ВЫБОР
				|				КОГДА ДневныеНеявки.ВидРасчета ЕСТЬ НЕ NULL 
				|						И ДневныеНеявки.ВидРасчета <> ""ПланируемаяЯвка""
				|						И (ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
				|							ИЛИ ДневныеНеявки.ВидРасчета.ВидВремени В (&ВидыВремениУчитываемыеВВыходные)
				|								И (НЕ ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))))
				|					ТОГДА ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
				|				КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
				|					ТОГДА ВЫБОР
				|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
				|								ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
				|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
				|								ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
				|							КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ВидУчетаВремени, ОбщиеГрафики.ВидУчетаВремени) = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
				|								ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
				|						КОНЕЦ
				|			КОНЕЦ КАК ВидВремени,
				|			ВЫБОР
				|				КОГДА (НЕ ДневныеНеявки.ВремяЗаДень ЕСТЬ NULL )
				|						И ДневныеНеявки.ВидРасчета <> ""ПланируемаяЯвка""
				|						И (ДневныеНеявки.ВремяЗаДень > 0
				|							ИЛИ ДневныеНеявки.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты))
				|					ТОГДА ДневныеНеявки.ВремяЗаДень
				|				КОГДА (НЕ ДневныеНеявки.ВидРасчета ЕСТЬ NULL )
				|						И ДневныеНеявки.ВидРасчета <> ""ПланируемаяЯвка""
				|						И (ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
				|							ИЛИ ДневныеНеявки.ВидРасчета.ВидВремени В (&ВидыВремениУчитываемыеВВыходные)
				|								И (НЕ ДневныеНеявки.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы))))
				|					ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ЕСТЬNULL(ОбщиеГрафики.ОсновноеЗначение, 0)) - ДневныеНеявки.ЧасовОтклонение
				|				КОГДА ДневныеНеявки.ВидРасчета = ""ПланируемаяЯвка""
				|					ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) - ДневныеНеявки.ЧасовОтклонение
				|				КОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0
				|					ТОГДА ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение)
				|			КОНЕЦ КАК ОсновноеЗначение
				|		ИЗ
				|			(ВЫБРАТЬ
				|				ДатыПериода.Дата КАК Дата,
				|				РаботникиОрганизаций.Сотрудник КАК Сотрудник,
				|				МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаИзменения
				|			ИЗ
				|				(ВЫБРАТЬ
				|					ГрафикиРаботыПоВидамВремени.Дата КАК Дата
				|				ИЗ
				|					ВТГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
				|				ГДЕ
				|					ГрафикиРаботыПоВидамВремени.План
				|					И ГрафикиРаботыПоВидамВремени.Дата >= &НачалоМесяца
				|					И ГрафикиРаботыПоВидамВремени.Дата <= &КонецМесяца
				|				
				|				СГРУППИРОВАТЬ ПО
				|					ГрафикиРаботыПоВидамВремени.Дата) КАК ДатыПериода
				|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
				|					ПО (РаботникиОрганизаций.Сотрудник В
				|							(ВЫБРАТЬ
				|								ВТСписокРаботников.Ссылка
				|							ИЗ
				|								ВТСписокРаботников))
				|						И (РаботникиОрганизаций.Период <= ДатыПериода.Дата)
				|			
				|			СГРУППИРОВАТЬ ПО
				|				РаботникиОрганизаций.Сотрудник,
				|				ДатыПериода.Дата) КАК ДниСотрудников
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
				|				ПО (РаботникиОрганизаций.Сотрудник = ДниСотрудников.Сотрудник)
				|					И (РаботникиОрганизаций.Период = ДниСотрудников.ДатаИзменения)
				|				ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ВведенныеТабеля
				|				ПО (ВведенныеТабеля.ГрафикРаботы = ДниСотрудников.Сотрудник)
				|					И ((НЕ ВведенныеТабеля.План))
				|					И (ВведенныеТабеля.Дата = ДниСотрудников.Дата)
				|					И (ВведенныеТабеля.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
				|						ИЛИ ВведенныеТабеля.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
				|							И ВведенныеТабеля.ОсновноеЗначение > 0)
				|					И (ВведенныеТабеля.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации
				|						ИЛИ ВведенныеТабеля.Документ ССЫЛКА Документ.СдельныйНаряд)
				|					И ((НЕ ВведенныеТабеля.Документ = ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка)))
				|					И ((НЕ ВведенныеТабеля.Документ = ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка)))
				|					И ((НЕ &УчитыватьВремяТолькоПриРасчете))
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
				|				ПО (СводныеИндивидуальныеГрафики.Сотрудник = ДниСотрудников.Сотрудник)
				|					И (СводныеИндивидуальныеГрафики.Месяц = &Месяц)
				|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеТабеля
				|				ПО (СводныеТабеля.Сотрудник = ДниСотрудников.Сотрудник)
				|					И (СводныеТабеля.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
				|					И (СводныеТабеля.Регистратор <> &ДокументСсылка)
				|					И (СводныеТабеля.Период = &Месяц)
				|					И ((НЕ &УчитыватьВремяТолькоПриРасчете))
				|				ЛЕВОЕ СОЕДИНЕНИЕ ВТОтредактированныеНачисления КАК ДневныеНеявки
				|				ПО ДниСотрудников.Сотрудник = ДневныеНеявки.Сотрудник
				|					И ДниСотрудников.Дата = ДневныеНеявки.ДатаТабеля
				|				ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныеГрафики
				|				ПО (ИндивидуальныеГрафики.ГрафикРаботы = ДниСотрудников.Сотрудник)
				|					И (ИндивидуальныеГрафики.План)
				|					И (ИндивидуальныеГрафики.Дата = ДниСотрудников.Дата)
				|					И (ИндивидуальныеГрафики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
				|						ИЛИ ИндивидуальныеГрафики.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
				|							И ИндивидуальныеГрафики.ОсновноеЗначение > 0)
				|					И (ИндивидуальныеГрафики.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации)
				|					И (ДневныеНеявки.ВидРасчета ЕСТЬ NULL 
				|						ИЛИ ИндивидуальныеГрафики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
				|				ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ОбщиеГрафики
				|				ПО (ОбщиеГрафики.ГрафикРаботы = ВЫБОР
				|						КОГДА РаботникиОрганизаций.ПериодЗавершения <= ДниСотрудников.Дата
				|								И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|							ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения
				|						ИНАЧЕ РаботникиОрганизаций.ГрафикРаботы
				|					КОНЕЦ)
				|					И (ОбщиеГрафики.План)
				|					И (ОбщиеГрафики.Дата = ДниСотрудников.Дата)
				|					И (ОбщиеГрафики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
				|						ИЛИ ОбщиеГрафики.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
				|							И ОбщиеГрафики.ОсновноеЗначение > 0)
				|					И (ИндивидуальныеГрафики.ГрафикРаботы ЕСТЬ NULL )
				|					И (ДневныеНеявки.ВидРасчета ЕСТЬ NULL 
				|						ИЛИ ОбщиеГрафики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
				|				ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыОплатыПоПроизводственнымНарядам КАК ПериодыОплатыПоПроизводственнымНарядам
				|				ПО (ПериодыОплатыПоПроизводственнымНарядам.Сотрудник = ДниСотрудников.Сотрудник)
				|					И (ДниСотрудников.Дата МЕЖДУ ПериодыОплатыПоПроизводственнымНарядам.НачалоПериода И ПериодыОплатыПоПроизводственнымНарядам.КонецПериода)" + 
				?(ПодразделениеОрганизации.Пустая(), "", "	ЛЕВОЕ СОЕДИНЕНИЕ ВТПодразделенияСотрудников КАК ПодразделенияСотрудников
				|	ПО
				|	ПодразделенияСотрудников.Сотрудник = ДниСотрудников.Сотрудник
				|	И ПодразделенияСотрудников.ДатаТабеля = ДниСотрудников.Дата ") +
				"		ГДЕ
				|			РаботникиОрганизаций.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)" +
				?(ПодразделениеОрганизации.Пустая(), "", "	И НЕ ПодразделенияСотрудников.Сотрудник ЕСТЬ NULL") +
				"			И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
				|			И (НЕ ПериодыОплатыПоПроизводственнымНарядам.Сотрудник ЕСТЬ NULL )
				|			И СводныеТабеля.НомерСтроки ЕСТЬ NULL 
				|			И ВведенныеТабеля.ГрафикРаботы ЕСТЬ NULL 
				|			И СводныеИндивидуальныеГрафики.НомерСтроки ЕСТЬ NULL 
				|			И ((НЕ ДневныеНеявки.ВидРасчета ЕСТЬ NULL )
				|					ИЛИ ДневныеНеявки.ВидРасчета ЕСТЬ NULL 
				|						И ЕСТЬNULL(ИндивидуальныеГрафики.ОсновноеЗначение, ОбщиеГрафики.ОсновноеЗначение) > 0)) КАК ДниСотрудников
				|		ПО ((НЕ ДниСотрудников.ВидВремени ЕСТЬ NULL ))
				|			И (ДниСотрудников.Сотрудник = Сотрудники.Ссылка)
				|ГДЕ
				|	(&ВключатьВРезультатПустыеЗаписи
				|			ИЛИ (НЕ ДниСотрудников.ОсновноеЗначение ЕСТЬ NULL )) И ДниСотрудников.ВидВремени.РабочееВремя
				|
				|СГРУППИРОВАТЬ ПО
				|	Сотрудники.Ссылка,
				|	Сотрудники.ФизЛицо,
				|	ДниСотрудников.Дата,
				|	ДниСотрудников.ВидВремени
				|
				|УПОРЯДОЧИТЬ ПО
				|	Сотрудник,
				|	День";
				
			КонецЕсли;
			
			ЗапросАвтоЗаполнения.Текст = ЗапросАвтоЗаполненияТекст;
			РезультатЗапроса = ЗапросАвтоЗаполнения.Выполнить();
			
			Если Сотрудник = Неопределено Тогда
				Исполнители.Очистить();
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Количество() > 0 Тогда
				
				Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
					ИЛИ СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
					// по дням.
					
					ВведенныеТабеляПоДнямПоСотруднику = Новый Соответствие;
					Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
						
						ВведенныеТабеляПоДнямПоСотруднику.Очистить();
						Если ТекущаяСтрокаТабличнойЧасти = Неопределено Тогда
							СтрокаРасшифровкиПоДням = Исполнители.Добавить();
						Иначе
							СтрокаРасшифровкиПоДням = ТекущаяСтрокаТабличнойЧасти;
							Для ИндексДня = 1 По 31 Цикл
								
								ТекущаяСтрокаТабличнойЧасти["ПервыйВидВремени" + Строка(ИндексДня)] = КлассификаторПустаяСсылка;
								ТекущаяСтрокаТабличнойЧасти["ВторойВидВремени" + Строка(ИндексДня)] = КлассификаторПустаяСсылка;
								ТекущаяСтрокаТабличнойЧасти["ТретийВидВремени" + Строка(ИндексДня)] = КлассификаторПустаяСсылка;
								ТекущаяСтрокаТабличнойЧасти["ПервыйЧасов" + Строка(ИндексДня)] = 0;
								ТекущаяСтрокаТабличнойЧасти["ВторойЧасов" + Строка(ИндексДня)] = 0;
								ТекущаяСтрокаТабличнойЧасти["ТретийЧасов" + Строка(ИндексДня)] = 0;
								
							КонецЦикла;
						КонецЕсли;
						СтрокаРасшифровкиПоДням.Сотрудник = Выборка.Сотрудник;
						СтрокаРасшифровкиПоДням.ФизЛицо = Выборка.ФизЛицо;
						СтрокаРасшифровкиПоДням.КТУ = 1;
						СтрокаРасшифровкиПоДням.ОтработаноЧасов = 0;
						СтрокаРасшифровкиПоДням.ОтработаноДней = 0;
						Если Выборка.День <> NULL Тогда
							
							Пока Выборка.СледующийПоЗначениюПоля("День") Цикл
								
								ИндексЯчейкиВТаблице = Выборка.День;
								ИндексМассиваПриставок = 0;
								Пока Выборка.Следующий() Цикл 
									
									Если ИндексМассиваПриставок > 2 Тогда
										// На данный момент мы можем вводить только 3 вида времени в один день
										Прервать;
									КонецЕсли;
									НазваниеЯчейкиВБазе = МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+Строка(ИндексЯчейкиВТаблице);
									СтрокаРасшифровкиПоДням[НазваниеЯчейкиВБазе] = Выборка.БукваВидаВремени;
									НазваниеЯчейкиВБазе = МассивПриставок[ИндексМассиваПриставок]+"Часов"+Строка(ИндексЯчейкиВТаблице);
									СтрокаРасшифровкиПоДням[НазваниеЯчейкиВБазе] = Выборка.ОсновноеЗначение;
									
									Если Выборка.БукваВидаВремени <> КлассификаторНочноеВремя И 
										Выборка.БукваВидаВремени <> КлассификаторВечернееВремя Тогда
										
										СтрокаРасшифровкиПоДням.ОтработаноЧасов = СтрокаРасшифровкиПоДням.ОтработаноЧасов + Выборка.ОсновноеЗначение;
										СтрокаРасшифровкиПоДням.ОтработаноДней = СтрокаРасшифровкиПоДням.ОтработаноДней + ?(Выборка.ОсновноеЗначение > 0, 1, 0);
										
									КонецЕсли;
									
									ИндексМассиваПриставок = ИндексМассиваПриставок + 1;
									
								КонецЦикла;
							КонецЦикла;
						КонецЕсли;
						
						Если УчитыватьТариф Тогда
							СтрокаРасшифровкиПоДням.Тариф = РасчетТарифнойСтавкиСотрудника(Выборка.Сотрудник, Дата, ПериодРегистрации);
						КонецЕсли; 
						
					КонецЦикла;
				Иначе
					// в целом за период
					
					Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
						
						
						КоличествоЗаписей = 1;
						Если ТекущаяСтрокаТабличнойЧасти = Неопределено Тогда
							СтрокаТабличнойЧасти = Исполнители.Добавить();
						Иначе
							СтрокаТабличнойЧасти = ТекущаяСтрокаТабличнойЧасти;
						КонецЕсли;
						СтрокаТабличнойЧасти.Сотрудник = Выборка.Сотрудник;
						СтрокаТабличнойЧасти.ФизЛицо = Выборка.ФизЛицо;
						СтрокаТабличнойЧасти.КТУ = 1;
						
						Пока Выборка.Следующий() Цикл
							Если Выборка.ВидВремени = NULL Тогда
								
								Если КоличествоЗаписей < 6 Тогда
									СтрокаТабличнойЧасти["ВидВремени" + Строка(КоличествоЗаписей)] = КлассификаторЯвка;
									СтрокаТабличнойЧасти["Дней" + Строка(КоличествоЗаписей)] = Выборка.Дней;
									СтрокаТабличнойЧасти["Часов" + Строка(КоличествоЗаписей)] = Выборка.Часов;
									КоличествоЗаписей = КоличествоЗаписей + 1;
								КонецЕсли;
								
								Если КоличествоЗаписей < 6  И Выборка.ЧасовВечерних > 0 Тогда
									СтрокаТабличнойЧасти["ВидВремени"+Строка(КоличествоЗаписей)] = КлассификаторВечерниеЧасы;
									СтрокаТабличнойЧасти["Часов" + Строка(КоличествоЗаписей)] = Выборка.ЧасовВечерних;
									КоличествоЗаписей = КоличествоЗаписей + 1;
								КонецЕсли;
								
								Если КоличествоЗаписей < 6  И Выборка.ЧасовНочных > 0 Тогда
									СтрокаТабличнойЧасти["ВидВремени"+Строка(КоличествоЗаписей)] = КлассификаторНочныеЧасы;
									СтрокаТабличнойЧасти["Часов" + Строка(КоличествоЗаписей)] = Выборка.ЧасовНочных;
									КоличествоЗаписей = КоличествоЗаписей + 1;
								КонецЕсли;
							Иначе
								Если КоличествоЗаписей < 6 Тогда
									СтрокаТабличнойЧасти["ВидВремени"+Строка(КоличествоЗаписей)] = Выборка.ВидВремени;
									СтрокаТабличнойЧасти["Дней" + Строка(КоличествоЗаписей)] = Выборка.Дней;
									СтрокаТабличнойЧасти["Часов" + Строка(КоличествоЗаписей)] = Выборка.Часов;
									КоличествоЗаписей = КоличествоЗаписей + 1;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Если УчитыватьТариф Тогда
							СтрокаТабличнойЧасти.Тариф = РасчетТарифнойСтавкиСотрудника(Выборка.Сотрудник, Дата, ПериодРегистрации);
						КонецЕсли; 
						
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;	
			
		Иначе
			
			
			ЗапросАвтоЗаполненияТекст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Период
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения
			|	КОНЕЦ КАК Период,
			|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
			|	ВЫБОР
			|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|	КОНЕЦ КАК ВидРасчета,
			|	ВЫБОР
			|		КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА ПлановыеНачисленияРаботниковОрганизаций.Действие
			|		ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ДействиеЗавершения
			|	КОНЕЦ КАК Действие
			|ПОМЕСТИТЬ ВТОсновныеНачисленияДляПроизводственныхНарядов
			|ИЗ
			|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
			|			&ДатаНачалаПериода,
			|			(НЕ Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИЗМЕНЯТЬ))
			|				И Сотрудник В
			|					(ВЫБРАТЬ
			|						ВТСписокРаботников.Ссылка
			|					ИЗ
			|						ВТСписокРаботников)) КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
			|		ПО (ОсновныеНачисления.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисления.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияПоказатели
			|		ПО (ОсновныеНачисленияПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.СдельнаяВыработка))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисленияПоказатели.Ссылка)
			|ГДЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
			|	И ((НЕ ОсновныеНачисления.Ссылка ЕСТЬ NULL )
			|			ИЛИ (НЕ ОсновныеНачисленияПоказатели.Ссылка ЕСТЬ NULL ))
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения,
			|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
			|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения,
			|	ПлановыеНачисленияРаботниковОрганизаций.ДействиеЗавершения
			|ИЗ
			|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
			|			&ДатаНачалаПериода,
			|			(НЕ Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.НеИЗМЕНЯТЬ))
			|				И Сотрудник В
			|					(ВЫБРАТЬ
			|						ВТСписокРаботников.Ссылка
			|					ИЗ
			|						ВТСписокРаботников)) КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
			|		ПО (ОсновныеНачисления.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисления.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияПоказатели
			|		ПО (ОсновныеНачисленияПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.СдельнаяВыработка))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисленияПоказатели.Ссылка)
			|ГДЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения > &ДатаНачалаПериода
			|	И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <= &ДатаОкончанияПериода
			|	И ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
			|	И ((НЕ ОсновныеНачисления.Ссылка ЕСТЬ NULL )
			|			ИЛИ (НЕ ОсновныеНачисленияПоказатели.Ссылка ЕСТЬ NULL ))
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.Период,
			|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
			|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета,
			|	ПлановыеНачисленияРаботниковОрганизаций.Действие
			|ИЗ
			|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
			|		ПО (ОсновныеНачисления.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисления.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияПоказатели
			|		ПО (ОсновныеНачисленияПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.СдельнаяВыработка))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисленияПоказатели.Ссылка)
			|ГДЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник В
			|			(ВЫБРАТЬ
			|				ВТСписокРаботников.Ссылка
			|			ИЗ
			|				ВТСписокРаботников)
			|	И ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
			|	И ПлановыеНачисленияРаботниковОрганизаций.Период > &ДатаНачалаПериода
			|	И ПлановыеНачисленияРаботниковОрганизаций.Период <= &ДатаОкончанияПериода
			|	И ((НЕ ОсновныеНачисления.Ссылка ЕСТЬ NULL )
			|			ИЛИ (НЕ ОсновныеНачисленияПоказатели.Ссылка ЕСТЬ NULL ))
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения,
			|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
			|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения,
			|	ПлановыеНачисленияРаботниковОрганизаций.ДействиеЗавершения
			|ИЗ
			|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
			|		ПО (ОсновныеНачисления.Ссылка.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисления.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияПоказатели
			|		ПО (ОсновныеНачисленияПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.СдельнаяВыработка))
			|			И (ВЫБОР
			|				КОГДА ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета
			|				ИНАЧЕ ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения
			|			КОНЕЦ = ОсновныеНачисленияПоказатели.Ссылка)
			|ГДЕ
			|	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник В
			|			(ВЫБРАТЬ
			|				ВТСписокРаботников.Ссылка
			|			ИЗ
			|				ВТСписокРаботников)
			|	И ПлановыеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
			|	И ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
			|	И ПлановыеНачисленияРаботниковОрганизаций.Период > &ДатаНачалаПериода
			|	И ПлановыеНачисленияРаботниковОрганизаций.Период <= &ДатаОкончанияПериода
			|	И ((НЕ ОсновныеНачисления.Ссылка ЕСТЬ NULL )
			|			ИЛИ (НЕ ОсновныеНачисленияПоказатели.Ссылка ЕСТЬ NULL ))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
			|	ОсновныеНачисления.Период КАК Период,
			|	МИНИМУМ(КонецОсновныеНачисления.Период) КАК КонецПериода
			|ПОМЕСТИТЬ ВТОкончанияПериодов
			|ИЗ
			|	ВТОсновныеНачисленияДляПроизводственныхНарядов КАК ОсновныеНачисления
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисленияДляПроизводственныхНарядов КАК КонецОсновныеНачисления
			|		ПО (КонецОсновныеНачисления.Период > ОсновныеНачисления.Период)
			|			И ОсновныеНачисления.Сотрудник = КонецОсновныеНачисления.Сотрудник
			|
			|СГРУППИРОВАТЬ ПО
			|	ОсновныеНачисления.Сотрудник,
			|	ОсновныеНачисления.Период
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НачалаПериодов.Сотрудник КАК Сотрудник,
			|	НачалаПериодов.Период КАК НачалоПериода,
			|	ВЫБОР
			|		КОГДА ОкончанияПериодов.КонецПериода ЕСТЬ NULL 
			|			ТОГДА &ДатаОкончанияПериода
			|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ОкончанияПериодов.КонецПериода, СЕКУНДА, -1)
			|	КОНЕЦ КАК КонецПериода
			|ПОМЕСТИТЬ ВТПериодыОплатыПоПроизводственнымНарядам
			|ИЗ
			|	ВТОсновныеНачисленияДляПроизводственныхНарядов КАК НачалаПериодов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОкончанияПериодов КАК ОкончанияПериодов
			|		ПО (ОкончанияПериодов.Период = НачалаПериодов.Период)
			|			И (ОкончанияПериодов.Сотрудник = НачалаПериодов.Сотрудник)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";
			
			
			ЗапросАвтоЗаполнения.Текст = ЗапросАвтоЗаполненияТекст;
			ЗапросАвтоЗаполнения.УстановитьПараметр("ДатаНачалаПериода", ПериодРегистрации);
			
			ЗапросАвтоЗаполнения.УстановитьПараметр("ДатаОкончанияПериода", КонецМесяца(ПериодРегистрации));
			ЗапросАвтоЗаполнения.Выполнить();
			
			ЗапросАвтоЗаполнения.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СписокРаботников.Сотрудник КАК Сотрудник,
			|	СписокРаботников.Сотрудник.ФизЛицо КАК ФизЛицо
			|ИЗ
			|	ВТПериодыОплатыПоПроизводственнымНарядам КАК СписокРаботников";
			Выборка = ЗапросАвтоЗаполнения.Выполнить().Выбрать();
			
			Если Сотрудник = Неопределено Тогда
				Исполнители.Очистить();
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Если ТекущаяСтрокаТабличнойЧасти = Неопределено Тогда
					СтрокаТабличнойЧасти = Исполнители.Добавить();
				Иначе
					СтрокаТабличнойЧасти = ТекущаяСтрокаТабличнойЧасти;
				КонецЕсли;
				СтрокаТабличнойЧасти.Сотрудник = Выборка.Сотрудник;
				СтрокаТабличнойЧасти.ФизЛицо = Выборка.ФизЛицо;
				СтрокаТабличнойЧасти.КТУ = 1;
				
				Если УчитыватьТариф Тогда
					СтрокаТабличнойЧасти.Тариф = РасчетТарифнойСтавкиСотрудника(Выборка.Сотрудник, Дата, ПериодРегистрации);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		// Заполнение для управленческого учета
		
		ЗапросАвтоЗаполнения.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокРаботников.Ссылка КАК Сотрудник,
		|	СписокРаботников.ФизЛицо
		|ИЗ
		|	ВТСписокРаботников КАК СписокРаботников";
		РезультатЗапроса = ЗапросАвтоЗаполнения.Выполнить();
		
		Если Сотрудник = Неопределено Тогда
			Исполнители.Очистить();
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТекущаяСтрокаТабличнойЧасти = Неопределено Тогда
				СтрокаИсполнители = Исполнители.Добавить();
			Иначе
				СтрокаИсполнители = ТекущаяСтрокаТабличнойЧасти;
			КонецЕсли;
			СтрокаИсполнители.Сотрудник = Выборка.Сотрудник;
			СтрокаИсполнители.ФизЛицо = Выборка.ФизЛицо;
		КонецЦикла;
		
	КонецЕсли;
	
	// Запрос для вывода сообщения о введенном сводном графике
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
		И УчитыватьОтработанноеВремя Тогда
		ЗапросАвтоЗаполнения.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПРЕДСТАВЛЕНИЕ(СводныеИндивидуальныеГрафики.Регистратор) КАК ПредставлениеДокумента,
		|	СводныеИндивидуальныеГрафики.Регистратор КАК ВведенныйДокумент,
		|	ПРЕДСТАВЛЕНИЕ(СводныеИндивидуальныеГрафики.Сотрудник) КАК ПредставлениеСотрудника,
		|	СводныеИндивидуальныеГрафики.Регистратор,
		|	СводныеИндивидуальныеГрафики.Сотрудник
		|ИЗ
		|	РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
		|ГДЕ
		|	СводныеИндивидуальныеГрафики.Сотрудник В
		|			(ВЫБРАТЬ
		|				ВТСписокРаботников.Ссылка
		|			ИЗ
		|				ВТСписокРаботников)
		|	И СводныеИндивидуальныеГрафики.Месяц = &Месяц";
		Выборка = ЗапросАвтоЗаполнения.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				СтрокаТекущегоУровняСообщений = ОбработкаКомментариев.ДобавитьСообщение("Следующим сотрудникам введен сводный индивидуальный график и подневный сдельный наряд по ним не может быть заполнен:", Перечисления.ВидыСообщений.ВажнаяИнформация, ,СтрокаВерхнегоУровняСообщений );
			#Иначе
			#КонецЕсли
			КоличествоВыведенныхДокументов = 0;
			Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
				
				Если КоличествоВыведенныхДокументов >= 4 Тогда
					#Если ТолстыйКлиентОбычноеПриложение Тогда
						ОбработкаКомментариев.ДобавитьСообщение(" и другие.", Перечисления.ВидыСообщений.ПустаяСсылка(),, СтрокаТекущегоУровняСообщений);
					#Иначе
					#КонецЕсли
					Прервать;
				КонецЕсли;
				#Если ТолстыйКлиентОбычноеПриложение Тогда
					РасшифровкаКомментария = Новый Массив;
					РасшифровкаКомментария.Добавить(Новый Структура("Представление, Расшифровка", Выборка.ПредставлениеДокумента, Выборка.ВведенныйДокумент));
					СтрокаУровняДокумента = ОбработкаКомментариев.ДобавитьСообщение("", Перечисления.ВидыСообщений.ПустаяСсылка(), РасшифровкаКомментария, СтрокаТекущегоУровняСообщений);
				#Иначе
				#КонецЕсли
				Пока Выборка.Следующий() Цикл
					
					Если КоличествоВыведенныхДокументов >= 4 Тогда
						#Если ТолстыйКлиентОбычноеПриложение Тогда
							ОбработкаКомментариев.ДобавитьСообщение(" и другие.", Перечисления.ВидыСообщений.ПустаяСсылка(),, СтрокаУровняДокумента);
						#Иначе
						#КонецЕсли
						Прервать;
					КонецЕсли;
					#Если ТолстыйКлиентОбычноеПриложение Тогда
						ОбработкаКомментариев.ДобавитьСообщение(Выборка.ПредставлениеСотрудника, Перечисления.ВидыСообщений.Информация,, СтрокаУровняДокумента);
					#Иначе
					#КонецЕсли
				КонецЦикла;
				
			КонецЦикла;
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Если СтрокаТекущегоУровняСообщений <> "" Тогда
					ОбработкаКомментариев.ПоказатьСообщения();
				КонецЕсли;
			#Иначе
			#КонецЕсли

		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // Автозаполнение()

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Функция возвращает часовую тарифную ставку работника.
//
// Параметры
//  Сотрудник  – СправочникСсылка.СотрудникиОрганизаций – расчитываемый работник
//  ДатаДок  – Дата – дата актуальности
//  ПериодРегистрации  – Дата – дата для валютного учета
//
// Возвращаемое значение:
//   Число   – часовая ставка работника организации
//
Функция РасчетТарифнойСтавкиСотрудника(Сотрудник, ДатаДок, ПериодРегистрации) Экспорт
	
	Возврат ПроцедурыУправленияПерсоналом.ЧасоваяТарифнаяСтавкаРаботникаОрг(Сотрудник, ?(ЗначениеЗаполнено(Сотрудник.ДатаУвольнения), Сотрудник.ДатаУвольнения, ДатаДок), ПериодРегистрации, мВалютаРегламентированногоУчета);
	
КонецФункции // РасчетТарифнойСтавкиСотрудника()

Процедура РассчитатьТарифыСотрудников() Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудники",			Исполнители.ВыгрузитьКолонку("Сотрудник"));
	Запрос.УстановитьПараметр("ДатаАктуальности",	Дата);
	Запрос.УстановитьПараметр("ТекущийМесяц",		НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ДатаВалютногоУчета",	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("РегламентВалюта",	мВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Год",				Год(Дата));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ДатаАктуальности
	|		ИНАЧЕ СотрудникиОрганизаций.ДатаУвольнения
	|	КОНЕЦ КАК ДатаАктуальности
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&Сотрудники)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаАктуальности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСотрудников.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ПлановыеНачисления.Период) КАК Период
	|ПОМЕСТИТЬ ВТПлановыеНачисленияДатыПоследнихДвижений
	|ИЗ
	|	ВТСписокСотрудников КАК СписокСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	|		ПО СписокСотрудников.Сотрудник = ПлановыеНачисления.Сотрудник
	|			И СписокСотрудников.ДатаАктуальности >= ПлановыеНачисления.Период
	|ГДЕ
	|	ПлановыеНачисления.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокСотрудников.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисления.Регистратор,
	|	ОсновныеНачисления.НомерСтроки,
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.Период,
	|	ОсновныеНачисления.ПериодЗавершения,
	|	ОсновныеНачисления.ВидРасчета,
	|	ОсновныеНачисления.ВидРасчетаЗавершения,
	|	ОсновныеНачисления.Показатель1,
	|	ОсновныеНачисления.Валюта1,
	|	ОсновныеНачисления.Валюта1Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд1,
	|	ОсновныеНачисления.Показатель2,
	|	ОсновныеНачисления.ТарифныйРазряд2,
	|	ОсновныеНачисления.Показатель3,
	|	ОсновныеНачисления.ТарифныйРазряд3,
	|	ОсновныеНачисления.Показатель4,
	|	ОсновныеНачисления.ТарифныйРазряд4,
	|	ОсновныеНачисления.Показатель5,
	|	ОсновныеНачисления.ТарифныйРазряд5,
	|	ОсновныеНачисления.Показатель6,
	|	ОсновныеНачисления.ТарифныйРазряд6,
	|	ОсновныеНачисления.Показатель1Завершения,
	|	ОсновныеНачисления.Показатель2Завершения,
	|	ОсновныеНачисления.Показатель3Завершения,
	|	ОсновныеНачисления.Показатель4Завершения,
	|	ОсновныеНачисления.Показатель5Завершения,
	|	ОсновныеНачисления.Показатель6Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд1Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд2Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд3Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд4Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд5Завершения,
	|	ОсновныеНачисления.ТарифныйРазряд6Завершения
	|ПОМЕСТИТЬ ВТСтрокиОписанияНачислений
	|ИЗ
	|	ВТПлановыеНачисленияДатыПоследнихДвижений КАК ПлановыеНачисленияДатыПоследнихДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
	|		ПО ПлановыеНачисленияДатыПоследнихДвижений.Сотрудник = ОсновныеНачисления.Сотрудник
	|			И ПлановыеНачисленияДатыПоследнихДвижений.Период = ОсновныеНачисления.Период
	|			И (ОсновныеНачисления.ВидРасчетаИзмерение = НЕОПРЕДЕЛЕНО)";
	Запрос.Выполнить();
	
	ПроцедурыУправленияПерсоналом.ИзвлечьТарифнуюСтавкуИзПараметровНачисления(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновноеНачисление.Сотрудник,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ТарифныеСтавки.РазмерностьТарифнойСтавкиЗавершения
	|		ИНАЧЕ ТарифныеСтавки.РазмерностьТарифнойСтавки
	|	КОНЕЦ КАК СпособРасчета,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|				И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|						ТОГДА РазмерТарифныхСтавок.Размер
	|					ИНАЧЕ ТарифныеСтавки.ТарифнаяСтавкаЗавершения
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|					ТОГДА РазмерТарифныхСтавок.Размер
	|				ИНАЧЕ ТарифныеСтавки.ТарифнаяСтавка
	|			КОНЕЦ
	|	КОНЕЦ * ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавок.Валюта
	|						ИНАЧЕ ОсновноеНачисление.Валюта1
	|					КОНЕЦ
	|			КОНЕЦ В (&РегламентВалюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|			ТОГДА 1
	|		ИНАЧЕ ЕСТЬNULL(Валюты.Курс / Валюты.Кратность, 0)
	|	КОНЕЦ КАК ОкладТариф
	|ПОМЕСТИТЬ ВТРазмерОсновногоНачисления
	|ИЗ
	|	ВТСтрокиОписанияНачислений КАК ОсновноеНачисление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТарифныеСтавкиНачислений КАК ТарифныеСтавки
	|		ПО ОсновноеНачисление.Регистратор = ТарифныеСтавки.Регистратор
	|			И ОсновноеНачисление.НомерСтроки = ТарифныеСтавки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(&ДатаВалютногоУчета, ) КАК РазмерТарифныхСтавок
	|		ПО (ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ТарифныеСтавки.ТарифныйРазрядЗавершения
	|				ИНАЧЕ ТарифныеСтавки.ТарифныйРазряд
	|			КОНЕЦ = РазмерТарифныхСтавок.ТарифныйРазряд)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалютДляРасчетовСПерсоналом КАК Валюты
	|		ПО (Валюты.Валюта = ВЫБОР
	|				КОГДА ОсновноеНачисление.ПериодЗавершения <= &ДатаАктуальности
	|						И ОсновноеНачисление.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ВЫБОР
	|							КОГДА ОсновноеНачисление.ВидРасчетаЗавершения.ТребуетВводаТарифногоРазряда
	|								ТОГДА РазмерТарифныхСтавок.Валюта
	|							ИНАЧЕ ОсновноеНачисление.Валюта1Завершения
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОсновноеНачисление.ВидРасчета.ТребуетВводаТарифногоРазряда
	|							ТОГДА РазмерТарифныхСтавок.Валюта
	|						ИНАЧЕ ОсновноеНачисление.Валюта1
	|					КОНЕЦ
	|			КОНЕЦ)
	|			И (Валюты.Период = &ДатаВалютногоУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСотрудников.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|ПОМЕСТИТЬ ВТРаботникиОрганизацийДатыПоследнихДвижений
	|ИЗ
	|	ВТСписокСотрудников КАК СписокСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СписокСотрудников.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И СписокСотрудников.ДатаАктуальности >= РаботникиОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокСотрудников.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизацийДатыПоследнихДвижений.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
	|							И РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени
	|					ИНАЧЕ РаботникиОрганизации.ГрафикРаботыЗавершения
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизации.ГрафикРаботы.СокращенноеРабочееВремя
	|				И РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
	|							И РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|					ИНАЧЕ РаботникиОрганизации.ГрафикРаботыЗавершения.ДлительностьРабочейНедели
	|				КОНЕЦ
	|		КОГДА РаботникиОрганизации.ГрафикРаботы.СокращенноеРабочееВремя
	|				И РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ДлительностьРабочейНедели
	|	КОНЕЦ КАК ДлительностьРабочейНедели,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.ВидГрафика
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.ВидГрафика
	|	КОНЕЦ КАК ВидГрафика
	|ПОМЕСТИТЬ ВТДанныеРаботника
	|ИЗ
	|	ВТРаботникиОрганизацийДатыПоследнихДвижений КАК РаботникиОрганизацийДатыПоследнихДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО (РаботникиОрганизации.Сотрудник = РаботникиОрганизацийДатыПоследнихДвижений.Сотрудник)
	|			И (РаботникиОрганизации.Период = РаботникиОрганизацийДатыПоследнихДвижений.Период)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СводныеИндивидуальныеГрафики.Часов КАК Часов,
	|	СводныеИндивидуальныеГрафики.Сотрудник
	|ПОМЕСТИТЬ ВТНормаВремениПоСводнымИндивидуальнымГрафикам
	|ИЗ
	|	РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеИндивидуальныеГрафики
	|ГДЕ
	|	СводныеИндивидуальныеГрафики.Сотрудник В(&Сотрудники)
	|	И СводныеИндивидуальныеГрафики.Месяц = &ТекущийМесяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц,
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК Сотрудник
	|ПОМЕСТИТЬ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы В(&Сотрудники)
	|	И ГрафикиРаботыПоВидамВремени.Месяц = &ТекущийМесяц
	|	И ГрафикиРаботыПоВидамВремени.План
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение) КАК ЧасовЗаМесяц,
	|	ДанныеРаботника.Сотрудник
	|ПОМЕСТИТЬ ВТНормаВремениПоОбщимГрафикам
	|ИЗ
	|	ВТДанныеРаботника КАК ДанныеРаботника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = ДанныеРаботника.ГрафикРаботы)
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.Месяц = &ТекущийМесяц
	|	И ГрафикиРаботыПоВидамВремени.План
	|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРаботника.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоРабочихДней,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаря
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.Год = &Год
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоРабочихДней,
	|	СУММА(ВЫБОР
	|			КОГДА РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧислоПредпраздничныхДней
	|ПОМЕСТИТЬ ВТДанныеПроизводственногоКалендаряЗаМесяц
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) = &ТекущийМесяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРаботника.Сотрудник,
	|	ВЫБОР
	|		КОГДА ОсновноеНачисление.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
	|			ТОГДА ОсновноеНачисление.ОкладТариф
	|		КОГДА ОсновноеНачисление.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням))
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую, ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)) = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоСреднемуКоличествуЧасовВМесяце)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) = 0
	|										ТОГДА 0
	|									КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|										ТОГДА 0
	|									ИНАЧЕ ОсновноеНачисление.ОкладТариф / (ДанныеРаботника.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ЧислоПредпраздничныхДней, 0)) * 12
	|								КОНЕЦ
	|						КОГДА ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.ПорядокПересчетаМесячнойСтавкиВЧасовую = ЗНАЧЕНИЕ(Перечисление.ПорядкиПересчетаМесячнойСтавкиВЧасовую.ПоМесячнойНормеПоПроизводственномуКалендарю)
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) = 0
	|										ТОГДА 0
	|									КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|										ТОГДА 0
	|									ИНАЧЕ ОсновноеНачисление.ОкладТариф / (ДанныеРаботника.ДлительностьРабочейНедели / 5 * (ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоРабочихДней, 0) + ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0)) - ЕСТЬNULL(ДанныеПроизводственногоКалендаряЗаМесяц.ЧислоПредпраздничныхДней, 0))
	|								КОНЕЦ
	|						КОГДА ВЫБОР
	|								КОГДА СводныеИндивидуальныеГрафики.Часов ЕСТЬ НЕ NULL 
	|									ТОГДА СводныеИндивидуальныеГрафики.Часов
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ЧасовЗаМесяц, 0)
	|							КОНЕЦ = 0
	|							ТОГДА 0
	|						ИНАЧЕ ОсновноеНачисление.ОкладТариф / ВЫБОР
	|								КОГДА СводныеИндивидуальныеГрафики.Часов ЕСТЬ НЕ NULL 
	|									ТОГДА СводныеИндивидуальныеГрафики.Часов
	|								КОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц ЕСТЬ НЕ NULL 
	|									ТОГДА НормаВремениПоЕжедневнымИндивидуальнымГрафикам.ЧасовЗаМесяц
	|								ИНАЧЕ ЕСТЬNULL(ГрафикиРаботыПоВидамВремени.ЧасовЗаМесяц, 0)
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		КОГДА ОсновноеНачисление.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке)
	|			ТОГДА ВЫРАЗИТЬ(ВЫБОР
	|						КОГДА ДанныеРаботника.ДлительностьРабочейНедели = 0
	|							ТОГДА 0
	|						ИНАЧЕ ОсновноеНачисление.ОкладТариф / ДанныеРаботника.ДлительностьРабочейНедели * ВЫБОР
	|								КОГДА ДанныеРаботника.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					КОНЕЦ КАК ЧИСЛО(15, 3))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Размер
	|ИЗ
	|	ВТДанныеРаботника КАК ДанныеРаботника
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерОсновногоНачисления КАК ОсновноеНачисление
	|		ПО ДанныеРаботника.Сотрудник = ОсновноеНачисление.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПроизводственногоКалендаряЗаМесяц КАК ДанныеПроизводственногоКалендаряЗаМесяц
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоСводнымИндивидуальнымГрафикам КАК СводныеИндивидуальныеГрафики
	|		ПО ДанныеРаботника.Сотрудник = СводныеИндивидуальныеГрафики.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоОбщимГрафикам КАК ГрафикиРаботыПоВидамВремени
	|		ПО ДанныеРаботника.Сотрудник = ГрафикиРаботыПоВидамВремени.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремениПоЕжедневнымИндивидуальнымГрафикам КАК НормаВремениПоЕжедневнымИндивидуальнымГрафикам
	|		ПО ДанныеРаботника.Сотрудник = НормаВремениПоЕжедневнымИндивидуальнымГрафикам.Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для каждого СтрокаТЧ Из Исполнители Цикл
		СтрокаТЧ.Тариф = 0;
	КонецЦикла;
	Пока Выборка.Следующий() Цикл
		СтрокиТЧ = Исполнители.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
		Для каждого СтрокаТЧ Из СтрокиТЧ Цикл
			СтрокаТЧ.Тариф = Выборка.Размер;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

Функция ВычислитьКоличествоЧасовВЯчейке(ТекущаяСтрока, ИндексДня) Экспорт

	СтрокаИндексДня = Строка(ИндексДня);
	ЧасовВЯчейке		= 0;
	
	ОсновныеЧасыВячейке	= Ложь;
	ЧасыНочныеУчтены	= Ложь;
	ЧасыВечерниеУчтены = Ложь;
	// цикл по значениям внутри дня
	Для ИндексМассиваПриставок = 0 По 2 Цикл
		Классификатор	= ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок] + "ВидВремени" + СтрокаИндексДня];
		Если Классификатор = Справочники.КлассификаторИспользованияРабочегоВремени.Работа ИЛИ
			Классификатор = Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные ИЛИ
			Классификатор = Справочники.КлассификаторИспользованияРабочегоВремени.Праздники Тогда
			
			ОсновныеЧасыВячейке	= Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для ИндексМассиваПриставок = 0 По 2 Цикл
		
		Часов			= ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок] + "Часов" + СтрокаИндексДня];
		Классификатор	= ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок] + "ВидВремени" + СтрокаИндексДня];
		
		Если Классификатор = Справочники.КлассификаторИспользованияРабочегоВремени.Работа ИЛИ
			Классификатор = Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные ИЛИ
			Классификатор = Справочники.КлассификаторИспользованияРабочегоВремени.Праздники Тогда
			
			ЧасовВЯчейке			= ЧасовВЯчейке + Часов;
			
		Иначе
		
			Если НЕ ОсновныеЧасыВячейке Тогда
				Если Классификатор = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы 
					И НЕ ЧасыВечерниеУчтены Тогда
					ЧасовВЯчейке	= ЧасовВЯчейке + Часов;
					ЧасыВечерниеУчтены	= Истина;
				ИначеЕсли Классификатор = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы 
					И НЕ ЧасыНочныеУчтены Тогда
					ЧасовВЯчейке	= ЧасовВЯчейке + Часов;
					ЧасыНочныеУчтены	= Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЧасовВЯчейке
			
КонецФункции // ВычислитьКоличествоЧасовВЯчейке()

Процедура ОбновитьСуммуОтработанныхДнейИЧасовДляВсехСтрок() Экспорт
	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
		Для Каждого СтрокаТабличнойЧасти Из Исполнители Цикл
			СуммаЧасов	= 0;
			СуммаДней	= 0;
			Для ИндексДня = 1 По 31 Цикл
				
				ЧасовПоСтроке	= ВычислитьКоличествоЧасовВЯчейке(СтрокаТабличнойЧасти, ИндексДня);
				СуммаЧасов		= СуммаЧасов + ЧасовПоСтроке;
				Если ЧасовПоСтроке > 0 Тогда
					СуммаДней = СуммаДней + 1
				КонецЕсли;
			КонецЦикла;
			СтрокаТабличнойЧасти.ОтработаноЧасов	= СуммаЧасов;
			СтрокаТабличнойЧасти.ОтработаноДней		= СуммаДней;
		КонецЦикла;
		
	ИначеЕсли СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		Для Каждого СтрокаТабличнойЧасти Из Исполнители Цикл
			СуммаЧасов = ВычислитьКоличествоЧасовВЯчейке(СтрокаТабличнойЧасти, День(ДатаНачалаПериода));
			СтрокаТабличнойЧасти.ОтработаноЧасов = СуммаЧасов;
			СтрокаТабличнойЧасти.ОтработаноДней = ?(СуммаЧасов > 0, 1, 0);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСуммуОтработанныхДнейИЧасовДляВсехСтрок()

Процедура Рассчитать(КомментироватьРасчет = Ложь) Экспорт
	
	Если КомментироватьРасчет Тогда
		
		ТаблицаКомментария = Новый ТаблицаЗначений;
		ТаблицаКомментария.Колонки.Добавить("НомерСтроки");
		ТаблицаКомментария.Колонки.Добавить("Сотрудник");
		ТаблицаКомментария.Колонки.Добавить("КТУ");
		ТаблицаКомментария.Колонки.Добавить("ОтработаноЧасов");
		ТаблицаКомментария.Колонки.Добавить("ЧасовойТариф");
		ТаблицаКомментария.Колонки.Добавить("Вес");
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
	КонецЕсли;
	
	ОбновитьСуммуОтработанныхДнейИЧасовДляВсехСтрок();
	
	// получим массив коэффициентов распределения
	МассивКТУ	= Новый Массив;
	ПоТарифу	= 0;
	
	СуммаВесов = 0;
	ОтработаноЧасовПоДокументу = 0;
	Для Каждого СтрокаИсполнители Из Исполнители Цикл
		
		Вес = 1;
		Если УчитыватьКТУ Тогда
			Вес = Вес * ?(СтрокаИсполнители.КТУ = 0, 1, СтрокаИсполнители.КТУ);
		КонецЕсли;
		
		ОтработаноЧасов = СтрокаИсполнители.ОтработаноЧасов;
		
		Если УчитыватьОтработанноеВремя Тогда
			
			Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
				
				ОтработаноЧасов  = 0;
					
				Для сч = 1 По 5 Цикл
					
					Если СтрокаИсполнители["ВидВремени" + Сч] = Справочники.КлассификаторИспользованияРабочегоВремени.Работа ИЛИ
						СтрокаИсполнители["ВидВремени" + Сч] = Справочники.КлассификаторИспользованияРабочегоВремени.Праздники ИЛИ
						СтрокаИсполнители["ВидВремени" + Сч] = Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные Тогда
					
						ОтработаноЧасов = ОтработаноЧасов + СтрокаИсполнители ["Часов" + Сч]
					
					КонецЕсли;
				
				КонецЦикла;
				
			ИначеЕсли СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
				ОтработаноЧасов = ВычислитьКоличествоЧасовВЯчейке(СтрокаИсполнители, День(ДатаНачалаПериода));
			Иначе	
				ОтработаноЧасов = СтрокаИсполнители.ОтработаноЧасов
			КонецЕсли;
			
			Вес = Вес * ОтработаноЧасов;
			ОтработаноЧасовПоДокументу = ОтработаноЧасовПоДокументу + ?(СтрокаИсполнители.Тариф <> 0,ОтработаноЧасов,0);
			
		КонецЕсли;
		
		Если УчитыватьТариф Тогда
			
			// Рассчитаем часовую тарифную ставку работника 
			ЧасовойТариф = СтрокаИсполнители.Тариф;
			Вес = Вес * ЧасовойТариф;
			
			// Учтем оплату по тарифу
			ПоТарифу = ПоТарифу + Окр(ЧасовойТариф * ОтработаноЧасов,2);
			
		КонецЕсли;
		
		МассивКТУ.Добавить(Вес);
		
		// Очищение колонки "Сумма к начислению"
		Если ОтражатьВБухгалтерскомУчете Тогда
			СтрокаИсполнители.СуммаКНачислениюРегл	= 0;
		Иначе
			СтрокаИсполнители.СуммаКНачислению		= 0;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			
			НоваяСтрока = ТаблицаКомментария.Добавить();
			НоваяСтрока.НомерСтроки		= СтрокаИсполнители.НомерСтроки;
			НоваяСтрока.Сотрудник		= СтрокаИсполнители.Сотрудник;
			НоваяСтрока.КТУ				= ?(СтрокаИсполнители.КТУ = 0, 1, СтрокаИсполнители.КТУ);
			НоваяСтрока.ОтработаноЧасов	= ОтработаноЧасов;
			НоваяСтрока.ЧасовойТариф	= ЧасовойТариф;
			НоваяСтрока.Вес	= Вес;
			
		КонецЕсли;
		
		СуммаВесов = СуммаВесов + Вес;
		
	КонецЦикла;
	
	МассивСуммКНачислению = ОбщегоНазначенияЗК.РаспределитьПропорционально(Выработка.Итог("Сумма"),МассивКТУ);
	Если МассивСуммКНачислению <> Неопределено Тогда
		
		Исполнители.ЗагрузитьКолонку(МассивСуммКНачислению,"СуммаКНачислению");
		
	КонецЕсли;
	
	СуммаКРаспределению = ?(РаспределятьТолькоПриработок, ?(Выработка.Итог("СуммаРегл") - ПоТарифу > 0, Выработка.Итог("СуммаРегл") - ПоТарифу, 0), Выработка.Итог("СуммаРегл"));
	МассивСуммКНачислению = ОбщегоНазначенияЗК.РаспределитьПропорционально(СуммаКРаспределению,МассивКТУ);
	Если МассивСуммКНачислению <> Неопределено Тогда
		
		Исполнители.ЗагрузитьКолонку(МассивСуммКНачислению,"СуммаКНачислениюРегл");
		
		Если РаспределятьТолькоПриработок и УчитыватьТариф Тогда
			
			Для каждого СтрокаИсполнители из Исполнители Цикл
				
				Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
					
					ОтработаноЧасов  = 0;
					
					Для сч = 1 По 5 Цикл
						
						Если СтрокаИсполнители["ВидВремени" + Сч] = Справочники.КлассификаторИспользованияРабочегоВремени.Работа ИЛИ
							СтрокаИсполнители["ВидВремени" + Сч] = Справочники.КлассификаторИспользованияРабочегоВремени.Праздники ИЛИ
							СтрокаИсполнители["ВидВремени" + Сч] = Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные Тогда
							
							ОтработаноЧасов = ОтработаноЧасов + СтрокаИсполнители ["Часов" + Сч]
							
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
					ОтработаноЧасов = ВычислитьКоличествоЧасовВЯчейке(СтрокаИсполнители, День(ДатаНачалаПериода));
				Иначе	
					ОтработаноЧасов = СтрокаИсполнители.ОтработаноЧасов
				КонецЕсли;
				
				ЧасовойТариф = СтрокаИсполнители.Тариф;
				СтрокаИсполнители.СуммаКНачислениюРегл = СтрокаИсполнители.СуммаКНачислениюРегл + Окр(ЧасовойТариф * ОтработаноЧасов,2);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если КомментироватьРасчет Тогда
		
		ДальнейшийКомментарий = Истина;
		Если ОтражатьВБухгалтерскомУчете Тогда
			КомментарийСуммаКРаспределению = Выработка.Итог("СуммаРегл");
			КомментарийТекстСуммаКРаспределению = "";
			КомментарийВалюта = "руб.";
			Если РаспределятьТолькоПриработок  и УчитыватьТариф Тогда
			
				Если Выработка.Итог("СуммаРегл") - ПоТарифу > 0 Тогда
					КомментарийСуммаКРаспределению = Выработка.Итог("СуммаРегл") - ПоТарифу;
					//КомментарийТекстСуммаКРаспределению = КомментарийТекстСуммаКРаспределению + "( Сумма за выполненную работу: " + Выработка.Итог("СуммаРегл") + " руб.)"
					КомментарийТекстСуммаКРаспределению = КомментарийТекстСуммаКРаспределению + "( Сумма за выполненную работу: " + Выработка.Итог("СуммаРегл") + " руб. - заработок по тарифу: "+ ПоТарифу + " руб.)"
				Иначе
					КомментарийСуммаКРаспределению = 0;
					КомментарийТекстСуммаКРаспределению = "(Заработок по тарифу: " + ПоТарифу + " руб. превышает сумму за выполненную работу: " + Выработка.Итог("СуммаРегл")+ " руб.)";
					ДальнейшийКомментарий = Ложь;
				КонецЕсли; 
			
			КонецЕсли; 
			ДальнейшийКомментарий = ?(Выработка.Итог("СуммаРегл") = 0, Ложь, ДальнейшийКомментарий);
		Иначе
			КомментарийСуммаКРаспределению = Выработка.Итог("Сумма");
			КомментарийВалюта = Константы.ВалютаУправленческогоУчета.Получить();
			ДальнейшийКомментарий = ?(Выработка.Итог("Сумма") = 0, Ложь, ДальнейшийКомментарий);
		КонецЕсли; 
		ОбщегоНазначенияЗК.КомментарийРасчета("Общая сумма по наряду к распределению: " + КомментарийСуммаКРаспределению + " " + КомментарийВалюта + " " + КомментарийТекстСуммаКРаспределению,,,, ?(ДальнейшийКомментарий,Перечисления.ВидыСообщений.Раздел,Перечисления.ВидыСообщений.ВажнаяИнформация));
			
		Если ДальнейшийКомментарий Тогда
			
			Для каждого СтрокаТаблицыКомментария Из ТаблицаКомментария Цикл
				
				КомментарийСотрудника = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет для сотрудника: " + СтрокаТаблицыКомментария.Сотрудник,,,,Перечисления.ВидыСообщений.Информация);
				ТекстДляВеса = "( " + СтрокаТаблицыКомментария.Вес + "( ";
				Если УчитыватьКТУ Тогда
					ТекстДляВеса = ТекстДляВеса +" КТУ: " + СтрокаТаблицыКомментария.КТУ + ?(УчитыватьТариф или УчитыватьОтработанноеВремя," * ","")
				КонецЕсли;
				Если УчитыватьОтработанноеВремя Тогда
					ТекстДляВеса = ТекстДляВеса + " Отработанное время: " + СтрокаТаблицыКомментария.ОтработаноЧасов + ?(УчитыватьТариф," * ","")
				КонецЕсли;
				Если УчитыватьТариф Тогда
					ТекстДляВеса = ТекстДляВеса + "Тариф: " + СтрокаТаблицыКомментария.ЧасовойТариф
				КонецЕсли;
				Если УчитыватьКТУ или УчитыватьОтработанноеВремя Или УчитыватьТариф Тогда
					ТекстДляВеса = ТекстДляВеса + ")/ " + ?(СуммаВесов = 0,1,СуммаВесов)+ ")"
				Иначе
					ТекстДляВеса = ТекстДляВеса + "КТУ принят за 1))"
				КонецЕсли; 	
				ОбщегоНазначенияЗК.КомментарийРасчета("Доля в расчете составила: " + Формат(СтрокаТаблицыКомментария.Вес/?(СуммаВесов = 0,1,СуммаВесов),"ЧЦ=15; ЧДЦ=5") + ТекстДляВеса, КомментарийСотрудника);
				Если РаспределятьТолькоПриработок и УчитыватьТариф и ОтражатьВБухгалтерскомУчете Тогда
					ОбщегоНазначенияЗК.КомментарийРасчета(" Сумма к начислению: " + Формат((Выработка.Итог("СуммаРегл") - ПоТарифу)*СтрокаТаблицыКомментария.Вес/?(СуммаВесов = 0,1,СуммаВесов),"ЧЦ=15; ЧДЦ=2") + " + " + СтрокаТаблицыКомментария.ЧасовойТариф*СтрокаТаблицыКомментария.ОтработаноЧасов + "( Тариф: " + СтрокаТаблицыКомментария.ЧасовойТариф + " * Часы: " + СтрокаТаблицыКомментария.ОтработаноЧасов + ")", КомментарийСотрудника)
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли; 
		
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Проверяет принадлежность документа к видам учета
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//  МожетБытьТолькоНалоговый- строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Перем Упр, Бух, Нал;
	
	ЕстьУпр = СтруктураШапкиДокумента.Свойство("ОтражатьВУправленческомУчете", Упр);
	ЕстьБух = СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете", Бух);
	ЕстьНал = СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете", Нал);
	
	Если ЕстьУпр ИЛИ ЕстьБух ИЛИ ЕстьНал Тогда
		Если Упр <> Истина И Бух <> Истина  Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".", Отказ, Заголовок);
		ИначеЕсли Бух <> Истина И Нал = Истина Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Документ не может проводиться  по налоговому учету, если он не проводится по бухгалтерскому учету." , Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает значение перечислеиня ВидыУчетаВремени, соответствующее 
// справочнику КлассификаторИспользованияРабочегоВремени.
Функция ПолучитьВидУчетаВремениПоКлассификатору(ВидВремени)
	
	Если ВидВремени.Пустая() Тогда
		Возврат ВидУчетаВремениПоЧасам;
	ИначеЕсли ВидВремени = КлассификаторВечернееВремя Тогда
		Возврат Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
	ИначеЕсли ВидВремени = КлассификаторНочноеВремя Тогда
		Возврат Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;
	Иначе
		Возврат ВидУчетаВремениПоЧасам;
	КонецЕсли;
	
КонецФункции

Функция ВычислитьКоличествоЧасовЗаДень(ВыборкаПоРаботники)
	
	ВсегоЧасовЗаДень	= 0;
	
	Пока ВыборкаПоРаботники.Следующий() Цикл
		
		Если ВыборкаПоРаботники.Часов <> 0 Тогда
			ВсегоЧасовЗаДень	= ВсегоЧасовЗаДень + ВыборкаПоРаботники["Часов"];
		КонецЕсли;	
		
	КонецЦикла; 
	
	Возврат ВсегоЧасовЗаДень
	
КонецФункции // ВычислитьКоличествоЧасовЗаДень()

// процедура проверяет, нет ли уже аналогичных записей с ключевыми полями в регистре сведений
// ГрафикиРаботыПоВидамВремени.
// Возвращает Истина если проведение возможно, иначе Ложь.
Процедура ПроверитьУникальностьЗаписи(Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Месяц", ПериодРегистрации);
	Запрос.УстановитьПараметр("НачалоМесяца",	?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень, ДатаНачалаПериода, ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяца",	?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень, ДатаНачалаПериода, КонецМесяца(ПериодРегистрации)));
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		УсловиеСотрудника = "";
	Иначе
		УсловиеСотрудника = ".ФизЛицо";
	КонецЕсли;
	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(РабочееВремяРаботниковОрганизаций.Регистратор, ГрафикиРаботыПоВидамВремени.Документ)) КАК ДокументПредставление,
		|	ЕСТЬNULL(СотрудникиНаряда.Сотрудник.Наименование, ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Наименование) КАК СотрудникНаименование
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаВЦеломЗаПериод.Сотрудник" + УсловиеСотрудника +" КАК Сотрудник
		|	ИЗ
		|		Документ.СдельныйНаряд.Исполнители КАК ТаблицаВЦеломЗаПериод
		|	ГДЕ
		|		ТаблицаВЦеломЗаПериод.Ссылка = &ДокументСсылка) КАК СотрудникиНаряда
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
		|		ПО СотрудникиНаряда.Сотрудник = РабочееВремяРаботниковОрганизаций.Сотрудник
		|			И (РабочееВремяРаботниковОрганизаций.Регистратор <> &ДокументСсылка)
		|			И (РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод
		|					И РабочееВремяРаботниковОрганизаций.Период = &Месяц
		|				ИЛИ (НЕ РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод)
		|					И (РабочееВремяРаботниковОрганизаций.Период МЕЖДУ &НачалоМесяца И &КонецМесяца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО СотрудникиНаряда.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
		|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
		|			И (НЕ ГрафикиРаботыПоВидамВремени.План)
		|			И (НЕ ГрафикиРаботыПоВидамВремени.Документ В (ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка)))
		|ГДЕ
		|	((РабочееВремяРаботниковОрганизаций.НомерСтроки ЕСТЬ НЕ NULL )
		|			ИЛИ (ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL ))
		|	И ((РабочееВремяРаботниковОрганизаций.Регистратор ЕСТЬ НЕ NULL) ИЛИ (ГрафикиРаботыПоВидамВремени.Документ ЕСТЬ НЕ NULL))";
		
	Иначе
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ИндексНачальногоДня = День(ДатаНачалаПериода);
		ИндексКонечногоДня = День(?(СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень, ДатаНачалаПериода, КонецМесяца(ПериодРегистрации)));
		Для ИндексДня = ИндексНачальногоДня По ИндексКонечногоДня Цикл
			СтрИндексДня = Строка(ИндексДня);
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|		СдельныйНарядИсполнители.Сотрудник"+ УсловиеСотрудника + " КАК Сотрудник,
			|		"+СтрИндексДня+" КАК ИндексДня
			|ПОМЕСТИТЬ ВТДанныеНарядаПоДням"+СтрИндексДня+"
			|	ИЗ
			|		Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|	ГДЕ
			|		СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|		И СдельныйНарядИсполнители.ПервыйВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		СдельныйНарядИсполнители.Сотрудник"+ УсловиеСотрудника + ",
			|		"+СтрИндексДня+"
			|	ИЗ
			|		Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|	ГДЕ
			|		СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|		И СдельныйНарядИсполнители.ВторойВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		СдельныйНарядИсполнители.Сотрудник"+ УсловиеСотрудника + ",
			|		"+СтрИндексДня+"
			|	ИЗ
			|		Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|	ГДЕ
			|		СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|		И СдельныйНарядИсполнители.ТретийВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";
			Запрос.Выполнить();
		
			Если ИндексДня = ИндексНачальногоДня Тогда
				ТекстЗапроса = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеНарядаПоДням.Сотрудник,
				|	ДанныеНарядаПоДням.ИндексДня
				|ПОМЕСТИТЬ ВТДанныеНарядаПоДням
				|ИЗ
				|	ВТДанныеНарядаПоДням"+СтрИндексДня+" КАК ДанныеНарядаПоДням
				|";
			Иначе 	
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеНарядаПоДням.Сотрудник,
				|	ДанныеНарядаПоДням.ИндексДня
				|ИЗ
				|	ВТДанныеНарядаПоДням"+СтрИндексДня+" КАК ДанныеНарядаПоДням
				|";
			КонецЕсли;
		КонецЦикла;
		
		Запрос.Текст = ТекстЗапроса + 
		"ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник";
		Запрос.Выполнить();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(РабочееВремяРаботниковОрганизаций.Регистратор, ГрафикиРаботыПоВидамВремени.Документ)) КАК ДокументПредставление,
		|	ЕСТЬNULL(СотрудникиНаряда.Сотрудник.Наименование, ГрафикиРаботыПоВидамВремени.ГрафикРаботы.Наименование) КАК СотрудникНаименование
		|ИЗ
		|	ВТДанныеНарядаПоДням КАК СотрудникиНаряда
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
		|		ПО СотрудникиНаряда.Сотрудник = РабочееВремяРаботниковОрганизаций.Сотрудник
		|			И (РабочееВремяРаботниковОрганизаций.Регистратор <> &ДокументСсылка)
		|			И (РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод
		|					И РабочееВремяРаботниковОрганизаций.Период = &Месяц
		|				ИЛИ (НЕ РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод)
		|					И СотрудникиНаряда.ИндексДня = ДЕНЬ(РабочееВремяРаботниковОрганизаций.Период)
		|					И (РабочееВремяРаботниковОрганизаций.Период МЕЖДУ &НачалоМесяца И &КонецМесяца))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО СотрудникиНаряда.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И (СотрудникиНаряда.ИндексДня = ДЕНЬ(ГрафикиРаботыПоВидамВремени.Дата))
		|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
		|			И (ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца)
		|			И (ГрафикиРаботыПоВидамВремени.Документ <> &ДокументСсылка)
		|			И ((НЕ ГрафикиРаботыПоВидамВремени.План))
		|			И ((НЕ ГрафикиРаботыПоВидамВремени.Документ В (ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка))))
		|ГДЕ
		|	(РабочееВремяРаботниковОрганизаций.НомерСтроки ЕСТЬ НЕ NULL 
		|			ИЛИ ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ НЕ NULL )
		|	И (РабочееВремяРаботниковОрганизаций.Регистратор ЕСТЬ НЕ NULL 
		|			ИЛИ ГрафикиРаботыПоВидамВремени.Документ ЕСТЬ НЕ NULL )";
		
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультата.Количество() > 0 Тогда
		СтрокаСотрудников = "";
		
		Пока ВыборкаРезультата.Следующий() Цикл
			СтрокаСотрудников = СтрокаСотрудников + Символы.ПС + ВыборкаРезультата.СотрудникНаименование+ " ("+ВыборкаРезультата.ДокументПредставление+")";
		КонецЦикла;
		
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("На следующих сотрудников уже введены документы учета отработанного времени в этом периоде" + СтрокаСотрудников,Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьУникальностьЗаписи()	

Процедура ПроверитьЗаполнениеШапкиДокумента(ДокументОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт

	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;
	
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

		Значение = ДокументОбъект[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда

			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаСообщения, Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеШапкиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Выработка.Сумма, Исполнители.СуммаКНачислению";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "Организация, ПодразделениеОрганизации, Выработка.СчетУчетаБУ, Выработка.СуммаРегл, Исполнители.СуммаКНачислениюРегл";
	
	мСтрокаРеквизитыНалУчета = "Выработка.СчетУчетаНУ";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Подразделение";
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Организация, ПодразделениеОрганизации";
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Формирует запрос по таблице "Исполнители" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоИсполнители(Режим, ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод 
		Или Не ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СдельныйНарядИсполнители.НомерСтроки,
		|	СдельныйНарядИсполнители.Сотрудник,
		|	СдельныйНарядИсполнители.Сотрудник.Физлицо КАК Физлицо,
		|	СдельныйНарядИсполнители.СуммаКНачислению,
		|	СдельныйНарядИсполнители.ОтработаноЧасов,
		|	СдельныйНарядИсполнители.ОтработаноДней,
		|	0 КАК Часов,
		|	"""" КАК ВидВремени,
		|	0 КАК ИндексДня,
		|	СдельныйНарядИсполнители.ВидВремени1 КАК ВидВремени1Сводно,
		|	СдельныйНарядИсполнители.ВидВремени2 КАК ВидВремени2Сводно,
		|	СдельныйНарядИсполнители.ВидВремени3 КАК ВидВремени3Сводно,
		|	СдельныйНарядИсполнители.ВидВремени4 КАК ВидВремени4Сводно,
		|	СдельныйНарядИсполнители.ВидВремени5 КАК ВидВремени5Сводно,
		|	СдельныйНарядИсполнители.Дней1 КАК Дней1Сводно,
		|	СдельныйНарядИсполнители.Дней2 КАК Дней2Сводно,
		|	СдельныйНарядИсполнители.Дней3 КАК Дней3Сводно,
		|	СдельныйНарядИсполнители.Дней4 КАК Дней4Сводно,
		|	СдельныйНарядИсполнители.Дней5 КАК Дней5Сводно,
		|	СдельныйНарядИсполнители.Часов1 КАК Часов1Сводно,
		|	СдельныйНарядИсполнители.Часов2 КАК Часов2Сводно,
		|	СдельныйНарядИсполнители.Часов3 КАК Часов3Сводно,
		|	СдельныйНарядИсполнители.Часов4 КАК Часов4Сводно,
		|	СдельныйНарядИсполнители.Часов5 КАК Часов5Сводно
		|ИЗ
		|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
		|ГДЕ
		|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	ИндексДня";
	Иначе
		
		Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
			
			ИндексНачальногоДня	= День(НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
			ИндексКонечногоДня	= День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
			
		Иначе
			
			ИндексНачальногоДня	= День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
			ИндексКонечногоДня	= День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
			
		КонецЕсли; 
		
		Для ИндексДня = ИндексНачальногоДня По ИндексКонечногоДня Цикл
			
			СтрИндексДня = Строка(ИндексДня);
			
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо КАК Физлицо,
			|	СдельныйНарядИсполнители.СуммаКНачислению,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	СдельныйНарядИсполнители.ПервыйЧасов"+СтрИндексДня+" КАК Часов,
			|	СдельныйНарядИсполнители.ПервыйВидВремени"+СтрИндексДня+" КАК ВидВремени,
			|	"+СтрИндексДня+" КАК ИндексДня,
			|	СдельныйНарядИсполнители.ВидВремени1 КАК ВидВремени1Сводно,
			|	СдельныйНарядИсполнители.ВидВремени2 КАК ВидВремени2Сводно,
			|	СдельныйНарядИсполнители.ВидВремени3 КАК ВидВремени3Сводно,
			|	СдельныйНарядИсполнители.ВидВремени4 КАК ВидВремени4Сводно,
			|	СдельныйНарядИсполнители.ВидВремени5 КАК ВидВремени5Сводно,
			|	СдельныйНарядИсполнители.Дней1 КАК Дней1Сводно,
			|	СдельныйНарядИсполнители.Дней2 КАК Дней2Сводно,
			|	СдельныйНарядИсполнители.Дней3 КАК Дней3Сводно,
			|	СдельныйНарядИсполнители.Дней4 КАК Дней4Сводно,
			|	СдельныйНарядИсполнители.Дней5 КАК Дней5Сводно,
			|	СдельныйНарядИсполнители.Часов1 КАК Часов1Сводно,
			|	СдельныйНарядИсполнители.Часов2 КАК Часов2Сводно,
			|	СдельныйНарядИсполнители.Часов3 КАК Часов3Сводно,
			|	СдельныйНарядИсполнители.Часов4 КАК Часов4Сводно,
			|	СдельныйНарядИсполнители.Часов5 КАК Часов5Сводно
			|ПОМЕСТИТЬ ВТДанныеНарядаПоДням" + СтрИндексДня + "
			|ИЗ
			|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|ГДЕ
			|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|	И СдельныйНарядИсполнители.ПервыйВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо,
			|	СдельныйНарядИсполнители.СуммаКНачислению,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	СдельныйНарядИсполнители.ВторойЧасов"+СтрИндексДня+",
			|	СдельныйНарядИсполнители.ВторойВидВремени"+СтрИндексДня+",
			|	"+СтрИндексДня+",
			|	СдельныйНарядИсполнители.ВидВремени1,
			|	СдельныйНарядИсполнители.ВидВремени2,
			|	СдельныйНарядИсполнители.ВидВремени3,
			|	СдельныйНарядИсполнители.ВидВремени4,
			|	СдельныйНарядИсполнители.ВидВремени5,
			|	СдельныйНарядИсполнители.Дней1,
			|	СдельныйНарядИсполнители.Дней2,
			|	СдельныйНарядИсполнители.Дней3,
			|	СдельныйНарядИсполнители.Дней4,
			|	СдельныйНарядИсполнители.Дней5,
			|	СдельныйНарядИсполнители.Часов1,
			|	СдельныйНарядИсполнители.Часов2,
			|	СдельныйНарядИсполнители.Часов3,
			|	СдельныйНарядИсполнители.Часов4,
			|	СдельныйНарядИсполнители.Часов5
			|ИЗ
			|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|ГДЕ
			|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|	И СдельныйНарядИсполнители.ВторойВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо,
			|	СдельныйНарядИсполнители.СуммаКНачислению,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	СдельныйНарядИсполнители.ТретийЧасов"+СтрИндексДня+",
			|	СдельныйНарядИсполнители.ТретийВидВремени"+СтрИндексДня+",
			|	"+СтрИндексДня+",
			|	СдельныйНарядИсполнители.ВидВремени1,
			|	СдельныйНарядИсполнители.ВидВремени2,
			|	СдельныйНарядИсполнители.ВидВремени3,
			|	СдельныйНарядИсполнители.ВидВремени4,
			|	СдельныйНарядИсполнители.ВидВремени5,
			|	СдельныйНарядИсполнители.Дней1,
			|	СдельныйНарядИсполнители.Дней2,
			|	СдельныйНарядИсполнители.Дней3,
			|	СдельныйНарядИсполнители.Дней4,
			|	СдельныйНарядИсполнители.Дней5,
			|	СдельныйНарядИсполнители.Часов1,
			|	СдельныйНарядИсполнители.Часов2,
			|	СдельныйНарядИсполнители.Часов3,
			|	СдельныйНарядИсполнители.Часов4,
			|	СдельныйНарядИсполнители.Часов5
			|ИЗ
			|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
			|ГДЕ
			|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
			|	И СдельныйНарядИсполнители.ТретийВидВремени"+СтрИндексДня+" <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ИндексДня";
			Запрос.Выполнить();
			
			Если ИндексДня = ИндексНачальногоДня Тогда
				ТекстЗапроса = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеНарядаПоДням.НомерСтроки,
				|	ДанныеНарядаПоДням.Сотрудник,
				|	ДанныеНарядаПоДням.Физлицо,
				|	ДанныеНарядаПоДням.СуммаКНачислению,
				|	ДанныеНарядаПоДням.ОтработаноЧасов,
				|	ДанныеНарядаПоДням.ОтработаноДней,
				|	ДанныеНарядаПоДням.Часов,
				|	ДанныеНарядаПоДням.ВидВремени,
				|	ДанныеНарядаПоДням.ИндексДня,
				|	ДанныеНарядаПоДням.ВидВремени1Сводно,
				|	ДанныеНарядаПоДням.ВидВремени2Сводно,
				|	ДанныеНарядаПоДням.ВидВремени3Сводно,
				|	ДанныеНарядаПоДням.ВидВремени4Сводно,
				|	ДанныеНарядаПоДням.ВидВремени5Сводно,
				|	ДанныеНарядаПоДням.Дней1Сводно,
				|	ДанныеНарядаПоДням.Дней2Сводно,
				|	ДанныеНарядаПоДням.Дней3Сводно,
				|	ДанныеНарядаПоДням.Дней4Сводно,
				|	ДанныеНарядаПоДням.Дней5Сводно,
				|	ДанныеНарядаПоДням.Часов1Сводно,
				|	ДанныеНарядаПоДням.Часов2Сводно,
				|	ДанныеНарядаПоДням.Часов3Сводно,
				|	ДанныеНарядаПоДням.Часов4Сводно,
				|	ДанныеНарядаПоДням.Часов5Сводно
				|ИЗ
				|	ВТДанныеНарядаПоДням"+СтрИндексДня+" КАК ДанныеНарядаПоДням
				|";
			Иначе 	
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеНарядаПоДням.НомерСтроки,
				|	ДанныеНарядаПоДням.Сотрудник,
				|	ДанныеНарядаПоДням.Физлицо,
				|	ДанныеНарядаПоДням.СуммаКНачислению,
				|	ДанныеНарядаПоДням.ОтработаноЧасов,
				|	ДанныеНарядаПоДням.ОтработаноДней,
				|	ДанныеНарядаПоДням.Часов,
				|	ДанныеНарядаПоДням.ВидВремени,
				|	ДанныеНарядаПоДням.ИндексДня,
				|	ДанныеНарядаПоДням.ВидВремени1Сводно,
				|	ДанныеНарядаПоДням.ВидВремени2Сводно,
				|	ДанныеНарядаПоДням.ВидВремени3Сводно,
				|	ДанныеНарядаПоДням.ВидВремени4Сводно,
				|	ДанныеНарядаПоДням.ВидВремени5Сводно,
				|	ДанныеНарядаПоДням.Дней1Сводно,
				|	ДанныеНарядаПоДням.Дней2Сводно,
				|	ДанныеНарядаПоДням.Дней3Сводно,
				|	ДанныеНарядаПоДням.Дней4Сводно,
				|	ДанныеНарядаПоДням.Дней5Сводно,
				|	ДанныеНарядаПоДням.Часов1Сводно,
				|	ДанныеНарядаПоДням.Часов2Сводно,
				|	ДанныеНарядаПоДням.Часов3Сводно,
				|	ДанныеНарядаПоДням.Часов4Сводно,
				|	ДанныеНарядаПоДням.Часов5Сводно
				|ИЗ
				|	ВТДанныеНарядаПоДням"+СтрИндексДня+" КАК ДанныеНарядаПоДням
				|";
			КонецЕсли;
		КонецЦикла;
		
		Запрос.Текст = 
		"ВЫБРАТЬ 
		|	СдельныйНарядИсполнители.НомерСтроки,
		|	СдельныйНарядИсполнители.Сотрудник,
		|	СдельныйНарядИсполнители.Физлицо,
		|	ДанныеПоДням.СуммаКНачислению,
		|	ДанныеПоДням.ОтработаноЧасов,
		|	ДанныеПоДням.ОтработаноДней,
		|	ДанныеПоДням.Часов,
		|	ДанныеПоДням.ВидВремени,
		|	ДанныеПоДням.ИндексДня,
		|	ДанныеПоДням.ВидВремени1Сводно,
		|	ДанныеПоДням.ВидВремени2Сводно,
		|	ДанныеПоДням.ВидВремени3Сводно,
		|	ДанныеПоДням.ВидВремени4Сводно,
		|	ДанныеПоДням.ВидВремени5Сводно,
		|	ДанныеПоДням.Дней1Сводно,
		|	ДанныеПоДням.Дней2Сводно,
		|	ДанныеПоДням.Дней3Сводно,
		|	ДанныеПоДням.Дней4Сводно,
		|	ДанныеПоДням.Дней5Сводно,
		|	ДанныеПоДням.Часов1Сводно,
		|	ДанныеПоДням.Часов2Сводно,
		|	ДанныеПоДням.Часов3Сводно,
		|	ДанныеПоДням.Часов4Сводно,
		|	ДанныеПоДням.Часов5Сводно
		|	ИЗ	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
		|ЛЕВОЕ СОЕДИНЕНИЕ (" + ТекстЗапроса + ") КАК ДанныеПоДням
		|	ПО 
		|	ДанныеПоДням.НомерСтроки =    СдельныйНарядИсполнители.НомерСтроки
		|	И ДанныеПоДням.Сотрудник = СдельныйНарядИсполнители.Сотрудник
		|	И ДанныеПоДням.ФизЛицо = СдельныйНарядИсполнители.ФизЛицо
		|ГДЕ
		|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
		|УПОРЯДОЧИТЬ ПО
		|	СдельныйНарядИсполнители.Сотрудник,
		|	ДанныеПоДням.ИндексДня";
	КонецЕсли; 
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоИсполнители()

// Формирует запрос по таблице "Исполнители" документа
//
// Параметры: 
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса. В запросе данные документа дополняются значениями
//	проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоИсполнителиРегл(ВыборкаПоШапкеДокумента, ВыборкаДанныхПоГрафику)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ДокументВведенЗаПериод", ВыборкаПоШапкеДокумента.СпособВводаДанных <> Перечисления.СпособыВводаДанныхОВремени.ЗаДень);
	Запрос.УстановитьПараметр("ДатаАктуальности",		?(ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень,ВыборкаПоШапкеДокумента.ДатаНачалаПериода,ВыборкаПоШапкеДокумента.ПериодРегистрации));
	Запрос.УстановитьПараметр("Месяц",					НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
	Запрос.УстановитьПараметр("ПредыдущаяДата",			НачалоДня(НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации) - 1));
	
	Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод
		Или Не ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СдельныйНарядИсполнители.Ссылка,
		|	СдельныйНарядИсполнители.НомерСтроки,
		|	СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
		|	СдельныйНарядИсполнители.Сотрудник.Наименование,
		|	СдельныйНарядИсполнители.Сотрудник.Физлицо КАК Физлицо,
		|	СдельныйНарядИсполнители.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде КАК ЯвляетсяСтудентомРаботающимВСтудотряде,
		|	СдельныйНарядИсполнители.СуммаКНачислениюРегл КАК СуммаКНачислению,
		|	СдельныйНарядИсполнители.ОтработаноЧасов,
		|	СдельныйНарядИсполнители.ОтработаноДней,
		|	0 КАК Часов,
		|	"""" КАК ВидВремени,
		|	0 КАК ИндексДня,
		|	&ДатаАктуальности КАК ДатаДня,
		|	СдельныйНарядИсполнители.ВидВремени1 КАК ВидВремени1Сводно,
		|	СдельныйНарядИсполнители.ВидВремени2 КАК ВидВремени2Сводно,
		|	СдельныйНарядИсполнители.ВидВремени3 КАК ВидВремени3Сводно,
		|	СдельныйНарядИсполнители.ВидВремени4 КАК ВидВремени4Сводно,
		|	СдельныйНарядИсполнители.ВидВремени5 КАК ВидВремени5Сводно,
		|	СдельныйНарядИсполнители.Дней1 КАК Дней1Сводно,
		|	СдельныйНарядИсполнители.Дней2 КАК Дней2Сводно,
		|	СдельныйНарядИсполнители.Дней3 КАК Дней3Сводно,
		|	СдельныйНарядИсполнители.Дней4 КАК Дней4Сводно,
		|	СдельныйНарядИсполнители.Дней5 КАК Дней5Сводно,
		|	СдельныйНарядИсполнители.Часов1 КАК Часов1Сводно,
		|	СдельныйНарядИсполнители.Часов2 КАК Часов2Сводно,
		|	СдельныйНарядИсполнители.Часов3 КАК Часов3Сводно,
		|	СдельныйНарядИсполнители.Часов4 КАК Часов4Сводно,
		|	СдельныйНарядИсполнители.Часов5 КАК Часов5Сводно
		|ПОМЕСТИТЬ ВТДанныеНарядаПоДням
		|ИЗ
		|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
		|ГДЕ
		|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка";
		
	Иначе
		
		ТекстТаблицыДокумента = 
		"ВЫБРАТЬ
		|	СдельныйНарядИсполнители.Ссылка,
		|	СдельныйНарядИсполнители.НомерСтроки,
		|	СдельныйНарядИсполнители.Сотрудник,
		|	СдельныйНарядИсполнители.КТУ,
		|	СдельныйНарядИсполнители.Тариф,
		|	СдельныйНарядИсполнители.СуммаКНачислению,
		|	СдельныйНарядИсполнители.СуммаКНачислениюРегл,
		|	СдельныйНарядИсполнители.ОтработаноЧасов,
		|	СдельныйНарядИсполнители.ПервыйЧасов1,
		|	СдельныйНарядИсполнители.ПервыйЧасов2,
		|	СдельныйНарядИсполнители.ПервыйЧасов3,
		|	СдельныйНарядИсполнители.ПервыйЧасов4,
		|	СдельныйНарядИсполнители.ПервыйЧасов5,
		|	СдельныйНарядИсполнители.ПервыйЧасов6,
		|	СдельныйНарядИсполнители.ПервыйЧасов7,
		|	СдельныйНарядИсполнители.ПервыйЧасов8,
		|	СдельныйНарядИсполнители.ПервыйЧасов9,
		|	СдельныйНарядИсполнители.ПервыйЧасов10,
		|	СдельныйНарядИсполнители.ПервыйЧасов11,
		|	СдельныйНарядИсполнители.ПервыйЧасов12,
		|	СдельныйНарядИсполнители.ПервыйЧасов13,
		|	СдельныйНарядИсполнители.ПервыйЧасов14,
		|	СдельныйНарядИсполнители.ПервыйЧасов15,
		|	СдельныйНарядИсполнители.ПервыйЧасов16,
		|	СдельныйНарядИсполнители.ПервыйЧасов17,
		|	СдельныйНарядИсполнители.ПервыйЧасов18,
		|	СдельныйНарядИсполнители.ПервыйЧасов19,
		|	СдельныйНарядИсполнители.ПервыйЧасов20,
		|	СдельныйНарядИсполнители.ПервыйЧасов21,
		|	СдельныйНарядИсполнители.ПервыйЧасов22,
		|	СдельныйНарядИсполнители.ПервыйЧасов23,
		|	СдельныйНарядИсполнители.ПервыйЧасов24,
		|	СдельныйНарядИсполнители.ПервыйЧасов25,
		|	СдельныйНарядИсполнители.ПервыйЧасов26,
		|	СдельныйНарядИсполнители.ПервыйЧасов27,
		|	СдельныйНарядИсполнители.ПервыйЧасов28,
		|	СдельныйНарядИсполнители.ПервыйЧасов29,
		|	СдельныйНарядИсполнители.ПервыйЧасов30,
		|	СдельныйНарядИсполнители.ПервыйЧасов31,
		|	СдельныйНарядИсполнители.ОтработаноДней,
		|	СдельныйНарядИсполнители.ВторойЧасов1,
		|	СдельныйНарядИсполнители.ВторойЧасов2,
		|	СдельныйНарядИсполнители.ВторойЧасов3,
		|	СдельныйНарядИсполнители.ВторойЧасов4,
		|	СдельныйНарядИсполнители.ВторойЧасов5,
		|	СдельныйНарядИсполнители.ВторойЧасов6,
		|	СдельныйНарядИсполнители.ВторойЧасов7,
		|	СдельныйНарядИсполнители.ВторойЧасов8,
		|	СдельныйНарядИсполнители.ВторойЧасов9,
		|	СдельныйНарядИсполнители.ВторойЧасов10,
		|	СдельныйНарядИсполнители.ВторойЧасов11,
		|	СдельныйНарядИсполнители.ВторойЧасов12,
		|	СдельныйНарядИсполнители.ВторойЧасов13,
		|	СдельныйНарядИсполнители.ВторойЧасов14,
		|	СдельныйНарядИсполнители.ВторойЧасов15,
		|	СдельныйНарядИсполнители.ВторойЧасов16,
		|	СдельныйНарядИсполнители.ВторойЧасов17,
		|	СдельныйНарядИсполнители.ВторойЧасов18,
		|	СдельныйНарядИсполнители.ВторойЧасов19,
		|	СдельныйНарядИсполнители.ВторойЧасов20,
		|	СдельныйНарядИсполнители.ВторойЧасов21,
		|	СдельныйНарядИсполнители.ВторойЧасов22,
		|	СдельныйНарядИсполнители.ВторойЧасов23,
		|	СдельныйНарядИсполнители.ВторойЧасов24,
		|	СдельныйНарядИсполнители.ВторойЧасов25,
		|	СдельныйНарядИсполнители.ВторойЧасов26,
		|	СдельныйНарядИсполнители.ВторойЧасов27,
		|	СдельныйНарядИсполнители.ВторойЧасов28,
		|	СдельныйНарядИсполнители.ВторойЧасов29,
		|	СдельныйНарядИсполнители.ВторойЧасов30,
		|	СдельныйНарядИсполнители.ВторойЧасов31,
		|	СдельныйНарядИсполнители.ТретийЧасов1,
		|	СдельныйНарядИсполнители.ТретийЧасов2,
		|	СдельныйНарядИсполнители.ТретийЧасов3,
		|	СдельныйНарядИсполнители.ТретийЧасов4,
		|	СдельныйНарядИсполнители.ТретийЧасов5,
		|	СдельныйНарядИсполнители.ТретийЧасов6,
		|	СдельныйНарядИсполнители.ТретийЧасов7,
		|	СдельныйНарядИсполнители.ТретийЧасов8,
		|	СдельныйНарядИсполнители.ТретийЧасов9,
		|	СдельныйНарядИсполнители.ТретийЧасов10,
		|	СдельныйНарядИсполнители.ТретийЧасов11,
		|	СдельныйНарядИсполнители.ТретийЧасов12,
		|	СдельныйНарядИсполнители.ТретийЧасов13,
		|	СдельныйНарядИсполнители.ТретийЧасов14,
		|	СдельныйНарядИсполнители.ТретийЧасов15,
		|	СдельныйНарядИсполнители.ТретийЧасов16,
		|	СдельныйНарядИсполнители.ТретийЧасов17,
		|	СдельныйНарядИсполнители.ТретийЧасов18,
		|	СдельныйНарядИсполнители.ТретийЧасов19,
		|	СдельныйНарядИсполнители.ТретийЧасов20,
		|	СдельныйНарядИсполнители.ТретийЧасов21,
		|	СдельныйНарядИсполнители.ТретийЧасов22,
		|	СдельныйНарядИсполнители.ТретийЧасов23,
		|	СдельныйНарядИсполнители.ТретийЧасов24,
		|	СдельныйНарядИсполнители.ТретийЧасов25,
		|	СдельныйНарядИсполнители.ТретийЧасов26,
		|	СдельныйНарядИсполнители.ТретийЧасов27,
		|	СдельныйНарядИсполнители.ТретийЧасов28,
		|	СдельныйНарядИсполнители.ТретийЧасов29,
		|	СдельныйНарядИсполнители.ТретийЧасов30,
		|	СдельныйНарядИсполнители.ТретийЧасов31,
		|	СдельныйНарядИсполнители.ПервыйВидВремени1,
		|	СдельныйНарядИсполнители.ПервыйВидВремени2,
		|	СдельныйНарядИсполнители.ПервыйВидВремени3,
		|	СдельныйНарядИсполнители.ПервыйВидВремени4,
		|	СдельныйНарядИсполнители.ПервыйВидВремени5,
		|	СдельныйНарядИсполнители.ПервыйВидВремени6,
		|	СдельныйНарядИсполнители.ПервыйВидВремени7,
		|	СдельныйНарядИсполнители.ПервыйВидВремени8,
		|	СдельныйНарядИсполнители.ПервыйВидВремени9,
		|	СдельныйНарядИсполнители.ПервыйВидВремени10,
		|	СдельныйНарядИсполнители.ПервыйВидВремени11,
		|	СдельныйНарядИсполнители.ПервыйВидВремени12,
		|	СдельныйНарядИсполнители.ПервыйВидВремени13,
		|	СдельныйНарядИсполнители.ПервыйВидВремени14,
		|	СдельныйНарядИсполнители.ПервыйВидВремени15,
		|	СдельныйНарядИсполнители.ПервыйВидВремени16,
		|	СдельныйНарядИсполнители.ПервыйВидВремени17,
		|	СдельныйНарядИсполнители.ПервыйВидВремени18,
		|	СдельныйНарядИсполнители.ПервыйВидВремени19,
		|	СдельныйНарядИсполнители.ПервыйВидВремени20,
		|	СдельныйНарядИсполнители.ПервыйВидВремени21,
		|	СдельныйНарядИсполнители.ПервыйВидВремени22,
		|	СдельныйНарядИсполнители.ПервыйВидВремени23,
		|	СдельныйНарядИсполнители.ПервыйВидВремени24,
		|	СдельныйНарядИсполнители.ПервыйВидВремени25,
		|	СдельныйНарядИсполнители.ПервыйВидВремени26,
		|	СдельныйНарядИсполнители.ПервыйВидВремени27,
		|	СдельныйНарядИсполнители.ПервыйВидВремени28,
		|	СдельныйНарядИсполнители.ПервыйВидВремени29,
		|	СдельныйНарядИсполнители.ПервыйВидВремени30,
		|	СдельныйНарядИсполнители.ПервыйВидВремени31,
		|	СдельныйНарядИсполнители.ВторойВидВремени1,
		|	СдельныйНарядИсполнители.ВторойВидВремени2,
		|	СдельныйНарядИсполнители.ВторойВидВремени3,
		|	СдельныйНарядИсполнители.ВторойВидВремени4,
		|	СдельныйНарядИсполнители.ВторойВидВремени5,
		|	СдельныйНарядИсполнители.ВторойВидВремени6,
		|	СдельныйНарядИсполнители.ВторойВидВремени7,
		|	СдельныйНарядИсполнители.ВторойВидВремени8,
		|	СдельныйНарядИсполнители.ВторойВидВремени9,
		|	СдельныйНарядИсполнители.ВторойВидВремени10,
		|	СдельныйНарядИсполнители.ВторойВидВремени11,
		|	СдельныйНарядИсполнители.ВторойВидВремени12,
		|	СдельныйНарядИсполнители.ВторойВидВремени13,
		|	СдельныйНарядИсполнители.ВторойВидВремени14,
		|	СдельныйНарядИсполнители.ВторойВидВремени15,
		|	СдельныйНарядИсполнители.ВторойВидВремени16,
		|	СдельныйНарядИсполнители.ВторойВидВремени17,
		|	СдельныйНарядИсполнители.ВторойВидВремени18,
		|	СдельныйНарядИсполнители.ВторойВидВремени19,
		|	СдельныйНарядИсполнители.ВторойВидВремени20,
		|	СдельныйНарядИсполнители.ВторойВидВремени21,
		|	СдельныйНарядИсполнители.ВторойВидВремени22,
		|	СдельныйНарядИсполнители.ВторойВидВремени23,
		|	СдельныйНарядИсполнители.ВторойВидВремени24,
		|	СдельныйНарядИсполнители.ВторойВидВремени25,
		|	СдельныйНарядИсполнители.ВторойВидВремени26,
		|	СдельныйНарядИсполнители.ВторойВидВремени27,
		|	СдельныйНарядИсполнители.ВторойВидВремени28,
		|	СдельныйНарядИсполнители.ВторойВидВремени29,
		|	СдельныйНарядИсполнители.ВторойВидВремени30,
		|	СдельныйНарядИсполнители.ВторойВидВремени31,
		|	СдельныйНарядИсполнители.ТретийВидВремени1,
		|	СдельныйНарядИсполнители.ТретийВидВремени2,
		|	СдельныйНарядИсполнители.ТретийВидВремени3,
		|	СдельныйНарядИсполнители.ТретийВидВремени4,
		|	СдельныйНарядИсполнители.ТретийВидВремени5,
		|	СдельныйНарядИсполнители.ТретийВидВремени6,
		|	СдельныйНарядИсполнители.ТретийВидВремени7,
		|	СдельныйНарядИсполнители.ТретийВидВремени8,
		|	СдельныйНарядИсполнители.ТретийВидВремени9,
		|	СдельныйНарядИсполнители.ТретийВидВремени10,
		|	СдельныйНарядИсполнители.ТретийВидВремени11,
		|	СдельныйНарядИсполнители.ТретийВидВремени12,
		|	СдельныйНарядИсполнители.ТретийВидВремени13,
		|	СдельныйНарядИсполнители.ТретийВидВремени14,
		|	СдельныйНарядИсполнители.ТретийВидВремени15,
		|	СдельныйНарядИсполнители.ТретийВидВремени16,
		|	СдельныйНарядИсполнители.ТретийВидВремени17,
		|	СдельныйНарядИсполнители.ТретийВидВремени18,
		|	СдельныйНарядИсполнители.ТретийВидВремени19,
		|	СдельныйНарядИсполнители.ТретийВидВремени20,
		|	СдельныйНарядИсполнители.ТретийВидВремени21,
		|	СдельныйНарядИсполнители.ТретийВидВремени22,
		|	СдельныйНарядИсполнители.ТретийВидВремени23,
		|	СдельныйНарядИсполнители.ТретийВидВремени24,
		|	СдельныйНарядИсполнители.ТретийВидВремени25,
		|	СдельныйНарядИсполнители.ТретийВидВремени26,
		|	СдельныйНарядИсполнители.ТретийВидВремени27,
		|	СдельныйНарядИсполнители.ТретийВидВремени28,
		|	СдельныйНарядИсполнители.ТретийВидВремени29,
		|	СдельныйНарядИсполнители.ТретийВидВремени30,
		|	СдельныйНарядИсполнители.ТретийВидВремени31,
		|	СдельныйНарядИсполнители.ВидВремени1,
		|	СдельныйНарядИсполнители.ВидВремени2,
		|	СдельныйНарядИсполнители.ВидВремени3,
		|	СдельныйНарядИсполнители.ВидВремени4,
		|	СдельныйНарядИсполнители.ВидВремени5,
		|	СдельныйНарядИсполнители.Дней1,
		|	СдельныйНарядИсполнители.Дней2,
		|	СдельныйНарядИсполнители.Дней3,
		|	СдельныйНарядИсполнители.Дней4,
		|	СдельныйНарядИсполнители.Дней5,
		|	СдельныйНарядИсполнители.Часов1,
		|	СдельныйНарядИсполнители.Часов2,
		|	СдельныйНарядИсполнители.Часов3,
		|	СдельныйНарядИсполнители.Часов4,
		|	СдельныйНарядИсполнители.Часов5
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
		|ГДЕ
		|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка";
	
		Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
			
			ИндексНачальногоДня	= День(НачалоМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
			ИндексКонечногоДня	= День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
			
		Иначе
			
			ИндексНачальногоДня	= День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
			ИндексКонечногоДня	= День(ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
			
		КонецЕсли; 
		
		Запрос.Текст = "";
		Для ИндексДня = ИндексНачальногоДня По ИндексКонечногоДня Цикл
			
			СтрИндексДня = Строка(ИндексДня);
			
			Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "","", Символы.ПС + ";" + Символы.ПС) + 
			"ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.Ссылка,
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
			|	СдельныйНарядИсполнители.Сотрудник.Наименование,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо КАК Физлицо,
			|	СдельныйНарядИсполнители.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде КАК ЯвляетсяСтудентомРаботающимВСтудотряде,
			|	СдельныйНарядИсполнители.СуммаКНачислениюРегл КАК СуммаКНачислению,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	СдельныйНарядИсполнители.ПервыйЧасов"+СтрИндексДня+" КАК Часов,
			|	СдельныйНарядИсполнители.ПервыйВидВремени"+СтрИндексДня+" КАК ВидВремени,
			|	"+СтрИндексДня+" КАК ИндексДня,
			|	ДОБАВИТЬКДАТЕ(&ПредыдущаяДата, ДЕНЬ, "+СтрИндексДня+") КАК ДатаДня,
			|	СдельныйНарядИсполнители.ВидВремени1 КАК ВидВремени1Сводно,
			|	СдельныйНарядИсполнители.ВидВремени2 КАК ВидВремени2Сводно,
			|	СдельныйНарядИсполнители.ВидВремени3 КАК ВидВремени3Сводно,
			|	СдельныйНарядИсполнители.ВидВремени4 КАК ВидВремени4Сводно,
			|	СдельныйНарядИсполнители.ВидВремени5 КАК ВидВремени5Сводно,
			|	СдельныйНарядИсполнители.Дней1 КАК Дней1Сводно,
			|	СдельныйНарядИсполнители.Дней2 КАК Дней2Сводно,
			|	СдельныйНарядИсполнители.Дней3 КАК Дней3Сводно,
			|	СдельныйНарядИсполнители.Дней4 КАК Дней4Сводно,
			|	СдельныйНарядИсполнители.Дней5 КАК Дней5Сводно,
			|	СдельныйНарядИсполнители.Часов1 КАК Часов1Сводно,
			|	СдельныйНарядИсполнители.Часов2 КАК Часов2Сводно,
			|	СдельныйНарядИсполнители.Часов3 КАК Часов3Сводно,
			|	СдельныйНарядИсполнители.Часов4 КАК Часов4Сводно,
			|	СдельныйНарядИсполнители.Часов5 КАК Часов5Сводно
			|ПОМЕСТИТЬ ВТДанныеНарядаПоДням" + СтрИндексДня + "
			|ИЗ
			|	ВТДанныеДокумента КАК СдельныйНарядИсполнители
			|ГДЕ
			|	НЕ СдельныйНарядИсполнители.ПервыйВидВремени"+СтрИндексДня+" В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.Ссылка,
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник,
			|	СдельныйНарядИсполнители.Сотрудник.Наименование,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо,
			|	СдельныйНарядИсполнители.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде,
			|	СдельныйНарядИсполнители.СуммаКНачислениюРегл,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	СдельныйНарядИсполнители.ВторойЧасов"+СтрИндексДня+",
			|	СдельныйНарядИсполнители.ВторойВидВремени"+СтрИндексДня+",
			|	"+СтрИндексДня+",
			|	ДОБАВИТЬКДАТЕ(&ПредыдущаяДата, ДЕНЬ, "+СтрИндексДня+"),
			|	СдельныйНарядИсполнители.ВидВремени1,
			|	СдельныйНарядИсполнители.ВидВремени2,
			|	СдельныйНарядИсполнители.ВидВремени3,
			|	СдельныйНарядИсполнители.ВидВремени4,
			|	СдельныйНарядИсполнители.ВидВремени5,
			|	СдельныйНарядИсполнители.Дней1,
			|	СдельныйНарядИсполнители.Дней2,
			|	СдельныйНарядИсполнители.Дней3,
			|	СдельныйНарядИсполнители.Дней4,
			|	СдельныйНарядИсполнители.Дней5,
			|	СдельныйНарядИсполнители.Часов1,
			|	СдельныйНарядИсполнители.Часов2,
			|	СдельныйНарядИсполнители.Часов3,
			|	СдельныйНарядИсполнители.Часов4,
			|	СдельныйНарядИсполнители.Часов5
			|ИЗ
			|	ВТДанныеДокумента КАК СдельныйНарядИсполнители
			|ГДЕ
			|	НЕ СдельныйНарядИсполнители.ВторойВидВремени"+СтрИндексДня+" В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.Ссылка,
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник,
			|	СдельныйНарядИсполнители.Сотрудник.Наименование,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо,
			|	СдельныйНарядИсполнители.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде,
			|	СдельныйНарядИсполнители.СуммаКНачислениюРегл,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	СдельныйНарядИсполнители.ТретийЧасов"+СтрИндексДня+",
			|	СдельныйНарядИсполнители.ТретийВидВремени"+СтрИндексДня+",
			|	"+СтрИндексДня+",
			|	ДОБАВИТЬКДАТЕ(&ПредыдущаяДата, ДЕНЬ, "+СтрИндексДня+"),
			|	СдельныйНарядИсполнители.ВидВремени1,
			|	СдельныйНарядИсполнители.ВидВремени2,
			|	СдельныйНарядИсполнители.ВидВремени3,
			|	СдельныйНарядИсполнители.ВидВремени4,
			|	СдельныйНарядИсполнители.ВидВремени5,
			|	СдельныйНарядИсполнители.Дней1,
			|	СдельныйНарядИсполнители.Дней2,
			|	СдельныйНарядИсполнители.Дней3,
			|	СдельныйНарядИсполнители.Дней4,
			|	СдельныйНарядИсполнители.Дней5,
			|	СдельныйНарядИсполнители.Часов1,
			|	СдельныйНарядИсполнители.Часов2,
			|	СдельныйНарядИсполнители.Часов3,
			|	СдельныйНарядИсполнители.Часов4,
			|	СдельныйНарядИсполнители.Часов5
			|ИЗ
			|	ВТДанныеДокумента КАК СдельныйНарядИсполнители
			|ГДЕ
			|	НЕ СдельныйНарядИсполнители.ТретийВидВремени"+СтрИндексДня+" В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка))
			|	
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	СдельныйНарядИсполнители.Ссылка,
			|	СдельныйНарядИсполнители.НомерСтроки,
			|	СдельныйНарядИсполнители.Сотрудник,
			|	СдельныйНарядИсполнители.Сотрудник.Наименование,
			|	СдельныйНарядИсполнители.Сотрудник.Физлицо,
			|	СдельныйНарядИсполнители.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде,
			|	СдельныйНарядИсполнители.СуммаКНачислениюРегл,
			|	СдельныйНарядИсполнители.ОтработаноЧасов,
			|	СдельныйНарядИсполнители.ОтработаноДней,
			|	0,
			|	ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка),
			|	"+СтрИндексДня+",
			|	ДОБАВИТЬКДАТЕ(&ПредыдущаяДата, ДЕНЬ, "+СтрИндексДня+"),
			|	СдельныйНарядИсполнители.ВидВремени1,
			|	СдельныйНарядИсполнители.ВидВремени2,
			|	СдельныйНарядИсполнители.ВидВремени3,
			|	СдельныйНарядИсполнители.ВидВремени4,
			|	СдельныйНарядИсполнители.ВидВремени5,
			|	СдельныйНарядИсполнители.Дней1,
			|	СдельныйНарядИсполнители.Дней2,
			|	СдельныйНарядИсполнители.Дней3,
			|	СдельныйНарядИсполнители.Дней4,
			|	СдельныйНарядИсполнители.Дней5,
			|	СдельныйНарядИсполнители.Часов1,
			|	СдельныйНарядИсполнители.Часов2,
			|	СдельныйНарядИсполнители.Часов3,
			|	СдельныйНарядИсполнители.Часов4,
			|	СдельныйНарядИсполнители.Часов5
			|ИЗ
			|	ВТДанныеДокумента КАК СдельныйНарядИсполнители
			|ГДЕ
			|	СдельныйНарядИсполнители.ПервыйВидВремени"+СтрИндексДня+" = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	И СдельныйНарядИсполнители.ВторойВидВремени"+СтрИндексДня+" = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	И СдельныйНарядИсполнители.ТретийВидВремени"+СтрИндексДня+" = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка)
			|	
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник";
			
			Если ИндексДня = ИндексНачальногоДня Тогда
				ТекстЗапроса = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеНарядаПоДням.Ссылка,
				|	ДанныеНарядаПоДням.НомерСтроки,
				|	ДанныеНарядаПоДням.Сотрудник,
				|	ДанныеНарядаПоДням.СотрудникНаименование,
				|	ДанныеНарядаПоДням.ЯвляетсяСтудентомРаботающимВСтудотряде,
				|	ДанныеНарядаПоДням.Физлицо,
				|	ДанныеНарядаПоДням.СуммаКНачислению,
				|	ДанныеНарядаПоДням.ОтработаноЧасов,
				|	ДанныеНарядаПоДням.ОтработаноДней,
				|	ДанныеНарядаПоДням.Часов,
				|	ДанныеНарядаПоДням.ВидВремени,
				|	ДанныеНарядаПоДням.ИндексДня,
				|	ДанныеНарядаПоДням.ДатаДня,
				|	ДанныеНарядаПоДням.ВидВремени1Сводно,
				|	ДанныеНарядаПоДням.ВидВремени2Сводно,
				|	ДанныеНарядаПоДням.ВидВремени3Сводно,
				|	ДанныеНарядаПоДням.ВидВремени4Сводно,
				|	ДанныеНарядаПоДням.ВидВремени5Сводно,
				|	ДанныеНарядаПоДням.Дней1Сводно,
				|	ДанныеНарядаПоДням.Дней2Сводно,
				|	ДанныеНарядаПоДням.Дней3Сводно,
				|	ДанныеНарядаПоДням.Дней4Сводно,
				|	ДанныеНарядаПоДням.Дней5Сводно,
				|	ДанныеНарядаПоДням.Часов1Сводно,
				|	ДанныеНарядаПоДням.Часов2Сводно,
				|	ДанныеНарядаПоДням.Часов3Сводно,
				|	ДанныеНарядаПоДням.Часов4Сводно,
				|	ДанныеНарядаПоДням.Часов5Сводно
				|ПОМЕСТИТЬ ВТДанныеНарядаПоДням
				|ИЗ
				|	ВТДанныеНарядаПоДням"+СтрИндексДня+" КАК ДанныеНарядаПоДням
				|";
			Иначе 	
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ДанныеНарядаПоДням.Ссылка,
				|	ДанныеНарядаПоДням.НомерСтроки,
				|	ДанныеНарядаПоДням.Сотрудник,
				|	ДанныеНарядаПоДням.СотрудникНаименование,
				|	ДанныеНарядаПоДням.ЯвляетсяСтудентомРаботающимВСтудотряде,
				|	ДанныеНарядаПоДням.Физлицо,
				|	ДанныеНарядаПоДням.СуммаКНачислению,
				|	ДанныеНарядаПоДням.ОтработаноЧасов,
				|	ДанныеНарядаПоДням.ОтработаноДней,
				|	ДанныеНарядаПоДням.Часов,
				|	ДанныеНарядаПоДням.ВидВремени,
				|	ДанныеНарядаПоДням.ИндексДня,
				|	ДанныеНарядаПоДням.ДатаДня,
				|	ДанныеНарядаПоДням.ВидВремени1Сводно,
				|	ДанныеНарядаПоДням.ВидВремени2Сводно,
				|	ДанныеНарядаПоДням.ВидВремени3Сводно,
				|	ДанныеНарядаПоДням.ВидВремени4Сводно,
				|	ДанныеНарядаПоДням.ВидВремени5Сводно,
				|	ДанныеНарядаПоДням.Дней1Сводно,
				|	ДанныеНарядаПоДням.Дней2Сводно,
				|	ДанныеНарядаПоДням.Дней3Сводно,
				|	ДанныеНарядаПоДням.Дней4Сводно,
				|	ДанныеНарядаПоДням.Дней5Сводно,
				|	ДанныеНарядаПоДням.Часов1Сводно,
				|	ДанныеНарядаПоДням.Часов2Сводно,
				|	ДанныеНарядаПоДням.Часов3Сводно,
				|	ДанныеНарядаПоДням.Часов4Сводно,
				|	ДанныеНарядаПоДням.Часов5Сводно
				|ИЗ
				|	ВТДанныеНарядаПоДням"+СтрИндексДня+" КАК ДанныеНарядаПоДням
				|";
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.Текст = ТекстТаблицыДокумента + Символы.ПС + ";" + Символы.ПС + Запрос.Текст + Символы.ПС + ";" + Символы.ПС; 
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапроса + Символы.ПС +
	"ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСостояниеСотрудников
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Период > &ДатаАктуальности
	|	И РаботникиОрганизаций.Период <= КОНЕЦПЕРИОДА(&ДатаАктуальности, МЕСЯЦ)
	|	И РаботникиОрганизаций.Сотрудник В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СдельныйНарядИсполнители.Сотрудник
	|			ИЗ
	|				ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители)
	|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И &ДокументВведенЗаПериод
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			Сотрудник В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СдельныйНарядИсполнители.Сотрудник
	|				ИЗ
	|					ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители)) КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.Сотрудник,
	|	ДатыРегистра.ДатаДня,
	|	Работники.ГрафикРаботы КАК ГрафикРаботы,
	|	Работники.Должность КАК Должность,
	|	Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ ВТБудущиеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
	|		СдельныйНарядИсполнители.ДатаДня КАК ДатаДня,
	|		МИНИМУМ(РаботникиОрганизаций.Период) КАК Период
	|	ИЗ
	|		ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО СдельныйНарядИсполнители.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И СдельныйНарядИсполнители.ДатаДня <= РаботникиОрганизаций.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СдельныйНарядИсполнители.Сотрудник,
	|		СдельныйНарядИсполнители.ДатаДня) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ПО ДатыРегистра.Сотрудник = Работники.Сотрудник
	|			И ДатыРегистра.Период = Работники.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.Сотрудник,
	|	ДатыРегистра.ДатаДня,
	|	ВЫБОР
	|		КОГДА Работники.ПериодЗавершения ЕСТЬ NULL 
	|			ТОГДА БудущиеДанные.ГрафикРаботы
	|		КОГДА Работники.ПериодЗавершения <= ДатыРегистра.ДатаДня
	|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Работники.ГрафикРаботыЗавершения
	|		ИНАЧЕ Работники.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА Работники.ПериодЗавершения ЕСТЬ NULL 
	|			ТОГДА БудущиеДанные.Должность.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией
	|		КОГДА Работники.ПериодЗавершения <= ДатыРегистра.ДатаДня
	|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Работники.ДолжностьЗавершения.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией
	|		ИНАЧЕ Работники.Должность.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией
	|	КОНЕЦ КАК ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией,
	|	ВЫБОР
	|		КОГДА Работники.ПериодЗавершения ЕСТЬ NULL 
	|			ТОГДА БудущиеДанные.Должность.ЯвляетсяДолжностьюЛетногоЭкипажа
	|		КОГДА Работники.ПериодЗавершения <= ДатыРегистра.ДатаДня
	|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Работники.ДолжностьЗавершения.ЯвляетсяДолжностьюЛетногоЭкипажа
	|		ИНАЧЕ Работники.Должность.ЯвляетсяДолжностьюЛетногоЭкипажа
	|	КОНЕЦ КАК ОблагаетсяПоДополнительномуТарифу,
	|	ВЫБОР
	|		КОГДА Работники.ПериодЗавершения ЕСТЬ NULL 
	|			ТОГДА БудущиеДанные.Должность.ЯвляетсяШахтерскойДолжностью
	|		КОГДА Работники.ПериодЗавершения <= ДатыРегистра.ДатаДня
	|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Работники.ДолжностьЗавершения.ЯвляетсяШахтерскойДолжностью
	|		ИНАЧЕ Работники.Должность.ЯвляетсяШахтерскойДолжностью
	|	КОНЕЦ КАК ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам,
	|	ВЫБОР
	|		КОГДА Работники.ПериодЗавершения ЕСТЬ NULL 
	|			ТОГДА БудущиеДанные.ПодразделениеОрганизации.СоответствуетСудамПодФлагомРФ
	|		КОГДА Работники.ПериодЗавершения <= ДатыРегистра.ДатаДня
	|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Работники.ПодразделениеОрганизацииЗавершения.СоответствуетСудамПодФлагомРФ
	|		ИНАЧЕ Работники.ПодразделениеОрганизации.СоответствуетСудамПодФлагомРФ
	|	КОНЕЦ КАК ПодразделениеЧленаЭкипажаСуднаПодФлагомРФ,
	|	ВЫБОР
	|		КОГДА Работники.ПериодЗавершения ЕСТЬ NULL 
	|			ТОГДА БудущиеДанные.Должность.ЯвляетсяФармацевтическойДолжностью
	|		КОГДА Работники.ПериодЗавершения <= ДатыРегистра.ДатаДня
	|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА Работники.ДолжностьЗавершения.ЯвляетсяФармацевтическойДолжностью
	|		ИНАЧЕ Работники.Должность.ЯвляетсяФармацевтическойДолжностью
	|	КОНЕЦ КАК ЯвляетсяФармацевтическойДолжностью
	|ПОМЕСТИТЬ ВТРабочееМестоСотрудников
	|ИЗ
	|	(ВЫБРАТЬ
	|		СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
	|		СдельныйНарядИсполнители.ДатаДня КАК ДатаДня,
	|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
	|	ИЗ
	|		ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО СдельныйНарядИсполнители.Сотрудник = РаботникиОрганизаций.Сотрудник
	|				И СдельныйНарядИсполнители.ДатаДня >= РаботникиОрганизаций.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СдельныйНарядИсполнители.Сотрудник,
	|		СдельныйНарядИсполнители.ДатаДня) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ПО ДатыРегистра.Сотрудник = Работники.Сотрудник
	|			И ДатыРегистра.Период = Работники.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБудущиеДанные КАК БудущиеДанные
	|		ПО ДатыРегистра.Сотрудник = БудущиеДанные.Сотрудник
	|			И ДатыРегистра.ДатаДня = БудущиеДанные.ДатаДня
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СдельныйНарядИсполнители.Ссылка,
	|	СдельныйНарядИсполнители.НомерСтроки КАК НомерСтроки,
	|	СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
	|	СдельныйНарядИсполнители.СотрудникНаименование,
	|	СдельныйНарядИсполнители.Физлицо,
	|	СдельныйНарядИсполнители.СуммаКНачислению,
	|	СдельныйНарядИсполнители.ОтработаноЧасов,
	|	СдельныйНарядИсполнители.ОтработаноДней,
	|	СдельныйНарядИсполнители.Часов,
	|	СдельныйНарядИсполнители.ВидВремени,
	|	СдельныйНарядИсполнители.ИндексДня КАК ИндексДня,
	|	СдельныйНарядИсполнители.ДатаДня,
	|	СдельныйНарядИсполнители.ВидВремени1Сводно,
	|	СдельныйНарядИсполнители.ВидВремени2Сводно,
	|	СдельныйНарядИсполнители.ВидВремени3Сводно,
	|	СдельныйНарядИсполнители.ВидВремени4Сводно,
	|	СдельныйНарядИсполнители.ВидВремени5Сводно,
	|	СдельныйНарядИсполнители.Дней1Сводно,
	|	СдельныйНарядИсполнители.Дней2Сводно,
	|	СдельныйНарядИсполнители.Дней3Сводно,
	|	СдельныйНарядИсполнители.Дней4Сводно,
	|	СдельныйНарядИсполнители.Дней5Сводно,
	|	СдельныйНарядИсполнители.Часов1Сводно,
	|	СдельныйНарядИсполнители.Часов2Сводно,
	|	СдельныйНарядИсполнители.Часов3Сводно,
	|	СдельныйНарядИсполнители.Часов4Сводно,
	|	СдельныйНарядИсполнители.Часов5Сводно,
	|	Работники.ГрафикРаботы КАК ГрафикРаботы,
	|	Работники.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией,
	|	Работники.ОблагаетсяПоДополнительномуТарифу,
	|	Работники.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам,
	|	Работники.ЯвляетсяФармацевтическойДолжностью КАК ЯвляетсяДоходомФармацевта,
	|	Работники.ПодразделениеЧленаЭкипажаСуднаПодФлагомРФ КАК ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПлановыеНачисления.ПериодЗавершения <= &ДатаАктуальности
	|					И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения
	|			ИНАЧЕ ПлановыеНачисления.ВидРасчета
	|		КОНЕЦ, ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.СдельнаяОплата)) КАК ВидРасчета,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПлановыеНачисления.ПериодЗавершения <= &ДатаАктуальности
	|					И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения.ВидНачисленияПоСт255НК
	|			ИНАЧЕ ПлановыеНачисления.ВидРасчета.ВидНачисленияПоСт255НК
	|		КОНЕЦ, ЗНАЧЕНИЕ(Перечисление.ВидыНачисленийОплатыТрудаПоСт255НК.пп1ст255)) КАК ВидНачисленияНУ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ПлановыеНачисления.ПериодЗавершения <= &ДатаАктуальности
	|					И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения.КодДоходаЕСН
	|			ИНАЧЕ ПлановыеНачисления.ВидРасчета.КодДоходаЕСН
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ОблагаетсяЦеликом)) КАК КодПоЕСН,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА &ОбрабатыватьРаботающихВСтудотряде
	|					И СдельныйНарядИсполнители.ЯвляетсяСтудентомРаботающимВСтудотряде
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору)
	|			КОГДА ПлановыеНачисления.ПериодЗавершения <= &ДатаАктуальности
	|					И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения.КодДоходаСтраховыеВзносы
	|			ИНАЧЕ ПлановыеНачисления.ВидРасчета.КодДоходаСтраховыеВзносы
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.ОблагаетсяЦеликом)) КАК КодПоСтраховымВзносам,
	|	ВЫБОР
	|		КОГДА СостояниеСотрудников.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СотрудникЧислитсяВОрганизации,
	|	ВЫБОР
	|		КОГДА СдельныйНарядИсполнители.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ЛОЖЬ КАК ЗаписатьПустоеЗначение
	|ПОМЕСТИТЬ ВТИсполнителиРегл
	|ИЗ
	|	ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочееМестоСотрудников КАК Работники
	|		ПО СдельныйНарядИсполнители.Сотрудник = Работники.Сотрудник
	|			И СдельныйНарядИсполнители.ДатаДня = Работники.ДатаДня
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|				&ДатаАктуальности,
	|				Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СдельныйНарядИсполнители.Сотрудник КАК Сотрудник
	|					ИЗ
	|						ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители)) КАК ПлановыеНачисления
	|		ПО (ВЫБОР
	|				КОГДА ПлановыеНачисления.ПериодЗавершения <= &ДатаАктуальности
	|						И ПлановыеНачисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ПлановыеНачисления.ВидРасчетаЗавершения.СпособРасчета
	|				ИНАЧЕ ПлановыеНачисления.ВидРасчета.СпособРасчета
	|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок))
	|			И СдельныйНарядИсполнители.Сотрудник = ПлановыеНачисления.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеСотрудников КАК СостояниеСотрудников
	|		ПО СдельныйНарядИсполнители.Сотрудник = СостояниеСотрудников.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	ИндексДня";
	Запрос.УстановитьПараметр("ОбрабатыватьРаботающихВСтудотряде", Константы.ИспользуетсяТрудРаботающихВСтудотряде.Получить());
	Запрос.Выполнить();
	
	Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод
		Или Не ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя 
		Или ВыборкаПоШапкеДокумента.УчитыватьВремяТолькоПриРасчете Тогда
		ВыборкаДанныхПоГрафику = Неопределено
	Иначе 
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыРегистра.Сотрудник,
		|	ДатыРегистра.ДатаДня
		|ПОМЕСТИТЬ ВТДниОплатыПоСдельномуЗаработку
		|ИЗ
		|	(ВЫБРАТЬ
		|		СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
		|		СдельныйНарядИсполнители.ДатаДня КАК ДатаДня,
		|		МАКСИМУМ(Регистр.Период) КАК Период,
		|		Регистр.ВидРасчетаИзмерение КАК ВидРасчетаИзмерение
		|	ИЗ
		|		ВТДанныеНарядаПоДням КАК СдельныйНарядИсполнители
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Регистр
		|			ПО СдельныйНарядИсполнители.Сотрудник = Регистр.Сотрудник
		|				И СдельныйНарядИсполнители.ДатаДня >= Регистр.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СдельныйНарядИсполнители.Сотрудник,
		|		СдельныйНарядИсполнители.ДатаДня,
		|		Регистр.ВидРасчетаИзмерение) КАК ДатыРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
		|		ПО ДатыРегистра.Сотрудник = Начисления.Сотрудник
		|			И ДатыРегистра.Период = Начисления.Период
		|			И ДатыРегистра.ВидРасчетаИзмерение = Начисления.ВидРасчетаИзмерение
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Начисления.ПериодЗавершения <= ДатыРегистра.ДатаДня
		|					И Начисления.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА Начисления.ВидРасчетаЗавершения.СпособРасчета
		|			ИНАЧЕ Начисления.ВидРасчета.СпособРасчета
		|		КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СдельныйНарядИсполнители.Сотрудник КАК Сотрудник,
		|	СдельныйНарядИсполнители.ДатаДня,
		|	СдельныйНарядИсполнители.ГрафикРаботы
		|ПОМЕСТИТЬ ВТДниПовременнойОплаты
		|ИЗ
		|	ВТИсполнителиРегл КАК СдельныйНарядИсполнители
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниОплатыПоСдельномуЗаработку КАК ДниОплатыПоСдельномуЗаработку
		|		ПО СдельныйНарядИсполнители.Сотрудник = ДниОплатыПоСдельномуЗаработку.Сотрудник
		|			И СдельныйНарядИсполнители.ДатаДня = ДниОплатыПоСдельномуЗаработку.ДатаДня
		|ГДЕ
		|	СдельныйНарядИсполнители.СотрудникЧислитсяВОрганизации
		|	И (НЕ СдельныйНарядИсполнители.ОшибкаНеСоответствиеСотрудникаИОрганизации)
		|	И СдельныйНарядИсполнители.ГрафикРаботы ЕСТЬ НЕ NULL 
		|	И ВЫБОР
		|			КОГДА ДниОплатыПоСдельномуЗаработку.Сотрудник ЕСТЬ NULL 
		|					И СдельныйНарядИсполнители.ИндексДня <> 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсполнителиРегл.Сотрудник КАК ГрафикРаботы,
		|	ЛОЖЬ КАК План,
		|	&Месяц КАК Месяц,
		|	ЕСТЬNULL(ИндивидуальныйГрафик.ВидУчетаВремени, ГрафикиРаботы.ВидУчетаВремени) КАК ВидУчетаВремени,
		|	ЕСТЬNULL(ИндивидуальныйГрафик.Дата, ГрафикиРаботы.Дата) КАК Дата,
		|	ЕСТЬNULL(ИндивидуальныйГрафик.ОсновноеЗначение, ГрафикиРаботы.ОсновноеЗначение) КАК ОсновноеЗначениеПолное,
		|	ЕСТЬNULL(ИндивидуальныйГрафик.ДополнительноеЗначение, ГрафикиРаботы.ДополнительноеЗначение) КАК ДополнительноеЗначениеПолное,
		|	ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка) КАК Документ
		|ИЗ
		|	ВТДниПовременнойОплаты КАК ИсполнителиРегл
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафик
		|		ПО (ИндивидуальныйГрафик.Месяц = &Месяц)
		|			И ИсполнителиРегл.ДатаДня = ИндивидуальныйГрафик.Дата
		|			И ИсполнителиРегл.Сотрудник = ИндивидуальныйГрафик.ГрафикРаботы
		|			И (ИндивидуальныйГрафик.План)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|		ПО (ГрафикиРаботы.Месяц = &Месяц)
		|			И ИсполнителиРегл.ДатаДня = ГрафикиРаботы.Дата
		|			И ИсполнителиРегл.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы
		|			И (ГрафикиРаботы.План)
		|ГДЕ
		|	ЕСТЬNULL(ИндивидуальныйГрафик.ВидУчетаВремени, ГрафикиРаботы.ВидУчетаВремени) ЕСТЬ НЕ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГрафикРаботы";
		
		ВыборкаДанныхПоГрафику =  Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсполнителиРегл.Ссылка,
	|	ИсполнителиРегл.НомерСтроки КАК НомерСтроки,
	|	ИсполнителиРегл.Сотрудник КАК Сотрудник,
	|	ИсполнителиРегл.СотрудникНаименование,
	|	ИсполнителиРегл.ФизЛицо,
	|	ИсполнителиРегл.СуммаКНачислению,
	|	ИсполнителиРегл.ОтработаноЧасов,
	|	ИсполнителиРегл.ОтработаноДней,
	|	ИсполнителиРегл.Часов,
	|	ИсполнителиРегл.ВидВремени,
	|	ИсполнителиРегл.ИндексДня КАК ИндексДня,
	|	ИсполнителиРегл.ВидВремени1Сводно,
	|	ИсполнителиРегл.ВидВремени2Сводно,
	|	ИсполнителиРегл.ВидВремени3Сводно,
	|	ИсполнителиРегл.ВидВремени4Сводно,
	|	ИсполнителиРегл.ВидВремени5Сводно,
	|	ИсполнителиРегл.Дней1Сводно,
	|	ИсполнителиРегл.Дней2Сводно,
	|	ИсполнителиРегл.Дней3Сводно,
	|	ИсполнителиРегл.Дней4Сводно,
	|	ИсполнителиРегл.Дней5Сводно,
	|	ИсполнителиРегл.Часов1Сводно,
	|	ИсполнителиРегл.Часов2Сводно,
	|	ИсполнителиРегл.Часов3Сводно,
	|	ИсполнителиРегл.Часов4Сводно,
	|	ИсполнителиРегл.Часов5Сводно,
	|	ИсполнителиРегл.ОблагаетсяПоДополнительномуТарифу,
	|	ИсполнителиРегл.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам,
	|	ИсполнителиРегл.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией,
	|	ИсполнителиРегл.ЯвляетсяДоходомФармацевта,
	|	ИсполнителиРегл.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ,
	|	ИсполнителиРегл.ВидРасчета,
	|	ИсполнителиРегл.ВидНачисленияНУ,
	|	ИсполнителиРегл.КодПОЕСН,
	|	ИсполнителиРегл.КодПоСтраховымВзносам,
	|	ИсполнителиРегл.СотрудникЧислитсяВОрганизации,
	|	ИсполнителиРегл.ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ИсполнителиРегл.ЗаписатьПустоеЗначение
	|ИЗ
	|	ВТИсполнителиРегл КАК ИсполнителиРегл
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Сотрудник,
	|	ИндексДня";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоИсполнителиРегл()

Функция СформироватьЗапросПоВыработка(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядВыработка": 
	//		Выбираются строки документа.  
    //
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СдельныйНарядВыработка.НомерСтроки КАК НомерСтроки,
	               |	СдельныйНарядВыработка.ТехнологическаяОперация,
	               |	СдельныйНарядВыработка.НоменклатурнаяГруппа,
	               |	СдельныйНарядВыработка.СтатьяЗатрат,
	               |	СдельныйНарядВыработка.СтатьяЗатрат.ВидЗатрат КАК ВидЗатрат,
	               |	СдельныйНарядВыработка.ОтражениеВУСН,
	               |	СдельныйНарядВыработка.ПодразделениеОрганизации
	               |ИЗ
	               |	Документ.СдельныйНаряд.Выработка КАК СдельныйНарядВыработка
	               |
	               |ГДЕ
	               |	СдельныйНарядВыработка.Ссылка = &ДокументСсылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();


КонецФункции // СформироватьЗапросПоИсполнители()

// Формирует запрос по таблице "Выработка" документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса. В запросе данные документа дополняются значениями
//  проверяемых параметров из связанного с
//
Функция СформироватьЗапросПоВыработкаРегл(Режим)

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	// Описание текста запроса:
	// 
	// 1. Выборка "СдельныйНарядВыработка": 
	//		Выбираются строки документа.  
	// 2. Выборки "ВидСубконтоДт i": 
	//		По плану счетов Хозрасчетный определяем тип 
    //      значения субконто, требуемых счету бух. учета 
    //
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СдельныйНарядВыработка.НомерСтроки КАК НомерСтроки,
	|	СдельныйНарядВыработка.ТехнологическаяОперация,
	|	СдельныйНарядВыработка.НоменклатурнаяГруппа,
	|	СдельныйНарядВыработка.СтатьяЗатрат,
	|	СдельныйНарядВыработка.СуммаРегл КАК СуммаЗаРаботу,
	|	СдельныйНарядВыработка.СчетЗатрат,
	|	СдельныйНарядВыработка.СчетЗатратНУ,
	|	СдельныйНарядВыработка.ОтражениеВУСН,
	|	СдельныйНарядВыработка.ОбъектСтроительства,
	|	СдельныйНарядВыработка.СпособСтроительства,
	|	СдельныйНарядВыработка.Продукция,
	|	СдельныйНарядВыработка.ХарактеристикаПродукции,
	|	СдельныйНарядВыработка.СерияПродукции,
	|	ВидСубконтоДт1.ВидСубконто КАК ВидСубконто1,
	|	ВидСубконтоДт2.ВидСубконто КАК ВидСубконто2,
	|	ВидСубконтоДт3.ВидСубконто КАК ВидСубконто3,
	|	ВидСубконтоДтНУ1.ВидСубконто КАК ВидСубконтоНУ1,
	|	ВидСубконтоДтНУ2.ВидСубконто КАК ВидСубконтоНУ2,
	|	ВидСубконтоДтНУ3.ВидСубконто КАК ВидСубконтоНУ3,
	|	СдельныйНарядВыработка.СпособРаспределенияЗатратНаВыпуск,
	|	ВЫБОР
	|		КОГДА СчетаУчетаПоДеятельностиЕНВД.Счет ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОблагаетсяЕНВД,
	|	СдельныйНарядВыработка.ПодразделениеОрганизации
	|ИЗ
	|	Документ.СдельныйНаряд.Выработка КАК СдельныйНарядВыработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт1
	|		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт1.Ссылка
	|			И (ВидСубконтоДт1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт2
	|		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт2.Ссылка
	|			И (ВидСубконтоДт2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконтоДт3
	|		ПО СдельныйНарядВыработка.СчетЗатрат = ВидСубконтоДт3.Ссылка
	|			И (ВидСубконтоДт3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоДтНУ1
	|		ПО СдельныйНарядВыработка.СчетЗатратНУ = ВидСубконтоДтНУ1.Ссылка
	|			И (ВидСубконтоДтНУ1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоДтНУ2
	|		ПО СдельныйНарядВыработка.СчетЗатратНУ = ВидСубконтоДтНУ2.Ссылка
	|			И (ВидСубконтоДтНУ2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Налоговый.ВидыСубконто КАК ВидСубконтоДтНУ3
	|		ПО СдельныйНарядВыработка.СчетЗатратНУ = ВидСубконтоДтНУ3.Ссылка
	|			И (ВидСубконтоДтНУ3.НомерСтроки = 3)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|		ПО СдельныйНарядВыработка.СчетЗатрат = СчетаУчетаПоДеятельностиЕНВД.Счет
	|ГДЕ
	|	СдельныйНарядВыработка.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВыработкаРегл()

// Получает данные о периодах действия и графиках сотрудников
//
Функция ПолучитьПериодыИГрафикиПоСотрудникам(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		Запрос.УстановитьПараметр("ДатаНачалаСобытия", 	  ВыборкаПоШапкеДокумента.ДатаНачалаПериода);
		Запрос.УстановитьПараметр("ДатаОкончанияСобытия", КонецДня(ВыборкаПоШапкеДокумента.ДатаНачалаПериода));
	Иначе
		Запрос.УстановитьПараметр("ДатаНачалаСобытия", 	  ВыборкаПоШапкеДокумента.ПериодРегистрации);
		Запрос.УстановитьПараметр("ДатаОкончанияСобытия", КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СдельныйНарядИсполнители.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ Сотрудники
	|ИЗ
	|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|ГДЕ
	|	СдельныйНарядИсполнители.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	&ДатаНачалаСобытия КАК ПериодДействияНачало,
		|	&ДатаОкончанияСобытия КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ПериодыДействияПоВсемСотрудникам
		|ИЗ
		|	Сотрудники КАК Сотрудники
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	НачалоПериода.Сотрудник КАК Сотрудник,
		|	НачалоПериода.ПериодДействияНачало,
		|	ЕСТЬNULL(КонецПериода.ПериодДействияКонец, &ДатаОкончанияСобытия) КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ПериодыДействия
		|ИЗ
		|	(ВЫБРАТЬ
		|		СрезПервых.Сотрудник КАК Сотрудник,
		|		СрезПервых.Период КАК ПериодДействияНачало
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|			ПлановыеНачисления.Период КАК Период,
		|			ПлановыеНачисления.ВидРасчета КАК ВидРасчета,
		|			ПлановыеНачисления.ПериодЗавершения КАК ПериодЗавершения,
		|			ПлановыеНачисления.ВидРасчетаЗавершения КАК ВидРасчетаЗавершения
		|		ИЗ
		|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПервых(
		|					&ДатаНачалаСобытия,
		|					Сотрудник В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							СдельныйНарядИсполнители.Сотрудник
		|						ИЗ
		|							Сотрудники КАК СдельныйНарядИсполнители)) КАК ПлановыеНачисления
		|		ГДЕ
		|			ПлановыеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)
		|			И ПлановыеНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)) КАК СрезПервых
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ПлановыеНачисления.Сотрудник КАК Сотрудник
		|			ИЗ
		|				РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|						&ДатаНачалаСобытия,
		|						Сотрудник В
		|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|								СдельныйНарядИсполнители.Сотрудник
		|							ИЗ
		|								Сотрудники КАК СдельныйНарядИсполнители)) КАК ПлановыеНачисления
		|			ГДЕ
		|				ПлановыеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)
		|				И ПлановыеНачисления.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)) КАК СрезПоследних
		|			ПО СрезПервых.Сотрудник = СрезПоследних.Сотрудник
		|	ГДЕ
		|		СрезПоследних.Сотрудник ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПлановыеНачисления.Сотрудник,
		|		ВЫБОР
		|			КОГДА ПлановыеНачисления.Период >= &ДатаНачалаСобытия
		|				ТОГДА ПлановыеНачисления.Период
		|			ИНАЧЕ &ДатаНачалаСобытия
		|		КОНЕЦ
		|	ИЗ
		|		РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|				&ДатаНачалаСобытия,
		|				Сотрудник В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						СдельныйНарядИсполнители.Сотрудник
		|					ИЗ
		|						Сотрудники КАК СдельныйНарядИсполнители)) КАК ПлановыеНачисления
		|	ГДЕ
		|		ПлановыеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)) КАК НачалоПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|			ВЫБОР
		|				КОГДА ПлановыеНачисления.Период < &ДатаНачалаСобытия
		|						ИЛИ ПлановыеНачисления.Период > &ДатаОкончанияСобытия
		|					ТОГДА &ДатаОкончанияСобытия
		|				ИНАЧЕ ПлановыеНачисления.Период
		|			КОНЕЦ КАК ПериодДействияКонец
		|		ИЗ
		|			РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
		|					&ДатаОкончанияСобытия,
		|					Сотрудник В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							СдельныйНарядИсполнители.Сотрудник
		|						ИЗ
		|							Сотрудники КАК СдельныйНарядИсполнители)) КАК ПлановыеНачисления
		|		ГДЕ
		|			ПлановыеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СдельныйЗаработок)
		|			И ПлановыеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)) КАК КонецПериода
		|		ПО НачалоПериода.Сотрудник = КонецПериода.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(ПериодыДействия.ПериодДействияНачало, &ДатаНачалаСобытия) КАК ПериодДействияНачало,
		|	ЕСТЬNULL(ПериодыДействия.ПериодДействияКонец, &ДатаОкончанияСобытия) КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ПериодыДействияПоВсемСотрудникам
		|ИЗ
		|	Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодыДействия КАК ПериодыДействия
		|		ПО Сотрудники.Сотрудник = ПериодыДействия.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	ПериодыДействияПоВсемСотрудникам.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодЗаписи,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ПериодыЗаписейОГрафикахРаботы
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыДействияПоВсемСотрудникам КАК ПериодыДействияПоВсемСотрудникам
	|		ПО РаботникиОрганизаций.Сотрудник = ПериодыДействияПоВсемСотрудникам.Сотрудник
	|			И РаботникиОрганизаций.Период <= ПериодыДействияПоВсемСотрудникам.ПериодДействияНачало
	|			И (РаботникиОрганизаций.Активность)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыДействияПоВсемСотрудникам.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПериодыДействияПоВсемСотрудникам.Сотрудник,
	|	МИНИМУМ(РаботникиОрганизаций.Период),
	|	2
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыДействияПоВсемСотрудникам КАК ПериодыДействияПоВсемСотрудникам
	|		ПО РаботникиОрганизаций.Сотрудник = ПериодыДействияПоВсемСотрудникам.Сотрудник
	|			И РаботникиОрганизаций.Период > ПериодыДействияПоВсемСотрудникам.ПериодДействияНачало
	|			И (РаботникиОрганизаций.Активность)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыДействияПоВсемСотрудникам.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодЗаписи,
	|	Сотрудник
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыЗаписейОГрафикахРаботы.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы,
	|	ПериодыЗаписейОГрафикахРаботы.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ГрафикиРаботы
	|ИЗ
	|	ПериодыЗаписейОГрафикахРаботы КАК ПериодыЗаписейОГрафикахРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ПериодыЗаписейОГрафикахРаботы.ПериодЗаписи = РаботникиОрганизаций.Период
	|			И ПериодыЗаписейОГрафикахРаботы.Сотрудник = РаботникиОрганизаций.Сотрудник
	|			И (РаботникиОрганизаций.ГрафикРаботы <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Приоритет
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРаботы.Сотрудник КАК Сотрудник,
	|	ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ ГрафикиРаботыСотрудников
	|ИЗ
	|	ГрафикиРаботы КАК ГрафикиРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ГрафикиРаботы.Сотрудник КАК Сотрудник,
	|			МИНИМУМ(ГрафикиРаботы.Приоритет) КАК Приоритет
	|		ИЗ
	|			ГрафикиРаботы КАК ГрафикиРаботы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ГрафикиРаботы.Сотрудник) КАК АктуальныеГрафики
	|		ПО ГрафикиРаботы.Сотрудник = АктуальныеГрафики.Сотрудник
	|			И ГрафикиРаботы.Приоритет = АктуальныеГрафики.Приоритет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыДействияПоВсемСотрудникам.Сотрудник,
	|	ПериодыДействияПоВсемСотрудникам.ПериодДействияНачало,
	|	ПериодыДействияПоВсемСотрудникам.ПериодДействияКонец,
	|	ЕСТЬNULL(ГрафикиРаботыСотрудников.ГрафикРаботы, НЕОПРЕДЕЛЕНО) КАК ГрафикРаботы
	|ИЗ
	|	ПериодыДействияПоВсемСотрудникам КАК ПериодыДействияПоВсемСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиРаботыСотрудников КАК ГрафикиРаботыСотрудников
	|		ПО ПериодыДействияПоВсемСотрудникам.Сотрудник = ГрафикиРаботыСотрудников.Сотрудник";
	
	Выборка 		  = Запрос.Выполнить().Выбрать();
	ДанныеСотрудников = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеСотрудников.Вставить(
			Выборка.Сотрудник,
			Новый Структура(
				"ПериодДействияНачало, ПериодДействияКонец, ГрафикРаботы",
				Выборка.ПериодДействияНачало, Выборка.ПериодДействияКонец, Выборка.ГрафикРаботы));
		
	КонецЦикла;
	
	Возврат ДанныеСотрудников;
	
КонецФункции

// Проверяет правильность заполнения реквизитов в строке ТЧ "Исполнители" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиИсполнители(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, ВыборкаПоРаботникиРегл, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Исполнители"": ";
	
	// Сотрудник
	Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
		Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
			
			Для Сч = 1 По 5 Цикл
			
				Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["ВидВремени"+Сч+"Сводно"]) Тогда
					
					Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Часов"+Сч+"Сводно"]) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано значение отработанных часов!", Отказ, Заголовок);
					КонецЕсли; 
					
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Часов"+Сч+"Сводно"]) 
					Или ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента["Дней"+Сч+"Сводно"])Тогда
					
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано значение вида времени!", Отказ, Заголовок);
					
				КонецЕсли; 
			
			КонецЦикла;
			
		ИначеЕсли ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
			
			Если ВыборкаПоСтрокамДокумента.Часов = 0 Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано значение отработанных часов для вводимого дня!", Отказ, Заголовок);
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
			И Не РабочееВремяЗаполнено И ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидВремени) Тогда
			
			РабочееВремяЗаполнено = Истина;
			
		КонецЕсли; 
	КонецЕсли;
	
	ПроверитьЗаполнениеСтрокиИсполнителиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации);
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиИсполнители()

Процедура ПроверитьЗаполнениеСтрокиИсполнителиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, УчетнаяПолитикаПоПерсоналуОрганизации)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если ВыборкаПоСтрокамДокумента.ЗаписатьПустоеЗначение Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
		""" табл. части ""Исполнители"": ";
		
		// Организация сотрудника должна совпадать с организацией документа
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник оформлен на другую организацию!", Отказ, Заголовок);
		КонецЕсли;
		
		// Проверка: ранее работник должен быть принят на работу
		Если НЕ ВыборкаПоСтрокамДокумента.СотрудникЧислитсяВОрганизации Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указанный сотрудник не принят в организацию в данном периоде!", Отказ, Заголовок);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения реквизитов в строке ТЧ "Выработка" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиВыработка(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Выработка"": ";
	
	// ТехнологическаяОперация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТехнологическаяОперация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбрана технологическая операция!", Отказ, Заголовок);
	КонецЕсли;

	// СтатьяЗатрат
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СтатьяЗатрат) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана статья затрат!", Отказ, Заголовок);
	ИначеЕсли Не ВыборкаПоСтрокамДокумента.ВидЗатрат = Перечисления.ВидыЗатрат.ОплатаТруда Тогда
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "укажите статью затрат с видом затрат ""Оплата труда""!", Отказ, Заголовок);
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "укажите статью затрат с видом затрат ""Оплата труда""!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

Процедура ПроверитьЗаполнениеСтрокиВыработкаРегл(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Выработка"": ";
	
	// счета учета
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетЗатрат) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан счет бухгалтерского учета!", Отказ, Заголовок);
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение организации!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВНалоговомУчете Тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.СчетЗатратНУ) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан счет налогового учета!", Отказ, Заголовок);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движения регистров
//
Процедура ДвиженияРегистров(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиУпр, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл)
	
	// фактическая выработка работников
	ДвиженияФактическойВыработкиУпр(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиУпр);
	ДвиженияФактическойВыработкиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл);
	ДвиженияРегистровБУиНУРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл);
	
	УправлениеЗатратамиДвиженияПоРегистрам.СформироватьДвиженияПоОтражениюЗатрат(
		ВыборкаПоШапкеДокумента,
		Неопределено, // ТаблицаЗатрат,
		Неопределено // ВидОтраженияВУчете
	);
		
КонецПроцедуры // ДвиженияРегистров()

Процедура ДвиженияФактическойВыработкиУпр(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВУправленческомУчете Тогда
		
		КоличествоДнейВПериодеРегистрации = День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
		МассивКоэффициентов = Новый Массив(КоличествоДнейВПериодеРегистрации);
		МассивРаспределенияНачисленнойСуммыПоДням = Новый Массив(КоличествоДнейВПериодеРегистрации);
		НаборДвижений = Движения.ФактическаяВыработкаРаботников;
		
		Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("НомерСтроки") Цикл 
			Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("Сотрудник") Цикл 
				
				Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
					
					Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
						И ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
						
						Для Сч = 0 По КоличествоДнейВПериодеРегистрации - 1 Цикл
							МассивКоэффициентов[Сч] = 0
						КонецЦикла;
						Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("ИндексДня") Цикл
							МассивКоэффициентов[ВыборкаПоРаботники.ИндексДня - 1] = ВычислитьКоличествоЧасовЗаДень(ВыборкаПоРаботники);
						КонецЦикла;
						
						МассивРаспределенияНачисленнойСуммыПоДням = ОбщегоНазначенияЗК.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению, МассивКоэффициентов);
						
						Для ИндексДня = 1 По КоличествоДнейВПериодеРегистрации Цикл
							Если МассивРаспределенияНачисленнойСуммыПоДням[ИндексДня-1] <> 0 Тогда
								НоваяСтрока = НаборДвижений.Добавить();
								НоваяСтрока.ФизЛицо				= ВыборкаПоРаботники.ФизЛицо;
								
								НоваяСтрока.СпособВводаДанных	= ВыборкаПоШапкеДокумента.СпособВводаДанных;
								НоваяСтрока.Период				= Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ИндексДня);
								НоваяСтрока.Выработка			= МассивРаспределенияНачисленнойСуммыПоДням[ИндексДня-1];
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						
						НоваяСтрока = НаборДвижений.Добавить();
						НоваяСтрока.ФизЛицо				= ВыборкаПоРаботники.ФизЛицо;
						НоваяСтрока.Выработка			= ВыборкаПоРаботники.СуммаКНачислению;
						
						Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
							НоваяСтрока.Период			= ВыборкаПоШапкеДокумента.ДатаНачалаПериода;
						Иначе
							НоваяСтрока.Период			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
						КонецЕсли;
						
						Если НЕ ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя 
							И ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
							НоваяСтрока.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод	
						Иначе
							НоваяСтрока.СпособВводаДанных	= ВыборкаПоШапкеДокумента.СпособВводаДанных;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияФактическойВыработкиУпр()

Процедура ДвиженияФактическойВыработкиРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники)
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		КоличествоДнейВПериодеРегистрации = День(КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации));
		МассивКоэффициентов = Новый Массив(КоличествоДнейВПериодеРегистрации);
		МассивРаспределенияНачисленнойСуммыПоДням = Новый Массив(КоличествоДнейВПериодеРегистрации);
		НаборДвижений = Движения.ФактическаяВыработкаРаботниковОрганизаций;
		
		Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("НомерСтроки") Цикл 
			Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("Сотрудник") Цикл 
				
				Если ВыборкаПоРаботники.СуммаКНачислению <> 0 Тогда
					
					Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
						И ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя Тогда
						
						Для Сч = 0 По КоличествоДнейВПериодеРегистрации - 1 Цикл
							МассивКоэффициентов[Сч] = 0
						КонецЦикла;
						Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("ИндексДня") Цикл
							МассивКоэффициентов[ВыборкаПоРаботники.ИндексДня - 1] = ВычислитьКоличествоЧасовЗаДень(ВыборкаПоРаботники);
						КонецЦикла; 
						
						МассивРаспределенияНачисленнойСуммыПоДням = ОбщегоНазначенияЗК.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению, МассивКоэффициентов);
						
						Для ИндексДня = 1 По КоличествоДнейВПериодеРегистрации Цикл
							Если МассивРаспределенияНачисленнойСуммыПоДням[ИндексДня-1] <> 0 Тогда
								НоваяСтрока = НаборДвижений.Добавить();
								НоваяСтрока.Сотрудник			= ВыборкаПоРаботники.Сотрудник;
								НоваяСтрока.Организация			= ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
								НоваяСтрока.СпособВводаДанных	= ВыборкаПоШапкеДокумента.СпособВводаДанных;
								НоваяСтрока.Период				= Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ИндексДня);
								НоваяСтрока.Выработка			= МассивРаспределенияНачисленнойСуммыПоДням[ИндексДня-1];
							КонецЕсли;
						КонецЦикла;
						
					Иначе
						
						НоваяСтрока = НаборДвижений.Добавить();
						НоваяСтрока.Сотрудник			= ВыборкаПоРаботники.Сотрудник;
						НоваяСтрока.Организация			= ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
						НоваяСтрока.Выработка			= ВыборкаПоРаботники.СуммаКНачислению;
						
						Если ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
							НоваяСтрока.Период			= ВыборкаПоШапкеДокумента.ДатаНачалаПериода;
						Иначе
							НоваяСтрока.Период			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
						КонецЕсли;
						
						Если НЕ ВыборкаПоШапкеДокумента.УчитыватьОтработанноеВремя 
							И ВыборкаПоШапкеДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
							НоваяСтрока.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод	
						Иначе
							НоваяСтрока.СпособВводаДанных	= ВыборкаПоШапкеДокумента.СпособВводаДанных;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияФактическойВыработкиРегл()

Процедура ДвиженияРегистровБУиНУРегл(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, ТаблицаРабот)
	
	Если НЕ ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеВидаСубконтоИКолонкиТЗ = Новый Соответствие;
	СоответствиеВидаСубконтоИКолонкиТЗ.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, 			"СтатьяЗатрат");
	СоответствиеВидаСубконтоИКолонкиТЗ.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы, 	"НоменклатурнаяГруппа");
	СоответствиеВидаСубконтоИКолонкиТЗ.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения, 		"ПодразделениеОрганизации");
	СоответствиеВидаСубконтоИКолонкиТЗ.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства, 	"ОбъектСтроительства");
	СоответствиеВидаСубконтоИКолонкиТЗ.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СпособыСтроительства, 	"СпособСтроительства");
	СоответствиеВидаСубконтоИКолонкиТЗ.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, 			"Продукция");
	
	// Определим способ ведения учета расчетов с персоналом - сводно/подробно
	ВестиРеглУчетРасчетовСПерсоналомПодробно = НЕ глЗначениеПеременной("ВестиРеглУчетРасчетовСПерсоналомСводно");
	
	РегистрироватьСтраховыеВзносы	= (ВыборкаПоШапкеДокумента.ПериодРегистрации >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
	
	СчетУчетаРасчетовСРаботниками 	= ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	СчетУчетаРасчетовСРаботникамиНУ = ПланыСчетов.Налоговый.РасчетыСПерсоналомПоОплатеТруда;
	
	ГоловнаяОрганизация				= ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
	
	МассивСуммЗаРаботы 				= ТаблицаРабот.ВыгрузитьКолонку("СуммаЗаРаботу");
	
	ДанныеПоСотрудникам 			= ПолучитьПериодыИГрафикиПоСотрудникам(ВыборкаПоШапкеДокумента);
	
	ВыборкаПоРаботники.Сбросить();
	
	Сч = 0;
	
	Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			Сч = Сч + 1;
			
			Если ВыборкаПоРаботники.СуммаКНачислению = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСуммКНачислению = ОбщегоНазначенияЗК.РаспределитьПропорционально(ВыборкаПоРаботники.СуммаКНачислению, МассивСуммЗаРаботы);
			ДанныеСотрудника 	  = ДанныеПоСотрудникам.Получить(ВыборкаПоРаботники.Сотрудник);
			
			Для Каждого СтрокаТЗ Из ТаблицаРабот Цикл
				
				НомерУчета = ТаблицаРабот.Индекс(СтрокаТЗ);
				Результат  = МассивСуммКНачислению[НомерУчета];
				
				////////////////////////////////////////////
				// Движение по регистру БУОсновныеНачисления
				Строка = Движения.БУОсновныеНачисления.Добавить();
				
				ЗаполнитьЗначенияСвойств(Строка, ДанныеСотрудника); // периоды и график
				
				// свойства
				Строка.ПериодРегистрации			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
				Строка.ВидРасчета					= ВыборкаПоРаботники.ВидРасчета;
				// измерения
				Строка.Сотрудник					= ВыборкаПоРаботники.Сотрудник;
				Строка.Физлицо						= ВыборкаПоРаботники.Физлицо;
				Строка.Организация					= ГоловнаяОрганизация;
				// ресурсы
				Строка.Результат					= Результат;
				// реквизиты
				Строка.ВидУчетаВремени				= Перечисления.ВидыУчетаВремени.ПоЧасам;
				Строка.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
				Строка.ДокументОснование			= ВыборкаПоШапкеДокумента.Ссылка;
				// данные бухучета
				Строка.СчетДт						= СтрокаТЗ.СчетЗатрат;
				Строка.СчетКт						= СчетУчетаРасчетовСРаботниками;
				
				// субконто
				Для СчСк = 1 По 3 Цикл
					
					ВидыСубконтоСк = СтрокаТЗ["ВидСубконто" + СчСк];
					ИмяКолонкиТЗ   = СоответствиеВидаСубконтоИКолонкиТЗ.Получить(ВидыСубконтоСк);
					
					Если ИмяКолонкиТЗ <> Неопределено Тогда
						Строка["СубконтоДт" + СчСк] = СтрокаТЗ[ИмяКолонкиТЗ];
					КонецЕсли;
					
				КонецЦикла;
				
				Строка.СубконтоКт1 				 = ВыборкаПоРаботники.ФизЛицо;
				Строка.СпособРаспределенияЗатрат = СтрокаТЗ.СпособРаспределенияЗатратНаВыпуск;
				
				// данные налоговых учетов (Налог на прибыль, УСН)
				Строка.ОтражениеВУСН = СтрокаТЗ.ОтражениеВУСН;
					
				Если Не СтрокаТЗ.ОблагаетсяЕНВД Тогда
					
					Строка.СчетДтНУ = СтрокаТЗ.СчетЗатратНУ;
					Строка.СчетКтНУ = СчетУчетаРасчетовСРаботникамиНУ;
					
					// субконто
					Для СчСк = 1 По 3 Цикл
						
						ВидыСубконтоСк = СтрокаТЗ["ВидСубконтоНУ" + СчСк];
						ИмяКолонкиТЗ   = СоответствиеВидаСубконтоИКолонкиТЗ.Получить(ВидыСубконтоСк);
						
						Если ИмяКолонкиТЗ <> Неопределено Тогда
							Строка["СубконтоДтНУ" + СчСк] = СтрокаТЗ[ИмяКолонкиТЗ];
						КонецЕсли;
						
					КонецЦикла;
					
					Строка.СубконтоКтНУ1 = ВыборкаПоРаботники.ФизЛицо;
					Строка.СубконтоКтНУ2 = ВыборкаПоРаботники.ВидНачисленияНУ;
					
				КонецЕсли;
				
				/////////////////////////////////////////////////////////////////////////////////////
				// Движение по регистру ЕСНОсновныеНачисления (данные учета для целей исчисления ЕСН)
				СтрокаНабора = Движения.ЕСНОсновныеНачисления.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаНабора, ДанныеСотрудника); // периоды и график
				
				// свойства
				СтрокаНабора.ПериодРегистрации			= ВыборкаПоШапкеДокумента.ПериодРегистрации;
				СтрокаНабора.ВидРасчета					= ВыборкаПоРаботники.ВидРасчета;
				// измерения
				СтрокаНабора.Сотрудник					= ВыборкаПоРаботники.Сотрудник;
				СтрокаНабора.Физлицо					= ВыборкаПоРаботники.Физлицо;
				СтрокаНабора.Организация				= ГоловнаяОрганизация;
				// ресурсы
				СтрокаНабора.Результат					= Результат;
				// реквизиты
				СтрокаНабора.ВидУчетаВремени			= Перечисления.ВидыУчетаВремени.ПоЧасам;
				СтрокаНабора.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
				СтрокаНабора.КодДоходаЕСН				= ?(РегистрироватьСтраховыеВзносы, ВыборкаПоРаботники.КодПоСтраховымВзносам, ВыборкаПоРаботники.КодПоЕСН);
				СтрокаНабора.ОблагаетсяЕНВД				= СтрокаТЗ.ОблагаетсяЕНВД;
				СтрокаНабора.ДокументОснование			= ВыборкаПоШапкеДокумента.Ссылка;
				
				СтрокаНабора.ОблагаетсяПоДополнительномуТарифу 			= ВыборкаПоРаботники.ОблагаетсяПоДополнительномуТарифу;
				СтрокаНабора.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам = ВыборкаПоРаботники.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам;
				СтрокаНабора.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией = ВыборкаПоРаботники.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией;
				
				Если РегистрироватьСтраховыеВзносы Тогда
					
					/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					// Движение по регистру СтраховыеВзносыСведенияОДоходах (данные о доходах для целей исчисления страховых взносов)
					СтрокаНабора = Движения.СтраховыеВзносыСведенияОДоходах.Добавить();
					
					// измерения
					СтрокаНабора.ОблагаетсяПоДополнительномуТарифу 			 = ВыборкаПоРаботники.ОблагаетсяПоДополнительномуТарифу;
					СтрокаНабора.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам  = ВыборкаПоРаботники.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам;
					СтрокаНабора.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией = ВыборкаПоРаботники.ОблагаетсяВзносамиЗаЗанятыхНаРаботахСДосрочнойПенсией;
					СтрокаНабора.ЯвляетсяДоходомФармацевта 					 = ВыборкаПоРаботники.ЯвляетсяДоходомФармацевта;
					СтрокаНабора.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ = ВыборкаПоРаботники.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ;
					// реквизиты
					СтрокаНабора.ВидДохода  = ВыборкаПоРаботники.КодПоСтраховымВзносам;
					СтрокаНабора.ВидРасчета	= ВыборкаПоРаботники.ВидРасчета;
					
				Иначе
					
					/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					// Движение по регистру ЕСНСведенияОДоходах (данные о доходах для целей исчисления ЕСН)
					СтрокаНабора = Движения.ЕСНСведенияОДоходах.Добавить();
					
					// реквизиты
					СтрокаНабора.КодДоходаЕСН = ВыборкаПоРаботники.КодПоЕСН;
					
				КонецЕсли;
				
				// свойства
				СтрокаНабора.Период						= ВыборкаПоШапкеДокумента.ПериодРегистрации;
				// измерения
				СтрокаНабора.Физлицо					= ВыборкаПоРаботники.Физлицо;
				СтрокаНабора.Организация				= ГоловнаяОрганизация;
				// ресурсы
				СтрокаНабора.Результат					= Результат;
				// реквизиты
				СтрокаНабора.ОблагаетсяЕНВД				= СтрокаТЗ.ОблагаетсяЕНВД;
				СтрокаНабора.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
				
				////////////////////////////////////
				// Движение по регистру Хозрасчетный
				Проводка = Движения.Хозрасчетный.Добавить();
				
				// свойства
				Проводка.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
				Проводка.СчетДт = СтрокаТЗ.СчетЗатрат;
				
				Проводка.СчетКт = СчетУчетаРасчетовСРаботниками;
				Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
					Проводка.СубконтоКт.РаботникиОрганизации = ВыборкаПоРаботники.ФизЛицо;
				КонецЕсли;
				
				// измерения
				Проводка.Организация 	= ВыборкаПоШапкеДокумента.Организация;
				// ресурсы                               
				Проводка.Сумма       	= Результат;
				// реквизиты
				Проводка.Содержание  	= "Сдельная зарплата";
				Проводка.НомерЖурнала  	= "ЗП";
				
				// субконто
				Для СчСк = 1 По 3 Цикл
					
					ВидыСубконтоСк = СтрокаТЗ["ВидСубконто" + СчСк];
					ИмяКолонкиТЗ   = СоответствиеВидаСубконтоИКолонкиТЗ.Получить(ВидыСубконтоСк);
					
					Если ИмяКолонкиТЗ <> Неопределено Тогда
						Проводка.СубконтоДт[ВидыСубконтоСк] = СтрокаТЗ[ИмяКолонкиТЗ];
						
						Если ВидыСубконтоСк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
							Проводка.СубконтоДт.СпособыСтроительства = СтрокаТЗ.СпособСтроительства;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла; 
				
				/////////////////////////////////
				// Движение по регистру Налоговый
				Если НЕ ВыборкаПоШапкеДокумента.ОтражатьВНалоговомУчете Тогда
					Продолжить;
				КонецЕсли;
				
				Проводка = Движения.Налоговый.Добавить();
				
				// свойства
				Проводка.Период = ВыборкаПоШапкеДокумента.ПериодРегистрации;
				Проводка.СчетДт = СтрокаТЗ.СчетЗатратНУ;
				
				// субконто
				Для СчСк = 1 По 3 Цикл
					
					ВидыСубконтоСк = СтрокаТЗ["ВидСубконтоНУ" + СчСк];
					ИмяКолонкиТЗ   = СоответствиеВидаСубконтоИКолонкиТЗ.Получить(ВидыСубконтоСк);
					
					Если ИмяКолонкиТЗ <> Неопределено Тогда
						Проводка.СубконтоДт[ВидыСубконтоСк] = СтрокаТЗ[ИмяКолонкиТЗ];
					КонецЕсли;
					
				КонецЦикла; 
				
				Проводка.СчетКт = СчетУчетаРасчетовСРаботникамиНУ;
				Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
					Проводка.СубконтоКт.РаботникиОрганизации 				  = ВыборкаПоРаботники.ФизЛицо;
					Проводка.СубконтоКт.ВидНачисленийОплатыТрудаПоСтатье255НК = ВыборкаПоРаботники.ВидНачисленияНУ;
				КонецЕсли;
				
				// измерения
				Проводка.Организация = ВыборкаПоШапкеДокумента.Организация;
				НалоговыйУчет.ВидУчетаПоПБУ18(Проводка);
				// ресурсы                               
				Проводка.Сумма       = Результат;
				// реквизиты
				Проводка.Содержание  = "Сдельная зарплата";
				Проводка.НомерЖурнала  = "ЗП";
				
			КонецЦикла; // ТаблицаРабот
				
		КонецЦикла; // СледующийПоЗначениюПоля("Сотрудник")
	КонецЦикла; // СледующийПоЗначениюПоля("НомерСтроки")
	
КонецПроцедуры

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(ВыборкаПоШапкеДокумента, ВыборкаПоОтработанноеВремя, НаборЗаписей)
	
	ОбрабатываемаяДата = Дата(Год(ВыборкаПоШапкеДокумента.ПериодРегистрации), Месяц(ВыборкаПоШапкеДокумента.ПериодРегистрации), ВыборкаПоОтработанноеВремя.ИндексДня);
	СуммаВремениЗаВесьДень = ВыборкаПоОтработанноеВремя.Часов;
	
	Если СуммаВремениЗаВесьДень > 0 Тогда
		
		Движение = НаборЗаписей.Добавить();
		// Свойства
		Движение.Период								= ОбрабатываемаяДата;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоОтработанноеВремя.Сотрудник;
		Если ОтражатьВБухгалтерскомУчете Тогда
			Движение.Организация					= ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
		КонецЕсли;
		Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоОтработанноеВремя.ВидВремени;
		
		// Ресурсы
		Движение.Дней								= ?(СуммаВремениЗаВесьДень = 0, 0, 1);
		Движение.Часов								= СуммаВремениЗаВесьДень;
		
		// Реквизиты
		Движение.ВЦеломЗаПериод						= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы(ВыборкаПоОтработанноеВремя, НаборЗаписей)
	
	ОбрабатываемаяДата = Дата(Год(ПериодРегистрации), Месяц(ПериодРегистрации), ВыборкаПоОтработанноеВремя.ИндексДня);
	ВидУчетаВремени = ПолучитьВидУчетаВремениПоКлассификатору(ВыборкаПоОтработанноеВремя.ВидВремени);
	
	Если ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторВечерниеЧасы Тогда
		СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоВечернимЧасам);
	ИначеЕсли ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторНочныеЧасы Тогда
		СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоНочнымЧасам);
	Иначе
		СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоЧасам);
	КонецЕсли;
	СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
	
	МассивСтрок = НаборЗаписей.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Движение = МассивСтрок[0];
		Если Не Движение.Документ.Пустая() Тогда
			Возврат;
		КонецЕсли;
	Иначе
		
		Движение = НаборЗаписей.Добавить();
		Движение.ГрафикРаботы = ?(ОтражатьВБухгалтерскомУчете,ВыборкаПоОтработанноеВремя.Сотрудник,ВыборкаПоОтработанноеВремя.Физлицо);
		Движение.ВидУчетаВремени = ВидУчетаВремени;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Ложь;
		Движение.Месяц = ПериодРегистрации;
		
	КонецЕсли;
	
	// Ресурсы
	Если ВыборкаПоОтработанноеВремя.ВидВремени.РабочееВремя = Ложь Тогда
		Движение.ОсновноеЗначениеПолное = 0;
		Движение.ДополнительноеЗначениеПолное = 0;
	Иначе
		Движение.ОсновноеЗначениеПолное = Движение.ОсновноеЗначениеПолное + ВыборкаПоОтработанноеВремя.Часов;
		Движение.ДополнительноеЗначениеПолное = ?((Движение.ДополнительноеЗначениеПолное > 0) ИЛИ (ВыборкаПоОтработанноеВремя.Часов > 0), 1, 0);
	КонецЕсли;
	
	// Реквизиты
	Если ВыборкаПоОтработанноеВремя.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка() Тогда
		Движение.Документ = Документы.СдельныйНаряд.ПустаяСсылка();
	Иначе
		Движение.Документ = Ссылка;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	НаборЗаписей							- набор записей для РабочееВремяРаботниковОрганизаций 
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни(ВыборкаПоОтработанноеВремя, НаборЗаписей)
	
	ОбрабатываемаяДата = Дата(Год(ПериодРегистрации), Месяц(ПериодРегистрации), ВыборкаПоОтработанноеВремя.ИндексДня);
	
	СтруктураПоиска.Вставить("ВидУчетаВремени", Перечисления.ВидыУчетаВремени.ПоДням);
	СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
	
	МассивСтрок = НаборЗаписей.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Движение = МассивСтрок[0];
		Если Не Движение.Документ.Пустая() Тогда
			Возврат;
		КонецЕсли;
	Иначе
		
		Движение = НаборЗаписей.Добавить();
		Движение.ГрафикРаботы = ?(ОтражатьВБухгалтерскомУчете,ВыборкаПоОтработанноеВремя.Сотрудник,ВыборкаПоОтработанноеВремя.Физлицо);
		Движение.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		Движение.Дата = ОбрабатываемаяДата;
		Движение.План = Ложь;
		Движение.Месяц = ПериодРегистрации;
		
	КонецЕсли;
	
	
	Если ВремяЯвки > 0 Тогда
		// Ресурсы
		Движение.ОсновноеЗначениеПолное = ?(ВремяЯвки = 0, 0, 1);
		Движение.ДополнительноеЗначениеПолное = ВремяЯвки;
		// Реквизиты
		Движение.Документ = Ссылка;
	Иначе
		// Ресурсы
		Движение.ОсновноеЗначениеПолное = ?(ВыборкаПоОтработанноеВремя.Часов = 0, 0, 1);
		Движение.ДополнительноеЗначениеПолное = ВыборкаПоОтработанноеВремя.Часов;
		// Реквизиты
		Движение.Документ = Документы.СдельныйНаряд.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни()

// Процедура создает пустые записи в регистре за ПериодРегистрации, в разрезе сотрудников
// если это первый (единственный) документ за этот период, в разрезе сотрудников
Функция ПолучитьМассивСотрудниковДляСозданияПустыхЗаписей(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	
	Если ВыборкаПоШапкеДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УсловиеСотрудника = "";
	Иначе
		УсловиеСотрудника = ".ФизЛицо";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СдельныйНарядИсполнители.Сотрудник" + УсловиеСотрудника + " КАК Сотрудник
	|ИЗ
	|	Документ.СдельныйНаряд.Исполнители КАК СдельныйНарядИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|		ПО ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СдельныйНарядИсполнители.Сотрудник" + УсловиеСотрудника + "
	|			И (ГрафикиРаботыПоВидамВремени.Месяц = &Месяц)
	|			И ((НЕ ГрафикиРаботыПоВидамВремени.План))
	|ГДЕ
	|	СдельныйНарядИсполнители.Ссылка = &Документ
	|	И ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("Месяц", ПериодРегистрации);
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник")
	
КонецФункции // ПолучитьМассивСотрудниковДляСозданияПустыхЗаписей()

// Процедура удаляет все записи из регистра за ПериодРегистрации,
// если документ последний в этом периоде, в разрезе сотрудников
Процедура УдалитьЗаписиЗаПериодДокумента()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ОтражатьВБухгалтерскомУчете Тогда
		УсловиеСотрудника = "";
	Иначе
		УсловиеСотрудника = ".ФизЛицо";
	КонецЕсли;
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботы.Сотрудник" + УсловиеСотрудника + " КАК ГрафикРаботы,
	|	ГрафикиРаботы.Ссылка.ПериодРегистрации КАК Месяц,
	|	ГрафикиРаботы.Ссылка.СпособВводаДанных КАК СпособВводаДанных
	|ПОМЕСТИТЬ ВТСотрудникоМесяц
	|ИЗ
	|	Документ.СдельныйНаряд.Исполнители КАК ГрафикиРаботы
	|ГДЕ
	|	ГрафикиРаботы.Ссылка = &Документ
	|	И ГрафикиРаботы.Ссылка.УчитыватьОтработанноеВремя
	|	И НЕ ГрафикиРаботы.Ссылка.УчитыватьВремяТолькоПриРасчете";
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|СотрудникоМесяц.ГрафикРаботы КАК Сотрудник,
	|СотрудникоМесяц.Месяц КАК Месяц,
	|СотрудникоМесяц.СпособВводаДанных,
	|ВЫБОР 
	|	КОГДА ВведенныеДокументы.ГрафикРаботы ЕСТЬ NULL 
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|КОНЕЦ КАК УдалятьЗаписиЗаПериод
	|
	|ИЗ
	|	ВТСотрудникоМесяц КАК СотрудникоМесяц
	|ЛЕВОЕ СОЕДИНЕНИЕ	
	|	(ВЫБРАТЬ
	|	СотрудникоМесяц.ГрафикРаботы,
	|	СотрудникоМесяц.Месяц
	|	ИЗ
	|		ВТСотрудникоМесяц КАК СотрудникоМесяц
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ПО
	|		ГрафикиРаботы.ГрафикРаботы = СотрудникоМесяц.ГрафикРаботы
	|		И НЕ ГрафикиРаботы.План
	|		И ГрафикиРаботы.Месяц = СотрудникоМесяц.Месяц
	|		И ГрафикиРаботы.Документ <> &Документ
	|		И ГрафикиРаботы.Документ <> ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка)
	|		И ГрафикиРаботы.Документ <> ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка)
	|		И ГрафикиРаботы.Документ <> НЕОПРЕДЕЛЕНО
	|	)КАК ВведенныеДокументы
	|ПО
	|	ВведенныеДокументы.ГрафикРаботы = СотрудникоМесяц.ГрафикРаботы
	|	И ВведенныеДокументы.Месяц = СотрудникоМесяц.Месяц";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	СпособВводаДанныхЗаДень = Перечисления.СпособыВводаДанныхОВремени.ЗаДень; 
	НаборЗаписей = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		НаборЗаписей.Отбор.План.Установить(Ложь);
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ВыборкаЗапроса.Сотрудник);
		НаборЗаписей.Отбор.Месяц.Установить(ВыборкаЗапроса.Месяц);
		
		Если ВыборкаЗапроса.УдалятьЗаписиЗаПериод Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		Иначе
			
			НаборЗаписей.Прочитать();
			Если ВыборкаЗапроса.СпособВводаДанных = СпособВводаДанныхЗаДень Тогда
				Для Каждого Запись Из НаборЗаписей Цикл
					Если (Запись.Документ = Ссылка) Тогда
						НаборЗаписей.Удалить(Запись);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для Каждого Запись Из НаборЗаписей Цикл
					Если (Запись.Документ = Ссылка) Тогда
						Запись.ОсновноеЗначениеПолное = 0;
						Запись.ДополнительноеЗначениеПолное = 0;
						Запись.Документ = Документы.СдельныйНаряд.ПустаяСсылка();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЗаписиЗаПериодДокумента()

Процедура СкорректироватьПериодПовременнойОплаты(ТаблицаНабораЗаписей, ТаблицаДанныхКорректировки)

	СтруктураПоиска = Новый Структура("ВидУчетаВремени,Дата,ГрафикРаботы");
	Для каждого СтрокаКорректировки Из ТаблицаДанныхКорректировки Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаКорректировки);
	    СтрокиНабора = ТаблицаНабораЗаписей.НайтиСтроки(СтруктураПоиска);
		Если СтрокиНабора.Количество() = 0 Тогда
			СтрокаНабора = ТаблицаНабораЗаписей.Добавить()
		Иначе
			СтрокаНабора = СтрокиНабора[0]
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаНабора,СтрокаКорректировки);
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияЗК.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	РеквизитыШапки = "";
	Если ОтражатьВУправленческомУчете Тогда
		ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	КонецЕсли; 
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);

	// проверка совпадения сумм по т.ч. 
	
	Если ОтражатьВУправленческомУчете Тогда
		Если Выработка.Итог("Сумма") <> Исполнители.Итог("СуммаКНачислению") Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не совпадают итоговые суммы к начислению по управленческому учету по табличным частям!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Если Выработка.Итог("СуммаРегл") <> Исполнители.Итог("СуммаКНачислениюРегл") Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не совпадают итоговые суммы к начислению по регламентированному учету по табличным частям!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// получим реквизиты табличной части
	
	ВыборкаПоРаботники = СформироватьЗапросПоИсполнители(Режим,СтруктураШапкиДокумента).Выбрать();
	ВыборкаПоРаботникиРегл = Неопределено;
	ВыборкаДанныхПоГрафику = Неопределено;
	Если ОтражатьВБухгалтерскомУчете Тогда
		ВыборкаПоРаботникиРегл = СформироватьЗапросПоИсполнителиРегл(СтруктураШапкиДокумента, ВыборкаДанныхПоГрафику).Выбрать();
	КонецЕсли;
	
	Пока ВыборкаПоРаботники.СледующийПоЗначениюПоля("Сотрудник") Цикл
		
		РабочееВремяЗаполнено = Ложь;
		
		Пока ВыборкаПоРаботники.Следующий() Цикл
			
			Если ОтражатьВБухгалтерскомУчете Тогда
				ВыборкаПоРаботникиРегл.Следующий();
			КонецЕсли;
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиИсполнители(СтруктураШапкиДокумента, ВыборкаПоРаботники, ВыборкаПоРаботникиРегл, Отказ, Заголовок, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"));
			
		КонецЦикла;
		
		// Дополнительная проверка на заполненность по отработаному времени при вводе за каждый день
		Если СтруктураШапкиДокумента.СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням 
			И СтруктураШапкиДокумента.УчитыватьОтработанноеВремя
			И НЕ РабочееВремяЗаполнено Тогда
			
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("В строке номер """+ СокрЛП(ВыборкаПоРаботники.НомерСтроки) +
			""" табл. части ""Исполнители"": " + "не указано значение отработанных часов!", Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// проверим общие реквизиты
	ВыборкаПоРаботы = СформироватьЗапросПоВыработка(Режим).Выбрать();
	Пока ВыборкаПоРаботы.Следующий() Цикл 
		// проверим очередную строку табличной части
		ПроверитьЗаполнениеСтрокиВыработка(СтруктураШапкиДокумента, ВыборкаПоРаботы, Отказ, Заголовок);
	КонецЦикла;
	
	// проверим реквизиты регл учета
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		РезультатЗапросаПоРаботыРегл = СформироватьЗапросПоВыработкаРегл(Режим);
		ТаблицаРаботРегл = РезультатЗапросаПоРаботыРегл.Выгрузить();
		ВыборкаПоРаботыРегл = РезультатЗапросаПоРаботыРегл.Выбрать();
		Пока ВыборкаПоРаботыРегл.Следующий() Цикл 
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиВыработкаРегл(СтруктураШапкиДокумента, ВыборкаПоРаботыРегл, Отказ, Заголовок);
		КонецЦикла;
		ВыборкаПоРаботникиРегл.Сбросить();
		
	КонецЕсли;
	
	// Фактически отработанное время
	УдалитьЗаписиЗаПериодДокумента();
	
	Если ОтражатьВБухгалтерскомУчете И УчитыватьОтработанноеВремя И Не УчитыватьВремяТолькоПриРасчете Тогда
		
		ПроверитьУникальностьЗаписи(Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			ВыборкаПоРаботникиРегл.Сбросить();
			ВыборкаПоОтработанноеВремя = ВыборкаПоРаботникиРегл;
			
			НаборДвижений = Движения.РабочееВремяРаботниковОрганизаций;
			
			Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
				// Данные введены в целом за период.
				
				Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
					
					Для Сч = 1 По 5 Цикл
						
						Если ЗначениеЗаполнено(ВыборкаПоОтработанноеВремя["ВидВремени" + Сч + "Сводно"]) Тогда
						
							Запись = НаборДвижений.Добавить();
							// Свойства
							Запись.Период							= ПериодРегистрации;
							
							// Измерения
							Запись.Сотрудник					= ВыборкаПоОтработанноеВремя.Сотрудник;
							Запись.Организация					= ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация);
							
							Запись.ВидИспользованияРабочеговремени	= ВыборкаПоОтработанноеВремя["ВидВремени" + Сч + "Сводно"];
							
							// Ресурсы
							Запись.Дней								= ВыборкаПоОтработанноеВремя["Дней" + Сч + "Сводно"];
							Запись.Часов							= ВыборкаПоОтработанноеВремя["Часов" + Сч + "Сводно"];
							
							// Реквизиты
							Запись.ВЦеломЗаПериод					= Истина;
							
						КонецЕсли; 
						
					КонецЦикла; 
					
				КонецЦикла;
				
			ИначеЕсли СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
				
				// Данные введены с разбивкой по дням.
				
				ДанныеКорректировкиГрафика = ВыборкаДанныхПоГрафику.Выгрузить();
				ДанныеКорректировкиГрафика.Индексы.Добавить("ГрафикРаботы");

				НаборГрафикиРаботыПоВидамВремени = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
				
				НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ПериодРегистрации);
				НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Ложь);
				
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("План", Ложь);
				СтруктураПоиска.Вставить("Месяц", ПериодРегистрации);
				
				КоличествоДней = День(КонецМесяца(ПериодРегистрации));
				
				Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("Сотрудник") Цикл
					
					НаборГрафикиРаботыПоВидамВремени.Отбор.ГрафикРаботы.Установить(ВыборкаПоОтработанноеВремя.Сотрудник);
					СтруктураПоиска.Вставить("ГрафикРаботы", ВыборкаПоОтработанноеВремя.Сотрудник);
					
					НаборГрафикиРаботыПоВидамВремени.Прочитать();
					ТаблицаНабора = НаборГрафикиРаботыПоВидамВремени.Выгрузить();
					
					Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("ИндексДня") Цикл
						
						ВремяЯвки = 0;
						Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
							
							// По регистру сведений "ГрафикиРаботыПоВидамВремени" по часам
							ДобавитьСтрокуГрафикиРаботыПоВидамВремениЧасы(ВыборкаПоОтработанноеВремя, ТаблицаНабора);
							
							Если ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторЯвка Тогда
								ВремяЯвки = ВыборкаПоОтработанноеВремя.Часов;
							КонецЕсли;
							
							// По регистру накоплений "РабочееВремяРаботниковОрганизаций"
							ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(СтруктураШапкиДокумента, ВыборкаПоОтработанноеВремя, НаборДвижений);
							
						КонецЦикла;
						
						// По регистру сведений "ГрафикиРаботыПоВидамВремени" по дням
						ДобавитьСтрокуГрафикиРаботыПоВидамВремениДни(ВыборкаПоОтработанноеВремя, ТаблицаНабора);
						
					КонецЦикла;
					
					СкорректироватьПериодПовременнойОплаты(ТаблицаНабора, ДанныеКорректировкиГрафика.Скопировать(ДанныеКорректировкиГрафика.НайтиСтроки(Новый Структура("ГрафикРаботы",ВыборкаПоОтработанноеВремя.Сотрудник))));
					НаборГрафикиРаботыПоВидамВремени.Загрузить(ТаблицаНабора);
					НаборГрафикиРаботыПоВидамВремени.Записать();
					
				КонецЦикла;
				
			Иначе
				
				// Данные введены за день.
				////////////////////////////////////////////////////////////////////////
				// Отработанное время
				
				МассивСотрудниковДляСозданияПустыхЗаписей = ПолучитьМассивСотрудниковДляСозданияПустыхЗаписей(СтруктураШапкиДокумента);
				
				ДанныеКорректировкиГрафика = ВыборкаДанныхПоГрафику.Выгрузить();
				ДанныеКорректировкиГрафика.Индексы.Добавить("ГрафикРаботы");
				
				НаборГрафикиРаботыПоВидамВремени = РегистрыСведений.ГрафикиРаботыПоВидамВремени.СоздатьНаборЗаписей();
				
				НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ПериодРегистрации);
				НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Ложь);
				
				ДеньОкончанияМесяца = День(КонецМесяца(ПериодРегистрации));
				ПустойДокумент = Документы.СдельныйНаряд.ПустаяСсылка();
				
				СтруктураПоиска = Новый Структура;
				НомерДня = День(ДатаНачалаПериода);
				
				Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("Сотрудник") Цикл
					
					СотрудникДляПоиска = ВыборкаПоОтработанноеВремя.Сотрудник;
					
					НаборГрафикиРаботыПоВидамВремени.Отбор.ГрафикРаботы.Установить(СотрудникДляПоиска);
					
					НаборГрафикиРаботыПоВидамВремени.Прочитать();
					НаборЗаписей = НаборГрафикиРаботыПоВидамВремени.Выгрузить();
					
					Пока ВыборкаПоОтработанноеВремя.СледующийПоЗначениюПоля("ИндексДня") Цикл
						
						ОбрабатываемаяДата = Дата(Год(ПериодРегистрации), Месяц(ПериодРегистрации), ВыборкаПоОтработанноеВремя.ИндексДня);
						
						Если МассивСотрудниковДляСозданияПустыхЗаписей.Найти(СотрудникДляПоиска) = Неопределено Тогда
							
							Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
								
								// по часам
								ВидУчетаВремени = ПолучитьВидУчетаВремениПоКлассификатору(ВыборкаПоОтработанноеВремя.ВидВремени);
								
								Если ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторВечерниеЧасы Тогда
									СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоВечернимЧасам);
								ИначеЕсли ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторНочныеЧасы Тогда
									СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоНочнымЧасам);
								Иначе
									СтруктураПоиска.Вставить("ВидУчетаВремени", ВидУчетаВремениПоЧасам);
								КонецЕсли;
								СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
								
								МассивСтрок = НаборЗаписей.НайтиСтроки(СтруктураПоиска);
								Если МассивСтрок.Количество() > 0 Тогда
									
									Движение = МассивСтрок[0];
									
								Иначе
									
									Движение = НаборГрафикиРаботыПоВидамВремени.Добавить();
									Движение.ГрафикРаботы = ВыборкаПоОтработанноеВремя.Сотрудник;
									Движение.ВидУчетаВремени = ВидУчетаВремени;
									Движение.Дата = ОбрабатываемаяДата;
									Движение.План = Ложь;
									Движение.Месяц = ПериодРегистрации;	
									
								КонецЕсли;
								
								Движение.ОсновноеЗначениеПолное = Движение.ОсновноеЗначениеПолное + ВыборкаПоОтработанноеВремя.Часов;
								Движение.ДополнительноеЗначениеПолное = ?((Движение.ДополнительноеЗначениеПолное > 0) ИЛИ (ВыборкаПоОтработанноеВремя.Часов > 0), 1, 0);
								Движение.Документ				= Ссылка;
								
								// По регистру накоплений "РабочееВремяРаботниковОрганизаций"
								ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(СтруктураШапкиДокумента, ВыборкаПоОтработанноеВремя, НаборДвижений);
								
							КонецЦикла;
							
							// по дням
							СтруктураПоиска.Вставить("ВидУчетаВремени", Перечисления.ВидыУчетаВремени.ПоДням);
							СтруктураПоиска.Вставить("Дата", ОбрабатываемаяДата);
							
							МассивСтрок = НаборЗаписей.НайтиСтроки(СтруктураПоиска);
							Если МассивСтрок.Количество() > 0 Тогда
								Движение = МассивСтрок[0];
							Иначе
								
								Движение = НаборГрафикиРаботыПоВидамВремени.Добавить();
								Движение.ГрафикРаботы = ВыборкаПоОтработанноеВремя.Сотрудник;
								Движение.ВидУчетаВремени = ВидУчетаВремениПоДням;
								Движение.Дата = ОбрабатываемаяДата;
								Движение.План = Ложь;
								Движение.Месяц = ПериодРегистрации;
								
							КонецЕсли;
							
							Движение.ОсновноеЗначениеПолное = ?(ВыборкаПоОтработанноеВремя.Часов = 0, 0, 1);
							Движение.ДополнительноеЗначениеПолное = ВыборкаПоОтработанноеВремя.Часов;
							Движение.Документ 				= Ссылка;
							
						Иначе
							
							НаборГрафикиРаботыПоВидамВремени.Отбор.План.Установить(Ложь);
							НаборГрафикиРаботыПоВидамВремени.Отбор.Месяц.Установить(ПериодРегистрации);
							НаборГрафикиРаботыПоВидамВремени.Отбор.Дата.Использование = Ложь;
							
							НаборГрафикиРаботыПоВидамВремени.Очистить();
							
							Пока ВыборкаПоОтработанноеВремя.Следующий() Цикл
								
								// по часам
								ДвижениеПоЧасам = НаборГрафикиРаботыПоВидамВремени.Добавить();
								СуммаВремениЗаВесьДень = ВыборкаПоОтработанноеВремя.Часов;
								Если ОбрабатываемаяДата = ДатаНачалаПериода Тогда
									
									ДвижениеПоЧасам.ОсновноеЗначениеПолное = ДвижениеПоЧасам.ОсновноеЗначениеПолное + СуммаВремениЗаВесьДень;
									ДвижениеПоЧасам.ДополнительноеЗначениеПолное = ?((ДвижениеПоЧасам.ДополнительноеЗначениеПолное > 0) ИЛИ (СуммаВремениЗаВесьДень > 0), 1, 0);
									ДвижениеПоЧасам.Документ = Ссылка;
									
								Иначе
									ДвижениеПоЧасам.Документ = ПустойДокумент;
								КонецЕсли;
								
								ДвижениеПоЧасам.ГрафикРаботы = СотрудникДляПоиска;
								Если ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторВечерниеЧасы Тогда
									ДвижениеПоЧасам.ВидУчетаВремени = ВидУчетаВремениПоВечернимЧасам;
								ИначеЕсли ВыборкаПоОтработанноеВремя.ВидВремени = КлассификаторНочныеЧасы Тогда
									ДвижениеПоЧасам.ВидУчетаВремени = ВидУчетаВремениПоНочнымЧасам;
								Иначе
									ДвижениеПоЧасам.ВидУчетаВремени = ВидУчетаВремениПоЧасам;
								КонецЕсли;
								ДвижениеПоЧасам.Дата = ОбрабатываемаяДата;
								ДвижениеПоЧасам.Месяц = ПериодРегистрации;
								ДвижениеПоЧасам.План = Ложь;
								
								// По регистру накоплений "РабочееВремяРаботниковОрганизаций"
								ДобавитьСтрокуРабочееВремяРаботниковОрганизацийПоДням(СтруктураШапкиДокумента, ВыборкаПоОтработанноеВремя, НаборДвижений);
								
							КонецЦикла;
							
							// по дням
							ДвижениеПоДням = НаборГрафикиРаботыПоВидамВремени.Добавить();
							Если ОбрабатываемаяДата = ДатаНачалаПериода Тогда
								
								ДвижениеПоДням.ОсновноеЗначениеПолное = ?(ВыборкаПоОтработанноеВремя.Часов = 0, 0, 1);
								ДвижениеПоДням.ДополнительноеЗначениеПолное = ВыборкаПоОтработанноеВремя.Часов;
								ДвижениеПоДням.Документ = Ссылка;
								
							Иначе
								ДвижениеПоДням.Документ = ПустойДокумент;
							КонецЕсли;	
							ДвижениеПоДням.ГрафикРаботы = СотрудникДляПоиска;
							ДвижениеПоДням.ВидУчетаВремени = ВидУчетаВремениПоДням;
							ДвижениеПоДням.Дата = ОбрабатываемаяДата;
							ДвижениеПоДням.Месяц = ПериодРегистрации;
							ДвижениеПоДням.План = Ложь;
							
						КонецЕсли;
						
					КонецЦикла;
				
					ТаблицаНабора = НаборГрафикиРаботыПоВидамВремени.Выгрузить();
					СкорректироватьПериодПовременнойОплаты(ТаблицаНабора, ДанныеКорректировкиГрафика.Скопировать(ДанныеКорректировкиГрафика.НайтиСтроки(Новый Структура("ГрафикРаботы",ВыборкаПоОтработанноеВремя.Сотрудник))));
					НаборГрафикиРаботыПоВидамВремени.Загрузить(ТаблицаНабора);
					НаборГрафикиРаботыПоВидамВремени.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ВыборкаПоРаботникиРегл.Сбросить();
	КонецЕсли;
	Если ОтражатьВУправленческомУчете Тогда
		ВыборкаПоРаботники.Сбросить();
	КонецЕсли;
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		ДвиженияРегистров(СтруктураШапкиДокумента, ВыборкаПоРаботники, ВыборкаПоРаботникиРегл, ТаблицаРаботРегл)
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Исполнители);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
	// Установим прежнее состояние ОтражатьВУправленческомУчете
	мПрежнееОтражатьВУправленческомУчете = Ссылка.ОтражатьВУправленческомУчете;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
	УдалитьЗаписиЗаПериодДокумента();
	
	Если Не ЗначениеЗаполнено(СпособВводаДанных) Тогда
		СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();

ВидУчетаВремениПоДням			= Перечисления.ВидыУчетаВремени.ПоДням;
ВидУчетаВремениПоЧасам			= Перечисления.ВидыУчетаВремени.ПоЧасам;
ВидУчетаВремениПоВечернимЧасам	= Перечисления.ВидыУчетаВремени.ПоВечернимЧасам;
ВидУчетаВремениПоНочнымЧасам	= Перечисления.ВидыУчетаВремени.ПоНочнымЧасам;

МассивПриставок = Новый Массив(3);
МассивПриставок[0] = "Первый";
МассивПриставок[1] = "Второй";
МассивПриставок[2] = "Третий";

КлассификаторНочноеВремя = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
КлассификаторВечернееВремя = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;

КлассификаторЯвка = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
КлассификаторВечерниеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;
КлассификаторНочныеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
КлассификаторПустаяСсылка = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
