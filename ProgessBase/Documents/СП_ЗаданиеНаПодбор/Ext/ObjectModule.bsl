Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета;

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли; 
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,, Ссылка));
		
КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
	Возврат Новый Структура();
		
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли


// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	ПРГПростоЗаписать = Ложь;
	Если ДополнительныеСвойства.Свойство("ПРГПростоЗаписать",ПРГПростоЗаписать) Тогда
		Если ПРГПростоЗаписать Тогда
			возврат;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 
	
	
	Если Не Отказ Тогда
		МенятьСтатус = Истина;
		Если ДополнительныеСвойства.Свойство("МенятьСтатус", МенятьСтатус) = Ложь Тогда
			МенятьСтатус = Истина;
		КонецЕсли;
		АП_ОбщегоНазначенияСервер.ИзменитьСтатусЗаказа(Заказ, Ссылка, МенятьСтатус);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаписатьИзменениеСтатусов(Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Заказ, ВидОперации, Склад, 
					|КП_Отделение, Получатель");
					
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
	
	АСклад = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаСпрСложНПоля(Склад,Новый Структура("НСИ_ДоступенДляРезервирования"));
	//конец изменений 
	//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
	//Если Не Склад.НСИ_ДоступенДляРезервирования Тогда	
	Если Не АСклад.НСИ_ДоступенДляРезервирования Тогда	
    //конец изменений 		
		ОбщегоНазначения.СообщитьОбОшибке("Выбран склад отгрузки не доступный для отгрузки!", Отказ, Заголовок);	
	КонецЕсли;
	//----m.ionov@a-prof.ru---

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru = 'Проведение документа """ + СокрЛП(Ссылка) + """: '");
	
	//УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,      "ВалютаУправленческогоУчета",       "ВалютаУправленческогоУчета");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке(), ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект), мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"				, "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"				, "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("КоличествоПлан"			, "Количество*Коэффициент/Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("КоличествоФакт"			, "КоличествоФакт*Коэффициент/Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Период"					, "Ссылка.Дата");
	СтруктураПолей.Вставить("ЗаданиеНаПодбор"			, "Ссылка");
	СтруктураПолей.Вставить("Склад"						, "Ссылка.Склад");
	СтруктураПолей.Вставить("Заказ"						, "Ссылка.Заказ");
	СтруктураПолей.Вставить("КоличествоМест"	        , "КоличествоМест");
	СтруктураПолей.Вставить("КоличествоМестФакт"		, "КоличествоМестФакт");
	//Blik 65458 180917 н
	//закрытие резервов по пустой серии и перенос на указанную в документе
	Если (СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Собран 
		или СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад)
		и
		(ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру 
		или ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		Тогда
		СтруктураПолей.Вставить("СерияНоменклатуры"     , "СерияНоменклатуры");
	КонецЕсли;
	//Blik 65458 180917 к
	//начало изменений Ожиганов 20.04.2015 37867  
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("ПРГВесНетто","ЕстьNull(Док.Номенклатура.ЕдиницаИзмеренияМест.ПРГ_Нетто,0)");
	СтруктураСложныхПолей.Вставить("ПРГОбъем","ЕстьNull(Док.Номенклатура.ЕдиницаИзмеренияМест.Объем,0)");
	СтруктураСложныхПолей.Вставить("ПРГВесБрутто","ЕстьNull(Док.Номенклатура.ЕдиницаИзмеренияМест.Вес,0)");
	СтруктураСложныхПолей.Вставить("ПРГКоэфф","ЕстьNull(Док.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент,0)");
	//конец изменений 
	
    //начало изменений Ожиганов 20.04.2015 37867  
	//ТаблицаДвижений = ПодготовитьТаблицуДвижений(УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей), СтруктураШапкиДокумента);
	ТаблицаДвижений = ПодготовитьТаблицуДвижений(УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей), СтруктураШапкиДокумента);
	//конец изменений 
	
	//{19.05.2015 Островерхий заявка №39326 
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаФормированияДокументов) Тогда
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(Новый Структура("ТЧ",ТаблицаДвижений), "Период",      СтруктураШапкиДокумента.ДатаФормированияДокументов);	
	КонецЕсли; 
	//19.05.2015 Островерхий} 
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаДвижений, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ТаблицаДвижений.Колонки.Добавить("ВесНетто");
	//начало изменений Ожиганов 20.04.2015 37867  
	ТаблицаДвижений.Колонки.Добавить("ВесПлан");
	//конец изменений 
	ТаблицаДвижений.Колонки.Добавить("ВесБруттоПлан");
	ТаблицаДвижений.Колонки.Добавить("ОбъемПлан");
	
	ТаблицаДвижений.Колонки.Добавить("ВесФакт");
	ТаблицаДвижений.Колонки.Добавить("ВесБруттоФакт");
	ТаблицаДвижений.Колонки.Добавить("ОбъемФакт");
	
	Для каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		//начало изменений Ожиганов 20.04.2015 37867  
		
		//ПРгКоэфф =  ?(СтрокаТаблицы.ПРГКоэфф=0,1,СтрокаТаблицы.ПРГКоэфф);
		ПРгКоэфф =  СтрокаТаблицы.ПРГКоэфф;
		
		Если ПРгКоэфф = 0  Тогда
			
			СтрокаТаблицы.ВесПлан 		= 0;
			СтрокаТаблицы.ВесБруттоПлан = 0;
			СтрокаТаблицы.ОбъемПлан 	= 0;
			
			
			СтрокаТаблицы.ВесФакт 		= 0;
			СтрокаТаблицы.ВесБруттоФакт = 0;
			СтрокаТаблицы.ОбъемФакт 	= 0;
			
		Иначе
		
			СтрокаТаблицы.ВесПлан 		= (СтрокаТаблицы.КоличествоПлан * СтрокаТаблицы.ПРГВесНетто/ПРгКоэфф)/1000;
			СтрокаТаблицы.ВесБруттоПлан = (СтрокаТаблицы.КоличествоПлан * СтрокаТаблицы.ПРГВесБрутто/ПРгКоэфф)/1000;
			СтрокаТаблицы.ОбъемПлан 	= (СтрокаТаблицы.КоличествоПлан * СтрокаТаблицы.ПРГОбъем/ПРгКоэфф)/1000;
			
			
			СтрокаТаблицы.ВесФакт 		= (СтрокаТаблицы.КоличествоФакт * СтрокаТаблицы.ПРГВесНетто/ПРгКоэфф)/1000;
			СтрокаТаблицы.ВесБруттоФакт = (СтрокаТаблицы.КоличествоФакт * СтрокаТаблицы.ПРГВесБрутто/ПРгКоэфф)/1000;
			СтрокаТаблицы.ОбъемФакт 	= (СтрокаТаблицы.КоличествоФакт * СтрокаТаблицы.ПРГОбъем/ПРгКоэфф)/1000;
		КонецЕсли;	
		
		//СтруктураВесов = АП_ОбщегоНазначенияКлиент.ПолучитьВесаДляСтроки("КоличествоПлан", СтрокаТаблицы);
		//
		//СтрокаТаблицы.ВесПлан = СтруктураВесов.ВесНетто/1000;
		//СтрокаТаблицы.ВесБруттоПлан = СтруктураВесов.ВесБрутто/1000;
		//СтрокаТаблицы.ОбъемПлан = СтруктураВесов.Объем/1000;
		//
		//СтруктураВесов = АП_ОбщегоНазначенияКлиент.ПолучитьВесаДляСтроки("КоличествоФакт", СтрокаТаблицы);
		//
		//СтрокаТаблицы.ВесФакт = СтруктураВесов.ВесНетто/1000;
		//СтрокаТаблицы.ВесБруттоФакт = СтруктураВесов.ВесБрутто/1000;
		//СтрокаТаблицы.ОбъемФакт = СтруктураВесов.Объем/1000;      
       //конец изменений 
	
   КонецЦикла; 
   
   //начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
   	НеНужноЗакрыватьЗаказ = Ложь;
	Если Не ДополнительныеСвойства.Свойство("НеНужноЗакрыватьЗаказ",НеНужноЗакрыватьЗаказ) Тогда
		НеНужноЗакрыватьЗаказ = Ложь;
	КонецЕсли;	
   //конец изменений  
	
	Если НЕ Отказ И Не СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДвижений, Отказ);
		
		//++ Spl_Апроф 02.03.2015 (k.russkih@a-prof.ru)
		//начало изменений Ожиганов 06.06.2015 исключение двойной перезаписи объектов 
		Если Не НеНужноЗакрыватьЗаказ Тогда
			НоваяПроцедураЗакрытияРезервов(Ссылка, Отказ, РежимЗаписиДокумента.Проведение);
		КонецЕсли;	
		//конец изменений  
		//Blik 65458 180917 н
		//закрытие резервов по пустой серии и перенос на указанную в документе
		Если СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Собран и
			(ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру 
			или ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
			Тогда
			ПроцедураПереносаРезерваНаПартию(Ссылка,РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		//Blik 65458 180917 к
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаДвижений", ТаблицаДвижений));
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуДвижений(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаДвижений = РезультатЗапросаПоТоварам.Выгрузить();
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДвижений, Отказ)
	
	//Движения по регистру накопления "СП_ЗаданияНаПодбор"
	Движения.СП_ЗаданияНаПодбор.Записывать = Истина;
	Движения.СП_ЗаданияНаПодбор.Очистить();
	Движения.СП_ЗаданияНаПодбор.Загрузить(ТаблицаДвижений); 
	
	//>>121015 Степанов; движения перенесены в документ РеализацияТоваровУслуг
	//{31.03.2015 Островерхий заявка №37858 
	//ДвижениеПоРегистру_ПЦ_ОграничениеПоПредоставленнымСкидкам(СтруктураШапкиДокумента,ТаблицаДвижений); 
	//31.03.2015 Островерхий}
	//<<
	
	//>>180815 Степанов, 42883
    ДвиженияПоРегистру_ПЦ_ОграничениеОбъемаПоставки(СтруктураШапкиДокумента,ТаблицаДвижений);
	//<<
		
КонецПроцедуры


Процедура ДвиженияПоРегистру_ПЦ_ОграничениеОбъемаПоставки(СтруктураШапкиДокумента,ТаблицаДвижений)
	Если (НЕ СтруктураШапкиДокумента.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Собран
		И НЕ СтруктураШапкиДокумента.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.СформированыДокументы 
		И НЕ СтруктураШапкиДокумента.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отгружен) 
		ИЛИ (СтруктураШапкиДокумента.Дата < '20150801') Тогда 
		
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.ДоговорКонтрагента,
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.Номенклатура,
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.ХарактеристикаНоменклатуры,
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.Брендообъем,
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.УсловиеПоставкиПоДоговоруСКонтрагентом,
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.КоличествоОборот КАК Количество
	|ИЗ
	|	РегистрНакопления.ПЦ_ОграничениеОбъемаПоставки.Обороты(, , Регистратор, ) КАК ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты
	|ГДЕ
	|	ПЦ_ОграничениеПоПредоставленнымОбъемамПоставкиОбороты.Регистратор = &ЗаказПокупателя";
	
	ЗапросТаблицаЗаданияНаПодбор = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказПокупателя", СтруктураШапкиДокумента.Заказ);
	ЗапросТаблицаЗаданияНаПодбор.УстановитьПараметр("ЗаказПокупателя", СтруктураШапкиДокумента.Заказ);
	ЗапросТаблицаЗаданияНаПодбор.УстановитьПараметр("Ссылка", Ссылка);
	
	ЗапросТаблицаЗаданияНаПодбор.Текст=
	"ВЫБРАТЬ
	|	СП_ЗаданиеНаПодборТовары.Количество - СП_ЗаданиеНаПодборТовары.КоличествоФакт КАК КоличествоНеотгружено,
	|	СП_ЗаданиеНаПодборТовары.Ссылка.Заказ КАК ЗаказПокупателя,
	|	СП_ЗаданиеНаПодборТовары.Номенклатура,
	|	СП_ЗаданиеНаПодборТовары.ХарактеристикаНоменклатуры,
	|	СП_ЗаданиеНаПодборТовары.Номенклатура.НСИ_Брендообъем КАК Брендообъем
	|ИЗ
	|	Документ.СП_ЗаданиеНаПодбор.Товары КАК СП_ЗаданиеНаПодборТовары
	|ГДЕ
	|	СП_ЗаданиеНаПодборТовары.КоличествоФакт <> СП_ЗаданиеНаПодборТовары.Количество
	|	И СП_ЗаданиеНаПодборТовары.Ссылка.Заказ = &ЗаказПокупателя
	|	И СП_ЗаданиеНаПодборТовары.Ссылка = &Ссылка";
	
	
    РезТаблицаЗаданияНаПодбор = ЗапросТаблицаЗаданияНаПодбор.Выполнить().Выгрузить();
	
	Рез = Запрос.Выполнить().Выгрузить();
	РезСвернутаяБезДоков = Рез.Скопировать();
	РезСвернутаяБезДоков.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,Брендообъем","Количество");
	
	Если РезТаблицаЗаданияНаПодбор.Количество()>0 тогда
		Для Каждого РезСтрока из РезСвернутаяБезДоков цикл
			СтрокаСворачивания = "Номенклатура,ХарактеристикаНоменклатуры,Брендообъем";
			Если РезСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() тогда
				СтрокаСворачивания = СтрЗаменить(СтрокаСворачивания,"Номенклатура,","");
			КонецЕсли;	
			Если РезСтрока.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() тогда
				СтрокаСворачивания = СтрЗаменить(СтрокаСворачивания,"ХарактеристикаНоменклатуры,","");
			КонецЕсли;
			СвернутаяТЗпродаж = РезТаблицаЗаданияНаПодбор.Скопировать();
			СвернутаяТЗпродаж.Свернуть(СтрокаСворачивания,"КоличествоНеотгружено");
			
			СтруктураПоиска = Новый Структура(СтрокаСворачивания);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,РезСтрока);
			НайденныеСтроки = СвернутаяТЗпродаж.НайтиСтроки(СтруктураПоиска);
			КоличествоНеотгружено = 0;
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					КоличествоНеотгружено = КоличествоНеотгружено+ТекСтрока.КоличествоНеотгружено;
				КонецЦикла;
			КонецЕсли;	
			Если КоличествоНеотгружено<>0 тогда
				РезСтрока.Количество = ?(-РезСтрока.Количество>=КоличествоНеотгружено,-КоличествоНеотгружено,РезСтрока.Количество);
			Иначе
				РезСтрока.Количество = 0;
			КонецЕсли;	
		КонецЦикла;
		
		//очистка строк, достигших 0
		всего=РезСвернутаяБезДоков.Количество()-1;        
		сч=0;        
		пока сч<=всего цикл        
			Тек = РезСвернутаяБезДоков[сч];
			Если Тек.Количество = 0 тогда
				РезСвернутаяБезДоков.Удалить(сч);
				всего = всего -1;
			Иначе
				сч=сч+1;
			КонецЕсли;    
		Конеццикла;
	КонецЕсли;
	
	Рез.Колонки.Добавить("КолОграничение");
	Рез.ЗаполнитьЗначения(0,"КолОграничение");
	Если РезСвернутаяБезДоков.Количество()>0 тогда
		Для Каждого СтрокаРезСвернутаяБезДоков из РезСвернутаяБезДоков цикл
			СтруктураПоиска = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Брендообъем");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаРезСвернутаяБезДоков);
			НайденныеСтроки = Рез.НайтиСтроки(СтруктураПоиска);
			ОстатокСуммы = -СтрокаРезСвернутаяБезДоков.Количество;
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ((-ТекСтрока.Количество)>=ОстатокСуммы) и (ОстатокСуммы>0) тогда
					ТекСтрока.КолОграничение=-ОстатокСуммы;
					ОстатокСуммы=0;
				ИначеЕсли ((-ТекСтрока.Количество)<ОстатокСуммы) и (ОстатокСуммы>0) тогда
					ТекСтрока.КолОграничение = ТекСтрока.Количество;
					ОстатокСуммы=ОстатокСуммы+ТекСтрока.Количество;
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
	Рез.Колонки.Удалить("Количество");
	Рез.Колонки.КолОграничение.Имя="Количество";
	
	всего=Рез.Количество()-1;        
	сч=0;        
	пока сч<=всего цикл        
		Тек = Рез[сч];
		Если Тек.Количество = 0 тогда
			Рез.Удалить(сч);
			всего = всего -1;
		Иначе
			сч=сч+1;
		КонецЕсли;    
	Конеццикла;
	
	//Запишем данные в регистр
	НаборДвижений = Движения.ПЦ_ОграничениеОбъемаПоставки;
	НаборДвижений.Записывать = Истина;
	
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаОграничений", Рез);
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, СтруктураШапкиДокумента.Дата);

КонецПроцедуры	


Процедура ДвижениеПоРегистру_ПЦ_ОграничениеПоПредоставленнымСкидкам(СтруктураШапкиДокумента,ТаблицаДвижений) Экспорт

	Если (НЕ СтруктураШапкиДокумента.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Собран
		И НЕ СтруктураШапкиДокумента.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.СформированыДокументы 
		И НЕ СтруктураШапкиДокумента.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отгружен)
		ИЛИ СтруктураШапкиДокумента.Дата < '20150401' Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СП_ЗаданиеНаПодборТовары.Заказ,
		|	СП_ЗаданиеНаПодборТовары.ЗаданиеНаПодбор КАК Ссылка,
		|	СП_ЗаданиеНаПодборТовары.Номенклатура,
		|	СП_ЗаданиеНаПодборТовары.КоличествоПлан КАК Количество,
		|	СП_ЗаданиеНаПодборТовары.КоличествоФакт
		|ПОМЕСТИТЬ втПроблемныеЗаданияНаПодбор
		|ИЗ
		|	&ТаблицаДвижений КАК СП_ЗаданиеНаПодборТовары
		|ГДЕ
		|	СП_ЗаданиеНаПодборТовары.Заказ ССЫЛКА Документ.ЗаказПокупателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ЗаказСсылка
		|ПОМЕСТИТЬ втПроблемныеЗаказы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Заказы.ЗаказСсылка КАК ЗаказСсылка
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЗаказПокупателяТовары.Ссылка КАК ЗаказСсылка,
		|			ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		|			СУММА(ЗаказПокупателяТовары.Количество) КАК Количество
		|		ИЗ
		|			Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|		ГДЕ
		|			ЗаказПокупателяТовары.Ссылка = &ЗаказПокупателяСсылка
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЗаказПокупателяТовары.Номенклатура,
		|			ЗаказПокупателяТовары.Ссылка
		|		
		|		ИМЕЮЩИЕ
		|			СУММА(ЗаказПокупателяТовары.Цена * ЗаказПокупателяТовары.Количество - ЗаказПокупателяТовары.Сумма) > 0) КАК Заказы
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				СП_ЗаданиеНаПодборТовары.Ссылка.Заказ КАК ЗаказСсылка,
		|				СП_ЗаданиеНаПодборТовары.Номенклатура КАК Номенклатура,
		|				СУММА(СП_ЗаданиеНаПодборТовары.КоличествоФакт) КАК КоличествоФакт
		|			ИЗ
		|				Документ.СП_ЗаданиеНаПодбор.Товары КАК СП_ЗаданиеНаПодборТовары
		|			ГДЕ
		|				СП_ЗаданиеНаПодборТовары.Ссылка = &ЗаданиеНаПодборСсылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				СП_ЗаданиеНаПодборТовары.Ссылка.Заказ,
		|				СП_ЗаданиеНаПодборТовары.Номенклатура) КАК Задания
		|			ПО Заказы.ЗаказСсылка = Задания.ЗаказСсылка
		|				И Заказы.Номенклатура = Задания.Номенклатура
		|	ГДЕ
		|		Заказы.Количество > ЕСТЬNULL(Задания.КоличествоФакт, 0)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Заказы.ЗаказСсылка) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Регистратор,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Контрагент,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.ДоговорКонтрагента,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Номенклатура,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.ХарактеристикаНоменклатуры,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.ТоварнаяКатегория,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Брендообъем,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.УстановкаСкидокНоменклатуры,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.КоличествоРасход,
		|	ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.СуммаСкидкиРасход
		|ПОМЕСТИТЬ втДвиженияПоРегиструОграничений
		|ИЗ
		|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Обороты(, , Регистратор, ) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты
		|ГДЕ
		|	ВЫРАЗИТЬ(ПЦ_ОграничениеПоПредоставленнымСкидкамОбороты.Регистратор КАК Документ.ЗаказПокупателя) В
		|			(ВЫБРАТЬ
		|				втПроблемныеЗаказы.ЗаказСсылка КАК ЗаказСсылка
		|			ИЗ
		|				втПроблемныеЗаказы КАК втПроблемныеЗаказы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДвиженияПоРегиструОграничений.Контрагент,
		|	втДвиженияПоРегиструОграничений.ДоговорКонтрагента,
		|	втДвиженияПоРегиструОграничений.Номенклатура,
		|	втДвиженияПоРегиструОграничений.ХарактеристикаНоменклатуры,
		|	втДвиженияПоРегиструОграничений.ТоварнаяКатегория,
		|	втДвиженияПоРегиструОграничений.Брендообъем,
		|	втДвиженияПоРегиструОграничений.УстановкаСкидокНоменклатуры,
		|	втДвиженияПоРегиструОграничений.КоличествоРасход КАК Количество,
		|	втДвиженияПоРегиструОграничений.СуммаСкидкиРасход КАК СуммаСкидки
		|ИЗ
		|	втДвиженияПоРегиструОграничений КАК втДвиженияПоРегиструОграничений
		|
		|УПОРЯДОЧИТЬ ПО
		|	втДвиженияПоРегиструОграничений.УстановкаСкидокНоменклатуры.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос_Заказы.Ссылка КАК Ссылка,
		|	ВложенныйЗапрос_Заказы.Ссылка.Контрагент КАК Контрагент,
		|	ВложенныйЗапрос_Заказы.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВложенныйЗапрос_Заказы.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос_Заказы.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос_Заказы.ТоварнаяКатегория,
		|	ВложенныйЗапрос_Заказы.Брендообъем,
		|	ВложенныйЗапрос_Заказы.Количество,
		|	ВложенныйЗапрос_Заказы.СуммаСкидки,
		|	ВложенныйЗапрос_Заказы.СуммаСкидкиЕдиницыПродукции,
		|	ВложенныйЗапрос_Задания.Задание,
		|	ВложенныйЗапрос_Задания.Количество КАК КоличествоПлан,
		|	ВложенныйЗапрос_Задания.КоличествоФакт,
		|	(ВложенныйЗапрос_Заказы.Количество - ЕСТЬNULL(ВложенныйЗапрос_Задания.КоличествоФакт, 0)) * ВложенныйЗапрос_Заказы.СуммаСкидкиЕдиницыПродукции КАК СуммаСторноСкидки
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказПокупателяТовары.Ссылка КАК Ссылка,
		|		ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		|		СУММА(ЗаказПокупателяТовары.Количество) КАК Количество,
		//>>240915 Степанов надо учесть НДС
		//|		СУММА(ЗаказПокупателяТовары.Цена * ЗаказПокупателяТовары.Количество - ЗаказПокупателяТовары.Сумма) КАК СуммаСкидки,
		//|		МАКСИМУМ((ЗаказПокупателяТовары.Цена * ЗаказПокупателяТовары.Количество - ЗаказПокупателяТовары.Сумма) / ЗаказПокупателяТовары.Количество) КАК СуммаСкидкиЕдиницыПродукции,
		|СУММА(ВЫБОР
		|		КОГДА ЗаказПокупателяТовары.Ссылка.УчитыватьНДС
		|				И НЕ ЗаказПокупателяТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ВЫБОР
		|					КОГДА ЗаказПокупателяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|							ИЛИ ЗаказПокупателяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|						ТОГДА ВЫРАЗИТЬ((ЗаказПокупателяТовары.Цена * ЗаказПокупателяТовары.Количество - ЗаказПокупателяТовары.Сумма) * 1.18 КАК ЧИСЛО(15, 2))
		|					КОГДА ЗаказПокупателяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|							ИЛИ ЗаказПокупателяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|						ТОГДА ВЫРАЗИТЬ((ЗаказПокупателяТовары.Цена * ЗаказПокупателяТовары.Количество - ЗаказПокупателяТовары.Сумма) * 1.1 КАК ЧИСЛО(15, 2))
		|					ИНАЧЕ ЗаказПокупателяТовары.Цена * ЗаказПокупателяТовары.Количество - ЗаказПокупателяТовары.Сумма
		|				КОНЕЦ
		|		ИНАЧЕ ЗаказПокупателяТовары.Цена * ЗаказПокупателяТовары.Количество - ЗаказПокупателяТовары.Сумма
		|	КОНЕЦ) КАК СуммаСкидки,
		|МАКСИМУМ(ВЫБОР
		|		КОГДА ЗаказПокупателяТовары.Ссылка.УчитыватьНДС
		|				И НЕ ЗаказПокупателяТовары.Ссылка.СуммаВключаетНДС
		|			ТОГДА ВЫБОР
		|					КОГДА ЗаказПокупателяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|							ИЛИ ЗаказПокупателяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|						ТОГДА ВЫРАЗИТЬ((ЗаказПокупателяТовары.Цена * ЗаказПокупателяТовары.Количество - ЗаказПокупателяТовары.Сумма) / ЗаказПокупателяТовары.Количество * 1.18 КАК ЧИСЛО(15, 2))
		|					КОГДА ЗаказПокупателяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|							ИЛИ ЗаказПокупателяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|						ТОГДА ВЫРАЗИТЬ((ЗаказПокупателяТовары.Цена * ЗаказПокупателяТовары.Количество - ЗаказПокупателяТовары.Сумма) / ЗаказПокупателяТовары.Количество * 1.1 КАК ЧИСЛО(15, 2))
		|					ИНАЧЕ (ЗаказПокупателяТовары.Цена * ЗаказПокупателяТовары.Количество - ЗаказПокупателяТовары.Сумма) / ЗаказПокупателяТовары.Количество
		|				КОНЕЦ
		|		ИНАЧЕ (ЗаказПокупателяТовары.Цена * ЗаказПокупателяТовары.Количество - ЗаказПокупателяТовары.Сумма) / ЗаказПокупателяТовары.Количество
		|	КОНЕЦ) КАК СуммаСкидкиЕдиницыПродукции,
		
		//<<240915
		|		ЗаказПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		ЗаказПокупателяТовары.Номенклатура.НСИ_ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		ЗаказПокупателяТовары.Номенклатура.НСИ_Брендообъем КАК Брендообъем
		|	ИЗ
		|		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|	ГДЕ
		|		ЗаказПокупателяТовары.Ссылка В
		|				(ВЫБРАТЬ
		|					втДвиженияПоРегиструОграничений.Регистратор
		|				ИЗ
		|					втДвиженияПоРегиструОграничений КАК втДвиженияПоРегиструОграничений
		|				СГРУППИРОВАТЬ ПО
		|							втДвиженияПоРегиструОграничений.Регистратор)
		|		И ЗаказПокупателяТовары.Цена * ЗаказПокупателяТовары.Количество - ЗаказПокупателяТовары.Сумма > 0
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказПокупателяТовары.Ссылка,
		|		ЗаказПокупателяТовары.Номенклатура,
		|		ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
		|		ЗаказПокупателяТовары.Номенклатура.НСИ_ТоварнаяКатегория,
		|		ЗаказПокупателяТовары.Номенклатура.НСИ_Брендообъем) КАК ВложенныйЗапрос_Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			втПроблемныеЗаданияНаПодбор.Заказ КАК Заказ,
		|			втПроблемныеЗаданияНаПодбор.Ссылка КАК Задание,
		|			втПроблемныеЗаданияНаПодбор.Номенклатура КАК Номенклатура,
		|			СУММА(втПроблемныеЗаданияНаПодбор.Количество) КАК Количество,
		|			СУММА(втПроблемныеЗаданияНаПодбор.КоличествоФакт) КАК КоличествоФакт
		|		ИЗ
		|			втПроблемныеЗаданияНаПодбор КАК втПроблемныеЗаданияНаПодбор
		|		
		|		СГРУППИРОВАТЬ ПО
		|			втПроблемныеЗаданияНаПодбор.Заказ,
		|			втПроблемныеЗаданияНаПодбор.Ссылка,
		|			втПроблемныеЗаданияНаПодбор.Номенклатура) КАК ВложенныйЗапрос_Задания
		|		ПО ВложенныйЗапрос_Заказы.Ссылка = ВложенныйЗапрос_Задания.Заказ
		|			И ВложенныйЗапрос_Заказы.Номенклатура = ВложенныйЗапрос_Задания.Номенклатура
		|ГДЕ
		|	ВложенныйЗапрос_Заказы.Количество - ЕСТЬNULL(ВложенныйЗапрос_Задания.КоличествоФакт, 0) > 0";

		
	//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
	ПРГТабл = ТаблицаДвижений.Скопировать(,"Заказ,ЗаданиеНаПодбор,Номенклатура,КоличествоПлан,КоличествоФакт");
	ПРГТабл.Свернуть("Заказ,ЗаданиеНаПодбор,Номенклатура","КоличествоПлан,КоличествоФакт");
	//конец изменений  
	
	//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
	//Запрос.УстановитьПараметр("ТаблицаДвижений",ТаблицаДвижений);
	Запрос.УстановитьПараметр("ТаблицаДвижений",ПРГТабл);
	//конец изменений  
	Запрос.УстановитьПараметр("ЗаказПокупателяСсылка",Заказ);
	Запрос.УстановитьПараметр("ЗаданиеНаПодборСсылка",Ссылка);
	Результат = Запрос.ВыполнитьПакет();

	//Источник для расчета
	тДвиженияПоРегиструЗаказом = Результат[3].Выгрузить();
	тТаблицаДвиженийДляСтроно = Результат[4].Выгрузить();	
	
	ТаблицаСкидок = тДвиженияПоРегиструЗаказом.Скопировать();
	ТаблицаСкидок.Очистить();
	
	//Рассчитаем и заполним таблицу ТаблицаСкидок
	Для каждого СтрокаТЧ Из тТаблицаДвиженийДляСтроно Цикл
	
		СтруктураПоиска = Новый Структура("Контрагент,ДоговорКонтрагента,Номенклатура,ХарактеристикаНоменклатуры,ТоварнаяКатегория,Брендообъем");
	    ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаТЧ);
		
		//Найдем нужную строку ТЧ в 5 интераций
		Строки = тДвиженияПоРегиструЗаказом.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() = 0 Тогда
			
			СтруктураПоиска.Удалить("Брендообъем");
			Строки = тДвиженияПоРегиструЗаказом.НайтиСтроки(СтруктураПоиска);
			
			Если Строки.Количество() = 0 Тогда
				
				СтруктураПоиска.Удалить("ТоварнаяКатегория");
				Строки = тДвиженияПоРегиструЗаказом.НайтиСтроки(СтруктураПоиска);
				
				Если Строки.Количество() = 0 Тогда
					
					СтруктураПоиска.Удалить("ХарактеристикаНоменклатуры");
					Строки = тДвиженияПоРегиструЗаказом.НайтиСтроки(СтруктураПоиска);
					
					Если Строки.Количество() = 0 Тогда
						
						СтруктураПоиска.Удалить("Номенклатура");
						Строки = тДвиженияПоРегиструЗаказом.НайтиСтроки(СтруктураПоиска);
						
						Если Строки.Количество() = 0 Тогда
							
							СтруктураПоиска.Удалить("ДоговорКонтрагента");
							Строки = тДвиженияПоРегиструЗаказом.НайтиСтроки(СтруктураПоиска);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		тСуммаСкидкиДляРаспределения = СтрокаТЧ.СуммаСторноСкидки;
		
		Для каждого Стр Из Строки Цикл
		
			тНоваяСтрока = ТаблицаСкидок.Добавить();
			ЗаполнитьЗначенияСвойств(тНоваяСтрока,Стр,,"Количество,СуммаСкидки");
			тНоваяСтрока.СуммаСкидки = ?(тСуммаСкидкиДляРаспределения>Стр.СуммаСкидки,Стр.СуммаСкидки,тСуммаСкидкиДляРаспределения);
			
			тСуммаСкидкиДляРаспределения = тСуммаСкидкиДляРаспределения - тНоваяСтрока.СуммаСкидки;
			
			Если тСуммаСкидкиДляРаспределения <= 0 Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;  
		
	КонецЦикла; 
	
	//Запишем данные в регистр
	НаборДвижений = Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам;
	НаборДвижений.Записывать = Истина;
	
	СтруктТаблицДокумента = Новый Структура;
	СтруктТаблицДокумента.Вставить("ТаблицаСкидок", ТаблицаСкидок);
	
	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
	
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, СтруктураШапкиДокумента.Дата);
	
КонецПроцедуры
 
Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	//Движения по регистру накопления "АП_СтатусыДокументов"
	//начало изменений Ожиганов 08.06.2015 запись будущим периодом 
	//поскольку запись осуществляется следующей  секундой будем брать срез последних на конец дня
	//есть шанс получить несоотвествие но до этого надеюсь не дойдет
	//в противном случае всегда будем наблюдать ошибку запись с такими поля существует
	ТекДата = ТекущаяДата();
	КонДня = КонецДня(ТекущаяДата());
	//конец изменений 
	//ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(КонДня, Новый Структура("Документ", Ссылка));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструСтатусы(Отказ,ТекДата);
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = СтатусДокумента Тогда
	    СформируемЗаписьПоРегиструСтатусы(Отказ,Макс(ДанныеПоСтатусу[0].Период,ТекДата));
	КонецЕсли;
	
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусы(Отказ, ТекДата)

	//мДатаЗаписи = ТекущаяДата();
	мДатаЗаписи  = ТекДата;
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	//начало изменений Ожиганов 08.06.2015 запись будущим периодом 
	//Если НаборЗаписей.Количество() > 0 Тогда
	Пока НаборЗаписей.Количество() > 0 Цикл
	
		мДатаЗаписи  = мДатаЗаписи + 1;
		//начало изменений Ожиганов 08.06.2015 запись будущим периодом 
		НаборЗаписей.Очистить();
		//конец изменений 
		
		//НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
		
		НаборЗаписей.Прочитать();
	//КонецЕсли;
	КонецЦикла;
	//конец изменений  
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = СтатусДокумента;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ПроверитьСтрокиТабличнойЧасти("Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

//Проверяет заполнение реквизитов табличных частей, которые зависят от указания
Процедура  ПроверитьСтрокиТабличнойЧасти(ИмяТЧ, ТЧ, Отказ, Заголовок)
	
	//Для каждого Строка из ТЧ цикл
	//	
	//	СтрокаНачалаСообщенияОбОшибке = Нстр("ru = 'В строке номер """+ СокрЛП(Строка.НомерСтроки) + """ табличной части """ + ИмяТЧ + """: '");
	//	
	//	// Описываем механизмы проверки строк 
	//	
	//КонецЦикла;
	
	//Blik 65458 180917 н
	//проверка на заполнение серии
	Если (СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Собран или СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад) и
		(ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру 
		или ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера)
		Тогда
		Для каждого Строка из ТЧ цикл
			
			СтрокаНачалаСообщенияОбОшибке = Нстр("ru = 'В строке номер """+ СокрЛП(Строка.НомерСтроки) + """ табличной части """ + ИмяТЧ + """: '");
			Если строка.Номенклатура.ВестиУчетПоСериям и не ЗначениеЗаполнено(строка.СерияНоменклатуры) и не строка.КоличествоФакт = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + " Не заполнена серия номенклатуры!" , Отказ, Заголовок);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	//Blik 65458 180917 к
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		
		ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеНаСклад;
		
		Если ЭтоНовый() Тогда
			СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт;
			Ответственный = глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли;
		
		//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
		АОснование = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Основание,
		Новый Структура("Заказчик,Организация,Подразделение,Комментарий,СП_Склад,ДатаОтгрузки,
		|КП_Отделение,КП_УсловиеПоставки,КП_ТипТранспорта,КП_КомментарийКОтгрузке,КП_КоличествоПаллетоМест,ПРГ_ВидОперации,Контрагент,Договор"));  //Blik 150817 добавлен вид операции, контрагент, договор
		
		//Blik 130917 65458 н
		Если АОснование.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера Тогда
			 ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера;
			 Получатель    	   = АОснование.Заказчик;
			 ДоговорКонтрагента = АОснование.Договор;
		ИначеЕсли АОснование.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру Тогда
			 ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру;
			 Получатель    	   = АОснование.Контрагент;
			 ДоговорКонтрагента = АОснование.Договор;
		Иначе
			Получатель    	   = АОснование.Заказчик;
		КонецЕсли;
		//Получатель    	   = АОснование.Заказчик;
		//Blik 130917 65458 к
		Организация        = АОснование.Организация;
		//Ответственный      = АОснование.Ответственный;
		Подразделение      = АОснование.Подразделение;
		Заказ   		   = Основание;
		Комментарий        = АОснование.Комментарий;
		Склад			   = АОснование.СП_Склад;
		
		ПлановаяДатаОтгрузки 	= АОснование.ДатаОтгрузки;
		КП_Отделение 			= АОснование.КП_Отделение;
		КП_УсловиеПоставки 		= АОснование.КП_УсловиеПоставки;
		КП_ТипТранспорта		= АОснование.КП_ТипТранспорта;
		
		НаборЗаписей = РегистрыСведений.СП_ПривязкаСкладовКОтделениям.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отделение.Установить(КП_Отделение);
		НаборЗаписей.Прочитать();
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("СкладПретензии"	, Справочники.Склады.ПустаяСсылка());
		СтруктураВозврата.Вставить("СкладТранзит"	, Справочники.Склады.ПустаяСсылка());
		
		Для каждого Строка Из НаборЗаписей Цикл
			
			ПрайсЛист = Строка.ПрайсЛист;
			
		КонецЦикла;		
		
		КомментарийКОтгрузке = АОснование.КП_КомментарийКОтгрузке;
		
		КоличествоПаллетоМест = АОснование.КП_КоличествоПаллетоМест;
		//конец изменений 
			
		ЗаполнитьТоварыПоЗаказу();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ОтгрузкаКлиенту;
		
		Если ЭтоНовый() Тогда
			СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт;
			Ответственный = глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли;
		
		//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
		АОснование = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Основание,
		Новый Структура("Контрагент,Организация,Подразделение,Комментарий,СкладГруппа,ДатаОтгрузки,КП_Отделение,КП_УсловиеПоставки,КП_ТипТранспорта
		|,КП_Сотрудник,КП_КомментарийКОтгрузке,КП_КоличествоПаллетоМест"));
		Получатель    	   = АОснование.Контрагент;
		Организация        = АОснование.Организация;
		//Ответственный      = АОснование.Ответственный;
		Подразделение      = АОснование.Подразделение;
		Заказ   		   = Основание;
		Комментарий        = АОснование.Комментарий;
		Склад			   = АОснование.СкладГруппа;
				
		ПлановаяДатаОтгрузки 	= АОснование.ДатаОтгрузки;
		КП_Отделение 			= АОснование.КП_Отделение;
		КП_УсловиеПоставки 		= АОснование.КП_УсловиеПоставки;
		КП_ТипТранспорта		= АОснование.КП_ТипТранспорта;
		
		КП_Сотрудник = АОснование.КП_Сотрудник;
		
		НаборЗаписей = РегистрыСведений.СП_ПривязкаСкладовКОтделениям.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Отделение.Установить(КП_Отделение);
		НаборЗаписей.Прочитать();
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("СкладПретензии"	, Справочники.Склады.ПустаяСсылка());
		СтруктураВозврата.Вставить("СкладТранзит"	, Справочники.Склады.ПустаяСсылка());
		
		Для каждого Строка Из НаборЗаписей Цикл
			
			ПрайсЛист = Строка.ПрайсЛист;
			
		КонецЦикла;		
		
		КомментарийКОтгрузке = АОснование.КП_КомментарийКОтгрузке;
		
		КоличествоПаллетоМест = АОснование.КП_КоличествоПаллетоМест;
		//конец изменений 
		ЗаполнитьТоварыПоЗаказу();		
	
	КонецЕсли; 
		
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ОбъектКопирования.Ссылка);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоЗаказу() Экспорт

	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
	
		Возврат;		
	
	КонецЕсли; 
	
	//ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	ДатаОстатков = '00010101';
	        
	Товары.Очистить();
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВнутреннийЗаказТовары.Номенклатура,
	               |	ВнутреннийЗаказТовары.ХарактеристикаНоменклатуры,
	               |	ВнутреннийЗаказТовары.КП_ОСГ КАК ОСГ,
	               |	ВнутреннийЗаказТовары.НомерСтроки
	               |ПОМЕСТИТЬ ТаблицаЗаказа
	               |ИЗ
	               |	Документ."+?(ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ"), "ВнутреннийЗаказ", "ЗаказПокупателя") + ".Товары КАК ВнутреннийЗаказТовары
	               |ГДЕ
	               |	ВнутреннийЗаказТовары.Ссылка = &ДокументРезерва
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВнутреннийЗаказТовары.Номенклатура,
	               |	ВнутреннийЗаказТовары.ХарактеристикаНоменклатуры,
	               |	ВнутреннийЗаказТовары.КП_ОСГ,
	               |	ВнутреннийЗаказТовары.НомерСтроки
	               |;
					/// Кунов О.В., 02.04.2015 - 38301
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ТаблицаЗаказа.Номенклатура,
					|	ТаблицаЗаказа.ХарактеристикаНоменклатуры,
					|	ТаблицаЗаказа.ОСГ,
					|	КОЛИЧЕСТВО(ТаблицаЗаказа.НомерСтроки) КАК КоличествоСтрок
					|ПОМЕСТИТЬ втКоличествоСтрок
					|ИЗ
					|	ТаблицаЗаказа КАК ТаблицаЗаказа
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаЗаказа.Номенклатура,
					|	ТаблицаЗаказа.ХарактеристикаНоменклатуры,
					|	ТаблицаЗаказа.ОСГ
					|;
					///
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВнешнийЗапрос.Номенклатура,
	               |	ВнешнийЗапрос.ХарактеристикаНоменклатуры,
	               |	СУММА(ВнешнийЗапрос.Количество) КАК Количество
	               |ПОМЕСТИТЬ ТаблицаОстатков
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТоварыВРезервеНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |		ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |		СУММА(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток) КАК Количество
	               |	ИЗ
	               |		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(
	               |				&ДатаОстатков,
	               |				ДокументРезерва = &ДокументРезерва
	               |					И Склад = &Склад) КАК ТоварыВРезервеНаСкладахОстатки
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ТоварыВРезервеНаСкладахОстатки.Номенклатура,
	               |		ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СП_ЗаданияНаПодборОбороты.Номенклатура,
	               |		СП_ЗаданияНаПодборОбороты.ХарактеристикаНоменклатуры,
	               |		СУММА(-СП_ЗаданияНаПодборОбороты.КоличествоПланОборот)
	               |	ИЗ
	               |		РегистрНакопления.СП_ЗаданияНаПодбор.Обороты(
	               |				,
				   //начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок 
	               //|				&ДатаОстатков,
				   |				,
				   //конец изменений 
	               |				Регистратор,
	               |				Заказ = &ДокументРезерва
	               |					И Склад = &Склад) КАК СП_ЗаданияНаПодборОбороты
	               |	ГДЕ
	               |		СП_ЗаданияНаПодборОбороты.Регистратор ССЫЛКА Документ.СП_ЗаданиеНаПодбор
	               |		И НЕ СП_ЗаданияНаПодборОбороты.Регистратор = &ССылка
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		СП_ЗаданияНаПодборОбороты.Номенклатура,
	               |		СП_ЗаданияНаПодборОбороты.ХарактеристикаНоменклатуры) КАК ВнешнийЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВнешнийЗапрос.Номенклатура,
	               |	ВнешнийЗапрос.ХарактеристикаНоменклатуры
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(ВнешнийЗапрос.Количество) > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаЗаказа.Номенклатура,
	               |	ТаблицаЗаказа.ХарактеристикаНоменклатуры,
	               |	ТаблицаЗаказа.ОСГ,
					/// Кунов О.В., 02.04.2015 - 38301
                   //|	ТаблицаОстатков.Количество,
					|ТаблицаОстатков.Количество / втКоличествоСтрок.КоличествоСтрок КАК Количество,
					///
	               |	ВЫБОР
	               |		КОГДА ТаблицаОстатков.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент > 0
	               |			ТОГДА ТаблицаОстатков.Количество * ТаблицаОстатков.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ТаблицаОстатков.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК КоличествоМест,
	               |	ТаблицаОстатков.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	               |	ТаблицаОстатков.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	               |	ТаблицаОстатков.Номенклатура.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
				   //начало изменений Ожиганов 20.04.2015 37867  
				   |	ЕстьNull(ТаблицаОстатков.Номенклатура.ЕдиницаИзмеренияМест.Коэффициент,0) КАК ЕдиницаИзмеренияМестКоэффициент,
				   //конец изменений 
	               |	ТаблицаЗаказа.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	ТаблицаЗаказа КАК ТаблицаЗаказа
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатков КАК ТаблицаОстатков
	               |		ПО ТаблицаЗаказа.Номенклатура = ТаблицаОстатков.Номенклатура
	               |			И ТаблицаЗаказа.ХарактеристикаНоменклатуры = ТаблицаОстатков.ХарактеристикаНоменклатуры
					/// Кунов О.В., 02.04.2015 - 38301
					|ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоличествоСтрок КАК втКоличествоСтрок
					|ПО ТаблицаЗаказа.Номенклатура = втКоличествоСтрок.Номенклатура
					|	И ТаблицаЗаказа.ХарактеристикаНоменклатуры = втКоличествоСтрок.ХарактеристикаНоменклатуры
					///
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаЗаказа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаОстатков";
				   
	Запрос.УстановитьПараметр("ДокументРезерва"	, Заказ);
	Запрос.УстановитьПараметр("ДатаОстатков"	, ДатаОстатков);
	Запрос.УстановитьПараметр("Склад"			, Склад);
	Запрос.УстановитьПараметр("Ссылка"			, Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультат Из Результат Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультат);
		
		//начало изменений Ожиганов 20.04.2015 37867  
		//ПересчитатьКолВоМест(НоваяСтрока);
		ПересчитатьКолВоМест(НоваяСтрока,СтрокаРезультат.ЕдиницаИзмеренияМестКоэффициент);
		//конец изменений 
	КонецЦикла;
	//Товары.Загрузить(Результат);

КонецПроцедуры

Функция CформироватьНомерЗаданияНаПодбор(Заказ)

	//{02.06.2015 Островерхий заявка №40317 
	тНомерЗадания = "Не задан";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказПокупателя.Ссылка,
		|	ЗаказПокупателя.Номер
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВнутреннийЗаказ.Ссылка,
		|	ВнутреннийЗаказ.Номер + ""М""
		|ИЗ
		|	Документ.ВнутреннийЗаказ КАК ВнутреннийЗаказ
		|ГДЕ
		|	ВнутреннийЗаказ.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Заказ);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		тНомерЗадания = ВыборкаДетальныеЗаписи.Номер;  
	КонецЕсли;

	Возврат тНомерЗадания; 
	//02.06.2015 Островерхий} 

КонецФункции // CформироватьНомерЗаданияНаПодбор(Заказ)

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	ПРГПростоЗаписать = Ложь;
	Если ДополнительныеСвойства.Свойство("ПРГПростоЗаписать",ПРГПростоЗаписать) Тогда
		Если ПРГПростоЗаписать Тогда
			возврат;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 
	
	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 
	
	
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	//{02.06.2015 Островерхий заявка №40317 
	//Если ЭтоНовый() Тогда
	//	//m.ionov@a-prof.ru 01.02.2015
	//	Если Заказ = Неопределено Тогда
	//		Номер = "Не задан";
	//	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	//		Номер = Заказ.Номер;
	//	Иначе
	//		Номер = СокрЛП(Заказ.Номер) + "M";
	//	КонецЕсли;
	//КонецЕсли; 
	Номер = CформироватьНомерЗаданияНаПодбор(Заказ);	
	//02.06.2015 Островерхий} 
	//конец изменений 
	//----m.ionov@a-prof.ru---
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если Не ЭтоНовый() Тогда
		РазрешитьЗапись = Ложь;
		Если ДополнительныеСвойства.Свойство("РазрешитьЗапись", РазрешитьЗапись) = Ложь Тогда
			РазрешитьЗапись = Ложь;
		КонецЕсли;
		
		Если Не РазрешитьЗапись Тогда
			Отказ = Не АП_ОбщегоНазначенияСервер.МожноМенятьЗаданиеНаПодбор(Ссылка);
			
			Если Отказ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Задание " + СокрЛП(Ссылка) + " запрещено менять, так как есть введенные документы на основании", Отказ);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если Не Отказ и Не СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен Тогда
		ЕстьДругие = АП_ОбщегоНазначенияСервер.ПроверкаНаДубльПоЗаданиюНаПодбор(Заказ, Ссылка);
		Если ЗначениеЗаполнено(ЕстьДругие) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По заказу уже есть задание на подбор " + СокрЛП(ЕстьДругие), Отказ);
		КонецЕсли;
	КонецЕсли;
	
	//m.ionov@a-prof.ru 02.02.2015
	Если СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен Тогда
		//Делаем проверку чтобы было отменено задание на перевозку
		ЗаданиеНаПеревозку = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПеревозкуПоЗаказу(Заказ);
		Если ЗначениеЗаполнено(ЗаданиеНаПеревозку) И ЗаданиеНаПеревозку.Проведен И Не ЗаданиеНаПеревозку.СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Отменено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для отмены Задание " + СокрЛП(Ссылка) + " нужно отменить задание на перевозку " + СокрЛП(ЗаданиеНаПеревозку), Отказ);	
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	//m.ionov@a-prof.ru 25.02.2015
	//Делаем проверку чтобы не было сформированных документов
	Если Не ЭтоНовый() И СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт ИЛИ СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен Тогда
		ЕстьНакладная = АП_ОбщегоНазначенияСервер.ВернутьНакладнуюПоЗаданиюНаПодбор(Заказ, Ссылка);
		Если Не ЕстьНакладная = Неопределено Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для отмены Задание " + СокрЛП(Ссылка) + " нужно отменить сформированную накладную " + СокрЛП(ЕстьНакладная), Отказ);	
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
//начало изменений Ожиганов 29.01.2016 48463 ограничение по требованию ГБ, если есть накладная то задание на подбор недоступно для изменения 
	Если  Не РольДоступна("АП_Администратор") и не Отказ и  Не ДополнительныеСвойства.Свойство("ПРГ_РазрешитьМенятьЗПСНакладной") Тогда
		Если ЕстьНакладняПОзаданиюНаПодбор() Тогда
		//начало изменений Ожиганов 02.02.2016 б/н добавим проверку на изменение факта
			//ОбщегоНазначения.СообщитьОбОшибке("По документу "+Ссылка+" уже сформирована накладная. Документ не доступен для изменения!!!",Отказ);
			
			ТаблТоваров = Товары.Выгрузить(,"Номенклатура,КоличествоФакт");
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	ТабТоваров.Номенклатура,
			                      |	ТабТоваров.КоличествоФакт
			                      |ПОМЕСТИТЬ ТабТоваров
			                      |ИЗ
			                      |	&ТабТоваров КАК ТабТоваров
			                      |;
			                      |
			                      |////////////////////////////////////////////////////////////////////////////////
			                      |ВЫБРАТЬ
			                      |	ТаблСравн.Номенклатура,
			                      |	СУММА(ТаблСравн.КоличествоФакт) КАК КоличествоФакт
			                      |ИЗ
			                      |	(ВЫБРАТЬ
			                      |		СП_ЗаданиеНаПодборТовары.Номенклатура КАК Номенклатура,
			                      |		СУММА(СП_ЗаданиеНаПодборТовары.КоличествоФакт) КАК КоличествоФакт
			                      |	ИЗ
			                      |		Документ.СП_ЗаданиеНаПодбор.Товары КАК СП_ЗаданиеНаПодборТовары
			                      |	ГДЕ
			                      |		СП_ЗаданиеНаПодборТовары.Ссылка = &Ссылка
			                      |	
			                      |	СГРУППИРОВАТЬ ПО
			                      |		СП_ЗаданиеНаПодборТовары.Номенклатура
			                      |	
			                      |	ОБЪЕДИНИТЬ ВСЕ
			                      |	
			                      |	ВЫБРАТЬ
			                      |		ТабТоваров.Номенклатура,
			                      |		СУММА(-1 * ТабТоваров.КоличествоФакт)
			                      |	ИЗ
			                      |		ТабТоваров КАК ТабТоваров
			                      |	
			                      |	СГРУППИРОВАТЬ ПО
			                      |		ТабТоваров.Номенклатура) КАК ТаблСравн
			                      |
			                      |СГРУППИРОВАТЬ ПО
			                      |	ТаблСравн.Номенклатура
			                      |
			                      |ИМЕЮЩИЕ
			                      |	СУММА(ТаблСравн.КоличествоФакт) <> 0");
								  
			Запрос .УстановитьПараметр("Ссылка",ссылка);
			Запрос .УстановитьПараметр("ТабТоваров",ТаблТоваров);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ОбщегоНазначения.СообщитьОбОшибке("По документу "+Ссылка+" уже сформирована накладная. Документ не доступен для изменения!!!",Отказ);
			КонецЕсли;	
			//конец изменений 
			
		КонецЕсли;
	КонецЕсли;		
//конец изменений 
	
	//{25.03.2015 Островерхий заявка №38069
	//Установим количество факт равным количеству план для тары
	Если НЕ СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен
		И НЕ СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт
		И НЕ СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.ПереданНаСклад
		Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.Количество,
		|	Товары.КоличествоФакт
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТовары.НомерСтроки,
		|	втТовары.Количество,
		|	втТовары.КоличествоФакт,
		|	спрНоменклатура.Ссылка
		|ИЗ
		|	втТовары КАК втТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		|		ПО втТовары.Номенклатура = спрНоменклатура.Ссылка
		|ГДЕ
		|	втТовары.КоличествоФакт = 0
		|	И спрНоменклатура.ВидНоменклатуры В
		|			(ВЫБРАТЬ
		|				ВидыНоменклатуры.Ссылка КАК Ссылка
		|			ИЗ
		|				Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|			ГДЕ
		|				НЕ ВидыНоменклатуры.НСИ_ОбменССолво)";
		
		Запрос.УстановитьПараметр("Товары", Товары);
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Товары[ВыборкаДетальныеЗаписи.НомерСтроки-1].КоличествоФакт = ВыборкаДетальныеЗаписи.Количество;
			
		КонецЦикла;

		//Для каждого ТекСтрока Из Товары Цикл
		//
		//	Если НЕ ТекСтрока.Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво
		//		И ТекСтрока.КоличествоФакт = 0 Тогда
		//	
		//		ТекСтрока.КоличествоФакт = ТекСтрока.Количество;
		//	
		//	КонецЕсли; 	
		//
		//КонецЦикла; 
	
	КонецЕсли;  
	//25.03.2015 Островерхий} 
	
	#Если Клиент Тогда
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") И НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И НЕ ПометкаУдаления Тогда
		Если Не АП_ОбщегоНазначенияКлиент.ТребуетсяЗаданиеНаПодбор(Заказ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По " + СокрЛП(Заказ) + " не требуется задание на подбор!", Отказ);
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	Если Не ЭтоНовый() И Не Отказ Тогда
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			//При формировании документов процедура вызывается отдельно
			//ЗакрытиеРезервов(РежимЗаписи, Отказ);	
			//++ Spl_Апроф 02.03.2015 (k.russkih@a-prof.ru) Используем новую процедуру закрытия резервов
			//ДополнительныеСвойства.Вставить("мВыполнитьЗакрытиеРезервов", Истина);
			//НоваяПроцедураЗакрытияРезервов(Ссылка, Отказ);
		КонецЕсли;		
		
		//{25.03.2016 Островерхий заявка №50630 + перезаполняем задание для исключения случаев когда документ пометили на удаление а потом сняли пометку и провели. 
		Если СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт
			И РежимЗаписи = РежимЗаписиДокумента.Проведение 
			И НЕ ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(Ссылка,"Проведен") Тогда
			
			ЗаполнитьТоварыПоЗаказу();
			ОбщегоНазначения.Сообщение("Обновлено задание " + СокрЛП(Ссылка), СтатусСообщения.Информация);
			
		КонецЕсли;  
		//25.03.2016 Островерхий}
		
	КонецЕсли; 
	
	//начало изменений Ожиганов 18.05.2015 Дата выпуска	  
	Если Не Отказ Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Для Каждого ТекСтрока Из Товары Цикл
				Если ТекСтрока.Количество = 0 и ТекСтрока .КоличествоФакт = 0 Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В строке "+(Товары.Индекс(ТекСтрока)+1)+" не заполнено количество план",Отказ);
				КонецЕслИ;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений  
	
КонецПроцедуры

Процедура ЗакрытиеРезервов(мРежимЗаписи, Отказ = Ложь) Экспорт

	//++ Spl_Апроф 02.03.2015 (k.russkih@a-prof.ru) Используем новую процедуру закрытия резервов. Код удалять не будем, мало ли пригодится
	ДополнительныеСвойства.Вставить("мВыполнитьЗакрытиеРезервов", Истина);
	НоваяПроцедураЗакрытияРезервов(Ссылка, Отказ, мРежимЗаписи);	
	Возврат; 
	
	Если НЕ ЗначениеЗаполнено(Заказ) И Не ДатаФормированияДокументов = Дата(1,1,1) Тогда
	    Возврат;	
	КонецЕсли; 	
	
	Если СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.СформированыДокументы И мРежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			НайтиДокумент = Документы.ЗакрытиеЗаказовПокупателей.НайтиПоРеквизиту("СП_ЗаданиеНаПодбор", Ссылка);
			
			Если ЗначениеЗаполнено(НайтиДокумент) Тогда
			     ТекДокумент = НайтиДокумент.ПолучитьОбъект();
			Иначе	
			     ТекДокумент = Документы.ЗакрытиеЗаказовПокупателей.СоздатьДокумент();
			КонецЕсли; 			
			
		ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			
			НайтиДокумент = Документы.ЗакрытиеВнутреннихЗаказов.НайтиПоРеквизиту("СП_ЗаданиеНаПодбор", Ссылка);
			
			Если ЗначениеЗаполнено(НайтиДокумент) Тогда
			     ТекДокумент = НайтиДокумент.ПолучитьОбъект();
			Иначе	
			     ТекДокумент = Документы.ЗакрытиеВнутреннихЗаказов.СоздатьДокумент();
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ТекДокумент.ПометкаУдаления Тогда		
			//ТекДокумент.УстановитьПометкуУдаления(Ложь);		
			ТекДокумент.ПометкаУдаления = Ложь;
		КонецЕсли; 
		
		ТекДокумент.Дата = ДатаФормированияДокументов - 1;
		ТекДокумент.СП_ЗаданиеНаПодбор = Ссылка;
		ТекДокумент.Заказы.Очистить();
		ТекДокумент.Заполнить(Заказ);
		
		Попытка		
			ТекДокумент.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
			ТекДокумент.Записать(РежимЗаписиДокумента.Проведение);		
			ТекДокумент.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
				
	КонецЕсли;

КонецПроцедуры

Процедура ВвестиЗаданиеНаПеревозку(ФормаЗаказа) Экспорт
	
	Если Не АП_ОбщегоНазначенияКлиент.ТребуетсяЗаданиеНаПеревозку(Заказ) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("По " + СокрЛП(Заказ) + " не вводится задание на перевозку!");
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Или Не Проведен Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Ввести задание на перевозку можно только после проведения документа!");
		
		Возврат;
	КонецЕсли;
	
	ЗаданиеНаПеревозку = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПеревозкуПоЗаказу(Заказ);
	Если Не ЗначениеЗаполнено(ЗаданиеНаПеревозку) Тогда

		#Если Клиент Тогда
		Если Не ФормаЗаказа = Неопределено И ФормаЗаказа.Модифицированность() Тогда
			Предупреждение("Необходимо записать задание на подбор, перед вводом задания на перевозку",60);
			Возврат;
		КонецЕсли;
		#КонецЕсли
		
		ЗаданиеНаПеревозку = Документы.ПТЛ_ЗаданиеНаПеревозку.СоздатьДокумент();
		ЗаданиеНаПеревозку.Заполнить(Заказ);
	КонецЕсли;
	
	ЗаданиеНаПеревозку.ПолучитьФорму(,ФормаЗаказа).Открыть();	
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт
		И Не СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен Тогда
		Если РольДоступна("АП_Администратор") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение задания на подбор. Отменить проведение можно только в статусе Открыт или Отменен!", Ложь, "Отмена проведения задания на подбор");
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение задания на подбор. Отменить проведение можно только в статусе Открыт или Отменен!", Отказ, "Отмена проведения задания на подбор");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПеревозкуПоЗаказу(Заказ)) Тогда
		Если РольДоступна("АП_Администратор") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение задания на подбор. По заданию сформированные документы!", Ложь, "Отмена проведения задания на подбор");
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение задания на подбор. По заданию сформированные документы!", Отказ, "Отмена проведения задания на подбор");
		КонецЕсли;
	КонецЕсли; 	
	
КонецПроцедуры

//начало изменений Ожиганов 20.04.2015 37867  
Процедура ПересчитатьКолВоМест(СтрокаТабличнойЧасти,ПРГКоэффИзмМест = Неопределено) Экспорт
//конец изменений 	

   //начало изменений Ожиганов 20.04.2015 37867  
   Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) И ПРГКоэффИзмМест  <> Неопределено Тогда
	   Если ПРГКоэффИзмМест = 0 Тогда
			СтрокаТабличнойЧасти.КоличествоМест = 0;
			СтрокаТабличнойЧасти.КоличествоМестФакт = 0;
		Иначе
			СтрокаТабличнойЧасти.КоличествоМест = Цел(СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Коэффициент
							                 / ПРГКоэффИзмМест);
			СтрокаТабличнойЧасти.КоличествоМестФакт = Цел(СтрокаТабличнойЧасти.КоличествоФакт * СтрокаТабличнойЧасти.Коэффициент
							                 / ПРГКоэффИзмМест);
		КонецЕсли;   
	//Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) И Не СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент = 0 Тогда
	ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) И Не СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент = 0 Тогда
	//конец изменений 	
		СтрокаТабличнойЧасти.КоличествоМест = Цел(СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Коэффициент
						                 / СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент);
		СтрокаТабличнойЧасти.КоличествоМестФакт = Цел(СтрокаТабличнойЧасти.КоличествоФакт * СтрокаТабличнойЧасти.Коэффициент
						                 / СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест.Коэффициент);

	Иначе
		СтрокаТабличнойЧасти.КоличествоМест = 0;
		СтрокаТабличнойЧасти.КоличествоМестФакт = 0;
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьЗадания(Отказ, ВыводитьСообщение = Истина) Экспорт
	
	Если ЭтоНовый() Или Не Проведен Тогда
		Возврат;
	КонецЕсли;
			
	//Задание на перевозку
    Задание = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПеревозкуПоЗаказу(Ссылка.Заказ);
	
	Если ЗначениеЗаполнено(Задание) Тогда
		ОбъектЗадание = Задание.ПолучитьОбъект();
		ОбъектЗадание.ЗаполнитьПоЗаданиюНаПодбор(Ссылка);
		
		Если ОбъектЗадание.Дата < Дата Тогда
			ОбъектЗадание.Дата = Дата + 1;
		КонецЕсли;
		
		Если СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отгружен
			И Не СтатусДокумента = Ссылка.СтатусДокумента Тогда
			//Поменяем статус задания на перевозку на "Выполняется"
			Если ОбъектЗадание.СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ВключенаВПлан 
				ИЛИ ОбъектЗадание.СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ВРаботе Тогда
				
				ОбъектЗадание.СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Выполняется;
				ОбъектЗадание.ДатаОтгрузкиФакт = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;

	
		Попытка
			
			МенятьСтатус = Истина;
			Если ДополнительныеСвойства.Свойство("МенятьСтатус", МенятьСтатус) = Ложь Тогда
				МенятьСтатус = Истина;
			КонецЕсли;
			//начало изменений Ожиганов 22.07.2015 оптимизация задания на перевозу	 
			Если ОбъектЗадание.Модифицированность() Тогда
			//конец изменений 	
				ОбъектЗадание.ДополнительныеСвойства.Вставить("МенятьСтатус", МенятьСтатус);
				ОбъектЗадание.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
				Если ОбъектЗадание.Проведен Тогда
					ОбъектЗадание.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
				Иначе
					ОбъектЗадание.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
				ОбъектЗадание.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
				ОбъектЗадание.ДополнительныеСвойства.Вставить("МенятьСтатус", Истина);
				
			//начало изменений Ожиганов 22.07.2015 оптимизация задания на перевозу	 	
				Если ВыводитьСообщение Тогда
					ОбщегоНазначения.Сообщение("Обновлено задание " + СокрЛП(Задание), СтатусСообщения.Информация);
				КонецЕсли;
			
			Иначе
				Если ВыводитьСообщение Тогда
					ОбщегоНазначения.Сообщение("Обновление не требуется для задания " + СокрЛП(Задание), СтатусСообщения.Информация);
				КонецЕсли;
			КонецЕсли;	
			//конец изменений 
		Исключение
	    	ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВвестиЖурналУчетаАМ(ФормаЗаказа) Экспорт

	Если ЭтоНовый() Или Не Проведен Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Ввести задание на перевозку можно только после проведения документа!");
		
		Возврат;
	КонецЕсли;
	
	ЖурналУчета = АП_ОбщегоНазначенияСервер.ВернутьЖурналУчетаАМ(Ссылка);
	Если ЖурналУчета = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Задание не включено в план доставки!");
		
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ЖурналУчета) Тогда

		ЖурналУчета = Документы.ПТЛ_ЖурналУчетаВъездаВыездаАМ.СоздатьДокумент();
		ЖурналУчета.Заполнить(Ссылка);
	КонецЕсли;
	
	ЖурналУчета.ПолучитьФорму(,ФормаЗаказа).Открыть();	

КонецПроцедуры

Функция ДоступенСтатусДокумента() Экспорт
    //начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
	Если ЗначениеЗаполнено(Склад) Тогда
		АСклад = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаСпрСложНПоля(Склад,Новый Структура("НСИ_ПодключенКSolvo"));
		возврат АСклад.НСИ_ПодключенКSolvo;
	Иначе
		возврат Ложь;
	КонецЕслИ;	
	//Возврат Склад.НСИ_ПодключенКSolvo;	
    //конец изменений 
КонецФункции // ()

//Blik 65458 180917 н
Процедура ПроцедураПереносаРезерваНаПартию(ЗаданиеНаПодбор,мРежимЗаписи,ПРГ_УдалятьДвижения=Ложь)
	
	Если НЕ мРежимЗаписи = РежимЗаписиДокумента.Проведение Тогда	
		Возврат;	
	КонецЕсли;
	
	Движения.ТоварыВРезервеНаСкладах.Записывать = Истина;
	Движения.СвободныеОстатки.Записывать = Истина;
	
	Движения.ТоварыВРезервеНаСкладах.Очистить();
	Движения.СвободныеОстатки.Очистить();
	
	Если не ПРГ_УдалятьДвижения Тогда
		Движения.СвободныеОстатки.Записать();
		Движения.ТоварыВРезервеНаСкладах.Записать();
	КонецЕсли;	
	
	ТаблицаПоРезервам = ПодготовитьТаблицуДляЗакрытияПереносаРезервов(Заказ, ССылка);
	//запись в рн
	ТЗДляДВижения = новый ТаблицаЗначений;
	ТЗДляДВижения.Колонки.Добавить("Склад");
	ТЗДляДВижения.Колонки.Добавить("ДокументРезерва");
	ТЗДляДВижения.Колонки.Добавить("Номенклатура");
	ТЗДляДВижения.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТЗДляДВижения.Колонки.Добавить("СерияНоменклатуры");
	ТЗДляДВижения.Колонки.Добавить("Количество");
	  
	Если ТаблицаПоРезервам.Количество()>1 Тогда
		
		Для каждого стр из ТаблицаПоРезервам Цикл
			
		стрДвижения = ТЗДляДВижения.Добавить();
		ЗаполнитьЗначенияСвойств(стрДвижения,стр);
		
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТЗДляДВижения);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, стр.ВидДвижения, ТаблицыДанныхДокумента, Дата);

		ТЗДляДВижения.Удалить(стрДвижения);
		
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

Функция ПодготовитьТаблицуДляЗакрытияПереносаРезервов(ДокЗаказ, ДокЗадание) 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "Ссылка",  ДокЗадание);
	Запрос.УстановитьПараметр( "СписокЗаказов",  ДокЗаказ);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ТоварыВРезервеНаСкладахОстатки.Склад,
	               |	ТоварыВРезервеНаСкладахОстатки.ДокументРезерва,
	               |	ТоварыВРезервеНаСкладахОстатки.Номенклатура,
	               |	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры,
	               |	ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры,
	               |	ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток КАК Количество
	               |ПОМЕСТИТЬ ВТ_Резервы
	               |ИЗ
	               |	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва В (&СписокЗаказов)) КАК ТоварыВРезервеНаСкладахОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СП_ЗаданиеНаПодборТовары.Ссылка,
	               |	СП_ЗаданиеНаПодборТовары.НомерСтроки,
	               |	СП_ЗаданиеНаПодборТовары.Номенклатура,
	               |	СП_ЗаданиеНаПодборТовары.СерияНоменклатуры,
	               |	СП_ЗаданиеНаПодборТовары.ЕдиницаИзмерения,
	               |	СП_ЗаданиеНаПодборТовары.Коэффициент,
	               |	СП_ЗаданиеНаПодборТовары.ЕдиницаИзмеренияМест,
	               |	СП_ЗаданиеНаПодборТовары.Количество,
	               |	СП_ЗаданиеНаПодборТовары.КоличествоФакт,
	               |	СП_ЗаданиеНаПодборТовары.Количество - СП_ЗаданиеНаПодборТовары.КоличествоФакт КАК КоличествоОтклонение,
	               |	СП_ЗаданиеНаПодборТовары.Ссылка.Заказ КАК ДокументРезерва,
	               |	СП_ЗаданиеНаПодборТовары.Ссылка.Склад,
	               |	СП_ЗаданиеНаПодборТовары.ХарактеристикаНоменклатуры
	               |ПОМЕСТИТЬ ВТ_ДанныеДок
	               |ИЗ
	               |	Документ.СП_ЗаданиеНаПодбор.Товары КАК СП_ЗаданиеНаПодборТовары
	               |ГДЕ
	               |	СП_ЗаданиеНаПодборТовары.Ссылка = &Ссылка
	               |	И НЕ СП_ЗаданиеНаПодборТовары.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	               |	ВТ_Резервы.Склад КАК Склад,
	               |	ВТ_Резервы.ДокументРезерва КАК ДокументРезерва,
	               |	ВТ_Резервы.Номенклатура КАК Номенклатура,
	               |	ВТ_Резервы.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	ВТ_Резервы.СерияНоменклатуры КАК СерияНоменклатуры,
	               |	ВТ_Резервы.Количество КАК Количество
	               |ИЗ
	               |	ВТ_Резервы КАК ВТ_Резервы
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	               |	ВТ_ДанныеДок.Склад,
	               |	ВТ_ДанныеДок.ДокументРезерва,
	               |	ВТ_ДанныеДок.Номенклатура,
	               |	ВТ_ДанныеДок.ХарактеристикаНоменклатуры,
	               |	ВТ_ДанныеДок.СерияНоменклатуры,
	               |	ВТ_ДанныеДок.КоличествоФакт
	               |ИЗ
	               |	ВТ_ДанныеДок КАК ВТ_ДанныеДок
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	               |	ВТ_ДанныеДок.Склад,
	               |	ВТ_ДанныеДок.ДокументРезерва,
	               |	ВТ_ДанныеДок.Номенклатура,
	               |	ВТ_ДанныеДок.ХарактеристикаНоменклатуры,
	               |	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	               |	ВТ_ДанныеДок.КоличествоОтклонение
	               |ИЗ
	               |	ВТ_ДанныеДок КАК ВТ_ДанныеДок
	               |ГДЕ
	               |	ВТ_ДанныеДок.КоличествоОтклонение > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Склад,
	               |	ДокументРезерва,
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры,
	               |	СерияНоменклатуры";
				   
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции
//Blik 65458 180917 к

//++ Spl_Апроф 02.03.2015 (k.russkih@a-prof.ru)
Процедура НоваяПроцедураЗакрытияРезервов(ЗаданиеНаПодбор, Отказ = Ложь, мРежимЗаписи,ПРГ_УдалятьДвижения=Ложь) Экспорт
	
	Если ДатаФормированияДокументов = Дата(1,1,1) ИЛИ СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Отменен Тогда	
		Возврат;			
	КонецЕсли; 
	
	Если НЕ мРежимЗаписи = РежимЗаписиДокумента.Проведение Тогда	
		Возврат;	
	КонецЕсли;
	
	//++ Spl_Апроф 12.03.2015 (k.russkih@a-prof.ru) Проверим нет ли документа закрытие заказов покупателя
	Если ТипЗнч(ЗаданиеНаПодбор.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СП_ДокументыПоЗаданиюНаПодбор.Ссылка
		               |ИЗ
		               |	КритерийОтбора.СП_ДокументыПоЗаданиюНаПодбор(&Задание) КАК СП_ДокументыПоЗаданиюНаПодбор
		               |ГДЕ
		               |	СП_ДокументыПоЗаданиюНаПодбор.Ссылка ССЫЛКА Документ.ЗакрытиеЗаказовПокупателей
		               |	И СП_ДокументыПоЗаданиюНаПодбор.Ссылка.Проведен";
    Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СП_ДокументыПоЗаданиюНаПодбор.Ссылка
		               |ИЗ
		               |	КритерийОтбора.СП_ДокументыПоЗаданиюНаПодбор(&Задание) КАК СП_ДокументыПоЗаданиюНаПодбор
		               |ГДЕ
		               |	СП_ДокументыПоЗаданиюНаПодбор.Ссылка ССЫЛКА Документ.ЗакрытиеВнутреннихЗаказов
		               |	И СП_ДокументыПоЗаданиюНаПодбор.Ссылка.Проведен";			   
	КонецЕсли;
	Запрос.УстановитьПараметр("Задание", Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда	
		
		Если Результат.Ссылка.Дата > ДатаФормированияДокументов Тогда		
			Возврат;
		КонецЕсли; 
				
	КонецЕсли; 
	
	Движения.ВнутренниеЗаказы.Записывать = Истина;
	Движения.ЗаказыПокупателей.Записывать = Истина;
	Движения.РазмещениеЗаказовПокупателей.Записывать = Истина;
	Движения.РасчетыСКонтрагентами.Записывать = Истина;
	Движения.ТоварыВРезервеНаСкладах.Записывать = Истина;
	Движения.СвободныеОстатки.Записывать = Истина;
	
	Движения.ВнутренниеЗаказы.Очистить();
	Движения.ЗаказыПокупателей.Очистить();
	Движения.РазмещениеЗаказовПокупателей.Очистить();
	Движения.РасчетыСКонтрагентами.Очистить();
	Движения.ТоварыВРезервеНаСкладах.Очистить();
	Движения.СвободныеОстатки.Очистить();
	
	Если ПРГ_УдалятьДвижения Тогда
		Движения.ВнутренниеЗаказы.Записать();
		Движения.ЗаказыПокупателей.Записать();
		Движения.РазмещениеЗаказовПокупателей.Записать();
		Движения.РасчетыСКонтрагентами.Записать();
		Движения.СвободныеОстатки.Записать();
		Движения.ТоварыВРезервеНаСкладах.Записать();
	КонецЕсли;	
	
	СписокЗаказов = Новый Массив;
	СписокЗаказов.Добавить(ЗаданиеНаПодбор.Заказ);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "ДокументСсылка",  ЗаданиеНаПодбор);
	Запрос.УстановитьПараметр( "МоментДокумента", ЗаданиеНаПодбор.ДатаФормированияДокументов);
	Запрос.УстановитьПараметр( "СписокЗаказов",   СписокЗаказов);
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЗаданиеНаПодбор.Заказ);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	Если ТипЗнч(ЗаданиеНаПодбор.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ВнутренниеЗаказыОстатки.Заказчик,
		|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ КАК ВнутреннийЗаказ,
		|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ.Организация КАК Организация,
		|	ВнутренниеЗаказыОстатки.Номенклатура,
		|	ВнутренниеЗаказыОстатки.ХарактеристикаНоменклатуры,
		|	ВнутренниеЗаказыОстатки.СтатусПартии,
		|	ВнутренниеЗаказыОстатки.КоличествоОстаток КАК Количество,
		|	ВнутренниеЗаказыОстатки.ЕдиницаИзмерения
		|ИЗ
		|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&МоментДокумента, ВнутреннийЗаказ В (&СписокЗаказов)) КАК ВнутренниеЗаказыОстатки
		|Упорядочить по
		|	Заказчик,
		|	ВнутреннийЗаказ,
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	СтатусПартии,
		|	ЕдиницаИзмерения
		|";		
		
		ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();	
		
		// Подготовим таблицу товаров для проведения.
		ТаблицаПоЗаказамПокупателей = Запрос.Выполнить().Выгрузить();	
		
	ИначеЕсли ТипЗнч(ЗаданиеНаПодбор.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда		
		
		//{27.09.2015 Островерхий заявка №44364 
		//ТаблицаПоЗаказамПокупателей = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияЗаказовПокупателей(ЗаданиеНаПодбор, ЗаданиеНаПодбор.ДатаФормированияДокументов, СписокЗаказов);	
		ТаблицаПоЗаказамПокупателей = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияЗаказовПокупателейИзЗаданияНаПодбор(ЗаданиеНаПодбор, ЗаданиеНаПодбор.ДатаФормированияДокументов, СписокЗаказов);	
		//27.09.2015 Островерхий} 
		
		//{11.12.2015 Островерхий заявка №б/н, избавление от блокировок субд 
		//ТаблицаПоРасчетам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРасчетов(ЗаданиеНаПодбор.ДатаФормированияДокументов, СписокЗаказов, -1);
		ТаблицаПоРасчетам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРасчетов('00010101', СписокЗаказов, -1);
		//11.12.2015 Островерхий} 
		
		// Подготовим таблицу тары для проведения.
		ТаблицаПоЗаказамПоставщикам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияЗаказовПоставщикам(ЗаданиеНаПодбор, ЗаданиеНаПодбор.ДатаФормированияДокументов,СписокЗаказов);
				
	КонецЕсли; 
	
	ТаблицаПоРазмещению = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРазмещения(ЗаданиеНаПодбор, ЗаданиеНаПодбор.ДатаФормированияДокументов, СписокЗаказов, истина, истина);
	
	//ТаблицаПоРезервам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРезервов(ЗаданиеНаПодбор, ЗаданиеНаПодбор.ДатаФормированияДокументов, СписокЗаказов, "-");	
	
    //{27.03.2015 Островерхий заявка №б/н 
	//ТаблицаПоРезервам = УправлениеЗаказами.ПодготовитьТаблицуДляЗакрытияРезервов(ЗаданиеНаПодбор, ЗаданиеНаПодбор.ДатаФормированияДокументов, СписокЗаказов); // Шевченков, выше строку закомментировал 
	ТаблицаПоРезервам = ПодготовитьТаблицуДляЗакрытияРезервов(ЗаданиеНаПодбор, ЗаданиеНаПодбор.ДатаФормированияДокументов, СписокЗаказов);
	//27.03.2015 Островерхий} 
	
	Если ТипЗнч(ЗаданиеНаПодбор.Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
	     ДвиженияПоРегистрамУпр_ВнутреннийЗаказ(СтруктураШапкиДокумента, ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, 
								 ТаблицаПоРезервам, Отказ, Заголовок);
	Иначе	
	     ДвиженияПоРегистрамУпр_ЗаказПокупателя(СтруктураШапкиДокумента, 
							ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, ТаблицаПоЗаказамПоставщикам,
							ТаблицаПоРезервам, ТаблицаПоРасчетам, Отказ, Заголовок);
	КонецЕсли; 
	
КонецПроцедуры

//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
Процедура ПРГВернутьРезервы() Экспорт 
	
	Если ЭтоНовый() тогда
		возврат;
	КонецЕсли;	
	
	ДатаФормированияДокументов = '00010101';
	
	Движения.ВнутренниеЗаказы.Записывать = Истина;
	Движения.ЗаказыПокупателей.Записывать = Истина;
	Движения.РазмещениеЗаказовПокупателей.Записывать = Истина;
	Движения.РасчетыСКонтрагентами.Записывать = Истина;
	Движения.ТоварыВРезервеНаСкладах.Записывать = Истина;
	Движения.СвободныеОстатки.Записывать = Истина;
	
	Движения.ВнутренниеЗаказы.Очистить();
	Движения.ЗаказыПокупателей.Очистить();
	Движения.РазмещениеЗаказовПокупателей.Очистить();
	Движения.РасчетыСКонтрагентами.Очистить();
	Движения.ТоварыВРезервеНаСкладах.Очистить();
	Движения.СвободныеОстатки.Очистить();
	
	
	Движения.ВнутренниеЗаказы.Записать();
	Движения.ЗаказыПокупателей.Записать();
	Движения.РазмещениеЗаказовПокупателей.Записать();
	Движения.РасчетыСКонтрагентами.Записать();
	Движения.ТоварыВРезервеНаСкладах.Записать();
	Движения.СвободныеОстатки.Записать();
	
КонецПроцедуры	
//конец изменений 

Функция ПодготовитьТаблицуДляЗакрытияРезервов(ДокСсылка, МоментВремени, СписокЗаказов, Знак="") Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр( "ДокументСсылка",  ДокСсылка);
	//Запрос.УстановитьПараметр( "МоментДокумента", МоментВремени);
	Запрос.УстановитьПараметр( "СписокЗаказов",   СписокЗаказов);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|    Склад,
	|    ДокументРезерва,
	|    Номенклатура,
	|    ХарактеристикаНоменклатуры,
	|	 СерияНоменклатуры,
	|    " + Знак + "КоличествоОстаток          КАК Количество
	|ИЗ
	|    РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва В (&СписокЗаказов))
	|Упорядочить по
	|    Склад,
	|    ДокументРезерва,
	|    Номенклатура,
	|    ХарактеристикаНоменклатуры,
	|	СерияНоменклатуры
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ДвиженияПоРегистрамУпр_ЗаказПокупателя(ВыборкаПоШапкеДокумента, ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, 
								ТаблицаПоЗаказамПоставщикам, ТаблицаПоРезервам, ТаблицаПоРасчетам, Отказ, Заголовок)
								
	Если Истина Тогда
	
		Если ТаблицаПоЗаказамПокупателей.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ЗаказыПокупателей;
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоЗаказамПокупателей);
					
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, ДатаФормированияДокументов);
			
		КонецЕсли;

		//Движения по причинам закрытия
		//ТаблицаПричинЗакрытия = УправлениеЗаказами.ПодготовитьТаблицуПричинЗакрытияЗаказов(Заголовок, Ссылка, "ЗаказПокупателя","ЗакрытиеЗаказовПокупателей",ТаблицаПоЗаказамПокупателей);
		//Если ТаблицаПричинЗакрытия.Количество() > 0 Тогда
		//	НаборДвижений   = Движения.ПричиныЗакрытияЗаказов;
		//	
		//	СтруктТаблицДокумента = Новый Структура;
		//	СтруктТаблицДокумента.Вставить("ТаблицаПоПричинамЗакрытия", ТаблицаПричинЗакрытия);
		//		
		//	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		//	
		//	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, ТаблицыДанныхДокумента, Дата);
		//КонецЕсли;
		
		Если ТаблицаПоРасчетам.Количество() > 0 Тогда
			
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоРасчетам", ТаблицаПоРасчетам);
						
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, ДатаФормированияДокументов);
			
		КонецЕсли;

	КонецЕсли;
	
	Если ТаблицаПоРазмещению.Количество() > 0 Тогда
		
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоРазмещению", ТаблицаПоРазмещению);
						
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, ДатаФормированияДокументов);
			
	КонецЕсли;
	
	Если ТаблицаПоЗаказамПоставщикам.Количество() > 0 Тогда
		
		НаборДвижений = Движения.ЗаказыПоставщикам;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоЗаказамПоставщикам);
						
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, ДатаФормированияДокументов);
			
	КонецЕсли;
								
	Если ТаблицаПоРезервам.Количество() > 0 Тогда
		
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоРезервам);
							
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		//m.ionov@a-prof.ru 21.10.2014
		//ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		//ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, ДатаФормированияДокументов);
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, ДатаФормированияДокументов);
		//----m.ionov@a-prof.ru---
			
	КонецЕсли;

КонецПроцедуры

Процедура ДвиженияПоРегистрамУпр_ВнутреннийЗаказ(ВыборкаПоШапкеДокумента, ТаблицаПоЗаказамПокупателей, ТаблицаПоРазмещению, 
								 ТаблицаПоРезервам, Отказ, Заголовок)
								
	Если Истина Тогда
	
		Если ТаблицаПоЗаказамПокупателей.Количество() > 0 Тогда
			
			//Движения по внутренним заказам
			НаборДвижений   = Движения.ВнутренниеЗаказы;
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоЗаказамПокупателей);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, ДатаФормированияДокументов);
		КонецЕсли;

		//Движения по причинам закрытия
		//ТаблицаПричинЗакрытия = УправлениеЗаказами.ПодготовитьТаблицуПричинЗакрытияЗаказов(Заголовок, Ссылка, "ВнутреннийЗаказ","ЗакрытиеВнутреннихЗаказов");
		//Если ТаблицаПричинЗакрытия.Количество() > 0 Тогда
		//	НаборДвижений   = Движения.ПричиныЗакрытияЗаказов;
		//	
		//	СтруктТаблицДокумента = Новый Структура;
		//	СтруктТаблицДокумента.Вставить("ТаблицаПоПричинамЗакрытия", ТаблицаПричинЗакрытия);
		//		
		//	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		//	
		//	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, ТаблицыДанныхДокумента, Дата);
		//КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаПоРазмещению.Количество() > 0 Тогда
		
		НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоРазмещению);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, ДатаФормированияДокументов);
			
	КонецЕсли;
	
	Если ТаблицаПоРезервам.Количество() > 0 Тогда
		
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоРезервам);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		//m.ionov@a-prof.ru 21.10.2014
		//ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		//ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, ДатаФормированияДокументов);
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, ДатаФормированияДокументов);
		//----m.ionov@a-prof.ru---
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрам()

#Если Клиент Тогда
Процедура СформироватьДокументыПоЗаданиюНаПодбор(ЭтаФорма, ОткрытьМодально = Ложь) Экспорт

	//Установим фильтры
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ПТЛ_ПланДоставки.Маршрут КАК Маршрут,
	               |	ПТЛ_ПланДоставки.ДатаОтгрузки
	               |ИЗ
	               |	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
	               |ГДЕ
	               |	ПТЛ_ПланДоставки.ЗаданиеНаПодбор = &ЗаданиеНаПодбор
	               |	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПТЛ_ПланДоставки.Период УБЫВ";
	Запрос.УстановитьПараметр("ЗаданиеНаПодбор", Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	мОткрытьОбработку = Ложь;
	
	Если Результат.Следующий() Тогда
		
		мМаршрут = Результат.Маршрут;		
		мДатаОтгрузки = Результат.ДатаОтгрузки;
		
		мОткрытьОбработку = Истина;
	Иначе
		
		СписокЗначения = Новый СписокЗначений;
		СписокЗначения.Добавить(Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСотруднику);
		СписокЗначения.Добавить(Перечисления.КП_ВидыЗаказовПокупателей.ПредставительскиеРасходы);
		СписокЗначения.Добавить(Перечисления.КП_ВидыЗаказовПокупателей.АнализыЛаборатории);
		СписокЗначения.Добавить(Перечисления.КП_ВидыЗаказовПокупателей.СменаПокупателя);
		СписокЗначения.Добавить(Перечисления.КП_ВидыЗаказовПокупателей.ТранзитнаяОтгрузка);
		
		ЗаданиеНаПеревозку = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПеревозкуПоЗаказу(Заказ);
		
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
			Если НЕ СписокЗначения.НайтиПоЗначению(Заказ.КП_ВидЗаказаПокупателя) = Неопределено
				ИЛИ (Заказ.КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз И Не ЗначениеЗаполнено(ЗаданиеНаПеревозку)) Тогда
				мМаршрут = Справочники.ПТЛ_Маршруты.ПустаяСсылка();		
				мДатаОтгрузки = Заказ.ДатаОтгрузки;
				мОткрытьОбработку = Истина;
			Иначе	
				ОбщегоНазначения.СообщитьОбОшибке("По заданию на подбор не обнаружены связанные маршруты!!");
				Возврат;
			КонецЕсли;
		Иначе	
			Если Заказ.КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз И Не ЗначениеЗаполнено(ЗаданиеНаПеревозку) Тогда
				мМаршрут = Справочники.ПТЛ_Маршруты.ПустаяСсылка();		
				мДатаОтгрузки = Заказ.ДатаОтгрузки;
				мОткрытьОбработку = Истина;
			Иначе
		    	ОбщегоНазначения.СообщитьОбОшибке("По заданию на подбор не обнаружены связанные маршруты!!");
				Возврат;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;

	Если мОткрытьОбработку = Ложь Тогда	
		Возврат;	
	КонецЕсли; 
	
	ТекОбработка = Обработки.АП_ПечатьСопроводительныхДокументов.Создать();
	ТекОбработка.ДатаФормированияДокументов = ТекущаяДата();
	ТекОбработка.Отделение = КП_Отделение;
	ТекОбработка.мОткрытаИзДокумента = Истина;
	ТекОбработка.мЗаданиеНаПодбор = Ссылка;
	ТекОбработка.Дата = мДатаОтгрузки;
	
	мФормаОбработки = ТекОбработка.ПолучитьФорму("Форма", ЭтаФорма);
	
	ТекОбработка.ИнициализируемПостроительОтчета();
	
	текОтбор = ТекОбработка.ПостроительОтчета.Отбор.Найти("Маршрут");
	
	Если НЕ текОтбор = Неопределено Тогда
		
		текОтбор.ВидСравнения = ВидСравнения.Равно;
		текОтбор.Значение = мМаршрут;
		текОтбор.Использование = Истина;
		
	КонецЕсли;
	
	мФормаОбработки.мФильтрыПоМаршрутам = мМаршрут; 
	
	Если ОткрытьМодально Тогда
		мФормаОбработки.ОткрытьМодально();
	Иначе	
		мФормаОбработки.Открыть();
	КонецЕсли; 
	
КонецПроцедуры
#КонецЕсли 
//начало изменений Ожиганов 29.01.2016 48463 ограничение по требованию ГБ, если есть накладная то задание на подбор недоступно для изменения 
Функция ЕстьНакладняПОзаданиюНаПодбор() Экспорт 
	Если ЭтоНовый() Тогда
		возврат Ложь;
	КонецЕсли;	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТребованиеНакладная.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.ТребованиеНакладная КАК ТребованиеНакладная
	                      |ГДЕ
	                      |	ТребованиеНакладная.Проведен
	                      |	И ТребованиеНакладная.СП_ЗаданиеНаПодбор = &СП_ЗаданиеНаПодбор
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	РеализацияТоваровУслуг.Ссылка
	                      |ИЗ
	                      |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                      |ГДЕ
	                      |	РеализацияТоваровУслуг.Проведен
	                      |	И РеализацияТоваровУслуг.СП_ЗаданиеНаПодбор = &СП_ЗаданиеНаПодбор
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ПеремещениеТоваров.Ссылка
	                      |ИЗ
	                      |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	                      |ГДЕ
	                      |	ПеремещениеТоваров.Проведен
	                      |	И ПеремещениеТоваров.СП_ЗаданиеНаПодбор = &СП_ЗаданиеНаПодбор");
						  
	Запрос.УстановитьПараметр("СП_ЗаданиеНаПодбор",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();					  
	Если Выборка.Следующий() Тогда
		возврат Истина;
	КонецЕсли;	
	возврат Ложь;
КонецФункции	
//конец изменений 

/// Кунов О.В., 17.11.2016 - 57956
#Если Клиент Тогда
Процедура ПроверитьОстатки() Экспорт
	
	ЗапросОстатки = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура,
	|	ТоварыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			&ДатаОстатков,
	|			Номенклатура В (&Номенклатура)
	|				И Склад = &Склад) КАК ТоварыНаСкладахОстатки");
	
	ЗапросОстатки.УстановитьПараметр("ДатаОстатков", ТекущаяДата());
	ЗапросОстатки.УстановитьПараметр("Склад", Склад);
	ЗапросОстатки.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
	
	Остатки = ЗапросОстатки.Выполнить().Выгрузить();
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТоваров Из Товары Цикл
		СтрокаОстатков = Остатки.Найти(СтрокаТоваров.Номенклатура, "Номенклатура");
		Если СтрокаОстатков = Неопределено Тогда
			Сообщить("Не найдено остатков по номенклатуре: " + СтрокаТоваров.Номенклатура.Наименование);
			ЕстьОшибки = Истина;
		ИначеЕсли СтрокаОстатков.КоличествоОстаток < СтрокаТоваров.КоличествоФакт Тогда
			Сообщить("Не хватает остатка по номенклатуре: " + СтрокаТоваров.Номенклатура.Наименование +
				" (на складе " + СтрокаОстатков.КоличествоОстаток + ", требуется " + СтрокаТоваров.КоличествоФакт + ")"
			);
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьОшибки Тогда
		
		Предупреждение("Остатков хватает!");
		
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли
///

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");