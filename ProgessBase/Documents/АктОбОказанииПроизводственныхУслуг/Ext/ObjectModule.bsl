Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мСтруктураШапкиДокумента;         // (Общ) Результат запроса по шапке документа

Перем мУчетнаяПолитика Экспорт;                 // (Общ)
Перем мУчетнаяПолитикаРегл Экспорт;               // (Регл)
Перем мУчетЗатратПоЗаказамНаПроизводство;

Перем мВалютаУправленческогоУчета Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;

Перем ИзмененоИспользоватьЗаказы Экспорт;
Перем мИспользоватьЗаказыНаПроизводство Экспорт;
Перем мИспользоватьТолькоСборочныеСпецификации Экспорт;
Перем мИспользоватьПотребностиЗаказовНаПроизводство;
Перем мСпособЗакрытияПотребностейЗаказовНаПроизводство;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мПараметрыСвязиСтрокТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(ИмяМакета)
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Акт.Номер,
	|	Акт.Дата,
	|	Акт.ДоговорКонтрагента,
	|	Акт.Контрагент КАК Получатель,
	|	Акт.Организация КАК Поставщик,
	|	Акт.Организация,
	|	Акт.СуммаДокумента,
	|	Акт.ВалютаДокумента,
	|	Акт.УчитыватьНДС,
	|	Акт.СуммаВключаетНДС,
	|	Акт.КратностьВзаиморасчетов,
	|	Акт.КурсВзаиморасчетов
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК Акт
	|ГДЕ
	|	Акт.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, Дата);
	Если НЕ ЗначениеЗаполнено(Руководители.РуководительДолжность) Тогда 
		ДолжностьИНазваниеОрганизации = Организация.НаименованиеПолное;
	Иначе 
		ДолжностьИНазваниеОрганизации = Руководители.РуководительДолжность + " " + Организация.НаименованиеПолное;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Исполнитель) И Исполнитель <> Руководители.Руководитель Тогда 
		ЗаместительПоПриказу = "("+ОбщегоНазначения.ФамилияИнициалыФизЛица(Исполнитель) + " " + ИсполнительПоПриказу+")";
	Иначе 
		ЗаместительПоПриказу = Руководители.Руководитель;
	КонецЕсли;

	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", Ссылка);
	
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("АктОбОказанииПроизводственныхУслуг");
	
	ЗапросУслуги.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	СУММА(Количество) КАК Количество,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена * &Курс / &Кратность КАК Цена,
	|	СУММА(Сумма * &Курс / &Кратность) КАК Сумма,
	|	СтавкаНДС,
	|	СУММА(СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	МИНИМУМ(НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК АктОбОказанииПроизводственныхУслуг
	|
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Количество,
	|	ЕдиницаИзмерения,
	|	Цена * &Курс / &Кратность,
	|	СтавкаНДС,
	|	ПроцентСкидкиНаценки
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки";
	
	// Вычислим курс документа для печати
	Если ИмяМакета = "АктРуб" И Шапка.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
	 
		ЗапросКурсАванса = Новый Запрос;
		ЗапросКурсАванса.УстановитьПараметр("ТекущийДокумент", Ссылка);
		ЗапросКурсАванса.Текст =
		"ВЫБРАТЬ
		|	Док.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	Док.СуммаРегл КАК СуммаРегл
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг.ДокументыРасчетовСКонтрагентом КАК Док
		|ГДЕ
		|	Док.Ссылка = &ТекущийДокумент
		|ИТОГИ
		|	СУММА(СуммаВзаиморасчетов),
		|	СУММА(СуммаРегл)
		|ПО
		|	ОБЩИЕ";
		
		Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			КурсОплаты                 = ?(Выборка.СуммаВзаиморасчетов = 0, 0, Выборка.СуммаРегл / Выборка.СуммаВзаиморасчетов);
			ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			ВыборкаСуммаРегл           = Выборка.СуммаРегл;
		Иначе
			КурсОплаты                 = 0;
			ВыборкаСуммаВзаиморасчетов = 0;
			ВыборкаСуммаРегл           = 0;
		КонецЕсли;
		
		СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(Ссылка),
			Шапка.ВалютаДокумента, Шапка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			ЗаполнениеДокументов.КурсДокумента(Ссылка, мВалютаРегламентированногоУчета), Шапка.КурсВзаиморасчетов,
			ЗаполнениеДокументов.КратностьДокумента(Ссылка, мВалютаРегламентированногоУчета), Шапка.КратностьВзаиморасчетов);
		НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
		Если НеоплаченнаяСумма > 0 Тогда
			КурсДляПечати = (НеоплаченнаяСумма * Шапка.КурсВзаиморасчетов + ВыборкаСуммаРегл)/(НеоплаченнаяСумма + ВыборкаСуммаВзаиморасчетов);
		Иначе
			КурсДляПечати = КурсОплаты;
		КонецЕсли;
		
		Если КурсДляПечати = 0 Тогда
			ЗапросУслуги.УстановитьПараметр("Курс",      Ссылка.КурсВзаиморасчетов);
			ЗапросУслуги.УстановитьПараметр("Кратность", ?(Шапка.КратностьВзаиморасчетов=0, 1, Ссылка.КратностьВзаиморасчетов));
		Иначе
			ЗапросУслуги.УстановитьПараметр("Курс",      КурсДляПечати);
			ЗапросУслуги.УстановитьПараметр("Кратность", 1);
		КонецЕсли;
		
	Иначе
		
		// Пересчитывать цену и сумму не надо, т.к.
		// - либо документ оформлен и выводится в рублях
		// - либо документ выводится в той же валюте, в которой он оформлен
		ЗапросУслуги.УстановитьПараметр("Курс",      1);
		ЗапросУслуги.УстановитьПараметр("Кратность", 1);
		
	КонецЕсли;
	
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктОбОказанииПроизводственныхУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Акт");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
	ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
	ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Если количество строк с нулевой скидкой меньше общего количества строк, то в документе есть скидки
	ЕстьСкидки = (ТаблицаУслуги.НайтиСтроки(Новый Структура("Скидка", 0)).Количество() < ТаблицаУслуги.Количество());
	
	// Вывести табличную часть
	Если ЕстьСкидки  Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьМакета);
	НомерСтроки = 0;

	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл	
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		ОбластьСтроки.Параметры.Товар 		= СокрЛП(СтрокаТабличнойЧасти.Товар);
		
		Если ЕстьСкидки Тогда
			Скидка = Ценообразование.ПолучитьСуммуСкидки(СтрокаТабличнойЧасти.Сумма, СтрокаТабличнойЧасти.Скидка);
			ОбластьСтроки.Параметры.Скидка         = Скидка;
			ОбластьСтроки.Параметры.СуммаБезСкидки = ОбщегоНазначения.ФорматСумм(СтрокаТабличнойЧасти.Сумма + Скидка);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;
	
	Сумма    = ТаблицаУслуги.Итог("Сумма");
	СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если Шапка.УчитыватьНДС Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(СуммаНДС);
		ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	
	СуммаКПрописи 	= Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ВалютаДляПечати = ?(ИмяМакета = "АктРуб", мВалютаРегламентированногоУчета, Шапка.ВалютаДокумента);
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + НомерСтроки
											+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, ВалютаДляПечати);
	ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи,  ВалютаДляПечати);
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ДолжностьИНазваниеОрганизации 	= ДолжностьИНазваниеОрганизации;
	ОбластьМакета.Параметры.ЗаместительПоПриказу 			= ЗаместительПоПриказу;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;
	
КонецФункции // ПечатьАктаОбОказанииУслуг()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Акт" ИЛИ ИмяМакета = "АктРуб" Тогда
		
		ТабДокумент = ПечатьАктаОбОказанииУслуг(ИмяМакета);
		
	ИначеЕсли ИмяМакета = "СправкаРасчетВал" тогда

		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура;
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СтруктПечатныхФорм.Вставить( "Акт",    "Акт об оказании услуг");
	Иначе
		СтруктПечатныхФорм.Вставить( "Акт",    "Акт об оказании услуг (вал.)");
		СтруктПечатныхФорм.Вставить( "АктРуб", "Акт об оказании услуг (руб.)");
	КонецЕсли;
	СтруктПечатныхФорм.Вставить( "СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
	
	Возврат СтруктПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет табличную часть "Прочие затраты" остатками в НЗП.
//
Процедура ЗаполнитьПрочиеЗатратыПоОстаткам() Экспорт
	
	ПрочиеЗатраты.Очистить();
	
	ТаблицаПрочиеЗатраты = ПрочиеЗатраты.Выгрузить();
	
	ДопПараметры = Новый Структура;
	Параметры = Новый Массив;
	Параметры.Добавить(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	ДопПараметры.Вставить("ХарЗатрат", Параметры);
	
	УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамНЗП(ЭтотОбъект, ТаблицаПрочиеЗатраты, ДопПараметры);
	
	ПрочиеЗатраты.Загрузить(ТаблицаПрочиеЗатраты);
	
КонецПроцедуры // ЗаполнитьПрочиеЗатратыПоОстаткам()

// Процедура добавляет данные по продукции из заказа покупателя (переработка)
//
Процедура ДобавитьИзЗаказаПокупателя() Экспорт
	
	ФормаВыбора = Документы.ЗаказПокупателя.ПолучитьФормуВыбора(,, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	Заказ = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Заказ.Услуги Цикл
		
		НоваяСтрока = Услуги.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрока.Коэффициент      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.ВесовойКоэффициент   = 1;
		НоваяСтрока.НоменклатурнаяГруппа = НоваяСтрока.Номенклатура.НоменклатурнаяГруппа;
		НоваяСтрока.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(НоваяСтрока.Номенклатура, Неопределено, Дата, Подразделение);
        ЗаполнитьСтрокуУслугРегл(НоваяСтрока);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьИзЗаказаПокупателя()

// Процедура добавляет данные по материалам из требование-накладная
//
Процедура ДобавитьИзТребованиеНакладной() Экспорт
	
	ФормаВыбора = Документы.ТребованиеНакладная.ПолучитьФормуВыбора(,, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете И ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Подразделение;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Отбор = ФормаВыбора.Отбор.ПодразделениеОрганизации;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = ПодразделениеОрганизации;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокТН = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокТН) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ДокТН.Материалы Цикл
		
		НоваяСтрока = Материалы.Добавить();
		
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьИзТребованиеНакладной()

#КонецЕсли

// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если Материалы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		Материалы.Очистить();
	КонецЕсли;
	
	ТабличнаяЧастьМатериалы = Материалы.Выгрузить();
	ТабличнаяЧастьПродукция = Услуги.Выгрузить();
	
	СтруктураДопКолонок = Новый Структура("ЗаказВыпуска, Спецификация");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	
	Для каждого СтрокаТаблицы из ТабличнаяЧастьПродукция Цикл
		КоличествоВыпускБезНаработки = СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоДоделка;
		СтрокаТаблицы.Количество = ?(КоличествоВыпускБезНаработки > 0, КоличествоВыпускБезНаработки, 0);
	КонецЦикла;

	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата, , ПараметрыВыпускаПродукции);

	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, СтатьяЗатрат, ЗаказВыпуска, Спецификация", "Количество");
	
	Материалы.Загрузить(ТабличнаяЧастьМатериалы);
		
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

// Процедура заполняет регл. реквизиты при заполнении табличной части Продукция по спецификации
//
Процедура ЗаполнитьСтрокуУслугРегл(СтрокаУслуг)
	
	Если ОтражатьВБухгалтерскомУчете
	 ИЛИ ОтражатьВНалоговомУчете
	Тогда
		СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, Неопределено);
	КонецЕсли;
	
	СтрокаУслуг.СчетЗатрат   = ?( ОтражатьВБухгалтерскомУчете, СчетаУчетаЗатрат.СчетУчетаБУ, 0);
	СтрокаУслуг.СчетЗатратНУ = ?( ОтражатьВНалоговомУчете,     СчетаУчетаЗатрат.СчетУчетаНУ, 0);
	
КонецПроцедуры // ЗаполнитьСтрокуПоСпецификацииРегл()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткам() Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	ОстаткиУслуг = УправлениеЗаказами.ОстаткиУслугПоЗаказуПокупателя( Сделка, ДоговорКонтрагента, ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Для каждого Строка из ОстаткиУслуг цикл
		НоваяСтрока= Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.Количество   = Строка.КолОстаток;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрока.Коэффициент      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		Если Сделка.ВалютаДокумента <> ВалютаДокумента Тогда
			НоваяСтрока.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Цена, 
										Сделка.ВалютаДокумента, ВалютаДокумента,
										ЗаполнениеДокументов.КурсДокумента(Сделка, мВалютаРегламентированногоУчета), Курс,
										ЗаполнениеДокументов.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), Кратность);
		КонецЕсли;								
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.ВесовойКоэффициент   = 1;
		НоваяСтрока.НоменклатурнаяГруппа = НоваяСтрока.Номенклатура.НоменклатурнаяГруппа;
		НоваяСтрока.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(НоваяСтрока.Номенклатура, Неопределено, Дата, Подразделение);
		
		ЗаполнитьСтрокуУслугРегл(НоваяСтрока);
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьУслугиПоОстаткамУпр()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьУслуги() Экспорт
    Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Сделка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуУслуги.Содержание,
	|	СчетНаОплатуУслуги.Количество,
	|	СчетНаОплатуУслуги.Номенклатура,
	|	СчетНаОплатуУслуги.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СчетНаОплатуУслуги.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	СчетНаОплатуУслуги.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	СчетНаОплатуУслуги.Цена,
	|	СчетНаОплатуУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ  КАК КратностьДокумента,
	|	СчетНаОплатуУслуги.Сумма,
	|	СчетНаОплатуУслуги.СтавкаНДС,
	|	СчетНаОплатуУслуги.СуммаНДС,
	|	СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплатуУслуги.Ссылка.УчитыватьНДС КАК УчитыватьНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуУслуги
	|
	|ГДЕ
	|	СчетНаОплатуУслуги.Ссылка = &Счет
	|
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуУслуги.НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				Выборка.Сумма, 
				Выборка.ВалютаДокумента, 
				ВалютаДокумента,
				Выборка.КурсДокумента, 
				Курс,
				Выборка.КратностьДокумента, 
				Кратность
			),
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			УчитыватьНДС,
			СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС)
		);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(
			НоваяСтрока, 
			ЭтотОбъект, 
			ТекПользователь,,
			ЕстьРеквизитПроцентСкидкиНаценки,
			ПересчитыватьСкидку,
			ЕстьРеквизитПроцентАвтоматическихСкидок,
			"Услуги"
		);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.ВесовойКоэффициент = 1;
		НоваяСтрока.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(НоваяСтрока.Номенклатура, Неопределено, Дата, Подразделение);
		
		ЗаполнитьСтрокуУслугРегл(НоваяСтрока);
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЦикла;

КонецПроцедуры // СкопироватьУслуги()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
								|ПрочиеЗатраты.Сумма, РаспределениеПрочихЗатрат.Сумма";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
								//|СчетУчетаРасчетовСКонтрагентом, НадписьСчетУчетаРасчетовСКонтрагентом,
								//|СчетУчетаРасчетовПоАвансам, НадписьСчетУчетаРасчетовПоАвансам,
								|ПрочиеЗатраты.СуммаРегл, РаспределениеПрочихЗатрат.СуммаРегл,
								|Услуги.СчетЗатрат, РаспределениеМатериалов.СчетЗатрат, РаспределениеПрочихЗатрат.СчетЗатрат,
								|Услуги.СчетДоходовБУ, Услуги.СубконтоБУ, Услуги.СчетРасходовБУ";

	мСтрокаРеквизитыНалУчета = "Услуги.СчетЗатратНУ,
								|Услуги.СчетДоходовНУ, Услуги.СубконтоНУ, Услуги.СчетРасходовНУ,
								|РаспределениеМатериалов.СчетЗатратНУ, 
								|РаспределениеПрочихЗатрат.СчетЗатратНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Функция проверяет правильность заполнения реквизитов документа
// Также формирует запрос по шапке документа, результат которого
// сохраняется в переменной мСтруктураШапкиДокумента
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	РеквизитыШапки = "Организация, Контрагент, ДоговорКонтрагента,
		|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов";
		
	ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки,СтруктураШапкиДокумента);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"             , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"              , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	мСтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, Новый Структура(РеквизитыШапки), мВалютаРегламентированногоУчета);

	РеквизитыШапки = Новый Структура(РеквизитыШапки);
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если мСтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		РеквизитыШапки.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли мСтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		РеквизитыШапки.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по счетам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, РеквизитыШапки, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СписокСчетовКосвенныхРасходовНУ = НалоговыйУчет.ПолучитьСчетаУчетаКосвенныхРасходов();
	КонецЕсли;
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);

	// Проверим что указаны производственные подразделения в шапке документа
	УправлениеПроизводством.ПроверитьПроизводственныеПодразделения(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, мСтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	РеквизитыУсл = "Номенклатура, Количество";
	
	Если УчитыватьНДС Тогда
		РеквизитыУсл = РеквизитыУсл + ", СтавкаНДС";
	КонецЕсли;
	Если НЕ УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВОпте() Тогда
		РеквизитыУсл = РеквизитыУсл + ", Сумма";
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		РеквизитыУсл = РеквизитыУсл + ", СчетЗатрат";
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		РеквизитыУсл = РеквизитыУсл + ", СчетЗатратНУ";
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги",        Новый Структура(РеквизитыУсл), Отказ, Заголовок);
	Если ИспользоватьМатериалы Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы",     Новый Структура("Номенклатура, СтатьяЗатрат, Количество"), Отказ, Заголовок);
	КонецЕсли;
	Если ИспользоватьПрочиеЗатраты Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПрочиеЗатраты", Новый Структура("СтатьяЗатрат"), Отказ, Заголовок);
	КонецЕсли;
	
	Если ИспользоватьМатериалы Тогда
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов,   "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов,   "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	Если ИспользоватьПрочиеЗатраты Тогда
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// Получим необходимые данные для проверки заполнения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить( "Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить( "Услуга",       "Номенклатура.Услуга");
	СтруктураПолей.Вставить( "Набор",        "Номенклатура.Набор");

	ТабУслуги = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей).Выгрузить();
	УправлениеЗапасами.ПроверитьЧтоНетТоваров( ЭтотОбъект, "Услуги", ТабУслуги, Отказ, Заголовок);
	УправлениеПроизводством.ПроверитьКоличествоДоделка( ЭтотОбъект, "Услуги", Услуги, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		УправлениеПроизводством.ПроверитьЧтоНетСчетовКосвенныхРасходовНУ(Услуги, "Услуги", СписокСчетовКосвенныхРасходовНУ, Отказ, Заголовок);
	КонецЕсли;

	Если ИспользоватьМатериалы Тогда
		ТабМат  = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", ТабМат, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка корректности указания ед. изм.
	Если ИспользоватьМатериалы И РаспределятьПропорциональноКоличеству И Услуги.Количество() > 1 Тогда

		ЕдИзм = Услуги[0].Номенклатура.БазоваяЕдиницаИзмерения;
		Для К = 2 По Услуги.Количество() Цикл
			Если Не ЕдИзм = Услуги[К - 1].Номенклатура.БазоваяЕдиницаИзмерения Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Нельзя выбирать услуги измеряемые в разных единицах измерения в случае использования распределения пропорционально количеству.", Отказ, Заголовок);
				Прервать;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ МАТЕРИАЛОВ
	Если ИспользоватьМатериалы И Не АвтораспределениеМатериалов Тогда
		
		РеквизитыТабРаспМат = "Номенклатура, Количество, Продукция, СчетЗатрат, СчетЗатратНУ, СтатьяЗатрат";
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Материальные",     Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеМатериалов, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
		
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспМат, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "РаспределениеМатериалов");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеМатериалов", Новый Структура(РеквизитыТабРаспМат), Отказ, Заголовок);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			УправлениеПроизводством.ПроверитьЧтоНетСчетовКосвенныхРасходовНУ(РаспределениеМатериалов, "Распределение материалов", СписокСчетовКосвенныхРасходовНУ, Отказ, Заголовок);
		КонецЕсли;
		УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "РаспределениеМатериалов", , Отказ, Заголовок);
		
	КонецЕсли;
	
	// Табличная часть РАСПРЕДЕЛЕНИЕ ПРОЧИХ ЗАТРАТ
	Если ИспользоватьПрочиеЗатраты И Не АвтораспределениеПрочихЗатрат Тогда
		
		РеквизитыТабРаспЗатр = "Номенклатура, СтатьяЗатрат, СчетЗатрат";
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			РеквизитыТабРаспЗатр = РеквизитыТабРаспЗатр + ", СчетЗатратНУ";
		КонецЕсли;
		
		УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТабРаспЗатр, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "РаспределениеПрочихЗатрат");
		ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РаспределениеПрочихЗатрат", Новый Структура(РеквизитыТабРаспЗатр), Отказ, Заголовок);
		
		УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Нематериальные",   Отказ, Заголовок);
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			УправлениеПроизводством.ПроверитьСтатьиЗатрат( РаспределениеПрочихЗатрат, "СтатьяЗатрат", "Производственные", Отказ, Заголовок);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			УправлениеПроизводством.ПроверитьЧтоНетСчетовКосвенныхРасходовНУ(РаспределениеПрочихЗатрат, "Распределение прочих затрат", СписокСчетовКосвенныхРасходовНУ, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
	          + "Подразделение";
КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты,СтруктураШапкиДокумента)
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") 
		          + "ПодразделениеОрганизации,
					|СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам";
	КонецЕсли;
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура заполняет таб.часть "РаспределениеМатериалов"
//
Процедура ЗаполнитьРаспределениеМатериалов(Спрашивать = Истина) Экспорт
	
	Если Материалы.Количество() = 0 Тогда
		Если РаспределениеМатериалов.Количество() > 0 Тогда
			РаспределениеМатериалов.Очистить();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Спрашивать И РаспределениеМатериалов.Количество() > 0 Тогда
		Если Не АвтораспределениеМатериалов Тогда
			#Если Клиент Тогда
			Ответ = Вопрос("Табличная часть ""Распределение материалов"" уже содержит строки."
						  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
						   РежимДиалогаВопрос.ДаНет);
			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	РаспределениеМатериалов.Очистить();
	
	Если РаспределятьПропорциональноКоличеству Тогда
		Если Услуги.Итог("Количество") = 0 Тогда
			ОбщегоНазначения.Сообщение("В табличной части ""Услуги"" не указано количество!
				|Распределение материалов не выполнено.", СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураДопКолонок = Новый Структура("ЗаказВыпуска, НоменклатурнаяГруппа, Спецификация, 
										|СчетЗатрат, СчетЗатратНУ, ВесовойКоэффициент");
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	УправлениеПроизводством.ЗаполнитьРаспределениеМатериаловНаПродукцию(СтруктураШапкиДокумента, Материалы, Услуги, РаспределениеМатериалов, СтруктураДопКолонок, Отбор, ПараметрыВыпускаПродукции);
	
КонецПроцедуры // ЗаполнитьРаспределениеМатериалов()

// Процедура заполняет таб.часть "РаспределениеПрочихЗатрат"
//
Процедура ЗаполнитьРаспределениеПрочихЗатрат(Отказ = Ложь) Экспорт
	
	РаспределениеПрочихЗатрат.Очистить();
	
	Если РаспределятьПропорциональноКоличеству Тогда
		Если Услуги.Итог("Количество") = 0 Тогда
			ОбщегоНазначения.Сообщение("В табличной части ""Услуги"" не указано количество!
				|Распределение прочих затрат не выполнено.", СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	УправлениеПроизводством.ЗаполнитьРаспределениеПрочихЗатратНаПродукцию(СтруктураШапкиДокумента, ПрочиеЗатраты, Услуги, РаспределениеПрочихЗатрат);
	
КонецПроцедуры // ЗаполнитьРаспределениеПрочихЗатрат()

// Процедура выполняет заполение ТЧ "Документы расчетов с контрагентом"
//
Процедура ЗаполнитьДокументыРасчетовСКонтрагентом()Экспорт

	Курс = ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	ОтражатьВРеглУчете = Организация.ОтражатьВРегламентированномУчете;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

	СтруктураШапкиДокумента = Новый Структура;
	СтруктураШапкиДокумента.Вставить("ВедениеВзаиморасчетов", ДоговорКонтрагента.ВалютаВзаиморасчетов);

	Запрос.УстановитьПараметр("Сделка", УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента));

	РасчетыВУЕ = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	ЗаполнитьРегл = ОтражатьВРеглУчете И РасчетыВУЕ;

	Запрос. Текст = "
	|ВЫБРАТЬ 
	|	ВзаиморасчетыУпрОстатки.ДокументРасчетовСКонтрагентом                         КАК ДокументРасчетовСКонтрагентом,
	|	- ВзаиморасчетыУпрОстатки.СуммаВзаиморасчетовОстаток  КАК СуммаВзаиморасчетовУпр"  +
	?(ЗаполнитьРегл, ",
	|	ВзаиморасчетыРеглОстатки.ДатаОплаты                   КАК ДатаОплаты,
	|	ВзаиморасчетыРеглОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовРегл,
	|	ВзаиморасчетыРеглОстатки.СуммаРегОстаток            КАК СуммаРегл", "") + "
	|ИЗ 
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента 
	|                                                 И Сделка             = &Сделка) КАК ВзаиморасчетыУпрОстатки" + 
	?(ЗаполнитьРегл, ",
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента 
	|                                                 И Сделка             = &Сделка
	|) КАК ВзаиморасчетыРеглОстатки
	|ПО ВзаиморасчетыУпрОстатки.ДокументРасчетовСКонтрагентом = ВзаиморасчетыРеглОстатки.Документ", "") + "
	|ГДЕ ВзаиморасчетыУпрОстатки.СуммаВзаиморасчетовОстаток < 0";

	Выборка = Запрос.Выполнить().Выбрать();
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	ОстСуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
													ДоговорКонтрагента.ВалютаВзаиморасчетов,
													Курс, КурсВзаиморасчетов,
													Кратность, КратностьВзаиморасчетов);

	Пока Выборка.Следующий() Цикл

		Если ОстСуммаВзаиморасчетов <= 0 Тогда
			Прервать;
		КонецЕсли;

		НоваяСтрока = ДокументыРасчетовСКонтрагентом.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Выборка.ДокументРасчетовСКонтрагентом;
		НоваяСтрока.СуммаВзаиморасчетов           = Мин(ОстСуммаВзаиморасчетов, Выборка.СуммаВзаиморасчетовУпр);
		ОстСуммаВзаиморасчетов = ОстСуммаВзаиморасчетов - НоваяСтрока.СуммаВзаиморасчетов;

		Если ЗаполнитьРегл Тогда
			НоваяСтрока.ДатаОплаты = Выборка.ДатаОплаты;
			Если НоваяСтрока.СуммаВзаиморасчетов < Выборка.СуммаВзаиморасчетовУпр Тогда
				КурсВзаиморасчетовДок = Выборка.СуммаРегл / Выборка.СуммаВзаиморасчетовРегл;
				НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаВзаиморасчетов * КурсВзаиморасчетовДок;
			Иначе
				НоваяСтрока.СуммаРегл = ?(Выборка.СуммаРегл = NULL, 0, Выборка.СуммаРегл);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДокументыРасчетовСКонтрагентом()

// Процедура заполняет счета доходов и расходов в строке табличной части.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТабличнойЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ,,,Истина);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткамЗаказНаПроизводство(ТабличнаяЧасть, ЗаказНаПроизводство = Неопределено) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
	Запрос.УстановитьПараметр("Ссылка",    Ссылка);
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);
	Запрос.УстановитьПараметр("ВидВоспроизводства", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
	Запрос.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ТекстЗапросаПоНоменклатуре = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура 
	|   ИЗ  Документ.ЗаказНаПроизводство.Продукция
	|   ГДЕ Документ.ЗаказНаПроизводство.Продукция.Ссылка = &ЗаказНаПроизводство";

	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Номенклатура.СтавкаНДС     		КАК СтавкаНДС,
	|	ЗаказыОстатки.Номенклатура.Услуга КАК Услуга,
	|	ЗаказыОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентХраненияОстатков,
	|	ЗаказыОстатки.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ЗаказыОстатки.ЕдиницаИзмерения,
	|	ЗаказыОстатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	ЗаказыОстатки.ХарактеристикаНоменклатуры,
	|	ЗаказыОстатки.ЗаказНаПроизводство КАК ЗаказВыпуска,
	|	NULL                                     КАК Заказ,
	|	ЗаказыОстатки.Спецификация,
	|	ВЫБОР КОГДА СпецификацииНоменклатуры.ДоляСтоимости ЕСТЬ NULL ТОГДА
	|		1
	|	ИНАЧЕ
	|		СпецификацииНоменклатуры.ДоляСтоимости
	|	КОНЕЦ КАК ДоляСтоимости,
	|	ЗаказыОстатки.КоличествоОстаток КАК Заказано,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК ЗаказаноПоставщику,
	|	ТоварыВРезервеНаСкладах.КоличествоОстаток КАК Зарезервировано
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводство.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ЗаказНаПроизводство = &ЗаказНаПроизводство
	|						И ВидВоспроизводства = &ВидВоспроизводства
	|						И Номенклатура.Услуга
	|                       ) КАК ЗаказыОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ЗаказПокупателя = &ЗаказНаПроизводство
	|                       И ЗаказПоставщику <> &Ссылка
	|                       И ТоварТара = &ТоварТара) КАК ЗаказыПоставщикамОстатки
	|	ПО 
	|		ЗаказыОстатки.Номенклатура 					= ЗаказыПоставщикамОстатки.Номенклатура
	|		И ЗаказыОстатки.ХарактеристикаНоменклатуры 	= ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, Номенклатура В (" + ТекстЗапросаПоНоменклатуре  + ")
	|						И ДокументРезерва = &ЗаказНаПроизводство) КАК ТоварыВРезервеНаСкладах
	|	ПО 
	|		ЗаказыОстатки.Номенклатура 					= ТоварыВРезервеНаСкладах.Номенклатура
	|		И ЗаказыОстатки.ХарактеристикаНоменклатуры 	= ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			СпецификацииНоменклатуры.Ссылка 					КАК Спецификация,
	|			СпецификацииНоменклатуры.Номенклатура 				КАК Номенклатура,
	|			СпецификацииНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			СпецификацииНоменклатуры.ДоляСтоимости 				КАК ДоляСтоимости
	|		ИЗ
	|			Справочник.СпецификацииНоменклатуры.ВыходныеИзделия КАК СпецификацииНоменклатуры
	|		) КАК СпецификацииНоменклатуры
	|	ПО 
	|		ЗаказыОстатки.Номенклатура 					= СпецификацииНоменклатуры.Номенклатура
	|		И ЗаказыОстатки.ХарактеристикаНоменклатуры 	= СпецификацииНоменклатуры.ХарактеристикаНоменклатуры
	|		И ЗаказыОстатки.Спецификация 				= СпецификацииНоменклатуры.Спецификация
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Количество = ?(Выборка.Заказано           = NULL, 0, Выборка.Заказано)
				   - ?(Выборка.Зарезервировано    = NULL, 0, Выборка.Зарезервировано)
				   - ?(Выборка.ЗаказаноПоставщику = NULL, 0, Выборка.ЗаказаноПоставщику);
		Если Количество > 0 Тогда
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка);
			
			СтрокаТабличнойЧасти.Количество      = Количество * Выборка.КоэффициентХраненияОстатков / Выборка.Коэффициент;
			СтрокаТабличнойЧасти.ВесовойКоэффициент 		= ?(Выборка.ДоляСтоимости = 0, 1, Выборка.ДоляСтоимости);
			
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

		КонецЕсли;

	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткамЗаказНаПроизводство()

// Возвращает первый размещенный заказ покупателя в основании
//
// Параметры:
//  Основание - Заказ на производство, на основании которого вводим данный документ.
//
Функция ЗаполнитьСделкуПоЗаказуНаПроизводство(Основание)
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя
	               |ИЗ
	               |	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки КАК РазмещениеЗаказовПокупателейОстатки
	               |ГДЕ
	               |	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику = &Основание
	               |	И РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	               |	И РазмещениеЗаказовПокупателейОстатки.Номенклатура.Услуга";
	Запрос.УстановитьПараметр("Основание",Основание);			   
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЗапроса.Следующий() ТОгда
		Возврат ВыборкаЗапроса.ЗаказПокупателя;
	Иначе
		Возврат Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
КонецФункции //ЗаполнитьСделкуПоЗаказуНаПроизводство()	

// Процедура заполняет таб.части материалы/распределение материалов по данным о потребностях по заказам.
// Список заказов берется из табличной части продукция (если заказ не передан явно в виде параметра)
//
Процедура ЗаполнитьПотребностямиПоЗаказамНаПроизводство(ТабЧасть, МассивЗаказов) Экспорт

	ЗаказыНаПроизводствоИПереработку.ЗаполнитьТабличнуюЧастьПоПотребностямЗаказаНаПроизводство(ТабЧасть, МассивЗаказов,новый Структура("ОтборПродукцияУслуга",истина));
	
	Для Каждого СтрокаТЧ Из РаспределениеМатериалов Цикл
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( СтрокаТЧ,
			?(ТабЧасть = РаспределениеМатериалов, "РаспределениеМатериалов", "Материалы"),
			ОтражатьВБухгалтерскомУчете,
			ОтражатьВНалоговомУчете);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПотребностямиПоЗаказамНаПроизводство()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаПоУслугам)
	Перем Счет91, Счет90_03;
	
	Счет91 = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	Счет90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;				
	ТаблицаДвижений = новый ТаблицаЗначений();				
	
	ТаблицаДвижений.Колонки.Добавить("ТекущаяТаблица");
	
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя"		, Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСчет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоБУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетНДС"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаНДС"				, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		
	КонецЕсли;
	
	ПереименованиеКолонокРезультирующейТаблицы = Новый Структура();
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("КоррСчет", "СчетДоходовБУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СчетУчетаНУ", "СчетДоходовНУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СуммаНДС", "НДС");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы);
	
	НаборТаблиц = Новый Массив;
	НаборТаблиц.Добавить(ТаблицаПоУслугам);
	
	Для каждого ТекущаяТаблица Из НаборТаблиц Цикл
		
		Для каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
			СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
			
			СтрокаНовойТаблицы.СчетНДС = ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаТаблицы.СчетРасходовБУ, Счет91),СтрокаТаблицы.СчетРасходовБУ, Счет90_03);
			
			СтрокаНовойТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			СтрокаНовойТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			
			КоррСчет = СтрокаНовойТаблицы.СчетДоходовБУ;
			
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				Конецесли;
			КонецЦикла; 
			
			КоррСчет = СтрокаНовойТаблицы.СчетНДС;
			
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) ТОгда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				Конецесли;
			КонецЦикла; 
			
			Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
				КоррСчет = СтрокаНовойТаблицы.СчетДоходовНУ;
				Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
					ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
					Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
					ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.Номенклатура)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.Номенклатура;
					Конецесли;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы, Истина);
	
	ТаблицаДвижений.Колонки.ЗаказПокупателя.Имя = "Сделка";
	
	ЧисловыеКолонкиСтрокой = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	Иначе //.ПоСчетам или .ПоЗаказам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	Возврат ТаблицаДвижений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДВИЖЕНИЙ ПО РЕГИСТРАМ

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
					ТаблицаПоУслугам, ТаблицаПоМатериалам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
					
	// Формирование движений по регистрам "Затраты на выпуск продукции".				
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоРегиструЗатратыНаВыпускПродукции(
		СтруктураШапкиДокумента, 
		"АктОбОказанииПроизводственныхУслуг",
		мУчетнаяПолитика,
		мУчетнаяПолитикаРегл
	);
		
	// Формирование движений по регистрам "Выпуск продукции" и направлениям выпуска.
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска(
		СтруктураШапкиДокумента, 
		"АктОбОказанииПроизводственныхУслуг",
		мУчетнаяПолитика, 
		мУчетнаяПолитикаРегл,
		мУчетнаяПолитикаРегл
	);
		
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
					ТаблицаПоУслугам, ТаблицаПоМатериалам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
					
	ДвиженияПоРегистрамОперативныхВзаиморасчетовРегл(РежимПроведения, ТаблицаПоВзаиморасчетам,
	                                                    Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоУслугам, Отказ);

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
					ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, Отказ, Заголовок);
					
	// Движения по регистрам бухгалтерии формируются и в модуле документа и при
	// формировании движений по выпуску продукции.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И Движения.Хозрасчетный.Модифицированность() Тогда
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И Движения.Налоговый.Модифицированность() Тогда
		Движения.Налоговый.Записать(Ложь);
	КонецЕсли;

	// Зарегистрируем документ в последовательности.
	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(
		ЭтотОбъект, 
		Дата, 
		СтруктураШапкиДокумента.Организация,
		//Регистрация в последовательности по УУ - по реквизиту документа
		//	чтобы при допроведении по регл.учету документ остался зарегистрированным в последовательности по УУ
		ОтражатьВУправленческомУчете,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации
	);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
						ТаблицаПоУслугам, ТаблицаПоМатериалам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		                                   мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		                                   ВидДвиженияНакопления.Приход, Отказ, Заголовок);
	
	// Если в реквизите Сделка указан внешний заказ покупателя, то проводится 
	// по регистру ЗаказыПокупателей
	Если ЗначениеЗаполнено(Сделка) 
	   И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю")
	   И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			
		// Проверка остатков при оперативном проведении.
		// Контроль объема отгрузки по заказу
		Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Услуги", Отказ, Заголовок, РежимПроведения);
			
		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
					
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПокупателей, СтруктТаблицДокумента);
				
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Сделка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЕдиницаИзмерения",    неопределено); //для услуг в регистр Заказы единица измерения не записывается
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный);

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
			
	КонецЕсли;
	
	КопияУслуги = ТаблицаПоУслугам.Скопировать();
				
	ТабИменУслуги = Неопределено;
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДС",    "НДСВрем");
	ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДСУпр", "НДС");
			
	// УСЛУГИ ПО РЕГИСТРУ Закупки.
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
					
		// В этом случае таблицы документа обрабатываются особым образом
		ТаблицаДвижений = Движения.Продажи.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаДвиженийУслуги = ТаблицаДвижений.Скопировать();
					
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияУслуги, ТаблицаДвиженийУслуги, Проект, Дата, "Продажи");
					
		// Вставляем уже подготовленные таблицы движений
		ТаблицыДанныхДокумента = Новый Структура;
		ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам", ТаблицаДвиженийУслуги);
								
	Иначе
								
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", КопияУслуги);
					
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Продажи, СтруктТаблицДокумента);
								
	КонецЕсли;
							
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПродажи",    Ссылка);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Сделка);

	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Продажи, Неопределено, ТаблицыДанныхДокумента, Дата);
		
	// Движение по заказам на производство.
	ТаблицаПоУслугамЗаказы = ТаблицаПоУслугам.Скопировать();
	Заказ = Неопределено;
	Если ИспользоватьЗаказы Тогда
		Заказ = УправлениеПроизводством.ПолучитьЗаказДляУчетаЗатрат(СтруктураШапкиДокумента.Сделка, , мУчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство, мИспользоватьЗаказыНаПроизводство);
	КонецЕсли;
	ТаблицаПоУслугамЗаказы.ЗаполнитьЗначения(Заказ,"Заказ");
	
	УправлениеПроизводством.ДвижениеПоЗаказамНаПроизводство(ЭтотОбъект, ТаблицаПоУслугамЗаказы, "Услуги", СтруктураШапкиДокумента, РежимПроведения, Отказ, Заголовок);
	
	// ДВИЖЕНИЯ ПО РЕГИСТРУ ПотребностиЗаказовНаПроизводство
	Если мИспользоватьЗаказыНаПроизводство и мИспользоватьПотребностиЗаказовНаПроизводство Тогда
		ДопПараметры = Новый Структура("ИмяТабличнойЧастиПродукция,СпособЗакрытияПотребностейЗаказовНаПроизводство","Услуги",мСпособЗакрытияПотребностейЗаказовНаПроизводство);
		Если мСпособЗакрытияПотребностейЗаказовНаПроизводство = Перечисления.СпособыЗакрытияПотребностейЗаказовНаПроизводство.АвтоматическиПриРаспределении Тогда
			Если РаспределениеМатериалов.Количество() <> 0 Тогда
				ЗаказыНаПроизводствоИПереработку.ВыполнитьПогашениеПотребностиЗаказаНаПроизводство(ЭтотОбъект, "АктОбОказанииПроизводственныхУслуг", ДопПараметры);
			КонецЕсли;				
		Иначе
			ЗаказыНаПроизводствоИПереработку.ВыполнитьПогашениеПотребностиЗаказаНаПроизводство(ЭтотОбъект, "АктОбОказанииПроизводственныхУслуг", ДопПараметры);
		КонецЕсли;			
	КонецЕсли;
	
	// МАТЕРИАЛЫ ПО РЕГИСТРУ МатериалыВПроизводстве.
	Если ИспользоватьМатериалы Тогда
		
		// Проверка остатков при оперативном проведении.
		Движения.МатериалыВПроизводстве.КонтрольОстатков(
			СтруктураШапкиДокумента, 
			Отказ, 
			Заголовок,
			РежимПроведения);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		// Формирование движений расход по регистру "Материалы в производстве".
		УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоМатериаламВПроизводстве(
			СтруктураШапкиДокумента, 
			мУчетнаяПолитика);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетовРегл(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
		
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
				
КонецПроцедуры

// Формирование движений по регистрам по регламентированному учету.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
						ТаблицаПоУслугам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений по регистру "Учет продаж и себестоимости".
	РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
		СтруктураШапкиДокумента,
		ТаблицаПоУслугам
	);
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	
	// Формирование бухгалтерских проводок
	ТаблицаВыручкиДляНУ = ТаблицаПоУслугам.Скопировать();
	ТаблицаВыручкиДляБУ = ТаблицаПоУслугам.Скопировать();
	ТаблицаВыручкиДляНУ.Свернуть("Номенклатура, УслугаЕНВД, СчетДоходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ,Содержание", "СуммаБезНДС,НДС");
	ТаблицаВыручкиДляБУ.Свернуть("СтавкаНДС, УслугаЕНВД, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ,Содержание", "СуммаБезНДС,НДС,СуммаБезНДСВал,НДСВал");

	Если не СтруктураШапкиДокумента.Свойство("МоментОпределенияНалоговойБазыНДС") Тогда
	Если ЗначениеЗаполнено(мУчетнаяПолитикаРегл) 
		И ЗначениеЗаполнено(мУчетнаяПолитикаРегл.МоментОпределенияНалоговойБазыНДС) Тогда
		МоментОпределенияНалоговойБазыНДС = мУчетнаяПолитикаРегл.МоментОпределенияНалоговойБазыНДС;
	Иначе
		МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке;
	КонецЕсли; 
	СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС",МоментОпределенияНалоговойБазыНДС);
	КонецЕсли; 
	
	ДатаДока   = Дата;
	Счет91     = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;

	// Выручка и НДС
	Для каждого СтрокаТЧ из ТаблицаВыручкиДляБУ Цикл

		// Выручка
		Проводка = ПроводкиБУ.Добавить();
		Проводка.Период                 = ДатаДока;
		Проводка.Организация            = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание 			= СтрокаТЧ.Содержание;

		Проводка.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
		
		Проводка.Сумма = СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
										 
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт           = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт	= СтрокаТЧ.СуммаБезНДСВал + СтрокаТЧ.НДСВал;
		КонецЕсли; 
		
		Проводка.СчетКт                 = СтрокаТЧ.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоБУ);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);

		// НДС
		Если СтруктураШапкиДокумента.УчитыватьНДС 
		   И СтрокаТЧ.НДС <> 0 Тогда

			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период               = ДатаДока;
			Проводка.Организация          = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание           = СтрокаТЧ.Содержание;
			
			Проводка.СчетДт = ?( БухгалтерскийУчет.ЭтоСубсчет(СтрокаТЧ.СчетРасходовБУ, Счет91), СтрокаТЧ.СчетРасходовБУ, ПланыСчетов.Хозрасчетный.Продажи_НДС);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.СубконтоБУ);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);

			Если СтруктураШапкиДокумента.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", Ссылка);
			Иначе
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			КонецЕсли;

			Проводка.Сумма                = СтрокаТЧ.НДС;

		КонецЕсли;

	КонецЦикла;

	// Налоговый учет
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	   И Не СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику
	Тогда

		Для каждого СтрокаТЧ из ТаблицаВыручкиДляНУ Цикл

			Проводка = ПроводкиНУ.Добавить();
			Проводка.Период                   = ДатаДока;
			Проводка.Организация              = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание 			  = СтрокаТЧ.Содержание;

			Проводка.СчетДт                   = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);

			Если НЕ СтрокаТЧ.УслугаЕНВД Тогда
				Проводка.СчетКт 			  = СтрокаТЧ.СчетДоходовНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоНУ);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
			КонецЕсли;
			
			Проводка.Сумма                    = СтрокаТЧ.СуммаБезНДС;

		КонецЦикла;

	КонецЕсли;

	// Движения по взаиморасчетам
	
	СуммаУслугСНДС = ТаблицаПоУслугам.Итог("СуммаБезНДСВал")+ТаблицаПоУслугам.Итог("НДСВал");
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок,СуммаУслугСНДС, ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента);

	Если СтруктураПараметровЗачетАванса = ложь тогда
		Отказ = Истина;
		СуммаАванса = 0;
	Иначе
		//Возвращает сумму аванса в валюте регламентированного учета
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса, 
			СтруктураШапкиДокумента, ТаблицаПоУслугам);
		СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса,
			ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
	КонецЕсли;
	Если НЕ ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ",Движения.Налоговый);
		Конецесли;
		БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса,
			мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
	Конецесли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ) Экспорт

	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если Не ТаблицаВыручки.Количество() = 0 Тогда 
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручки, , Отказ, УчетНДС.СчетОтнесенияНДС(СтруктураШапкиДокумента));
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПОДГОТОВКИ ТАБЛИЦ ЗНАЧЕНИЙ ДЛЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(Отказ, Заголовок)

	мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	мУчетЗатратПоЗаказамНаПроизводство = мУчетнаяПолитикаРегл.УчетЗатратПоЗаказамНаПроизводство;

КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();
	
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл

		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
								  
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугРегл(ТаблицаУслуг, СтруктураШапкиДокумента);
	ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента);

	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("Себестоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("НДСУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    ТаблицаУслуг.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    ТаблицаУслуг.Колонки.Добавить("СтоимостьБезСкидок"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ДанныеРегл    = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);

	// Надо заполнить новые колонки.
	Для Каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		Если СуммаВключаетНДС Тогда
			СуммаСНДС = СтрокаТаблицы.Сумма;
		Иначе
			СуммаСНДС = СтрокаТаблицы.Сумма + СтрокаТаблицы.НДС;
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		

		// Суммы пересчитаем в валюту упр. учета
		СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
										СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
										СтруктураШапкиДокумента.КурсДокумента, 
										СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
										СтруктураШапкиДокумента.КратностьДокумента, 
										СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
								 
        СтрокаТаблицы.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
										мВалютаРегламентированногоУчета,
										СтруктураШапкиДокумента.КурсДокумента, 
										ДанныеРегл.Курс,
										СтруктураШапкиДокумента.КратностьДокумента, 
										ДанныеРегл.Кратность);

		СтрокаТаблицы.НДСУпр= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Стоимость;	 

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

Процедура ПодготовитьТаблицуУслугРегл(ТаблицаУслуг, СтруктураШапкиДокумента)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУслуг.Колонки.Добавить("СебестоимостьБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СебестоимостьНУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	
	ТаблицаУслуг.Колонки.Добавить("СчетВыручкиБУ");
	ТаблицаУслуг.Колонки.Добавить("УслугаЕНВД");
	КэшПоСчетам = Новый Соответствие;

	// Надо заполнить новые колонки.
	Для Каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СчетДоходовБУОтноситсяКДеятельностиЕНВД = КэшПоСчетам[СтрокаТаблицы.СчетДоходовБУ];
		Если СчетДоходовБУОтноситсяКДеятельностиЕНВД = Неопределено Тогда
			СчетДоходовБУОтноситсяКДеятельностиЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТаблицы.СчетДоходовБУ);
			КэшПоСчетам.Вставить(СтрокаТаблицы.СчетДоходовБУ, СчетДоходовБУОтноситсяКДеятельностиЕНВД);
		КонецЕсли;

		УслугаЕНВД = СчетДоходовБУОтноситсяКДеятельностиЕНВД;
		СчетСебестоимостиБУ = ?(УслугаЕНВД, ПланыСчетов.Хозрасчетный.СебестоимостьПродажОблагаемаяЕНВД, ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД);
		СчетВыручкиБУ = ?(УслугаЕНВД, ПланыСчетов.Хозрасчетный.ВыручкаОблагаемаяЕНВД, ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД);
		
		СтрокаТаблицы.УслугаЕНВД = УслугаЕНВД;
		
		СтрокаТаблицы.СчетВыручкиБУ = СчетВыручкиБУ;
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Материалы",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоМатериалам.Выгрузить();
	
	КолвоЭлементов = ТаблицаМатериалов.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
   		СтрокаТаблицы = ТаблицаМатериалов[КолвоЭлементов - ОбратныйИндекс];
  
   		Если Не СтрокаТаблицы.ВестиОперативныйУчетОстатковНЗП Тогда
      		ТаблицаМатериалов.Удалить(СтрокаТаблицы);
   		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуМатериалов()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетЗатрат"      		, "СчетЗатрат");
	СтруктураПолей.Вставить("СчетЗатратНУ"    		, "СчетЗатратНУ");
	СтруктураПолей.Вставить("СубконтоДт1"     		, "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДт"      			, "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетДоходовБУ"      	, "СчетДоходовБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ"      	, "СчетДоходовНУ");
	СтруктураПолей.Вставить("СчетРасходовБУ"      	, "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетРасходовНУ"      	, "СчетРасходовНУ");
	СтруктураПолей.Вставить("СубконтоБУ"      		, "СубконтоБУ");
	СтруктураПолей.Вставить("СубконтоНУ"      		, "СубконтоНУ");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьДанныеДоставкиПоОснованию(ЭтотОбъект, Основание);
		
		ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		#Если Клиент Тогда
		СписокПодразделений = РаботаСДиалогами.ПолучитьСписокПодразделенийОрганизаций(Основание.Подразделение,Основание.Организация);
		Если СписокПодразделений.Количество()=0 Тогда
			ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		Иначе
			ПодразделениеОрганизации = СписокПодразделений[0].Значение;
		КонецЕсли;
		#КонецЕсли
	
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		ИспользоватьЗаказы = Истина;

		Сделка = Основание;
		Если Основание.Проведен Тогда
			
			ЗаполнитьУслугиПоОстаткам();

		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

			СкопироватьУслуги();
			Если НЕ ДоговорКОнтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				Сделка = Основание.ЗаказПокупателя; 
			КонецЕсли;

		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
		ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Сделка = ЗаполнитьСделкуПоЗаказуНаПроизводство(Основание);
		Если ЗначениеЗаполнено(Сделка) Тогда
			Контрагент = Сделка.Контрагент;
			ДоговорКонтрагента = Сделка.ДоговорКонтрагента;
		КонецЕсли;	
		
		#Если Клиент Тогда
		СписокПодразделений = РаботаСДиалогами.ПолучитьСписокПодразделенийОрганизаций(Основание.Подразделение,Основание.Организация);
		Если СписокПодразделений.Количество()=0 Тогда
			ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		Иначе
			ПодразделениеОрганизации = СписокПодразделений[0].Значение;
		КонецЕсли;
		#КонецЕсли
		
		Если ПодразделениеОрганизации.Владелец <> Организация Тогда
			ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
		
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Истина;
		ОтражатьВНалоговомУчете = Истина;
		
		ИспользоватьЗаказы = Истина;
		
		Если Основание.Проведен Тогда
			
			ЗаполнитьТабличнуюЧастьПоОстаткамЗаказНаПроизводство(Услуги, Основание);
			
			ЗаполнитьПотребностямиПоЗаказамНаПроизводство(РаспределениеМатериалов, Основание);
			
			ТабЧасть = РаспределениеМатериалов.Выгрузить();
			Материалы.Загрузить(ТабЧасть);
			Материалы.Свернуть("ЗаказВыпуска,Номенклатура,ХарактеристикаНоменклатуры,ЕдиницаИзмерения,Коэффициент,Спецификация","Количество");
			
		КонецЕсли;

	КонецЕсли;

	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
	Если ЗначениеЗаполнено(Подразделение)
	   И Подразделение.ВидПодразделения<>Перечисления.ВидыПодразделений.ОсновноеПроизводство
	   И Подразделение.ВидПодразделения<>Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
		   
		Подразделение = Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодразделениеОрганизации)
	   И ПодразделениеОрганизации.ВидПодразделения<>Перечисления.ВидыПодразделений.ОсновноеПроизводство
	   И ПодразделениеОрганизации.ВидПодразделения<>Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
		   
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	Если не ИспользоватьМатериалы и Материалы.Количество()>0 Тогда
		ИспользоватьМатериалы = истина;
	КонецЕсли;
	Если не ИспользоватьПрочиеЗатраты и ПрочиеЗатраты.Количество()>0 Тогда
		ИспользоватьпрочиеЗатраты = истина;
	КонецЕсли;
	
	Если АвтораспределениеМатериалов и РаспределениеМатериалов.Количество()>0 Тогда
		АвтораспределениеМатериалов = Ложь;
	КонецЕсли;
	Если АвтораспределениеПрочихЗатрат и РаспределениеПрочихЗатрат.Количество()>0 Тогда
		АвтораспределениепрочихЗатрат = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

    ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);
	
	Если АвтораспределениеМатериалов Тогда
		ЗаполнитьРаспределениеМатериалов();
	КонецЕсли;
	Если АвтораспределениеПрочихЗатрат Тогда
		ЗаполнитьРаспределениеПрочихЗатрат();
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено,Отказ=ложь) Экспорт
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов", "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов" , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"          , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"                , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом" , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",          "ОтражатьВРегламентированномУчете"        , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей" , "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВедениеУчетаПоПроектам", "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "УчетЗатратПоЗаказамНаПроизводство", "УчетЗатратПоЗаказамНаПроизводство");
	
	// Дополним полями, нужными для упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("ВидВоспроизводства", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам) Экспорт
	
	// Подготовим таблицу услуг для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("Продукция"        	  , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("КоличествоДоделка"   , "КоличествоДоделка");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"    , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ВесовойКоэффициент"  , "ВесовойКоэффициент");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Спецификация"        , "Спецификация");
	СтруктураПолей.Вставить("ЗаказВыпуска" 		  , "ЗаказВыпуска");
	СтруктураПолей.Вставить("ЗаказНаПроизводство" , "ЗаказВыпуска");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
		И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураСложныхПолей);
	
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	ТаблицаПоУслугам.Колонки.Добавить("Заказ");

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, Истина);
		
КонецПроцедуры // СформироватьТаблицыДокумента()

// Процедура - обработчик события "ОбработкаПроведения"
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоУслугам;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	
	ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);

	//Проверим на возможность проведения в БУ и НУ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                    СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		                    мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);

	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим таблицу материалов для проведения.
	Если ИспользоватьМатериалы Тогда
		
		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("Номенклатура"        		, "Номенклатура");
		СтруктураПолей.Вставить("Услуга"              		, "Номенклатура.Услуга");
		СтруктураПолей.Вставить("Набор"               		, "Номенклатура.Набор");
		СтруктураПолей.Вставить("ВестиОперативныйУчетОстатковНЗП", "Номенклатура.ВестиОперативныйУчетОстатковНЗП");
		СтруктураПолей.Вставить("Количество"          		, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
		СтруктураПолей.Вставить("СтатьяЗатрат"				, "СтатьяЗатрат");
		СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
		СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
		СтруктураПолей.Вставить("Затрата"        			, "Номенклатура");
		СтруктураПолей.Вставить("ХарактеристикаЗатраты"		, "ХарактеристикаНоменклатуры");
		СтруктураПолей.Вставить("СерияЗатраты"         		, "СерияНоменклатуры");
		СтруктураПолей.Вставить("ЗаказВыпуска" 				, "ЗаказВыпуска");
		
		РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);
		ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
		ТаблицаПоМатериалам.Колонки.Добавить("Заказ");
		ТаблицаПоМатериалам.Колонки.Добавить("ЗаказНЗП");
		
	КонецЕсли;

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
	//Проверим заполнение счетов учета.
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Услуги", ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);

	СтруктураПодготовленныхТаблиц = Новый Структура("Услуги", ТаблицаПоУслугам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);


	
													
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
						ТаблицаПоУслугам, ТаблицаПоМатериалам, 
						ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам,
						Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
		
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	
КонецПроцедуры

мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мИспользоватьЗаказыНаПроизводство 					= УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство();
мУчетЗатратПоЗаказамНаПроизводство 					= Ложь;
мИспользоватьТолькоСборочныеСпецификации 			= глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации");
мИспользоватьПотребностиЗаказовНаПроизводство 		= глЗначениеПеременной("ИспользоватьПотребностиЗаказовНаПроизводство");
мСпособЗакрытияПотребностейЗаказовНаПроизводство 	= глЗначениеПеременной("СпособЗакрытияПотребностейЗаказовНаПроизводство");

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Услуги", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

