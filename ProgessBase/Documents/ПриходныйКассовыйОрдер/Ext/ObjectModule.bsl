Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранит текущее распределение долга работника по займу
// на основную сумму займа и начисленные проценты
Перем СтруктураДолг Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем ТаблицаПлатежейУпр;

Перем мСтруктураПараметровДенежныхСредств;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
	// разработанной методистами
	//
	// Возвращаемое значение:
	//  Табличный документ - печатная форма накладной
	//
Функция ПечатьПКО()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата  КАК ДатаДокумента,
	|	Организация КАК Орган,
	|	Организация,
	|	Организация КАК Руководители,
	|	Подразделение.Представление КАК ПредставлениеПодразделения,
	|	Подразделение               КАК Подразделение,
	|	Контрагент,
	|	Контрагент.Представление КАК Контрагент,
	|	ПринятоОт      КАК ПринятоОт,
	|	Основание      КАК Основание,
	|	Приложение     КАК Приложение,
	|	СуммаДокумента КАК Сумма,
	|	ВалютаДокумента,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	СтавкаНДС
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйКассовыйОрдер_КО1";
	Макет       = ПолучитьОбщийМакет("КО1");
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		ПолучитьОстатокПоДоговоруЗаймаУпр(РасчетныйДокумент);
		
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Выводим шапку ПКО

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Орган, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.СуммаРубКоп       = ?(НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета,Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+" "+СокрЛП(Шапка.ВалютаДокумента),РубКоп(Шапка.Сумма));
	ОбластьМакета.Параметры.Сумма		      = Формат(Шапка.Сумма,"ЧЦ=15; ЧДЦ=2")+?(НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета," "+СокрЛП(Шапка.ВалютаДокумента),"");
	ОбластьМакета.Параметры.СуммаПрописью     = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента    = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
		
	КодыСчетСубсчет=ОпределитьКодыСчетСубсчет();
	
	ОбластьМакета.Параметры.КодДебета=КодыСчетСубсчет.Дебет;
	ОбластьМакета.Параметры.СубСчет=КодыСчетСубсчет.Кредит;
	
	ТабНДС=РасшифровкаПлатежа.Выгрузить();
	
	ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
	
	ТекстСуммаНДС="";
	
	Для Каждого СтрокаНДС ИЗ ТабНДС цикл
		
		ТекстСуммаНДС = ТекстСуммаНДС+Символы.ПС + "НДС (" + ?(НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС), "без налога", СтрокаНДС.СтавкаНДС) + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15;ЧДЦ=2;ЧРД=-;ЧН=0-00")+" "+Шапка.ВалютаПредставление;
		
	КонецЦикла;
	
	ТекстСуммаНДС=Сред(ТекстСуммаНДС,2);
		
	ОбластьМакета.Параметры.ВТомЧисле=ТекстСуммаНДС;

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, КонецДня(Шапка.ДатаДокумента),);
	
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	Кассир       = Руководители.Кассир;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
	ОбластьМакета.Параметры.ФИОКассира = Кассир;

	ТекстПринятоОт=Шапка.ПринятоОт;

	Если ТекстПринятоОт="" И ЗначениеЗаполнено(Контрагент) Тогда
		
		Если ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками 
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
			
			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				ТекстПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
			КонецЕсли;
			
		ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ТекстПринятоОт =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстОснование=Основание;
	
	Если Основание="" И ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		
		ТекстОснование=Лев(Строка(РасчетныйДокумент),Найти(Строка(РасчетныйДокумент),Строка(РасчетныйДокумент.Дата))-1)+Формат(РасчетныйДокумент.Дата,"ДФ=dd.MM.yyyy");
		
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПринятоОт  = ТекстПринятоОт;
	ОбластьМакета.Параметры.Основание  = ТекстОснование;
	ОбластьМакета.Параметры.Приложение = Приложение;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПКО()

// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ПКО" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьПКО();

	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;

	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПКО", "Приходный кассовый ордер");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	
	Если Не СтрокаПлатеж=Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;

КонецПроцедуры // ПроверкаКурсовВалют()

// Формирует остаток по договору займа с работником при соответствующем виде операции
//
Процедура ПолучитьОстатокПоДоговоруЗаймаУпр(Основание) Экспорт
	
	СтруктураДолг=Новый Структура;
	СтруктураДолг.Вставить("ОсновнойДолг",0);
	СтруктураДолг.Вставить("Проценты",0);
	СтруктураДолг.Вставить("Валюта",мВалютаРегламентированногоУчета);
	
	Если ЗначениеЗаполнено(Основание) Тогда		
		
		Запрос = Новый запрос;
		Запрос.Текст =

		"ВЫБРАТЬ
		|	СведенияОЗаймах.ОтражатьВБухгалтерскомУчете

		|ИЗ
		|	РегистрСведений.СведенияОЗаймах КАК СведенияОЗаймах
		|ГДЕ
		|	СведенияОЗаймах.ДоговорЗайма = &ДоговорЗайма
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОЗаймах.ОтражатьВБухгалтерскомУчете";
		Запрос.УстановитьПараметр("ДоговорЗайма", Основание);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если Выборка.ОтражатьВБухгалтерскомУчете Тогда
				ИмяРегистра="ПогашениеЗаймовРаботникамиОрганизаций";
				СтруктураДолг.Вставить("Валюта",мВалютаРегламентированногоУчета);
			Иначе
				ИмяРегистра="ПогашениеЗаймовРаботниками";
				СтруктураДолг.Вставить("Валюта",Константы.ВалютаУправленческогоУчета.Получить());
			КонецЕсли;
			
			Запрос=Новый Запрос;
			Запрос.Текст=
			"ВЫБРАТЬ
			|	ЕСТЬNULL(ПогашениеЗаймовОстатки.ОсновнойДолгОстаток, 0) КАК ОсновнойДолгОстаток,
			|	ЕСТЬNULL(ПогашениеЗаймовОстатки.ПроцентыОстаток, 0) КАК ПроцентыОстаток
			|ИЗ
			|	РегистрНакопления."+ИмяРегистра+".Остатки(, ДоговорЗайма=&ДоговорЗайма И ФизЛицо = &ФизЛицо) КАК ПогашениеЗаймовОстатки";
			
			Запрос.УстановитьПараметр("ДоговорЗайма",Основание);
			Запрос.УстановитьПараметр("ФизЛицо", Контрагент);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				СтруктураДолг.Вставить("ОсновнойДолг",Результат.ОсновнойДолгОстаток);
				СтруктураДолг.Вставить("Проценты",Результат.ПроцентыОстаток);
			КонецЕсли;
			
		КонецЕсли
			
	КонецЕсли;
				
КонецПроцедуры // ПолучитьОстатокПоДоговоруЗаймаУпр()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ВзаиморасчетыСПодотчетнымиЛицами".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодОтчетник", Контрагент);
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовПодотчетника);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|	                                                          ФизЛицо = &ПодОтчетник
	|	                                                        И РасчетныйДокумент = &РасчетныйДокумент
	|	                                                        И Валюта = &ВалютаВзаиморасчетов)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток > 0
	|";
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.СуммаДолга;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
						ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
						СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
						СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
						
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет() 
	
	КодыСчетов=Новый Структура("Дебет,Кредит");
	
	// Определяем код счета дебета
	КассаВВалюте = Ложь;
	ВалютаРег    = мВалютаРегламентированногоУчета;
	Если Касса.ВалютаДенежныхСредств <> ВалютаРег Тогда
		КассаВВалюте = Истина;
	КонецЕсли;
	
	Если КассаВВалюте Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал.Код;
		РасчетыВВалюте = Истина;
	Иначе
		СчетДт = ПланыСчетов.Хозрасчетный.КассаОрганизации.Код;
		РасчетыВВалюте = Ложь;
	КонецЕсли;
	
	КодыСчетов.Дебет=СчетДт;
	
	//Определяем коды счетов кредита. Если указаны и счет расчетов с контрагентом, и счет расчетов по авансам - выводим оба.
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		СтрокаКредит  = СчетУчетаРасчетовСКонтрагентом.Код;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		СчетРасчетов=ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам.Код;
		
		Если Не РасчетныйДокумент=Неопределено Тогда
			
			СчетПроцентов=РасчетныйДокумент.СчетУчетаПроцентовПоЗайму.Код;
			
			Если СтруктураДолг.Проценты<СуммаДокумента Тогда
				
				Если НЕ СтруктураДолг.Проценты=0 Тогда
					
					СтрокаКредит = СчетРасчетов+", "+СчетПроцентов;
					
				Иначе
					
					СтрокаКредит = СчетРасчетов;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаКредит = СчетПроцентов;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
		
		СтрокаКредит=ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.Код;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		
		Если КассаВВалюте Тогда
			СтрокаКредит = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал.Код;
		Иначе
			СтрокаКредит = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами.Код;
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
		
		СтрокаКредит     = СчетУчетаРасчетовСКонтрагентом.Код;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		
		Если НЕ КассаВВалюте Тогда
			СтрокаКредит = ПланыСчетов.Хозрасчетный.РасчетныеСчета.Код;
		Иначе
			СтрокаКредит = ПланыСчетов.Хозрасчетный.ВалютныеСчета.Код;
		КонецЕсли;
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ТабСчет=РасшифровкаПлатежа.Выгрузить();
		
		ТабСчет.Свернуть("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам","СуммаПлатежа");
		
		СтрокаКредит="";
		
		Для Каждого Строка Из ТабСчет Цикл
			
			Если НЕ Строка.СчетУчетаРасчетовСКонтрагентом.Пустая() И Найти(СтрокаКредит,Строка.СчетУчетаРасчетовСКонтрагентом.Код)=0 Тогда
				СтрокаКредит=СтрокаКредит+", "+Строка.СчетУчетаРасчетовСКонтрагентом.Код;
			КонецЕсли;
			
			Если НЕ Строка.СчетУчетаРасчетовПоАвансам.Пустая() И Найти(СтрокаКредит,Строка.СчетУчетаРасчетовПоАвансам.Код)=0 Тогда
				СтрокаКредит=СтрокаКредит+", "+Строка.СчетУчетаРасчетовПоАвансам.Код;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаКредит=Сред(СтрокаКредит,2);
		
	КонецЕсли;
	
	КодыСчетов.Кредит=СтрокаКредит;
	
	Возврат КодыСчетов;
	
	КонецФункции // ОпределитьКодыСчетСубсчет()
	
// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказуУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);

	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		Если Выборка.Сумма > 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.Сумма;
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
			                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			                            ВалютаДокумента,
			                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
										
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказуУпр()

Функция РубКоп(Сумма)
	
	Руб=Цел(Сумма);
	Коп=ОКР(100*(Сумма-Руб),0,1);
	СуммаРубКоп=""+Руб+" руб. "+Цел(Коп/10)+(Коп-10*Цел(Коп/10))+" коп.";
	Возврат СуммаРубКоп;
	
КонецФункции

// Процедура выполняет заполнение суммы документа по регистру "РозничнаяВыручкаКомпании".
//
// Параметры:
//  КассаККМ - ссылка на справочник "Кассы ККМ".
//
Процедура ЗаполнитьПоРозничнойВыручкеУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	//Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
	//	Запрос.УстановитьПараметр("РозничнаяТочка", ДокументОснование.КассаККМ);
	//Иначе
	//	Запрос.УстановитьПараметр("РозничнаяТочка", ДокументОснование.Склад);
	//КонецЕсли;
	Запрос.УстановитьПараметр("РозничнаяТочка", Контрагент);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РозничнаяВыручка.Остатки(, РозничнаяТочка = &РозничнаяТочка)
	|ГДЕ
	|	СуммаОстаток > 0  
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДокумента = Мин(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаОстаток, 
		                                мВалютаРегламентированногоУчета, ВалютаДокумента,
		                                1, КурсДокумента, 1, КратностьДокумента),
		                                МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДокументОснование.СуммаДокумента,  мВалютаРегламентированногоУчета, ВалютаДокумента,
		                                1, КурсДокумента, 1, КратностьДокумента));
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоРозничнойВыручкеУпр()

Процедура ЗаполнитьПоСуммеДокументаУпр(СтрокаПлатеж)
	
	СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
	КурсОснования=СтруктураКурсаОснования.Курс;
	КратностьОснования=СтруктураКурсаОснования.Кратность;

	ОснованиеСуммаДокумента  = ДокументОснование.СуммаДокумента;
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ОснованиеСуммаДокумента = ОснованиеСуммаДокумента - ДокументОснование.СуммаВознаграждения;
	КонецЕсли;
	
	СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, ДокументОснование.ВалютаДокумента, ДокументОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
									 КурсОснования, ДокументОснование.КурсВзаиморасчетов, КратностьОснования, ДокументОснование.КратностьВзаиморасчетов);
	СуммаДокумента      = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
									 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
КонецПроцедуры

//Заполняет документ на основании расходного кассового ордера
//
Процедура ЗаполнитьПоРКОУпр()
	
	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		
		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		
		Контрагент = ДокументОснование.Контрагент;
		
		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл
			
			СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента  	 = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			СтрокаПлатеж.СуммаПлатежа=СтрокаОснование.СуммаПлатежа;
						
			СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
			Если СтрокаОснование.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
			КонецЕсли;
			
			СтрокаПлатеж.СтавкаНДС=СтрокаОснование.СтавкаНДС;
			
		КонецЦикла;
		
		#Если Клиент Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		#КонецЕсли
		
		Для Индекс=0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл
			
			СтрокаПлатеж=РасшифровкаПлатежа[Индекс];
			СтрокаОснование=ДокументОснование.РасшифровкаПлатежа[Индекс];
			
			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
				И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
						
				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
				ДокументОснование.ВалютаДокумента, 
				СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
				КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаПлатежа     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
				СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
				СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					
					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;
					
				Иначе
					
					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
					
				КонецЕсли;
				
			КонецЕсли;	
			
			УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЦикла;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
						
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		
		// Отказываем
		Возврат;
		
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
		
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником;
		
		Контрагент                       = ДокументОснование.Контрагент;
		РасчетныйДокумент	             = ДокументОснование;
		ВалютаВзаиморасчетовПодотчетника = ДокументОснование.ВалютаВзаиморасчетовРаботника;
		СтруктураКурса                   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурса.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурса.Кратность;
		
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
		
	ИначеЕсли ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		
		// Дальше заполняем по умолчанию
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
		// Дальше заполняем по умолчанию
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		// Дальше заполняем по умолчанию
		Возврат;
		
	ИначеЕсли  ДокументОснование.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками;
		
		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
		
		Контрагент = ДокументОснование.Контрагент;	
		Организация = ДокументОснование.Организация;			
		ВалютаВзаиморасчетовПодотчетника = ДокументОснование.ВалютаВзаиморасчетовРаботника;
		РасчетныйДокумент=ДокументОснование.РасчетныйДокумент;
		
		СтруктураКурса                   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурса.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурса.Кратность;
		
		#Если Клиент Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		#КонецЕсли
		
		ПолучитьОстатокПоДоговоруЗаймаУпр(РасчетныйДокумент);
			
		ВалютаУчета=СтруктураДолг.Валюта;
		
		СтруктураКурсУчета=МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУчета, ?(ЗначениеЗаполнено(РасчетныйДокумент), РасчетныйДокумент.Дата, ТекущаяДата()));
		
		СуммаДокумента=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураДолг.ОсновнойДолг+СтруктураДолг.Проценты, 
		                            ВалютаУчета, ВалютаДокумента,
		                            СтруктураКурсУчета.Курс, КурсДокумента,
		                            СтруктураКурсУчета.Кратность, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
		                            ВалютаДокумента,ВалютаВзаиморасчетовПодотчетника,
		                            КурсДокумента,СтрокаПлатеж.КурсВзаиморасчетов, 
		                            КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);		
	Иначе
		
		ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее;
		// Дальше заполняем по умолчанию
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоРКОУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("Касса");
	СтруктураПолей.Вставить("СуммаДокумента");
	
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее) Тогда
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		СтруктураПолей.Вставить("РасчетныйДокумент","Не указан договор займа");
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()
	
	СтруктураПолей = Новый Структура;
	
	Если НЕ Оплачено Тогда // иначе эти реквизиты проверяются раньше, при вызове СтруктураОбязательныхПолейОплатаУпр()
		СтруктураПолей.Вставить("Организация");
		СтруктураПолей.Вставить("Касса");
		Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
			СтруктураПолей.Вставить("Контрагент");
			СтруктураПолей.Вставить("СуммаДокумента");
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
		СтруктураПолей.Вставить("ВалютаВзаиморасчетовПодотчетника");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		
		Если Не Отказ Тогда
			
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента)

	ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Режим, Отказ, Заголовок);

	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(Режим, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли; 

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",     ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",       Касса);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",              Дата);
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКассаОтправитель", СчетОрганизации);
		мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредствОтправитель",  Перечисления.ВидыДенежныхСредств.Безналичные);
		ПоДенежномуЧеку = НЕ ДенежныйЧек.Пустая();
		мСтруктураПараметровДенежныхСредств.Вставить("ПоДенежномуЧеку", ПоДенежномуЧеку);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("СтруктураДолг", СтруктураДолг);
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.ПровестиПоступлениеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) И ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	Иначе
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, Дата, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Режим, Отказ, Заголовок)
	
	// Бухгалтерские проводки документа
	Если не (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете)) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
	Если НЕ ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
		РозничнаяТорговляОблагаетсяЕНВД = Ложь;
	Иначе
		РозничнаяТорговляОблагаетсяЕНВД = ПараметрыУчетнойПолитики.РозничнаяТорговляОблагаетсяЕНВД;
	КонецЕсли;
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	ВалютаРег    = мВалютаРегламентированногоУчета;
	ДанныеОВалютеРег  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, СтруктураШапкиДокумента.Дата);

	РасчетыВВалюте = (Касса.ВалютаДенежныхСредств <> ВалютаРег);
	
	Если РасчетыВВалюте Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	Иначе
		СчетДт = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами Тогда
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок,СчетДт);
		
		Если Не (СтруктураПараметровДДС = Ложь) тогда
			
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям);
			
		Иначе
			БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенегПрочийПриход(ЭтотОбъект, РасчетыВВалюте, СчетДт, СтруктураШапкиДокумента, Отказ, Заголовок);
			
		Конецесли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		Если СтруктураШапкиДокумента.ВыручкаСНТТ Тогда
			
			// Выполним сторнирование выручки после того как она принята с помощь ПКО без учета ставок налогов
			
			Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
					
				СтруктураПараметровБлокировки = Новый Структура(
					"ИмяТаблицы", "РозничнаяВыручкаОрганизаций");
				СтруктураЗначенийБлокировки   = Новый Структура(
					"Период, Организация, КассаККМ", 
					Дата, Организация, Контрагент);
				ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, , Отказ, Заголовок);
				
			КонецЕсли;
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Период"     , Новый Граница(Новый МоментВремени(Дата, Ссылка), ВидГраницы.Исключая));
			Запрос.УстановитьПараметр("КассаККМ"   , СтруктураШапкиДокумента.Контрагент);
			Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтавкаНДС       КАК СтавкаНДС,
			|	СуммаОстаток    КАК Сумма,
			|	СуммаНДСОстаток КАК СуммаНДС
			|ИЗ
			|	РегистрНакопления.РозничнаяВыручкаОрганизаций.Остатки(
			|		&Период, 
			|		КассаККМ = &КассаККМ
			|			И Организация = &Организация) КАК РозничнаяВыручкаОрганизацийОстатки
			|
			|ДЛЯ ИЗМЕНЕНИЯ
			|	РегистрНакопления.РозничнаяВыручкаОрганизаций.Остатки";
			ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
			
			СуммаОстаткаВыручки = ТаблицаОстатков.Итог("Сумма");
			
			// По регистру РозничнаяВыручкаОрганизаций.
			НаборДвижений   = Движения.РозничнаяВыручкаОрганизаций;
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			СуммаПослеРаспределения = СтруктураШапкиДокумента.СуммаДокумента;
			
			Если СуммаОстаткаВыручки > 0 Тогда
				
				Если СуммаОстаткаВыручки >= СтруктураШапкиДокумента.СуммаДокумента Тогда
					МожноРаспределить       = СтруктураШапкиДокумента.СуммаДокумента;
					СуммаПослеРаспределения = 0;
				Иначе
					МожноРаспределить       = СуммаОстаткаВыручки;
					СуммаПослеРаспределения = СтруктураШапкиДокумента.СуммаДокумента - МожноРаспределить;
				КонецЕсли;
				
				Для каждого СтрокаТЧ из ТаблицаОстатков Цикл
					
					Если МожноРаспределить = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаТЧ.Сумма >= МожноРаспределить Тогда
						КРаспределению    = МожноРаспределить;
						СуммаНДС          = СтрокаТЧ.СуммаНДС * (МожноРаспределить / (СтрокаТЧ.Сумма));
						МожноРаспределить = 0;
					Иначе
						КРаспределению    = СтрокаТЧ.Сумма;
						СуммаНДС          = СтрокаТЧ.СуммаНДС;
						МожноРаспределить = МожноРаспределить - КРаспределению;
					КонецЕсли;
					
					// По регистру "Розничная выручка организаций"
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Организация   = СтруктураШапкиДокумента.Организация;
					СтрокаДвижений.КассаККМ      = СтруктураШапкиДокумента.Контрагент;
					СтрокаДвижений.СтавкаНДС     = СтрокаТЧ.СтавкаНДС;
					СтрокаДвижений.Сумма         = КРаспределению;
					СтрокаДвижений.СуммаНДС      = СуммаНДС;
					СтрокаДвижений.Подразделение = СтруктураШапкиДокумента.Подразделение;
					
					//Проводки по выручке уже сформированы документом "Отчет о розничных продажах
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если СуммаПослеРаспределения > 0 Тогда
				
				СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СуммаПослеРаспределения, Истина, Истина,УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
				
				// По регистру "Розничная выручка организаций"
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.Организация   = СтруктураШапкиДокумента.Организация;
				СтрокаДвижений.КассаККМ      = СтруктураШапкиДокумента.Контрагент;
				СтрокаДвижений.СтавкаНДС     = СтавкаНДС;
				СтрокаДвижений.Сумма         = СуммаПослеРаспределения;
				СтрокаДвижений.СуммаНДС      = СуммаНДС;
				СтрокаДвижений.Подразделение = СтруктураШапкиДокумента.Подразделение;
				
				//Проводки
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Приход выручки из розницы";
				Проводка.Сумма       = СуммаПослеРаспределения;
				
				Проводка.СчетДт      = СчетДт;
				Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
				
				Если РозничнаяТорговляОблагаетсяЕНВД Тогда
					Проводка.СчетКт      =  ПланыСчетов.Хозрасчетный.ВыручкаОблагаемаяЕНВД;
				Иначе
					Проводка.СчетКт      =  ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
					Проводка.СубконтоКт.СтавкиНДС = СтавкаНДС;
				КонецЕсли;
				
				// НДС, если оно есть
				Если НЕ (СуммаНДС = 0) Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период       = СтруктураШапкиДокумента.Дата;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма        = СуммаНДС;
					Проводка.Содержание   = "НДС с розничной выручки";
					
					Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.Продажи_НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СтавкаНДС);
					
					Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);
					
				КонецЕсли;
				
			КонецЕсли;
			
			НаборДвижений.мПериод = СтруктураШапкиДокумента.Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			Движения.РозничнаяВыручкаОрганизаций.ВыполнитьРасход();
			
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		СчетПроцентов      = СтруктураШапкиДокумента.РасчетныйДокументСчетУчетаПроцентовПоЗайму;
		
		Если НЕ СтруктураДолг.Проценты = 0 Тогда
				
			// Погашаем проценты по кредиту
			Проводка = ПроводкиБУ.Добавить();
				
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Погашение работником процентов по займу";
			Проводка.СчетДт      = СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
				
			Проводка.СчетКт      = СтруктураШапкиДокумента.РасчетныйДокументСчетУчетаПроцентовПоЗайму;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.РасчетныйДокументСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.РасчетныйДокументСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.РасчетныйДокументСубконто3);
				
			Проводка.Сумма = ?(СтруктураДолг.Проценты < СуммаДокумента, СтруктураДолг.Проценты, СуммаДокумента);
				
			Если РасчетыВВалюте Тогда
				ВалютнаяСумма = Проводка.Сумма;
					
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ВалютнаяСумма, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалютеРег.Курс, 
				КратностьДокумента, ДанныеОВалютеРег.Кратность);
					
					
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = ВалютнаяСумма;
				КонецЕсли;
					
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = ВалютнаяСумма;
				КонецЕсли;
					
			КонецЕсли;
		КонецЕсли;
				
		Если СтруктураДолг.Проценты<СуммаДокумента Тогда
			
			// Погашаем основную сумму кредита
			Проводка = ПроводкиБУ.Добавить();
				
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Возврат работником предоставленного займа";
			Проводка.СчетДт      = СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
				
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам;
			Проводка.СубконтоКт.РаботникиОрганизации = СтруктураШапкиДокумента.Контрагент;
				
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента-СтруктураДолг.Проценты;
			
			Если РасчетыВВалюте Тогда
				ВалютнаяСумма = Проводка.Сумма;
					
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ВалютнаяСумма, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалютеРег.Курс, 
				КратностьДокумента, ДанныеОВалютеРег.Кратность);
					
					
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = ВалютнаяСумма;
				КонецЕсли;
					
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = ВалютнаяСумма;
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником Тогда
		
		// Определим способ ведения учета расчетов с персоналом - сводно/подробно
		ВестиРеглУчетРасчетовСПерсоналомПодробно = Не глЗначениеПеременной("ВестиРеглУчетРасчетовСПерсоналомСводно");
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Возврат работником задолженности по оплате труда";
		Проводка.СчетДт      = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
			Проводка.СубконтоКт.РаботникиОрганизации = СтруктураШапкиДокумента.Контрагент;
		КонецЕсли;
		
		Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		
		Если РасчетыВВалюте Тогда
			ВалютнаяСумма = Проводка.Сумма;
			
			Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ВалютнаяСумма, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
								КурсДокумента, ДанныеОВалютеРег.Курс, 
								КратностьДокумента, ДанныеОВалютеРег.Кратность);
			
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = ВалютнаяСумма;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = ВалютнаяСумма;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Проводка   = ПроводкиБУ.Добавить();
		
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		Проводка.СчетДт      = СчетДт;
		Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
			
			Если РасчетыВВалюте Тогда
				СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
			Иначе
				СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
			КонецЕсли;
			
			Проводка.СчетКт     = СчетКт;
			Проводка.Содержание = "Возврат средств от подотчетника";
			
			Проводка.СубконтоКт.РаботникиОрганизации = СтруктураШапкиДокумента.Контрагент;
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее Тогда
			
			СчетКт     = СчетУчетаРасчетовСКонтрагентом;
			
			Проводка.СчетКт     = СчетКт;
			Проводка.Содержание = "Прочие поступления";
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,1,СтруктураШапкиДокумента.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,2,СтруктураШапкиДокумента.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,3,СтруктураШапкиДокумента.СубконтоКт3);
			
		ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке Тогда
			
			Если СтруктураШапкиДокумента.СчетОрганизации.ВалютаДенежныхСредств = ВалютаРег Тогда
				СчетКт = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
			Иначе
				СчетКт = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
			КонецЕсли;
			
			Проводка.Содержание = "Получение наличных в банке";
			Проводка.СчетКт     = СчетКт;
			Проводка.СубконтоКт.БанковскиеСчета = СтруктураШапкиДокумента.СчетОрганизации;
			Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			
			Проводка.Содержание = "Расчеты по кредитам и займам";
			Проводка.СчетКт     = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].ДоговорКонтрагента);
			
		КонецЕсли;
		
		Если РасчетыВВалюте Тогда
			
			ВалютаРег      = мВалютаРегламентированногоУчета;
			ДанныеОВалюте  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, СтруктураШапкиДокумента.Дата);
			
			Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			КурсДокумента, ДанныеОВалюте.Курс, 
			КратностьДокумента, ДанныеОВалюте.Кратность);
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
		Иначе
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		НалоговыйУчетУСН.ДвиженияУСН(Ссылка, Режим);
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		НалоговыйУчетУСН.ПрочееДДС(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок)

	Если Оплачено Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(), Отказ, Заголовок);
	КонецЕсли;

	Если (НЕ ОтраженоВОперУчете) И (НЕ Оплачено) И ОтражатьВУправленческомУчете Тогда

		ОбщегоНазначения.СообщитьОбОшибке("Не выбрано правило проведения (""Отражено в опер. учете"",""Оплачено"")", Отказ, Заголовок);

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке 
		И СчетОрганизации.ВалютаДенежныхСредств <> Касса.ВалютаДенежныхСредств 
		Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не совпадают валюты банковского счета и кассы", Отказ, Заголовок);
	КонецЕсли;

	Если РасшифровкаПлатежа.Итог("СуммаПлатежа") <> СуммаДокумента Тогда

		ОбщегоНазначения.СообщитьОбОшибке("Не совпадают сумма документа и ее расшифровка", Отказ, Заголовок);

	КонецЕсли;

	Если (ОтражатьВУправленческомУчете И (ОтраженоВОперУчете ИЛИ (ОтражатьВБухгалтерскомУчете И Оплачено)))
		ИЛИ ОтражатьВБухгалтерскомУчете Тогда

		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(), Отказ, Заголовок);

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
			
			Если Не Отказ Тогда
				УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(Дата, ТаблицаПлатежейУпр, Отказ, Заголовок,,Истина);
			КонецЕсли;
			
		ИначеЕсли (ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками	
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником 
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником) 
			И РасшифровкаПлатежа[0].СуммаВзаиморасчетов=0 Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Не указана сумма взаиморасчетов с физическим лицом.",Отказ, Заголовок);
			
		КонецЕсли;

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка 
		И Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета 
		Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Прием розничной выручки производится только в валюте регламентированного учета.", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками 
		И НЕ УправлениеДенежнымиСредствами.ПроверитьЗначениеРеквизитаДокумента(РасчетныйДокумент, "Организация", Организация)
		Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организации в документе и в договоре займа не совпадают.", Отказ, Заголовок);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
		И НЕ УправлениеДенежнымиСредствами.ПроверитьЗначениеРеквизитаДокумента(РасчетныйДокумент, "Организация", Организация)
		Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, выбранная в документе, не совпадает с организацией, выбранной в договоре займа.", Отказ, Заголовок);
	КонецЕсли;

	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") 
		И Контрагент.НеЯвляетсяРезидентом 
		И Организация.ОтражатьВРегламентированномУчете 
		Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Проводить наличные расчеты с нерезидентами по данной организации запрещено.", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда

		Если (ЕстьРасчетыСКонтрагентами=истина) ИЛИ (ЕстьРасчетыПоКредитам=истина) Тогда

			СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);

		КонецЕсли;
		
		Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствПрочее И СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда
			 Сообщить("Не указан счет учета.");
			 Отказ=Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоУмолчаниюУпр()

	ОтраженоВОперУчете           = Истина;
	ОтражатьВУправленческомУчете = Истина;

КонецПроцедуры

// Процедура заполняет данные по УСН
//
Процедура ЗаполнитьНастройкуКнигиУСН() Экспорт

	#Если Клиент Тогда
	Если РучнаяНастройка_УСН Тогда
		ТекстВороса = 
		"Отражение платежа в Книге учета доходов и расходов настроено вручную.
		|Перезаполнить показатели Книги учета доходов и расходов?";
		Если Вопрос(ТекстВороса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			РучнаяНастройка_УСН = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли

	СуммаДляКУДиР = СуммаДокумента;

	Если НЕ ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		КурсВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СуммаДляКУДиР = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР, ВалютаДокумента, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
	КонецЕсли;

	Если НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата) Тогда

		Графа4_УСН      = СуммаДляКУДиР;
		Графа5_УСН      = СуммаДляКУДиР;
		Графа6_УСН      = 0;
		Графа7_УСН      = 0;
		НДС_УСН         = 0;
		ДоходыЕНВД_УСН  = Ложь;
		РасходыЕНВД_УСН = Ложь;
		Содержание_УСН  = "" + ВидОперации + ".";

		Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
			Содержание_УСН = "Возврат денежных средств поставщиком";
			Графа4_УСН      = 0;
			Графа5_УСН      = 0;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьНастройкуКнигиУСН()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "РасчетныйДокумент", "СчетУчетаПроцентовПоЗайму", "РасчетныйДокументСчетУчетаПроцентовПоЗайму");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "РасчетныйДокумент", "Субконто1", "РасчетныйДокументСубконто1");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "РасчетныйДокумент", "Субконто2", "РасчетныйДокументСубконто2");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "РасчетныйДокумент", "Субконто3", "РасчетныйДокументСубконто3");
	КонецЕсли; 


КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ПрочиеРасчетыСКонтрагентами Тогда
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;

	Иначе
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;


	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	Если СтруктураШапкиДокумента.ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ Тогда
		СтруктураШапкиДокумента.Вставить( "ВыручкаСНТТ", Истина);
	КонецЕсли;

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       			, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                       			, "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьДенежныеСредстваКомитента"       , "КонтролироватьДенежныеСредстваКомитента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");

	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		, КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	, КратностьДокумента);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если (Основание <> Неопределено) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание))) Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ДокументОснование = Основание;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	КонецЕсли;

	#Если Клиент Тогда
	Если НЕ ЗначениеЗаполнено(Касса) Тогда
		оснКасса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		КонецЕсли;
		
		Если оснКасса.Владелец <> Организация Тогда
			//ВвестиЗначение(оснКасса, "Укажите кассу поступления денежных средств", "СправочникСсылка.Кассы");
			оснКасса = Справочники.Кассы.ПустаяСсылка();
			
			формаВыбораКассы = ПолучитьФорму("ФормаВыбораКассы");
			формаВыбораКассы.Организация = Организация;
			
			Если формаВыбораКассы.ОткрытьМодально() = Истина Тогда
				оснКасса = формаВыбораКассы.Касса;
			КонецЕсли;
		КонецЕсли;
		
		Касса = оснКасса;
	КонецЕсли;
	#КонецЕсли

	ВалютаДокумента         = ?(НЕ Касса.ВалютаДенежныхСредств.Пустая(),Касса.ВалютаДенежныхСредств,мВалютаРегламентированногоУчета);

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	стрСпособЗаполнения  = "Не заполнять";

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") 
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		Контрагент   = Основание.Контрагент;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") И Основание.Проведен  Тогда
			стрСпособЗаполнения = "По заказу";
		Иначе
			стрСпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		СтрокаПлатеж.ДоговорКонтрагента   = Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		#Если Клиент Тогда
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		#КонецЕсли
	
		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СтрокаПлатеж.Сделка=Основание.ЗаказПокупателя;
			
			Если НЕ ЗначениеЗаполнено(Основание.ЗаказПокупателя) Тогда
				//заполняем заказ покупателя из табличной части
				СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
				КурсОснования=СтруктураКурсаОснования.Курс;
				КратностьОснования=СтруктураКурсаОснования.Кратность;

				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СчетНаОплатуПокупателюТовары.ЗаказПокупателя,
				|	СУММА(ВЫБОР
				|			КОГДА СчетНаОплатуПокупателюТовары.Ссылка.УчитыватьНДС
				|					И (НЕ СчетНаОплатуПокупателюТовары.Ссылка.СуммаВключаетНДС)
				|				ТОГДА СчетНаОплатуПокупателюТовары.Сумма + СчетНаОплатуПокупателюТовары.СуммаНДС
				|			ИНАЧЕ СчетНаОплатуПокупателюТовары.Сумма
				|		КОНЕЦ) КАК Сумма
				|ИЗ
				|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
				|ГДЕ
				|	СчетНаОплатуПокупателюТовары.Ссылка = &СчетНаОплату
				|
				|СГРУППИРОВАТЬ ПО
				|	СчетНаОплатуПокупателюТовары.ЗаказПокупателя";
				
				Запрос.УстановитьПараметр("СчетНаОплату",Основание.Ссылка);
				
				Выборка = Запрос.Выполнить().Выбрать();
				ПервыйПроход = Истина;
				Пока Выборка.Следующий() Цикл
					Если ПервыйПроход Тогда
						СтрокаПлатеж.Сделка = Выборка.ЗаказПокупателя;
						КопияСтрокаПлатеж = СтрокаПлатеж;
						ПервыйПроход = Ложь;
					иначе
						СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПлатеж, КопияСтрокаПлатеж);
						СтрокаПлатеж.Сделка = Выборка.ЗаказПокупателя;
					КонецЕсли;
					
					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					                                   КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
					СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
					                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
					СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
					УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
				КонецЦикла;
				
				стрСпособЗаполнения = "";
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		или ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
		или ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		СтрокаПлатеж.Проект = Основание.Проект;
		
		Если ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			Иначе
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		Иначе
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			Иначе
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;

		#Если Клиент Тогда
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		#КонецЕсли

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты( СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		СтрокаПлатеж.Проект = Основание.Проект;
		
		Если ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			Иначе
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		Иначе
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			Иначе
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;

		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком;
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		СтрокаПлатеж.Проект = Основание.Проект;
		
		Если ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По взаиморасчетам";
			КонецЕсли;
		Иначе
			Если Основание.Проведен Тогда
				стрСпособЗаполнения = "По сумме документа";
			КонецЕсли;
		КонецЕсли;

		#Если Клиент Тогда
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		#КонецЕсли

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда

		ЗаполнитьПоРКОУпр();

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка;
		
		Если Основание.ВидОперации=Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			ВидПриемаРозничнойВыручки=Перечисления.ВидПриемаРозничнойВыручки.ИзКассы; 	
			Контрагент   = Основание.КассаККМ;
		ИначеЕсли Основание.ВидОперации=Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
			ВидПриемаРозничнойВыручки=Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ; 	
			Контрагент   = Основание.Склад;
		КонецЕсли;

		стрСпособЗаполнения = "По розничной выручке";
		
		#Если Клиент Тогда
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		#КонецЕсли

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДенежныйЧек") Тогда

		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();

		ВалютаДокумента = Основание.ВалютаДокумента;
		Касса           = Основание.Касса;
		СчетОрганизации = Основание.СчетОрганизации;
		Организация     = Основание.Организация;
		Ответственный   = Основание.Ответственный;
		СуммаДокумента  = Основание.СуммаДокумента;
		ВидОперации     = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке;
		
		ДенежныйЧек=Основание.Ссылка;

		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Основание.СтатьяДвиженияДенежныхСредств;

	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
		
		Если Основание.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
			Сообщить("Документом планировалось поступление безналичных денежных средств.");
			Возврат;
		КонецЕсли;
		
		ВидОперацииПоступление = Основание.ВидОперации;
		#Если Клиент Тогда
		СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		#КонецЕсли
		
		УправлениеДенежнымиСредствами.ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииПоступление);
		
		Организация = Основание.Организация;
		ВалютаДокумента = Основание.ВалютаДокумента;
		
		Если ЗначениеЗаполнено(Основание.БанковскийСчетКасса) Тогда
			Касса = Основание.БанковскийСчетКасса;
		КонецЕсли;
		
		Ответственный     = Основание.Ответственный;
		
		Если ВалютаДокумента.Пустая() Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
		
		Если ВидОперации=Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка Тогда
			
			ВидПриемаРозничнойВыручки=Основание.ВидПриемаРозничнойВыручки;
			Контрагент=Основание.КассаККМ;
						
		КонецЕсли;
		
		УправлениеДенежнымиСредствами.ЗаполнитьПоПланируемомуПоступлениюУпр(РасшифровкаПлатежа,
							Основание,
							СтавкаНДС, 
							ВалютаДокумента,
							КурсДокумента,
							КратностьДокумента,
							ВидОперации);
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником")	Тогда

		СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();

		ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками;

		Контрагент        = Основание.ФизЛицо;
		РасчетныйДокумент = Основание;

		ВалютаВзаиморасчетовПодотчетника     = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		ПолучитьОстатокПоДоговоруЗаймаУпр(Основание);
		
		ВалютаУчета=СтруктураДолг.Валюта;
		
		СтруктураКурсУчета=МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУчета, Основание.Дата);
		
		СуммаДокумента=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураДолг.ОсновнойДолг+СтруктураДолг.Проценты, 
		                            ВалютаУчета, ВалютаДокумента,
		                            СтруктураКурсУчета.Курс, КурсДокумента,
		                            СтруктураКурсУчета.Кратность, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
		                            ВалютаДокумента,ВалютаВзаиморасчетовПодотчетника,
		                            КурсДокумента,СтрокаПлатеж.КурсВзаиморасчетов, 
		                            КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

	КонецЕсли;

	ПроверкаКурсовВалют(СтрокаПлатеж);

	Если стрСпособЗаполнения = "По заказу" Тогда
		ЗаполнитьПоЗаказуУпр(СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли стрСпособЗаполнения = "По взаиморасчетам" Тогда
		
		УправлениеДенежнымиСредствами.ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,1);
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли стрСпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);

	ИначеЕсли стрСпособЗаполнения = "По розничной выручке" Тогда
		ЗаполнитьПоРозничнойВыручкеУпр(СтрокаПлатеж);

	ИначеЕсли стрСпособЗаполнения = "По сумме документа" Тогда
		ЗаполнитьПоСуммеДокументаУпр(СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	ОтраженоВОперУчете=Истина;
	Оплачено=Истина;
	ОтражатьВУправленческомУчете=Истина;
	
	Если (ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками) И
		НЕ ВалютаВзаиморасчетовПодотчетника=ВалютаДокумента Тогда
		
		ОтражатьВБухгалтерскомУчете=Ложь;
		ОтражатьВНалоговомУчете=Ложь;
		
	Иначе
		
		ОтражатьВБухгалтерскомУчете=Истина;
		
	КонецЕсли;
			
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Платеж.ДоговорКонтрагента);
				Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком тогда
					Платеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
					Платеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансов;
				Иначе
					Платеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
					Платеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Платеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Платеж.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;

	КонецЦикла;

	Если ПринятоОт="" И ЗначениеЗаполнено(Контрагент) Тогда

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ПринятоОт =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);

		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником
			ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда

			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("ФизЛицо",Контрагент);

			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда

				ПринятоОт = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");

			КонецЕсли;

			Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда

				ЭтотОбъект.Основание=Лев(Строка(РасчетныйДокумент),Найти(Строка(РасчетныйДокумент),Строка(РасчетныйДокумент.Дата))-1)+Формат(РасчетныйДокумент.Дата,"ДФ=dd.MM.yyyy");

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");

	ЗаполнитьРеквизитыПоУмолчаниюУпр();

	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, Режим);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Режим);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(Дата,ВалютаДокумента,Ссылка, "ПриходныйКассовыйОрдер");

	ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок);

	Если ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ПолучитьОстатокПоДоговоруЗаймаУпр(РасчетныйДокумент);
	КонецЕсли;

	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете тогда
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл

			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
												СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
												мВалютаРегламентированногоУчета, Истина, Отказ, 
												Заголовок, "Строка " + СтрокаОплаты.НомерСтроки + " - ");

		КонецЦикла;
	КонецЕсли;

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Наличные);
