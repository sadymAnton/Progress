Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Формирование печатных форм для заявки на внутреннюю сертификацию
//
Функция ПечатьИзвещения(ПарамОбъект) Экспорт

	ТабДок = Новый ТабличныйДокумент;
	
	Если ПарамОбъект = "ИзвещениеПродукция" Тогда
		Макет = ПолучитьМакет("ИзвещениеПродукция");
		Секция = Макет.ПолучитьОбласть("Основа");
		Секция.Параметры.Подразделение = Подразделение;
		Секция.Параметры.Организация = Организация;
		Секция.Параметры.НомерДок = Номер;
		Секция.Параметры.ДатаДок = Формат(Дата,"ДЛФ = ДД");
		Секция.Параметры.Номенклатура = Номенклатура.НаименованиеПолное;
		Секция.Параметры.НоменклатураРасшифровка = Номенклатура;
		Секция.Параметры.СерияНоменклатуры = СерияНоменклатуры;
		КоличествоПоСерии = 0;
		
		Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
			КоличествоПоСерии = УправлениеСертификациейНоменклатуры.ПолучитьОбщееКоличествоПоступленияПоСериям(СерияНоменклатуры);
		КонецЕсли;
		
		Секция.Параметры.Количество = КоличествоПоСерии;  
		Секция.Параметры.НормативныйДокумент = НормативныйДокумент;
	Иначе
		Макет = ПолучитьМакет("ИзвещениеСырьеМатериалы");
		Секция = Макет.ПолучитьОбласть("Основа");
		Секция.Параметры.Организация = Организация;
		Секция.Параметры.НомерДок = Номер;
		Секция.Параметры.ДатаДок = Формат(Дата,"ДЛФ = ДД") + " " + Формат(Дата,"ДФ = ЧЧ") + " час. " + Формат(Дата,"ДФ = мм") + " мин.";
		Секция.Параметры.Склад = Склад;
		Секция.Параметры.Номенклатура = Номенклатура.НаименованиеПолное; 
		Секция.Параметры.НоменклатураРасшифровка = Номенклатура;
		Секция.Параметры.СерияНоменклатуры = СерияНоменклатуры;
		КоличествоПоСерии = 0;
		
		Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
			КоличествоПоСерии = УправлениеСертификациейНоменклатуры.ПолучитьОбщееКоличествоПоступленияПоСериям(СерияНоменклатуры);
		КонецЕсли;
		
		Секция.Параметры.Количество = КоличествоПоСерии;  
		Секция.Параметры.Масса = Строка(КоличествоПоСерии * Номенклатура.ЕдиницаХраненияОстатков.Вес) + " кг. (" + 
		Строка(КоличествоПоСерии * Номенклатура.ЕдиницаХраненияОстатков.Объем) + " куб. метров) ";
		
		Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
			Секция.Параметры.Поставщик = УправлениеСертификациейНоменклатуры.ПолучитьПоставщикаСерии(СерияНоменклатуры);
		Иначе
			Секция.Параметры.Поставщик = "";
		КонецЕсли;
		
		Секция.Параметры.Изготовитель = "";
	КонецЕсли;
	ТабДок.Вывести(Секция);
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьИзвещения()

// Формирование печатной формы заявки на внешнюю сертификацию
//
Функция ПечатьЗаявкиНаСертификацию() Экспорт

	ТабДок = Новый ТабличныйДокумент;
	Макет  = ПолучитьМакет("ЗаявкаНаСертификациюНоменклатуры");
	Секция = Макет.ПолучитьОбласть("Основа");
	Секция.Параметры.Контрагент = ОрганПоСертификации;
	ФильтрОтбораИнф = Новый Структура("Объект, Тип, Вид",ОрганПоСертификации, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	Выборка = РегистрыСведений.КонтактнаяИнформация.Получить(ФильтрОтбораИнф);
	Секция.Параметры.АдресКонтрагента = Выборка.Представление;
	АттестатКонтрагента = УправлениеСертификациейНоменклатуры.ПолучитьАттестатАккредитации(ОрганПоСертификации,Дата);
	Секция.Параметры.Организация = Организация;
	Секция.Параметры.ОКПО = Организация.КодПоОКПО;
	ФильтрОтбораИнф = Новый Структура("Объект, Тип, Вид",Организация, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Выборка = РегистрыСведений.КонтактнаяИнформация.Получить(ФильтрОтбораИнф);
	Секция.Параметры.Адрес = Выборка.Представление;
    Секция.Параметры.БанковскиеРеквизиты = Организация.ОсновнойБанковскийСчет;
	ФильтрОтбораИнф = Новый Структура("Объект, Тип, Вид",Организация, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	Выборка = РегистрыСведений.КонтактнаяИнформация.Получить(ФильтрОтбораИнф);
	Секция.Параметры.Телефон = Выборка.Представление;
	ФильтрОтбораИнф = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо",Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Выборка = РегистрыСведений.ОтветственныеЛицаОрганизаций.Получить(Дата,ФильтрОтбораИнф);
	Секция.Параметры.Руководитель = Выборка.ФизическоеЛицо;
	Секция.Параметры.Номенклатура = Номенклатура;
	
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		Секция.Параметры.ДанныеНоменклатуры = Строка(СерияНоменклатуры) + "  " + Строка(УправлениеСертификациейНоменклатуры.ПолучитьОбщееКоличествоПоступленияПоСериям(СерияНоменклатуры)) + "  " + Строка(Номенклатура.ЕдиницаХраненияОстатков);
	Иначе
		Секция.Параметры.ДанныеНоменклатуры = "";
	КонецЕсли;
	
	Секция.Параметры.НормативныйДокумент = НормативныйДокумент;
	Секция.Параметры.ДатаДок = Дата;
	Секция.Параметры.СерияНоменклатуры = СерияНоменклатуры;
	ТабДок.Вывести(Секция);
	
	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		Запрос1 = Новый Запрос;
		ТекстЗапроса = "
		|ВЫБРАТЬ 	
		|		ПоступлениеТоваровУслуг.Ссылка,
		|		Дата
		|ИЗ	
		|		Документ.ПоступлениеТоваровУслуг ПоступлениеТоваровУслуг,
		|		Документ.ПоступлениеТоваровУслуг.Товары  ПоступлениеТоваровУслугТовары
		|ГДЕ 
		|		(СерияНоменклатуры = &Серия) И Проведен И ОтражатьВУправленческомУчете
		|		И (ПоступлениеТоваровУслуг.Ссылка = ПоступлениеТоваровУслугТовары.Ссылка)
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ 
		|		Документ.ЗаявкаНаСертификациюНоменклатуры.Ссылка, 
		|		Дата
		|ИЗ 	
		|		Документ.ЗаявкаНаСертификациюНоменклатуры
		|ГДЕ 
		|		(СерияНоменклатуры = &Серия) И Проведен
		|		И (ВидОперации = &ВидОпЗаявки)
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ 
		|		Документ.АктОтбораПробНоменклатуры.Ссылка, 
		|		Дата
		|ИЗ 
		|		Документ.АктОтбораПробНоменклатуры
		|ГДЕ 
		|		(СерияНоменклатуры = &Серия)  И (Проведен) 
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ 
		|		Документ.СертификацияНоменклатуры.Ссылка, 
		|		Дата
		|ИЗ 
		|		Документ.СертификацияНоменклатуры
		|ГДЕ 
		|		(СерияНоменклатуры = &Серия) И Проведен
		|		И (ВидОперации = &ВидОпСертификации)
		|";
		Если Метаданные.Документы.Найти("ОтчетПроизводстваЗаСмену") <> Неопределено Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ
			|ВЫБРАТЬ      
			|		ОтчетПроизводстваЗаСмену.Ссылка, 
			|		Дата 
			|ИЗ 
			|		Документ.ОтчетПроизводстваЗаСмену ОтчетПроизводстваЗаСмену,
			|		Документ.ОтчетПроизводстваЗаСмену.Продукция ОтчетПроизводстваЗаСменуПродукция
			|ГДЕ 
			|		(СерияНоменклатуры = &Серия) И (Проведен) И ОтражатьВУправленческомУчете
			|		И (ОтчетПроизводстваЗаСмену.Ссылка = ОтчетПроизводстваЗаСменуПродукция.Ссылка)
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "УПОРЯДОЧИТЬ ПО Дата ВОЗР";
		Запрос1.Текст = ТекстЗапроса;
		Запрос1.УстановитьПараметр("Серия",СерияНоменклатуры);
		Запрос1.УстановитьПараметр("ВидОпСертификации",Перечисления.ВидыОперацийСертификацияНоменклатуры.внутренняя);
		Запрос1.УстановитьПараметр("ВидОпЗаявки",Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.внутренняя);
		ТЗ = Запрос1.Выполнить().Выгрузить();
		Секция = Макет.ПолучитьОбласть("ПриложениеШапка");
		ТабДок.Вывести(Секция);
		Секция = Макет.ПолучитьОбласть("ПриложениеСтрока");
		
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			Если СокрЛП(СтрокаТЗ.Ссылка.Метаданные().Имя) = "ЗаявкаНаСертификациюНоменклатуры" Тогда
				Секция.Параметры.Документ = "Извещение";
			ИначеЕсли СокрЛП(СтрокаТЗ.Ссылка.Метаданные().Имя) = "Сертификация" Тогда
				Секция.Параметры.Документ = "Аналитический паспорт"; 
			Иначе
				Секция.Параметры.Документ = СтрокаТЗ.Ссылка.Метаданные();
			КонецЕсли;
			Секция.Параметры.НомерДокумента = СокрЛП(СтрокаТЗ.Ссылка.Номер);
			Секция.Параметры.ДокументРасшифровка = СтрокаТЗ.Ссылка;
			ТабДок.Вывести(Секция);
		КонецЦикла;
		
		Секция = Макет.ПолучитьОбласть("ПриложениеПодвал");
		ТабДок.Вывести(Секция);
	КонецЕсли;
	
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьЗаявкиНаСертификацию()	

// Выбор процедуры печати
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "ЗаявкаНаСертификациюНоменклатуры" Тогда
		ТабДокумент = ПечатьЗаявкиНаСертификацию();	
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 

	Иначе
		ТабДокумент = ПечатьИзвещения(ИмяМакета);
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
	
КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.внутренняя Тогда
		
		Возврат Новый Структура("ИзвещениеПродукция,ИзвещениеСырьеМатериалы","Извещение на продукцию", "Извещение на материалы");
		
	Иначе
		Возврат Новый Структура("ЗаявкаНаСертификациюНоменклатуры","Заявка на сертификацию");
		
	КонецЕсли;

	

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Проверяет правильность заполнения шапки документа.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена Номенклатура!", Отказ, Заголовок);
		
	Иначе
		
		Если НЕ Номенклатура.ТребуетсяВнешняяСертификация И НЕ Номенклатура.ТребуетсяВнутренняяСертификация Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Для номенклатуры не требуется сертификация номенклатуры!", Отказ, Заголовок);
			
		ИначеЕсли НЕ Номенклатура.ТребуетсяВнешняяСертификация И ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.Внешняя Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Для номенклатуры не требуется внешняя сертификация номенклатуры!", Отказ, Заголовок);
			
		ИначеЕсли НЕ Номенклатура.ТребуетсяВнутренняяСертификация И ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.Внутренняя Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Для номенклатуры не требуется внутренняя сертификация номенклатуры!", Отказ, Заголовок);
			
		КонецЕсли;  
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнена Серия номенклатуры!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Документ может вводится на основании Поступления товаров и услуг и Отчета производства за смену
// 
Процедура ОбработкаЗаполнения(Основание) Экспорт

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
	
		Организация           = Основание.Организация;
		Подразделение         = Основание.Подразделение;
		ДокументОприходования = Основание.Ссылка;
		Склад                 = Основание.СкладОрдер;
		
	ИначеЕсли Метаданные.Документы.Найти("ОтчетПроизводстваЗаСмену") <> Неопределено И ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
	
		Организация           = Основание.Организация;
		Подразделение         = Основание.Подразделение;
		ДокументОприходования = Основание.Ссылка;
		Склад                 = Основание.Склад;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Устанавливает значения по умолчанию
// 
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура обработки проведения проверяет корректность заполнения реквизитов документа
// Документ проводится по одному из двух регистров сведений ВнешняяСертификацияНоменклатуры или ВнутренняяСертификацияНоменклатуры
// в зависимости от вида операции
// 
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	НаборЗаписей = Движения.СертификацияНоменклатуры;
	Движение = НаборЗаписей.Добавить();
	Движение.Период = Дата;
	Движение.ВидСертификата = ?( ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.Внешняя,
											Перечисления.ВидыСертификацииНоменклатуры.ВнешняяСертификация,
											Перечисления.ВидыСертификацииНоменклатуры.ВнутренняяСертификация);
	Движение.СерияНоменклатуры     = СерияНоменклатуры;
	Движение.СостояниеСертификации = Перечисления.СостоянияСертификацииНоменклатуры.Заявка;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры


