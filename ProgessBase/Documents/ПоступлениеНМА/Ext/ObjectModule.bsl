Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем УчетнаяПолитикаБух;

//Бирюков проведение по рег. взаиморасчетов
Перем мСтруктураПараметровВзаиморасчетов Экспорт;
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "СправкаРасчетВал" тогда

		// Справка-расчет формирования рублевой суммы документа в валюте
		БухгалтерскийУчетРасчетовСКонтрагентами.НапечататьСправкуРасчетРублеваяСуммаДокументаВВалюте(Ссылка);
		Возврат;
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура;
	СтруктПечатныхФорм.Вставить( "СправкаРасчетВал", "Справка-расчет ""Рублевая сумма документа в валюте""");
	
	Возврат СтруктПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли

// Заполняет счета БУ в строке табличной части
//
Процедура ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ)

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	Если ЗаполнятьБУ = Истина Тогда
		СтрокаТЧ.СчетУчетаБУ  = СчетаУчета.СчетУчетаБУ;
		СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		СтрокаТЧ.СчетУчетаБУ  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Заполняет счета НУ в строке табличной части
//
Процедура ЗаполнитьСчетаНУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ)

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	Если НЕ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
		Возврат;
	КонецЕсли;

	Если ЗаполнятьНУ = Истина Тогда
		СтрокаТЧ.СчетУчетаНУ  = СчетаУчета.СчетУчетаНУ;
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		СтрокаТЧ.СчетУчетаНУ  = ПланыСчетов.Налоговый.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчета = Новый Структура("СчетУчетаБУ, СчетУчетаНУ, СчетУчетаНДС");
	
	Если СтрокаТЧ.НематериальныйАктив.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		СчетаУчета.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов;
		СчетаУчета.СчетУчетаНУ = ПланыСчетов.Налоговый.ПриобретениеНематериальныхАктивов;
	Иначе
		СчетаУчета.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР;
		СчетаУчета.СчетУчетаНУ = ПланыСчетов.Налоговый.ВыполнениеНИОКР;
	КонецЕсли;
	
	СчетаУчета.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымНематериальнымАктивам;

	ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ);
	ЗаполнитьСчетаНУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ);

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура проверяет наличие дублей строк в таб. части документа.
// Нельзя указывать одно и тоже НМА в таб. части дважды.
//
Процедура ПроверитьДублиНМА(Отказ, Заголовок)
	
	СписокДублей = Новый Соответствие;
	СтруктПоиска = Новый Структура;
	ЕстьДубли = Ложь;
	
	Для Каждого СтрокаТЧ Из НематериальныеАктивы Цикл
		
		СтруктПоиска.Вставить( "НематериальныйАктив", СтрокаТЧ.НематериальныйАктив);
		НаборСтрок = НематериальныеАктивы.НайтиСтроки(СтруктПоиска);
		Если НаборСтрок.Количество() <= 1 Тогда
			Продолжить;
		КонецЕсли;
		ЕстьДубли = Истина;
		
		// Надо выдать сообщение об ошибке
		Если СписокДублей[СтрокаТЧ.НематериальныйАктив] = Неопределено Тогда
			СписокДублей.Вставить(СтрокаТЧ.НематериальныйАктив, 0);
			ТекстОшибки = "Дублируется нематериальный актив """ + СтрокаТЧ.НематериальныйАктив + """ в строках №№ ";
			Для Каждого СтрокаНабора Из НаборСтрок Цикл
				ТекстОшибки = ТекстОшибки + " " + СтрокаНабора.НомерСтроки + ",";
			КонецЦикла;
			ТекстОшибки = Лев( ТекстОшибки, СтрДлина(ТекстОшибки) - 1);
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьДубли Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Нельзя дублировать нематериальный актив!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДублиНМА()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаТоваров.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	// Порядок вызова в данном случае важен							 
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		НДС   = СтрокаТаблицы.СуммаНДС;
		Сумма = ?(СуммаВключаетНДС, СтрокаТаблицы.Стоимость - НДС, СтрокаТаблицы.Стоимость);

		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьДокумента,
			                                 Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НДС, СтруктураШапкиДокумента.ВалютаДокумента,
			                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсДокумента,
			                                 Данные.Курс, 
			                                 СтруктураШапкиДокумента.КратностьДокумента,
			                                 Данные.Кратность);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметров)
	
ДокументВВалютеРасчетов = (СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",					Ссылка);
	Запрос.УстановитьПараметр("Курс",					СтруктураПараметров.КурсДокумента);
	Запрос.УстановитьПараметр("Кратность",				СтруктураПараметров.КратностьДокумента);
	Запрос.УстановитьПараметр("РасчетыВУсловныхЕдиницах",СтруктураПараметров.РасчетыВУсловныхЕдиницах);
	Запрос.УстановитьПараметр("ДокументВВалютеРасчетов",ДокументВВалютеРасчетов);
	Запрос.УстановитьПараметр("КурсВзаиморасчетов",		?(СтруктураПараметров.РасчетыВУсловныхЕдиницах,СтруктураПараметров.КурсВзаиморасчетов,1));
	Запрос.УстановитьПараметр("КратностьВзаиморасчетов",?(СтруктураПараметров.РасчетыВУсловныхЕдиницах,СтруктураПараметров.КратностьВзаиморасчетов,1));
	Запрос.УстановитьПараметр("ВидЦенностиНМА",			Перечисления.ВидыЦенностей.НМА);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&ВидЦенностиНМА КАК ВидЦенности,
	|	ТаблицаТоваров.НематериальныйАктив КАК Номенклатура,
	|	ТаблицаТоваров.СчетУчетаБУ КАК КоррСчет,
	|	ТаблицаТоваров.СчетУчетаНУ КАК СчетУчетаНУ,
	|	ТаблицаТоваров.СчетУчетаНДС КАК СчетНДС,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаТоваров.Ссылка.СуммаВключаетНДС
	|				ТОГДА ТаблицаТоваров.Сумма
	|			ИНАЧЕ ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС
	|		КОНЕЦ * &Курс / &Кратность) КАК СуммаСНДС,
	|	СУММА(ТаблицаТоваров.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА &ДокументВВалютеРасчетов = ИСТИНА
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА ТаблицаТоваров.Ссылка.СуммаВключаетНДС
	|							ТОГДА ТаблицаТоваров.Сумма
	|						ИНАЧЕ ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС
	|					КОНЕЦ)
	|		КОГДА &ДокументВВалютеРасчетов = ЛОЖЬ
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА ТаблицаТоваров.Ссылка.СуммаВключаетНДС
	|							ТОГДА ТаблицаТоваров.Сумма
	|						ИНАЧЕ ТаблицаТоваров.Сумма + ТаблицаТоваров.СуммаНДС
	|					КОНЕЦ * &КратностьВзаиморасчетов / &КурсВзаиморасчетов)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеНМА.НематериальныеАктивы КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.НематериальныйАктив,
	|	ТаблицаТоваров.СчетУчетаБУ,
	|	ТаблицаТоваров.СчетУчетаНУ,
	|	ТаблицаТоваров.СчетУчетаНДС,
	|	ТаблицаТоваров.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС";
	Результат = Запрос.Выполнить();
	ТаблицаДвижений = Результат.Выгрузить();
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1");
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2");
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3");
	Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1");
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2");
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3");
	КонецЕсли;
	Для Каждого Движение Из ТаблицаДвижений Цикл
		КоррСчет = Движение["КоррСчет"];
		Если КоррСчет.ВидыСубконто.Количество()>0 тогда
			ВидСубк = КоррСчет.ВидыСубконто[0].ВидСубконто;
			Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["Номенклатура"])) Тогда
				Движение["КоррСубконто1"] = Движение["Номенклатура"];
			Конецесли;
		КонецЕсли;
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			СчетНУ = Движение["СчетУчетаНУ"];
			Если СчетНУ.ВидыСубконто.Количество()>0 тогда
				ВидСубк = КоррСчет.ВидыСубконто[0].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(Движение["Номенклатура"])) Тогда
					Движение["СубконтоНУ1"] = Движение["Номенклатура"];
				Конецесли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаДвижений;
КонецФункции

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, 
	                             |ВалютаДокумента, Контрагент, ДоговорКонтрагента, 
	                             |КурсВзаиморасчетов,КратностьВзаиморасчетов");

	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
		Если НЕ НДСВключенВСтоимость Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНУ");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("НематериальныйАктив, Сумма");
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоНМА, Отказ, Заголовок);

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоНМА, Отказ, Заголовок);
							  
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ);
								   
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ, Заголовок);


КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоНМА,
							Отказ, Заголовок)

	//Бирюков проведение по взаиморасчетам
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование проводок
	// Проводки по поступлению товаров, тары и услуг.
	ДатаДока   = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	
	Содержание = "Поступление НМА по вх.д. " + НомерВходящегоДокумента + " от " + Формат(ДатаВходящегоДокумента, "ДЛФ=Д");

	// Проводки по поступлению ОС
	Для каждого СтрокаТаблицы Из ТаблицаПоНМА Цикл
		// Движения по регистру СостоянияНМАОрганизаций
		Движение = Движения.СостоянияНМАОрганизаций.Добавить();
		Движение.Период                      = Дата;
		Движение.НематериальныйАктив         = СтрокаТаблицы.НематериальныйАктив;
		Движение.Организация                 = Организация;
		Движение.Состояние                   = Перечисления.ВидыСостоянийНМА.Поступил;

		//Формирование проводок
		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период                  = Дата;
		Проводка.Активность              = Истина;
		Проводка.Организация             = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание              = Содержание;
		Проводка.НомерЖурнала            = "НА";

		Проводка.СчетДт                  = СтрокаТаблицы.СчетУчетаБУ;
		Если СтрокаТаблицы.СчетУчетаБУ.ВидыСубконто.Количество() > 0 Тогда
			БухгалтерскийУчет.УстановитьСубконто(СтрокаТаблицы.СчетУчетаБУ, Проводка.СубконтоДт, 1, СтрокаТаблицы.НематериальныйАктив);
		КонецЕсли;
		
		Проводка.СчетКт                  = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		Проводка.СубконтоКт.Контрагенты  = СтруктураШапкиДокумента.Контрагент;
		Проводка.СубконтоКт.Договоры     = СтруктураШапкиДокумента.ДоговорКонтрагента;

		Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
			Проводка.Сумма = СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаНДС;
		Иначе
			Проводка.Сумма = СтрокаТаблицы.ПроводкаСумма;
		КонецЕсли;

		Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				Проводка.ВалютнаяСуммаКт = (СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаНДС) / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента
			Иначе
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкаСумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
			КонецЕсли;
		КонецЕсли;

		// Проводка по НДС
		Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС 
		   И СтрокаТаблицы.ПроводкаСуммаНДС > 0 Тогда
		   
		   НалоговыйАгентЗаСчетСобственныхСредств = УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(СтрокаТаблицы.ВидЦенности);
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                 = Дата;
			Проводка.Активность             = Истина;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                  = СтрокаТаблицы.ПроводкаСуммаНДС;
			Проводка.Содержание             = Содержание;
			Проводка.НомерЖурнала           = "НА";

			Проводка.СчетДт                 = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", Ссылка);

			Если Не НалоговыйАгентЗаСчетСобственныхСредств 
				Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
						
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
				Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ПроводкаСуммаНДС / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
				КонецЕсли;
				
			Иначе
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
				
			КонецЕсли;
				
			Если СтруктураШапкиДокумента.УчетАгентскогоНДС
				И (Не НалоговыйАгентЗаСчетСобственныхСредств 
				Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда
				// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
				Проводка2 = ПроводкиБУ.Добавить();

				Проводка2.Период                 = Дата;
				Проводка2.Организация            = СтруктураШапкиДокумента.Организация;
				Проводка2.Сумма                  = СтрокаТаблицы.ПроводкаСуммаНДС;
				Проводка2.Содержание             = Содержание + " (НДС в качестве налогового агента)";

				Проводка2.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				Проводка2.СубконтоДт.Контрагенты = СтруктураШапкиДокумента.Контрагент;
				Проводка2.СубконтоДт.Договоры    = СтруктураШапкиДокумента.ДоговорКонтрагента;
				
				Если Проводка2.СчетДт.Валютный Тогда
					Проводка2.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка2.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкаСуммаНДС / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента;
				КонецЕсли;
					
				Если Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
					Проводка2.СчетКт                 = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(СтрокаТаблицы.СчетКт,Проводка2.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				Иначе
					Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
				КонецЕсли;	

			КонецЕсли;
			
		КонецЕсли; // Проводка по НДС

		// Налоговый учет
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			Проводка = ПроводкиНУ.Добавить();
			Проводка.Период                  = ДатаДока;
			Проводка.Активность              = Истина;
			Проводка.Организация             = СтруктураШапкиДокумента.Организация;
			Если СтруктураШапкиДокумента.НДСВключенВСтоимость Тогда
				Проводка.Сумма = СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаНДС;
			Иначе
				Проводка.Сумма = СтрокаТаблицы.ПроводкаСумма;
			КонецЕсли;
			Проводка.Содержание              = Содержание;
			Проводка.НомерЖурнала            = "НА";

			Проводка.СчетДт                  = СтрокаТаблицы.СчетУчетаНУ;
			Если СтрокаТаблицы.СчетУчетаБУ.ВидыСубконто.Количество() > 0 Тогда
				БухгалтерскийУчет.УстановитьСубконто(СтрокаТаблицы.СчетУчетаБУ, Проводка.СубконтоДт, 1, СтрокаТаблицы.НематериальныйАктив);
			КонецЕсли;

			Проводка.СчетКт                  = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			Проводка.СубконтоКт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
			Проводка.СубконтоКт.Контрагенты  = СтруктураШапкиДокумента.Контрагент;
			Проводка.СубконтоКт.Договоры     = СтруктураШапкиДокумента.ДоговорКонтрагента;
		КонецЕсли;
		
	КонецЦикла;
	
	// Движения по взаиморасчетам
	
	//Бирюков проведение по рег.взаиморасчетов
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	СтруктураШапкиДокумента.Вставить("ВидДоговора", ДоговорКонтрагента.ВидДоговора);
	СтруктураШапкиДокумента.Вставить("ВалютаУправленческогоУчета", СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ОтражатьВРегламентированномУчете", ОтражатьВБухгалтерскомУчете);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете", Ложь);
	СтруктураШапкиДокумента.Вставить("ВестиПоДокументамРасчетовСКонтрагентом", Истина);
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", ДоговорКонтрагента.КонтролироватьЧислоДнейЗадолженности);
	КонтролироватьСуммуЗадолженности = ДоговорКонтрагента.КонтролироватьСуммуЗадолженности;
	Если КонтролироватьСуммуЗадолженности Тогда
		СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Истина);
		СтруктураШапкиДокумента.Вставить("ДопустимоеЧислоДнейЗадолженности", ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженности);
		СтруктураШапкиДокумента.Вставить("ДопустимаяСуммаЗадолженности", ДоговорКонтрагента.ДопустимаяСуммаЗадолженности);
	Иначе
		СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	КонецЕсли;
	
	ТаблицаСуммПоступления = Новый ТаблицаЗначений;
	ЧисловыеКолонки = "СуммаВзаиморасчетов, СуммаРегл, СуммаУпр";
	СтруктураЧисловыхКолонок = Новый Структура(ЧисловыеКолонки);
	Для каждого ЧисловаяКолонка Из СтруктураЧисловыхКолонок Цикл
		ТаблицаСуммПоступления.Колонки.Добавить(ЧисловаяКолонка.Ключ, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	КонецЦикла;
	
	ТаблицаСуммПоступления.Добавить();
	
	Для каждого ЧисловаяКолонка Из СтруктураЧисловыхКолонок Цикл
		ТаблицаСуммПоступления.ЗаполнитьЗначения(СуммаДокумента,);
	КонецЦикла;
	
	СтруктураПодготовленныхТаблиц = Новый Структура("ТаблицаСуммПоступления", ТаблицаСуммПоступления);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		        мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		        ВидДвиженияНакопления.Расход, Отказ, Заголовок);
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, мВалютаРегламентированногоУчета, Заголовок,СтруктураШапкиДокумента.СуммаДокумента, , СтруктураШапкиДокумента);
	Если СтруктураПараметровЗачетАванса = ложь тогда
	   //Отказ = Истина;
	   СуммаАванса = 0;
	Иначе
	   ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметровЗачетАванса);
	   СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса,
	   		ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению);
	КонецЕсли;
	
	Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
		Конецесли;
		СтруктураПараметровЗачетАванса.Вставить("ВестиПоДокументамРасчетовСКонтрагентом", Истина); //Бирюков иначе взаиморасчетов не будет 
		БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса,
			мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
	Конецесли;

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоНМА,Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;

	НаборДвижений = Движения.РасходыПриУСН;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	НалоговыйУчетУСН.ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПоНМА, ТаблицаДвижений, 
							Перечисления.ВидыРасходовУСН.НМА, СтруктураШапкиДокумента.ДоговорКонтрагента,
							Перечисления.СтатусыПартийУСН.Купленные, СтруктураШапкиДокумента.СуммаВключаетНДС);
									
	//Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
			
	//Зачет аванса													
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ) Экспорт

	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	Если Не ТаблицаПоНМА.Количество() = 0 Тогда
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоНМА, Отказ);
	КонецЕсли;
			
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()							  

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, НематериальныеАктивы);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ)

	УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"        , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"     , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"         , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                  , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "УчетАгентскогоНДС"            , "УчетАгентскогоНДС");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидАгентскогоДоговора"        , "ВидАгентскогоДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "НалоговыйАгентПоОплате"       , "НалоговыйАгентПоОплате");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоНМА) Экспорт
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НематериальныйАктив"       , "НематериальныйАктив");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"          		, "СтавкаНДС");
	СтруктураПолей.Вставить("СуммаНДС"                  , "СуммаНДС");
	СтруктураПолей.Вставить("НДС"                  		, "СуммаНДС");
	СтруктураПолей.Вставить("СчетУчетаБУ",  "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНУ",  "СчетУчетаНУ");
	
	РезультатЗапросаПоНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "НематериальныеАктивы", СтруктураПолей);

	// Подготовим таблицы товаров для проведения.
	ТаблицаПоНМА      = ПодготовитьТаблицуТоваров(РезультатЗапросаПоНМА, СтруктураШапкиДокумента);

	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоНМА, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоНМА;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ);
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	 	ОбщегоНазначения.СообщитьОбОшибке("Документ в обязательном порядке должен отражаться в бухгалтерском учете!",Отказ, Заголовок);
	КонецЕсли; 

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоНМА);
	
	// Проверить заполнение ТЧ 
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоНМА, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПроверитьДублиНМА(Отказ, Заголовок);

	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
		мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	КонецЕсли;
	
	// <- Шевченков №33032
	Если ЭтотОбъект.ОтражатьВБухгалтерскомУчете И Константы.ПРГ_ПроверятьУсловияПоДоговорам.Получить() Тогда
		Отказ = НЕ ПРГ_Обработки.РазрешеноПроводитьВзаиморасчетыПоДоговору(ЭтотОбъект.Ссылка);
	КонецЕсли;	
	// ->
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоНМА, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	 
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

//Бирюков проведение по взаиморасчетам
мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоНМА"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПоставщику");
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
