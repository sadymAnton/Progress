////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если Не Проведен И ИмяМакета <> "ЗаявлениеОПредоставленииДополнительныхВыходныхДней" Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после расчета и проведения!");
		Возврат Неопределено;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "РасчетСреднегоЗаработка" Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ТабДокумент = ФормированиеПечатныхФормЗК.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаНачала, ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка, "с " + Формат(ДатаНачала,"ДФ=dd.MM.yyyy") + " по " + Формат(ДатаОкончания,"ДФ=dd.MM.yyyy"), ВидРасчета.СпособРасчета);
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка)");
	ИначеЕсли ИмяМакета = "ЗаявлениеОПредоставленииДополнительныхВыходныхДней" Тогда
		ТабДокумент = ФормированиеПечатныхФормЗК.ПечатьЗаявленияОПредоставленииДополнительныхВыходныхДней(Ссылка, Дата, Организация, Сотрудник, Физлицо, ДатаНачала, ДатаОкончания);
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (заявление)");
	ИначеЕсли ЗначениеЗаполнено(ИмяМакета) Тогда
		ТабДокумент = ОплатаПоСреднемуЗаработкуПереопределяемый.РегламентированнаяПечатнаяФорма(ЭтотОбъект, ИмяМакета);
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + ОплатаПоСреднемуЗаработкуПереопределяемый.ОписаниеРегламентированнойПечатнойФормы(ЭтотОбъект, ИмяМакета));
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли

// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
//
// Параметры:
//	РассчитываемыеТаблицы	- структура из элементов, соответствующих табличным частям документа. 
//							  Значение Истина для каждого из элементов структуры означает необходимость расчета 
//							  соответствующей табличной части документа
//	РежимПерерасчета		- булево - признак вызов расчета при перерасчете документа
//
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь, ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Если почасовое отклонение, то записываем движения в регистр ВнутрисменноеВремяРаботниковОрганизаций
	НаборЗаписейРабочееВремя = Движения.ВнутрисменноеВремяРаботниковОрганизаций;
	Если ВыборкаПоШапкеДокумента.ЯвляетсяПочасовымОтклонением И ВыборкаПоШапкеДокумента.ОплачиватьЧасов <> 0 Тогда
		Движение = НаборЗаписейРабочееВремя.Добавить();
		
		// Свойства
		Движение.Период								= ВыборкаПоШапкеДокумента.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.Организация						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоШапкеДокумента.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		Движение.Часов								= ВыборкаПоШапкеДокумента.ОплачиватьЧасов;
		НаборЗаписейРабочееВремя.Записать();
	КонецЕсли;
	
	Отказ = Не ПроведениеРасчетов.РассчитатьДокументСреднегоЗаработка(ЭтотОбъект, РассчитываемыеТаблицы, ВыборкаПоШапкеДокумента, РежимПерерасчета);
	
	// Удаляем движения для режима интерактивного расчета
	Если Не РежимПерерасчета Тогда
		НаборЗаписейРабочееВремя.Очистить();
		НаборЗаписейРабочееВремя.Записать();
	КонецЕсли;
	
КонецПроцедуры // Рассчитать()

// Выполняет перерасчет сумм к начислению в документе
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Нет.
//
Процедура Перерассчитать() Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина, ВыборкаПоШапкеДокумента);
	
	// Зафиксируем данные табличных частей после расчета
	Записать();
	
	ОплатаПоСреднемуЗаработкуПереопределяемый.ПереписатьПрочиеДвиженияПриПерерасчете(ЭтотОбъект, ВыборкаПоШапкеДокумента);
	
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.ОплатаПоСреднемуЗаработку
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ПерерассчитываемыйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = ОплатаПоСреднемуЗаработкуПереопределяемый.ПолучитьСтруктуруРегламентированныхФорм(ЭтотОбъект);
	СтруктураПечатныхФорм.Вставить("РасчетСреднегоЗаработка", "Расчет среднего заработка");
	СтруктураПечатныхФорм.Вставить("ЗаявлениеОПредоставленииДополнительныхВыходныхДней", "Заявление о предоставлении дней ухода за ребенком-инвалидом");
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует соответствие в котором находятся действующие графики сотрудника 
// на указанные даты
Функция ПолучитьГрафикРаботыСотрудника(Сотрудник, ДатыПолучения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("СписокДат", ДатыПолучения);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиРаботыПоВидамВремени.Месяц КАК ДатаПолучения
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|ГДЕ
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = &Сотрудник
	|	И ГрафикиРаботыПоВидамВремени.Месяц В(&СписокДат)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДатаПолучения");
	
КонецФункции // ПолучитьГрафикРаботыСотрудника()

// Выполняет проверку непрерывности интервалов начислений
//
Процедура ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок)
	
	Если Начисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТНачислений = Начисления.Выгрузить();
	ТНачислений.Сортировать("ДатаНачала");
	
	ПредыдущаяДатаОкончания = '00010101';
	СтрокаНеПервая = Ложь;
	Для Каждого Строка ИЗ ТНачислений Цикл
		
		// Пропустим сторно записи и доначисления
		Если Строка.Сторно или Строка.ВидРасчета <> ВидРасчета Тогда
			Продолжить;
		КонецЕсли;
		
		// если встретили не первую строку начислений
		Если СтрокаНеПервая Тогда
			// строка не первая
			Если Строка.ДатаНачала <> ПредыдущаяДатаОкончания + мДлинаСуток Тогда
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(Строка.НомерСтроки) +
				""" табл. части ""Начисления"": ";
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "нарушено требование непрерывности записей начислений!", Отказ, Заголовок);
			КонецЕсли;
			
		Иначе
			СтрокаНеПервая = Истина;
			
		КонецЕсли;
		ПредыдущаяДатаОкончания = Строка.ДатаОкончания;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьНепрерывностьЗаписейНачислений()

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления) Экспорт 
	
	Если ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени Или ВыборкаПоШапкеДокумента.ЯвляетсяПочасовымОтклонением Тогда
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
	Иначе
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
	КонецЕсли;
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 19.09.2011 15:11 
	// ОПИСАНИЕ: если AVT_ПоГрафику, подставляем дни и часы в регистр "Основные начисления", в дальнейшем
	//			 при расчете среднего забираем часы из регистра, а не высчитываем по графику работы сотрудника.
	//
	// 1. Если AVT_ПоГрафику И AVT_РабочиеДниПоОснКалендарю, тогда 
	//    оплачиваются рабочие дни по основному календарю, для которых указаны часы в ТЧ AVT_ГрафикРаботыПоЧасам.
	//
	// 2. Если AVT_ПоГрафику И НЕ AVT_РабочиеДниПоОснКалендарю, тогда
	//    оплачиваются те дни, для которых указаны часы в ТЧ AVT_ГрафикРаботыПоЧасам.
	//
	// 3. Если НЕ AVT_ПоГрафику, тогда
	//    по среднему оплачиваются рабочие дни по графику работы сотрудника.
	Если ВыборкаПоШапкеДокумента.AVT_ПоГрафику Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОплатаПоСреднемуЗаработкуAVT_ГрафикРаботыПоЧасам.День, МЕСЯЦ) КАК НачалоМесяца,
		|	СУММА(ОплатаПоСреднемуЗаработкуAVT_ГрафикРаботыПоЧасам.Часов) КАК ОтработаноЧасов,
		|	СУММА(ВЫБОР
		|			КОГДА ОплатаПоСреднемуЗаработкуAVT_ГрафикРаботыПоЧасам.Часов > 0
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтработаноДней
		|ИЗ
		|	Документ.ОплатаПоСреднемуЗаработку.AVT_ГрафикРаботыПоЧасам КАК ОплатаПоСреднемуЗаработкуAVT_ГрафикРаботыПоЧасам " +
		?(AVT_РабочиеДниПоОснКалендарю, 
		"		
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|	ПО ОплатаПоСреднемуЗаработкуAVT_ГрафикРаботыПоЧасам.День = РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
		|		И (РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь.Основной)
		|		И (РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)) ", "") + "
		|ГДЕ
		|	ОплатаПоСреднемуЗаработкуAVT_ГрафикРаботыПоЧасам.Ссылка = &ДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОплатаПоСреднемуЗаработкуAVT_ГрафикРаботыПоЧасам.День, МЕСЯЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоМесяца";
		Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
		ТЗГрафикРаботы = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}                                          	
	ТекущаяДатаНачала = ДатаНачала;
	ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);
	МассивДат = Новый Массив;
	Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
		МассивДат.Добавить(НачалоМесяца(ТекущаяДатаНачала));
		ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);				
	КонецЦикла;
	МесяцыРасчетаВремениПоТабелю = ПолучитьГрафикРаботыСотрудника(ВыборкаПоШапкеДокумента.Сотрудник, МассивДат);
	
	ТекущаяДатаНачала = ДатаНачала;
	ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);
	УчетнаяПолитикаПоПерсоналуОрганизации = глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
	Пока ТекущаяДатаНачала <= ТекущаяДатаОкончания Цикл
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 19.09.2011 15:15 
		ОтработаноДней  = 0;
		ОтработаноЧасов = 0;
		Если ВыборкаПоШапкеДокумента.AVT_ПоГрафику Тогда
			ИтоговаяСтрокаЗаМесяц = ТЗГрафикРаботы.Найти(НачалоМесяца(ТекущаяДатаНачала), "НачалоМесяца");
			
			Если ИтоговаяСтрокаЗаМесяц = Неопределено ИЛИ ИтоговаяСтрокаЗаМесяц.ОтработаноДней = 0 Тогда
				ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
				ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);
				Продолжить;
			Иначе
				ОтработаноДней  = ИтоговаяСтрокаЗаМесяц.ОтработаноДней;
				ОтработаноЧасов = ИтоговаяСтрокаЗаМесяц.ОтработаноЧасов;
			КонецЕсли;
			
		КонецЕсли;
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		// строка движений
		Движение = НаборОсновныеНачисления.Добавить();
		
		// Свойства
		Движение.ПериодРегистрации			= ПериодРегистрации;
		Движение.ПериодДействияНачало		= НачалоДня(ТекущаяДатаНачала);
		Движение.ПериодДействияКонец		= КонецДня(ТекущаяДатаОкончания);
		Движение.ВидРасчета					= ВидРасчета;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.ФизЛицо					= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;

		// Реквизиты
		Движение.Показатель1				= ВыборкаПоШапкеДокумента.ПроцентОплаты;
		Движение.ПодразделениеОрганизации	= ВыборкаПоШапкеДокумента.ПодразделениеОрганизации;
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
		
		Если МесяцыРасчетаВремениПоТабелю.Найти(НачалоМесяца(ТекущаяДатаНачала)) = Неопределено Тогда
			Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.ГрафикРаботы;
		Иначе
			Движение.ГрафикРаботы			= ВыборкаПоШапкеДокумента.Сотрудник;
		КонецЕсли; 
		
		Движение.ВидУчетаВремени			= ВидУчетаВремени;
		Движение.ПериодРасчетаСреднегоЗаработкаНачало	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
		Движение.ПериодРасчетаСреднегоЗаработкаОкончание= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
		Движение.ДатаНачалаСобытия			= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
		Движение.Авторасчет					= Истина;
				///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 28.09.2011 17:41 
		Движение.ОтработаноДней  = ОтработаноДней;
		Движение.ОтработаноЧасов = ОтработаноЧасов;
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА} 
		ТекущаяДатаНачала = ТекущаяДатаОкончания + 1;
		ТекущаяДатаОкончания = Мин(КонецМесяца(ТекущаяДатаНачала), ДатаОкончания);				
		
	КонецЦикла;

КонецПроцедуры // СформироватьДвиженияПоНачислениям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке() Экспорт 

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ДатаНачалаСобытия);
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаНачалаСобытия
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|	КОНЕЦ КАК СуммированныйУчетРабочегоВремени
	|ПОМЕСТИТЬ ВТДанныеОСотруднике
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаНачалаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатаПоСреднемуЗаработку.Дата,
	|	ОплатаПоСреднемуЗаработку.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОплатаПоСреднемуЗаработку.Организация
	|		ИНАЧЕ ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОплатаПоСреднемуЗаработку.Организация
	|		ИНАЧЕ ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	ОплатаПоСреднемуЗаработку.Организация КАК ОбособленноеПодразделение,
	|	ОплатаПоСреднемуЗаработку.Ссылка,
	|	ОплатаПоСреднемуЗаработку.ПерерассчитываемыйДокумент.Сотрудник КАК ИсправляемыйДокументСотрудник,
	|	ОплатаПоСреднемуЗаработку.Сотрудник,
	|	ОплатаПоСреднемуЗаработку.Сотрудник.Физлицо КАК Физлицо,
	|	ОплатаПоСреднемуЗаработку.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ОплатаПоСреднемуЗаработку.ПроцентОплаты,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета,
	|	ОплатаПоСреднемуЗаработку.ДатаНачала,
	|	ОплатаПоСреднемуЗаработку.ДатаНачалаСобытия,
	|	ОплатаПоСреднемуЗаработку.ДатаОкончания,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаНачало КАК ДатаНачалаРасчетногоПериода,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаОкончание = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаОкончание, ДЕНЬ)
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаОкончание = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаОкончание, ДЕНЬ)
	|	КОНЕЦ КАК ДатаОкончанияРасчетногоПериода,
	|	РАЗНОСТЬДАТ(ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаНачало, НАЧАЛОПЕРИОДА(ОплатаПоСреднемуЗаработку.ПериодРасчетаСреднегоЗаработкаОкончание, МЕСЯЦ), МЕСЯЦ) + 1 КАК ПериодРасчетаСреднегоЗаработка,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	|	ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.СуммированныйУчетРабочегоВремени, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ОплатаПоСреднемуЗаработку.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидИспользованияРабочегоВремени,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.СпособРегистрацииВремени = ЗНАЧЕНИЕ(Перечисление.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РегистрируютсяПочасовыеОтклонения,
	|	ОплатаПоСреднемуЗаработку.ОплачиватьЧасов КАК ОплачиватьЧасов,
	|	ОплатаПоСреднемуЗаработку.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	ОплатаПоСреднемуЗаработку.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	ОплатаПоСреднемуЗаработку.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.Сотрудник.Организация = ВЫБОР
	|				КОГДА ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ОплатаПоСреднемуЗаработку.Организация
	|				ИНАЧЕ ОплатаПоСреднемуЗаработку.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	ВЫБОР
	|		КОГДА ОплатаПоСреднемуЗаработку.Дата < ОплатаПоСреднемуЗаработку.ПериодРегистрации
	|			ТОГДА ОплатаПоСреднемуЗаработку.ПериодРегистрации
	|		КОГДА ОплатаПоСреднемуЗаработку.Дата > КОНЕЦПЕРИОДА(ОплатаПоСреднемуЗаработку.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(ОплатаПоСреднемуЗаработку.ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ ОплатаПоСреднемуЗаработку.Дата
	|	КОНЕЦ КАК ПериодРегистрацииДополнительныхНачислений
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 19.09.2011 15:02 
	|	,ОплатаПоСреднемуЗаработку.AVT_ПоГрафику
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК ОплатаПоСреднемуЗаработку
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСотруднике КАК РаботникиОрганизацииСрезПоследних
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ОплатаПоСреднемуЗаработку.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента) Экспорт

	Запрос = Новый Запрос;

	ГоловнаяОрганизация = ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	СписокСтруктурныхПодразделений = ОбщегоНазначенияЗК.ПолучитьСписокОбособленныхПодразделенийОрганизации(ГоловнаяОрганизация);
	СписокСтруктурныхПодразделений.Добавить(ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",			СписокСтруктурныхПодразделений);
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",					Ссылка);
	Запрос.УстановитьПараметр("ДатаНачала",						ДатаНачала);
	Запрос.УстановитьПараметр("Сотрудник",						Сотрудник);
	Запрос.УстановитьПараметр("СуммированныйУчетРабочегоВремени", ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени);
	Запрос.УстановитьПараметр("ВидРасчета",						ВыборкаПоШапкеДокумента.ВидРасчета);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",			ГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокиНачисления.НомерСтроки,
	|	СтрокиНачисления.ВидРасчета,
	|	СтрокиНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	СтрокиНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
	|	СтрокиНачисления.ДатаНачала,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ДатаОкончания,
	|	СтрокиНачисления.ДатаНачала КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	СтрокиНачисления.ДатаНачала КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокиНачисления.ДатаОкончания, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	ВЫБОР
	|		КОГДА &СуммированныйУчетРабочегоВремени
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяПочасовымОтклонением,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	СтрокиНачисления.Результат,
	|	0 КАК ДополнительныйРезультат,
	|	СтрокиНачисления.ДополнительныеДанные,
	|	СтрокиНачисления.ПодразделениеОрганизации,
	|	СтрокиНачисления.ОплаченоДнейЧасов,
	|	СтрокиНачисления.ОтработаноДней,
	|	СтрокиНачисления.ОтработаноЧасов,
	|	СтрокиНачисления.ОтработаноДнейПоПятидневке,
	|	СтрокиНачисления.ОтработаноЧасовПоПятидневке,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,
	|	СтрокиНачисления.НормаДней,
	|	СтрокиНачисления.НормаЧасов,
	|	СтрокиНачисления.НормаДнейПоПятидневке,
	|	СтрокиНачисления.НормаЧасовПоПятидневке,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	СтрокиНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА ГрафикРаботыПоСотруднику.НомерСтроки ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|							И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|					ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|				КОНЕЦ
	|		ИНАЧЕ СтрокиНачисления.Ссылка.Сотрудник
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка) КАК ГрафикРаботыНорма,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= СтрокиНачисления.ДатаНачалаСобытия
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|			ИНАЧЕ РаботникиОрганизации.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|		КОНЕЦ, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	СтрокиНачисления.ДатаНачалаСобытия,
	|	СтрокиНачисления.Сторно,
	|	ВЫБОР
	|		КОГДА (НЕ СтрокиНачисления.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.СторнируемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	СтрокиНачисления.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления,
	|	СтрокиНачисления.ЧислоМесяцев,
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.Ссылка.Сотрудник,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.ВидРасчета = &ВидРасчета
	|				И (НЕ СтрокиНачисления.Сторно)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПроверятьПериодНачисления,
	|	СтрокиНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку.Начисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(РаботникиОрганизации.Период) КАК МаксПериод,
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.ОплатаПоСреднемуЗаработку.Начисления КАК СтрокиНачисления
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|				ПО (РаботникиОрганизации.Период <= СтрокиНачисления.ДатаНачалаСобытия)
	|					И СтрокиНачисления.Ссылка.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтрокиНачисления.НомерСтроки) КАК ПоследниеДаты
	|		ПО СтрокиНачисления.НомерСтроки = ПоследниеДаты.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО (РаботникиОрганизации.Период = ПоследниеДаты.МаксПериод)
	|			И СтрокиНачисления.Ссылка.Сотрудник = РаботникиОрганизации.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СтрокиНачисления.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.ОплатаПоСреднемуЗаработку.Начисления КАК СтрокиНачисления
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|				ПО (ГрафикиРаботыПоВидамВремени.ГрафикРаботы = СтрокиНачисления.Ссылка.Сотрудник)
	|					И (ГрафикиРаботыПоВидамВремени.Месяц = НАЧАЛОПЕРИОДА(СтрокиНачисления.ДатаНачала, МЕСЯЦ))
	|		ГДЕ
	|			СтрокиНачисления.Ссылка = &ДокументСсылка) КАК ГрафикРаботыПоСотруднику
	|		ПО СтрокиНачисления.НомерСтроки = ГрафикРаботыПоСотруднику.НомерСтроки
	|ГДЕ
	|	СтрокиНачисления.Ссылка = &ДокументСсылка";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,", ОплатаПоСреднемуЗаработкуПереопределяемый.ПолучитьДополнительноеПолеЗапросаПоНачислениям());
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры:
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего() Экспорт

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтрокаРасчетСреднего.НомерСтроки,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник,
	|	СтрокаРасчетСреднего.Ссылка.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокаРасчетСреднего.ВидРасчета,
	|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|	ВЫБОР
	|		КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК БазовыйПериодКонец,
	|	СтрокаРасчетСреднего.КоэффициентИндексации,
	|	СтрокаРасчетСреднего.Результат,
	|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
	|	СтрокаРасчетСреднего.НормаПоПятидневке,
	|	СтрокаРасчетСреднего.ОтработаноДней,
	|	СтрокаРасчетСреднего.ОтработаноЧасов,
	|	СтрокаРасчетСреднего.ЧислоМесяцев
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку.РасчетСреднего КАК СтрокаРасчетСреднего
	|ГДЕ
	|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры:
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "") Экспорт

	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;
	
	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация, по которой выполняется начисление!"), Отказ, Заголовок);
	КонецЕсли;

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Проверка того, что не изменили сотрудника при исправлении
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИсправляемыйДокументСотрудник) 
		И (ВыборкаПоШапкеДокумента.ИсправляемыйДокументСотрудник <> ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("При исправлении документа нельзя изменить сотрудника!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаНачала
	// ДатаНачалаСобытия
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата начала периода сохранения среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата начала расчетного периода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата окончания расчетного периода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание < ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Дата окончания расчетного периода не должна быть меньше даты начала расчетного периода!", Отказ, Заголовок);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаНачала) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата начала оплаты!", Отказ, Заголовок);
		
	ИначеЕсли Не ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения Тогда
		
		// ДатаОкончания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата окончания оплаты!", Отказ, Заголовок);
			
		ИначеЕсли ВыборкаПоШапкеДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Дата окончания оплачиваемого события не должна быть меньше даты начала!", Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан вид расчета!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения <> ВыборкаПоШапкеДокумента.ЯвляетсяПочасовымОтклонением Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Указанный вид расчета не соответствует способу регистрации времени в документе!", Отказ, Заголовок);
		
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения И ВыборкаПоШапкеДокумента.ЯвляетсяПочасовымОтклонением Тогда
		// ВидИспользованияРабочегоВремени
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидИспользованияРабочегоВремени) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан учет времени для вида расчета!", Отказ, Заголовок);
		КонецЕсли;
		
		// ОплачиватьЧасов
		Если ВыборкаПоШапкеДокумента.ОплачиватьЧасов <= 0 Или ВыборкаПоШапкеДокумента.ОплачиватьЧасов > 24 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Количество оплачиваемых часов должно быть положительным и не превышать 24!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// Процент оплаты
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПроцентОплаты) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан процент оплаты!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроводитьДополнительныеПроверки = Ложь) Экспорт 

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала 
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала) и ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала начисления!", Отказ, Заголовок);
		
	ИначеЕсли Не ВыборкаПоШапкеДокумента.РегистрируютсяПочасовыеОтклонения Тогда
		// Дата окончания
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			Если ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоСтрокамДокумента.ДатаНачала Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата окончания начисления не должна быть меньше даты начала!", Отказ, Заголовок);
				
			ИначеЕсли ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
				Если НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаОкончания) <> НачалоМесяца(ВыборкаПоСтрокамДокумента.ДатаНачала) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "даты начала и окончания должны принадлежать одному месяцу!", Отказ, Заголовок);
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания начисления!", Отказ, Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;

	// Дата начала события
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаСобытия) и ВыборкаПоСтрокамДокумента.ОсновныеНачисления Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала события!", Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("не указано подразделение организации!"), Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указано подразделение, принадлежащее другой организации!"), Отказ, Заголовок);
		
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.ПроверятьПериодНачисления И  (ВыборкаПоСтрокамДокумента.ДатаНачала < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаНачала > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания) 
		ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания < ВыборкаПоШапкеДокумента.ДатаНачала ИЛИ ВыборкаПоСтрокамДокумента.ДатаОкончания > КонецДня(ВыборкаПоШапкеДокумента.ДатаОкончания)) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "период начисления выходит за временные границы оплачиваемого события!", Ложь, Заголовок);
	КонецЕсли;

	Если ПроводитьДополнительныеПроверки Тогда
		ОплатаПоСреднемуЗаработкуПереопределяемый.ВыполнитьДополнительныеПроверкиСтрокиНачислений(ЭтотОбъект,ВыборкаПоСтрокамДокумента,Отказ, Заголовок, СтрокаНачалаСообщенияОбОшибке);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок) Экспорт

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		
	// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборРасчетСреднего) Экспорт
		
	Движение = НаборРасчетСреднего.Добавить();
	
	СтрокаСвойствИзДокумента = "ПериодРегистрации,Сотрудник,ФизЛицо,Организация,ДатаНачалаСобытия,СпособРасчета,"
									+ "ДатаНачалаРасчетногоПериода,ДатаОкончанияРасчетногоПериода,ПериодРасчетаСреднегоЗаработка";
	СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Результат," 
									+ "ОтработаноПоПятидневке,НормаПоПятидневке,ОтработаноДней,ОтработаноЧасов,"
									+ "КоэффициентИндексации,ЧислоМесяцев";
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
КонецПроцедуры // ДобавитьСтрокуРасчетаСреднего()

// По выборке из результатов запроса по шапке документу формируем движения по регистру
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- спозиционированная на определеной строке выборка 
//							  из результата запроса к шапке документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборЗаписей) Экспорт 
	
	Если ВыборкаПоШапкеДокумента.ЯвляетсяПочасовымОтклонением И ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов <> 0 Тогда
		Движение = НаборЗаписей.Добавить();
		
		// Свойства
		Движение.Период								= ВыборкаПоСтрокамДокумента.ДатаНачала;
		
		// Измерения
		Движение.Сотрудник							= ВыборкаПоШапкеДокумента.Сотрудник;
		Движение.Организация						= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ВидИспользованияРабочегоВремени	= ВыборкаПоШапкеДокумента.ВидИспользованияРабочегоВремени;
		
		// Ресурсы
		Движение.Часов								= ВыборкаПоСтрокамДокумента.ОплаченоДнейЧасов;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуРабочегоВремени()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);

	// Проверим непрерывночть следования записей начислений
	ПроверитьНепрерывностьЗаписейНачислений(Отказ, Заголовок);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
		
		Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска	= Истина;
		
		// перепишем данные из таблицы начислений в набор записей
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
		
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок, Истина);
			
			Если НЕ Отказ Тогда
				Если ВыборкаПоНачислениям.ОсновныеНачисления Тогда
					ПроведениеРасчетов.ДобавитьСтрокуОсновныхНачислений(Движения.ОсновныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
					Если ВыборкаПоНачислениям.ЯвляетсяПочасовымОтклонением Тогда
						ДобавитьСтрокуРабочегоВремени(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ВнутрисменноеВремяРаботниковОрганизаций);
					КонецЕсли;
				Иначе
					ПроведениеРасчетов.ДобавитьСтрокуДополнительныхНачислений(Движения.ДополнительныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// получим реквизиты табличной части
		ВыборкаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего().Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);
			
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка);
			КонецЕсли;
			
		КонецЦикла;
		
		ОплатаПоСреднемуЗаработкуПереопределяемый.ВыполнитьПрочиеДвиженияДокумента(ЭтотОбъект, ВыборкаПоШапкеДокумента, Отказ, Заголовок, ВыборкаПоНачислениям);
		
		Если НЕ Отказ Тогда
			
			// выполним удаление перерасчетов исправленного документа
			Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
				ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
			КонецЕсли;
			
			Для Каждого Набор Из Движения Цикл
				ТипНабораЗаписей = ТипЗнч(Набор);
				Если ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ОсновныеНачисленияРаботниковОрганизаций") 
					Или ТипНабораЗаписей = Тип("РегистрРасчетаНаборЗаписей.ДополнительныеНачисленияРаботниковОрганизаций") Тогда
					Попытка
					   Набор.Записать()
					Исключение 
					  ВызватьИсключение ОбщегоНазначенияЗК.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание
					КонецПопытки; 
				КонецЕсли;
			КонецЦикла;
			ПроведениеРасчетов.ОбработатьТаблицуПерерасчетов(Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
    Движения.ОсновныеНачисленияРаботниковОрганизаций.мВыполнятьВспомогательныеРасчеты = Истина;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
		ДатаОкончания = ДатаНачала;
	Иначе 
		ОплачиватьЧасов = 0;
	КонецЕсли;
///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 26.09.2011 11:45 
	Если Не AVT_ПоГрафику Тогда
		AVT_ГрафикРаботыПоЧасам.Очистить();
		AVT_НерабочиеДниПоОснКалендарю = Ложь;
	КонецЕсли;
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}    	
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400; // в секундах

