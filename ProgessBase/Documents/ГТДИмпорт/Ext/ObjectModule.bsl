Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

Перем мСообщенияОбОшибках;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	// Счета заполняются в любом режиме
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ, , , Истина);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Добавляет строку в табличную часть "Разделы"
//
// Возвращаемое значение:
//   строка табличной части, которую добавили.
//
Функция ДобавитьРаздел() Экспорт

#Если Клиент Тогда
	СтавкаПошлины = ВосстановитьЗначение("СтавкаТаможеннойПошлины");
#Иначе
	СтавкаПошлины = 0;
#КонецЕсли

	НовыйРаздел = Разделы.Добавить();
	НовыйРаздел.НДСВВалюте     = Ложь;
	//начало изменений БП 04 
	НовыйРаздел.ПошлинаВВалюте = Ложь;
	//конец изменений БП 04 
	НовыйРаздел.СтавкаНДС      = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
	НовыйРаздел.СтавкаПошлины  = СтавкаПошлины;
	//начало изменений БП 04 
	НовыйРаздел.ТаможеннаяСтоимостьВВалютеРеглУчета = Истина;  //(НЕ ЗначениеЗаполнено(ВалютаДокумента) ИЛИ (ВалютаДокумента = мВалютаРегламентированногоУчета));
	//конец изменений БП 04 

	Возврат НовыйРаздел;

КонецФункции // ДобавитьРаздел()

// Вычисляет суммы по данным раздела.
//
// Параметры
//  НомерРаздела   - число, номер раздела по которому надо получить итоги,
//  ВсегоСтоимость - число, в этот параметр будет возвращена сумма фактурной стоимости,
//  ВсегоПошлина   - число, в этот параметр будет возвращена сумма пошлины, 
//  ВсегоНДС       - число, в этот параметр будет возвращена сумма НДС.
//
Процедура ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС)  Экспорт

	ВсегоСтоимость = 0;
	ВсегоПошлина   = 0;
	ВсегоНДС       = 0;
	МассивСтрок = Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
		ВсегоПошлина   = ВсегоПошлина   + ЭлементМассива.СуммаПошлины;
		ВсегоНДС       = ВсегоНДС       + ЭлементМассива.СуммаНДС;
	КонецЦикла;

КонецПроцедуры // ПосчитатьИтогиПоРазделу()

// Заполнение раздела документа "ГТД по импорту" по документам поступления
//
// Параметры
//  ДокументПоступления - ссылка на документ ПоступлениеТоваровУслуг, определяет документ поступления, по которому надо заполнить этот документ,
//  НомерРаздела        - число, номер раздела, который надо заполнить.
//
Процедура ЗаполнитьПоПоступлению(ДокументПоступления, НомерРаздела) Экспорт

	ОснованиеВидОперации = ДокументПоступления.ВидОперации;
	
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		Если ОснованиеВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика Тогда
			ТаблицаЗначенийТовары = ДокументПоступления.Товары.Выгрузить();
		Иначе	
			Возврат;
		КонецЕсли;
	Иначе

		Если ОснованиеВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
			ТаблицаЗначенийТовары = ДокументПоступления.Товары.Выгрузить();
		ИначеЕсли ОснованиеВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ТаблицаЗначенийТовары = ДокументПоступления.Оборудование.Выгрузить();
			ТаблицаЗначенийТовары.Колонки.Добавить("СтатусПартии");
			ТаблицаЗначенийТовары.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование,"СтатусПартии");
			Для Каждого Строка Из ДокументПоступления.Товары Цикл
				НовСтр = ТаблицаЗначенийТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр,Строка);
			КонецЦикла;	
		Иначе
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если ТаблицаЗначенийТовары.Колонки.Найти("СтатусПартии") = Неопределено Тогда
		ТаблицаЗначенийТовары.Колонки.Добавить("СтатусПартии");
	КонецЕсли;	
	
	//начало изменений БП 04 
	ВВалютеРеглУчета         =  ДокументПоступления.ВалютаДокумента = мВалютаРегламентированногоУчета; //Разделы[НомерРаздела - 1].ТаможеннаяСтоимостьВВалютеРеглУчета;
	//конец изменений БП 04 
	СтруктураВалютыРеглУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
	КурсРеглУчета            = СтруктураВалютыРеглУчета.Курс;
	КратностьРеглУчета       = СтруктураВалютыРеглУчета.Кратность;

	Для каждого СтрокаТаблицыЗначений Из ТаблицаЗначенийТовары Цикл

		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.НомерРаздела               = НомерРаздела;
		НоваяСтрока.ДокументПартии             = ДокументПоступления;
		НоваяСтрока.ЕдиницаИзмерения           = СтрокаТаблицыЗначений.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = СтрокаТаблицыЗначений.ЕдиницаИзмеренияМест;
		НоваяСтрока.Количество                 = СтрокаТаблицыЗначений.Количество;
		НоваяСтрока.КоличествоМест             = СтрокаТаблицыЗначений.КоличествоМест;
		НоваяСтрока.Коэффициент                = СтрокаТаблицыЗначений.Коэффициент;
		НоваяСтрока.Номенклатура               = СтрокаТаблицыЗначений.Номенклатура;
		НоваяСтрока.СерияНоменклатуры          = СтрокаТаблицыЗначений.СерияНоменклатуры;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицыЗначений.ХарактеристикаНоменклатуры;
		НоваяСтрока.СтатусПартии 			   = СтрокаТаблицыЗначений.СтатусПартии;

		//{26.10.2015 Островерхий заявка №43531 
		НоваяСтрока.ПРГ_Качество 			   = Справочники.Качество.Новый; 
		//26.10.2015 Островерхий} 
		
		// Реквизиты, которых нет в оборудовании.
		Если ОснованиеВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
		 ИЛИ ОснованиеВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика Тогда
			НоваяСтрока.ЗаказПокупателя = СтрокаТаблицыЗначений.Заказ;
		КонецЕсли;

		НоваяСтрока.ФактурнаяСтоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицыЗначений.Сумма, ДокументПоступления.ВалютаДокумента,
		                                 ?(ВВалютеРеглУчета, мВалютаРегламентированногоУчета, ВалютаДокумента),
		                                 ЗаполнениеДокументов.КурсДокумента(ДокументПоступления, мВалютаРегламентированногоУчета),
		                                 ?(ВВалютеРеглУчета, КурсРеглУчета, КурсДокумента),
		                                 ЗаполнениеДокументов.КратностьДокумента(ДокументПоступления, мВалютаРегламентированногоУчета),
		                                 ?(ВВалютеРеглУчета, КратностьРеглУчета, КратностьДокумента));

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоПоступлению()

Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		СтруктураОбязательныхПолей.Вставить("ДокументПартии");

	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл()	

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРазделы(ТаблицаПоРазделам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ТаможеннаяСтоимость, СтавкаНДС");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Разделы", СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Суммы пошлины и НДС в каждом разделе должны совпадать с итогами по разделу в ТЧ Товары.
	Для каждого Раздел Из ТаблицаПоРазделам Цикл

		ВсегоСтоимость = 0;
		ВсегоПошлина   = 0;
		ВсегоНДС       = 0;
		НомерРаздела = ТаблицаПоРазделам.Индекс(Раздел) + 1;
		ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);

		Если ВсегоПошлина <> Раздел.СуммаПошлины Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По разделу """ + СокрЛП(НомерРаздела) + """ сумма пошлины не совпадает с итогом по товарам раздела", Отказ, Заголовок);
		КонецЕсли;

		Если ВсегоНДС <> Раздел.СуммаНДС Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По разделу """ + СокрЛП(НомерРаздела) + """ сумма НДС не совпадает с итогом по товарам раздела", Отказ, Заголовок);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиРазделы()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, ФактурнаяСтоимость");

	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Проверка номера ГТД.
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["Товары"].Представление();
	СтрокаСообщения             = "Номер ГТД в серии не совпадает с номером ГТД документа!";
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                                """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
		   И СтрокаТаблицы.Номенклатура.ВестиУчетПоСериям
		   И СтрокаТаблицы.НомерГТД <> НомерГТД  Тогда

			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения);

		КонецЕсли;
	КонецЦикла;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

		Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
			                                """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

			Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ)
				И СтрокаТЧ.СчетУчетаНУ.ВидыСубконто.Количество() > 0
				И СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.СтатьиЗатрат") Тогда

				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатьяЗатратНУ) Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Статья затрат НУ""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		КонтролироватьРублевыйСчетРасчетов = (не СтруктураШапкиДокумента.ТаможенныйСбор=0 или не СтруктураШапкиДокумента.ТаможенныйШтраф=0);
		КонтролироватьВалютныйСчетРасчетов = (не СтруктураШапкиДокумента.ТаможенныйСборВал=0 или не СтруктураШапкиДокумента.ТаможенныйШтрафВал=0);
		
		Если не КонтролироватьРублевыйСчетРасчетов Тогда
			//Дополнительно посмотрим по разделам
			Если Разделы.НайтиСтроки(Новый Структура("ПошлинаВВалюте",Ложь)).Количество()>Разделы.НайтиСтроки(Новый Структура("ПошлинаВВалюте,СуммаПошлины",Ложь,0)).Количество() Тогда
				КонтролироватьРублевыйСчетРасчетов = Истина;
			ИначеЕсли Разделы.НайтиСтроки(Новый Структура("НДСВВалюте",Ложь)).Количество()>Разделы.НайтиСтроки(Новый Структура("НДСВВалюте,СуммаНДС",Ложь,0)).Количество() Тогда
				КонтролироватьРублевыйСчетРасчетов = Истина;
			КонецЕсли; 
		КонецЕсли;
		Если не КонтролироватьВалютныйСчетРасчетов Тогда
			//Дополнительно посмотрим по разделам
			Если Разделы.НайтиСтроки(Новый Структура("ПошлинаВВалюте",Истина)).Количество()>Разделы.НайтиСтроки(Новый Структура("ПошлинаВВалюте,СуммаПошлины",Истина,0)).Количество() Тогда
				КонтролироватьВалютныйСчетРасчетов = Истина;
			ИначеЕсли Разделы.НайтиСтроки(Новый Структура("НДСВВалюте",Истина)).Количество()>Разделы.НайтиСтроки(Новый Структура("НДСВВалюте,СуммаНДС",Истина,0)).Количество() Тогда
				КонтролироватьВалютныйСчетРасчетов = Истина;
			КонецЕсли; 
		КонецЕсли;
		
		Если КонтролироватьРублевыйСчетРасчетов Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
			Если НЕ СтруктураШапкиДокумента.ТаможенныйШтраф = 0 тогда
				СтруктураОбязательныхПолей.Вставить("СчетУчетаРасходовБУ");
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					СтруктураОбязательныхПолей.Вставить("СчетУчетаРасходовНУ");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
		Если КонтролироватьВалютныйСчетРасчетов Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентомВал");
			
			Если НЕ СтруктураШапкиДокумента.ТаможенныйШтрафВал = 0 тогда
				СтруктураОбязательныхПолей.Вставить("СчетУчетаРасходовБУВал");
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					СтруктураОбязательныхПолей.Вставить("СчетУчетаРасходовНУВал");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, НомерГТД,
	                             |ВалютаДокумента, КурсДокумента, КратностьДокумента, Контрагент, ДоговорКонтрагентаРегл,
	                             |КурсВзаиморасчетов,КратностьВзаиморасчетов");

								 
	СписокПолейВалютныйДепозит = "";
	Если ТаможенныйСборВал<>0 Тогда
		СписокПолейВалютныйДепозит = СписокПолейВалютныйДепозит+" Таможенный сбор (вал.),";
		
	КонецЕсли;
    Если ТаможенныйШтрафВал<>0 Тогда
		СписокПолейВалютныйДепозит = СписокПолейВалютныйДепозит+" Таможенный штраф (вал.),";
	КонецЕсли;
    Если Разделы.Найти(истина,"ПошлинаВВалюте")<>неопределено Тогда
		СписокПолейВалютныйДепозит = СписокПолейВалютныйДепозит+" Пошлина в валюте,";
		
	КонецЕсли;
    Если Разделы.Найти(истина,"НДСВВалюте")<>неопределено Тогда
		СписокПолейВалютныйДепозит = СписокПолейВалютныйДепозит+" НДС в валюте,";
	КонецЕсли;
	Если  СписокПолейВалютныйДепозит <> "" Тогда
		СписокПолейВалютныйДепозит = лев(СписокПолейВалютныйДепозит, стрДлина(СписокПолейВалютныйДепозит)-1);
		СтруктураОбязательныхПолей.Вставить("ДоговорКонтрагента","Не заполнено значение реквизита ""Валютный депозит"" и заполнены реквизиты """+СписокПолейВалютныйДепозит+"""!");
	КонецЕсли;
								 
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагентаРегл, СтруктураШапкиДокумента.ДоговорОрганизацияРегл, Отказ, Заголовок);

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		// С таможней Оба договора должны иметь вид "Прочее" и ведение взаиморасчетов "по договору в целом".
		Если СтруктураШапкиДокумента.ВидДоговора<> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Договор для отражения валютного депозита должен иметь вид ""Прочее"".", Отказ, Заголовок);
		КонецЕсли;

		Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Договор для отражения валютного депозита может вестись только по договору в целом.", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговораРегл <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Договор для отражения рублевого депозита должен иметь вид ""Прочее"".", Отказ, Заголовок);
	КонецЕсли;

	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетовРегл <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Договор для отражения рублевого депозита может вестись только по договору в целом.", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ОбработатьТабличнуюЧастьРазделы(СтруктураШапкиДокумента)

	// Для проведения по взаиморасчетам посчитаем долг таможне по валютному и рублевому договору.
	СуммаВзаиморасчетовВал = ТаможенныйСборВал + ТаможенныйШтрафВал;
	СуммаВзаиморасчетов    = ТаможенныйСбор    + ТаможенныйШтраф;
	Для каждого СтрокаТабличнойЧасти Из Разделы Цикл
	
		Если СтрокаТабличнойЧасти.ПошлинаВВалюте Тогда
			СуммаВзаиморасчетовВал = СуммаВзаиморасчетовВал + СтрокаТабличнойЧасти.СуммаПошлины;
		Иначе
			СуммаВзаиморасчетов = СуммаВзаиморасчетов + СтрокаТабличнойЧасти.СуммаПошлины;
		КонецЕсли;
	
		Если СтрокаТабличнойЧасти.НДСВВалюте Тогда
			СуммаВзаиморасчетовВал = СуммаВзаиморасчетовВал + СтрокаТабличнойЧасти.СуммаНДС;
		Иначе
			СуммаВзаиморасчетов = СуммаВзаиморасчетов + СтрокаТабличнойЧасти.СуммаНДС;
		КонецЕсли;
	КонецЦикла;

	СтруктураШапкиДокумента.Вставить("СуммаВзаиморасчетовВал", СуммаВзаиморасчетовВал);
	СтруктураШапкиДокумента.Вставить("СуммаВзаиморасчетов",    СуммаВзаиморасчетов);

КонецПроцедуры //ОбработатьТабличнуюЧастьРазделы()

Процедура ВыполнитьРаспределениеПоСкладам(ТаблицаРаспределяемая, масКолонкиРаспределяемые)
	Если ТаблицаРаспределяемая.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДопСтроки = ТаблицаРаспределяемая.Скопировать();
	ДопСтроки.Очистить();

	ЗапросСкладыВТЧ = новый Запрос;
	ЗапросСкладыВТЧ.Текст = "ВЫБРАТЬ
	|ПоступлениеОборудование.Ссылка КАК ДокументОприходования,
	|ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Оборудование) КАК СтатусПартии,
	|ПоступлениеОборудование.Номенклатура КАК Номенклатура,
	|ПоступлениеОборудование.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|ПоступлениеОборудование.СерияНоменклатуры КАК СерияНоменклатуры,
	|Сумма(ПоступлениеОборудование.Количество*ПоступлениеОборудование.Коэффициент) КАК Количество,
	|ПоступлениеОборудование.Склад КАК Склад
	|ИЗ Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеОборудование
	|ГДЕ Ссылка в (ВЫБРАТЬ Различные ВЫРАЗИТЬ(ДокументПартии КАК Документ.ПоступлениеТоваровУслуг)
	|			ИЗ Документ.ГТДИмпорт.Товары
	|			ГДЕ Ссылка = &Ссылка И ДокументПартии ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			)
	|	И Номенклатура в (ВЫБРАТЬ Различные Номенклатура 
	|			ИЗ Документ.ГТДИмпорт.Товары
	|			ГДЕ Ссылка = &Ссылка И ДокументПартии ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			)
	|СГРУППИРОВАТЬ ПО Ссылка, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Склад
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|ПоступлениеТовары.Ссылка КАК ДокументОприходования,
	|ВЫБОР
	|	КОГДА ПоступлениеТовары.Ссылка.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.НаКомиссию)
	|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Купленный)
	|КОНЕЦ,
	|ПоступлениеТовары.Номенклатура КАК Номенклатура,
	|ПоступлениеТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|ПоступлениеТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|Сумма(ПоступлениеТовары.Количество*ПоступлениеТовары.Коэффициент) КАК Количество,
	|ПоступлениеТовары.Склад КАК Склад
	|ИЗ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТовары
	|ГДЕ Ссылка в (ВЫБРАТЬ Различные ВЫРАЗИТЬ(ДокументПартии КАК Документ.ПоступлениеТоваровУслуг)
	|			ИЗ Документ.ГТДИмпорт.Товары
	|			ГДЕ Ссылка = &Ссылка И ДокументПартии ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			)
	|	И Номенклатура в (ВЫБРАТЬ Различные Номенклатура 
	|			ИЗ Документ.ГТДИмпорт.Товары
	|			ГДЕ Ссылка = &Ссылка И ДокументПартии ССЫЛКА Документ.ПоступлениеТоваровУслуг
	|			)
	|СГРУППИРОВАТЬ ПО Ссылка, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Склад
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|ПоступлениеТовары.Ссылка,
	|ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Купленный),
	|ПоступлениеТовары.Номенклатура,
	|ПоступлениеТовары.ХарактеристикаНоменклатуры,
	|ПоступлениеТовары.СерияНоменклатуры,
	|Сумма(ПоступлениеТовары.Количество*ПоступлениеТовары.Коэффициент),
	|ПоступлениеТовары.Склад
	|ИЗ Документ.АвансовыйОтчет.Товары  КАК ПоступлениеТовары
	|ГДЕ Ссылка в (ВЫБРАТЬ Различные ВЫРАЗИТЬ(ДокументПартии КАК Документ.АвансовыйОтчет)
	|			ИЗ Документ.ГТДИмпорт.Товары
	|			ГДЕ Ссылка = &Ссылка И ДокументПартии ССЫЛКА Документ.АвансовыйОтчет
	|			)
	|	И Номенклатура в (ВЫБРАТЬ Различные Номенклатура 
	|			ИЗ Документ.ГТДИмпорт.Товары
	|			ГДЕ Ссылка = &Ссылка И ДокументПартии ССЫЛКА Документ.АвансовыйОтчет
	|			)
	|СГРУППИРОВАТЬ ПО Ссылка, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Склад
	|ИТОГИ Сумма(Количество) ПО ДокументОприходования, СтатусПартии, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры";
	ЗапросСкладыВТЧ.УстановитьПараметр("Ссылка",Ссылка);
	ВыборкаПоДокументам = ЗапросСкладыВТЧ.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого Строка Из ТаблицаРаспределяемая Цикл
		ВыборкаПоДокументам.Сбросить();
		струПоиск = новый Структура("ДокументОприходования", Строка.ДокументОприходования);
		ВыборкаПоДокументам.НайтиСледующий(струПоиск);
		Если ВыборкаПоДокументам.Количество()=0 Тогда 
			Продолжить; 
		КонецЕсли;
		
		ВыборкаПоСтатусу = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		струПоиск = новый Структура("СтатусПартии", Строка.СтатусПартии);
		ВыборкаПоСтатусу.НайтиСледующий(струПоиск);
		
		ВыборкаПоНоменклатуре = ВыборкаПоСтатусу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		струПоиск = новый Структура("Номенклатура", Строка.Номенклатура);
        ВыборкаПоНоменклатуре.НайтиСледующий(струПоиск);

        ВыборкаПоХарактеристике = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		струПоиск = новый Структура("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
        ВыборкаПоХарактеристике.НайтиСледующий(струПоиск);

        ВыборкаПоСерии = ВыборкаПоХарактеристике.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		струПоиск = новый Структура("СерияНоменклатуры", Строка.СерияНоменклатуры);
		ВыборкаПоСерии.НайтиСледующий(струПоиск);

		Если ВыборкаПоСерии.Количество()=0 Тогда
			СтрокаСообщения = мСообщенияОбОшибках.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСообщения, Строка);
			Продолжить;
		КонецЕсли;
		ВыборкаПоСкладам = ВыборкаПоСерии.Выбрать();
		Если ВыборкаПоСкладам.Количество()=0 Тогда 
			Продолжить;
		КонецЕсли;

		ИтогоКоличество = ВыборкаПоСерии.Количество;
		
		струРаспределяемыеЗначения = новый Структура;
		струРаспределенныеЗначения = новый Структура;
		Для каждого элемент из масКолонкиРаспределяемые цикл
			струРаспределяемыеЗначения.Вставить(элемент, ?(Строка[Элемент]=NULL,0,Строка[Элемент]));
			струРаспределенныеЗначения.Вставить(элемент, 0);
		КонецЦикла;
		
		Пока ВыборкаПоСкладам.Следующий() цикл
					
			Если ИтогоКоличество<=0 Тогда
				Прервать;
			КонецЕсли;
					
			Если ВыборкаПоСкладам.Количество=0 Тогда
				Продолжить;
			КонецЕсли;
					
			ДопСтрока = ДопСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(ДопСтрока, Строка);
					
			ДопСтрока.Склад = ВыборкаПоСкладам.Склад;
					
			Если ВыборкаПоСкладам.Количество<ИтогоКоличество Тогда
				КоэффРаспред = ВыборкаПоСкладам.Количество/ИтогоКоличество;
			Иначе
				КоэффРаспред = 1;
			КонецЕсли;
			
			Для каждого элемент из масКолонкиРаспределяемые цикл
				ДопСтрока[Элемент] = струРаспределяемыеЗначения[Элемент]* КоэффРаспред;
				струРаспределенныеЗначения[Элемент] = струРаспределенныеЗначения[Элемент] + ДопСтрока[Элемент];
				// Исходная строка будет с 0 суммой
				Строка[Элемент] = 0;
			КонецЦикла;
		КонецЦикла;
		//то что не распределилось ("копейки") - прибавим к последней строке доп строк чтобы итоги сходились
		НомерСтроки = ДопСтроки.Количество()-1;
		Для каждого элемент из масКолонкиРаспределяемые цикл
			НеРаспределено = струРаспределяемыеЗначения[Элемент] - струРаспределенныеЗначения[Элемент];
			Если НеРаспределено<>0 Тогда
				ДопСтроки[НомерСтроки][Элемент] = ДопСтроки[НомерСтроки][Элемент]+НеРаспределено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
			
	// Теперь доп строки добавим в таблицу движений
	Для Каждого ДопСтрока Из ДопСтроки Цикл
		НоваяСтрока = ТаблицаРаспределяемая.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДопСтрока);
	КонецЦикла;
			
	// После обработки удалим строки с нулевыми суммами
	Инд=0;
	Пока Инд<ТаблицаРаспределяемая.Количество() Цикл
		флУдалить = истина;
		Для каждого элемент из масКолонкиРаспределяемые цикл
			Если ТаблицаРаспределяемая[Инд][Элемент]<>0 Тогда
				флУдалить = ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если флУдалить Тогда
			ТаблицаРаспределяемая.Удалить(Инд);
		Иначе
			Инд = Инд+1;
		КонецЕсли;
	КонецЦикла;	

	//свертка таблицы по идентичным значениям строк
	стрСуммируемыеКолонки = "";
	стрСворачиваемыеКолонки = "";
	Для каждого элемент из масКолонкиРаспределяемые цикл
		стрСуммируемыеКолонки = стрСуммируемыеКолонки+?(стрСуммируемыеКолонки="","",",")+Элемент;
    КонецЦикла;
	Для каждого колонка из ТаблицаРаспределяемая.Колонки цикл
		Если Найти(стрСуммируемыеКолонки,Колонка.Имя)<>0 Тогда
			Продолжить;
		КонецЕсли;
		стрСворачиваемыеКолонки = стрСворачиваемыеКолонки+?(стрСворачиваемыеКолонки="","",",")+Колонка.Имя;
	КонецЦикла;
	ТаблицаРаспределяемая.Свернуть(стрСворачиваемыеКолонки,стрСуммируемыеКолонки);
КонецПроцедуры

Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам 
	 ИЛИ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладамРегл Тогда
		масКолонкиРаспределяемые = новый Массив();
		масКолонкиРаспределяемые.Добавить("ФактурнаяСтоимость");
		масКолонкиРаспределяемые.Добавить("НДС");
		масКолонкиРаспределяемые.Добавить("Пошлина");
		масКолонкиРаспределяемые.Добавить("Количество");
		ВыполнитьРаспределениеПоСкладам(ТаблицаТоваров, масКолонкиРаспределяемые);
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("Сумма");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("ФактурнаяСтоимость"), "Сумма");
	
	ТаблицаТоваров.Колонки.Добавить("НДСВал");
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("НДС"), "НДСВал");
	
	/// Кунов О.В., 11.08.2015 - 42605
	//ТаблицаТоваров.Колонки.Добавить("Качество");
	//ТаблицаТоваров.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	///

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если ТипЗнч(СтрокаТаблицы.Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СтрокаТаблицы.Склад = СтрокаТаблицы.СкладОрдера;
		КонецЕсли;
	КонецЦикла;
	
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("Стоимость",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Распределим суммы таможенных сборов пропорционально фактурной стоимости
	МассивКоэф = ТаблицаТоваров.ВыгрузитьКолонку("Сумма");
	МассивТаможенныйСбор    = ОбщегоНазначения.РаспределитьПропорционально(ТаможенныйСбор,    МассивКоэф, 2);
	МассивТаможенныйСборВал = ОбщегоНазначения.РаспределитьПропорционально(ТаможенныйСборВал, МассивКоэф, 2);

	// Недостающие поля.
	ТаблицаТоваров.Колонки.Добавить("НДСУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		ПошлинаВВалюте = Разделы[СтрокаТаблицы.НомерРаздела - 1].ПошлинаВВалюте;
		НДСВВалюте     = Разделы[СтрокаТаблицы.НомерРаздела - 1].НДСВВалюте;

		Если ПошлинаВВалюте Тогда

			СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Пошлина, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			                                 СтруктураШапкиДокумента.КурсВзаиморасчетов,
			                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов,
			                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			СтрокаТаблицы.СтоимостьРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Пошлина, СтруктураШапкиДокумента.ВалютаВзаиморасчетовРегл,
			                                 мВалютаРегламентированногоУчета, 
			                                 СтруктураШапкиДокумента.КурсВзаиморасчетов,      1,
			                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
			                                 
			СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
				СтруктураШапкиДокумента.КурсВзаиморасчетов,
				СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
				СтруктураШапкиДокумента.КратностьВзаиморасчетов,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
				
		Иначе
		
			СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Пошлина, мВалютаРегламентированногоУчета,
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			                                 1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			                                 1,СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			СтрокаТаблицы.СтоимостьРегл = СтрокаТаблицы.Пошлина;
			
			СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, мВалютаРегламентированногоУчета,
			                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			                                 1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
			                                 1,СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;

		Если НДСВВалюте Тогда

			Если НЕ СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий тогда
				
				СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
				                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
				                                 СтруктураШапкиДокумента.КурсВзаиморасчетов,
				                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
				                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов,
				                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
												 
			КонецЕсли;

		Иначе

			Если НЕ СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий тогда

				СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, мВалютаРегламентированногоУчета,
				                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
				                                 1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
				                                 1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			КонецЕсли;
			
		КонецЕсли;

		// Учтем таможенные сборы
		Индекс = ТаблицаТоваров.Индекс(СтрокаТаблицы);

		Если МассивТаможенныйСбор <> Неопределено Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(МассивТаможенныйСбор[Индекс], мВалютаРегламентированногоУчета,
			                          СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                          1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                          1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			СтрокаТаблицы.СтоимостьРегл = СтрокаТаблицы.СтоимостьРегл + МассивТаможенныйСбор[Индекс];
		КонецЕсли;

		Если МассивТаможенныйСборВал <> Неопределено Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(МассивТаможенныйСборВал[Индекс], СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                          СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                          СтруктураШапкиДокумента.КурсВзаиморасчетов,
			                          СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                          СтруктураШапкиДокумента.КратностьВзаиморасчетов,
			                          СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			СтрокаТаблицы.СтоимостьРегл = СтрокаТаблицы.СтоимостьРегл + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(МассивТаможенныйСборВал[Индекс], СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                              мВалютаРегламентированногоУчета,
			                              СтруктураШапкиДокумента.КурсВзаиморасчетов,      1,
			                              СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
		КонецЕсли;

		Если СтрокаТаблицы.ОбособленныйУчетТоваровПоЗаказамПокупателей = Ложь Тогда
			СтрокаТаблицы.ЗаказПокупателя = Неопределено;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Получаем информацию по валюте регламентированного учета 
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);

	ТаблицаТоваров.Колонки.Добавить("ПроводкаФактурнаяСтоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		ПошлинаВВалюте = Разделы[СтрокаТаблицы.НомерРаздела - 1].ПошлинаВВалюте;
		НДСВВалюте     = Разделы[СтрокаТаблицы.НомерРаздела - 1].НДСВВалюте;
		СтавкаНДС      = Разделы[СтрокаТаблицы.НомерРаздела - 1].СтавкаНДС;
		ТаможеннаяСтоимостьВВалютеРеглУчета = Разделы[СтрокаТаблицы.НомерРаздела - 1].ТаможеннаяСтоимостьВВалютеРеглУчета;

		Если ПошлинаВВалюте Тогда
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Пошлина, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																	 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
																	 СтруктураШапкиДокумента.КурсВзаиморасчетов,
																	 Данные.Курс, 
																	 СтруктураШапкиДокумента.КратностьВзаиморасчетов,
																	 Данные.Кратность);
		Иначе
			СтрокаТаблицы.ПроводкаСумма    = СтрокаТаблицы.Пошлина;
		КонецЕсли;
		СтрокаТаблицы.ПроводкаФактурнаяСтоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.ФактурнаяСтоимость, СтруктураШапкиДокумента.ВалютаДокумента,
																 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
																 СтруктураШапкиДокумента.КурсДокумента,
																 Данные.Курс, 
																 СтруктураШапкиДокумента.КратностьДокумента,
																 Данные.Кратность);
		Если НДСВВалюте Тогда
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
									                                 СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
									                                 СтруктураШапкиДокумента.КурсВзаиморасчетов,
									                                 Данные.Курс, 
									                                 СтруктураШапкиДокумента.КратностьВзаиморасчетов,
									                                 Данные.Кратность);
		Иначе
			СтрокаТаблицы.ПроводкаСуммаНДС = СтрокаТаблицы.НДС;
		КонецЕсли;

		СтрокаТаблицы.СтавкаНДС = СтавкаНДС;

	КонецЦикла;
	
	ТаблицаТоваров.Колонки.Добавить("СуммаТамСборРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 15, 2)));
	Если СтруктураШапкиДокумента.КратностьВзаиморасчетов<>0 Тогда
		ТамСборРегл = ТаможенныйСборВал * СтруктураШапкиДокумента.КурсВзаиморасчетов / СтруктураШапкиДокумента.КратностьВзаиморасчетов;
	Иначе
		ТамСборРегл = 0;
	КонецЕсли;
	
	ТамСборРегл = ТамСборРегл + ТаможенныйСбор;
	
	Если ТамСборРегл > 0 Тогда
		МассивКоэф = ТаблицаТоваров.ВыгрузитьКолонку("ФактурнаяСтоимость");
		МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(ТамСборРегл, МассивКоэф, 2);
		Если НЕ МассивСумм = Неопределено Тогда
			ТаблицаТоваров.ЗагрузитьКолонку( МассивСумм, "СуммаТамСборРегл");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()		

Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"     , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета" , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВедениеУчетаПоПроектам",    "ВедениеУчетаПоПроектам");

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеУпр()	

Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)

КонецПроцедуры // ДополнитьДеревоПолейЗапросаПоШапкеРегл()

// Формируем движения по регистрам.
//
// Параметры: 
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварам, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли, Отказ,Заголовок)

	ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ);
	ДвиженияПоРегистрамБухгалтерииРегл(СтруктураШапкиДокументаВалюта, ТаблицаПоТоварамВалюта, Отказ,Заголовок, Истина);
	ДвиженияПоРегистрамБухгалтерииРегл(СтруктураШапкиДокументаРубли, ТаблицаПоТоварамРубли, Отказ,Заголовок, ТаблицаПоТоварамВалюта.Количество() = 0);
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокументаВалюта, ТаблицаПоТоварамВалюта, Отказ);
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокументаРубли, ТаблицаПоТоварамРубли, Отказ);

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ)

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		// ТОВАРЫ ПО РЕГИСТРУ ВзаиморасчетыСКонтрагентами

		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		Если СтруктураШапкиДокумента.СуммаВзаиморасчетовВал <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка              = Неопределено;
			СтрокаДвижений.СуммаВзаиморасчетов = СтруктураШапкиДокумента.СуммаВзаиморасчетовВал;
			СтрокаДвижений.СуммаУпр   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВзаиморасчетовВал, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;

		Если СтруктураШапкиДокумента.СуммаВзаиморасчетов <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагентаРегл;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка                = Неопределено;
			СтрокаДвижений.СуммаВзаиморасчетов   = СтруктураШапкиДокумента.СуммаВзаиморасчетов;
			СтрокаДвижений.СуммаУпр   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетовРегл,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;


		// ПО РЕГИСТРУ РасчетыСКонтрагентами
		НаборДвижений = Движения.РасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();

		// Заполним таблицу движений.
		Если СтруктураШапкиДокумента.СуммаВзаиморасчетовВал <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка                = Неопределено;
			СтрокаДвижений.СуммаВзаиморасчетов   = СтруктураШапкиДокумента.СуммаВзаиморасчетовВал;
			СтрокаДвижений.СуммаУпр   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВзаиморасчетовВал, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                            СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                            СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                            СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;

		Если СтруктураШапкиДокумента.СуммаВзаиморасчетов <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагентаРегл;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка                = Неопределено;
			СтрокаДвижений.СуммаВзаиморасчетов   = СтруктураШапкиДокумента.СуммаВзаиморасчетов;
			СтрокаДвижений.СуммаУпр   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаВзаиморасчетовРегл,
			                            СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                            1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                            1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
		КонецЕсли;

		// ПО ПАРТИЯМ
		
		УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
			?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		    СтруктураШапкиДокумента, 
			Отказ, 
			ТаблицаПоТоварам, 
			Неопределено, 
			Неопределено, 
			СтруктураШапкиДокумента.ОтражатьВУправленческомУчете,
			ЛОЖЬ,
			ЛОЖЬ);

		
		// ПО РЕГИСТРУ доп.расходов для последующего распределения
		
		НаборДвижений = Движения.ДопРасходыНаПриобретениеТоваров;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ТабЗатрат = ТаблицаПоТоварам.Скопировать();
		
		// Из таблицы по товарам выделим строки, для которых НЕ заполнен документ оприходования
		Инд=0;
		Пока Инд<ТабЗатрат.Количество() Цикл
			
			Если ЗначениеЗаполнено(ТабЗатрат[Инд].ДокументОприходования) Тогда
				ТабЗатрат.Удалить(Инд);
			Иначе
				Инд=Инд+1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТабЗатрат.Колонки.Найти("Сумма")<>Неопределено Тогда
			ТабЗатрат.Колонки.Удалить("Сумма");
		КонецЕсли;
		ТабЗатрат.Колонки.Стоимость.Имя = "Сумма";
		
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабЗатрат, ТаблицаДвижений);
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ДопРасходыНаПриобретениеТоваров.ВыполнитьПриход();
		КонецЕсли;
		
		// ПО РЕГИСТРУ Закупки
		НаборДвижений = Движения.Закупки;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		// Подготовим таблицу товаров для регистра закупки.
		ТаблицаПоТоварамЗакупки = ТаблицаПоТоварам.Скопировать();
		Сч = 0;
		
		Пока Сч < ТаблицаПоТоварамЗакупки.Количество() Цикл
			
			СтрокаТаблицы = ТаблицаПоТоварамЗакупки.Получить(Сч);
			
			Если СтрокаТаблицы.Стоимость = 0 Тогда
				ТаблицаПоТоварамЗакупки.Удалить(СтрокаТаблицы);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		// Заполним таблицу движений.
		ТаблицаПоТоварамЗакупки.Колонки.НДС.Имя 				  = "_НДС";
		ТаблицаПоТоварамЗакупки.Колонки.НДСУпр.Имя 				  = "НДС";
		ТаблицаПоТоварамЗакупки.Колонки.ДокументОприходования.Имя = "ДокументЗакупки";
		
		// <- Шевченков №54944
		ТаблицаПоТоварамЗакупки.Колонки.СуммаВал.Имя = "ПРГ_СтоимостьВал"; 
		ТаблицаПоТоварамЗакупки.Колонки.НДСВал.Имя = "ПРГ_НДСВал"; 
		Если ТаблицаПоТоварамЗакупки.Колонки.Найти("ПРГ_ВалютаДокумента") = Неопределено Тогда
			ТаблицаПоТоварамЗакупки.Колонки.Добавить("ПРГ_ВалютаДокумента", новый описаниетипов("СправочникСсылка.Валюты"));			
		КонецЕсли;
				
		Для Каждого ТекСтрока Из ТаблицаПоТоварамЗакупки Цикл
			ТекСтрока.ПРГ_СтоимостьВал = ТекСтрока.Стоимость;
			ТекСтрока.ПРГ_НДСВал = ТекСтрока.НДС;
		КонецЦикла;
		// ->
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварамЗакупки, ТаблицаДвижений, Проект, Дата, "Закупки");
		Иначе		
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамЗакупки, ТаблицаДвижений);
		КонецЕсли;
		
		ТаблицаДвижений.ЗаполнитьЗначения(0,                  "Количество");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,      "Подразделение");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, 		  "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, 		  "Организация");
		
		//начало изменений Ожиганов А. посколь стоимость увеличивается в рублях, приведем к валюте взаиморасчетов 26.10.2016 
		//ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаДокумента, "ПРГ_ВалютаДокумента");  // Шевченков №54944
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, "ПРГ_ВалютаДокумента");  // Шевченков №54944
		//конец изменений 
		
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументЗакупки) Тогда
				СтрокаТаблицы.ДокументЗакупки = Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Если НЕ Отказ Тогда
			Движения.Закупки.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецЕсли; // ОтражатьВУправленческомУчете

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует бухгалтерские и налоговые проводки по регистрам бухгалтерии
// а также регистрирует НДС с распределяемых доп. расходов в регистре НДСДопРасходы
// 
Процедура ДвиженияПоРегистрамБухгалтерииРегл(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ,Заголовок, РассчитатьРазницы)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ИспользованиеРА = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	
	ТЗРНаСчете15 = Ложь;
	Если ИспользованиеРА Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитика)
		  ИЛИ УчетнаяПолитика.ВидУчетаТЗР = Перечисления.ВариантыУчетаТЗР.ОтнесениеНаОтдельныйСчет Тогда
			ТЗРНаСчете15 = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	СтруктураШапкиДокумента.Вставить("РассчитатьРазницы", РассчитатьРазницы);
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ДатаДок    = Дата;
	
	ДополнениеКСодержанию = ?(СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета,""," (в валюте)");
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПроводкиНУ = Движения.Налоговый;
		СчетНПВ    = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
	КонецЕсли;

	Для каждого СтрокаТЧ из ТаблицаПоТоварам Цикл 

		Если СтрокаТЧ.Содержание = "Пошлина" или СтрокаТЧ.Содержание = "Сбор" Тогда
			Если СтрокаТЧ.Сумма = 0 Тогда // Пошлина обычно 41.1 - 60.1
				Продолжить;
			КонецЕсли;
			Проводка = ПроводкиБУ.Добавить();
				
			Проводка.Период      = ДатаДок;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма       = СтрокаТЧ.Сумма;
			Если СтрокаТЧ.Содержание = "Пошлина" тогда
				Проводка.Содержание  = "Таможенная пошлина"+ДополнениеКСодержанию;
			Иначе
				Проводка.Содержание  = "Таможенный сбор"+ДополнениеКСодержанию;
			КонецЕсли;
			Если ТЗРНаСчете15 Тогда
				Проводка.СчетДт      = УправлениеЗапасамиРасширеннаяАналитика.ОпределитьСубсчетСчета15(СтрокаТЧ.СчетУчетаБУ);
			Иначе	
				Проводка.СчетДт      = СтрокаТЧ.СчетУчетаБУ;
			КонецЕсли;	
			Если Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"]) <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Склады", СтрокаТЧ.Склад);
			ИначеЕсли Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["СтатьиЗатрат"]) <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТЧ.СтатьяЗатратНУ);
			ИначеЕсли Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["ПрочиеДоходыИРасходы"]) <> Неопределено Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтрокаТЧ.СтатьяЗатратНУ);
				
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.ПодразделениеОрганизации) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТЧ.ПодразделениеОрганизации);
			КонецЕсли;

			Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период      = ДатаДок;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СтрокаТЧ.Сумма;
				
				Если СтрокаТЧ.Содержание = "Пошлина" тогда
					Проводка.Содержание  = "Таможенная пошлина"+ДополнениеКСодержанию;
				Иначе
					Проводка.Содержание  = "Таможенный сбор"+ДополнениеКСодержанию;
				КонецЕсли;
				Проводка.СчетДт      = СтрокаТЧ.СчетУчетаНУ;
				Если Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["Номенклатура"]) <> Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "Склады", СтрокаТЧ.Склад);
				ИначеЕсли Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["СтатьиЗатрат"]) <> Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаТЧ.СтатьяЗатратНУ);
				ИначеЕсли Проводка.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные["ПрочиеДоходыИРасходы"]) <> Неопределено Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтрокаТЧ.СтатьяЗатратНУ);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТЧ.ПодразделениеОрганизации) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения", СтрокаТЧ.ПодразделениеОрганизации);
				КонецЕсли;
				
				Проводка.СчетКт      = СчетНПВ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ДоговорКонтрагента);
			
				Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
				  И глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата
				  И СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				  
				    НалоговыйУчет.ВидУчетаПоПБУ18(Проводка);
				  
				    СчетУчетаНУСоответствующийБУ =  РасширеннаяАналитикаУчета.ПолучитьСчетУчетаНУ(СтрокаТЧ.СчетУчетаБУ);
					
					Если (НЕ СчетУчетаНУСоответствующийБУ.Родитель = СтрокаТЧ.СчетУчетаНУ.Родитель) тогда
						Если Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
							ВидУчетаВПроводке = Перечисления.ВидыУчетаПоПБУ18.ПР;
						Иначе
							ВидУчетаВПроводке = Перечисления.ВидыУчетаПоПБУ18.ВР;
						КонецЕсли;	
				  
					    СтараяПроводка = Проводка;
					  
				        Проводка = ПроводкиНУ.Добавить();
						Проводка.Период = СтруктураШапкиДокумента.Дата;
						Проводка.Организация = СтруктураШапкиДокумента.Организация;
						Проводка.ВидУчетаДт = ВидУчетаВПроводке;
						Проводка.ВидУчетаКт = ВидУчетаВПроводке;
						
						СчетУчетаНУСоответствующийБУ =  РасширеннаяАналитикаУчета.ПолучитьСчетУчетаНУ(СтрокаТЧ.СчетУчетаБУ);
						
						Проводка.СчетДт = СчетУчетаНУСоответствующийБУ;
						Проводка.СчетКт = СтараяПроводка.СчетДт;
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",        СтрокаТЧ.Номенклатура);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",        СтрокаТЧ.Склад);
						
						Для Каждого ТекущийВидСубконто Из СтараяПроводка.СчетДт.ВидыСубконто Цикл
							Проводка.СубконтоКт.Вставить(ТекущийВидСубконто.ВидСубконто, СтараяПроводка.СубконтоДт[ТекущийВидСубконто.ВидСубконто])
						КонецЦикла;	
						
						Проводка.Сумма = СтараяПроводка.Сумма;
						Проводка.Содержание = СтараяПроводка.Содержание;
						Проводка.НомерЖурнала = СтараяПроводка.НомерЖурнала;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			
		ИначеЕсли СтрокаТЧ.Содержание = "НДС" Тогда
			Если СтрокаТЧ.НДС > 0  Тогда // НДС
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДок;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СтрокаТЧ.НДС;
				Проводка.Содержание  = "НДС"+ДополнениеКСодержанию;
				Проводка.СчетДт      = СтрокаТЧ.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", Ссылка);
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТЧ.НДСВал;
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли СтрокаТЧ.Содержание = "Штраф" Тогда
			Если СтрокаТЧ.Сумма > 0 Тогда // Таможенный штраф
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДок;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = СтрокаТЧ.Сумма;
				Проводка.Содержание  = "Таможенный штраф" + ДополнениеКСодержанию;
				Проводка.СчетДт      = СтрокаТЧ.СчетУчетаБУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходов);
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрокаТЧ.СуммаВал;
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период      = ДатаДок;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Сумма       = СтрокаТЧ.Сумма;
					Проводка.Содержание  = "Таможенный штраф" + ДополнениеКСодержанию;
					Проводка.СчетДт      = СтрокаТЧ.СчетУчетаНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходов);
					
					Проводка.СчетКт      = СчетНПВ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.ДоговорКонтрагента);
	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;


	// ПО ПАРТИЯМ
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, 
		Отказ, 
		ТаблицаПоТоварам, 
		Неопределено, 
		Неопределено, 
		ЛОЖЬ,
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
		ЛОЖЬ);
	
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
			?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		    СтруктураШапкиДокумента, 
			Отказ, 
			ТаблицаПоТоварам, 
			Неопределено, 
			Неопределено, 
			ЛОЖЬ,
			ЛОЖЬ,
			СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);

    Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		ПроводкиНУ.Записать(ложь);
    КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамБухгалтерииРегл()

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ) Экспорт
	
	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	ТаблицаДляНДС = ТаблицаПоТоварам.Скопировать(Новый Структура("Содержание", "НДС"));
	
	Если Не ТаблицаДляНДС.Количество() = 0 Тогда
	
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаДляНДС, Отказ);
		
		ТаблицаДляНДС.Колонки.ДокументОприходования.Имя = "Партия";
		ТаблицаДляНДС.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		
		// При необходимости, отражаем в регистре партионного учета для НДС
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДляНДС, , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамПодсистемыНДС()

// Процедура вызывается из обработчика ПередЗаписью()
// Определяет статус партии на основании документа партии.
//
Процедура ЗаполнитьСтатусПартииВСтрокеТабличнойЧасти(СтрокаТаблицы,ТаблицаДокументовПартии)
	//Статус партии по умолчанию
	СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии) Тогда
		МетаданныеДокумента = СтрокаТаблицы.ДокументПартии.Метаданные();
		Если МетаданныеДокумента.Имя = "ПоступлениеТоваровУслуг"
		  ИЛИ МетаданныеДокумента.Имя = "ПоступлениеТоваровУслугВНТТ" Тогда
			РеквизитыДокументаПартии = ТаблицаДокументовПартии.Найти(СтрокаТаблицы.ДокументПартии,"ДокументПартии");
			
			Если РеквизитыДокументаПартии <> Неопределено Тогда
				Если ((РеквизитыДокументаПартии.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия) 
					ИЛИ (РеквизитыДокументаПартии.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика))
				   И РеквизитыДокументаПартии.ВидДоговораПартии = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию; 
				ИначеЕсли РеквизитыДокументаПартии.ДокументПартииВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
					СтатусПартии = Перечисления.СтатусыПартийТоваров.ВПереработку; 
				КонецЕсли;			
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
    СтрокаТаблицы.СтатусПартии = СтатусПартии;
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ПоступлениеТоваров    = (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	ПоступлениеТоваровНТТ = (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ"));

	Если ПоступлениеТоваров
	 ИЛИ ПоступлениеТоваровНТТ Тогда

		Если ПоступлениеТоваров Тогда
			Если (Не Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
			   И (Не Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование) Тогда
				 Возврат;
			КонецЕсли;
		Иначе
			Если Не Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика Тогда
				 Возврат;
			КонецЕсли;
		КонецЕсли;

		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Контрагент у нас другой
		Контрагент         = Неопределено;
		ДоговорКонтрагента = Неопределено;
		Сделка             = Неопределено;

		// Заполним Табличную часть
		Раздел = ДобавитьРаздел();
		ЗаполнитьПоПоступлению(Основание, 1);

		ВсегоСтоимость = 0;
		ВсегоПошлина   = 0;
		ВсегоНДС       = 0;

		ПосчитатьИтогиПоРазделу(1, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);

		Раздел.ТаможеннаяСтоимость = ВсегоСтоимость;

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, Отказ=ложь) Экспорт
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  ,     "ВалютаВзаиморасчетов"          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  ,     "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  ,     "ВидДоговора"                   , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагентаРегл"  , "ВидДоговора"                   , "ВидДоговораРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагентаРегл"  , "ВалютаВзаиморасчетов"          , "ВалютаВзаиморасчетовРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагентаРегл"  , "ВедениеВзаиморасчетов"         , "ВедениеВзаиморасчетовРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагентаРегл"  , "Организация"                   , "ДоговорОрганизацияРегл");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  ,     "Организация"                   , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"       ,   "ВестиПартионныйУчетПоСкладам"  , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     	,  "НеВключатьНДСВСтоимостьПартий" , "НеВключатьНДСВСтоимостьПартий");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     	,  "СпособОценкиМПЗ"           	   , "СпособОценкиМПЗ");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	//Сформируем структуру, аналогичную структуре шапки документа для отработки по валютному договору
	СтруктураШапкиДокументаВалюта = Новый структура();
	Для каждого Параметр Из СтруктураШапкиДокумента Цикл
		Если Прав(Параметр.Ключ,4) = "Регл" тогда
			//Данные, специфические для договора в рублях не требуются
			Продолжить;
		ИначеЕсли Прав(Параметр.Ключ,3) = "Вал" тогда
			//Необходимо установить данные реквизиты без специфического окончания 
			СтруктураШапкиДокументаВалюта.Вставить(Сред(Параметр.Ключ,1,СтрДлина(Параметр.Ключ)-3),Параметр.Значение);	
		ИначеЕсли СтруктураШапкиДокументаВалюта.Свойство(Параметр.Ключ) Тогда
			// Заполнено ранее, возможно - при переименовании реквизитов с постфиксом "Вал"
			продолжить;
		Иначе
			СтруктураШапкиДокументаВалюта.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЕсли; 
	КонецЦикла; 
	// Устанавливаем валюту документа для данной структуры равной валюте взаиморасчетов
	СтруктураШапкиДокументаВалюта.Вставить("ВалютаДокумента",СтруктураШапкиДокументаВалюта.ВалютаВзаиморасчетов);
	СтруктураШапкиДокументаВалюта.Вставить("КурсДокумента",  СтруктураШапкиДокументаВалюта.КурсВзаиморасчетов);
	СтруктураШапкиДокументаВалюта.Вставить("КратностьДокумента",  СтруктураШапкиДокументаВалюта.КратностьВзаиморасчетов);
	
	//Дополним структуру данными, необходимыми для отработки некоторых стандартных механизмов
	СтруктураШапкиДокументаВалюта.Вставить("НДСВключенВСтоимость", Ложь);
	СтруктураШапкиДокументаВалюта.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокументаВалюта.СчетУчетаРасчетовСКонтрагентом);
	
	СтруктураШапкиДокументаВалюта.Вставить("СтатьяПрочихДоходовРасходов",СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходов);
	СтруктураШапкиДокументаВалюта.Вставить("СчетУчетаРасходовБУ",  СтруктураШапкиДокумента.СчетУчетаРасходовБУ);
	СтруктураШапкиДокументаВалюта.Вставить("СчетУчетаРасходовНУ",  СтруктураШапкиДокумента.СчетУчетаРасходовНУ);
	
	//Сформируем структуру, аналогичную структуре шапки документа для отработки по валютному договору
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	//Сформируем структуру, аналогичную структуре шапки документа для отработки по рублевому договору
	СтруктураШапкиДокументаРубли = Новый структура();
	Для каждого Параметр Из СтруктураШапкиДокумента Цикл
		Если Прав(Параметр.Ключ,3) = "Вал" тогда
			//Данные, специфические для договора в валюте не требуются
			Продолжить;
		ИначеЕсли Прав(Параметр.Ключ,4) = "Регл" тогда
			//Необходимо установить данные реквизиты без специфического окончания 
			СтруктураШапкиДокументаРубли.Вставить(Сред(Параметр.Ключ,1,СтрДлина(Параметр.Ключ)-4),Параметр.Значение);	
		ИначеЕсли СтруктураШапкиДокументаРубли.Свойство(Параметр.Ключ) Тогда
			// Заполнено ранее, возможно - при переименовании реквизитов с постфиксом "Регл"
			продолжить;
		Иначе
			СтруктураШапкиДокументаРубли.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЕсли; 
	КонецЦикла; 
	// Устанавливаем валюту документа для данной структуры равной валюте регл. учета
	СтруктураШапкиДокументаРубли.Вставить("ВалютаДокумента",мВалютаРегламентированногоУчета);
	СтруктураШапкиДокументаРубли.Вставить("КурсДокумента",  1);
	СтруктураШапкиДокументаРубли.Вставить("КратностьДокумента",  1);
	// Устанавливаем валюту документа для данной структуры равной валюте регл. учета
	СтруктураШапкиДокументаРубли.Вставить("ВалютаВзаиморасчетов",мВалютаРегламентированногоУчета);
	СтруктураШапкиДокументаРубли.Вставить("КурсВзаиморасчетов",  1);
	СтруктураШапкиДокументаРубли.Вставить("КратностьВзаиморасчетов",  1);
	
	//Дополним структуру данными, необходимыми для отработки некоторых стандартных механизмов
	СтруктураШапкиДокументаРубли.Вставить("НДСВключенВСтоимость", Ложь);
	СтруктураШапкиДокументаРубли.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокументаРубли.СчетУчетаРасчетовСКонтрагентом);
	//Сформируем структуру, аналогичную структуре шапки документа для отработки по рублевому договору
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Ложь);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
		ПоддержкаПБУ18 = ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18;
	Иначе
		ПоддержкаПБУ18 = Ложь;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ПоддержкаПБУ18", ПоддержкаПБУ18);
	СтруктураШапкиДокументаРубли.Вставить("ПоддержкаПБУ18", ПоддержкаПБУ18);
	СтруктураШапкиДокументаВалюта.Вставить("ПоддержкаПБУ18", ПоддержкаПБУ18);
	
	мПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	СтруктураШапкиДокумента.Вставить("ВестиПартионныйУчетПоСкладам", мПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладам);
	СтруктураШапкиДокумента.Вставить("ВестиПартионныйУчетПоСкладамРегл", мПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладамРегл);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Подготавливает таблицы для проведения документа
Процедура СформироватьТаблицыПоДокументу(СтруктураШапкиДокумента, ТоварыВВалюте, ТоварыВРублях)
	
	Если СтруктураШапкиДокумента.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		КоэффициентРуб = 1;
	Иначе
		КоэффициентРуб = СтруктураШапкиДокумента.КурсДокумента/СтруктураШапкиДокумента.КратностьДокумента;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("КоэффициентРуб", КоэффициентРуб);
	Запрос.УстановитьПараметр("ДатаДокумента", СтруктураШапкиДокумента.Дата);
	
	///////////////////////////////////////////////////
	//Подготовка таблицы по договору расчетов в валюте
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НДС"" КАК Содержание,
	|	2 КАК ПорядокОтражения,
	|	ГТДИмпортРазделы.НомерСтроки КАК НомерРаздела,
	|	ГТДИмпортТовары.НомерСтроки КАК НомерСтроки,
	|	ГТДИмпортТовары.СчетУчетаБУ,
	|	ГТДИмпортТовары.Номенклатура,
	|	ГТДИмпортТовары.ХарактеристикаНоменклатуры,
	|	ГТДИмпортТовары.СерияНоменклатуры,
	|	ГТДИмпортТовары.ЗаказПокупателя,
	|	ГТДИмпортТовары.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|	ГТДИмпортТовары.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
	|	ГТДИмпортТовары.ДокументПартии.СкладОрдер КАК Склад,
	|	ГТДИмпортТовары.ДокументПартии КАК ДокументОприходования,
	|	ГТДИмпортТовары.СчетУчетаНДС,
	|	ГТДИмпортРазделы.СтавкаНДС,
	|	ГТДИмпортТовары.СчетУчетаНУ,
	|	ГТДИмпортТовары.СтатьяЗатратНУ,
	|	ГТДИмпортТовары.ПодразделениеОрганизации,
	|	ГТДИмпортТовары.СтатусПартии,
	|	0 КАК Сумма,
	|	ГТДИмпортТовары.СуммаНДС как НДС,
	|	0 КАК ФактурнаяСтоимость,
	///
	|	ГТДИмпортТовары.ПРГ_Качество КАК Качество
	///
	|ИЗ
	|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела
	|
	|ГДЕ
	|	(ГТДИмпортРазделы.НДСВВалюте = ИСТИНА) И
	|	ГТДИмпортРазделы.Ссылка = &Ссылка И
	|	ГТДИмпортТовары.Ссылка = &Ссылка И
	|	(ГТДИмпортТовары.СуммаНДС > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Пошлина"",
	|	1 КАК ПорядокОтражения,
	|	ГТДИмпортРазделы.НомерСтроки,
	|	ГТДИмпортТовары.НомерСтроки,
	|	ГТДИмпортТовары.СчетУчетаБУ,
	|	ГТДИмпортТовары.Номенклатура,
	|	ГТДИмпортТовары.ХарактеристикаНоменклатуры,
	|	ГТДИмпортТовары.СерияНоменклатуры,
	|	ГТДИмпортТовары.ЗаказПокупателя,
	|	ГТДИмпортТовары.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|	ГТДИмпортТовары.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
	|	ГТДИмпортТовары.ДокументПартии.СкладОрдер,
	|	ГТДИмпортТовары.ДокументПартии,
	|	ГТДИмпортТовары.СчетУчетаНДС,
	|	ГТДИмпортРазделы.СтавкаНДС,
	|	ГТДИмпортТовары.СчетУчетаНУ,
	|	ГТДИмпортТовары.СтатьяЗатратНУ,
	|	ГТДИмпортТовары.ПодразделениеОрганизации,
	|	ГТДИмпортТовары.СтатусПартии,
	|	ГТДИмпортТовары.СуммаПошлины,
	|	0,
	|	0,
	///
	|	ГТДИмпортТовары.ПРГ_Качество
	///
	|ИЗ
	|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела
	|
	|ГДЕ
	|	(ГТДИмпортРазделы.ПошлинаВВалюте = ИСТИНА) И
	|	ГТДИмпортРазделы.Ссылка = &Ссылка И
	|	ГТДИмпортТовары.Ссылка = &Ссылка И
	|	(ГТДИмпортТовары.СуммаПошлины > 0)
	|";  
	Если не СтруктураШапкиДокумента.ТаможенныйСборВал = 0 тогда
		Запрос.Текст = Запрос.Текст + "
		| объединить все
		| 
		|"+ 
		"ВЫБРАТЬ
		|	""Сбор"",
		|	3 КАК ПорядокОтражения,
		|	ГТДИмпортРазделы.НомерСтроки,
		|	ГТДИмпортТовары.НомерСтроки,
		|	ГТДИмпортТовары.СчетУчетаБУ,
		|	ГТДИмпортТовары.Номенклатура,
		|	ГТДИмпортТовары.ХарактеристикаНоменклатуры,
		|	ГТДИмпортТовары.СерияНоменклатуры,
		|	ГТДИмпортТовары.ЗаказПокупателя,
		|	ГТДИмпортТовары.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
		|	ГТДИмпортТовары.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
		|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
		|	ГТДИмпортТовары.ДокументПартии.СкладОрдер КАК Склад,
		|	ГТДИмпортТовары.ДокументПартии КАК Партия,
		|	ГТДИмпортТовары.СчетУчетаНДС,
		|	ГТДИмпортРазделы.СтавкаНДС,
		|	ГТДИмпортТовары.СчетУчетаНУ,
		|	ГТДИмпортТовары.СтатьяЗатратНУ,
		|	ГТДИмпортТовары.ПодразделениеОрганизации,
		|	ГТДИмпортТовары.СтатусПартии,
		
		|	0 КАК Сумма,
		|	0 КАК СуммаНДС,
		|	ГТДИмпортТовары.ФактурнаяСтоимость КАК ФактурнаяСтоимость,
		///
		|   ГТДИмпортТовары.ПРГ_Качество
		///
		|ИЗ
		|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
		|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела
		|
		|ГДЕ
		|	ГТДИмпортРазделы.Ссылка = &Ссылка И
		|	ГТДИмпортТовары.Ссылка = &Ссылка И
		|	(ГТДИмпортТовары.ФактурнаяСтоимость > 0)
	    |";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	НомерРаздела Возр,
	|	НомерСтроки Возр,
	|	ПорядокОтражения Возр";
	
	ТоварыВВалюте = Запрос.Выполнить().Выгрузить();//Подготовка таблицы по таможенному сбору в валюте
	
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам 
	 ИЛИ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладамРегл Тогда
		масКолонкиРаспределяемые = новый Массив();
		масКолонкиРаспределяемые.Добавить("ФактурнаяСтоимость");
		масКолонкиРаспределяемые.Добавить("НДС");
		масКолонкиРаспределяемые.Добавить("Сумма");
		ВыполнитьРаспределениеПоСкладам(ТоварыВВалюте, масКолонкиРаспределяемые);
    КонецЕсли;
	
	Если не СтруктураШапкиДокумента.ТаможенныйСборВал = 0 и не ТоварыВВалюте.Итог("ФактурнаяСтоимость") = 0  тогда
        МассивРезультата = ОбщегоНазначения.РаспределитьПропорционально(СтруктураШапкиДокумента.ТаможенныйСборВал,ТоварыВВалюте.ВыгрузитьКолонку("ФактурнаяСтоимость"));
		ТоварыВВалюте.ЗагрузитьКолонку(МассивРезультата,"ФактурнаяСтоимость");
		СтрокиСбора = ТоварыВВалюте.НайтиСтроки(Новый Структура("Содержание","Сбор"));
		Для каждого СтрокаСбора Из СтрокиСбора Цикл
			СтрокаСбора.Сумма = СтрокаСбора.ФактурнаяСтоимость;
		КонецЦикла;
	КонецЕсли;
	
	//ТоварыВВалюте.Колонки.Добавить("Качество");
	//ТоварыВВалюте.ЗаполнитьЗначения(Справочники.Качество.Новый,"Качество");
	
	Для каждого СтрокаТаблицы Из ТоварыВВалюте Цикл
		Если ТипЗнч(СтрокаТаблицы.Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СтрокаТаблицы.Склад = СтрокаТаблицы.Склад.Склад;
		КонецЕсли;
	КонецЦикла;
	//Подготовка таблицы по договору расчетов в валюте
	///////////////////////////////////////////////////
	
	///////////////////////////////////////////////////
	//Подготовка таблицы по договору расчетов в рублях
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НДС"" КАК Содержание,
	|	2 КАК ПорядокОтражения,
	|	ГТДИмпортРазделы.НомерСтроки КАК НомерРаздела,
	|	ГТДИмпортТовары.НомерСтроки КАК НомерСтроки,
	|	ГТДИмпортТовары.СчетУчетаБУ,
	|	ГТДИмпортТовары.Номенклатура,
	|	ГТДИмпортТовары.ХарактеристикаНоменклатуры,
	|	ГТДИмпортТовары.СерияНоменклатуры,
	|	ГТДИмпортТовары.ЗаказПокупателя,
	|	ГТДИмпортТовары.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|	ГТДИмпортТовары.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ГТДИмпортТовары.Номенклатура.Услуга КАК Услуга,
	|	ГТДИмпортТовары.ДокументПартии.СкладОрдер КАК Склад,
	|	ГТДИмпортТовары.ДокументПартии КАК ДокументОприходования,
	|	ГТДИмпортТовары.СчетУчетаНДС,
	|	ГТДИмпортРазделы.СтавкаНДС,
	|	ГТДИмпортТовары.СчетУчетаНУ,
	|	ГТДИмпортТовары.СтатьяЗатратНУ,
	|	ГТДИмпортТовары.ПодразделениеОрганизации,
	|	ГТДИмпортТовары.СтатусПартии,
	//начало изменений Ожиганов
	//|	ВЫБОР
	//|		КОГДА &ДатаДокумента < ДАТАВРЕМЯ(2015, 1, 1)
	//|			ТОГДА 0
	//|		ИНАЧЕ ВЫРАЗИТЬ(ГТДИмпортТовары.ФактурнаяСтоимость * &КоэффициентРуб КАК ЧИСЛО(15, 2))
	//|	КОНЕЦ КАК Сумма,
	//конец изменений
	| 	0 Как Сумма,
	|	ГТДИмпортТовары.СуммаНДС КАК НДС,
	|	0 КАК ФактурнаяСтоимость,
	///
	|   ГТДИмпортТовары.ПРГ_Качество КАК Качество
	///
	|ИЗ
	|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела

	|ГДЕ
	|	ГТДИмпортРазделы.НДСВВалюте = ЛОЖЬ
	|	И ГТДИмпортРазделы.Ссылка = &Ссылка
	|	И ГТДИмпортТовары.Ссылка = &Ссылка
	|	И ГТДИмпортТовары.СуммаНДС > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Пошлина"",
	|	1,
	|	ГТДИмпортРазделы.НомерСтроки,
	|	ГТДИмпортТовары.НомерСтроки,
	|	ГТДИмпортТовары.СчетУчетаБУ,
	|	ГТДИмпортТовары.Номенклатура,
	|	ГТДИмпортТовары.ХарактеристикаНоменклатуры,
	|	ГТДИмпортТовары.СерияНоменклатуры,
	|	ГТДИмпортТовары.ЗаказПокупателя,
	|	ГТДИмпортТовары.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей,
	|	ГТДИмпортТовары.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	ГТДИмпортТовары.Номенклатура.Услуга,
	|	ГТДИмпортТовары.ДокументПартии.СкладОрдер,
	|	ГТДИмпортТовары.ДокументПартии,
	|	ГТДИмпортТовары.СчетУчетаНДС,
	|	ГТДИмпортРазделы.СтавкаНДС,
	|	ГТДИмпортТовары.СчетУчетаНУ,
	|	ГТДИмпортТовары.СтатьяЗатратНУ,
	|	ГТДИмпортТовары.ПодразделениеОрганизации,
	|	ГТДИмпортТовары.СтатусПартии,
	|	ГТДИмпортТовары.СуммаПошлины,
	|	0,
	|	0,
	///
	|   ГТДИмпортТовары.ПРГ_Качество
	///
	|ИЗ
	|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела

	|ГДЕ
	|	ГТДИмпортРазделы.ПошлинаВВалюте = ЛОЖЬ
	|	И ГТДИмпортРазделы.Ссылка = &Ссылка
	|	И ГТДИмпортТовары.Ссылка = &Ссылка
	|	И ГТДИмпортТовары.СуммаПошлины > 0";  

	Если не СтруктураШапкиДокумента.ТаможенныйСбор = 0 тогда
		Запрос.Текст = Запрос.Текст + "
		| объединить все
		| 
		|"+ 
		"ВЫБРАТЬ
		|	""Сбор"",
		|	3 КАК ПорядокОтражения,
		|	ГТДИмпортРазделы.НомерСтроки,
		|	ГТДИмпортТовары.НомерСтроки,
		|	ГТДИмпортТовары.СчетУчетаБУ,
		|	ГТДИмпортТовары.Номенклатура,
		|	ГТДИмпортТовары.ХарактеристикаНоменклатуры,
		|	ГТДИмпортТовары.СерияНоменклатуры,
		|	ГТДИмпортТовары.ЗаказПокупателя,
		|	ГТДИмпортТовары.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей КАК ОбособленныйУчетТоваровПоЗаказамПокупателей,
		|	ГТДИмпортТовары.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
		|	ГТДИмпортТовары.Номенклатура.Услуга как Услуга,
		|	ГТДИмпортТовары.ДокументПартии.СкладОрдер КАК Склад,
		|	ГТДИмпортТовары.ДокументПартии КАК Партия,
		|	ГТДИмпортТовары.СчетУчетаНДС,
		|	ГТДИмпортРазделы.СтавкаНДС,
		|	ГТДИмпортТовары.СчетУчетаНУ,
		|	ГТДИмпортТовары.СтатьяЗатратНУ,
		|	ГТДИмпортТовары.ПодразделениеОрганизации,
		|	ГТДИмпортТовары.СтатусПартии,
		|	0 КАК Сумма,
		|	0 КАК СуммаНДС,
		|	ГТДИмпортТовары.ФактурнаяСтоимость КАК ФактурнаяСтоимость,
		///
		|   ГТДИмпортТовары.ПРГ_Качество
		///
		|ИЗ
		|	Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
		|		ПО ГТДИмпортРазделы.НомерСтроки = ГТДИмпортТовары.НомерРаздела
		|
		|ГДЕ
		|	ГТДИмпортРазделы.Ссылка = &Ссылка И
		|	ГТДИмпортТовары.Ссылка = &Ссылка И
		|	(ГТДИмпортТовары.ФактурнаяСтоимость > 0)
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	НомерРаздела Возр,
	|	НомерСтроки Возр,
	|	ПорядокОтражения Возр";
	
	ТоварыВРублях = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладам 
	 ИЛИ СтруктураШапкиДокумента.ВестиПартионныйУчетПоСкладамРегл Тогда
		масКолонкиРаспределяемые = новый Массив();
		масКолонкиРаспределяемые.Добавить("ФактурнаяСтоимость");
		масКолонкиРаспределяемые.Добавить("НДС");
		масКолонкиРаспределяемые.Добавить("Сумма");
		ВыполнитьРаспределениеПоСкладам(ТоварыВРублях, масКолонкиРаспределяемые);
    КонецЕсли;
	
	//Подготовка таблицы по таможенному сбору в рублях
	Если не СтруктураШапкиДокумента.ТаможенныйСбор = 0 и не ТоварыВРублях.Итог("ФактурнаяСтоимость") = 0  тогда
        МассивРезультата = ОбщегоНазначения.РаспределитьПропорционально(СтруктураШапкиДокумента.ТаможенныйСбор,ТоварыВРублях.ВыгрузитьКолонку("ФактурнаяСтоимость"));
		ТоварыВРублях.ЗагрузитьКолонку(МассивРезультата,"ФактурнаяСтоимость");
		СтрокиСбора = ТоварыВРублях.НайтиСтроки(Новый Структура("Содержание","Сбор"));
		Для каждого СтрокаСбора Из СтрокиСбора Цикл
			СтрокаСбора.Сумма = СтрокаСбора.ФактурнаяСтоимость;
		КонецЦикла;
	КонецЕсли;//Подготовка таблицы по таможенному сбору в рублях
	
	//ТоварыВРублях.Колонки.Добавить("Качество");
	//ТоварыВРублях.ЗаполнитьЗначения(Справочники.Качество.Новый,"Качество");
	
	Для каждого СтрокаТаблицы Из ТоварыВРублях Цикл
		Если ТипЗнч(СтрокаТаблицы.Склад)=Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СтрокаТаблицы.Склад = СтрокаТаблицы.Склад.Склад;
		КонецЕсли;
	КонецЦикла;
	//Подготовка таблицы по договору расчетов в рублях
	///////////////////////////////////////////////////
							  
КонецПроцедуры // СформироватьТаблицыПоДокументу(СтруктураШапкиДокумента)()

// Дополняет таблицу товаров строкой штрафа
//
// Параметры
//  СтруктураШапкиДокумента
//  <ТаблицаТоваров>  – <ТаблицаЗначений> – таблица товаров в нужной валюте
//  <ВалютныйШтраф>  – <Булево> 		  – валюта добавления "Истина" - ин.валюта, "Ложь" - рубли
//
Процедура ДополнениеТаблицыСтрокойШтрафа(СтруктураШапкиДокумента,ТаблицаТоваров,ВалютныйШтраф)
	//Дополним строкой штрафа в валюте
	Если ?(ВалютныйШтраф,СтруктураШапкиДокумента.ТаможенныйШтрафВал<>0,СтруктураШапкиДокумента.ТаможенныйШтраф<>0) Тогда
		СтрокаШтрафа = ТаблицаТоваров.Добавить();
		СтрокаШтрафа.Содержание		= "Штраф";
		СтрокаШтрафа.СчетУчетаБУ	= СтруктураШапкиДокумента.СчетУчетаРасходовБУ;
		СтрокаШтрафа.СчетУчетаНУ	= СтруктураШапкиДокумента.СчетУчетаРасходовНУ;
		СтрокаШтрафа.СтатьяЗатратНУ = СтруктураШапкиДокумента.СтатьяПрочихДоходовРасходов;
		СтрокаШтрафа.Сумма 			= СтруктураШапкиДокумента[?(ВалютныйШтраф,"ТаможенныйШтрафВал","ТаможенныйШтраф")];
		СтрокаШтрафа.НДС		= 0;
		СтрокаШтрафа.Услуга			= Истина;
	КонецЕсли; 
КонецПроцедуры // ДополнениеТаблицыСтрокойШтрафа()

// Подготавливает таблицы для проведения документа
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли) Экспорт
	
	ТаблицаПоТоварамВалюта = Неопределено;
	ТаблицаПоТоварамРубли = Неопределено;
	
	СформироватьТаблицыПоДокументу(СтруктураШапкиДокумента,ТаблицаПоТоварамВалюта,ТаблицаПоТоварамРубли);
	
	ДополнениеТаблицыСтрокойШтрафа(СтруктураШапкиДокумента,ТаблицаПоТоварамВалюта,Истина);
	ДополнениеТаблицыСтрокойШтрафа(СтруктураШапкиДокумента,ТаблицаПоТоварамРубли,Ложь);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварамВалюта, СтруктураШапкиДокументаВалюта, Ложь, мВалютаРегламентированногоУчета); //, Разделы
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварамРубли,  СтруктураШапкиДокументаРубли, Ложь, мВалютаРегламентированногоУчета); //, Разделы
		
КонецПроцедуры // ПодготовитьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли;
	Перем ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли,Отказ);
	
	мСообщенияОбОшибках.Очистить();
	
	// Получим необходимые данные для проверки и проведения по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерРаздела"                , "НомерРаздела");
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ФактурнаяСтоимость"          , "ФактурнаяСтоимость");
	СтруктураПолей.Вставить("НДС"                         , "СуммаНДС");
	СтруктураПолей.Вставить("Пошлина"                     , "СуммаПошлины");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям" , "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("НомерГТД"                    , "СерияНоменклатуры.НомерГТД");

	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                    , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЗаказПокупателя"             , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ДокументОприходования"       , "ДокументПартии");
	СтруктураПолей.Вставить("ДокументПартииВидОперации"   , "ДокументПартии.ВидОперации");
	СтруктураПолей.Вставить("ДокументПартииВидПоступления", "ДокументПартии.ВидПоступления");
	СтруктураПолей.Вставить("Склад"                       , "ДокументПартии.СкладОрдер");
	СтруктураПолей.Вставить("СкладОрдера"                 , "ДокументПартии.СкладОрдер.Склад"); 
	СтруктураПолей.Вставить("ВидДоговораПартии"           , "ДокументПартии.ДоговорКонтрагента.ВидДоговора");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
							"ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("СтатусПартии"                , "СтатусПартии");						

	СтруктураПолей.Вставить("СчетУчетаБУ"   ,           "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНДС"  ,           "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНУ"   ,           "СчетУчетаНУ");
	СтруктураПолей.Вставить("СтатьяЗатратНУ",           "СтатьяЗатратНУ");
	СтруктураПолей.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");
	
	/// Кунов О.В., 11.08.2015 - 42605
	СтруктураПолей.Вставить("Качество", "ПРГ_Качество");
	///

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам 
	   И Не ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;	
	КонецЕсли;	
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);

	ОбработатьТабличнуюЧастьРазделы(СтруктураШапкиДокумента);

	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли);

	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиРазделы(Разделы, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	мСообщенияОбОшибках.Свернуть("ДокументОприходования, Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры");
	Для Каждого Строка Из мСообщенияОбОшибках Цикл
		ТекстСообщения = "Не найден в документе """+ Строка.ДокументОприходования + """ товар: " + Строка.Номенклатура
			+ ?(Строка.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + Строка.ХарактеристикаНоменклатуры, "")
			+ ?(Строка.Номенклатура.ВестиУчетПоСериям, ", серия: " + Строка.СерияНоменклатуры, "");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам,  СтруктураШапкиДокумента, Ложь, мВалютаРегламентированногоУчета);
	КонецЕсли;
	
	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварам, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли, Отказ, Заголовок);
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли", ТаблицаПоТоварам, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли));
	
КонецПроцедуры

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	//Заполнение статуса партии, если он не заполнен
	Запрос = Новый Запрос;
	
	ТаблицаДокументовПартии = Товары.Выгрузить(,"ДокументПартии");
	ТаблицаДокументовПартии.Свернуть("ДокументПартии");
	
	//РАЗРЕШЕННЫЕ не пишем
	//Если какой-либо из документов партии недоступен, то мы не можем корректно определить статус партии, по этому необходимо выдать ошибку
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокументовПартии.ДокументПартии КАК ДокументПартии
	|ПОМЕСТИТЬ ТаблицаДокументовПартии
	|ИЗ &ТаблицаДокументовПартии КАК ТаблицаДокументовПартии
	|;
	|ВЫБРАТЬ 
	|	ГТДИмпортТовары.ДокументПартии,
	|	ГТДИмпортТовары.ДокументПартии.ВидОперации КАК ДокументПартииВидОперации,
	|	ГТДИмпортТовары.ДокументПартии.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораПартии
	|ИЗ
	|	ТаблицаДокументовПартии КАК ГТДИмпортТовары";
	
	Запрос.УстановитьПараметр("ТаблицаДокументовПартии", ТаблицаДокументовПартии);
	
	ТаблицаДокументовПартии = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицы из Товары Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатусПартии) Тогда
			ЗаполнитьСтатусПартииВСтрокеТабличнойЧасти(СтрокаТаблицы,ТаблицаДокументовПартии);
		КонецЕсли;	
	КонецЦикла;
	
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");

КонецПроцедуры // ПриЗаписи()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСообщенияОбОшибках = Новый ТаблицаЗначений;
мСообщенияОбОшибках.Колонки.Добавить("ДокументОприходования");
мСообщенияОбОшибках.Колонки.Добавить("Номенклатура");
мСообщенияОбОшибках.Колонки.Добавить("ХарактеристикаНоменклатуры");
мСообщенияОбОшибках.Колонки.Добавить("СерияНоменклатуры");