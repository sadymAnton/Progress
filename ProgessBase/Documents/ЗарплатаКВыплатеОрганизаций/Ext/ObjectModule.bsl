////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ДОКУМЕНТА

// Функция возвращает таблицу зарплат физлиц по характеру выплаты документа 
//                  
// Параметры:
//   ФизЛица - массив физлиц, для которых нужно получить зарплату
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ПолучитьЗарплатуПоХарактеруВыплаты(ФизЛица = Неопределено)
	
	Возврат
		ЗарплатаКВыплатеОрганизацийСервис.ПодготовитьТаблицуЗарплатДляДокумента(ЭтотОбъект,
			ЗарплатаКВыплатеОрганизацийСервис.ПолучитьЗарплатуПоХарактеруВыплаты(ЭтотОбъект, ФизЛица))	
	
КонецФункции

// Функция возвращает таблицу зарплат, дополненную до указанного списка физлиц
//                  
//
// Параметры:
//   ТаблицаЗарплат - таблица значений с данными о зарплате физлиц
//   ФизЛица - массив физлиц, для которых нужно получить зарплату
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ДополнитьТаблицуЗарплат(ТаблицаЗарплат, ФизЛица)
	
	Для Каждого ФизЛицо Из ФизЛица Цикл
		Если ТаблицаЗарплат.Найти(ФизЛицо, "ФизЛицо") = Неопределено Тогда
			СтрокаЗарплаты = ТаблицаЗарплат.Добавить();
			СтрокаЗарплаты.ФизЛицо = ФизЛицо;
			СтрокаЗарплаты.Начислено = 0;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ТаблицаЗарплат
	
КонецФункции

// Процедура заполняет ТЧ документа "Зарплата" данными из переданной таблицы значений 
//
// Параметры:
//   ТаблицаЗарплат - таблица значений с данными о зарплате физлиц
//
Процедура ЗаполнитьПоТаблицеЗарплат(ТаблицаЗарплат) Экспорт
	
	Если ТаблицаЗарплат.Количество() = 0 Тогда
		
		Зарплата.Очистить();
		
	Иначе
		
		// Загружаем отобранные строки в ТЧ документа
		Зарплата.Загрузить(ТаблицаЗарплат);
		
		// Устанавливаем для ТЧ Зарплата значения по умолчанию
		Для Каждого СтрокаЗарплаты Из Зарплата Цикл
			
			СтрокаЗарплаты.Авторасчет = Истина;
			ЗарплатаКВыплатеОрганизацийПереопределяемый.ЗаполнитьДобавленнуюСтрокуЗарплаты(ЭтотОбъект, СтрокаЗарплаты);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСЧЕТА ДОКУМЕНТА

// Функция осуществляет формирование таблицы значений с коэффициентами плановых удержаний физлиц
//
// Параметр:
//   Документ - документ "Зарплата к выплате организаций"
//
Функция ПолучитьКоэффициентыПрочихПлановыхУдержаний(ФизЛица, ПериодРегистрации, Организация)
	
	Запрос = Новый Запрос();
		
	Запрос.УстановитьПараметр("Период",				НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ФизЛица", 			ФизЛица);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));

	МассивСпособовРасчета = Новый Массив;
	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений);
	Запрос.УстановитьПараметр("УдержанияПроцентом",	МассивСпособовРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдержанияОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
	|ГДЕ
	|	УдержанияОрганизаций.СпособРасчета В(&УдержанияПроцентом)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &Период
	|					И ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.Показатель1Завершения
	|			ИНАЧЕ ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.Показатель1
	|		КОНЕЦ) КАК Процент
	|ИЗ
	|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &ГоловнаяОрганизация
	|				И ВидРасчета В
	|					(ВЫБРАТЬ
	|						Удержания.Ссылка
	|					ИЗ
	|						ВТУдержания КАК Удержания)
	|				И Физлицо В (&ФизЛица)) КАК ПлановыеУдержанияРаботниковОрганизацийСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ФизЛицо";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПлановыеУдержания	

// Функция осуществляет формирование таблицы значений с коэффициентами плановых удержаний физлиц
//
// Параметр:
//   Документ - документ "Зарплата к выплате организаций"
//
Функция ПолучитьКоэффициентыАлиментов(ФизЛица, ПериодРегистрации, Организация)
	
	Запрос = Новый Запрос();
		
	Запрос.УстановитьПараметр("Период",				НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ФизЛица", 			ФизЛица);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));

	МассивСпособовРасчета = Новый Массив;
	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом);
	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела);
	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор);
	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.БанковскиеИздержки);
	Запрос.УстановитьПараметр("УдержанияПроцентом",	МассивСпособовРасчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдержанияОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
	|ГДЕ
	|	УдержанияОрганизаций.СпособРасчета В(&УдержанияПроцентом)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫБОР
	|			КОГДА ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <= &Период
	|					И ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.Показатель1Завершения
	|			ИНАЧЕ ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.Показатель1
	|		КОНЕЦ) КАК Процент
	|ИЗ
	|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(
	|			&Период,
	|			Организация = &ГоловнаяОрганизация
	|				И ВидРасчета В
	|					(ВЫБРАТЬ
	|						Удержания.Ссылка
	|					ИЗ
	|						ВТУдержания КАК Удержания)
	|				И Физлицо В (&ФизЛица)) КАК ПлановыеУдержанияРаботниковОрганизацийСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлановыеУдержанияРаботниковОрганизацийСрезПоследних.ФизЛицо";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПлановыеУдержания	

// Рассчитывает суммы к выплате по документу
//
// Параметры:
//	ТаблицаЗарплат
//
Функция РассчитатьТаблицуЗарплат(ТаблицаЗарплат) Экспорт
	
	// Предварительный учет удержаний
	Если ПредварительныйУчетУдержаний Тогда
		ФизЛица = ТаблицаЗарплат.ВыгрузитьКолонку("ФизЛицо");
		УдержанияПлан = ПолучитьКоэффициентыПрочихПлановыхУдержаний(ФизЛица, ПериодРегистрации, Организация);
		АлиментыПлан = ПолучитьКоэффициентыАлиментов(ФизЛица, ПериодРегистрации, Организация);
		УдержанияНДФЛ = ЗарплатаКВыплатеОрганизацийСервис.ПолучитьКоэффициентыНДФЛ(ФизЛица, ПериодРегистрации);
		МассивХарактеров = ЗарплатаКВыплатеОрганизацийПереопределяемый.ДополнительныеХарактерыВыплатыСНачисленнымНДФЛ();
		НачисленыСуммыБезНДФЛ = ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Отпускные Или ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПоБольничнымЛистам 
				Или ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПрочиеРазовыеНачисления Или МассивХарактеров.Найти(ХарактерВыплаты) <> Неопределено;
	КонецЕсли;
			
	//Blik 091216 59901 н
	//при выплате отпукных необходимо учесть алименты
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Отпускные Тогда
		 ФизЛица = ТаблицаЗарплат.ВыгрузитьКолонку("ФизЛицо");
		 АлиментыПлан = ПолучитьКоэффициентыАлиментов(ФизЛица, ПериодРегистрации, Организация);
	КонецЕсли;
	//Blik 091216 59901 к
	
	// Компенсация за задержку выплаты
	Если ДнейНеВыплаты > 0 Тогда
		ПроцентКомпенсации = ЗарплатаКВыплатеОрганизацийСервис.ОпределитьПроцентКомпенсации(Дата, ДнейНеВыплаты);
	КонецЕсли;

	// Округление результатов
	Если ЗначениеЗаполнено(Округление) Тогда
		ТочностьДо = ЗарплатаКВыплатеОрганизацийСервис.СпособОкругленияТочность(Округление);
	КонецЕсли;
	
	НулевыеСтроки = Новый Массив();
	
	Для Каждого СтрокаЗарплаты Из ТаблицаЗарплат Цикл
		
		// Процент выплаты
		Если ПроцентВыплаты <> 100 Тогда
			СтрокаЗарплаты.Начислено = СтрокаЗарплаты.Начислено * ПроцентВыплаты/100;
		КонецЕсли;
		
		СтрокаЗарплаты.Сумма = СтрокаЗарплаты.Начислено;
		
		// Предварительный учет удержаний
		Если ПредварительныйУчетУдержаний Тогда
			
			СтрокаНДФЛ = УдержанияНДФЛ.Найти(СтрокаЗарплаты.Физлицо, "Физлицо");
			СтрокаАлим = АлиментыПлан.Найти(СтрокаЗарплаты.Физлицо, "Физлицо");
			СтрокаПлан = УдержанияПлан.Найти(СтрокаЗарплаты.Физлицо, "Физлицо");
			
			Если НачисленыСуммыБезНДФЛ Тогда
				
				УдерНДФЛ = 0;
				УдерПлан = ?(СтрокаАлим = Неопределено, 0, Окр(СтрокаЗарплаты.Сумма * СтрокаАлим.Процент/100, 2));
				УдерПлан = УдерПлан + ?(СтрокаПлан = Неопределено, 0, Окр(СтрокаЗарплаты.Сумма / (1 - ?(СтрокаНДФЛ = Неопределено, 0, СтрокаНДФЛ.Ставка / 100)) * СтрокаПлан.Процент/100, 2));
				
			Иначе
				
				УдерНДФЛ = ?(СтрокаНДФЛ = Неопределено, 0, Окр(СтрокаЗарплаты.Сумма * СтрокаНДФЛ.Ставка / 100, 0));
				УдерПлан = ?(СтрокаАлим = Неопределено, 0, Окр((СтрокаЗарплаты.Сумма - УдерНДФЛ) * СтрокаАлим.Процент/100, 2));
				УдерПлан = УдерПлан + ?(СтрокаПлан = Неопределено, 0, Окр(СтрокаЗарплаты.Сумма * СтрокаПлан.Процент/100, 2));
				
			КонецЕсли;
			
			СтрокаЗарплаты.Сумма = Макс(СтрокаЗарплаты.Сумма - (УдерПлан + УдерНДФЛ), 0);
			
		КонецЕсли;
		//Blik 091216 59901 н
		//при выплате отпукных необходимо учесть алименты
		Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Отпускные Тогда
			
			СтрокаАлим = АлиментыПлан.Найти(СтрокаЗарплаты.Физлицо, "Физлицо");
			
			УдерНДФЛ = 0;
			УдерПлан = ?(СтрокаАлим = Неопределено, 0, Окр(СтрокаЗарплаты.Сумма * СтрокаАлим.Процент/100, 2));
			УдерПлан = УдерПлан + ?(СтрокаПлан = Неопределено, 0, Окр(СтрокаЗарплаты.Сумма / (1 - ?(СтрокаНДФЛ = Неопределено, 0, СтрокаНДФЛ.Ставка / 100)) * СтрокаПлан.Процент/100, 2));
			
			СтрокаЗарплаты.Сумма = Макс(СтрокаЗарплаты.Сумма - (УдерПлан + УдерНДФЛ), 0);
			
		КонецЕсли;
		//Blik 091216 59901 к
		// Округление результатов
		Если ЗначениеЗаполнено(Округление) Тогда
			СтрокаЗарплаты.Сумма = Окр(СтрокаЗарплаты.Сумма / ТочностьДо, 0) * ТочностьДо;
		КонецЕсли;
		
		СтрокаЗарплаты.Удержано = СтрокаЗарплаты.Начислено - СтрокаЗарплаты.Сумма;
		
		// Компенсация за задержку выплаты
		Если ДнейНеВыплаты > 0 Тогда
			СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты = СтрокаЗарплаты.Сумма * ПроцентКомпенсации
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаЗарплат
	
КонецФункции // РассчитатьЗарплату

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок = "")

	// Организация
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана организация, по которой выплачивается зарплата!", Отказ, Заголовок);
	КонецЕсли;
	
	// ХарактерВыплаты
	Если НЕ ЗначениеЗаполнено(ХарактерВыплаты) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан характер выплат!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДокументОснование
	ТипОснования = ЗарплатаКВыплатеОрганизацийПереопределяемый.ТипОснованияПоХарактеруВыплаты(ХарактерВыплаты);
	Если ТипОснования <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда 
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан документ - основание!", Отказ, Заголовок);
		ИначеЕсли ТипЗнч(ДокументОснование) <> ТипОснования Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Тип документа-основания не соответствует характеру выплаты!", Отказ, Заголовок);
			НельзяАвтозаполнять = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКВыплатеОрганизацийПереопределяемый.ВыполнитьДополнительныеПроверкиШапкиДокумента(ЭтотОбъект, Отказ, Заголовок);	
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеСтрокиЗарплаты(ШапкаДокумента, СтрокаЗарплаты, УпрощенныйУчетВзаиморасчетов, Отказ, Заголовок = "")

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаЗарплаты.НомерСтроки) + ": ";
	
	// Работник
	Если НЕ ЗначениеЗаполнено(СтрокаЗарплаты.ФизЛицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// Сумма
	Если (СтрокаЗарплаты.Сумма + СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты) = 0 Тогда
		ОбщегоНазначенияЗК.СообщитьИнформациюПользователю(СтрокаНачалаСообщенияОбОшибке + "не указана сумма к выплате. Строка пропущена.");
	КонецЕсли;
	Если СтрокаЗарплаты.Сумма < 0 Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указана отрицательная сумма к выплате!", Отказ, Заголовок);
	КонецЕсли;
	Если СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты < 0 Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "указана отрицательная компенсация за задержку зарплаты!", Отказ, Заголовок);
	КонецЕсли;

	ЗарплатаКВыплатеОрганизацийПереопределяемый.ВыполнитьДополнительныеПроверкиСтрокиДокумента(ШапкаДокумента, СтрокаЗарплаты, УпрощенныйУчетВзаиморасчетов, Отказ, Заголовок, СтрокаНачалаСообщенияОбОшибке);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет суммы к выплате по документу
//
Процедура Автозаполнение(ФизЛица = Неопределено) Экспорт
	
	Заголовок = "Расчет документа: " + СокрЛП(ЭтотОбъект);
	
	Отказ = Ложь; // для возврата из процедуры, если проверка покажет, что обязательные реквизиты не заполнены
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКВыплатеОрганизацийПереопределяемый.ПроверитьФизлицаДляАвтозаполнения(ЭтотОбъект, Физлица, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗарплат = ПолучитьЗарплатуПоХарактеруВыплаты(ФизЛица);

	РассчитатьТаблицуЗарплат(ТаблицаЗарплат);

	ЗаполнитьПоТаблицеЗарплат(ТаблицаЗарплат);
	
КонецПроцедуры // Рассчитать

// Рассчитывает суммы к выплате по документу
//
Процедура Рассчитать(ФизЛица = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(Отказ, "Расчет документа: " + СокрЛП(ЭтотОбъект));

	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если ФизЛица = Неопределено Тогда
		ФизЛица = Зарплата.ВыгрузитьКолонку("Физлицо");
	КонецЕсли;
	
	// берем суммы начисленных зарплат по характеру выплаты
	ТаблицаЗарплат = ДополнитьТаблицуЗарплат(ПолучитьЗарплатуПоХарактеруВыплаты(ФизЛица), ФизЛица);
	
	РассчитатьТаблицуЗарплат(ТаблицаЗарплат);
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗарплат Цикл
		СтрокаТЧ = Зарплата.Найти(СтрокаТаблицы.ФизЛицо, "ФизЛицо");
		Если СтрокаТЧ <> Неопределено И СтрокаТЧ.Авторасчет Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаблицы, "Сумма, Начислено, Удержано, КомпенсацияЗаЗадержкуЗарплаты")
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры // Рассчитать

// Функция добавляет указанного работника в ТЧ Зарплата
//
Функция ДобавитьРаботника(ФизЛицо) Экспорт
	
	Добавлен = Ложь;
	
	Если Зарплата.Найти(Физлицо, "ФизЛицо") = Неопределено Тогда
		
		СтрокаЗарплаты = Зарплата.Добавить();
		
		СтрокаЗарплаты.Физлицо = Физлицо;
		СтрокаЗарплаты.Авторасчет = Истина;
		
		ЗарплатаКВыплатеОрганизацийПереопределяемый.ЗаполнитьДобавленнуюСтрокуЗарплаты(ЭтотОбъект, СтрокаЗарплаты);
		
		Добавлен = Истина;	
		
	КонецЕсли;

	Возврат Добавлен;
	
КонецФункции

// Очистка незаполненных строк и строк с нулевыми и отрицательных суммами
//
Процедура УдалитьПустыеСтроки() Экспорт
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаЗарплаты.Физлицо) ИЛИ (СтрокаЗарплаты.Сумма + СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты) <= 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаЗарплаты);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаЗарплаты Из УдаляемыеСтроки Цикл
		Зарплата.Удалить(СтрокаЗарплаты);
	КонецЦикла;

КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение Тогда

Процедура ЗарегистрироватьДоходыПоКомпенсации(Форма) Экспорт

	Если Не Проведен Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Регистрировать компенсацию можно только после проведения документа!");
		Возврат
	КонецЕсли;
	Если НЕ РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, Форма, "Регистрировать компенсацию можно только после записи документа. Продолжить?") Тогда
		Возврат;
	КонецЕсли;
	
	ДокКорректировкаУчета = Документы.НДФЛиЕСНДоходыИНалоги.СоздатьДокумент();
	ДокКорректировкаУчета.Заполнить(Ссылка);
	ФормаДокумента = ДокКорректировкаУчета.ПолучитьФорму();
	ФормаДокумента.Открыть();

КонецПроцедуры //ЗарегистрироватьДоходыПоКомпенсации()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Возврат ЗарплатаКВыплатеОрганизацийПереопределяемый.Печать(ИмяМакета, КоличествоЭкземпляров, НаПринтер, ЭтотОбъект);

КонецФункции // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат ЗарплатаКВыплатеОрганизацийПереопределяемый.ПолучитьСтруктуруПечатныхФорм(ЭтотОбъект)
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат
	КонецЕсли;	
	
	// Период регистрации хранится как первое число месяца
	ПериодРегистрации = НачалоМесяца(ПериодРегистрации);
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Нельзя отменять проведение документа, переданного для оплаты
	Если НЕ ОбменДанными.Загрузка И НЕ ПометкаУдаления И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если ЗарплатаКВыплатеОрганизацийПереопределяемый.ПолучитьДокументыНаОснованииЗарплатаКВыплате(Ссылка).Количество()  > 0 Тогда
			
			// Заголовок для сообщений об ошибках записи.
			Заголовок = "Отмена проведения документа: " + СокрЛП(Ссылка);
			
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Документ оплачен, отмена проведения невозможна!", Отказ, Заголовок);
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Зарплата.Итог("Сумма") + Зарплата.Итог("КомпенсацияЗаЗадержкуЗарплаты");
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Зарплата);
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Если документ перенесен - движения не делаем
	Если ДанныеПрошлойВерсии Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	УпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
	
	Если Не Отказ Тогда
		
		// Надо проверить табличную часть
		Для Каждого СтрокаЗарплаты Из Зарплата Цикл
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиЗарплаты(ЭтотОбъект, СтрокаЗарплаты, УпрощенныйУчетВзаиморасчетов, Отказ, Заголовок);
		КонецЦикла;
		
	КонецЕсли;
		
	Если НЕ Отказ Тогда
		ЗарплатаКВыплатеОрганизацийСервис.ПровестиПоХарактеруВыплаты(ЭтотОбъект);
	КонецЕсли;
	
	Если НЕ Отказ И УпрощенныйУчетВзаиморасчетов Тогда
		
		ЗарплатаКВыплатеОрганизацийПереопределяемый.ПровестиВзаиморасчеты(ЭтотОбъект, Отказ, Заголовок);
		
	КонецЕсли;	
		
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если Основание = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("Структура") Тогда
		
		Если Основание.Свойство("ПредварительныйУчетУдержаний",) Тогда
			ДокОснование = Основание.Ссылка;
			УчетУдержаний= Основание.ПредварительныйУчетУдержаний;
		Иначе
			Возврат;			
		КонецЕсли;
		
	Иначе
		
		ДокОснование = Основание;
		УчетУдержаний= Ложь;
		
	КонецЕсли;
	
	ХарактерВыплаты	= ЗарплатаКВыплатеОрганизацийПереопределяемый.ХарактерВыплатыПоДокументу(ДокОснование);
	Если ХарактерВыплаты = НеОпределено Тогда
		Возврат
	КонецЕсли;	
	
	// Общие реквизиты
	ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, ДокОснование);
	Дата = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.НДФЛВозвратНалога") Тогда
		ПериодРегистрации = НачалоМесяца(ДокОснование.МесяцНалоговогоПериода);
	Иначе
		ПериодРегистрации = НачалоМесяца(ДокОснование.ПериодРегистрации);
	КонецЕсли;
	
	// Настройки расчета
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЗарплатаКВыплатеОрганизацийСервис.ЗаполнитьПоНастройкам(ЭтотОбъект);
	#Иначе
		НастройкиЗаполнения = ЗарплатаКВыплатеОрганизацийСервис.СоздатьНастройки();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиЗаполнения);
	#КонецЕсли
	
	СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
	ДокументОснование = ДокОснование;
	
	ПредварительныйУчетУдержаний = УчетУдержаний;
	ДнейНеВыплаты = 0;
	
	Автозаполнение();
	
КонецПроцедуры
