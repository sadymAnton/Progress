Перем мВалютаРегламентированногоУчета Экспорт;
Перем мИмяВалютыРегламентированногоУчета Экспорт;
Перем мПрежнееОтражатьВУправленческомУчете;
Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	ТабДокумент = Неопределено;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ИсторияПогашения" Тогда
		
		ТабДокумент = ЗаймыРаботникам.ПечатьИсторияПогашенияЗайма(Ссылка);
		
	ИначеЕсли ИмяМакета = "Договор"  Тогда
		
		ТабДокумент = ЗаймыРаботникам.ПечатьДоговораЗайма(Ссылка);
		
	КонецЕсли;
	
	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,"Договор займа"));
	
КонецФункции // Печать

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ИсторияПогашения,Договор","Отчет о погашении займа", "Договор займа");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(Отказ, Заголовок)

	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	Если СрокПогашения = 0 Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан срок погашения займа!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПогашения) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано начало погашения займа!", Отказ, Заголовок);
		
	ИначеЕсли НачалоПогашения < НачалоМесяца(Дата) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Начало погашения займа не может предшествовать месяцу выдачи займа!", Отказ, Заголовок);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана валюта займа!", Отказ, Заголовок);
		
	ИначеЕсли КурсДокумента = 0 Тогда 
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан курс валюты займа!", Отказ, Заголовок);
		
	КонецЕсли;
	
    ПроверитьЗаполнениеШапкиРегл(Отказ, Заголовок)
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапкиРегл(Отказ, Заголовок)

	//  Организация
	Если ОтражатьВБухгалтерскомУчете и НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана организация!", Отказ, Заголовок);
	КонецЕсли;
	
	// ставка НДФЛ
	Если НачислятьМатериальнуюВыгоду и НЕ ЗначениеЗаполнено(СтавкаНалогообложенияРезидента) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана ставка налогообложения НДФЛ материальной выгоды по заемным средствам!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете и ПроцентЗаПользованиеЗаймом > 0 и НЕ ЗначениеЗаполнено(СчетУчетаПроцентовПоЗайму) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан бухгалтерский счет учета процентов по займу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура формирования движения регистров
//
Процедура ДвиженияРегистров()
	
	ДвиженияРегистровСведений();
	ДвиженияРегистровУпр();
	ДвиженияРегистровРегл();
	
КонецПроцедуры // ДвиженияРегистров()

Процедура ДвиженияРегистровСведений()
	
	НовыеСведения = Движения.СведенияОЗаймах.Добавить();
	ЗаполнитьЗначенияСвойств(НовыеСведения, ЭтотОбъект);
	НовыеСведения.ДатаДокумента = Дата;
	НовыеСведения.ДоговорЗайма = Ссылка;
	НовыеСведения.НомерДокумента = Номер;
	
КонецПроцедуры

Процедура ДвиженияРегистровУпр()
	
	Если ОтражатьВУправленческомУчете Тогда
		
		Движение = Движения.ПогашениеЗаймовРаботниками.Добавить();

		// Свойства
		Движение.Период			= Дата;
		Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ФизЛицо		= ФизЛицо;
		Движение.ДоговорЗайма	= Ссылка;
		
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУправленческогоУчета,Дата);
		
		// Ресурсы
		Движение.ОсновнойДолг	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаЗайма,ВалютаДокумента,ВалютаУправленческогоУчета,
																		КурсДокумента,СтруктураКурса.Курс,
																		КратностьДокумента,СтруктураКурса.Кратность);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияРегистровРегл()
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		Движение = Движения.ПогашениеЗаймовРаботникамиОрганизаций.Добавить();

		// Свойства
		Движение.Период			= Дата;
		Движение.ВидДвижения	= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ФизЛицо		= ФизЛицо;
		Движение.Организация	= Организация;
		Движение.ДоговорЗайма	= Ссылка;
		
		// Ресурсы
		Движение.ОсновнойДолг	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаЗайма,ВалютаДокумента,мВалютаРегламентированногоУчета,
																		КурсДокумента,1,
																		КратностьДокумента,1);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Если документ перенесен - движения не делаем
	Если ДанныеПрошлойВерсии Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// удалим движения
	УдалитьДвижения();
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(Отказ, Заголовок);
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		ДвиженияРегистров()

	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Установим прежнее состояние ОтражатьВУправленческомУчете
	мПрежнееОтражатьВУправленческомУчете = Ссылка.ОтражатьВУправленческомУчете;
	
	мУдалятьДвижения = Не ЭтоНовый();
	
КонецПроцедуры

// удаление движений - документ не удаляет движения автоматически
Процедура УдалитьДвижения()

	Если НЕ мУдалятьДвижения Тогда
		Возврат;
	КонецЕсли;
	
	Движения.СведенияОЗаймах.Очистить();
	Движения.СведенияОЗаймах.Записать();
	Если мПрежнееОтражатьВУправленческомУчете Тогда
		Движения.ПогашениеЗаймовРаботниками.Очистить();
		Движения.ПогашениеЗаймовРаботниками.Записать();
	Иначе
		Движения.ПогашениеЗаймовРаботникамиОрганизаций.Очистить();
		Движения.ПогашениеЗаймовРаботникамиОрганизаций.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// удалим движения
	УдалитьДвижения();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ОБЪЕКТА 

Запрос = Новый Запрос("ВЫБРАТЬ
                      |	Константы.ВалютаРегламентированногоУчета.Ссылка КАК Ссылка,
                      |	Константы.ВалютаРегламентированногоУчета.Наименование КАК Наименование
                      |ИЗ
                      |	Константы КАК Константы");

Выборка = Запрос.Выполнить().Выбрать();
Выборка.Следующий();
мИмяВалютыРегламентированногоУчета = Выборка.Наименование;
мВалютаРегламентированногоУчета = Выборка.Ссылка;
