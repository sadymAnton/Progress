//++ Spl_Апроф 05.09.2014 (k.russkih@a-prof.ru) Добавил реквизит ДокументОснования "ДокументСсылка.ПР_Претензия" и ввод на основании. Вывел на форму элемента

Перем ЗапретОткрытияДокумента Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные табличные части для заполнения
//
// Возвращаемое значение:
//   Список значений с именами табличных частей
//
Функция ПолучитьТабличныеЧастиДляЗаполнения() Экспорт

	ТабличныеЧасти = Новый СписокЗначений;
	
	Возврат ТабличныеЧасти;

КонецФункции // ПолучитьТабличныеЧастиДляЗаполнения()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

//>>280915 Степанов №44403 
Процедура ЗаполнитьДвижениеСторноРС(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");
	
	//++ Spl_Апроф 09.11.2014 (k.russkih@a-prof.ru) Правки если документ основание "ПР_Претензия"
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") И ЗначениеЗаполнено(ДокументОснование) Тогда	
		Если МетаданныеОбъект.Имя = "СвободныеОстатки" ИЛИ МетаданныеОбъект.Имя = "ТоварыНаСкладах" Тогда		
			 Движение.Склад = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(ДокументОснование,"СкладПретензии");		
		КонецЕсли; 			
	КонецЕсли; 	
	//-- Spl_Апроф	
	
	// ресурсы
	//Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл
		//Движение[МДОбъект.Имя] = Строка[МДОбъект.Имя];
		Движение.Количество = - Движение.Количество;
	//КонецЦикла;

КонецПроцедуры // ЗаполнитьДвижениеСторно
//<<


// Копирует значения движения в строку сторно нового движения
// для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор,ВидДвижения");
	
	//++ Spl_Апроф 09.11.2014 (k.russkih@a-prof.ru) Правки если документ основание "ПР_Претензия"
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") И ЗначениеЗаполнено(ДокументОснование) Тогда	
		Если МетаданныеОбъект.Имя = "СвободныеОстатки" ИЛИ МетаданныеОбъект.Имя = "ТоварыНаСкладах" Тогда		
			 Движение.Склад = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(ДокументОснование,"СкладПретензии");		
		КонецЕсли; 			
	КонецЕсли; 	
	//-- Spl_Апроф	
	
	// вид движения
	Если МетаданныеОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
		Движение.ВидДвижения = Строка.ВидДвижения;
	КонецЕсли;
	
	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл
		Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвижениеСторно

// Копирует значения движения по регистру бухгалтерии в строку сторно я
// нового движени для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");
	
	// субконто
	Если МетаданныеОбъект.Корреспонденция Тогда

		Для каждого Субконто Из Строка.СубконтоДт Цикл
			Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Для каждого Субконто Из Строка.СубконтоКт Цикл
			Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			
			//++ Spl_Апроф 09.11.2014 (k.russkih@a-prof.ru) Правки если документ основание "ПР_Претензия"
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") И ЗначениеЗаполнено(ДокументОснование) Тогда				
				Если Субконто.Ключ = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда					
					Движение.СубконтоКт[Субконто.Ключ] = ДокументОснование.СкладПретензии;					
				КонецЕсли;
			КонецЕсли; 	
			//-- Spl_Апроф
			
		КонецЦикла;

	Иначе

		Для каждого Субконто Из Строка.Субконто Цикл
			Движение.Субконто[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

	КонецЕсли;
	
	// ресурсы
	Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл

		Если МДОбъект.ПризнакУчета = Неопределено Тогда
			Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
		Иначе

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Дт"]) Тогда
				Движение[МДОбъект.Имя + "Дт"] = - Строка[МДОбъект.Имя + "Дт"];
			КонецЕсли;

			Если ЗначениеЗаполнено(Строка[МДОбъект.Имя + "Кт"]) Тогда
				Движение[МДОбъект.Имя + "Кт"] = - Строка[МДОбъект.Имя + "Кт"];
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДвиженияСторноПоРегиструБухгалтерии()

// Процедура выполняет сторнирование документа
//
Процедура СторнированиеДокумента(СторнируемыйДокумент, ДействиеНеВыполнено, СторнироватьРегистры = истина, СторнироватьПроводки = истина) 
	
	Если НЕ ЗначениеЗаполнено(СторнируемыйДокумент) Тогда
		Сообщить("Не выбран сторнируемый документ.");
		ДействиеНеВыполнено = Истина;
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумент	= СторнируемыйДокумент.Метаданные();
	МетаданныеДвиженияКорректировкаЗаписейРегистров = ЭтотОбъект.Метаданные().Движения;
	
	//начало изменений Ожиганов 05.10.2015 б/н аналитика для проводок, отклонения в себестоимости тары 
	ПРГ_ЭтоВозврат = ТипЗнч(СторнируемыйДокумент) = Тип("ДокументСсылка.ВозвратТоваровПоставщику");
	//конец изменений 
	//начало изменений Ожиганов 22.01.2016 б/н избавимся от проблем при списании по партиям 10.10 
	 ПРГСЧет10_10 = Неопределено;
	//конец изменений 

	Для Каждого МетаданныеРегистр Из МетаданныеДокумент.Движения Цикл

		// если документ "Корректировка записей регистров" не может иметь таких движений,
		// то это не сторнируемый регистр
		Если НЕ МетаданныеДвиженияКорректировкаЗаписейРегистров.Содержит(МетаданныеРегистр) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборДвижений = Движения[МетаданныеРегистр.Имя];
		
		ЭтоРегистрБухгалтерии = Ложь;
		//>>280915 Степанов №44403
		ЭтоРегистрСведений = Ложь;
        //<<
		//начало изменений Ожиганов 22.01.2016 б/н избавимся от проблем при списании по партиям 10.10 
		ПРГ_ЭтопартииНаскладах = Ложь;
		//конец изменений 
		//начало изменений Ожиганов 05.10.2015 б/н аналитика для проводок, отклонения в себестоимости тары 
		ПРГ_ЭтоСписТовары = Ложь;
		//конец изменений 
		Если СторнироватьПроводки И Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистр) Тогда
			
			СторнируемыйНаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			ЭтоРегистрБухгалтерии = Истина;
			
		ИначеЕсли СторнироватьРегистры И Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда
		   
			СторнируемыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			//начало изменений Ожиганов 22.01.2016 б/н избавимся от проблем при списании по партиям 10.10 
			Если МетаданныеРегистр.Имя = "ПартииТоваровНаСкладахБухгалтерскийУчет" и Дата >='20160101' Тогда
				ПРГ_ЭтопартииНаскладах =  Истина;
				ПРГСЧет10_10 = ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаНаСкладе;
			ИначеЕсли  МетаданныеРегистр.Имя = "ПартииТоваровНаСкладахНалоговыйУчет" и Дата >='20160101' Тогда
				ПРГСЧет10_10 = ПланыСчетов.Налоговый.СпецоснасткаИСпецодеждаНаСкладе;
				ПРГ_ЭтопартииНаскладах =  Истина;
			Иначе
				ПРГ_ЭтопартииНаскладах =  Ложь;
			КонецЕслИ;	
			
			//конец изменений 
			
		//>>280915 Степанов №44403	
		ИначеЕсли МетаданныеРегистр.Имя = "СписанныеТовары" тогда
			СторнируемыйНаборЗаписей = РегистрыСведений[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			ЭтоРегистрСведений = Истина;
			//<<
			//начало изменений Ожиганов 05.10.2015 б/н аналитика для проводок, отклонения в себестоимости тары 
			ПРГ_ЭтоСписТовары = Истина;
			//конец изменений 
		Иначе					
			Продолжить;
		КонецЕсли;
		
		СторнируемыйНаборЗаписей.Отбор.Регистратор.Значение = СторнируемыйДокумент;
		СторнируемыйНаборЗаписей.Прочитать();
		
		Для Каждого ДвижениеСторнируемое Из СторнируемыйНаборЗаписей Цикл

			ДвижениеСторно = НаборДвижений.Добавить();
			
			// реквизиты
			Если ЭтоРегистрБухгалтерии Тогда
				ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			//>>280915 Степанов №44403
			ИначеЕсли ЭтоРегистрСведений тогда
				ЗаполнитьДвижениеСторноРС(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
			//<<	
			Иначе
				ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр);
				//начало изменений Ожиганов 22.01.2016 б/н избавимся от проблем при списании по партиям 10.10 
				Если ПРГ_ЭтопартииНаскладах Тогда
					Если ДвижениеСторно.СчетУчета = ПРГСЧет10_10 Тогда
						ДвижениеСторно.ДокументОприходования = Неопределено;
					КонецЕсли;	
				КонецЕсли;	
				//конец изменений 
			КонецЕсли;

			ДвижениеСторно.Период = Дата;
			
		КонецЦикла;
		
		//начало изменений Ожиганов 05.10.2015 б/н аналитика для проводок, отклонения в себестоимости тары 
		Если ПРГ_ЭтоСписТовары и ПРГ_ЭтоВозврат Тогда
			//по таре дополним аналитику нужную для отклонений
			//приницп если не по таре заполнена аналитика берем ее
			ПРГ_СтруктРекв = Новый Структура("СчетДоходовБУ,СчетРасходовБУ,СчетДоходовНУ,СчетРасходовНУ,СтатьяДоходовИРасходов,ПодразделениеОрганизации");
			УдалосьУзнатьпроАналитику = Ложь;
			Для Каждого ТекДвиж Из НаборДвижений Цикл
				Если ТекДвиж.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары Тогда
					Для каждого ТекЭлем Из ПРГ_СтруктРекв Цикл
						ПРГ_СтруктРекв[ТекЭлем.Ключ] = ТекДвиж[ТекЭлем.Ключ];
					КонецЦикла;	
					УдалосьУзнатьпроАналитику = Истина;
					прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если УдалосьУзнатьпроАналитику Тогда
				Для Каждого ТекДвиж Из НаборДвижений Цикл
					Если ТекДвиж.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара Тогда
						Для каждого ТекЭлем Из ПРГ_СтруктРекв Цикл
							Если ЗначениеЗаполнено(ПРГ_СтруктРекв[ТекЭлем.Ключ]) и Не ЗначениеЗаполнено(ТекДвиж[ТекЭлем.Ключ]) Тогда
								ТекДвиж[ТекЭлем.Ключ] = ПРГ_СтруктРекв[ТекЭлем.Ключ];
							КонецЕсли;	
						КонецЦикла;	
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
		КонецЕсли;	
			
		//конец изменений 
	КонецЦикла;
	
КонецПроцедуры

// Процедура запускает выполнение действий, указанных в табличной части "Выполняемые действия"
//
Процедура ВыполнитьДействияДокумента() Экспорт
	
	Если ЗаполнениеДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// проверка заполнения ТЧ "Выполняемые действия"
	ЕстьОшибки = Ложь;
	СтруктураОбязательныхПолей = Новый Структура("Действие");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ЗаполнениеДвижений", СтруктураОбязательныхПолей, ЕстьОшибки, Заголовок);
	Если ЕстьОшибки Тогда
		Сообщить("Указанные в табличной части действия не выполнены");
		Возврат;
	КонецЕсли;
	
	// очистка существующих движений
	ОчищатьДвижения = Ложь;
	Для каждого Набор Из Движения Цикл
		
		Если Набор.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		#Если Клиент Тогда		
			
		Если НЕ ОчищатьДвижения Тогда
			
			Ответ = Вопрос("Существующие движения регистров и проводки будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,,,"Заполнить движения");
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			
			ОчищатьДвижения = Истина;
		КонецЕсли;
		
		#КонецЕсли
		
		Набор.Очистить();
		
	КонецЦикла;
	Если ТаблицаРегистровНакопления.Количество() > 0 Тогда
		ТаблицаРегистровНакопления.Очистить();
	КонецЕсли;
	Если ТаблицаРегистровСведений.Количество() > 0 Тогда
		ТаблицаРегистровСведений.Очистить();
	КонецЕсли;
	Если ТаблицаРегистровБухгалтерии.Количество() > 0 Тогда
		ТаблицаРегистровБухгалтерии.Очистить();
	КонецЕсли;
	
	// выполнение действий указанных в ТЧ "Выполняемые действия" документа
	Для каждого СтрокаТЧ из ЗаполнениеДвижений Цикл
		
		ДействиеНеВыполнено = Ложь;
		Если ТипЗнч(СтрокаТЧ.Действие) = Тип("Строка") Тогда
			
			Если СтрокаТЧ.Действие = "Сторно движений документа" Тогда
				СторнированиеДокумента(СтрокаТЧ.Документ,ДействиеНеВыполнено);
				Если ДействиеНеВыполнено Тогда
					Сообщить("Действие в строке "+СтрокаТЧ.НомерСтроки+" не выполнено!",СтатусСообщения.Важное);
				КонецЕсли;
			Иначе
				Сообщить("Неправильное наименование базового действия, строка № "+СтрокаТЧ.НомерСтроки+" не обработана.");
			КонецЕсли;
			
		Иначе
			
			#Если Клиент Тогда
				
			ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
			ОбъектВнешнейФормы = СтрокаТЧ.Действие.ПолучитьОбъект();
			
			Если ОбъектВнешнейФормы = Неопределено Тогда
				Сообщить("Строка "+СтрокаТЧ.НомерСтроки+". Ошибка получения внешней обработки действия. Возможно обработка была удалена", СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
			
			ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
			ДвоичныеДанные.Записать(ИмяФайла);
			Попытка
				Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			Исключение
				Сообщить("Строка "+СтрокаТЧ.НомерСтроки+". Ошибка исполнения внешней обработки действия."+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);
				Возврат;
			КонецПопытки;
			
			Попытка
				Обработка.Инициализировать(СтрокаТЧ.Документ, ЭтотОбъект,ДействиеНеВыполнено);
				Если ДействиеНеВыполнено Тогда
					Сообщить("Действие в строке "+СтрокаТЧ.НомерСтроки+" не выполнено!",СтатусСообщения.Важное);
				КонецЕсли;
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Действие в строке "+СтрокаТЧ.НомерСтроки+" не выполнено!");
			КонецПопытки;
			
			#КонецЕсли
			
		КонецЕсли;
	КонецЦикла;
	
	//обновить настройки
	Для каждого Набор Из Движения Цикл
		Если Набор.Количество() > 0 Тогда
			МетаданныеРегистр = Набор.Метаданные();
			
			Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда
				НоваяСтрока = ТаблицаРегистровНакопления.Добавить();
				НоваяСтрока.Имя = МетаданныеРегистр.Имя;
				НоваяСтрока.Представление = МетаданныеРегистр.Синоним;
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеРегистр) Тогда
				НоваяСтрока = ТаблицаРегистровСведений.Добавить();
				НоваяСтрока.Имя = МетаданныеРегистр.Имя;
				НоваяСтрока.Представление = МетаданныеРегистр.Синоним;
			ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистр) Тогда
				НоваяСтрока = ТаблицаРегистровБухгалтерии.Добавить();
				НоваяСтрока.Имя = МетаданныеРегистр.Имя;
				НоваяСтрока.Представление = МетаданныеРегистр.Синоним;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает/снимает признак активности движений документа
//
Процедура УстановитьАктивностьДвижений(ФлагАктивности)
	
	ТаблицаДвижений = ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(Ссылка);
	
	Для Каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
		
		// Имя регистра передается как значение, 
		// полученное с помощью функции ПолноеИмя() метаданных регистра
		ПозицияТочки = Найти(СтрокаТаблицыДвижений.Имя, ".");
		ТипРегистра = Лев(СтрокаТаблицыДвижений.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаТаблицыДвижений.Имя, ПозицияТочки + 1));
		
		Движение = Движения[ИмяРегистра];
		Движение.Прочитать();

		Для Каждого Строка Из Движение Цикл
			Строка.Активность = ФлагАктивности;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьАктивностьДвижений()

Процедура ПриКопировании(ОбъектКопирования)
	
	Если ТипЗнч(ОбъектКопирования) <> Тип("ДокументОбъект.КорректировкаЗаписейРегистров") Тогда
		Возврат;
	КонецЕсли;
	Заголовок = "Копирование документа: "+СокрЛП(ОбъектКопирования);
	ТаблицаРегистров_ДвиженияДокументаОснования = ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(ОбъектКопирования.Ссылка);
	Для каждого Строка из ТаблицаРегистров_ДвиженияДокументаОснования цикл
		//В таблице имя регистра хранится в виде РегистрСведений.<ИмяРегистра>, РегистрНакопления.<ИмяРегистра> и т.д.
		ПолноеИмяРегистра = СокрЛП(Строка.Имя);
		ПозицияТочки = Найти(ПолноеИмяРегистра,".");
		ТипРегистра = Лев(ПолноеИмяРегистра,ПозицияТочки-1);
		//Для получения метаданных тип регистра должен быть не РегистрНакопления а РегистрыНакопления - необходимо изменить тип регистра
		ТипРегистра = СтрЗаменить(ТипРегистра,"Регистр","Регистры");
		ИмяРегистра = Прав(СокрЛП(Строка.Имя),стрДлина(СокрЛП(Строка.Имя))-ПозицияТочки);
		МетаданныеРегистра = Метаданные[ТипРегистра][ИмяРегистра];
		Если НЕ (ПравоДоступа("Изменение", МетаданныеРегистра) И ПравоДоступа("Чтение", МетаданныеРегистра)) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Недостаточно прав доступа к регистру """+ИмяРегистра+"""",ЗапретОткрытияДокумента,Заголовок);
			Продолжить;
		КонецЕсли;
		Набор = ОбъектКопирования.Движения[ИмяРегистра];
		//Используется попытка на случай наличия ограничений доступа к регистру на уровне записей
		Попытка
			Набор.Прочитать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Установлено ограничение доступа на уровне записей к регистру """+ИмяРегистра+"""",ЗапретОткрытияДокумента,Заголовок);
			Продолжить;
		КонецПопытки;
		
		НаборТекущегоОбъекта = Движения[ИмяРегистра];
		Если Найти(нрег(ТипРегистра),"бухгалтерии")<>0 Тогда
			Для каждого ЗаписьНабора Из Набор Цикл
				
				НоваяЗапись = НаборТекущегоОбъекта.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,"Период,Регистратор,СубконтоДт,СубконтоКт");
				
				Для каждого Субконто Из ЗаписьНабора.СубконтоДт Цикл
					НоваяЗапись.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
				КонецЦикла;

				Для каждого Субконто Из ЗаписьНабора.СубконтоКт Цикл
					НоваяЗапись.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
				КонецЦикла;
				НоваяЗапись.Период      = ТекущаяДата();
			КонецЦикла;
		Иначе
			Для каждого ЗаписьНабора Из Набор Цикл
			
				НоваяЗапись = НаборТекущегоОбъекта.Добавить();
				Если Найти(нрег(ТипРегистра),"накопления")<>0 Тогда
					Если МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
						НоваяЗапись.ВидДвижения = ЗаписьНабора.ВидДвижения;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,"Период,Регистратор,ВидДвижения")
				Иначе
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьНабора,,"Период,Регистратор")
				КонецЕсли;
				НоваяЗапись.Период      = ТекущаяДата();
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	Если  ЗапретОткрытияДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть скопирован!",ЗапретОткрытияДокумента,Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() И ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "ПометкаУдаления") <> ПометкаУдаления Тогда
		УстановитьАктивностьДвижений(НЕ ПометкаУдаления);
	ИначеЕсли ПометкаУдаления Тогда
		//запись помеченного на удаление документа с активными записями
		УстановитьАктивностьДвижений(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	//++ Spl_Апроф 08.09.2014 (k.russkih@a-prof.ru)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПР_Претензия") Тогда
		
		ДокументОснование = ДанныеЗаполнения;
		
		ИспользоватьЗаполнениеДвижений = Истина;
		НоваяСтрока = ЗаполнениеДвижений.Добавить();
		НоваяСтрока.Действие = "Сторно движений документа";
		НоваяСтрока.Документ = ДокументОснование.Накладная;
		Комментарий = ДокументОснование.Комментарий; // Шевченков 37895
		
		ВыполнитьДействияДокумента();
		
	КонецЕсли;

КонецПроцедуры

ЗапретОткрытияДокумента = Ложь;
