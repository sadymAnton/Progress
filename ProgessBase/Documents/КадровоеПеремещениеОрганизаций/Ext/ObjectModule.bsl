////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем СоответствиеВалютныеСпособыРасчета;
Перем ОбработкаКомментариев;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если Лев(ИмяМакета,3) = "Т5_" Тогда
		ТабДокумент = ПечатьТ5(ИмяМакета);
		
	ИначеЕсли Лев(ИмяМакета,3) = "Т5а" тогда
		ТабДокумент = ПечатьТ5а(ИмяМакета);
		
	Иначе
		ТабДокумент = КадровоеПеремещениеОрганизацийПереопределяемый.ПечатьДополнительныхФорм(ИмяМакета, ЭтотОбъект);
		
	КонецЕсли;
	
	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,"Кадровое перемещение "),,ТабДокумент);
	
КонецФункции // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("Т5а_от_5_1_2004",	"Форма Т-5а");
	СтруктураМакетов.Вставить("Т5_от_5_1_2004",		"Форма Т-5");
	
	КадровоеПеремещениеОрганизацийПереопределяемый.ДополнитьСтруктуруПечатныхФорм(СтруктураМакетов, ЭтотОбъект);
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

Процедура ДобавитьНачисленияПоСтроке(СтрокаТабличнойЧасти) Экспорт
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрокаТабличнойЧасти);
	
	ДействияСНачислениями = ЗаполнениеДокументовЗК.ПолучитьТаблицуДействийСНачислениями(РаботникиОрганизации.Выгрузить(МассивСтрок), Ссылка, Дата, Организация, "ДатаНачала", ?(ИндексацияЗаработка, КоэффициентИндексацииЗаработка, 1), , , ОбособленноеПодразделениеКуда);

	СтруктураПоиска = Новый Структура("Сотрудник, ВидРасчета");
	
	Для Каждого СтрокаТаблицы Из ДействияСНачислениями Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивНачислений = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНачислений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ОсновныеНачисления.Добавить(), СтрокаТаблицы);
		
	КонецЦикла;
	
	КадровоеПеремещениеОрганизацийПереопределяемый.ДобавитьДополнительноПоСтроке(ЭтотОбъект, СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДобавитьНачисленияПоСтроке()

Процедура ДобавитьСтрокиНачисленийПоРаботнику(Сотрудник, ДатаАктуальности = Неопределено) Экспорт
	
	СтрокаТабличнойЧасти = РаботникиОрганизации.Найти(Сотрудник, "Сотрудник");

	ДобавитьНачисленияПоСтроке(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДобавитьСтрокиНачисленийПоРаботнику()

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.КадровоеПеремещениеОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПроведениеРасчетов.ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент.Ссылка, Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
		
		Запрос.Текст = ФормированиеПечатныхФормЗК.ПолучитьТекстЗапросаПоОтветственнымЛицам(
			"ДатаДокумента",
			"ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
			|И СтруктурнаяЕдиница = &СтруктурнаяЕдиница");
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизаций.Должность КАК ДолжностьРуководителя,
		|	КадровоеПеремещениеОрганизаций.Номер КАК НомерДок,
		|	КадровоеПеремещениеОрганизаций.Дата КАК ДатаДок,
		|	КадровоеПеремещениеОрганизаций.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	КадровоеПеремещениеОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ОтветственныеЛицаОрганизаций.НаименованиеОтветственногоЛица КАК ФИОРуководителя,
		|	КадровоеПеремещениеОрганизаций.Организация.Префикс
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОбОтветственномЛице КАК ОтветственныеЛицаОрганизаций
		|		ПО (ИСТИНА)
		|ГДЕ
		|	КадровоеПеремещениеОрганизаций.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("РеглВалюта",	Константы.ВалютаРегламентированногоУчета.Получить());
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая);
		Запрос.УстановитьПараметр("ТарифнаяСтавкаОклад", СписокПоказателей);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеНачисления.НомерСтроки,
		|	ОсновныеНачисления.Ссылка,
		|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета.ПроизвольнаяФормулаРасчета
		|			ТОГДА ВЫБОР
		|					КОГДА Показатели.Показатель1 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель1.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.Показатель1
		|					КОГДА Показатели.Показатель2 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель2.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.Показатель2
		|					КОГДА Показатели.Показатель3 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель3.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.Показатель3
		|					КОГДА Показатели.Показатель4 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель4.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.Показатель4
		|					КОГДА Показатели.Показатель5 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель5.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.Показатель5
		|					КОГДА Показатели.Показатель6 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель6.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.Показатель6
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ОсновныеНачисления.Показатель1
		|	КОНЕЦ КАК Показатель1,
		|	ОсновныеНачисления.Валюта1,
		|	ВЫБОР
		|		КОГДА (НЕ ОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда)
		|			ТОГДА ВЫБОР
		|					КОГДА Показатели.Показатель1.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ОсновныеНачисления.ТарифныйРазряд1
		|					КОГДА Показатели.Показатель2.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|							ИЛИ Показатели.Показатель2.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.ТарифныйРазряд2
		|					КОГДА Показатели.Показатель3.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ОсновныеНачисления.ТарифныйРазряд3
		|					КОГДА Показатели.Показатель4.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ОсновныеНачисления.ТарифныйРазряд4
		|					КОГДА Показатели.Показатель5.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ОсновныеНачисления.ТарифныйРазряд5
		|					КОГДА Показатели.Показатель6.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ОсновныеНачисления.ТарифныйРазряд6
		|					ИНАЧЕ НЕОПРЕДЕЛЕНО
		|				КОНЕЦ
		|		ИНАЧЕ ОсновныеНачисления.ТарифныйРазряд1
		|	КОНЕЦ КАК ТарифныйРазряд1,
		|	ОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
		|	ОсновныеНачисления.Валюта1.Наименование
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА Показатели.НомерСтроки = 1
		|						ТОГДА Показатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК Показатель1,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА Показатели.НомерСтроки = 2
		|						ТОГДА Показатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК Показатель2,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА Показатели.НомерСтроки = 3
		|						ТОГДА Показатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК Показатель3,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА Показатели.НомерСтроки = 4
		|						ТОГДА Показатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК Показатель4,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА Показатели.НомерСтроки = 5
		|						ТОГДА Показатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК Показатель5,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА Показатели.НомерСтроки = 6
		|						ТОГДА Показатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК Показатель6,
		|			ОсновныеНачисления.НомерСтроки КАК НомерСтроки
		|		ИЗ
		|			Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК ОсновныеНачисления
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
		|				ПО ОсновныеНачисления.ВидРасчета = Показатели.Ссылка
		|		ГДЕ
		|			ОсновныеНачисления.Ссылка = &ДокументСсылка
		|			И ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
		|			И ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОсновныеНачисления.НомерСтроки) КАК Показатели
		|		ПО ОсновныеНачисления.НомерСтроки = Показатели.НомерСтроки
		|ГДЕ
		|	ОсновныеНачисления.Ссылка = &ДокументСсылка
		|	И ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
		|	И ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени
		|	И (НЕ ОсновныеНачисления.Сторно)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисления.НомерСтроки,
		|	ОсновныеНачисления.Ссылка,
		|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета.ПроизвольнаяФормулаРасчета
		|			ТОГДА ВЫБОР
		|					КОГДА Показатели.Показатель1 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель1.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.Показатель1
		|					КОГДА Показатели.Показатель2 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель2.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.Показатель2
		|					КОГДА Показатели.Показатель3 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель3.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.Показатель3
		|					КОГДА Показатели.Показатель4 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель4.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.Показатель4
		|					КОГДА Показатели.Показатель5 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель5.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.Показатель5
		|					КОГДА Показатели.Показатель6 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель6.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.Показатель6
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ОсновныеНачисления.Показатель1
		|	КОНЕЦ КАК Показатель1,
		|	ОсновныеНачисления.Валюта1,
		|	ВЫБОР
		|		КОГДА (НЕ ОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда)
		|			ТОГДА ВЫБОР
		|					КОГДА Показатели.Показатель1.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ОсновныеНачисления.ТарифныйРазряд1
		|					КОГДА Показатели.Показатель2.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|							ИЛИ Показатели.Показатель2.ТарифнаяСтавка
		|						ТОГДА ОсновныеНачисления.ТарифныйРазряд2
		|					КОГДА Показатели.Показатель3.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ОсновныеНачисления.ТарифныйРазряд3
		|					КОГДА Показатели.Показатель4.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ОсновныеНачисления.ТарифныйРазряд4
		|					КОГДА Показатели.Показатель5.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ОсновныеНачисления.ТарифныйРазряд5
		|					КОГДА Показатели.Показатель6.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ОсновныеНачисления.ТарифныйРазряд6
		|					ИНАЧЕ НЕОПРЕДЕЛЕНО
		|				КОНЕЦ
		|		ИНАЧЕ ОсновныеНачисления.ТарифныйРазряд1
		|	КОНЕЦ КАК ТарифныйРазряд1,
		|	ОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
		|	ОсновныеНачисления.Валюта1.Наименование
		|ПОМЕСТИТЬ ВТНадбавки
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА Показатели.НомерСтроки = 1
		|						ТОГДА Показатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК Показатель1,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА Показатели.НомерСтроки = 2
		|						ТОГДА Показатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК Показатель2,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА Показатели.НомерСтроки = 3
		|						ТОГДА Показатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК Показатель3,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА Показатели.НомерСтроки = 4
		|						ТОГДА Показатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК Показатель4,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА Показатели.НомерСтроки = 5
		|						ТОГДА Показатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК Показатель5,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА Показатели.НомерСтроки = 6
		|						ТОГДА Показатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ) КАК Показатель6,
		|			ОсновныеНачисления.НомерСтроки КАК НомерСтроки
		|		ИЗ
		|			Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК ОсновныеНачисления
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК Показатели
		|				ПО ОсновныеНачисления.ВидРасчета = Показатели.Ссылка
		|		ГДЕ
		|			ОсновныеНачисления.Ссылка = &ДокументСсылка
		|			И ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
		|			И ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОсновныеНачисления.НомерСтроки) КАК Показатели
		|		ПО ОсновныеНачисления.НомерСтроки = Показатели.НомерСтроки
		|ГДЕ
		|	ОсновныеНачисления.Ссылка = &ДокументСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботникиОрганизации.НомерСтроки,
		|	РаботникиОрганизации.Ссылка,
		|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|	РаботникиОрганизации.Сотрудник.Код КАК ТабельныйНомер,
		|	РаботникиОрганизации.Сотрудник.Наименование,
		|	РаботникиОрганизации.Сотрудник.ДатаДоговора,
		|	РаботникиОрганизации.Сотрудник.НомерДоговора,
		|	РаботникиОрганизации.ДатаНачала,
		|	РаботникиОрганизации.ДатаОкончания,
		|	РаботникиОрганизации.ПодразделениеОрганизации,
		|	РаботникиОрганизации.Должность,
		|	РаботникиОрганизации.ЗанимаемыхСтавок,
		|	РаботникиОрганизации.СпособРасчета,
		|	РаботникиОрганизации.ГрафикРаботы,
		|	РаботникиОрганизации.ОснованиеПеремещения,
		|	РаботникиОрганизации.НапомнитьПоЗавершении
		|ПОМЕСТИТЬ ВТРаботники
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|ГДЕ
		|	РаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И (НЕ РаботникиОрганизации.Сторно)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
		|	ФИОФизЛицСрезПоследних.Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя,
		|	ФИОФизЛицСрезПоследних.Отчество
		|ПОМЕСТИТЬ ВТФИОФизЛиц
		|ИЗ
		|	РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|			&ДатаДокумента,
		|			ФизЛицо В
		|				(ВЫБРАТЬ
		|					ВТРаботники.Физлицо
		|				ИЗ
		|					ВТРаботники)) КАК ФИОФизЛицСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокДат.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизации.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
		|	РаботникиОрганизации.Должность.Наименование КАК ДолжностьНаименование,
		|	РаботникиОрганизации.ПодразделениеОрганизацииЗавершения.Наименование КАК ПодразделениеОрганизацииЗавершенияНаименование,
		|	РаботникиОрганизации.ДолжностьЗавершения.Наименование КАК ДолжностьЗавершенияНаименование,
		|	РаботникиОрганизации.ПериодЗавершения КАК ПериодЗавершения
		|ПОМЕСТИТЬ ВТДанныеРаботников
		|ИЗ
		|	(ВЫБРАТЬ
		|		Док.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиВнутри.Период) КАК ДатаПоследнегоИзменения
		|	ИЗ
		|		ВТРаботники КАК Док
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиВнутри
		|			ПО Док.Сотрудник = РаботникиВнутри.Сотрудник
		|				И Док.ДатаНачала > РаботникиВнутри.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Док.Сотрудник) КАК СписокДат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО СписокДат.ДатаПоследнегоИзменения = РаботникиОрганизации.Период
		|			И СписокДат.Сотрудник = РаботникиОрганизации.Сотрудник
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокДат.НомерСтроки КАК НомерСтроки,
		|	РазмерТарифныхСтавок.Размер КАК Размер,
		|	РазмерТарифныхСтавок.Валюта КАК Валюта,
		|	РазмерТарифныхСтавок.Валюта.Наименование,
		|	РазмерТарифныхСтавок.ТарифныйРазряд
		|ПОМЕСТИТЬ ВТДанныеТарифныхРазрядов
		|ИЗ
		|	(ВЫБРАТЬ
		|		НачисленияРаботников.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(РазмерТарифныхСтавок.Период) КАК ДатаПоследнегоИзменения,
		|		РазмерТарифныхСтавок.ТарифныйРазряд КАК ТарифныйРазряд
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Начисления.НомерСтроки КАК НомерСтроки,
		|			Работники.ДатаНачала КАК ДатаНачала
		|		ИЗ
		|			ВТНачисления КАК Начисления
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботники КАК Работники
		|				ПО Начисления.Сотрудник = Работники.Сотрудник) КАК НачисленияРаботников
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
		|			ПО НачисленияРаботников.ДатаНачала >= РазмерТарифныхСтавок.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		НачисленияРаботников.НомерСтроки,
		|		РазмерТарифныхСтавок.ТарифныйРазряд) КАК СписокДат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок КАК РазмерТарифныхСтавок
		|		ПО СписокДат.ДатаПоследнегоИзменения = РазмерТарифныхСтавок.Период
		|			И СписокДат.ТарифныйРазряд = РазмерТарифныхСтавок.ТарифныйРазряд
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Док.НомерСтроки КАК НомерСтроки,
		|	Док.ДатаНачала,
		|	Док.ДатаОкончания,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, Док.СотрудникНаименование) КАК Работник,
		|	Док.Физлицо.Пол КАК ФизлицоПол,
		|	Док.ТабельныйНомер КАК ТабельныйНомер,
		|	ЕСТЬNULL(Док.СотрудникДатаДоговора, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ТрудовойДоговорДата,
		|	ЕСТЬNULL(Док.СотрудникНомерДоговора, """") КАК ТрудовойДоговорНомер,
		|	Док.ОснованиеПеремещения КАК ОснованиеПеремещения,
		|	Док.ПодразделениеОрганизации.Наименование КАК НовоеПодразделение,
		|	Док.Должность.Наименование КАК НоваяДолжность,
		|	ВЫБОР
		|		КОГДА Работники.ПериодЗавершения <= Док.ДатаНачала
		|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА Работники.ПодразделениеОрганизацииЗавершенияНаименование
		|		ИНАЧЕ Работники.ПодразделениеОрганизацииНаименование
		|	КОНЕЦ КАК ПрежнееПодразделение,
		|	ВЫБОР
		|		КОГДА Работники.ПериодЗавершения <= Док.ДатаНачала
		|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА Работники.ДолжностьЗавершенияНаименование
		|		ИНАЧЕ Работники.ДолжностьНаименование
		|	КОНЕЦ КАК ПрежняяДолжность,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Начисления.ТребуетВводаТарифногоРазряда, ЛОЖЬ)
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(РазмерыТарифныхРазрядов.Валюта, &РеглВалюта) = &РеглВалюта
		|						ТОГДА """"
		|					ИНАЧЕ РазмерыТарифныхРазрядов.ВалютаНаименование
		|				КОНЕЦ
		|		КОГДА ЕСТЬNULL(Начисления.Валюта1, &РеглВалюта) = &РеглВалюта
		|			ТОГДА """"
		|		ИНАЧЕ Начисления.Валюта1Наименование
		|	КОНЕЦ КАК ВалютаТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Начисления.ТребуетВводаТарифногоРазряда, ЛОЖЬ)
		|			ТОГДА ЕСТЬNULL(РазмерыТарифныхРазрядов.Размер, 0)
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(Начисления.Показатель1, 0) = 0
		|						И ЕСТЬNULL(РазмерыТарифныхРазрядов.Размер, 0) <> 0
		|					ТОГДА ЕСТЬNULL(РазмерыТарифныхРазрядов.Размер, 0)
		|				ИНАЧЕ ЕСТЬNULL(Начисления.Показатель1, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК ОкладТарифнаяСтавка,
		|	Начисления.ТребуетВводаТарифногоРазряда,
		|	Начисления.ТарифныйРазряд1 КАК ТарифныйРазряд,
		|	ВТНадбавки.Показатель1 КАК РазмерНадбавки,
		|	ВТНадбавки.ВидРасчета.СпособРасчета КАК СпособРасчета,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НадбавкиПоШтатномуРасписаниюОрганизацийСрезПоследних.Валюта1, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""руб.""
		|		ИНАЧЕ НадбавкиПоШтатномуРасписаниюОрганизацийСрезПоследних.Валюта1.Наименование
		|	КОНЕЦ КАК ВалютаНадбавки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НадбавкиПоШтатномуРасписаниюОрганизацийСрезПоследних.Валюта1, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""коп.""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КопейкиНадбавки
		|ИЗ
		|	ВТРаботники КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОФизЛиц КАК ФИОФизЛицСрезПоследних
		|		ПО Док.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРаботников КАК Работники
		|		ПО Док.Сотрудник = Работники.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеТарифныхРазрядов КАК РазмерыТарифныхРазрядов
		|			ПО Начисления.НомерСтроки = РазмерыТарифныхРазрядов.НомерСтроки
		|				И Начисления.ТарифныйРазряд1 = РазмерыТарифныхРазрядов.ТарифныйРазряд
		|		ПО Док.Сотрудник = Начисления.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК НадбавкиПоШтатномуРасписаниюОрганизацийСрезПоследних
		|		ПО Док.ПодразделениеОрганизации = НадбавкиПоШтатномуРасписаниюОрганизацийСрезПоследних.ПодразделениеОрганизации
		|			И Док.Должность = НадбавкиПоШтатномуРасписаниюОрганизацийСрезПоследних.Должность
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНадбавки КАК ВТНадбавки
		|		ПО Док.Сотрудник = ВТНадбавки.Сотрудник
		|			И (ВТНадбавки.ВидРасчета = НадбавкиПоШтатномуРасписаниюОрганизацийСрезПоследних.ВидНадбавки)
		|			И (НадбавкиПоШтатномуРасписаниюОрганизацийСрезПоследних.ПодразделениеОрганизации = Док.ПодразделениеОрганизации)
		|			И (НадбавкиПоШтатномуРасписаниюОрганизацийСрезПоследних.Должность = Док.Должность)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	НомерСтроки";

	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует табличный документ с печатной формой "Т-5а",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ5а(ИмяМакета)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КадровоеПеремещениеОрганизации_Т5а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки);// Для подвала.
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтрок = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
		
		РезультатСклонения = "";
		Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВложеннаяВыборка.Работник, 4,ВложеннаяВыборка.ФизЛицоПол, РезультатСклонения) Тогда
			ОбластьМакета.Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВложеннаяВыборка.ОкладТарифнаяСтавка) Тогда
			Если ЗначениеЗаполнено(ВложеннаяВыборка.ВалютаТарифнойСтавки) Тогда
				СтрокаВалюты = "" + ВложеннаяВыборка.ВалютаТарифнойСтавки;
				ОбластьМакета.Параметры.ОкладТарифнаяСтавка = "" + Формат(ВложеннаяВыборка.ОкладТарифнаяСтавка,"ЧЦ=15; ЧДЦ=2; ЧН=' '") + " (" + ?(ВложеннаяВыборка.ТребуетВводаТарифногоРазряда, ВложеннаяВыборка.ТарифныйРазряд + ", ", "") + СтрокаВалюты + ")" ;
			Иначе
				СтрокаВалюты = Символы.ПС + "(" + ВложеннаяВыборка.ВалютаТарифнойСтавки +")";
				ОбластьМакета.Параметры.ОкладТарифнаяСтавка = "" + Формат(ВложеннаяВыборка.ОкладТарифнаяСтавка,"ЧЦ=15; ЧДЦ=2; ЧН=' '") + ?(ВложеннаяВыборка.ТребуетВводаТарифногоРазряда, " (" + ВложеннаяВыборка.ТарифныйРазряд + ")" , "");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВложеннаяВыборка.РазмерНадбавки) Тогда
			
			ТекстЯчейки = ОбластьМакета.Параметры.ОкладТарифнаяСтавка;
			ТекстЯчейки = "" + ТекстЯчейки + "," + Символы.ПС + ВложеннаяВыборка.РазмерНадбавки;
			
			Если ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
				ТекстЯчейки = ТекстЯчейки + "(%)"
			Иначе	
				ТекстЯчейки = ТекстЯчейки + ?(ЗначениеЗаполнено(ВложеннаяВыборка.ВалютаНадбавки)," (" + ВложеннаяВыборка.ВалютаНадбавки+")","");
			КонецЕсли;
			
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = ТекстЯчейки;
		КонецЕсли;	
		
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВложеннаяВыборка.ТабельныйНомер;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		Если ИмяМакета = "Т5а_от_5_1_2004" И ЗначениеЗаполнено(ВложеннаяВыборка.ОснованиеПеремещения) Тогда
			ВысотаДока = ТабДокумент.ВысотаТаблицы;
			ОбластьДокумента = ТабДокумент.Область(ВысотаДока,14,ВысотаДока,17);
			ОбластьДокумента.Объединить();
			ОбластьДокумента.Текст = ВложеннаяВыборка.ОснованиеПеремещения;
		КонецЕсли;

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,"");
	КонецЦикла;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;
	
	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ5а()

// Функция формирует табличный документ с печатной формой "Т-5",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ5(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КадровоеПеремещениеОрганизации_Т5";
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
		
		ВыводитьДатуОзнакомленияСПриказом = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах");
		Если Не ВыводитьДатуОзнакомленияСПриказом Тогда
			ОбластьМакетаПодвал.Параметры.ДатаДок = ФормированиеПечатныхФормЗК.ПустаяДатаВПечатнойФорме();
		КонецЕсли;
	КонецЕсли;
	
	НомерФормы = 0;
	ПечататьПостфикс = ВыборкаРаботники.Количество() > 1;
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл
		
		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Шапка документа.
		Если ПечататьПостфикс Тогда
			НомерФормы = НомерФормы + 1;
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + НомерФормы
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаШапка);

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
		
		РезультатСклонения = "";
		Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВложеннаяВыборка.Работник, 4,ВложеннаяВыборка.ФизЛицоПол, РезультатСклонения) Тогда
			ОбластьМакета.Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		ПредставлениеДатыТрудовогоДоговора = Формат(ВложеннаяВыборка.ТрудовойДоговорДата, "ДЛФ=DD");
		ОбластьМакета.Параметры.ТрудовойДоговорЧисло    = ?(ЗначениеЗаполнено(ВложеннаяВыборка.ТрудовойДоговорДата), СокрЛП(Лев(ПредставлениеДатыТрудовогоДоговора,2)), "        ");
		ОбластьМакета.Параметры.ТрудовойДоговорМесяцГод = ?(ЗначениеЗаполнено(ВложеннаяВыборка.ТрудовойДоговорДата), НРЕГ(СокрЛП(Прав(ПредставлениеДатыТрудовогоДоговора, СтрДлина(ПредставлениеДатыТрудовогоДоговора)-2))), "                                г.");
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВложеннаяВыборка.ТабельныйНомер;
		
		Если ЗначениеЗаполнено(ВложеннаяВыборка.ДатаОкончания) Тогда
			ОбластьМакета.Параметры.ВидПеревода = "временно";
						
		Иначе
			ОбластьМакета.Параметры.ВидПеревода = "постоянно";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВложеннаяВыборка.ОкладТарифнаяСтавка) Тогда
			
			ОбластьМакета.Параметры.ОкладЦелаяЧасть = "" + Цел(ВложеннаяВыборка.ОкладТарифнаяСтавка) 
			+ ?(ЗначениеЗаполнено(ВложеннаяВыборка.ВалютаТарифнойСтавки)," (" + ВложеннаяВыборка.ВалютаТарифнойСтавки+")","");
			
			ДробнаяЧасть = ВложеннаяВыборка.ОкладТарифнаяСтавка - Цел(ВложеннаяВыборка.ОкладТарифнаяСтавка);
			ОбластьМакета.Параметры.ОкладДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
		Иначе
			ОбластьМакета.Параметры.ОкладЦелаяЧасть = ""; 
			ОбластьМакета.Параметры.ОкладДробнаяЧасть = ""; 
		КонецЕсли;
		
		ОбластьМакета.Параметры.НадбавкаЦелаяЧасть   = "";
		ОбластьМакета.Параметры.НадбавкаДробнаяЧасть = "";
		
		Если ЗначениеЗаполнено(ВложеннаяВыборка.РазмерНадбавки) Тогда
			
			Если ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
				ОбластьМакета.Параметры.НадбавкаЦелаяЧасть = "" + ВложеннаяВыборка.РазмерНадбавки + "(%)"
			Иначе
				
				Если ЗначениеЗаполнено(ОбластьМакета.Параметры.НадбавкаДробнаяЧасть) Тогда // в иностр. валюте
					ОбластьМакета.Параметры.НадбавкаЦелаяЧасть = Цел(ВложеннаяВыборка.РазмерНадбавки);
					ДробнаяЧасть = ВложеннаяВыборка.РазмерНадбавки - Цел(ВложеннаяВыборка.РазмерНадбавки);
					ОбластьМакета.Параметры.НадбавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
				Иначе
					ОбластьМакета.Параметры.НадбавкаЦелаяЧасть = Формат(ВложеннаяВыборка.РазмерНадбавки,"ЧЦ=15; ЧДЦ=2");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		

		
		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;
	
	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ5()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ПустаяОрганизация",	Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КадровоеПеремещениеОрганизаций.Дата,
	|	КадровоеПеремещениеОрганизаций.Организация,
	|	ВЫБОР
	|		КОГДА КадровоеПеремещениеОрганизаций.Организация.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА КадровоеПеремещениеОрганизаций.Организация
	|		ИНАЧЕ КадровоеПеремещениеОрганизаций.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	КадровоеПеремещениеОрганизаций.Ссылка,
	|	КадровоеПеремещениеОрганизаций.ИндексацияЗаработка
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|ГДЕ
	|	КадровоеПеремещениеОрганизаций.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "РаботникиОрганизации" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим, КонтрольКоличестваСтавокШтатногоРасписания)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	
	СписокСтруктурныхПодразделений = ОбщегоНазначенияЗК.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	СписокСтруктурныхПодразделений.Добавить(Организация);
	Запрос.УстановитьПараметр("СписокСтруктурныхПодразделений",	СписокСтруктурныхПодразделений);
	// ИЗМЕНЕНИЕ: Петрухин Андрей 24.06.2011 10:24  
	//Добавлено в запрос реквизит "ШтатноеРасписание"		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.Ссылка,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.Сотрудник,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.Сотрудник.Организация,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.Сотрудник.Наименование,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.Сотрудник.НомерДоговора,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.Сотрудник.ДатаДоговора,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ФизЛицо,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ДатаНачала,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ДатаОкончания,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ПодразделениеОрганизации,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ПодразделениеОрганизации.Владелец,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.Должность,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ЗанимаемыхСтавок,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.СпособРасчета,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ГрафикРаботы,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ОснованиеПеремещения,
		/////автоматизация
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.AVTШтатноеРасписание,
	/////автоматизация
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.НапомнитьПоЗавершении,
	//Blik 290817 67118 н
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ПРГ_временноеЗамещение КАК временноеЗамещение,
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ПРГ_ТекстЗамещения КАК ТекстЗамещения
	//Blik 290817 67118 к
	|ПОМЕСТИТЬ ВТСтрокиДокумента
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацииРаботникиОрганизации
	|ГДЕ
	|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.Ссылка = &ДокументСсылка
	|	И (НЕ КадровоеПеремещениеОрганизацииРаботникиОрганизации.Сторно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат[0].Количество = 0 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	ВТСтрокиДокумента КАК Док";	
	Иначе
		
		// Описание текста запроса:
		// Первая часть запроса  - вид строки запроса "ДанныеДляДвиженийКадров": 
		// 1. Выборка "ТЧРаботникиОрганизации": 
		//		Выбираются строки документа.  
		// 2. Выборка "ДанныеПоРаботникиДоНазначения": 
		//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру РаботникиОрганизации на дату ДатаНачала
		//		для выполнения движений и проверки "Работает ли работник на дату перемещения"
		//		(Использует данные выборки "ДатыПоследнихДвиженийРаботников")
		// 3. Выборка "ПересекающиесяСтроки": 
		//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
		//
		// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
		// 1. Выборка "ТЧРаботникиОрганизации":
		//		Выбираются строки документа 
		// 2. Выборка "РаботникиОрганизации":
		//		Для каждой строки ТЧРаботникиОрганизации ищем движения по регистру РаботникиОрганизации за период [ДатаНачала, ДатаОкончания]
		
		Если КонтрольКоличестваСтавокШтатногоРасписания Тогда
			
			// определим самую раннюю дату перемещения, чтобы с нее начать расчет остатков штатных единиц
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(КадровоеПеремещениеОрганизацииРаботникиОрганизации.ДатаНачала) КАК ДатаНачала
			|ИЗ
			|	ВТСтрокиДокумента КАК КадровоеПеремещениеОрганизацииРаботникиОрганизации
			|ГДЕ
			|	КадровоеПеремещениеОрганизацииРаботникиОрганизации.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДатаС = ?(ЗначениеЗаполнено(Выборка.ДатаНачала),Выборка.ДатаНачала,Дата)
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ДатаНачала",	ДатаС);
			Запрос.УстановитьПараметр("Приход",		ВидДвиженияНакопления.Приход);

			ДанныеОСтавках = ПолныеПраваЗК.ВременноСвободныеСтавкиСтрокШтатногоРасписания(РаботникиОрганизации.Выгрузить(Новый Структура("Сторно",Ложь),"НомерСтроки,ДатаНачала,ПодразделениеОрганизации,Должность"), ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
			Запрос.УстановитьПараметр("ДанныеОСтавках", ДанныеОСтавках);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СтрокиДокумента.ОсвобожденныеСтавки,
			|	СтрокиДокумента.НомерСтроки КАК НомерСтроки
			|ПОМЕСТИТЬ ВТВременноОсвобожденныеСтавки
			|ИЗ
			|	&ДанныеОСтавках КАК СтрокиДокумента
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
			Запрос.Выполнить();
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Петрухин Андрей 24.06.2011 12:27 
			// ОПИСАНИЕ: В запрос добавили "ШтатноеРасписание", "ШтатноеРасписаниеПрежнее"
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
			                                          
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Измайлова Полина 24.08.2011 15:41 
			// В запросe закомментировано соединение с регистром сведений ШтатноеРасписание по
			// полям ПодразделениеОрганизации и Должность, так как эти измерения из регистра удалены.
			//  Дополнительно используем выборки: 
			// 1. ШтатноеРасписаниеОрганизаций
			//		Для каждой строки ТЧРаботникиОрганизации выполняем срез по регистру ШтатноеРасписаниеОрганизаций на дату ДатаНачала
			//		для проверки наличия ставок в штатном расписании
			//		(Использует данные выборки "ДатыШтатногоРасписания")
			// 2. ЗанятоСтавок
			//		Для каждой строки ТЧРаботникиОрганизации на дату ДатаНачала
			//		подсчитываем количество занятых ставок (с учетом "предшествующих" данных текущего документа)
			//
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
			|	ДатыПоследнихДвиженийРаботников.Период КАК Период,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ДатыПоследнихДвиженийРаботников.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
			|	КОНЕЦ КАК ПрежнееПодразделение,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ДатыПоследнихДвиженийРаботников.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность
			|	КОНЕЦ КАК ПрежняяДолжность,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ДатыПоследнихДвиженийРаботников.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
			|	КОНЕЦ КАК ПрежняяСтавка,
			|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
			|	ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
			|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|	ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
			|	ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ГрафикРаботы,
			|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения КАК ЗанимаемыхСтавокЗавершения,
			|	ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделениеЗавершения КАК ОбособленноеПодразделениеЗавершения,
			|	ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения КАК ПодразделениеОрганизацииЗавершения,
			|	ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения КАК ДолжностьЗавершения,
			|	ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения КАК ГрафикРаботыЗавершения,
			|	ДанныеПоРаботникуДоНазначения.ПериодЗавершения КАК ПериодЗавершения,
			|	ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
			|	ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостоянияЗавершения КАК ПричинаИзмененияСостоянияЗавершения
				/////автоматизация
			|	,ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписание,
			|	ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписаниеЗавершения,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ДатыПоследнихДвиженийРаботников.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписаниеЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписание
			|	КОНЕЦ КАК ПрежнееAVTШтатноеРасписание
			/////автоматизация
			|ПОМЕСТИТЬ ВТДанныеПоРаботникуДоНазначения
			|ИЗ
			|	(ВЫБРАТЬ
			|		МАКСИМУМ(Работники.Период) КАК Период,
			|		ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
			|		ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
			|		ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
			|	ИЗ
			|		ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|			ПО ТЧРаботникиОрганизации.ДатаНачала >= Работники.Период
			|				И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТЧРаботникиОрганизации.НомерСтроки,
			|		ТЧРаботникиОрганизации.ДатаНачала,
			|		ТЧРаботникиОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийРаботников
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
			|		ПО ДатыПоследнихДвиженийРаботников.Период = ДанныеПоРаботникуДоНазначения.Период
			|			И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МаксимальныеПериодыШР.НомерСтроки КАК НомерСтроки,
			|	ШтатноеРасписание.КоличествоСтавок
			|ПОМЕСТИТЬ ВТШтатноеРасписание
			|ИЗ
			|	(ВЫБРАТЬ
			|		Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|		Работники.Должность КАК Должность,
			|		Работники.НомерСтроки КАК НомерСтроки,
			|		МАКСИМУМ(ШтатноеРасписание.Период) КАК МаксПериод
			/////автоматизация
			|		,Работники.AVTШтатноеРасписание как AVTШтатноеРасписание
			/////автоматизация
			|	ИЗ
			|		ВТСтрокиДокумента КАК Работники
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
			|			ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
			|				И Работники.Должность = ШтатноеРасписание.Должность
			|				И Работники.ДатаНачала >= ШтатноеРасписание.Период
			|			и Работники.AVTШтатноеРасписание = ШтатноеРасписание.AVTШтатноеРасписание
			|	
			|	СГРУППИРОВАТЬ ПО
			|		Работники.ПодразделениеОрганизации,
			|		Работники.НомерСтроки,
			|		Работники.Должность) КАК МаксимальныеПериодыШР
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
			|		ПО МаксимальныеПериодыШР.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
			|			И МаксимальныеПериодыШР.Должность = ШтатноеРасписание.Должность
			|			И МаксимальныеПериодыШР.МаксПериод = ШтатноеРасписание.Период
			|		и МаксимальныеПериодыШР.AVTШтатноеРасписание = ШтатноеРасписание.AVTШтатноеРасписание
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Работники.НомерСтроки КАК НомерСтроки,
			|	СУММА(ВЫБОР
			|			КОГДА Вакансии.ВидДвижения = &Приход
			|				ТОГДА Вакансии.КоличествоСтавок
			|			ИНАЧЕ -Вакансии.КоличествоСтавок
			|		КОНЕЦ) КАК КоличествоСтавок
			|ПОМЕСТИТЬ ВТВакансии
			|ИЗ
			|	ВТСтрокиДокумента КАК Работники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК Вакансии
			|		ПО Работники.ПодразделениеОрганизации = Вакансии.ПодразделениеОрганизации
			|			И Работники.Должность = Вакансии.Должность
			|			И Работники.AVTШтатноеРасписание = Вакансии.AVTШтатноеРасписание
			|			И Работники.ДатаНачала >= Вакансии.Период
			|			И (Вакансии.Регистратор <> &ДокументСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	Работники.НомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
			|	СУММА(ВЫБОР
			|			КОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала <= СтрокиДокумента.ДатаНачала
			|				ТОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ЗанимаемыхСтавок
			|			ИНАЧЕ 0
			|		КОНЕЦ - ВЫБОР
			|			КОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаОкончания < СтрокиДокумента.ДатаНачала
			|					И КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
			|					И (НЕ КадровоеПеремещениеОрганизацийРаботникиОрганизации.НапомнитьПоЗавершении)
			|				ТОГДА КадровоеПеремещениеОрганизацийРаботникиОрганизации.ЗанимаемыхСтавок
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК КоличествоСтавок
			|ПОМЕСТИТЬ ВТРанееЗанятоСтавок
			|ИЗ
			|	ВТСтрокиДокумента КАК СтрокиДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК КадровоеПеремещениеОрганизацийРаботникиОрганизации
			|		ПО СтрокиДокумента.ПодразделениеОрганизации = КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации
			|			И СтрокиДокумента.Должность = КадровоеПеремещениеОрганизацийРаботникиОрганизации.Должность
			|			И СтрокиДокумента.НомерСтроки <> КадровоеПеремещениеОрганизацийРаботникиОрганизации.НомерСтроки
			|			И СтрокиДокумента.AVTШтатноеРасписание = КадровоеПеремещениеОрганизацийРаботникиОрганизации.AVTШтатноеРасписание
			|
			|СГРУППИРОВАТЬ ПО
			|	СтрокиДокумента.НомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Работники.НомерСтроки КАК НомерСтроки,
			|	Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|	Работники.Должность КАК Должность,
			|	ИтогоЗанятоПоДолжности.КоличествоСтавок КАК КоличествоСтавок
					|	,Работники.AVTШтатноеРасписание
			|ПОМЕСТИТЬ ВТОсвобождаетсяСтавок
			|ИЗ
			|	ВТСтрокиДокумента КАК Работники
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ДанныеПоРаботникуДоНазначения.ПрежнееПодразделение КАК ПодразделениеОрганизации,
			|			ДанныеПоРаботникуДоНазначения.ПрежняяДолжность КАК Должность,
			|			ДанныеПоРаботникуДоНазначения.ПрежнееAVTШтатноеРасписание КАК AVTШтатноеРасписание,
			|			СУММА(ДанныеПоРаботникуДоНазначения.ПрежняяСтавка) КАК КоличествоСтавок
			|		ИЗ
			|			ВТДанныеПоРаботникуДоНазначения КАК ДанныеПоРаботникуДоНазначения
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ДанныеПоРаботникуДоНазначения.ПрежнееПодразделение,
						|			ДанныеПоРаботникуДоНазначения.ПрежнееAVTШтатноеРасписание,
			|			ДанныеПоРаботникуДоНазначения.ПрежняяДолжность) КАК ИтогоЗанятоПоДолжности
			|		ПО Работники.Должность = ИтогоЗанятоПоДолжности.Должность
			|			И Работники.ПодразделениеОрганизации = ИтогоЗанятоПоДолжности.ПодразделениеОрганизации
				|			И Работники.AVTШтатноеРасписание = ИтогоЗанятоПоДолжности.AVTШтатноеРасписание
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
			|	МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
			|ПОМЕСТИТЬ ВТПересекающиесяСтроки
			|ИЗ
			|	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ТЧРаботникиОрганизации2
			|		ПО ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
			|			И ТЧРаботникиОрганизации.НомерСтроки < ТЧРаботникиОрганизации2.НомерСтроки
			|
			|СГРУППИРОВАТЬ ПО
			|	ТЧРаботникиОрганизации.НомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
			|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
			|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
			|	ТЧРаботникиОрганизации.СотрудникНаименование,
			|	ТЧРаботникиОрганизации.СотрудникНомерДоговора,
			|	ТЧРаботникиОрганизации.СотрудникДатаДоговора,
			|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
			|	ТЧРаботникиОрганизации.ДатаОкончания КАК ДатаОкончания,
			|	ТЧРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|	ТЧРаботникиОрганизации.Должность КАК Должность,
			|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении КАК НапомнитьПоЗавершении,
			|	ТЧРаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
			|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
			|	ТЧРаботникиОрганизации.ПодразделениеОрганизацииВладелец КАК ОрганизацияПодразделения,
			|	ВЫБОР
			|		КОГДА (НЕ ТЧРаботникиОрганизации.ПодразделениеОрганизацииВладелец В (&СписокСтруктурныхПодразделений))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
			|	ВЫБОР
			|		КОГДА ТЧРаботникиОрганизации.СотрудникОрганизация = &ГоловнаяОрганизация
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостоянияЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния
			|	КОНЕЦ КАК ПрежняяПричина,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделениеЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение
			|	КОНЕЦ КАК ПрежняяОрганизация,
			|	ДанныеПоРаботникуДоНазначения.ПрежнееПодразделение,
			|	ДанныеПоРаботникуДоНазначения.ПрежняяДолжность,
			|	ДанныеПоРаботникуДоНазначения.ПрежняяСтавка,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ГрафикРаботы
			|	КОНЕЦ КАК ПрежнийГрафикРаботы,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Период
			|	КОНЕЦ КАК ДатаПоследнегоДвиженияПоРаботнику,
			|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
			|	NULL КАК КонфликтныйДокумент,
			|	ЕСТЬNULL(ШтатноеРасписание.КоличествоСтавок, 0) + ЕСТЬNULL(ОсвобожденныеСтавкиРаботников.ОсвобожденныеСтавки, 0) - ЕСТЬNULL(Вакансии.КоличествоСтавок, 0) - ЕСТЬNULL(РанееЗанятоСтавок.КоличествоСтавок, 0) + ЕСТЬNULL(ОсвобождаетсяСтавок.КоличествоСтавок, 0) КАК ОстатокСтавок,
			|	ПРЕДСТАВЛЕНИЕ(ТЧРаботникиОрганизации.ПодразделениеОрганизации) КАК ПодразделениеПредставление,
			|	ПРЕДСТАВЛЕНИЕ(ТЧРаботникиОрганизации.Должность),
			|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле
			|	,ТЧРаботникиОрганизации.AVTШтатноеРасписание,
			|	ДанныеПоРаботникуДоНазначения.ПрежнееAVTШтатноеРасписание,
			|	ПРЕДСТАВЛЕНИЕ(ТЧРаботникиОрганизации.AVTШтатноеРасписание) КАК AVTШтатноеРасписаниеПредставление,
			//Blik 290817 67118 н
			|	ВТСтрокиДокумента.временноеЗамещение как временноеЗамещение,
			|	ВТСтрокиДокумента.ТекстЗамещения как ТекстЗамещения 
			//Blik 290817 67118 к
			|ИЗ
			|	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПоРаботникуДоНазначения КАК ДанныеПоРаботникуДоНазначения
			|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПересекающиесяСтроки КАК ПересекающиесяСтроки
			|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтатноеРасписание КАК ШтатноеРасписание
			|		ПО ТЧРаботникиОрганизации.НомерСтроки = ШтатноеРасписание.НомерСтроки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВакансии КАК Вакансии
			|		ПО ТЧРаботникиОрганизации.НомерСтроки = Вакансии.НомерСтроки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРанееЗанятоСтавок КАК РанееЗанятоСтавок
			|		ПО ТЧРаботникиОрганизации.НомерСтроки = РанееЗанятоСтавок.НомерСтроки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсвобождаетсяСтавок КАК ОсвобождаетсяСтавок
			|		ПО ТЧРаботникиОрганизации.НомерСтроки = ОсвобождаетсяСтавок.НомерСтроки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВременноОсвобожденныеСтавки КАК ОсвобожденныеСтавкиРаботников
			|		ПО ТЧРаботникиОрганизации.НомерСтроки = ОсвобожденныеСтавкиРаботников.НомерСтроки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	""КонфликтныйДокумент"",
			|	ТЧРаботникиОрганизации.НомерСтроки,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	Работники.Регистратор,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL
				|	,NULL,
			|	NULL,
			|	NULL,
			//Blik 290817 67118 н
			|	ВТСтрокиДокумента.временноеЗамещение как временноеЗамещение,
			|	ВТСтрокиДокумента.ТекстЗамещения как ТекстЗамещения 
			//Blik 290817 67118 к
			|ИЗ
			|	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|		ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
			|			И ТЧРаботникиОрганизации.Ссылка <> Работники.Регистратор
			|			И ((НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении)
			|					И (Работники.Период МЕЖДУ ТЧРаботникиОрганизации.ДатаНачала И ТЧРаботникиОрганизации.ДатаОкончания
			|						ИЛИ ВЫБОР
			|							КОГДА Работники.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|								ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|							ИНАЧЕ ДОБАВИТЬКДАТЕ(Работники.ПериодЗавершения, ДЕНЬ, -1)
			|						КОНЕЦ МЕЖДУ ТЧРаботникиОрганизации.ДатаНачала И ТЧРаботникиОрганизации.ДатаОкончания
			|						ИЛИ ТЧРаботникиОрганизации.ДатаНачала МЕЖДУ Работники.Период И ВЫБОР
			|							КОГДА Работники.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|								ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|							ИНАЧЕ ДОБАВИТЬКДАТЕ(Работники.ПериодЗавершения, ДЕНЬ, -1)
			|						КОНЕЦ
			|						ИЛИ ТЧРаботникиОрганизации.ДатаОкончания МЕЖДУ Работники.Период И ВЫБОР
			|							КОГДА Работники.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|								ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|							ИНАЧЕ ДОБАВИТЬКДАТЕ(Работники.ПериодЗавершения, ДЕНЬ, -1)
			|						КОНЕЦ)
			|				ИЛИ Работники.Период = ТЧРаботникиОрганизации.ДатаНачала)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		Иначе
				///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
			// Петрухин Андрей 24.06.2011 12:41 
			// ОПИСАНИЕ: Добавлено в Запрос "AVTШтатноеРасписание" и "ПрежнееAVTШтатноеРасписание"
			////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	""ДанныеДляДвиженийКадров"" КАК ВидСтрокиЗапроса,
			|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
			|	ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник,
			|	ТЧРаботникиОрганизации.СотрудникНаименование,
			|	ТЧРаботникиОрганизации.СотрудникНомерДоговора,
			|	ТЧРаботникиОрганизации.СотрудникДатаДоговора,
			|	ТЧРаботникиОрганизации.ДатаНачала КАК ДатаНачала,
			|	ТЧРаботникиОрганизации.ДатаОкончания КАК ДатаОкончания,
			|	ТЧРаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|	ТЧРаботникиОрганизации.Должность КАК Должность,
			|	ТЧРаботникиОрганизации.НапомнитьПоЗавершении КАК НапомнитьПоЗавершении,
			|	ТЧРаботникиОрганизации.ГрафикРаботы КАК ГрафикРаботы,
			|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
			|	ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец КАК ОрганизацияПодразделения,
			|	ВЫБОР
			|		КОГДА (НЕ ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец В (&СписокСтруктурныхПодразделений))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
			|	ВЫБОР
			|		КОГДА ТЧРаботникиОрганизации.СотрудникОрганизация = &ГоловнаяОрганизация
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостоянияЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния
			|	КОНЕЦ КАК ПрежняяПричина,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации
			|	КОНЕЦ КАК ПрежнееПодразделение,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделениеЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение
			|	КОНЕЦ КАК ПрежняяОрганизация,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Должность
			|	КОНЕЦ КАК ПрежняяДолжность,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок
			|	КОНЕЦ КАК ПрежняяСтавка,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.ГрафикРаботы
			|	КОНЕЦ КАК ПрежнийГрафикРаботы,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.Период
			|	КОНЕЦ КАК ДатаПоследнегоДвиженияПоРаботнику,
			|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
			|	NULL КАК КонфликтныйДокумент,
			|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле
			|	,ТЧРаботникиОрганизации.AVTШтатноеРасписание,
			|	ВЫБОР
			|		КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения <= ТЧРаботникиОрганизации.ДатаНачала
			|				И ДанныеПоРаботникуДоНазначения.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|			ТОГДА ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписаниеЗавершения
			|		ИНАЧЕ ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписание
			|	КОНЕЦ КАК ПрежнееAVTШтатноеРасписание,
			//Blik 290817 67118 н
			|	ТЧРаботникиОрганизации.временноеЗамещение как временноеЗамещение,
			|	ТЧРаботникиОрганизации.ТекстЗамещения как ТекстЗамещения 
			//Blik 290817 67118 к
			|ИЗ
			|	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
			|			ДатыПоследнихДвиженийРаботников.Период КАК Период,
			|			ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
			|			ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
			|			ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
			|			ДанныеПоРаботникуДоНазначения.Должность КАК Должность,
			|			ДанныеПоРаботникуДоНазначения.ГрафикРаботы КАК ГрафикРаботы,
			|			ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавокЗавершения КАК ЗанимаемыхСтавокЗавершения,
			|			ДанныеПоРаботникуДоНазначения.ОбособленноеПодразделениеЗавершения КАК ОбособленноеПодразделениеЗавершения,
			|			ДанныеПоРаботникуДоНазначения.ПодразделениеОрганизацииЗавершения КАК ПодразделениеОрганизацииЗавершения,
			|			ДанныеПоРаботникуДоНазначения.ДолжностьЗавершения КАК ДолжностьЗавершения,
			|			ДанныеПоРаботникуДоНазначения.ГрафикРаботыЗавершения КАК ГрафикРаботыЗавершения,
			|			ДанныеПоРаботникуДоНазначения.ПериодЗавершения КАК ПериодЗавершения,
			|			ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
			|			ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостоянияЗавершения КАК ПричинаИзмененияСостоянияЗавершения
			|			,ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписание КАК AVTШтатноеРасписание,
			|			ДанныеПоРаботникуДоНазначения.AVTШтатноеРасписаниеЗавершения КАК AVTШтатноеРасписаниеЗавершения
	
			|		ИЗ
			|			(ВЫБРАТЬ
			|				ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
			|				МАКСИМУМ(Работники.Период) КАК Период,
			|				ТЧРаботникиОрганизации.Сотрудник КАК Сотрудник
			|			ИЗ
			|				ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
			|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|					ПО (Работники.Период <= ТЧРаботникиОрганизации.ДатаНачала)
			|						И ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
			|			
			|			СГРУППИРОВАТЬ ПО
			|				ТЧРаботникиОрганизации.НомерСтроки,
			|				ТЧРаботникиОрганизации.Сотрудник) КАК ДатыПоследнихДвиженийРаботников
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
			|				ПО (ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнихДвиженийРаботников.Период)
			|					И ДатыПоследнихДвиженийРаботников.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник) КАК ДанныеПоРаботникуДоНазначения
			|		ПО ТЧРаботникиОрганизации.НомерСтроки = ДанныеПоРаботникуДоНазначения.НомерСтроки
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
			|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
			|		ИЗ
			|			ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ТЧРаботникиОрганизации2
			|				ПО (ТЧРаботникиОрганизации2.Ссылка = ТЧРаботникиОрганизации.Ссылка)
			|					И ТЧРаботникиОрганизации.НомерСтроки < ТЧРаботникиОрганизации2.НомерСтроки
			|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
			|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	""КонфликтныйДокумент"",
			|	ТЧРаботникиОрганизации.НомерСтроки,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	NULL,
			|	Работники.Регистратор,
			|	NULL,
			|	NULL,
			|	NULL,
			//Blik 290817 67118 н
			|	NULL,
			|	NULL
			//Blik 290817 67118 к
			|ИЗ
			|	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|		ПО ТЧРаботникиОрганизации.Сотрудник = Работники.Сотрудник
			|			И ТЧРаботникиОрганизации.Ссылка <> Работники.Регистратор
			|			И ((НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении)
			|					И (Работники.Период МЕЖДУ ТЧРаботникиОрганизации.ДатаНачала И ТЧРаботникиОрганизации.ДатаОкончания
			|						ИЛИ ВЫБОР
			|							КОГДА Работники.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|								ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|							ИНАЧЕ ДОБАВИТЬКДАТЕ(Работники.ПериодЗавершения, ДЕНЬ, -1)
			|						КОНЕЦ МЕЖДУ ТЧРаботникиОрганизации.ДатаНачала И ТЧРаботникиОрганизации.ДатаОкончания
			|						ИЛИ ТЧРаботникиОрганизации.ДатаНачала МЕЖДУ Работники.Период И ВЫБОР
			|							КОГДА Работники.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|								ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|							ИНАЧЕ ДОБАВИТЬКДАТЕ(Работники.ПериодЗавершения, ДЕНЬ, -1)
			|						КОНЕЦ
			|						ИЛИ ТЧРаботникиОрганизации.ДатаОкончания МЕЖДУ Работники.Период И ВЫБОР
			|							КОГДА Работники.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
			|								ТОГДА ДАТАВРЕМЯ(1, 1, 1)
			|							ИНАЧЕ ДОБАВИТЬКДАТЕ(Работники.ПериодЗавершения, ДЕНЬ, -1)
			|						КОНЕЦ)
			|				ИЛИ Работники.Период = ТЧРаботникиОрганизации.ДатаНачала)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле", КадровоеПеремещениеОрганизацийПереопределяемый.ПолучитьДополнительноеПолеОписанияСотрудника());
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Формирует запрос по таблице "ОсновныеНачисления" документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоНачисления(КонтрольРазмераСтавокШтатногоРасписания)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧНачисления.Ссылка КАК Ссылка,
	|	ТЧНачисления.НомерСтроки КАК НомерСтроки,
	|	ТЧНачисления.Сотрудник КАК Сотрудник,
	|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
	|	ТЧРаботникиОрганизации.Должность,
	|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
	|	ТЧРаботникиОрганизации.ГрафикРаботы,
	|	ТЧРаботникиОрганизации.ДатаНачала КАК Период,
	|	ТЧНачисления.Действие КАК Действие,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И (НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении)
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТЧРаботникиОрганизации.ДатаОкончания, ДЕНЬ, 1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК ПериодЗавершения,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрганизации.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И (НЕ ТЧРаботникиОрганизации.НапомнитьПоЗавершении)
	|			ТОГДА ВЫБОР
	|					КОГДА ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|					КОГДА ТЧНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					ИНАЧЕ ТЧНачисления.Действие
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|	КОНЕЦ КАК ДействиеЗавершения,
	|	ТЧНачисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|			ТОГДА """"
	|		ИНАЧЕ ТЧНачисления.ВидРасчета
	|	КОНЕЦ КАК ВидРасчетаИзмерение,
	|	ТЧНачисления.ВидРасчета.СпособРасчета КАК СпособРасчета,
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.10.2011 14:36 
	|	ТЧРаботникиОрганизации.AVTШтатноеРасписание,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
	|	ТЧНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
	|	ТЧНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
	|	ТЧНачисления.ВидРасчета.ПроизвольнаяФормулаРасчета КАК ПроизвольнаяФормулаРасчета,
	|	ТЧНачисления.Показатель1 КАК Показатель1,
	|	ТЧНачисления.Валюта1 КАК Валюта1,
	|	ТЧНачисления.ТарифныйРазряд1 КАК ТарифныйРазряд1,
	|	ТЧНачисления.Показатель2 КАК Показатель2,
	|	ТЧНачисления.Валюта2 КАК Валюта2,
	|	ТЧНачисления.ТарифныйРазряд2 КАК ТарифныйРазряд2,
	|	ТЧНачисления.Показатель3 КАК Показатель3,
	|	ТЧНачисления.Валюта3 КАК Валюта3,
	|	ТЧНачисления.ТарифныйРазряд3 КАК ТарифныйРазряд3,
	|	ТЧНачисления.Показатель4 КАК Показатель4,
	|	ТЧНачисления.Валюта4 КАК Валюта4,
	|	ТЧНачисления.ТарифныйРазряд4 КАК ТарифныйРазряд4,
	|	ТЧНачисления.Показатель5 КАК Показатель5,
	|	ТЧНачисления.Валюта5 КАК Валюта5,
	|	ТЧНачисления.ТарифныйРазряд5 КАК ТарифныйРазряд5,
	|	ТЧНачисления.Показатель6 КАК Показатель6,
	|	ТЧНачисления.Валюта6 КАК Валюта6,
	|	ТЧНачисления.ТарифныйРазряд6 КАК ТарифныйРазряд6
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК ТЧНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|		ПО ТЧНачисления.Ссылка = ТЧРаботникиОрганизации.Ссылка
	|			И ТЧНачисления.Сотрудник = ТЧРаботникиОрганизации.Сотрудник
	|			И ТЧНачисления.Сторно = ТЧРаботникиОрганизации.Сторно
	|ГДЕ
	|	ТЧНачисления.Ссылка = &ДокументСсылка
	|	И (НЕ ТЧНачисления.Сторно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ПроцедурыУправленияПерсоналом.СформироватьЗапросПоПлановымНачислениям(Запрос.Выполнить().Выгрузить(), КонтрольРазмераСтавокШтатногоРасписания);
	
КонецФункции // СформироватьЗапросПоНачисления()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса по товарам документа, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, КонтрольКоличестваСтавокШтатногоРасписания)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";

	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда

		// Сотрудник
		НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
		Если НетСотрудника Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// ДатаНачала
		НетДатыНачала = Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
		Если НетДатыНачала Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата перемещения!", Отказ, Заголовок);
		КонецЕсли;

		// Организация сотрудника должна совпадать с организацией в документе
		Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
		КонецЕсли;

		// Подразделение
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение, куда переводится сотрудник!", Отказ, Заголовок);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указано подразделение, принадлежащее другой организации!"), Отказ, Заголовок);
		КонецЕсли;

		// Должность
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана должность, на которую переводится сотрудник!", Отказ, Заголовок);
		КонецЕсли;

		// Количество ставок
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок) Тогда
			ОбщегоНазначенияЗК.СообщитьИнформациюПользователю(СтрокаНачалаСообщенияОбОшибке + "не указано количество занимаемых сотрудником ставок - в штатное расписание изменений внесено не будет!");
		ИначеЕсли Не НетДатыНачала И КонтрольКоличестваСтавокШтатногоРасписания Тогда
			Если ВыборкаПоСтрокамДокумента.ОстатокСтавок < ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "в штатном расписании не предусмотрены ставки для перевода сотрудника!", Отказ, Заголовок);
				
				Расшифровки = Новый Массив;
				// расшифровка сообщений представляет собой массив структур "Представление+Расшифровка"
				ОткрытьШтатноеРасписание = Новый Массив;
				ОткрытьШтатноеРасписание.Добавить("РаботаСДиалогамиЗК.ОткрытьФормуШтатноеРасписаниеОрганизаций");
				ОткрытьШтатноеРасписание.Добавить(Новый Структура("Организация, ПодразделениеОрганизации, Должность", ВыборкаПоШапкеДокумента.Организация, ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации, ВыборкаПоСтрокамДокумента.Должность));
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", "штатном расписании", ОткрытьШтатноеРасписание));
				
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(
				"В %% не предусмотрены ставки для перевода работника! Подразделение: " + 
					ВыборкаПоСтрокамДокумента.ПодразделениеПредставление + 
					", должность: " + ВыборкаПоСтрокамДокумента.ДолжностьПредставление,
					Отказ, Заголовок, Перечисления.ВидыСообщений.Ошибка, Расшифровки);

			КонецЕсли;
		КонецЕсли;

		Если НетСотрудника ИЛИ НетДатыНачала Тогда
			Возврат; // Дальше не проверяем
		КонецЕсли;

		// ГрафикРаботы
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы)  Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
		КонецЕсли;
		
		// ДатаОкончания
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) и ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала перемещения не может превышать дату окончания!", Отказ, Заголовок);
		КонецЕсли;
		
		КадровоеПеремещениеОрганизацийПереопределяемый.ДополнительныеПроверкиКадровыхДвижений(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Отказ, Заголовок);

		// Проверка: ранее работник должен быть принят на работу
		Если ВыборкаПоСтрокамДокумента.ПрежняяПричина = NULL Тогда
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяПричина = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда	
			СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен (с " + Формат(ВыборкаПоСтрокамДокумента.ДатаПоследнегоДвиженияПоРаботнику, "ДЛФ=DD") + ")!";
			Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		КонецЕсли;

		// Проверка: противоречие другой строке документа
		Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
			СтрокаСообщениеОбОшибке = "одним документом допускается регистрировать только одно перемещение сотрудника - см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
				
	ИначеЕсли ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "КонфликтныйДокумент" Тогда	
		Если не БезКадровойИсторииСотрудника тогда
		// противоречие другим кадровым приказам
		СтрокаСообщениеОбОшибке = "период действия приказа противоречит кадровому приказу " + Символы.ПС + Символы.Таб + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		Конецесли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок					- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, КонтрольРазмераСтавокШтатногоРасписания)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Вид расчета
	НетВР = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета);
	Если НетВР И ВыборкаПоСтрокамДокумента.Действие <> Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ, Заголовок);
	Иначе
				
		// Соответствие размера "основного" начисления штатному расписанию
		Если КонтрольРазмераСтавокШтатногоРасписания И НЕ ВыборкаПоСтрокамДокумента.РазмерСоответствуетШТР Тогда
			//Вадим.....
			///ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "размер основного начисления не соответствует штатному расписанию!", Отказ, Заголовок);
			// Снял запрет на проведение документа, если начисление не соответствует штатному расписанию. Заборенко. 26.03.2012
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "размер основного начисления не соответствует штатному расписанию!", , Заголовок);         

		КонецЕсли;
		
	КонецЕсли;
	
	// Действие
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Действие) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано действие!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Начать или ВыборкаПоСтрокамДокумента.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
		ИспользуютсяНачисленияВВалюте = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
		ПроведениеРасчетовПереопределяемый.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Истина, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета);
	КонецЕсли;
	
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.Период = NULL Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "данный сотрудник не введен в приказ - по нему не могут быть введены начисления!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.Период = ВыборкаПоСтрокамДокумента.ДатаДвижения Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "на дату "+ ВыборкаПоСтрокамДокумента.Период + " изменение начисления уже зарегистрировано документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!", Отказ, Заголовок);
	КонецЕсли;
	
	// Двойные строки
	Если Не НетВР и Не НетСотрудника и ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
		Если ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
			СтрокаСообщениеОбОшибке = "основное начисление сотрудника следует редактировать в одной строке (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
		Иначе
			СтрокаСообщениеОбОшибке = "сотруднику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
		КонецЕсли;
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента,    ВыборкаПоСтрокамДокумента, СтруктураПараметров = "")
	
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		Если не БезКадровойИсторииСотрудника тогда
			// отразим новое место работы
			Движение = Движения.РаботникиОрганизаций.Добавить();
			
			// Свойства
			Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаНачала;
			
			// Измерения
			Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
			Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			
			// Ресурсы
			Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
			Движение.ЗанимаемыхСтавок			= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок;
			Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ГрафикРаботы;
			Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.Перемещение;
			Движение.ОбособленноеПодразделение	= ВыборкаПоСтрокамДокумента.ОрганизацияПодразделения;
			// ИЗМЕНЕНИЕ: Петрухин Андрей 24.06.2011 12:29  
			Движение.AVTШтатноеРасписание		= ВыборкаПоСтрокамДокумента.AVTШтатноеРасписание;
			// Реквизиты
			Движение.ПервичныйДокумент			= ВыборкаПоШапкеДокумента.Ссылка;
		Конецесли;	
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) Тогда
			
			Если НЕ ВыборкаПоСтрокамДокумента.НапомнитьПоЗавершении Тогда
				Если не БезКадровойИсторииСотрудника тогда
					
					// вернем прежние данные по прежнему месту работы
					//				Движение = Движения.РаботникиОрганизаций.Добавить();
					
					// Свойства
					Движение.ПериодЗавершения						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
					
					// Измерения
					Движение.Сотрудник								= ВыборкаПоСтрокамДокумента.Сотрудник;
					Движение.Организация							= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
					
					// Ресурсы
					Движение.ПодразделениеОрганизацииЗавершения		= ВыборкаПоСтрокамДокумента.ПрежнееПодразделение;
					Движение.ДолжностьЗавершения					= ВыборкаПоСтрокамДокумента.ПрежняяДолжность;
					Движение.ЗанимаемыхСтавокЗавершения				= ВыборкаПоСтрокамДокумента.ПрежняяСтавка;
					Движение.ГрафикРаботыЗавершения					= ВыборкаПоСтрокамДокумента.ПрежнийГрафикРаботы;
					Движение.ПричинаИзмененияСостоянияЗавершения	= Перечисления.ПричиныИзмененияСостояния.Перемещение;
					Движение.ОбособленноеПодразделениеЗавершения	= ВыборкаПоСтрокамДокумента.ПрежняяОрганизация;
					// ИЗМЕНЕНИЕ: Петрухин Андрей 24.06.2011 12:29  
					Движение.AVTШтатноеРасписаниеЗавершения         = ВыборкаПоСтрокамДокумента.ПрежнееAVTШтатноеРасписание;
				Конецесли;
			Иначе
				
				Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();
				
				// Свойства
				Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
				
				// Измерения
				Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ДатаИзменения				= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
				Движение.ПланируемоеСобытие			= Перечисления.НамеченныеСобытияПоПерсоналу.Перемещение;
				
				// Реквизиты
				Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПрежнееПодразделение;
				Движение.Должность					= ВыборкаПоСтрокамДокумента.ПрежняяДолжность;
				Движение.ГрафикРаботы				= ВыборкаПоСтрокамДокумента.ПрежнийГрафикРаботы;
				Движение.ЗанимаемыхСтавок			= ВыборкаПоСтрокамДокумента.ПрежняяСтавка;
				Движение.ЗаниматьСтавку				= Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, Заголовок)
	
	Если ВыборкаСтрокЗапроса.Действие = Перечисления.ВидыДействияСНачислением.НеИзменять Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по регистру "ПлановыеНачисленияРаботниковОрганизаций"
	ПроцедурыУправленияПерсоналом.СформироватьДвижениеПоПлановымНачислениям(Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить(), ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
	
	// Движения по регистру "КоэффициентИндексацииЗаработка" - отразим факт индексации заработка
	Если ВыборкаПоШапкеДокумента.ИндексацияЗаработка И ВыборкаСтрокЗапроса.ОсновноеНачисление Тогда
		
		// определим форму оплаты
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокЗапроса.СпособРасчетаЗавершения) ИЛИ ВыборкаСтрокЗапроса.СпособРасчета = ВыборкаСтрокЗапроса.СпособРасчетаЗавершения Тогда
			ФормаОплатыДо = ВыборкаСтрокЗапроса.СпособРасчета;
			ФормаОплатыПосле = ВыборкаСтрокЗапроса.СпособРасчета;
		Иначе
			Если ВыборкаСтрокЗапроса.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням 
				Или ВыборкаСтрокЗапроса.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
				ФормаОплатыДо = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
			ИначеЕсли ВыборкаСтрокЗапроса.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
				Или ВыборкаСтрокЗапроса.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
				ФормаОплатыДо = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке
			Иначе
				ФормаОплатыДо = ВыборкаСтрокЗапроса.СпособРасчета;
			КонецЕсли;
			Если ВыборкаСтрокЗапроса.СпособРасчетаЗавершения = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням 
				Или ВыборкаСтрокЗапроса.СпособРасчетаЗавершения = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
				ФормаОплатыПосле = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням
			ИначеЕсли ВыборкаСтрокЗапроса.СпособРасчетаЗавершения = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
				Или ВыборкаСтрокЗапроса.СпособРасчетаЗавершения = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
				ФормаОплатыПосле = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке
			Иначе
				ФормаОплатыПосле = ВыборкаСтрокЗапроса.СпособРасчетаЗавершения;
			КонецЕсли;
		КонецЕсли;
		
		Если ФормаОплатыДо <> ФормаОплатыПосле Тогда
			ТекстСообщения = "Сотруднику " + Строка(ВыборкаСтрокЗапроса.Сотрудник) + " изменена форма оплаты труда; коэффициент индексации заработка не зарегистрирован! Для регистрации коэффициента индексации можно воспользоваться документом ""Ввод коэффициентов индексации заработка""";
			Если ЗначениеЗаполнено(Заголовок) Тогда
				ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
				Заголовок = "";
			КонецЕсли;
			ОбщегоНазначенияЗК.СообщитьИнформациюПользователю(ТекстСообщения);
		Иначе
			Если ЗначениеЗаполнено(ВыборкаСтрокЗапроса.ПрежнийПоказатель1) И ВыборкаСтрокЗапроса.ПрежнийПоказатель1 > 0 И ВыборкаСтрокЗапроса.Показатель1 > ВыборкаСтрокЗапроса.ПрежнийПоказатель1 Тогда
				Движение = Движения.КоэффициентИндексацииЗаработка.Добавить();
				
				// Свойства
				Движение.Период						= ВыборкаСтрокЗапроса.Период;
				
				// Измерения
				Движение.Сотрудник					= ВыборкаСтрокЗапроса.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				
				// Ресурсы
				Движение.Коэффициент				= ?(ВыборкаСтрокЗапроса.ПрежнийПоказатель1 = 0, 0, ВыборкаСтрокЗапроса.Показатель1 / ВыборкаСтрокЗапроса.ПрежнийПоказатель1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоНачислениям()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента,ВыборкаПоСтрокамДокумента, СтруктураПараметров = "")
	
	Если ВыборкаПоСтрокамДокумента.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		
		ПрежняяСтавка			= ВыборкаПоСтрокамДокумента.ПрежняяСтавка;
		ПрежнееПодразделение	= ВыборкаПоСтрокамДокумента.ПрежнееПодразделение;
		ПрежняяДолжность		= ВыборкаПоСтрокамДокумента.ПрежняяДолжность;
				///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Петрухин Андрей 24.06.2011 12:30 
		ПрежнееAVTШтатноеРасписание		= ВыборкаПоСтрокамДокумента.ПрежнееAVTШтатноеРасписание;
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		// по прежнему месту работы освободим занимаемые ранее ставки
		Если ЗначениеЗаполнено(ПрежняяСтавка) Тогда
			
			Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			
			// Свойства
			Движение.Период							= ВыборкаПоСтрокамДокумента.ДатаНачала;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Расход;
			
			// Измерения
			Движение.ПодразделениеОрганизации		= ПрежнееПодразделение;
			Движение.Должность						= ПрежняяДолжность;
						// ИЗМЕНЕНИЕ: Петрухин Андрей 23.06.2011 15:27  
			Движение.AVTШтатноеРасписание			= ПрежнееAVTШтатноеРасписание;
			// Ресурсы
			Движение.КоличествоСтавок				= ПрежняяСтавка;
			
			// Реквизиты
			Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
			
		КонецЕсли;
		
		// по новому месту работы займем указанные ставки
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок) Тогда
			
			Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
			
			// Свойства
			Движение.Период							= ВыборкаПоСтрокамДокумента.ДатаНачала;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ПодразделениеОрганизации		= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
			Движение.Должность						= ВыборкаПоСтрокамДокумента.Должность;
				// ИЗМЕНЕНИЕ: Петрухин Андрей 23.06.2011 15:27  
			Движение.AVTШтатноеРасписание			= ВыборкаПоСтрокамДокумента.AVTШтатноеРасписание;
			// Ресурсы
			Движение.КоличествоСтавок				= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок;
			
			// Реквизиты
			Движение.Сотрудник						= ВыборкаПоСтрокамДокумента.Сотрудник;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) И Не ВыборкаПоСтрокамДокумента.НапомнитьПоЗавершении Тогда
			
			// по прежнему месту работы займем временно освобожденные ставки
			Если ЗначениеЗаполнено(ПрежняяСтавка) Тогда
				
				Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
				
				// Свойства
				Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
				Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
				
				// Измерения
				Движение.ПодразделениеОрганизации	= ПрежнееПодразделение;
				Движение.Должность					= ПрежняяДолжность;
				///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
				// Петрухин Андрей 24.06.2011 12:31 
				Движение.AVTШтатноеРасписание		= ПрежнееAVTШтатноеРасписание;
				////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
				// Ресурсы
				Движение.КоличествоСтавок			= ПрежняяСтавка;
				
				// Реквизиты
				Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
				
			КонецЕсли;
			
			// по новому месту работы освободим временно занимавшиеся ставки
			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок) Тогда
				
				Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
				
				// Свойства
				Движение.Период						= ВыборкаПоСтрокамДокумента.ДатаОкончания + мДлинаСуток;
				Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
				
				// Измерения
				Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
				Движение.Должность					= ВыборкаПоСтрокамДокумента.Должность;
				///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
				// Петрухин Андрей 24.06.2011 12:32 
				Движение.AVTШтатноеРасписание		= ВыборкаПоСтрокамДокумента.AVTШтатноеРасписание;
				////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
				// Ресурсы
				Движение.КоличествоСтавок			= ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок;
				
				// Реквизиты
				Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо,
		|	СотрудникиОрганизаций.Организация,
		|	СотрудникиОрганизаций.ОбособленноеПодразделение,
		|	СотрудникиОрганизаций.ВидДоговора
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
		Запрос.УстановитьПараметр("Сотрудник",	Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Не Выборка.Следующий() Тогда
			Возврат;
		КонецЕсли;
		
		Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда
			ИЛИ Выборка.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Выборка.ОбособленноеПодразделение.Пустая() Тогда
			Организация = Выборка.ОбособленноеПодразделение;
		Иначе
			Организация = Выборка.Организация;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаДокумента",ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботникиОрганизации.Сотрудник,
		|	ВЫБОР
		|		КОГДА  РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизации.ДолжностьЗавершения
		|		ИНАЧЕ РаботникиОрганизации.Должность 
		|	КОНЕЦ КАК Должность,
		|	ВЫБОР
		|		КОГДА  РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
		|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
		|	КОНЕЦ КАК ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
		|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизации.ЗанимаемыхСтавокЗавершения
		|		ИНАЧЕ РаботникиОрганизации.ЗанимаемыхСтавок
		|	КОНЕЦ КАК ЗанимаемыхСтавок
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
		
		НоваяСтрока = РаботникиОрганизации.Добавить();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		Иначе
			НоваяСтрока.Сотрудник = Основание;
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Основание);
		КонецЕсли;
		
		НоваяСтрока.ДатаНачала = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
		ДобавитьСтрокиНачисленийПоРаботнику(Основание, НоваяСтрока.ДатаНачала);
		
	Иначе
		
		КадровоеПеремещениеОрганизацийПереопределяемый.ОбработкаЗаполненияПоДругимОснованиям(ЭтотОбъект, Основание);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Если документ перенесен - движения не делаем
	Если ДанныеПрошлойВерсии Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СоответствиеВалютныеСпособыРасчета = ПроведениеРасчетов.ПолучитьСоответствиеСпособовРасчетаТребующихВалюту();
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда

			// Получение учетной политики по персоналу организации
			УчетнаяПолитикаПоПерсоналуОрганизации	= глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
			КонтрольКоличестваСтавокШтатногоРасписания				= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "КонтрольКоличестваСтавокШтатногоРасписания");
			КонтрольРазмераСтавокШтатногоРасписания					= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "КонтрольРазмераСтавокШтатногоРасписания");

			// получим реквизиты табличной части
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, Режим, КонтрольКоличестваСтавокШтатногоРасписания).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			//Blik 200417 64767 н
			СписКОдовШЕ = Новый СписокЗначений; 
			СтрокаСообщениеОбОшибке = "";
			//Blik 200417 64767 к
			
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, КонтрольКоличестваСтавокШтатногоРасписания);
				
				//Blik 200417 64767 н
				//проверка на повторение ШЕ в док
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("AVTШтатноеРасписание", ВыборкаПоСтрокамДокумента.AVTШтатноеРасписание);
				МассивСтрок = РаботникиОрганизации.НайтиСтроки(ПараметрыОтбора);
				Если МассивСтрок.Количество()>1 Тогда
					Если  СписКОдовШЕ.НайтиПоЗначению(ВыборкаПоСтрокамДокумента.AVTШтатноеРасписание) = Неопределено Тогда
						СтрокаСообщениеОбОшибке = СтрокаСообщениеОбОшибке+"В строках документа повторяется код ШЕ "+  ВыборкаПоСтрокамДокумента.AVTШтатноеРасписание+Символы.ПС;
						СписКОдовШЕ.Добавить(ВыборкаПоСтрокамДокумента.AVTШтатноеРасписание);
					КонецЕсли;
				КонецЕсли;
				//Blik 200417 64767 к

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента,ВыборкаПоСтрокамДокумента);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
                    //Blik 290817 67118 н
					ПроверитьДобавитьСтрокуВДвиженияПоРегиструНакопленияЗамещениеСотрудников(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
					//Blik 290817 67118 к

				КонецЕсли;

			КонецЦикла;
			
            Сообщить(СтрокаСообщениеОбОшибке); //Blik 200417 64767 
			
			// выполним выборку по табличной части основных начислений
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоНачисления(КонтрольРазмераСтавокШтатногоРасписания).Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, КонтрольРазмераСтавокШтатногоРасписания);
				Если не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Заголовок);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
 		
		КадровоеПеремещениеОрганизацийПереопределяемый.ДобавитьДополнительныеДвижения(ЭтотОбъект, Отказ, Заголовок);

	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
		
КонецПроцедуры // ОбработкаПроведения()

//Blik 290817 67118 н 
Процедура ПроверитьДобавитьСтрокуВДвиженияПоРегиструНакопленияЗамещениеСотрудников(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)
	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвиженийКадров" Тогда
		//добавим движение расход по старой ше, если был приход
		Запрос = Новый Запрос;
		
		// Установим параметры запроса
		Запрос.УстановитьПараметр("ДатаУвольнения",		        ВыборкаПоРаботникиОрганизации.ДатаНачала);
		Запрос.УстановитьПараметр("ПодразделениеОрганизации",	ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение);
		Запрос.УстановитьПараметр("Должность",	                ВыборкаПоРаботникиОрганизации.ПрежняяДолжность);
		Запрос.УстановитьПараметр("AVTШтатноеРасписание",	    ВыборкаПоРаботникиОрганизации.ПрежнееAVTШтатноеРасписание);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРГ_ЗамещениеСотрудниковОстатки.ПодразделениеОрганизации,
		|	ПРГ_ЗамещениеСотрудниковОстатки.Должность,
		|	ПРГ_ЗамещениеСотрудниковОстатки.AVTШтатноеРасписание,
		|	ПРГ_ЗамещениеСотрудниковОстатки.КоличествоСтавокОстаток
		|ИЗ
		|	РегистрНакопления.ПРГ_ЗамещениеСотрудников.Остатки(&ДатаУвольнения, ) КАК ПРГ_ЗамещениеСотрудниковОстатки
		|ГДЕ
		|	ПРГ_ЗамещениеСотрудниковОстатки.ПодразделениеОрганизации = &ПодразделениеОрганизации
		|	И ПРГ_ЗамещениеСотрудниковОстатки.Должность = &Должность
		|	И ПРГ_ЗамещениеСотрудниковОстатки.AVTШтатноеРасписание = &AVTШтатноеРасписание";
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			Если Результат.КоличествоСтавокОстаток > 0 тогда
				
				Движение = Движения.ПРГ_ЗамещениеСотрудников.Добавить();
				
				// Свойства
				Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаНачала;
				Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
				
				// Измерения
				Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение;
				Движение.Должность					= ВыборкаПоРаботникиОрганизации.ПрежняяДолжность;
				Движение.AVTШтатноеРасписание		= ВыборкаПоРаботникиОрганизации.ПрежнееAVTШтатноеРасписание;
				
				// Ресурсы
				Движение.КоличествоСтавок			= Результат.КоличествоСтавокОстаток;
				
				// Реквизиты
				Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.ТекстЗамещения				= "";
				
			КонецЕсли;
		КонецЕсли;
		//добавим движения по новой ШЕ если необходимо
		Если ВыборкаПоРаботникиОрганизации.временноеЗамещение Тогда
			//Blik 191017 71994 н
			
			//движение по старой ше
			
			ТекстДляСтаройШЕ = "Временно вакантна на период перевода " + СокрЛП(Строка(ВыборкаПоРаботникиОрганизации.Сотрудник)) + 
			" на ШЕ " + СокрЛП(Строка(ВыборкаПоРаботникиОрганизации.AVTШтатноерасписание));
			
			Движение = Движения.ПРГ_ЗамещениеСотрудников.Добавить();
			
			// Свойства
			Движение.Период							= ВыборкаПоРаботникиОрганизации.ДатаНачала; //Blik 191017 71994 + мДлинаСуток;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ПодразделениеОрганизации		= ВыборкаПоРаботникиОрганизации.ПрежнееПодразделение;
			Движение.Должность						= ВыборкаПоРаботникиОрганизации.ПрежняяДолжность; 
			Движение.AVTШтатноеРасписание			= ВыборкаПоРаботникиОрганизации.ПрежнееAVTШтатноеРасписание;
			
			// Ресурсы
			Движение.КоличествоСтавок				= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
			
			// Реквизиты
			Движение.Сотрудник						= Справочники.СотрудникиОрганизаций.ПустаяСсылка();
			Движение.ТекстЗамещения					= ТекстДляСтаройШЕ;

			//Blik 191017 71994 к
			//движение по новой ше
			// ЗанятыеШтатныеЕдиницыОрганизаций";
			Движение = Движения.ПРГ_ЗамещениеСотрудников.Добавить();
			
			// Свойства
			Движение.Период							= ВыборкаПоРаботникиОрганизации.ДатаНачала; //Blik 191017 71994 + мДлинаСуток;
			Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ПодразделениеОрганизации		= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
			Движение.Должность						= ВыборкаПоРаботникиОрганизации.Должность; 
			Движение.AVTШтатноеРасписание			= ВыборкаПоРаботникиОрганизации.AVTШтатноерасписание;
			
			// Ресурсы
			Движение.КоличествоСтавок				= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
			
			// Реквизиты
			Движение.Сотрудник						= ВыборкаПоРаботникиОрганизации.Сотрудник;
			Движение.ТекстЗамещения					= ВыборкаПоРаботникиОрганизации.ТекстЗамещения;
			
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры 
//Blik 290817 67118 к

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначенияЗК.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	ОбщегоНазначенияЗК.ДобавитьПрефиксУзла(Префикс);
	
	// получить новый номер документа по совокупности кадровых документов
	ПроцедурыУправленияПерсоналом.ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Префикс, Дата);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// проверим уникальность номера с точки зрения кадровой нумерации
	ПроцедурыУправленияПерсоналом.ПроверкаУникальностиНомераКадровогоДокумента(ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Дата, Ссылка);

	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры // ПриЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

мВосстанавливатьДвижения = Ложь;

