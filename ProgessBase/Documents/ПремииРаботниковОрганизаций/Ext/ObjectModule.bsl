////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Заполняет показатели
//
Функция ЗаполнитьПоказатели(ТекущийСотрудник, Источник) Экспорт 
	
	Если ТекущийСотрудник = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФормаВводаПоказателей = РегистрыСведений.ЗначенияПоказателейСхемМотивации.ПолучитьФорму("ФормаВводаЗначенийПоказателей");
	ФормаВводаПоказателей.Организация		= Справочники.Организации.ПустаяСсылка();
	ФормаВводаПоказателей.ПериодДействия	= НачалоМесяца(ПериодРегистрации);
	
	ТЗНачисления	= Начисления.Выгрузить(,"Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления",ТЗНачисления);
	Запрос.УстановитьПараметр("ПарамДата",НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ВидРасчета",ВидРасчета);
	
	Если ДатаОкончанияБП = Дата('0001.01.01') Тогда
		Запрос.УстановитьПараметр("ДатаОкончания",КонецМесяца(ПериодРегистрации));
	Иначе
		Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончанияБП);
	КонецЕсли;
	
	
	// получим временную таблицу с сотрудниками и видами расчетов
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	&ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&Начисления КАК Начисления";
	
	Запрос.Выполнить();
	
	ВТНачисления = "ВТНачисления";
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Показатели.Показатель.ВидПоказателя КАК ВидПоказателя,
	|	Показатели.Показатель,
	|	Начисления.Сотрудник,
	|	Начисления.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	ВТНачисления КАК Начисления
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.Показатели КАК Показатели
	|		ПО Показатели.Ссылка = &ВидРасчета
	|		И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
	|		И Показатели.Показатель.ВозможностьИзменения <> ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.ПустаяСсылка)
	|		И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
	|		И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)
	|		И Показатели.Показатель.ТипПоказателя <> ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
	|		И Не Показатели.Показатель.Предопределенный
	|ГДЕ
	|	НЕ (Показатели.Показатель ЕСТЬ NULL)
	|	И НЕ (Начисления.Сотрудник ЕСТЬ NULL)";
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Свернуть("ВидПоказателя,Показатель,Сотрудник, ДатаОкончания");
	Показатели = ТаблицаЗапроса.ВыгрузитьКолонку("Показатель");
	Сотрудники = ТаблицаЗапроса.ВыгрузитьКолонку("Сотрудник");
	
	Если ЗначениеЗаполнено(ТаблицаЗапроса) Тогда

		ФормаВводаПоказателей.Организация			= Организация;
		ФормаВводаПоказателей.ФормаАвтозаполнение(ТаблицаЗапроса, Сотрудники, Показатели, , Ложь);
		ФормаВводаПоказателей.мСотрудникДляОткрытия	= ТекущийСотрудник;
		ФормаВводаПоказателей.мИсточник				= Источник;
		ФормаВводаПоказателей.Открыть();
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции //ЗаполнитьПоказатели

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//	Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
    //Вадим
	//Если Не Проведен Тогда
	//	РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после его проведения!");
	//	Возврат Неопределено;
	//КонецЕсли;
	///ВадимКонец
	// Получить экземпляр документа на печать
	ИмяФормы = "";
	Если      ИмяМакета = "Т11а" Тогда
		ИмяФормы = " (форма Т-11а)";
		ТабДокумент = ПечатьТ11а();
		
	ИначеЕсли ИмяМакета = "Т11" Тогда
		ИмяФормы = " (форма Т-11)";
		ТабДокумент = ПечатьТ11();
		
	КонецЕсли;

	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним + ИмяФормы));

КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	СтруктураМакетов.Вставить("Т11а",	"Форма Т-11а");
	СтруктураМакетов.Вставить("Т11",	"Форма Т-11");
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура Автозаполнение(СписокРаботников) Экспорт
	
	ПараметрыАвтозаполнения = Новый Структура;
	ПараметрыАвтозаполнения.Вставить("ВидРасчета", ВидРасчета);
	ПараметрыАвтозаполнения.Вставить("ДатаНачала", НачалоМесяца(ПериодРегистрации));
	ПараметрыАвтозаполнения.Вставить("ДатаОкончания", КонецМесяца(ПериодРегистрации));
	
	Начисления.Загрузить(ЗаполнениеДокументовЗК.РазовыеНачисленияУдержания(СписокРаботников, ПараметрыАвтозаполнения, ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация)));

КонецПроцедуры
	
// Заполняет документ по перерассчитываемому документу
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Знач Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
	
	Если Сотрудники = "ПоДаннымПерерасчета" Тогда
		Исправления = ПроведениеРасчетов.ПолучитьДокументИсправление(ПерерассчитываемыйДокумент, "КритерийОтбора"); 
		Запрос.УстановитьПараметр("Исправления", Исправления);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Сотрудник
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций.Начисления КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &ПерерассчитываемыйДокумент
		|	И (НЕ СотрудникиОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Начисления.Сотрудник
		|				ИЗ
		|					Документ.ПремииРаботниковОрганизаций.Начисления КАК Начисления
		|				ГДЕ
		|					Начисления.Ссылка В (&Исправления)
		|					И Начисления.Сторно))
		|	И СотрудникиОрганизаций.Физлицо В
		|			(ВЫБРАТЬ
		|				Перерасчет.ФизЛицо
		|			ИЗ
		|				РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|			ГДЕ
		|				Перерасчет.ОбъектПерерасчета = &ПерерассчитываемыйДокумент)";
		Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
	
	// выполним запрос к Начисления
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо КАК Физлицо,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	-Начисления.Результат КАК Результат,
	|	-Начисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|	ИСТИНА КАК Сторно,
	|	ЛОЖЬ КАК Авторасчет,
	|	Начисления.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физлицо,
	|	Начисления.Показатель1,
	|	Начисления.Показатель2,
	|	Начисления.Показатель3,
	|	Начисления.Показатель4,
	|	Начисления.Показатель5,
	|	Начисления.Показатель6,
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	Начисления.НомерСтроки
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка = &ПерерассчитываемыйДокумент
	|	И (НЕ Начисления.Сторно)
	|	И (&ПоВсемСотрудникам
	|			ИЛИ Начисления.Сотрудник В (&Сотрудники))
	|	И Начисления.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сторно УБЫВ,
	|	НомерСтроки";
	
	Начисления.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

// Выполняет перерасчет по заданному списку физлиц
// Если передан пустой список физлиц - перерасчет не проводится
// Если в качестве списка физлиц передан не массив, а Неопределено - перерасчет по всем физлицам 
// регистратора по которым требуется перерасчет
//
// Параметры
//	Физлица	- список значений - ссылки на физлиц
// Возвращаемое значение
//	Нет
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт
	
	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	Если Не ПроведениеРасчетов.НеобходимостьПерерасчета(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	// получим список перерассчитываемых физлиц
	ФизлицаСписок = Новый СписокЗначений;
	Если Физлица = Неопределено Тогда
		// таблица ФизлицаДляПерерасчета
		// Список физлиц по которым необходимо выполнить перерасчет
		// Поля:
		//		ФизЛицо
		// Описание:
		// Получает список неповторяющихся физлиц по которым есть записи
		// перерасчета в одной из таблиц перерасчета - по основным или дополнительным начислениям
		//
		ФизлицаДляПерерасчетаТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Перерасчет.ФизЛицо
		|	ИЗ
		|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
		|	
		|	ГДЕ
		|		Перерасчет.ОбъектПерерасчета = &парамРегистратор";
		
		Запрос = Новый Запрос(ФизлицаДляПерерасчетаТекст);
		Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
		ФизлицаСписок.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
		
	Иначе
		ФизлицаСписок = Физлица;
		
	КонецЕсли;

	// если не перерассчитываем никого - возврат
	Если ФизлицаСписок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Прочитаем все данные в одной транзакции
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке("").Выбрать();
	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Прочитать();
	Движения.НДФЛСведенияОДоходах.Прочитать();
	ЗафиксироватьТранзакцию();
	
	// позиционируем выборку
	ВыборкаПоШапкеДокумента.Следующий();
	
	////////////////////////////////////////////////////////////////////////
	// Дополнительные начисления и сведения о доходах НДФЛ
	
	// сначала удалим сведения о доходах НДФЛ по перерассчитываемым физлицам
	НДФЛСведенияОДоходах = Движения.НДФЛСведенияОДоходах;
	ПоследнееДвижение = НДФЛСведенияОДоходах.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		// удалим записи по всем физлицам полученного списка
		// обходим в обратном порядке
		Если ФизлицаСписок.НайтиПоЗначению(НДФЛСведенияОДоходах[ПоследнееДвижение - Сч].Физлицо) <> Неопределено Тогда
			НДФЛСведенияОДоходах.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
	КонецЦикла;
	
	// перерассчитываем записи начислений
	// при этом передаем не только набор записей регистра расчета, но и набор записей регистра 
	// накопления со сведениями об отработанном времени
	// а также таблицу значений в которую будет заполнять движения для НДФЛСведенияОДоходах
	ДвиженияНДФЛСведенияОДоходах = 	Движения.НДФЛСведенияОДоходах.Выгрузить();// фактически - создаем структуру таблицы значений
	ПроведениеРасчетовПереопределяемый.ПереРассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", Движения.ДополнительныеНачисленияРаботниковОрганизаций, Физлица, ДвиженияНДФЛСведенияОДоходах,, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение, Начисления);
	// запишем набор
	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Записать(Истина, Истина);
	
	// запишем движения по доходам НДФЛ, которые формируются при ПереРассчитатьЗаписиРегистраРасчета
	ДвиженияНДФЛСведенияОДоходах = 	Движения.НДФЛСведенияОДоходах.Выгрузить();
	СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, ДвиженияНДФЛСведенияОДоходах, ФизлицаСписок);
	ПроведениеРасчетов.СвернутьДвиженияНДФЛСведенияОДоходах(ДвиженияНДФЛСведенияОДоходах);
	Движения.НДФЛСведенияОДоходах.Загрузить(ДвиженияНДФЛСведенияОДоходах);
	Движения.НДФЛСведенияОДоходах.Записать();
	
	// записываем документ перед вызовом формирование взаиморасчетов с работниками
	Записать();
	
	////////////////////////////////////////////////////////////////////////
	// взаиморасчеты с работниками

	// сначала удалим сведения о взаиморасчетах с работниками
	ВзаиморасчетыСРаботникамиОрганизаций = Движения.ВзаиморасчетыСРаботникамиОрганизаций;
	ВзаиморасчетыСРаботникамиОрганизаций.Записать();
	
	ВыборкаПоНачислениям = СформироватьЗапросПоВзаиморасчетам().Выбрать();

	Пока ВыборкаПоНачислениям.Следующий() Цикл
		// Заполним записи в наборах записей регистров
		ДобавитьСтрокуВДвиженияПоВзаиморасчетам(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
	КонецЦикла;
	
	Движения.ВзаиморасчетыСРаботникамиОрганизаций.Записать();
	
	////////////////////////////////////////////////////////////////////////
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

Процедура РассчитатьПремию(Сотрудник = Неопределено) Экспорт
	
	// Перечитаем объект и соберем данные для заполнения наборов записей регистров
	НачатьТранзакцию();
	Прочитать();
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке("ПоРеквизитамДокумента").Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоДопНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Сотрудник).Выбрать();
	ЗафиксироватьТранзакцию();

	//массивы для хранения индексов строк табличных частей,
	//используются для расчета по одному сотруднику
	Если Сотрудник = Неопределено Тогда
		МассивИндексыСтрокНачисления = Неопределено;
		
	Иначе
		МассивИндексыСтрокНачисления = Новый Массив();
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ,Заголовок);
	
	// создадим наборы записей для выполнения движений
	НаборДопНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДопНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	Пока ВыборкаПоДопНачислениям.Следующий() Цикл
		ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоДопНачислениям, Отказ,Заголовок);
		Если НЕ Отказ Тогда
			// Заполним записи в наборах записей регистров
			ДобавитьСтрокуВДвиженияПоРегистрамРасчета(ВыборкаПоШапкеДокумента, ВыборкаПоДопНачислениям, НаборДопНачисления);
			
			Если НЕ (Сотрудник = Неопределено) Тогда
				МассивИндексыСтрокНачисления.Добавить(ВыборкаПоДопНачислениям.НомерСтроки-1);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДопНачисления,,,ВыборкаПоШапкеДокумента.ГоловнаяОрганизация,,Начисления,, МассивИндексыСтрокНачисления, Сотрудник);
	
	РассчитатьНДФЛ(Сотрудник, , Ложь, ВыборкаПоШапкеДокумента);	
	
	// Удаляем движения
	НаборДопНачисления.Очистить();
	НаборДопНачисления.Записать();
	
КонецПроцедуры // РассчитатьПремию()

// Процедура рассчитывает НДФЛ
// и заполняет реквизиты табличной части
//
Процедура РассчитатьНДФЛ(Сотрудник = Неопределено, КомментироватьРасчет = Ложь, ПроводитьПроверки = Истина, ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	Если Не ВыплачиватьМежрасчетно Тогда
		Возврат
	КонецЕсли;
		
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		// Получим реквизиты шапки из запроса
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке("").Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	Если ПроводитьПроверки Тогда
		
		Отказ = Ложь;
		
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, "");
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Сотрудник).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, "");
		КонецЦикла;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ВыборкаПоНачислениям.Сбросить();
		
	Иначе	
		ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Сотрудник).Выбрать();
	КонецЕсли;
	
	НаборЗаписей = Движения.ДополнительныеНачисленияРаботниковОрганизаций.ВыгрузитьКолонки();
	Пока ВыборкаПоНачислениям.Следующий() Цикл
		ДобавитьСтрокуВДвиженияПоРегистрамРасчета(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, НаборЗаписей);
	КонецЦикла;
	
	ДоходыИзДокумента = РегистрыНакопления.НДФЛСведенияОДоходах.СоздатьНаборЗаписей().ВыгрузитьКолонки();
    СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборЗаписей, ДоходыИзДокумента);
	Если ДоходыИзДокумента.Количество() = 0 Тогда
		Возврат	
	КонецЕсли;
	
	Таблица = ДоходыИзДокумента.Скопировать(,"Физлицо");
	Таблица.Свернуть("Физлицо");
	МассивФизлиц = Таблица.ВыгрузитьКолонку("Физлицо");
	Таблица = ДоходыИзДокумента.Скопировать(,"Период");
	Таблица.Свернуть("Период");
	МесяцыПолученияДохода = Таблица.ВыгрузитьКолонку("Период");
	Для Сч = 1 По МесяцыПолученияДохода.Количество() Цикл
		МесяцыПолученияДохода[Сч - 1] = НачалоМесяца(МесяцыПолученияДохода[Сч - 1])
	КонецЦикла;
	
	СтруктураДанныхДляПромежуточногоРасчета = ПроведениеРасчетов.ДанныеДляПромежуточногоРасчетаНДФЛ(МассивФизлиц, ВыборкаПоШапкеДокумента);
	
	// Составим текст запроса для выбора списка физлиц, по которым надо считать НДФЛ
	
	МассивТаблиц = НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьМассивТабличныхЧастей(ЭтотОбъект, "НДФЛ");
	Если Сотрудник = Неопределено Тогда
		СписокФизлицТекст = 
		"ВЫБРАТЬ
		|	ПремииРаботниковОрганизацийНачисления.Физлицо
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацийНачисления
		|ГДЕ
		|	ПремииРаботниковОрганизацийНачисления.Ссылка = &Ссылка
		|   И ПремииРаботниковОрганизацийНачисления.Физлицо.ПРГ_НеНачислятьНДФЛ = Ложь";  //Blik 150217 62364
		ДополнительныеПараметрыЗапросаНДФЛ = Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка);
		Для каждого ТабличнаяЧасть Из МассивТаблиц Цикл
			ТабличнаяЧасть.Очистить();
		КонецЦикла;
	Иначе
		СписокФизлицТекст = 
		"ВЫБРАТЬ
		|	СотрудникиОрганизаций.Физлицо
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Ссылка
		|   И СотрудникиОрганизаций.ФизЛицо.ПРГ_НеНачислятьНДФЛ = Ложь"; //Blik 150217 62364
		ДополнительныеПараметрыЗапросаНДФЛ = Новый Структура("Ссылка", Сотрудник);
		СтруктураПоиска = Новый Структура("ФизЛицо", ОбщегоНазначенияЗК.ПолучитьЗначениеРеквизита(Сотрудник,"ФизЛицо"));
		Для каждого ТабличнаяЧасть Из МассивТаблиц Цикл
			МассивСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаТабличнойЧасти Из МассивСтрок Цикл
				ТабличнаяЧасть.Удалить(СтрокаТабличнойЧасти);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// получение результата НДФЛ по ставке 13 процентов
	ДанныеНДФЛ = ПроведениеРасчетов.ПолучитьДанныеНДФЛПоРегистратору(Неопределено, Неопределено, ПериодРегистрации, Организация, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, Ссылка, СписокФизлицТекст, ДополнительныеПараметрыЗапросаНДФЛ, Ложь, КомментироватьРасчет, Ложь, ДоходыИзДокумента, СтруктураДанныхДляПромежуточногоРасчета.Налоги, СтруктураДанныхДляПромежуточногоРасчета.Вычеты, Истина);
	Если ДанныеНДФЛ <> Неопределено Тогда
		
		Для каждого Физлицо Из МассивФизлиц Цикл
			СтрокаИсключение = ДатыВыплаты.Найти(Физлицо,"ФизЛицо");
			ПроведениеРасчетов.ВписатьПромежуточныйНДФЛвДокумент(НДФЛ, ДанныеНДФЛ.Скопировать(ДанныеНДФЛ.НайтиСтроки(Новый Структура("Физлицо",Физлицо))), ?(СтрокаИсключение = Неопределено, ВыборкаПоШапкеДокумента.ДатаВыплатыДохода, СтрокаИсключение.ДатаВыплатыДохода), МесяцыПолученияДохода);
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры  // РассчитатьНДФЛ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


#Если ТолстыйКлиентОбычноеПриложение Тогда

// Формирует запрос по документу и связанным регистрам сведений
//
// Параметры: 
//	Режим	- строка, может принимать значения:
//				"ПоРеквизитамДокумента"
//				"ПоТабличнойЧастиДокумента"
//
// Возвращаемое значение:
//	Результат запроса с данными об организации или о работниках из табличной части
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
		
		Запрос.Текст = ФормированиеПечатныхФормЗК.ПолучитьТекстЗапросаПоОтветственнымЛицам(
			"ДатаДокумента",
			"ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
			|И СтруктурнаяЕдиница = &СтруктурнаяЕдиница");
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПремииРаботниковОрганизации.Дата КАК ДатаДок,
		|	ПремииРаботниковОрганизации.Номер КАК НомерДок,
		|	ПремииРаботниковОрганизации.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ПремииРаботниковОрганизации.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ОтветственныеЛицаОрганизаций.Должность КАК ДолжностьРуководителя,
		|	ОтветственныеЛицаОрганизаций.НаименованиеОтветственногоЛица КАК ФИОРуководителя,
		|	ПремииРаботниковОрганизации.ВидРасчета.Наименование КАК РасчетСтрокой,
		|	ПремииРаботниковОрганизации.Организация.Префикс
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций КАК ПремииРаботниковОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОбОтветственномЛице КАК ОтветственныеЛицаОрганизаций
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ПремииРаботниковОрганизации.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда

		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество, ПремииРаботниковОрганизацииНачисления.Сотрудник.Наименование) КАК Работник,
		|	ПремииРаботниковОрганизацииНачисления.Физлицо.Пол,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаДокумента
		|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения.Наименование
		|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации.Наименование
		|	КОНЕЦ КАК ПодразделениеРаботника,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаДокумента
		|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.Наименование
		|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.Наименование
		|	КОНЕЦ КАК Должность,
		|	ПремииРаботниковОрганизацииНачисления.Показатель1,
		|	ПремииРаботниковОрганизацииНачисления.Показатель2,
		|	ПремииРаботниковОрганизацииНачисления.Показатель3,
		|	ПремииРаботниковОрганизацииНачисления.Показатель4,
		|	ПремииРаботниковОрганизацииНачисления.Показатель5,
		|	ПремииРаботниковОрганизацииНачисления.Показатель6,
		|	ПремииРаботниковОрганизацииНачисления.Результат КАК Величина,
		|	ПремииРаботниковОрганизацииНачисления.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацииНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&ДатаДокумента,
		|				Сотрудник В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПремииРаботниковОрганизацииНачисления.Сотрудник
		|					ИЗ
		|						Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацииНачисления
		|					ГДЕ
		|						ПремииРаботниковОрганизацииНачисления.Ссылка = &ДокументСсылка)) КАК РаботникиОрганизацииСрезПоследних
		|		ПО ПремииРаботниковОрганизацииНачисления.Сотрудник = РаботникиОрганизацииСрезПоследних.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				Физлицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПремииРаботниковОрганизацииНачисления.Сотрудник.Физлицо
		|					ИЗ
		|						Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацииНачисления
		|					ГДЕ
		|						ПремииРаботниковОрганизацииНачисления.Ссылка = &ДокументСсылка)) КАК ФИОФизЛиц
		|		ПО ПремииРаботниковОрганизацииНачисления.Сотрудник.Физлицо = ФИОФизЛиц.ФизЛицо
		|ГДЕ
		|	ПремииРаботниковОрганизацииНачисления.Ссылка = &ДокументСсылка
		|	И (НЕ ПремииРаботниковОрганизацииНачисления.Сторно)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПремииРаботниковОрганизацииНачисления.НомерСтроки";

	Иначе
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()
	
// Функция формирует табличный документ с печатной формой "Т-11а",
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьТ11а()

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПремииРаботниковОрганизации_Т11а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

	// получаем данные для печати
	ВыборкаДляШапкиИПодвала = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = ВыборкаРаботники.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т11а");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка"); // строка работника

	ВыводитьИтоги = Ложь;
	
	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапкиИПодвала.Следующий() Тогда 
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапкиИПодвала); // Для подвала
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтрок = 0;
	ПодИтогСтраницы = 0;
	ИтогДокумента = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		РезультатСклонения = "";
		Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВыборкаРаботники.Работник, 4,ВыборкаРаботники.ФизЛицоПол, РезультатСклонения) Тогда
			ОбластьМакета.Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		ПодИтогСтраницы = ПодИтогСтраницы + ВыборкаРаботники.Величина;
		ИтогДокумента = ИтогДокумента + ВыборкаРаботники.Величина;
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;

		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ПодИтогСтраницы = 0;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ11а()

// Функция формирует табличный документ с печатной формой "Т-11",
//
// Возвращаемое значение:
//	Табличный документ - печатная форма
//
Функция ПечатьТ11()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПремииРаботниковОрганизации_Т11";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать();

	// запоминаем области макета
	Макет = ПолучитьМакет("Т11");
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		ОбластьМакета.Параметры.Заполнить(ВыборкаДляШапки); // название вида расчета
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
		
		ВыводитьДатуОзнакомленияСПриказом = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах");
		Если Не ВыводитьДатуОзнакомленияСПриказом Тогда
			ОбластьМакетаПодвал.Параметры.ДатаДок = ФормированиеПечатныхФормЗК.ПустаяДатаВПечатнойФорме();
		КонецЕсли;
		
	КонецЕсли;

	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	СтрокаЧисла = ОбщегоНазначенияЗК.СформироватьСуммуПрописью(1,Валюта);
	Если СтрДлина(СтрокаЧисла) = 4 Тогда
		НазваниеЦелыхЕдиниц = " руб. ";	
		НазваниеДробныхЕдиниц = " коп.)";	
	Иначе
		НазваниеЦелыхЕдиниц = " " + Сред(СтрокаЧисла,6,3) + ". ";	
		НазваниеДробныхЕдиниц = " " + Сред(СтрокаЧисла,Найти(СтрокаЧисла,"00") + 3,3) + ".)";
	КонецЕсли;
	// Начинаем формировать выходной документ
	НомерФормы = 0;
	ПечататьПостфикс = ВыборкаРаботники.Количество() > 1;
	Пока ВыборкаРаботники.Следующий() Цикл

		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		// Шапка документа.
		Если ПечататьПостфикс Тогда
			НомерФормы = НомерФормы + 1;
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + НомерФормы
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВыборкаРаботники);
		
		РезультатСклонения = "";
		Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВыборкаРаботники.Работник, 4,ВыборкаРаботники.ФизЛицоПол, РезультатСклонения) Тогда
			ОбластьМакета.Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВыборкаРаботники.ТабельныйНомер;
		
		Результат = ВыборкаРаботники.Величина;
		ОбластьМакета.Параметры.ПредставлениеВеличины = ОбщегоНазначенияЗК.СформироватьСуммуПрописью(Результат,Валюта);
		Если Результат = 0 Тогда
			ОбластьМакета.Параметры.ПредставлениеВеличиныкр = "(________ руб. ____ коп.)";
		Иначе
			ОбластьМакета.Параметры.ПредставлениеВеличиныкр = "( " + СтрЗаменить(Формат(Результат,"ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧН=' '"),",",НазваниеЦелыхЕдиниц) + НазваниеДробныхЕдиниц;
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;

	Возврат ТабДокумент;

КонецФункции // ПечатьТ11()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//	Режим - режим проведения
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПремииРаботниковОрганизации.Дата,
	|	ПремииРаботниковОрганизации.ПериодРегистрации,
	|	ПремииРаботниковОрганизации.Организация,
	|	ВЫБОР
	|		КОГДА ПремииРаботниковОрганизации.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
	|			ТОГДА ПремииРаботниковОрганизации.Организация
	|		ИНАЧЕ ПремииРаботниковОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ПремииРаботниковОрганизации.Организация КАК ОбособленноеПодразделение,
	|	ПремииРаботниковОрганизации.ВидРасчета,
	|	ПремииРаботниковОрганизации.ЧислоМесяцев,
	|	ПремииРаботниковОрганизации.ДатаНачалаБП КАК БазовыйПериодНачало,
	|	ПремииРаботниковОрганизации.ДатаОкончанияБП КАК БазовыйПериодКонец,
	|	ПремииРаботниковОрганизации.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	ПремииРаботниковОрганизации.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	ПремииРаботниковОрганизации.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ПремииРаботниковОрганизации.Ссылка,
	|	ПремииРаботниковОрганизации.ВидРасчета.ВидПремии КАК ВидПремии,
	|	ПремииРаботниковОрганизации.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	ПремииРаботниковОрганизации.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	НЕ ПремииРаботниковОрганизации.ВидРасчета.ЯвляетсяДоходомВНатуральнойФорме КАК РегистрироватьСуммыКВыплате,
	|	ПремииРаботниковОрганизации.ДатаВыплатыДохода,
	|	ПремииРаботниковОрганизации.ВыплачиватьМежрасчетно
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций КАК ПремииРаботниковОрганизации
	|ГДЕ
	|	ПремииРаботниковОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Начисления" документа
//
// Параметры: 
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента, Сотрудник = Неопределено)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса

	Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("НачалоПериодаРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации",	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаРегистрации",			?(Дата > КонецМесяца(ПериодРегистрации),КонецМесяца(ПериодРегистрации),?(Дата < ПериодРегистрации,ПериодРегистрации,Дата)));
	Запрос.УстановитьПараметр("Принят",						Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	
	Если Модифицированность() Тогда
		Запрос.УстановитьПараметр("Начисления",	Начисления);
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент",	ПерерассчитываемыйДокумент);
		ТекстЗапрос = 
		"ВЫБРАТЬ
		|	СтрокиНачисления.Сотрудник,
		|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
		|	СтрокиНачисления.Показатель1,
		|	СтрокиНачисления.Показатель2,
		|	СтрокиНачисления.Показатель3,
		|	СтрокиНачисления.Показатель4,
		|	СтрокиНачисления.Показатель5,
		|	СтрокиНачисления.Показатель6,
		|	СтрокиНачисления.Результат,
		|	СтрокиНачисления.Авторасчет,
		|	СтрокиНачисления.Сторно,
		|	&ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент
		|ПОМЕСТИТЬ ВТСтрокиНачисления
		|ИЗ
		|	&Начисления КАК СтрокиНачисления
		|ГДЕ
		|	&УсловиеНаСотрудникТекст";
	Иначе
		Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
		ТекстЗапрос = 
		"ВЫБРАТЬ
		|	СтрокиНачисления.Сотрудник,
		|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
		|	СтрокиНачисления.Показатель1,
		|	СтрокиНачисления.Показатель2,
		|	СтрокиНачисления.Показатель3,
		|	СтрокиНачисления.Показатель4,
		|	СтрокиНачисления.Показатель5,
		|	СтрокиНачисления.Показатель6,
		|	СтрокиНачисления.Результат,
		|	СтрокиНачисления.Авторасчет,
		|	СтрокиНачисления.Сторно,
		|	СтрокиНачисления.Ссылка.ПерерассчитываемыйДокумент
		|ПОМЕСТИТЬ ВТСтрокиНачисления
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций.Начисления КАК СтрокиНачисления
		|ГДЕ
		|	СтрокиНачисления.Ссылка = &ДокументСсылка
		|	И &УсловиеНаСотрудникТекст";
	КонецЕсли;
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.Текст = СтрЗаменить(ТекстЗапрос, "&УсловиеНаСотрудникТекст", "СтрокиНачисления.Сотрудник В (&Сотрудник)")
	Иначе
		Запрос.УстановитьПараметр("УсловиеНаСотрудникТекст", Истина); 
		Запрос.Текст = ТекстЗапрос;

	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиНачисления.Сотрудник,
	|	СтрокиНачисления.Сотрудник.Физлицо КАК Физлицо,
	|	СтрокиНачисления.НомерСтроки КАК НомерСтроки,
	|	СтрокиНачисления.Показатель1,
	|	СтрокиНачисления.Показатель2,
	|	СтрокиНачисления.Показатель3,
	|	СтрокиНачисления.Показатель4,
	|	СтрокиНачисления.Показатель5,
	|	СтрокиНачисления.Показатель6,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуПослеРегистрации.ПричинаИзмененияСостояния = &Принят
	|			ТОГДА ДанныеПоРаботникуПослеРегистрации.ПодразделениеОрганизации
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <= &ДатаРегистрации
	|						И ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА ДанныеПоРаботникуДоРегистрации.ПодразделениеОрганизацииЗавершения
	|				ИНАЧЕ ДанныеПоРаботникуДоРегистрации.ПодразделениеОрганизации
	|			КОНЕЦ
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	СтрокиНачисления.Результат,
	|	СтрокиНачисления.Авторасчет,
	|	СтрокиНачисления.Сторно,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сторно
	|			ТОГДА СтрокиНачисления.ПерерассчитываемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	ВЫБОР
	|		КОГДА ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <= &ДатаРегистрации
	|				И ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И ДанныеПоРаботникуДоРегистрации.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.ПериодЗавершения, ДЕНЬ, -1) < &НачалоПериодаРегистрации
	|						ТОГДА &ДатаРегистрации
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.ПериодЗавершения, ДЕНЬ, -1)
	|				КОНЕЦ
	|		КОГДА ДанныеПоРаботникуДоРегистрации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			ТОГДА ВЫБОР
	|					КОГДА ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.Период, ДЕНЬ, -1) < &НачалоПериодаРегистрации
	|						ТОГДА &ДатаРегистрации
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоРегистрации.Период, ДЕНЬ, -1)
	|				КОНЕЦ
	|		КОГДА ДанныеПоРаботникуПослеРегистрации.ПричинаИзмененияСостояния = &Принят
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеПоРаботникуПослеРегистрации.Период > &КонецПериодаРегистрации
	|						ТОГДА &ДатаРегистрации
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ДанныеПоРаботникуПослеРегистрации.ПериодЗавершения <= &ДатаРегистрации
	|									И ДанныеПоРаботникуДоРегистрации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ТОГДА ДанныеПоРаботникуПослеРегистрации.ПериодЗавершения
	|							ИНАЧЕ ДанныеПоРаботникуПослеРегистрации.Период
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ &ДатаРегистрации
	|	КОНЕЦ КАК ДатаРегистрации,
	|	ВЫБОР
	|		КОГДА СтрокиНачисления.Сотрудник.Организация = &ГоловнаяОрганизация
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации
	|ИЗ
	|	ВТСтрокиНачисления КАК СтрокиНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаРегистрации,
	|				Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ПремииРаботниковОрганизацииНачисления.Сотрудник
	|					ИЗ
	|						ВТСтрокиНачисления КАК ПремииРаботниковОрганизацииНачисления)) КАК ДанныеПоРаботникуДоРегистрации
	|		ПО (ДанныеПоРаботникуДоРегистрации.Сотрудник = СтрокиНачисления.Сотрудник)
 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПервых(
	|				&ДатаРегистрации,
	|				Сотрудник В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ПремииРаботниковОрганизацииНачисления.Сотрудник
	|					ИЗ
	|						ВТСтрокиНачисления КАК ПремииРаботниковОрганизацииНачисления)) КАК ДанныеПоРаботникуПослеРегистрации
	|		ПО (ДанныеПоРаботникуПослеРегистрации.Сотрудник = СтрокиНачисления.Сотрудник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачисления()

Функция СформироватьЗапросПоВзаиморасчетам()

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("Ссылка" , Ссылка);
	 //Blik 61922 010217 в запрос добавлено условие по НДФЛ
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.ФизЛицо,
	|	СУММА(Данные.Результат) КАК Результат
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтрокиНачисления.Сотрудник.Физлицо КАК ФизЛицо,
	|		СтрокиНачисления.Результат КАК Результат
	|	ИЗ
	|		Документ.ПремииРаботниковОрганизаций.Начисления КАК СтрокиНачисления
	|	ГДЕ
	|		СтрокиНачисления.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтрокиНДФЛ.ФизЛицо,
	|		-СтрокиНДФЛ.Налог + СтрокиНДФЛ.ЗачтеноАвансовыхПлатежей
	|	ИЗ
	|		Документ.ПремииРаботниковОрганизаций.НДФЛ КАК СтрокиНДФЛ
	|	ГДЕ
	|		СтрокиНДФЛ.Ссылка = &Ссылка) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.ФизЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(Данные.Результат) <> 0";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоВзаиморасчетам()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация, по которой выполняются начисления!"), Отказ, Заголовок);
	КонецЕсли;

	//  ВидРасчета
	ЕстьВидРасчета = ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ВидРасчета);
	Если Не ЕстьВидРасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан вид премии!", Отказ, Заголовок);
	КонецЕсли;

	//  Число месяцев
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ЧислоМесяцев) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано число месяцев за которые начисляется премия!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаВыплатыДохода
	Если ВыборкаПоШапкеДокумента.ВыплачиватьМежрасчетно И Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаВыплатыДохода) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана предполагаемая дата выплаты начисленного дохода!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!"), Отказ, Заголовок);
	КонецЕсли;

	Если ЕстьВидРасчета Тогда
		
		Если ВыборкаПоШапкеДокумента.ВидПремии = Перечисления.ВидыПремии.НеПремия Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("В качестве премии указан вид расчета, не описанный как премия!", Отказ, Заголовок);
			
		Иначе
			ЕстьДатаНачалаБП	= ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.БазовыйПериодНачало);
			ЕстьДатаОкончанияБП	= ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.БазовыйПериодКонец);
			
			Если ВыборкаПоШапкеДокумента.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
				
				Если Не ЕстьДатаНачалаБП Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата начала базового периода!", Отказ, Заголовок);
				КонецЕсли;
				
				Если Не ЕстьДатаОкончанияБП Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата окончания базового периода!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ВидПремии = Перечисления.ВидыПремии.ГодоваяПремия Тогда
			
			Если ВыборкаПоШапкеДокумента.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
				
				Если Не ЕстьДатаНачалаБП Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата начала базового периода!", Отказ, Заголовок);
				КонецЕсли;
				
				Если Не ЕстьДатаОкончанияБП Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата окончания базового периода!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если ЕстьДатаНачалаБП И ЕстьДатаОкончанияБП Тогда
				
				Если Год(ВыборкаПоШапкеДокумента.БазовыйПериодНачало) <> Год(ВыборкаПоШапкеДокумента.БазовыйПериодКонец) Тогда
					
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Для годовой премии дата начала и окончания базового периода должны быть в пределах одного года!", Отказ, Заголовок)
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// По строке выборок из результатов запроса по документу формируем движения по регистрам
//
// Параметры:
//	ВыборкаПоШапкеДокумента					- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента				- спозиционированная на определеной строке выборка 
//											  из результата запроса к ТЧ документа, 
//	СтруктураПроведенияПоРегистрамРасчета	- структура, содержащая имена регистров 
//											  расчета по которым надо проводить документ,
//	СтруктураПараметров						- структура параметров проведения,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамРасчета(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, 
		  НаборЗаписей, СтруктураПараметров = Неопределено)

	Движение = НаборЗаписей.Добавить();
	
	// Свойства
	Движение.ПериодРегистрации			= ВыборкаПоСтрокамДокумента.ДатаРегистрации;
	Движение.ВидРасчета					= ВыборкаПоШапкеДокумента.ВидРасчета;
	Движение.БазовыйПериодНачало		= ВыборкаПоШапкеДокумента.БазовыйПериодНачало;
	Движение.БазовыйПериодКонец			= КонецДня(ВыборкаПоШапкеДокумента.БазовыйПериодКонец);
	Движение.Сторно						= ВыборкаПоСтрокамДокумента.Сторно;
	
	// Измерения
	Движение.Сотрудник					= ВыборкаПоСтрокамДокумента.Сотрудник;
	Движение.Физлицо					= ВыборкаПоСтрокамДокумента.Физлицо;
	Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
	
	// Ресурсы
	Движение.Результат					= ВыборкаПоСтрокамДокумента.Результат;
	
	// Реквизиты
	Если ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
		Движение.Показатель1			= ВыборкаПоСтрокамДокумента.Результат;
	Иначе
		Движение.Показатель1			= ВыборкаПоСтрокамДокумента.Показатель1;
		Движение.Показатель2			= ВыборкаПоСтрокамДокумента.Показатель2;
		Движение.Показатель3			= ВыборкаПоСтрокамДокумента.Показатель3;
		Движение.Показатель4			= ВыборкаПоСтрокамДокумента.Показатель4;
		Движение.Показатель5			= ВыборкаПоСтрокамДокумента.Показатель5;
		Движение.Показатель6			= ВыборкаПоСтрокамДокумента.Показатель6;		
	КонецЕсли;
	Движение.ЧислоМесяцев				= ВыборкаПоШапкеДокумента.ЧислоМесяцев;
	Движение.Авторасчет					= ВыборкаПоСтрокамДокумента.Авторасчет;
	Движение.ПодразделениеОрганизации	= ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации;
	Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.ОбособленноеПодразделение;
	Движение.СторнируемыйДокумент		= ВыборкаПоСтрокамДокумента.СторнируемыйДокумент;

КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамРасчета()

Процедура ДобавитьСтрокуВДвиженияПоВзаиморасчетам(ВыборкаПоШапкеДокумента, ВыборкаПоТЧ)
	
	Движение = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
	
	// Свойства
	Движение.Период					= КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
	
	// Измерения
	Движение.Организация			= ВыборкаПоШапкеДокумента.Организация;
	Движение.ФизЛицо				= ВыборкаПоТЧ.ФизЛицо;
	Движение.ПериодВзаиморасчетов	= ВыборкаПоШапкеДокумента.ПериодРегистрации;
	
	// Ресурсы
	Движение.СуммаВзаиморасчетов	= ВыборкаПоТЧ.Результат;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

// получает доходы НДФЛ по табличным частям с доходами
// Параметры:
//		ВыборкаПоШапкеДокумента - спозиционированная выборка по шапке документа
//		НаборЗаписей - таблица значений или набор записей рег-ра - "приемник" сведений о доходах
//		
Процедура СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, НаборНачислений, НаборЗаписей, ФизлицаСписок = Неопределено)
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КодДоходаНДФЛ) Тогда
		Возврат
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамФизлица", ФизлицаСписок);
	Запрос.УстановитьПараметр("парамНачисления", НаборНачислений);
	Запрос.УстановитьПараметр("парамДатаВыплатыДохода", ?(ВыборкаПоШапкеДокумента.ВыплачиватьМежрасчетно, ВыборкаПоШапкеДокумента.ДатаВыплатыДохода, КонецМесяца(ВыборкаПоШапкеДокумента.ПериодРегистрации)));
	Запрос.УстановитьПараметр("парамПериодРегистрации", ВыборкаПоШапкеДокумента.ПериодРегистрации);
	Запрос.УстановитьПараметр("ДатыВыплаты", ДатыВыплаты);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДатыВыплаты.Физлицо,
	|	ДатыВыплаты.ДатаВыплатыДохода
	|ПОМЕСТИТЬ ВТДатыВыплаты
	|ИЗ
	|	&ДатыВыплаты КАК ДатыВыплаты
	|ГДЕ
	|	&УсловиеНаФизлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.НомерСтроки КАК НомерСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо,
	|	Начисления.ВидРасчета,
	|	&парамПериодРегистрации КАК ДатаНачала,
	|	&парамПериодРегистрации КАК ДатаОкончания,
	|	Начисления.Результат КАК СуммаДохода,
	|	Начисления.ПодразделениеОрганизации,
	|	Начисления.СторнируемыйДокумент,
	|	&парамПериодРегистрации КАК ПериодРегистрации,
	|	ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка) КАК КодВычета,
	|	0 КАК СуммаВычета,
	|	0 КАК КоличествоДетей,
	|	Начисления.Сторно
	|ПОМЕСТИТЬ ВТДополнительныеНачисления
	|ИЗ
	|	&парамНачисления КАК Начисления
	|ГДЕ
	|	&УсловиеНаФизлицо";
	Если Не ЗначениеЗаполнено(ФизлицаСписок) Тогда
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"&УсловиеНаФизлицо","Истина");	
	Иначе
		Запрос.Текст = СтрЗаменить(ТекстЗапроса,"&УсловиеНаФизлицо","Физлицо В (&парамФизлица)");	
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""Таблица"" КАК ИмяТЧ,
	|	ДополнительныеНачисления.НомерСтроки,
	|	ДополнительныеНачисления.Сотрудник,
	|	ДополнительныеНачисления.Физлицо,
	|	ДополнительныеНачисления.ВидРасчета,
	|	ДополнительныеНачисления.ВидРасчета.КодДоходаНДФЛ КАК КодДохода,
	|	ДополнительныеНачисления.ДатаНачала,
	|	ДополнительныеНачисления.ДатаОкончания,
	|	ДополнительныеНачисления.СуммаДохода,
	|	ДополнительныеНачисления.ПодразделениеОрганизации,
	|	ДополнительныеНачисления.СторнируемыйДокумент,
	|	ДополнительныеНачисления.ПериодРегистрации,
	|	ЕСТЬNULL(ДатыВыплаты.ДатаВыплатыДохода, &парамДатаВыплатыДохода) КАК ДатаВыплатыДохода,
	|	ДополнительныеНачисления.КодВычета,
	|	ДополнительныеНачисления.СуммаВычета,
	|	ДополнительныеНачисления.КоличествоДетей,
	|	ДополнительныеНачисления.Сторно
	|ПОМЕСТИТЬ ВТСторноНачисления
	|ИЗ
	|	ВТДополнительныеНачисления КАК ДополнительныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыВыплаты КАК ДатыВыплаты
	|		ПО ДополнительныеНачисления.Физлицо = ДатыВыплаты.Физлицо
	|ГДЕ
	|	ДополнительныеНачисления.ВидРасчета.КодДоходаНДФЛ <> ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка)";
	Запрос.Выполнить();
	
	ДатаРегистрации = ?(Дата > КонецМесяца(ПериодРегистрации),КонецМесяца(ПериодРегистрации),?(Дата < ПериодРегистрации,ПериодРегистрации,Дата));
	
	ПроведениеРасчетов.СформироватьДоходыПоКодамНДФЛ(НаборЗаписей, Запрос.МенеджерВременныхТаблиц, ВыборкаПоШапкеДокумента, ДатаРегистрации);
	
	Если ВыборкаПоШапкеДокумента.ВыплачиватьМежрасчетно Тогда
		Для каждого Движение Из НаборЗаписей Цикл
			Движение.ЗарегистрированоДляПромежуточногоРасчета = Истина;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // СформироватьДоходыПоКодамНДФЛ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	//структуры, содержащие имена регистров, по которым надо проводить документ
	Перем СтруктураПроведенияПоРегистрамРасчета;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);

	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда
			
			// получим реквизиты табличной части
			ВыборкаПоНачислениям = СформироватьЗапросПоНачисления(ВыборкаПоШапкеДокумента).Выбрать();

			Пока ВыборкаПоНачислениям.Следующий() Цикл

				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок);

				Если НЕ Отказ Тогда

					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамРасчета(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Движения.ДополнительныеНачисленияРаботниковОрганизаций);

				КонецЕсли;

			КонецЦикла;
			
			ПроведениеРасчетов.СформироватьПредоставленныеВычетыПоНДФЛ(ЭтотОбъект, ВыборкаПоШапкеДокумента, Ложь, Отказ, Заголовок);
				
			Если НЕ Отказ Тогда

				//Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КодДоходаНДФЛ) Тогда
				//	
				//	// перед тем как начать расчет, сформированные движения надо записать - 
				//	// по ним чуть позже будем получать дополнительные данные для расчетов
				//	Движения.ДополнительныеНачисленияРаботниковОрганизаций.Записать();
				//	
				//	СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, Движения.НДФЛСведенияОДоходах)

				//	
				//КонецЕсли;
				
				Если ВыборкаПоШапкеДокумента.РегистрироватьСуммыКВыплате Тогда
					Доходы = СформироватьЗапросПоВзаиморасчетам().Выбрать();
					Пока Доходы.Следующий() Цикл
						ДобавитьСтрокуВДвиженияПоВзаиморасчетам(ВыборкаПоШапкеДокумента, Доходы);
					КонецЦикла;
				КонецЕсли;
				
				СформироватьДоходыПоКодамНДФЛ(ВыборкаПоШапкеДокумента, Движения.ДополнительныеНачисленияРаботниковОрганизаций.Выгрузить(), Движения.НДФЛСведенияОДоходах);
				ПроведениеРасчетов.СформироватьЗачтенныеАвансыПоНДФЛ(ЭтотОбъект, ВыборкаПоШапкеДокумента, Ложь);
				УпрощенныйУчетНДФЛ = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), ВыборкаПоШапкеДокумента.Организация, "УпрощенныйУчетНДФЛ");
				Для каждого СтрокаТЧ Из НДФЛ Цикл
					ПроведениеРасчетов.ДобавитьСтрокиИсчисленногоУдержанногоНДФЛ(СтрокаТЧ, ВыборкаПоШапкеДокумента, Ложь, Движения.НДФЛРасчетыСБюджетом, УпрощенныйУчетНДФЛ) 
				КонецЦикла;
				ПроведениеРасчетовДополнительный.УточнитьУчетНалогаПоЦеннымБумагам(Движения, Отказ);
				Если УпрощенныйУчетНДФЛ И Движения.НДФЛРасчетыСБюджетом.Количество() > 0 Тогда
					Если ДатаВыплатыДохода >= ПроведениеРасчетов.ДатаИзмененияСроковУплатыНалога() Тогда
						ПроведениеРасчетов.ВписатьДатыВыплатыСрокУплатыВУдержанныеНалоги(Движения.НДФЛРасчетыСБюджетом, ДатаВыплатыДохода, , ДатыВыплаты.Выгрузить());
					КонецЕсли;
					Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Загрузить(ПроведениеРасчетов.РасчетыНалоговогоАгентаПоУдержанномуНДФЛ(Движения.НДФЛРасчетыСБюджетом.Выгрузить()))
				КонецЕсли;
				
				ПроведениеРасчетов.ДобавитьДвиженияПериодическихВыплат(Движения, Ссылка);
				
				// выполним удаление перерасчетов исправленного документа
				Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
					ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
				КонецЕсли;
			
			КонецЕсли;
			
			//Если НЕ Отказ Тогда
			//	ПроведениеРасчетов.ДобавитьДвиженияПериодическихВыплат(Движения, Ссылка);
			//КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Начисления);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	Если Не ВыплачиватьМежрасчетно Тогда
		НДФЛ.Очистить();	
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ЗаполнитьПоказателиСтроки(СтрокаТабличнойЧасти, ЗаполняемыеПоказатели = Неопределено) Экспорт
	
	Если ЗаполняемыеПоказатели <> Неопределено 
		И ПустаяСтрока(ЗаполняемыеПоказатели) Тогда
		// Ничего не нужно заполнять
		Возврат;
	КонецЕсли;
	
	Сотрудники = Новый Массив;
	Сотрудники.Добавить(СтрокаТабличнойЧасти.Сотрудник);
	
	ЗначенияПоказателей = ЗаполнениеДокументовЗК.ПоказателиНачисленияУдержания(Сотрудники, ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация), ВидРасчета, ПериодРегистрации);
	
	Если ЗначенияПоказателей.Количество() > 0 Тогда
		Если ЗаполняемыеПоказатели <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияПоказателей[0], ЗаполняемыеПоказатели);
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ЗначенияПоказателей[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
