Перем мУдалятьДвижения;


Функция СобратьТаблицыВзаиморасчетов(МассивТаблиц)
	ИтоговаяТаблица = Движения.ВзаиморасчетыУСН.Выгрузить();
	ИтоговаяТаблица.Очистить();
	
	Для Каждого Таблица Из МассивТаблиц Цикл
		Если Таблица.Колонки.Найти("ДоходЕНВД") = Неопределено Тогда
			Таблица.Колонки.Добавить("ДоходЕНВД");
			Таблица.ЗаполнитьЗначения(0, "ДоходЕНВД");
		КонецЕсли;
		Если Таблица.Колонки.Найти("ДоходКомитента") = Неопределено Тогда
			Таблица.Колонки.Добавить("ДоходКомитента");
			Таблица.ЗаполнитьЗначения(0, "ДоходКомитента");
		КонецЕсли;
		Если Таблица.Колонки.Найти("РасчетныйДокумент") = Неопределено Тогда
			Таблица.Колонки.Добавить("РасчетныйДокумент");
			Таблица.ЗаполнитьЗначения(Неопределено, "РасчетныйДокумент");
		КонецЕсли;
		Если Таблица.Колонки.Найти("Сделка") = Неопределено Тогда
			Таблица.Колонки.Добавить("Сделка");
			Таблица.ЗаполнитьЗначения(Неопределено, "Сделка");
		КонецЕсли;
		Для Каждого Строка Из Таблица Цикл
			НоваяСтрока = ИтоговаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			Если Строка.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			Иначе
				НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Недостающие поля.
	ИтоговаяТаблица.ЗаполнитьЗначения(Организация, "Организация");
	ИтоговаяТаблица.ЗаполнитьЗначения(Дата, "Период");
	ИтоговаяТаблица.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ИтоговаяТаблица.ЗаполнитьЗначения(Истина, "Активность");
	
	Возврат ИтоговаяТаблица;
	
КонецФункции

Функция СобратьТаблицыПартийНаСкладах(Таблица)
	
	ИтоговаяТаблица = Движения.ПартииТоваровНаСкладахНалоговыйУчет.Выгрузить();
	ИтоговаяТаблица.Очистить();
	
	Для Каждого Строка Из Таблица Цикл
		НоваяСтрока = ИтоговаяТаблица.Добавить();
		Для Каждого Кол Из Таблица.Колонки Цикл
			Если ПустаяСтрока(Кол.Имя) ИЛИ Кол.Имя = "QuieryId" Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока[Кол.Имя] = Строка[Кол.Имя];
		КонецЦикла;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	КонецЦикла;
	
	//Недостающие поля.
	ИтоговаяТаблица.ЗаполнитьЗначения(Организация, "Организация");
	ИтоговаяТаблица.ЗаполнитьЗначения(Дата, "Период");
	ИтоговаяТаблица.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ИтоговаяТаблица.ЗаполнитьЗначения(Истина, "Активность");
	ИтоговаяТаблица.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	Возврат ИтоговаяТаблица;
	
КонецФункции

Функция СобратьТаблицыПартийПереданных(Таблица)
	
	ИтоговаяТаблица = Движения.ПартииТоваровПереданныеНалоговыйУчет.Выгрузить();
	ИтоговаяТаблица.Очистить();
	
	Для Каждого Строка Из Таблица Цикл
		НоваяСтрока = ИтоговаяТаблица.Добавить();
		Для Каждого Кол Из Таблица.Колонки Цикл
			Если ПустаяСтрока(Кол.Имя) ИЛИ Кол.Имя = "QuieryId" Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока[Кол.Имя] = Строка[Кол.Имя];
		КонецЦикла;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
	КонецЦикла;
	
	//Недостающие поля.
	ИтоговаяТаблица.ЗаполнитьЗначения(Организация, "Организация");
	ИтоговаяТаблица.ЗаполнитьЗначения(Дата, "Период");
	ИтоговаяТаблица.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ИтоговаяТаблица.ЗаполнитьЗначения(Истина, "Активность");
	
	Возврат ИтоговаяТаблица;
	
КонецФункции

Функция СобратьТаблицыРасходов(МассивТаблиц)
	
	ИтоговаяТаблица = Движения.РасходыПриУСН.Выгрузить();
	ИтоговаяТаблица.Очистить();
	
	Для Каждого Таблица Из МассивТаблиц Цикл
		Для Каждого Строка Из Таблица Цикл
			Если НЕ Таблица.Колонки.Найти("Контрагент") = Неопределено Тогда
				Если ТипЗнч(Строка.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
					Строка.ДоговорКонтрагента = Строка.Контрагент;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока = ИтоговаяТаблица.Добавить();
			Для Каждого Кол Из Таблица.Колонки Цикл
				Если ПустаяСтрока(Кол.Имя) ИЛИ Кол.Имя = "QuieryId" ИЛИ Кол.Имя = "Контрагент" Тогда
					Продолжить;
				КонецЕсли; 
				НоваяСтрока[Кол.Имя] = Строка[Кол.Имя];
			КонецЦикла;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		КонецЦикла;
	КонецЦикла;
	
	//Недостающие поля.
	ИтоговаяТаблица.ЗаполнитьЗначения(Организация, "Организация");
	ИтоговаяТаблица.ЗаполнитьЗначения(Дата, "Период");
	ИтоговаяТаблица.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ИтоговаяТаблица.ЗаполнитьЗначения(Истина, "Активность");
	
	Возврат ИтоговаяТаблица;
	
КонецФункции

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ПроверитьЗаполнениеТабличныхЧастей(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураПолей = Новый Структура("ВидЗадолженности, ДоговорКонтрагента, РасчетныйДокумент");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВзаиморасчетыСПоставщиками", СтруктураПолей, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура("ВидЗадолженности, ДоговорКонтрагента, РасчетныйДокумент");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВзаиморасчетыСПокупателями", СтруктураПолей, Отказ, Заголовок);
		
	СтруктураПолей = Новый Структура("ВидЗадолженности, Подотчетник, РасчетныйДокумент");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВзаиморасчетыСПодотчетниками", СтруктураПолей, Отказ, Заголовок);
		
	СтруктураПолей = Новый Структура("ВидЗадолженности, Работник");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВзаиморасчетыССотрудниками", СтруктураПолей, Отказ, Заголовок);
		
	СтруктураПолей = Новый Структура("ВидЗадолженности, СчетРасчетовПоНалогу");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВзаиморасчетыПоНалогам", СтруктураПолей, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура("Номенклатура, СчетУчета, ДокументОприходования");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПартииТоваровНаСкладах", СтруктураПолей, Отказ, Заголовок);
		
	СтруктураПолей = Новый Структура("Номенклатура, СчетУчета, ДоговорКонтрагента, ДокументОприходования, ДокументПередачи");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПартииТоваровПереданные", СтруктураПолей, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура("Номенклатура, СчетУчета, ДоговорКонтрагента, ДокументОприходования, СтатусыПартийУСН, РасчетныйДокумент, СтатусыОплатыРасходовУСН, Валюта");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасходыНоменклатура", СтруктураПолей, Отказ, Заголовок);

	СтруктураПолей = Новый Структура("НМА, ДоговорКонтрагента, РасчетныйДокумент, Валюта");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасходыНМА", СтруктураПолей, Отказ, Заголовок);

    СтруктураПолей = Новый Структура("ДоговорКонтрагента, РасчетныйДокумент, Валюта");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасходыУслуги", СтруктураПолей, Отказ, Заголовок);
    
	СтруктураПолей = Новый Структура("РБП, ДоговорКонтрагента, РасчетныйДокумент, СтатусыОплатыРасходовУСН, Валюта");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасходыРБП", СтруктураПолей, Отказ, Заголовок);
    	
	СтруктураПолей = Новый Структура("Работник");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасходыЗарплата", СтруктураПолей, Отказ, Заголовок);
		
	СтруктураПолей = Новый Структура("СчетРасчетовПоНалогу");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасходыНалоги", СтруктураПолей, Отказ, Заголовок);
		
КонецПроцедуры

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, 
							ТаблицаВзаиморасчеты, ТаблицаПартийНаСкладах, ТаблицаПартийПереданных, ТаблицаРасходы, 
							КорректировкаСведенийОС, КорректировкаСведенийНМА, Отказ, Заголовок)
	
	//ПО ВЗАИМОРАСЧЕТАМ УСН
	НаборДвижений = Движения.ВзаиморасчетыУСН;
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаВзаиморасчеты;
	
	Если Не Отказ Тогда
		Движения.ВзаиморасчетыУСН.ВыполнитьДвижения();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
	//ПО ПАРТИОННОМУ УЧЕТУ УСН
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, Отказ, ТаблицаПартийНаСкладах, ТаблицаПартийПереданных,,Ложь,Ложь,Истина);
	
	//ПО РЕГИСТРУ РАСХОДОВ УСН
	НаборДвижений = Движения.РасходыПриУСН;
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаРасходы;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
	//ПО РЕГИСТРУ ПЕРВОНАЧАЛЬНЫХ СВЕДЕНИЙ ОС
	НаборДвижений   = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
		
	Для Каждого СтрокаОС Из КорректировкаСведенийОС Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОС.ОсновноеСредство) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = Дата;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьУСН  = СтрокаОС.ПервоначальнаяСтоимостьУСН;
		НоваяСтрока.СрокПолезногоИспользования  = СтрокаОС.СрокПолезногоИспользования;
		НоваяСтрока.СуммаНачисленнойАмортизации = СтрокаОС.СуммаНачисленнойАмортизации;
		НоваяСтрока.ДатаПриобретения            = СтрокаОС.ДатаПриобретения;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовУСН;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
	//ПО РЕГИСТРУ ПЕРВОНАЧАЛЬНЫХ СВЕДЕНИЙ НМА
	НаборДвижений   = Движения.ПервоначальныеСведенияНМАНалоговыйУчетУСН;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
		
	Для Каждого СтрокаНМА Из КорректировкаСведенийНМА Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаНМА.НематериальныйАктив) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = Дата;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.НематериальныйАктив         = СтрокаНМА.НематериальныйАктив;
		НоваяСтрока.ПервоначальнаяСтоимостьУСН  = СтрокаНМА.ПервоначальнаяСтоимостьУСН;
		НоваяСтрока.СрокПолезногоИспользования  = СтрокаНМА.СрокПолезногоИспользования;
		НоваяСтрока.СуммаНачисленнойАмортизации = СтрокаНМА.СуммаНачисленнойАмортизации;
		НоваяСтрока.ДатаПриобретения            = СтрокаНМА.ДатаПриобретения;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтрокаНМА.ПорядокВключенияСтоимостиВСоставРасходовУСН;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ОтказПоЗаполнению = Ложь;

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Заполним параметры, специфичные для этого документа 
	СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН", 	Истина);
	СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", 	Истина);
	
	МассивТаблиц = Новый Массив;
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ВзаиморасчетыСПоставщиками".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидЗадолженности", 	"ВидЗадолженности");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"ДоговорКонтрагента");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
	СтруктураПолей.Вставить("Сделка", 				"Сделка");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов", 	"СуммаВзаиморасчетов");

	МассивТаблиц.Добавить(УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВзаиморасчетыСПоставщиками", СтруктураПолей).Выгрузить());
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ВзаиморасчетыСПокупателями".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидЗадолженности", 	"ВидЗадолженности");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"ДоговорКонтрагента");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
	СтруктураПолей.Вставить("Сделка", 				"Сделка");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов", 	"СуммаВзаиморасчетов");
	СтруктураПолей.Вставить("ДоходЕНВД", 			"ДоходЕНВД");
	СтруктураПолей.Вставить("ДоходКомитента", 		"ДоходКомитента");

	МассивТаблиц.Добавить(УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВзаиморасчетыСПокупателями", СтруктураПолей).Выгрузить());
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ВзаиморасчетыСПоставщиками".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидЗадолженности", 	"ВидЗадолженности");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"Подотчетник");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов", 	"СуммаВзаиморасчетов");

	МассивТаблиц.Добавить(УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВзаиморасчетыСПодотчетниками", СтруктураПолей).Выгрузить());
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ВзаиморасчетыССотрудниками".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидЗадолженности", 	"ВидЗадолженности");
	СтруктураПолей.Вставить("Работник", 			"Работник");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов", 	"СуммаВзаиморасчетов");

	МассивТаблиц.Добавить(УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВзаиморасчетыССотрудниками", СтруктураПолей).Выгрузить());
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ВзаиморасчетыПоНалогам".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидЗадолженности", 	"ВидЗадолженности");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"СчетРасчетовПоНалогу");
	СтруктураПолей.Вставить("СуммаВзаиморасчетов", 	"СуммаВзаиморасчетов");

	МассивТаблиц.Добавить(УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВзаиморасчетыПоНалогам", СтруктураПолей).Выгрузить());
	
	//Подготовим таблицу движений регистра взаиморасчетов УСН
	ТаблицаВзаиморасчеты = СобратьТаблицыВзаиморасчетов(МассивТаблиц);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ПартииТоваровНаСкладах".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", 				"Номенклатура");
	СтруктураПолей.Вставить("СчетУчета", 					"СчетУчета");
	СтруктураПолей.Вставить("Склад", 						"Склад");
	СтруктураПолей.Вставить("ДокументОприходования",		"ДокументОприходования");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры",	"ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры",			"СерияНоменклатуры");
	СтруктураПолей.Вставить("Количество", 					"Количество");
                                                                           
	//Подготовим таблицу движений регистра Партии товаров на складах
	ТаблицаПартийНаСкладах = СобратьТаблицыПартийНаСкладах(УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПартииТоваровНаСкладах", СтруктураПолей).Выгрузить());
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "ПартииТоваровПереданные".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура", 				"Номенклатура");
	СтруктураПолей.Вставить("СчетУчета", 					"СчетУчета");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 			"ДоговорКонтрагента");
	СтруктураПолей.Вставить("ДокументОприходования",		"ДокументОприходования");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры",	"ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ДокументПередачи", 			"ДокументПередачи");
	СтруктураПолей.Вставить("Количество", 					"Количество");

	//Подготовим таблицу движений регистра Партии товаров на складах
	ТаблицаПартийПереданных= СобратьТаблицыПартийПереданных(УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПартииТоваровПереданные", СтруктураПолей).Выгрузить());
	
    МассивТаблиц.Очистить();
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "РасходыНоменклатура".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ЭлементРасхода", 		"Номенклатура");
	СтруктураПолей.Вставить("СчетУчета", 			"СчетУчета");
	СтруктураПолей.Вставить("Контрагент", 			"Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"ДоговорКонтрагента");
	СтруктураПолей.Вставить("Партия",				"ДокументОприходования");
	СтруктураПолей.Вставить("СтатусыПартийУСН", 	"СтатусыПартийУСН");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
	СтруктураПолей.Вставить("СтатусыОплатыРасходовУСН", "СтатусыОплатыРасходовУСН");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Валюта", 				"Валюта");
	СтруктураПолей.Вставить("Количество", 			"Количество");
	СтруктураПолей.Вставить("Сумма", 				"Сумма");
	СтруктураПолей.Вставить("НДС", 					"НДС");
	
	ВременнаяТаблица = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасходыНоменклатура", СтруктураПолей).Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Номенклатура, "ВидРасхода");
	МассивТаблиц.Добавить(ВременнаяТаблица);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "РасходыНМА".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ЭлементРасхода", 		"НМА");
	СтруктураПолей.Вставить("Контрагент", 			"Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"ДоговорКонтрагента");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Валюта", 				"Валюта");
	СтруктураПолей.Вставить("Сумма", 				"Сумма");
	СтруктураПолей.Вставить("НДС", 					"НДС");
	
	ВременнаяТаблица = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасходыНМА", СтруктураПолей).Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.НМА, "ВидРасхода");
	ВременнаяТаблица.Колонки.Добавить("СтатусыОплатыРасходовУСН");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	МассивТаблиц.Добавить(ВременнаяТаблица);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "РасходыУслуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ЭлементРасхода", 		"Номенклатура");
	СтруктураПолей.Вставить("Контрагент", 			"Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"ДоговорКонтрагента");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Валюта", 				"Валюта");
	СтруктураПолей.Вставить("Сумма", 				"Сумма");
	СтруктураПолей.Вставить("НДС", 					"НДС");
	
	ВременнаяТаблица = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасходыУслуги", СтруктураПолей).Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Услуги, "ВидРасхода");
	ВременнаяТаблица.Колонки.Добавить("СтатусыОплатыРасходовУСН");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	МассивТаблиц.Добавить(ВременнаяТаблица);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "РасходыРБП".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ЭлементРасхода", 		"РБП");
	СтруктураПолей.Вставить("Контрагент", 			"Контрагент");
	СтруктураПолей.Вставить("ДоговорКонтрагента", 	"ДоговорКонтрагента");
	СтруктураПолей.Вставить("РасчетныйДокумент", 	"РасчетныйДокумент");
	СтруктураПолей.Вставить("СтатусыОплатыРасходовУСН", "СтатусыОплатыРасходовУСН");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Валюта", 				"Валюта");
	СтруктураПолей.Вставить("Сумма", 				"Сумма");
	СтруктураПолей.Вставить("НДС", 					"НДС");
	
	ВременнаяТаблица = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасходыРБП", СтруктураПолей).Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.РБП, "ВидРасхода");
	МассивТаблиц.Добавить(ВременнаяТаблица);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "РасходыЗарплата".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ЭлементРасхода", 		"Работник");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Сумма", 				"Сумма");
	
	ВременнаяТаблица = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасходыЗарплата", СтруктураПолей).Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Зарплата, "ВидРасхода");
	ВременнаяТаблица.Колонки.Добавить("СтатусыОплатыРасходовУСН");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	ВременнаяТаблица.Колонки.Добавить("Валюта");
	ВременнаяТаблица.ЗаполнитьЗначения(глЗначениеПеременной("ВалютаРегламентированногоУчета"), "Валюта");
	МассивТаблиц.Добавить(ВременнаяТаблица);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "РасходыНалоги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СчетУчета", 			"СчетРасчетовПоНалогу");
	СтруктураПолей.Вставить("ОтражениеВУСН", 		"ОтражениеВУСН");
	СтруктураПолей.Вставить("Сумма", 				"Сумма");
	
	ВременнаяТаблица = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "РасходыНалоги", СтруктураПолей).Выгрузить();
	ВременнаяТаблица.Колонки.Добавить("ВидРасхода");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.ВидыРасходовУСН.Налоги, "ВидРасхода");
	ВременнаяТаблица.Колонки.Добавить("СтатусыОплатыРасходовУСН");
	ВременнаяТаблица.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	ВременнаяТаблица.Колонки.Добавить("Валюта");
	ВременнаяТаблица.ЗаполнитьЗначения(глЗначениеПеременной("ВалютаРегламентированногоУчета"), "Валюта");
	МассивТаблиц.Добавить(ВременнаяТаблица);

	//Подготовим таблицу движений регистра взаиморасчетов УСН
	ТаблицаРасходы = СобратьТаблицыРасходов(МассивТаблиц);
	
	//Таблица корректировок ОС
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ОсновноеСредство", 							"ОсновноеСредство");
	СтруктураПолей.Вставить("ДатаПриобретения", 							"ДатаПриобретения");
	СтруктураПолей.Вставить("ПервоначальнаяСтоимостьУСН", 					"ПервоначальнаяСтоимостьУСН");
	СтруктураПолей.Вставить("СуммаНачисленнойАмортизации", 					"СуммаНачисленнойАмортизации");
	СтруктураПолей.Вставить("СрокПолезногоИспользования", 					"СрокПолезногоИспользования");
	СтруктураПолей.Вставить("ПорядокВключенияСтоимостиВСоставРасходовУСН",	"ПорядокВключенияСтоимостиВСоставРасходовУСН");
	
	КорректировкаСведенийОС = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПервоначальныеСведенияОС", СтруктураПолей).Выгрузить();
	
	//Таблица корректировок НМА
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НематериальныйАктив", 							"НематериальныйАктив");
	СтруктураПолей.Вставить("ДатаПриобретения", 							"ДатаПриобретения");
	СтруктураПолей.Вставить("ПервоначальнаяСтоимостьУСН", 					"ПервоначальнаяСтоимостьУСН");
	СтруктураПолей.Вставить("СуммаНачисленнойАмортизации", 					"СуммаНачисленнойАмортизации");
	СтруктураПолей.Вставить("СрокПолезногоИспользования", 					"СрокПолезногоИспользования");
	СтруктураПолей.Вставить("ПорядокВключенияСтоимостиВСоставРасходовУСН",	"ПорядокВключенияСтоимостиВСоставРасходовУСН");
	
	КорректировкаСведенийНМА = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПервоначальныеСведенияНМА", СтруктураПолей).Выгрузить();
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличныхЧастей(СтруктураШапкиДокумента, ОтказПоЗаполнению, Заголовок);
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, 
							ТаблицаВзаиморасчеты, ТаблицаПартийНаСкладах, ТаблицаПартийПереданных, ТаблицаРасходы, 
							КорректировкаСведенийОС, КорректировкаСведенийНМА,
							Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью
