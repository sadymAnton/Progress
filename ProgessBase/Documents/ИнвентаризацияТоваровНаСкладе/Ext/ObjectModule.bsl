//++ Spl_Апроф 14.01.2015 (k.russkih@a-prof.ru) Добавил реквизит "КП_Отделение" вынес на форму элемента, списка, выбора

Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

// Валюта курс и кратность для пересчета регламентированных сумм
Перем мВалютаУпрУчета Экспорт;
Перем мКурсУпрУчета Экспорт;
Перем мКратностьУпрУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДокумента()

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
	Иначе
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";
	Конецесли;

	Запрос = Новый Запрос;
	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ВалютаПечати = мВалютаРегламентированногоУчета;
	Иначе
		ВалютаПечати = мВалютаУпрУчета;
	КонецЕсли;

	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НТТ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК ПредставлениеСклада,
	|	Организация,
	|	Склад,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество                      КАК Количество,
	|		КоличествоУчет                  КАК КоличествоПоУчету,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
	|			ИНАЧЕ Цена
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице
	|			ИНАЧЕ Сумма
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР
	|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА КоличествоУчет *ЦенаВРознице
	|			ИНАЧЕ СуммаУчет
	|		КОНЕЦ КАК СуммаПоУчету,
	|		ХарактеристикаНоменклатуры      КАК Характеристика,
	|		СерияНоменклатуры               КАК Серия
	|	)
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИнвентаризацияТоваровНаСкладе";

	Макет = ПолучитьМакет("ИнвентаризацияТоваровНаСкладе");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Инвентаризация товаров на складе");
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим данные об организации и складе
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ОбластьМакета.Параметры.ВалютаНаименование = ВалютаПечати.Наименование;
	ОбластьМакета.Параметры.Валюта             = ВалютаПечати;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим шапку таблицы
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	Если ВыводитьКоды Тогда
		ОбластьМакета.Параметры.Колонка = Колонка;
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета    = Макет.ПолучитьОбласть(ОбластьСтроки);
	ИтогСуммы        = 0;
	ИтогСуммыПоУчету = 0;

	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Товар = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);

		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
		КонецЕсли;

		ИтогСуммы        = ИтогСуммы        + ВыборкаСтрокТовары.Сумма;
		ИтогСуммыПоУчету = ИтогСуммыПоУчету + ВыборкаСтрокТовары.СуммаПоУчету;

		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета                        = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего        = ОбщегоНазначения.ФорматСумм(ИтогСуммы);
	ОбластьМакета.Параметры.ВсегоПоУчету = ОбщегоНазначения.ФорматСумм(ИтогСуммыПоУчету);
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подписи к документу
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

// ТекстОписания
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Функция ПечатьИНВ3(БезФактическихДанных = Ложь)

	/// Кунов О.В., 25.05.2015 - 40044
	ВариантыВыбора = Новый СписокЗначений;
	ВариантыВыбора.Добавить(Ложь,   "Для нас");
	ВариантыВыбора.Добавить(Истина, "Для ответхранителя");
	
	ВыбранныйВариант = ВариантыВыбора.ВыбратьЭлемент("Вариант", ВариантыВыбора[0]);
	Если ВыбранныйВариант = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоВариантДляОтветхранителя = ВыбранныйВариант.Значение;
	Если ЭтоВариантДляОтветхранителя Тогда
		ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ВвестиЗначение(ТипЦен);
		Если Не ЗначениеЗаполнено(ТипЦен) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	///
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ВалютаПересчета = мВалютаРегламентированногоУчета;
	Иначе
		ВалютаПересчета = мВалютаУпрУчета;
	КонецЕсли;

	ВалютаПечати = мВалютаРегламентированногоУчета;
	Параметры    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПересчета, Дата);
	Запрос       = Новый Запрос;

	Запрос.УстановитьПараметр("ТекущийДокумент",      ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Курс",                 Параметры.Курс);
	Запрос.УстановитьПараметр("Кратность",            Параметры.Кратность);
	Запрос.УстановитьПараметр("ВидСкладаНТТ",         Перечисления.ВидыСкладов.НТТ);
	Запрос.УстановитьПараметр("БезФактическихДанных", БезФактическихДанных);
	
	/// Кунов О.В., 25.05.2015 - 40044
	Если ЭтоВариантДляОтветхранителя Тогда
		
		Запрос.УстановитьПараметр("ДатаДокумента",  ЭтотОбъект.Дата);
		Запрос.УстановитьПараметр("ТипЦен", 		ТипЦен);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИнвентаризацияТоваровНаСкладе.Ссылка.Номер КАК НомерДокумента,
		|	ИнвентаризацияТоваровНаСкладе.Ссылка.Дата КАК ДатаДокумента,
		|	ИнвентаризацияТоваровНаСкладе.Ссылка.Дата КАК ДатаСнятияОстатков,
		|	ИнвентаризацияТоваровНаСкладе.Ссылка.Организация,
		|	ИнвентаризацияТоваровНаСкладе.Ссылка.Склад.Представление КАК ПредставлениеСклада,
		|	ИнвентаризацияТоваровНаСкладе.НомерСтроки КАК Номер,
		|	ИнвентаризацияТоваровНаСкладе.Номенклатура,
		|	ИнвентаризацияТоваровНаСкладе.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
		|	ИнвентаризацияТоваровНаСкладе.Номенклатура.Код КАК ТоварКод,
		|	ИнвентаризацияТоваровНаСкладе.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
		|	ИнвентаризацияТоваровНаСкладе.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	ВЫБОР
		|		КОГДА &БезФактическихДанных
		|			ТОГДА 0
		|		ИНАЧЕ ИнвентаризацияТоваровНаСкладе.Количество
		|	КОНЕЦ КАК ФактКоличество,
		|	ИнвентаризацияТоваровНаСкладе.КоличествоУчет КАК БухКоличество,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
		|	ВЫБОР
		|		КОГДА &БезФактическихДанных
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ИнвентаризацияТоваровНаСкладе.Количество
		|	КОНЕЦ КАК ФактСумма,
		|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ИнвентаризацияТоваровНаСкладе.КоличествоУчет КАК БухСумма,
		|	ИнвентаризацияТоваровНаСкладе.ХарактеристикаНоменклатуры КАК Характеристика,
		|	ИнвентаризацияТоваровНаСкладе.СерияНоменклатуры КАК Серия
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладе
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, ТипЦен = &ТипЦен) КАК ЦеныНоменклатуры
		|		ПО ИнвентаризацияТоваровНаСкладе.Номенклатура = ЦеныНоменклатуры.Номенклатура
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер";
		
		РезультатЗапроса = Запрос.Выполнить();
		Шапка = РезультатЗапроса.Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = РезультатЗапроса.Выбрать();		
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер КАК НомерДокумента,
		|	Дата  КАК ДатаДокумента,
		|	Дата  КАК ДатаСнятияОстатков,
		|	Организация,
		|	Склад.Представление КАК ПредставлениеСклада,
		|	Товары.(
		|		НомерСтроки                     КАК Номер,
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
		|		Номенклатура." + ТоварКод + "   КАК ТоварКод,
		|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
		|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|		ВЫБОР
		|			КОГДА &БезФактическихДанных ТОГДА 0
		|			ИНАЧЕ Количество
		|		КОНЕЦ КАК ФактКоличество,
		|		КоличествоУчет КАК БухКоличество,
		|		ВЫБОР
		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
		|			ИНАЧЕ Цена * &Курс / &Кратность
		|		КОНЕЦ КАК Цена,
		|		ВЫБОР
		|			КОГДА &БезФактическихДанных ТОГДА 0
		|			ИНАЧЕ ВЫБОР КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице ИНАЧЕ Сумма * &Курс / &Кратность КОНЕЦ
		|		КОНЕЦ КАК ФактСумма,
		|		ВЫБОР
		|			КОГДА Склад.ВидСклада = &ВидСкладаНТТ ТОГДА КоличествоУчет *ЦенаВРознице
		|			ИНАЧЕ СуммаУчет * &Курс / &Кратность
		|		КОНЕЦ КАК БухСумма,
		|		ХарактеристикаНоменклатуры КАК Характеристика,
		|		СерияНоменклатуры КАК Серия
		|	)
		|ИЗ
		|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
		|
		|ГДЕ
		|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
	КонецЕсли;
	///	

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ3";
	Макет       = ПолучитьОбщийМакет("ИНВ3");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ДатаСнятияОстатков       = Формат(Шапка.ДатаСнятияОстатков, "ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	
	/// Кунов О.В., 09.03.2017 - 63158
	ОбластьМакета.Параметры.Подразделение			= ЭтотОбъект.Склад.Наименование;
	Построитель = Новый ПостроительОтчета;
	ЗаполнитьНачальныеНастройки(Построитель);
	УсловияПроведения = ЭтотОбъект.УсловияПроведенияИнвентаризации.Получить();
	Построитель.УстановитьНастройки(УсловияПроведения);
	ОтборНоменклатура = Построитель.Отбор.Найти("Номенклатура");
	Если ОтборНоменклатура <> Неопределено Тогда
		ОтборНоменклатура = ОтборНоменклатура.Значение;
		ВидЦенностей = "";
		Если ТипЗнч(ОтборНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ВидЦенностей = ОтборНоменклатура.Наименование;
		ИначеЕсли ТипЗнч(ОтборНоменклатура) = Тип("СписокЗначений") Тогда
			Для Каждого ЭлементОтбора Из ОтборНоменклатура Цикл
				ВидЦенностей = ВидЦенностей + ЭлементОтбора.Значение.Наименование + ", ";
			КонецЦикла;
			ВидЦенностей = Лев(ВидЦенностей, СтрДлина(ВидЦенностей) - 2);
		КонецЕсли;
		ОбластьМакета.Параметры.ВидЦенностей = ВидЦенностей;
	КонецЕсли;
	///
	
	/// Кунов О.В., 06.04.2015 - 37774
	ДанныеОПодписантах = РегистрыСведений.ПРГ_ПодписантыПоУмолчанию.ПолучитьДанные(Ссылка, Склад.НСИ_Отделение, "МОЛ");
	
	Если ДанныеОПодписантах <> Неопределено И ДанныеОПодписантах.Количество() > 0 Тогда
		ОбластьМакета.Параметры.ДолжностьМОЛ1 	= ДанныеОПодписантах[0].Должность;
		ОбластьМакета.Параметры.ФИОМОЛ1 		= ДанныеОПодписантах[0].Сотрудник.Наименование;
		Если ДанныеОПодписантах.Количество() > 1 Тогда
			ОбластьМакета.Параметры.ДолжностьМОЛ2 	= ДанныеОПодписантах[1].Должность;
			ОбластьМакета.Параметры.ФИОМОЛ2 		= ДанныеОПодписантах[1].Сотрудник.Наименование;
		КонецЕсли;
	КонецЕсли;
	///
	
	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	СтрокНаСтранице = 19;
	СтрокШапки      = 5;
	СтрокПодвала    = 5;
	НомерСтраницы   = 2;
	Ном             = 0;

	ИтогФактКоличество = 0;
	ИтогФактСумма      = 0;
	ИтогБухКоличество  = 0;
	ИтогБухСумма       = 0;

	КолвоСтрокПоСтранице = 0;
	КолвоПостранице      = 0;
	СуммаЛиста           = 0;
	ИтогоКолво           = 0;
	ИтогоСумма           = 0;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// Выводим многострочную часть докмента
	//ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице                               = Макет.ПолучитьОбласть("ПодвалСтраницы");
			ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество = ИтогФактКоличество;
			ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма      = ИтогФактСумма;
			ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество  = ИтогБухКоличество;
			ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма       = ИтогБухСумма;

			ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
			Если НЕ БезФактическихДанных Тогда
				ОбластьИтоговПоСтранице.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(КолвоПостранице);
				ОбластьИтоговПоСтранице.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

			ИтогФактКоличество = 0;
			ИтогФактСумма      = 0;
			ИтогБухКоличество  = 0;
			ИтогБухСумма       = 0;

			КолвоСтрокПоСтранице = 0;
			КолвоПостранице      = 0;
			СуммаЛиста           = 0;

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.Номер             = Ном;

		ТабДокумент.Вывести(ОбластьМакета);

		ИтогФактКоличество = ИтогФактКоличество + ВыборкаСтрокТовары.ФактКоличество;
		ИтогФактСумма      = ИтогФактСумма      + ВыборкаСтрокТовары.ФактСумма;
		ИтогБухКоличество  = ИтогБухКоличество  + ВыборкаСтрокТовары.БухКоличество;
		ИтогБухСумма       = ИтогБухСумма       + ВыборкаСтрокТовары.БухСумма;
		ИтогоКолво         = ИтогоКолво         + ВыборкаСтрокТовары.ФактКоличество;
		ИтогоСумма         = ИтогоСумма         + ВыборкаСтрокТовары.ФактСумма;

		КолвоСтрокПоСтранице = КолвоСтрокПоСтранице + 1;
		КолвоПостранице      = КолвоПостранице      + ВыборкаСтрокТовары.ФактКоличество;
		СуммаЛиста           = СуммаЛиста           + ВыборкаСтрокТовары.ФактСумма;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ПодвалСтраницы");
	ОбластьИтоговПоСтранице.Параметры.ИтогоФактКоличество  = ИтогФактКоличество;
	ОбластьИтоговПоСтранице.Параметры.ИтогоФактСумма       = ИтогФактСумма;
	ОбластьИтоговПоСтранице.Параметры.ИтогоБухКоличество   = ИтогБухКоличество;
	ОбластьИтоговПоСтранице.Параметры.ИтогоБухСумма        = ИтогБухСумма;
	ОбластьИтоговПоСтранице.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(КолвоСтрокПоСтранице, ,",,,,,,,,0");
	Если НЕ БезФактическихДанных Тогда
		ОбластьИтоговПоСтранице.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(КолвоПостранице);
		ОбластьИтоговПоСтранице.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаЛиста, ВалютаПечати);
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим подвал документа
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.НачальныйНомерПоПорядку = 1;
	ОбластьМакета.Параметры.НомерКонца              = ВыборкаСтрокТовары.Количество();
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровНаСтраницеПрописью = ЧислоПрописью(ВыборкаСтрокТовары.Количество(), ,",,,,,,,,0");
	Если НЕ БезФактическихДанных Тогда
		ОбластьМакета.Параметры.ОбщееКоличествоЕдиницФактическиНаСтраницеПрописью = ФормированиеПечатныхФорм.КоличествоПрописью(ИтогоКолво);
		ОбластьМакета.Параметры.СуммаФактическиНаСтраницеПрописью                 = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСумма, ВалютаПечати);
	КонецЕсли;
	
	/// Кунов О.В., 06.04.2015 - 37774
	ДанныеОПодписантах = РегистрыСведений.ПРГ_ПодписантыПоУмолчанию.ПолучитьДанные(Ссылка, Склад.НСИ_Отделение, "Председатель комиссии");
	Если ДанныеОПодписантах <> Неопределено И ДанныеОПодписантах.Количество() > 0 Тогда
		ОбластьМакета.Параметры.ДолжностьПредседателя 	= ДанныеОПодписантах[0].Должность;
		ОбластьМакета.Параметры.ФИОПредседателя 		= ДанныеОПодписантах[0].Сотрудник.Наименование;
	КонецЕсли;
	
	Для Н = 2 По 4 Цикл
		ДанныеОЧленеКомиссии = РегистрыСведений.ПРГ_ПодписантыПоУмолчанию.ПолучитьДанные(Ссылка, Склад.НСИ_Отделение, "Член комиссии " + Н);
		Если ДанныеОЧленеКомиссии <> Неопределено И ДанныеОЧленеКомиссии.Количество() > 0 Тогда
			ОбластьМакета.Параметры["ДолжностьЧленаКомиссии" + Н] 	= ДанныеОЧленеКомиссии[0].Должность;
			ОбластьМакета.Параметры["ФИОЧленаКомиссии" + Н] 		= ДанныеОЧленеКомиссии[0].Сотрудник.Наименование;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеОПодписантах = РегистрыСведений.ПРГ_ПодписантыПоУмолчанию.ПолучитьДанные(Ссылка, Склад.НСИ_Отделение, "Ответств. за сохранность");
	КоличествоДанных = ДанныеОПодписантах.Количество();
	Если ДанныеОПодписантах <> Неопределено И КоличествоДанных > 0 Тогда
		ОбластьМакета.Параметры.ДолжностьМОЛ1 	= ДанныеОПодписантах[0].Должность;
		ОбластьМакета.Параметры.ФИОМОЛ1 		= ДанныеОПодписантах[0].Сотрудник.Наименование;
		Если КоличествоДанных > 1 Тогда
			ОбластьМакета.Параметры.ДолжностьМОЛ2 	= ДанныеОПодписантах[1].Должность;
			ОбластьМакета.Параметры.ФИОМОЛ2 		= ДанныеОПодписантах[1].Сотрудник.Наименование;
		КонецЕсли;
		Если КоличествоДанных > 2 Тогда
			ОбластьМакета.Параметры.ДолжностьМОЛ3 	= ДанныеОПодписантах[2].Должность;
			ОбластьМакета.Параметры.ФИОМОЛ3 		= ДанныеОПодписантах[2].Сотрудник.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеОПодписантах = РегистрыСведений.ПРГ_ПодписантыПоУмолчанию.ПолучитьДанные(Ссылка, Склад.НСИ_Отделение, "Расчеты проверил");
	Если ДанныеОПодписантах <> Неопределено И ДанныеОПодписантах.Количество() > 0 Тогда
		ОбластьМакета.Параметры.ДолжностьРасчетчика = ДанныеОПодписантах[0].Должность;
		ОбластьМакета.Параметры.ФИОРасчетчика 		= ДанныеОПодписантах[0].Сотрудник.Наименование;
	КонецЕсли;
	///
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьИНВ3()

// ТекстОписания
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Функция ПечатьИНВ19()

	ТипЦен = Неопределено;
	
	Если Не ВвестиЗначение(ТипЦен, "Тип цен", Тип("СправочникСсылка.ТипыЦенНоменклатуры")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ВалютаПересчета = мВалютаРегламентированногоУчета;
	Иначе
		ВалютаПересчета = мВалютаУпрУчета;
	КонецЕсли;

	ВалютаПечати = мВалютаРегламентированногоУчета;
	Параметры    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаПересчета, Дата);
	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер  КАК НомерДокумента,
	|	Дата   КАК ДатаДокумента,
	|	Дата   КАК ДатаНачалаИнвентаризации,
	|	Организация КАК Руководители,
	|	Организация,
	|	Склад.Представление КАК ПредставлениеСклада
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
	|
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладе.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.УстановитьПараметр("Курс",            Параметры.Курс);
	Запрос.УстановитьПараметр("Кратность",       Параметры.Кратность);
	Запрос.УстановитьПараметр("ВидСкладаНТТ",    Перечисления.ВидыСкладов.НТТ);
	
	Запрос.УстановитьПараметр("Ссылка",  ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ТекДата", НачалоДня(ЭтотОбъект.Дата));          
	Запрос.УстановитьПараметр("КонецМесяца", Новый Граница(КонецМесяца(ЭтотОбъект.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ТипЦен",  ТипЦен);

	Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	НомерСтроки КАК Номер,
	//|	Номенклатура,
	//|	Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	//|	Номенклатура." + ТоварКод + "   КАК ТоварКод,
	//|	ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмеренияНаименование,
	//|	ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	//|	Количество                     КАК ФактКоличество,
	//|	КоличествоУчет                 КАК БухКоличество,
	//|	ВЫБОР
	//|		КОГДА Ссылка.Склад.ВидСклада = &ВидСкладаНТТ ТОГДА ЦенаВРознице
	//|		ИНАЧЕ Цена * &Курс / &Кратность
	//|	КОНЕЦ КАК Цена,
	//|	ВЫБОР
	//|		КОГДА Ссылка.Склад.ВидСклада = &ВидСкладаНТТ ТОГДА Количество * ЦенаВРознице
	//|		ИНАЧЕ Сумма * &Курс / &Кратность
	//|	КОНЕЦ КАК ФактСумма,
	//|	ВЫБОР
	//|		КОГДА Ссылка.Склад.ВидСклада = &ВидСкладаНТТ ТОГДА КоличествоУчет *ЦенаВРознице
	//|		ИНАЧЕ СуммаУчет * &Курс / &Кратность
	//|	КОНЕЦ КАК БухСумма,
	//|	ХарактеристикаНоменклатуры     КАК Характеристика,
	//|	СерияНоменклатуры КАК Серия
	//|ИЗ
	//|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Товары
	//|	
	//|ГДЕ
	//|	Товары.Ссылка = &ТекущийДокумент
	//|	И (Товары.Количество - Товары.КоличествоУчет) <> 0
	//|	
	//|УПОРЯДОЧИТЬ ПО
	//|	Товары.НомерСтроки";
	
	"ВЫБРАТЬ
	|	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК Номер,
	|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура КАК Номенклатура,
	|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.Код КАК ТоварКод,
	|	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ИнвентаризацияТоваровНаСкладеТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ИнвентаризацияТоваровНаСкладеТовары.Количество КАК ФактКоличество,
	|	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет КАК БухКоличество,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаФакт,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * ИнвентаризацияТоваровНаСкладеТовары.Количество КАК ФактСумма,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.КоличествоОстаток, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.СтоимостьОстаток, 0) / ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.КоличествоОстаток * ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет
	|	КОНЕЦ КАК БухСумма,
	|	ИнвентаризацияТоваровНаСкладеТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ИнвентаризацияТоваровНаСкладеТовары.СерияНоменклатуры КАК Серия,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.КоличествоОстаток = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.СтоимостьОстаток / ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.КоличествоОстаток
	|	КОНЕЦ КАК ЦенаБух,
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.КоличествоОстаток КАК КоличествоПартии
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата, ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ИнвентаризацияТоваровНаСкладеТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	|				&КонецМесяца,
	|				Номенклатура В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Табл.Номенклатура
	|					ИЗ
	|						Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Табл
	|					ГДЕ
	|						Табл.Ссылка = &Ссылка)) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОстатки
	|		ПО ИнвентаризацияТоваровНаСкладеТовары.Номенклатура = ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.Номенклатура
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка
	|	И ИнвентаризацияТоваровНаСкладеТовары.Количество - ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет <> 0";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияТоваровНаСкладе_ИНВ19";
	Макет       = ПолучитьОбщийМакет("ИНВ19");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ДатаНачалаИнвентаризации = Шапка.ДатаНачалаИнвентаризации;
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	ТабДокумент.Вывести(ОбластьМакета);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	НомерСтраницы   = 2;
	
	ИтогоРезультатИзлишекКолво   = 0;
	ИтогоРезультатИзлишекСумма   = 0;
	ИтогоРезультатНедостачаКолво = 0;
	ИтогоРезультатНедостачаСумма = 0;
	
	//// <- Шевченков №
	//ИтогоПриходИзлишковКолво   = 0;
	//ИтогоПриходИзлишковСумма   = 0;
	//ИтогоСписаниеНедостачКолво = 0;
	//ИтогоСписаниеНедостачСумма = 0;	
	////->

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы1");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	// Выводим многострочную часть докмента
	ОбластьМакета              = Макет.ПолучитьОбласть("СтрокаТаблицы1");
	ОбластьИтоговПоСтранице    = Макет.ПолучитьОбласть("ИтогоТаблицы1");
	ОбластьПодвала             = Макет.ПолучитьОбласть("Подвал");
	МассивВыводимыхОбластей    = Новый Массив;
	Ном = 0;
	
	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		Ном = Ном + 1;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		
		Разница  	    = 0;
		РазницаСуммФакт = 0;
		РазницаСуммБух  = 0;
		
		ЦенаФакт = ВыборкаСтрокТовары.ЦенаФакт;
		ЦенаБух  = ?(ЗначениеЗаполнено(ВыборкаСтрокТовары.ЦенаБух), ВыборкаСтрокТовары.ЦенаБух, 0);
		ЦенаБух  = ?(ЦенаБух = 0, ПолучитьЦенуИзРасходаВПартиях(ЭтотОбъект.Дата, ВыборкаСтрокТовары.Номенклатура),ЦенаБух);
				
		Разница     	= ВыборкаСтрокТовары.ФактКоличество - ВыборкаСтрокТовары.БухКоличество;
		РазницаСуммФакт = Разница * ЦенаФакт;
		РазницаСуммБух  = Разница * ЦенаБух;
	
		Если Разница < 0 И РазницаСуммБух < 0 Тогда
			ОбластьМакета.Параметры.РезультатНедостачаКолво = - Разница;
			ОбластьМакета.Параметры.РезультатНедостачаСумма = - РазницаСуммБух;
			ОбластьМакета.Параметры.РезультатИзлишекКолво   = 0;
			ОбластьМакета.Параметры.РезультатИзлишекСумма   = 0;

			ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво + (- Разница);
			ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма + (- РазницаСуммБух);			
		ИначеЕсли Разница < 0 И РазницаСуммБух >= 0 Тогда
			ОбластьМакета.Параметры.РезультатНедостачаКолво = - Разница;
			ОбластьМакета.Параметры.РезультатНедостачаСумма = РазницаСуммБух;
			ОбластьМакета.Параметры.РезультатИзлишекКолво   = 0;
			ОбластьМакета.Параметры.РезультатИзлишекСумма   = 0;

			ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво + (- Разница);
			ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма + РазницаСуммБух;
		Иначе
			ОбластьМакета.Параметры.РезультатНедостачаКолво = 0;
			ОбластьМакета.Параметры.РезультатНедостачаСумма = 0;
			ОбластьМакета.Параметры.РезультатИзлишекКолво   = Разница;
			ОбластьМакета.Параметры.РезультатИзлишекСумма   = РазницаСуммФакт;

			ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво   + Разница;
			ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма   + РазницаСуммФакт;
		КонецЕсли;
		
		ОбластьМакета.Параметры.СписаниеНедостачКолонка1Колво = ОбластьМакета.Параметры.РезультатНедостачаКолво;
		ОбластьМакета.Параметры.СписаниеНедостачКолонка1Сумма = ОбластьМакета.Параметры.РезультатНедостачаСумма;
		ОбластьМакета.Параметры.ПриходИзлишковКолво   = ОбластьМакета.Параметры.РезультатИзлишекКолво;
		ОбластьМакета.Параметры.ПриходИзлишковСумма   = ОбластьМакета.Параметры.РезультатИзлишекСумма;
		
		МассивВыводимыхОбластей.Очистить();
		МассивВыводимыхОбластей.Добавить(ОбластьМакета);
		МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
		Если Ном = КоличествоСтрок Тогда
			МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
		КонецЕсли;
		
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивВыводимыхОбластей) Тогда
			
			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;
		        		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
	
	//Пока ВыборкаСтрокТовары.Следующий() Цикл
	//	
	//	Ном = Ном + 1;
	//	
	//	Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
	//		Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
	//		Продолжить;
	//	КонецЕсли;

	//	ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
	//	ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрокТовары.ТоварНаименование + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
	//	
	//	Разница     = 0;
	//	РазницаСумм = 0;
	//	
	//	Разница     = ВыборкаСтрокТовары.ФактКоличество - ВыборкаСтрокТовары.БухКоличество;
	//	РазницаСумм = ВыборкаСтрокТовары.ФактСумма      - ВыборкаСтрокТовары.БухСумма;
	//
	//	Если Разница < 0 И РазницаСумм < 0 Тогда
	//		ОбластьМакета.Параметры.РезультатНедостачаКолво = - Разница;
	//		ОбластьМакета.Параметры.РезультатНедостачаСумма = - РазницаСумм;
	//		ОбластьМакета.Параметры.РезультатИзлишекКолво   = 0;
	//		ОбластьМакета.Параметры.РезультатИзлишекСумма   = 0;

	//		ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво + (- Разница);
	//		ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма + (- РазницаСумм);			
	//	ИначеЕсли Разница < 0 И РазницаСумм >= 0 Тогда
	//		ОбластьМакета.Параметры.РезультатНедостачаКолво = - Разница;
	//		ОбластьМакета.Параметры.РезультатНедостачаСумма = РазницаСумм;
	//		ОбластьМакета.Параметры.РезультатИзлишекКолво   = 0;
	//		ОбластьМакета.Параметры.РезультатИзлишекСумма   = 0;

	//		ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво + (- Разница);
	//		ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма + РазницаСумм;
	//	Иначе
	//		ОбластьМакета.Параметры.РезультатНедостачаКолво = 0;
	//		ОбластьМакета.Параметры.РезультатНедостачаСумма = 0;
	//		ОбластьМакета.Параметры.РезультатИзлишекКолво   = Разница;
	//		ОбластьМакета.Параметры.РезультатИзлишекСумма   = РазницаСумм;

	//		ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво   + Разница;
	//		ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма   + РазницаСумм;
	//	КонецЕсли;
	//	
	//	ОбластьМакета.Параметры.СписаниеНедостачКолонка1Колво = ОбластьМакета.Параметры.РезультатНедостачаКолво;
	//	ОбластьМакета.Параметры.СписаниеНедостачКолонка1Сумма = ОбластьМакета.Параметры.РезультатНедостачаСумма;
	//	ОбластьМакета.Параметры.ПриходИзлишковКолво   = ОбластьМакета.Параметры.РезультатИзлишекКолво;
	//	ОбластьМакета.Параметры.ПриходИзлишковСумма   = ОбластьМакета.Параметры.РезультатИзлишекСумма;
	//	
	//	МассивВыводимыхОбластей.Очистить();
	//	МассивВыводимыхОбластей.Добавить(ОбластьМакета);
	//	МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
	//	Если Ном = КоличествоСтрок Тогда
	//		МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
	//	КонецЕсли;
	//	
	//	Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, МассивВыводимыхОбластей) Тогда
	//		
	//		НомерСтраницы = НомерСтраницы + 1;
	//		ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	//		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	//		ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
	//		ТабДокумент.Вывести(ЗаголовокТаблицы);
	//		
	//	КонецЕсли;
	//					
	//	ТабДокумент.Вывести(ОбластьМакета);

	//КонецЦикла;

	ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатИзлишекКолво   = ИтогоРезультатИзлишекКолво;
	ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатИзлишекСумма   = ИтогоРезультатИзлишекСумма;
	ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатНедостачаКолво = ИтогоРезультатНедостачаКолво;
	ОбластьИтоговПоСтранице.Параметры.ИтогоРезультатНедостачаСумма = ИтогоРезультатНедостачаСумма;
	
	ОбластьИтоговПоСтранице.Параметры.ИтогоПриходИзлишковКолво   = ИтогоРезультатИзлишекКолво;
	ОбластьИтоговПоСтранице.Параметры.ИтогоПриходИзлишковСумма   = ИтогоРезультатИзлишекСумма;
	ОбластьИтоговПоСтранице.Параметры.ИтогоСписаниеНедостачКолонка1Колво = ИтогоРезультатНедостачаКолво;
	ОбластьИтоговПоСтранице.Параметры.ИтогоСписаниеНедостачКолонка1Сумма = ИтогоРезультатНедостачаСумма;
	
	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	ОбластьПодвала.Параметры.ФИОБухгалтера =  Бухгалтер;
	ОбластьПодвала.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьПодвала);

	// Зададим параметры макета
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	Возврат ТабДокумент;

КонецФункции // ПечатьИНВ19()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Ведомость" Тогда

		// Печать упр. формы документа
		ТабДокумент = ПечатьДокумента();
	ИначеЕсли ИмяМакета = "ИНВ3" тогда

		// Печать униф. формы ИНВ-3
		ТабДокумент = ПечатьИНВ3();

	ИначеЕсли ИмяМакета = "ИНВ3_БезФактДанных" тогда

		// Печать униф. формы ИНВ-3
		ТабДокумент = ПечатьИНВ3(Истина);

	ИначеЕсли ИмяМакета = "ИНВ19" тогда

		// Печать униф. формы ИНВ-19
		ТабДокумент = ПечатьИНВ19();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли; 

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	Возврат Новый Структура("Ведомость,ИНВ3,ИНВ3_БезФактДанных,ИНВ19",
	                        "Инвентаризация товаров на складе",
	                        "ИНВ-3 (Инвентаризационная опись товаров)",
	                        "ИНВ-3 (Инвентаризационная опись с пустыми фактическими данными)",
	                        "ИНВ-19 (Сличительная ведомость)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Процедура ЗаполнитьНачальныеНастройки(ПостроительОтчета) Экспорт
	ПостроительОтчета.Текст =
	"ВЫБРАТЬ
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
	+?(УчитыватьСерии, "
	|	ОстаткиТоваров.СерияНоменклатуры,","") + "
	|	ОстаткиТоваров.Качество,
	|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
	|	ВЫБОР
	|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
	|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
	|			0 
	|		ИНАЧЕ
	|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
	|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
	|	КОНЕЦ                                  КАК Сумма
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад)
	|КАК ОстаткиТоваров
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(, 
	|	                                                  Склад = &ПартионныйСклад) КАК ОстаткиПартий
	|ПО
	|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
	|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры
	|	И ОстаткиТоваров.Качество = ОстаткиПартий.Качество
	|
	|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
	|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиТоваров.Номенклатура,
	|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
	|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
	|	ОстаткиТоваров.Качество";
	
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Номенклатура");
	МассивОтбора.Добавить("НоменклатурнаяГруппа");
	УправлениеОтчетами.ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета);
КонецПроцедуры

#КонецЕсли

Функция СформироватьТаблицуОстатковЗатратПоМПЗ(ТекстОтбора, УпрУчет = Истина)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АналитикаВидаУчета.Ссылка
	|	
	|ПОМЕСТИТЬ ОтборАналитикаВидаУчета
	|ИЗ
	|	РегистрСведений.АналитикаВидаУчета КАК АналитикаВидаУчета
	|ГДЕ
	|	АналитикаВидаУчета.РазделУчета = &РазделУчета
	|	И " + ТекстОтбора + "
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетЗатратОбороты.АналитикаВидаУчета,
	|	УчетЗатратОбороты.АналитикаУчетаЗатрат,
	|	УчетЗатратОбороты.АналитикаУчетаПартий,
	|	УчетЗатратОбороты.АналитикаРаспределенияЗатрат,
	|	УчетЗатратОбороты.КоличествоРасход,
	|	УчетЗатратОбороты.СтоимостьРасход
	|	
	|ПОМЕСТИТЬ УчетЗатратРеглОбороты
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл.Обороты(&НачалоМесяца, &КонецМесяца,
	|		,
	|		АналитикаВидаУчета В
	|				(ВЫБРАТЬ
	|					ОтборАналитикаВидаУчета.Ссылка
	|				ИЗ
	|					ОтборАналитикаВидаУчета КАК ОтборАналитикаВидаУчета)) КАК УчетЗатратОбороты
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаВидаУчета,
	|	АналитикаУчетаЗатрат,
	|	АналитикаУчетаПартий,
	|	АналитикаРаспределенияЗатрат
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегАналитикаУчетаЗатрат.Затрата                 КАК Номенклатура,
	|	РегАналитикаУчетаЗатрат.ХарактеристикаЗатраты   КАК ХарактеристикаНоменклатуры,"
	+?(УчитыватьСерии, "
	|	РегАналитикаУчетаЗатрат.СерияЗатраты            КАК СерияНоменклатуры,","")+"
	|	РегАналитикаУчетаЗатрат.Качество,
	|	СУММА(УчетЗатратРеглОстатки.КоличествоОстаток)  КАК КоличествоОстаток,
	|	СУММА(УчетЗатратРеглОстатки.КоличествоОстаток
	|		* ВЫБОР 
	|			КОГДА УчетЗатратРеглОстатки.КоличествоОстаток + ЕСТЬNULL(УчетЗатратРеглОбороты.КоличествоРасход, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ (УчетЗатратРеглОстатки.СтоимостьОстаток + ЕСТЬNULL(УчетЗатратРеглОбороты.СтоимостьРасход, 0)) 
	|				/ (УчетЗатратРеглОстатки.КоличествоОстаток + ЕСТЬNULL(УчетЗатратРеглОбороты.КоличествоРасход, 0))
	|		КОНЕЦ)                                      КАК СтоимостьОстаток
	|	
	|ПОМЕСТИТЬ ОстаткиПартий
	|ИЗ
	|	РегистрНакопления.УчетЗатратРегл.Остатки(
	|			&ДатаОстатковЗатрат,
	|			АналитикаВидаУчета В
	|				(ВЫБРАТЬ
	|					ОтборАналитикаВидаУчета.Ссылка
	|				ИЗ
	|					ОтборАналитикаВидаУчета КАК ОтборАналитикаВидаУчета)) КАК УчетЗатратРеглОстатки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегАналитикаУчетаЗатрат
	|	ПО 
	|		УчетЗатратРеглОстатки.АналитикаУчетаЗатрат = РегАналитикаУчетаЗатрат.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		УчетЗатратРеглОбороты КАК УчетЗатратРеглОбороты
	|	ПО
	|		УчетЗатратРеглОстатки.АналитикаВидаУчета             = УчетЗатратРеглОбороты.АналитикаВидаУчета
	|		И УчетЗатратРеглОстатки.АналитикаУчетаЗатрат         = УчетЗатратРеглОбороты.АналитикаУчетаЗатрат
	|		И УчетЗатратРеглОстатки.АналитикаУчетаПартий         = УчетЗатратРеглОбороты.АналитикаУчетаПартий   
	|		И УчетЗатратРеглОстатки.АналитикаРаспределенияЗатрат = УчетЗатратРеглОбороты.АналитикаРаспределенияЗатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	РегАналитикаУчетаЗатрат.Затрата,
	|	РегАналитикаУчетаЗатрат.ХарактеристикаЗатраты,"
	+?(УчитыватьСерии, "
	|	РегАналитикаУчетаЗатрат.СерияЗатраты,","")+"
	|	РегАналитикаУчетаЗатрат.Качество
	|;
	|
	|///////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОтборАналитикаВидаУчета
	|;
	|
	|///////////////////////////////////////////////////
	|УНИЧТОЖИТЬ УчетЗатратРеглОбороты
	|;
	|";
	   
	Если УпрУчет 
		 И глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "УчетЗатратРегл", "УчетЗатрат");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

// Заполняет документ по остаткам на складе
// 
Процедура ЗаполнитьПоОстаткамНаСкладеРасширеннаяАналитика(ПостроительОтчета, ДатаОстатков, ТолькоУчетные = Ложь, УпрУчет=Истина)

	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	
	Если УпрУчет Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, МоментВремени());				
		ВремОрганизация = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладам;
	Иначе
		ВремОрганизация = Организация;
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладамРегл;
	КонецЕсли;	
		
	Если ВестиПартионныйУчетПоСкладам Тогда
		ВремСклад = Склад;
	Иначе
		ВремСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;

	ВалютаУпрУчета    = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;

	Если УпрУчет 
	  И НЕ глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет Тогда
		ОбщегоНазначения.Сообщение("Для выбранного режима использования расширенной аналитики управленческий учет себестоимости не ведется.
		|Суммы в документе могут быть заполнены не верно");
	КонецЕсли;	
	
	ТекстЗапроса = СформироватьТаблицуОстатковЗатратПоМПЗ("Склад = &ПартионныйСклад И Организация = &ПартионнаяОрганизация", УпрУчет);
	
	СтруктураИзмерений = Новый Структура("ХарактеристикаЗатраты, СерияЗатраты, Качество");
	РасширеннаяАналитикаУчета.ПолучитьИспользуемыеИзмерения(СтруктураИзмерений, УпрУчет);

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		
		ПостроительОтчета.Текст = ТекстЗапроса + "
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ЦенаВРознице,
		|	ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ                                   КАК Сумма,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.Остатки(&ДатаОстатков,
		|	                                                   Склад = &Склад
		|//	                                                 И ЦенаВРознице > 0
		|) КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ОстаткиПартий КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура"
		+?(СтруктураИзмерений.ХарактеристикаЗатраты,"
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры","")
		+?(УчитыватьСерии И СтруктураИзмерений.СерияЗатраты, "
		|	И (ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры
		|		ИЛИ НЕ ОстаткиТоваров.Номенклатура.ВестиПартионныйУчетПоСериям)", "") + "
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.ЦенаВРознице";
	Иначе
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			РегОстатки = "ТоварыНаСкладах";
		Иначе
			РегОстатки = "ТоварыВРознице";
		КонецЕсли;
		
		ПостроительОтчета.Текст = ТекстЗапроса + "
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.Качество,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
		|	ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ                                  КАК Сумма
		|ИЗ
		|	РегистрНакопления." + РегОстатки + ".Остатки(&ДатаОстатков, Склад = &Склад)
		|КАК ОстаткиТоваров
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ОстаткиПартий КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура"
		+?(СтруктураИзмерений.ХарактеристикаЗатраты,"
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры","")
		+?(УчитыватьСерии И СтруктураИзмерений.СерияЗатраты, "
		|	И (ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры
		|		ИЛИ НЕ ОстаткиТоваров.Номенклатура.ВестиПартионныйУчетПоСериям)", "")
		+?(СтруктураИзмерений.Качество,"
		|	И ОстаткиТоваров.Качество                   = ОстаткиПартий.Качество","")+"
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Качество";

	КонецЕсли;

	Запрос = ПостроительОтчета.ПолучитьЗапрос();
	
	Запрос.УстановитьПараметр("Склад",           Склад);
	Запрос.УстановитьПараметр("ПартионныйСклад", ВремСклад);
	Запрос.УстановитьПараметр("ПартионнаяОрганизация", ВремОрганизация);
	Запрос.УстановитьПараметр("ДатаОстатков",    ДатаОстатков);		
	Запрос.УстановитьПараметр("РазделУчета",Перечисления.РазделыУчета.МПЗ);
	Запрос.УстановитьПараметр("ДатаОстатковЗатрат", Новый Граница(КонецМесяца(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоМесяца",    НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецМесяца",     КонецМесяца(Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.КоличествоУчет   = Выборка.Количество;
		СтрокаТабличнойЧасти.Количество       = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.КоличествоУчет);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаХранения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.КоэффициентЕдиницыХранения;
		Если УпрУчет Тогда
			СтрокаТабличнойЧасти.СуммаУчет        = Выборка.Сумма;
		Иначе
			СтрокаТабличнойЧасти.СуммаУчет        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, мВалютаРегламентированногоУчета,
			                                        ВалютаУпрУчета, 1, КурсУпрУчета, 1, КратностьУпрУчета);
		КонецЕсли;											
			
		СтрокаТабличнойЧасти.Сумма            = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.СуммаУчет);
		СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.КоличествоУчет;

		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтрокаТабличнойЧасти.ЦенаВРознице = Выборка.ЦенаВРознице;
		Иначе
			СтрокаТабличнойЧасти.Качество     = Выборка.Качество;
		КонецЕсли;

		Если УпрУчет Тогда
			СтрокаТабличнойЧасти.СуммаРегл        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ВалютаУпрУчета,
			                                        мВалютаРегламентированногоУчета, КурсУпрУчета, 1, КратностьУпрУчета, 1);
		Иначе
			СтрокаТабличнойЧасти.СуммаРегл = Выборка.Сумма;
		КонецЕсли;	

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		Если УчитыватьСерии Тогда
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоОстаткамНаСкладе()

// Заполняет документ по остаткам на складе
// 
Процедура ЗаполнитьПоОстаткамНаСкладе(ПостроительОтчета, ТолькоУчетные = Ложь, УпрУчет=Истина) Экспорт

	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
	  И (НЕ ЗначениеЗаполнено(ДатаОстатков)
	  ИЛИ (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата)) Тогда
		ЗаполнитьПоОстаткамНаСкладеРасширеннаяАналитика(ПостроительОтчета, ДатаОстатков, ТолькоУчетные, УпрУчет);
		Возврат;
	КонецЕсли;	
	
	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	
	Если УпрУчет Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, МоментВремени());				
		ВремОрганизация = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладам;
	Иначе
		ВремОрганизация = Организация;
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладамРегл;
	КонецЕсли;	
		
	Если ВестиПартионныйУчетПоСкладам Тогда
		ВремСклад = Склад;
	Иначе
		ВремСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	ВалютаУпрУчета    = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда

		ПостроительОтчета.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ЦенаВРознице,
		|	ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ                                   КАК Сумма,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.Остатки(&ДатаОстатков,
		|	                                                   Склад = &Склад
		|//	                                                 И ЦенаВРознице > 0
		|) КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаОстатков, 
		|	                                                  Склад = &ПартионныйСклад И Организация = &ПартионнаяОрганизация) КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры"
		+?(УчитыватьСерии, "
		|	И (ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры
		|		ИЛИ НЕ ОстаткиТоваров.Номенклатура.ВестиПартионныйУчетПоСериям)", "") + "
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.ЦенаВРознице";
	Иначе
		/// Кунов О.В., 06.10.2014 - 32066
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Или Не ЗначениеЗаполнено(Склад) Тогда
		///
			РегОстатки = "ТоварыНаСкладах";
		Иначе
			РегОстатки = "ТоварыВРознице";
		КонецЕсли;

		ПостроительОтчета.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.Качество,
		/// Кунов О.В., 01.10.2014 - 32066
		|	ОстаткиТоваров.Склад КАК Склад,
		|	МестаХранения.МестоХранения КАК МестоХранения,
		///
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
		|	ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ                                  КАК Сумма
		|ИЗ
		|	РегистрНакопления." + РегОстатки + ".Остатки(&ДатаОстатков, Склад В (&Склады))
		|КАК ОстаткиТоваров
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&ДатаОстатков, 
		/// Кунов О.В., 06.10.2014 - 32066
		|	                                                  Склад = &ПартионныйСклад И Организация = &ПартионнаяОрганизация) КАК ОстаткиПартий
		///
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры"
		+?(УчитыватьСерии, "
		|	И (ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры
		|		ИЛИ НЕ ОстаткиТоваров.Номенклатура.ВестиПартионныйУчетПоСериям)", "") + "
		|	И ОстаткиТоваров.Качество                   = ОстаткиПартий.Качество
		|
		/// Кунов О.В., 01.10.2014 - 32066
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХранения
		|ПО ОстаткиТоваров.Номенклатура = МестаХранения.Номенклатура И ОстаткиТоваров.Склад = МестаХранения.Склад И МестаХранения.Приоритет = 0
		///
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Качество,
		/// Кунов О.В., 01.10.2014 - 32066
		|	ОстаткиТоваров.Склад,
		|	МестаХранения.МестоХранения
		|УПОРЯДОЧИТЬ ПО
		|	ОстаткиТоваров.Номенклатура.Наименование";
		///

	КонецЕсли;

	Запрос = ПостроительОтчета.ПолучитьЗапрос();

	Запрос.УстановитьПараметр("Склад",           Склад);
	
	/// Кунов О.В., 01.10.2014 - 32066
	//Если ПРГ_СобиратьСкладыПоМОЛ Тогда
	//	ЗапросПоискСкладов = Новый Запрос(
	//	"ВЫБРАТЬ
	//	|	ОтветственныеЛица1.СтруктурнаяЕдиница
	//	|ИЗ
	//	|	РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица1
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица КАК ОтветственныеЛица2
	//	|		ПО ОтветственныеЛица1.ФизическоеЛицо = ОтветственныеЛица2.ФизическоеЛицо
	//	|ГДЕ
	//	|	ОтветственныеЛица2.СтруктурнаяЕдиница = &Склад");
	//	ЗапросПоискСкладов.УстановитьПараметр("Склад", Склад);
	//	Склады = ЗапросПоискСкладов.Выполнить().Выгрузить().ВыгрузитьКолонку("СтруктурнаяЕдиница");
	//Иначе
	//	Склады = Новый Массив;
	//	Склады.Добавить(Склад);
	//КонецЕсли;
	//
	Если Склады.Количество() > 0 Тогда
		СкладыМ = Склады.ВыгрузитьКолонку("Склад");
	Иначе
		СкладыМ = Новый Массив;
		СкладыМ.Добавить(Склад);
	КонецЕсли;
	Запрос.УстановитьПараметр("Склады", СкладыМ);
	
	Запрос.УстановитьПараметр("ПартионныйСклад", ВремСклад);
	///	
	
	Запрос.УстановитьПараметр("ПартионнаяОрганизация", ВремОрганизация);
	Запрос.УстановитьПараметр("ДатаОстатков",    ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Если НЕ УпрУчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.ПартииТоваровНаСкладах","РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет");
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.КоличествоУчет   = Выборка.Количество;
		СтрокаТабличнойЧасти.Количество       = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.КоличествоУчет);
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаХранения;
		СтрокаТабличнойЧасти.Коэффициент      = Выборка.КоэффициентЕдиницыХранения;
		
		Если УпрУчет Тогда
			СтрокаТабличнойЧасти.СуммаУчет        = Выборка.Сумма;
		Иначе
			СтрокаТабличнойЧасти.СуммаУчет        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, мВалютаРегламентированногоУчета,
		                                        	ВалютаУпрУчета, 1, КурсУпрУчета, 1, КратностьУпрУчета);
		КонецЕсли;
												
		СтрокаТабличнойЧасти.Сумма            = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.СуммаУчет);
		СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.КоличествоУчет;

		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтрокаТабличнойЧасти.ЦенаВРознице = Выборка.ЦенаВРознице;
		Иначе
			СтрокаТабличнойЧасти.Качество     = Выборка.Качество;
		КонецЕсли;

		Если НЕ ТолькоУчетные Тогда
			Если УпрУчет Тогда
				СтрокаТабличнойЧасти.СуммаРегл        = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, ВалютаУпрУчета,
				                                        мВалютаРегламентированногоУчета, КурсУпрУчета, 1, КратностьУпрУчета, 1);
			Иначе											
                СтрокаТабличнойЧасти.СуммаРегл        = Выборка.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		Если УчитыватьСерии Тогда
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;
		
		/// Кунов О.В., 01.10.2014 - 32066
		СтрокаТабличнойЧасти.ПРГ_Склад = Выборка.Склад;
		СтрокаТабличнойЧасти.ПРГ_СчетУчета = СчетаУчетаВДокументах.ПолучитьСчетаУчетаНоменклатурыИзНастроек(Организация, Выборка.Номенклатура, Выборка.Склад, Дата).СчетУчетаБУ;
		СтрокаТабличнойЧасти.ПРГ_МестоХранения = Выборка.МестоХранения;
		//СтрокаТабличнойЧасти.ПРГ_ЗапчастьНепригодна
		///
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоОстаткамНаСкладе()

// Процедура перезаполняет учетные количества в документе
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Процедура ПерезаполнитьУчетныеКоличестваРасширеннаяАналитика(ДатаОстатков,ПостроительОтчета,УпрУчет) Экспорт

	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	Если УпрУчет Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, МоментВремени());				
		ВремОрганизация = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладам;
	Иначе
		ВремОрганизация = Организация;
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладамРегл;
	КонецЕсли;	
		
	Если ВестиПартионныйУчетПоСкладам Тогда
		ВремСклад = Склад;
	Иначе
		ВремСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;

	ВалютаУпрУчета    = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;
	
	Если УпрУчет 
	  И НЕ глЗначениеПеременной("РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет Тогда
		ОбщегоНазначения.Сообщение("Для выбранного режима использования расширенной аналитики управленческий учет себестоимости не ведется.
		|Суммы в документе могут быть заполнены не верно");
	КонецЕсли;	
	
	ТекстЗапроса = СформироватьТаблицуОстатковЗатратПоМПЗ("Склад = &ПартионныйСклад И Организация = &ПартионнаяОрганизация", УпрУчет);
	
	СтруктураИзмерений = Новый Структура("ХарактеристикаЗатраты, СерияЗатраты, Качество");
	РасширеннаяАналитикаУчета.ПолучитьИспользуемыеИзмерения(СтруктураИзмерений, УпрУчет);
	
	
	Если Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			РегОстатки = "ТоварыНаСкладах";
		Иначе
			РегОстатки = "ТоварыВРознице";
		КонецЕсли;

		ПостроительОтчета.Текст = ТекстЗапроса + "
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,","") + "
		|	ОстаткиТоваров.Качество,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток)                         КАК Количество,
		|	ВЫРАЗИТЬ( ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ КАК ЧИСЛО(15,2))                                           КАК Сумма
		|ИЗ
		|	РегистрНакопления." + РегОстатки + ".Остатки(&МоментДокумента, 
		|	                Номенклатура в (ВЫБРАТЬ Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
		|	              И Склад = &Склад)
		|КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ОстаткиПартий КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура"
		+?(СтруктураИзмерений.ХарактеристикаЗатраты,"
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры","")+"
		|	И ОстаткиПартий.Номенклатура в (Выбрать Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)"
		+?(УчитыватьСерии И СтруктураИзмерений.СерияЗатраты, "
		|	И ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры", "")
		+?(СтруктураИзмерений.Качество,"
		|	И ОстаткиТоваров.Качество = ОстаткиПартий.Качество","")+"
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Качество";

	Иначе

		ПостроительОтчета.Текст = ТекстЗапроса + "
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.ЦенаВРознице,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
		|	ВЫРАЗИТЬ( ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ КАК ЧИСЛО(15,2))                                                           КАК Сумма
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.Остатки(&МоментДокумента,
		|	                Номенклатура в (Выбрать Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
		|	              И Склад = &Склад) КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ОстаткиТоваров КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура"
		+?(СтруктураИзмерений.ХарактеристикаЗатраты,"
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры","")
		+?(УчитыватьСерии И СтруктураИзмерений.СерияЗатраты, "
		|	И ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры", "") + "
		|	И ОстаткиПартий.Номенклатура в (Выбрать Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)		
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.ЦенаВРознице";

	КонецЕсли;
	
	Запрос = ПостроительОтчета.ПолучитьЗапрос();

	Запрос.УстановитьПараметр("Склад",           Склад);
	Запрос.УстановитьПараметр("ПартионныйСклад", ВремСклад);
	Запрос.УстановитьПараметр("ПартионнаяОрганизация", ВремОрганизация);
	Запрос.УстановитьПараметр("ДокументСсылка",  Ссылка);
	Запрос.УстановитьПараметр("РазделУчета",Перечисления.РазделыУчета.МПЗ);
	Если ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("МоментДокумента", КонецДня(Дата));
	Иначе
		Запрос.УстановитьПараметр("МоментДокумента", МоментВремени());
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОстатков",  Запрос.Параметры.МоментДокумента);
	Запрос.УстановитьПараметр("ДатаОстатковЗатрат", Новый Граница(КонецМесяца(Дата),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоМесяца",    НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецМесяца",     КонецМесяца(Дата));
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();

	Для каждого СтрокаТабличнойЧасти ИЗ Товары Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
		Если УчитыватьСерии Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры",      СтрокаТабличнойЧасти.СерияНоменклатуры);
		КонецЕсли;
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда	
			СтруктураПоиска.Вставить("ЦенаВРознице", СтрокаТабличнойЧасти.ЦенаВРознице);
		Иначе
			СтруктураПоиска.Вставить("Качество",     СтрокаТабличнойЧасти.Качество);
		КонецЕсли;

		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);

		Если МассивСтрок.Количество() = 0 Тогда
			Если УпрУчет Тогда
				СтрокаТабличнойЧасти.КоличествоУчет = 0;
				СтрокаТабличнойЧасти.СуммаУчет      = 0;
			Иначе	
				СтрокаТабличнойЧасти.СуммаРегл		= 0;
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		Если УпрУчет Тогда
			СтрокаТабличнойЧасти.КоличествоУчет = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0,
			                                      МассивСтрок[0].Количество * МассивСтрок[0].КоэффициентЕдиницыХранения
			                                      / СтрокаТабличнойЧасти.Коэффициент);
			
			СтрокаТабличнойЧасти.СуммаУчет        = МассивСтрок[0].Сумма;
			
			СтрокаТабличнойЧасти.Цена           = ?(СтрокаТабличнойЧасти.КоличествоУчет = 0, 0,
			                                      СтрокаТабличнойЧасти.СуммаУчет / СтрокаТабличнойЧасти.КоличествоУчет);

		Иначе
			СтрокаТабличнойЧасти.СуммаРегл = МассивСтрок[0].Сумма;										
		КонецЕсли;										
		
	КонецЦикла;
КонецПроцедуры  // ПерезаполнитьУчетныеКоличества()

// Процедура перезаполняет учетные количества в документе
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Процедура ПерезаполнитьУчетныеКоличества(ПостроительОтчета,УпрУчет=Истина) Экспорт

#Если Клиент Тогда
	Если Товары.Количество() > 0 Тогда
		Если УпрУчет Тогда
			ТекстВопроса = "Перезаполнить учетные количества и суммы по данным управленческого учета?";
		Иначе
			ТекстВопроса = "Перезаполнить сумму регламентированного учета?";
		КонецЕсли;
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;

	// Документ должен быть записан, чтобы этот запрос сработал.
	Если Модифицированность() Тогда
		ТекстВопроса = "Перед заполнением следует записать документ.
		               |Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Синоним);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
#КонецЕсли

	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	
	Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
	  И (НЕ ЗначениеЗаполнено(ДатаОстатков)
	  ИЛИ (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата)) Тогда
		ПерезаполнитьУчетныеКоличестваРасширеннаяАналитика(ДатаОстатков,ПостроительОтчета,УпрУчет);
		Возврат;
	КонецЕсли;	

	ВалютаУпрУчета    = глЗначениеПеременной("ВалютаУправленческогоУчета");
	СтруктураКурса    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;
	
	ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
	
	Если УпрУчет Тогда
		СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, МоментВремени());				
		ВремОрганизация = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладам;
	Иначе
		ВремОрганизация = Организация;
		ВестиПартионныйУчетПоСкладам = ПараметрыПартионногоУчета.ВестиПартионныйУчетПоСкладамРегл;
	КонецЕсли;	
		
	Если ВестиПартионныйУчетПоСкладам Тогда
		ВремСклад = Склад;
	Иначе
		ВремСклад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Если Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			РегОстатки = "ТоварыНаСкладах";
		Иначе
			РегОстатки = "ТоварыВРознице";
		КонецЕсли;

		ПостроительОтчета.Текст =
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,","") + "
		|	ОстаткиТоваров.Качество,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток)                         КАК Количество,
		|	ВЫРАЗИТЬ( ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ КАК ЧИСЛО(15,2))                                          КАК Сумма
		|ИЗ
		|	РегистрНакопления." + РегОстатки + ".Остатки(&МоментДокумента, 
		|	                Номенклатура в (ВЫБРАТЬ Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
		|	              И Склад = &Склад)
		|КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&МоментДокумента, 
		|	                Номенклатура в (Выбрать Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
		|	              И Склад = &ПартионныйСклад И Организация = &ПартионнаяОрганизация) КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры"
		+?(УчитыватьСерии, "
		|	И ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры", "") + "
		|	И ОстаткиТоваров.Качество = ОстаткиПартий.Качество
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.Качество";

	Иначе

		ПостроительОтчета.Текст =
		"ВЫБРАТЬ
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.ЦенаВРознице,
		|	СУММА(ОстаткиТоваров.КоличествоОстаток) КАК Количество,
		|	ВЫРАЗИТЬ( ВЫБОР
		|		КОГДА (СУММА(ОстаткиПартий.КоличествоОстаток) = 0)
		|		  ИЛИ (СУММА(ОстаткиПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
		|			0 
		|		ИНАЧЕ
		|			СУММА(ОстаткиПартий.СтоимостьОстаток)*СУММА(ОстаткиТоваров.КоличествоОстаток)
		|			/ СУММА(ОстаткиПартий.КоличествоОстаток)
		|	КОНЕЦ КАК ЧИСЛО(15,2))                                                   КАК Сумма
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.Остатки(&МоментДокумента,
		|	                Номенклатура в (Выбрать Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
		|	              И Склад = &Склад) КАК ОстаткиТоваров
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(&МоментДокумента, 
		|	                Номенклатура в (Выбрать Номенклатура ИЗ Документ.ИнвентаризацияТоваровНаСкладе.Товары
		|	                                ГДЕ Документ.ИнвентаризацияТоваровНаСкладе.Товары.Ссылка = &ДокументСсылка)
		|	              И Склад = &ПартионныйСклад И Организация = &ПартионнаяОрганизация) КАК ОстаткиПартий
		|ПО
		|	ОстаткиТоваров.Номенклатура = ОстаткиПартий.Номенклатура
		|	И ОстаткиТоваров.ХарактеристикаНоменклатуры = ОстаткиПартий.ХарактеристикаНоменклатуры"
		+?(УчитыватьСерии, "
		|	И ОстаткиТоваров.СерияНоменклатуры          = ОстаткиПартий.СерияНоменклатуры", "") + "
		|
		|{ГДЕ ОстаткиТоваров.Номенклатура КАК Номенклатура, 
		|     ОстаткиТоваров.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа}
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Номенклатура,
		|	ОстаткиТоваров.ХарактеристикаНоменклатуры,"
		+?(УчитыватьСерии, "
		|	ОстаткиТоваров.СерияНоменклатуры,", "") + "
		|	ОстаткиТоваров.ЦенаВРознице";

	КонецЕсли;

	Запрос = ПостроительОтчета.ПолучитьЗапрос();

	Запрос.УстановитьПараметр("Склад",           Склад);
	Запрос.УстановитьПараметр("ПартионныйСклад", ВремСклад);
	Запрос.УстановитьПараметр("ПартионнаяОрганизация", ВремОрганизация);
	Запрос.УстановитьПараметр("ДокументСсылка",  Ссылка);
	Если ЭтоНовый() Тогда
		Запрос.УстановитьПараметр("МоментДокумента", КонецДня(Дата));
	Иначе
		Запрос.УстановитьПараметр("МоментДокумента", МоментВремени());
	КонецЕсли;

	Если НЕ УпрУчет Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"РегистрНакопления.ПартииТоваровНаСкладах","РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет");
	КонецЕсли;	
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();

	Для каждого СтрокаТабличнойЧасти ИЗ Товары Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",               СтрокаТабличнойЧасти.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
		Если УчитыватьСерии Тогда
			СтруктураПоиска.Вставить("СерияНоменклатуры",      СтрокаТабличнойЧасти.СерияНоменклатуры);
		КонецЕсли;
		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда	
			СтруктураПоиска.Вставить("ЦенаВРознице", СтрокаТабличнойЧасти.ЦенаВРознице);
		Иначе
			СтруктураПоиска.Вставить("Качество",     СтрокаТабличнойЧасти.Качество);
		КонецЕсли;

		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);

		Если МассивСтрок.Количество() = 0 Тогда
			Если УпрУчет Тогда
				СтрокаТабличнойЧасти.КоличествоУчет = 0;
				СтрокаТабличнойЧасти.СуммаУчет      = 0;
			Иначе	
				СтрокаТабличнойЧасти.СуммаРегл		= 0;
			КонецЕсли;	
			Продолжить;
		КонецЕсли;

		Если УпрУчет Тогда
			СтрокаТабличнойЧасти.КоличествоУчет = ?(СтрокаТабличнойЧасти.Коэффициент = 0, 0,
			                                      МассивСтрок[0].Количество * МассивСтрок[0].КоэффициентЕдиницыХранения
			                                      / СтрокаТабличнойЧасти.Коэффициент);
												  
			СтрокаТабличнойЧасти.СуммаУчет = МассивСтрок[0].Сумма;
			
			СтрокаТабличнойЧасти.Цена           = ?(СтрокаТабличнойЧасти.КоличествоУчет = 0, 0,
			                                      СтрокаТабличнойЧасти.СуммаУчет / СтрокаТабличнойЧасти.КоличествоУчет);
			
		Иначе
			СтрокаТабличнойЧасти.СуммаРегл = МассивСтрок[0].Сумма;										
		КонецЕсли;
											  
	КонецЦикла;
КонецПроцедуры  // ПерезаполнитьУчетныеКоличества()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);

	ОбработкаТабличныхЧастей.ЗаполнитьКачествоПоУмолчанию(Товары);
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()


Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

// <- Шевченков №40466
Функция ПолучитьЦенуИзРасходаВПартиях(ТекДата, ТекНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура,
	|	СУММА(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоОборот) КАК КоличествоОборот,
	|	СУММА(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьОборот) КАК СтоимостьОборот,
	|	СУММА(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьОборот / ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоОборот) КАК Цена
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Обороты(НАЧАЛОПЕРИОДА(&ТекДата, МЕСЯЦ), КОНЕЦПЕРИОДА(&ТекДата, МЕСЯЦ), Период, Номенклатура = &Номенклатура) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОбороты
	|ГДЕ
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоОборот <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура";
	Запрос.УстановитьПараметр("Номенклатура", ТекНоменклатура);
	Запрос.УстановитьПараметр("ТекДата", ТекДата);
	
	РезТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ?(РезТЗ<>Неопределено, РезТЗ[0].Цена, 0);
	
КонецФункции
// ->

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУпрУчета                 = глЗначениеПеременной("ВалютаУправленческогоУчета");

