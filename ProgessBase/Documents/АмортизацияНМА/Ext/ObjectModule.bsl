Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА


#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ПериодРегистрации");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет движения по регистрам регл
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	
		ТабАмортизацииБУ  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР_БухРегл(КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации),СтруктураШапкиДокумента.Организация);

		//Движения по регистру СтоимостьНМАБухгалтерскийУчет
		НаборДвиженийБУ = Движения.СтоимостьНМАБухгалтерскийУчет;
		ТаблицаДвиженийБУ = НаборДвиженийБУ.Выгрузить();
		ТаблицаДвиженийБУ.Очистить();
		
		ТабАмортизацииБУ.Колонки.Бух.Имя = "Амортизация";
		ТабАмортизацииБУ.Колонки.НМА.Имя  = "НематериальныйАктив";
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабАмортизацииБУ, ТаблицаДвиженийБУ);
		
		ТаблицаДвиженийБУ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
		
		НаборДвиженийБУ.мПериод          = КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации);
		НаборДвиженийБУ.мТаблицаДвижений = ТаблицаДвиженийБУ;
		НаборДвиженийБУ.ВыполнитьПриход();
		
		ТабАмортизацииБУ.Колонки.Амортизация.Имя = "Сумма";
		ТабАмортизацииБУ.Колонки.НематериальныйАктив.Имя  = "ОбъектУчета";
		ТабАмортизацииБУ.Колонки.СчетАмортизацииБУ.Имя = "СчетАмортизации";
		ТабАмортизацииБУ.Колонки.Добавить("СчетАмортизацииНУ");

		мПроводкиБУ = Движения.Хозрасчетный;
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизацииБУ, СтруктураШапкиДокумента,"Бух","НА");	
		мПроводкиБУ.Записать(Ложь);
		
		Если ОтражатьВУправленческомУчете Тогда
			
			ТабАмортизации = ТабАмортизацииБУ.Скопировать();

			// Для документа, у которого нет валюты переведем в валюту управленческого учета.
			Для каждого Амортизация из ТабАмортизации Цикл
				Амортизация.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Амортизация.Сумма,
															   мВалютаРегламентированногоУчета,
															   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
															   1,
															   СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
															   1,
															   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	        КонецЦикла;
			
			УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямУпр(ЭтотОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента);
		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда

		ТабАмортизацииНУ = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНМА_НИОКР_НалогРегл(ЭтотОбъект, КонецМесяца(ПериодРегистрации), СтруктураШапкиДокумента.Организация);

		ТабАмортизацииНУ.Колонки.Налог.Имя = "Сумма";
		ТабАмортизацииНУ.Колонки.НМА.Имя = "ОбъектУчета";
		ТабАмортизацииНУ.Колонки.Добавить("СчетАмортизации");
		
		ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл)
			И ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18 Тогда
			
			НалоговыйУчет.РасчетРазницПоАмортизации(СтруктураШапкиДокумента, "НМА", "", ТабАмортизацииНУ, ТабЗатрат, ТабАмортизацииБУ);
		КонецЕсли;
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ЭтотОбъект, Отказ, Заголовок, ТабАмортизацииНУ, СтруктураШапкиДокумента,"Нал","НА");

		//Движения по регистру СтоимостьНМАБухгалтерскийУчет
		НаборДвиженийНУ = Движения.СтоимостьНМАНалоговыйУчет;
		ТаблицаДвиженийНУ = НаборДвиженийНУ.Выгрузить();
		ТаблицаДвиженийНУ.Очистить();
		
		ТабАмортизацииНУ.Колонки.Сумма.Имя = "Амортизация";
		ТабАмортизацииНУ.Колонки.ОбъектУчета.Имя  = "НематериальныйАктив";
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабАмортизацииНУ, ТаблицаДвиженийНУ);
		
		ТаблицаДвиженийНУ.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");
		
		НаборДвиженийНУ.мПериод          = КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации);
		НаборДвиженийНУ.мТаблицаДвижений = ТаблицаДвиженийНУ;
		НаборДвиженийНУ.ВыполнитьПриход();
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью



мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");


