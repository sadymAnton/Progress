Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

Перем ТаблицаПлатежейУпр;

//Определение периода движений документа
Перем ДатаДвижений;

Перем РасчетыВозврат;

Перем мСтруктураПараметровДенежныхСредств;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет данные по УСН
//
Процедура ЗаполнитьНастройкуКнигиУСН() Экспорт

	Если РучнаяНастройка_УСН Тогда
		ТекстВороса = 
		"Отражение платежа в Книге учета доходов и расходов настроено вручную.
		|Перезаполнить показатели Книги учета доходов и расходов?";
		Если Вопрос(ТекстВороса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			РучнаяНастройка_УСН = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СуммаДляКУДиР = СуммаДокумента;

	Если НЕ ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		КурсВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СуммаДляКУДиР = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР, ВалютаДокумента, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
	КонецЕсли;

	Если НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата) Тогда

		Графа4_УСН      = СуммаДляКУДиР;
		Графа5_УСН      = СуммаДляКУДиР;
		Графа6_УСН      = 0;
		Графа7_УСН      = 0;
		НДС_УСН         = 0;
		ДоходыЕНВД_УСН  = Ложь;
		РасходыЕНВД_УСН = Ложь;
		Содержание_УСН  = "" + ВидОперации + ".";

		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
			Содержание_УСН = "Возврат денежных средств покупателю.";
			Графа4_УСН      = 0;
			Графа5_УСН      = 0;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьНастройкуКнигиУСН()

#КонецЕсли

// Заполнение табличной части перечисления ЗП данными клиент-банка
//
// Параметры
//  ТаблицаПлатежей  – ТаблицаЗначений – Таблица перечислений денежных средств физлицам
//  Основание  – Документ основание
//
Процедура ЗаполнитьПеречислениеЗППоОбменуСБанком(ТаблицаПлатежей, Основание) Экспорт

	ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗП;
	
	ДокументОснование = Основание;
	СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	
	ПеречислениеЗаработнойПлаты.Загрузить(ТаблицаПлатежей);
	
	СуммаДокумента = ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");

КонецПроцедуры // ЗаполнитьПеречислениеЗППоОбменуСБанком()

//Заполняет сумму документа и расшифровку платежа по расчетному документу
 //
Процедура ЗаполнитьПоРасчетномуДокументуУпр() Экспорт
	
	Организация     = РасчетныйДокумент.Организация;
	СчетОрганизации = РасчетныйДокумент.СчетОрганизации;
	
	Контрагент      = РасчетныйДокумент.Контрагент;
	СчетКонтрагента = РасчетныйДокумент.СчетКонтрагента;
	
	ВалютаДокумента = РасчетныйДокумент.ВалютаДокумента;
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
	
	ВидОперацииДокумент = РасчетныйДокумент.ВидОперации;
	
	Если ВидОперацииДокумент = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;
	ИначеЕсли ВидОперацииДокумент = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику;
	ИначеЕсли ВидОперацииДокумент = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога;
	ИначеЕсли ВидОперацииДокумент = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;
	ИначеЕсли ВидОперацииДокумент = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам;
	ИначеЕсли ВидОперацииДокумент = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗП;
	ИначеЕсли ВидОперацииДокумент = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств;
	ИначеЕсли ВидОперацииДокумент = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами Тогда
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	ИначеЕсли ВидОперацииДокумент = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет;
	ИначеЕсли ВидОперацииДокумент = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику;
	Иначе
		ВидОперации = ВидОперацииДокумент;
	КонецЕсли;
		
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		
	ОтраженоВОперУчете          = РасчетныйДокумент.ОтраженоВОперУчете;
	ОтражатьВБухгалтерскомУчете = РасчетныйДокумент.ОтражатьВБухгалтерскомУчете;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
	    //По расшифровке платежа 
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДенежныеСредстваКСписаниюОстатки.ДокументСписания,
		|	ДенежныеСредстваКСписаниюОстатки.СуммаОстаток,
		|	ДенежныеСредстваКСписаниюОстатки.СтатьяДвиженияДенежныхСредств,
		|	РасчетныйДокумент.ДоговорКонтрагента,
		|	РасчетныйДокумент.Сделка,
		|	РасчетныйДокумент.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	РасчетныйДокумент.СуммаПлатежа,
		|	РасчетныйДокумент.КурсВзаиморасчетов,
		|	РасчетныйДокумент.КратностьВзаиморасчетов,
		|	РасчетныйДокумент.СуммаВзаиморасчетов,
		|	РасчетныйДокумент.СтавкаНДС,
		|	РасчетныйДокумент.СуммаНДС,
		|	РасчетныйДокумент.СчетУчетаРасчетовСКонтрагентом,
		|	РасчетныйДокумент.СчетУчетаРасчетовПоАвансам,
		|	РасчетныйДокумент.Проект
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКСписанию.Остатки(, ДокументСписания = &РасчетныйДокумент) КАК ДенежныеСредстваКСписаниюОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + РасчетныйДокумент.Метаданные().Имя + ".РасшифровкаПлатежа КАК РасчетныйДокумент
		|		ПО ДенежныеСредстваКСписаниюОстатки.ДокументСписания = РасчетныйДокумент.Ссылка";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Результат);
			
			КоэффициентПересчета = ?(Результат.СуммаДокумента = 0, 0, Результат.СуммаОстаток / Результат.СуммаДокумента);
			
			СтрокаПлатеж.СуммаПлатежа        = Результат.СуммаПлатежа * КоэффициентПересчета;
			СтрокаПлатеж.СуммаВзаиморасчетов = Результат.СуммаВзаиморасчетов * КоэффициентПересчета;
			СтрокаПлатеж.СуммаНДС            = Результат.СуммаНДС * КоэффициентПересчета;
			
		КонецЦикла;
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");

	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДенежныеСредстваКСписаниюОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКСписанию.Остатки(, ДокументСписания=&РасчетныйДокумент) КАК ДенежныеСредстваКСписаниюОстатки";
					 
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		СуммаДокумента = Выборка.СуммаОстаток;
		
		СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
		СтатьяДвиженияДенежныхСредств = РасчетныйДокумент.СтатьяДвиженияДенежныхСредств;
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
		
			ФизЛицо                       = РасчетныйДокумент.ФизЛицо;
			ВалютаВзаиморасчетовРаботника = РасчетныйДокумент.ВалютаВзаиморасчетовРаботника;
			РасчетныйДокументРаботника    = РасчетныйДокумент.РасчетныйДокументРаботника;
			ДатаПогашенияАванса           = РасчетныйДокумент.ДатаПогашенияАванса;
			
			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			СтрокаПлатеж.СуммаВзаиморасчетов     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
				ВалютаДокумента, ВалютаВзаиморасчетовРаботника,
				КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
				КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
			
		Иначе
		
			СчетУчетаРасчетовСКонтрагентом = РасчетныйДокумент.СчетУчетаРасчетовСКонтрагентом;
			СубконтоДт1 = РасчетныйДокумент.СубконтоДт1;
	    	СубконтоДт2 = РасчетныйДокумент.СубконтоДт2;
			СубконтоДт3 = РасчетныйДокумент.СубконтоДт3;
			
		КонецЕсли;
		
	КонецЕсли;	
		
КонецПроцедуры // ЗаполнитьПоРасчетномуДокументуУпр()

//Заполняет табличную часть документа при операции "Перечисление заработной платы"
//
Процедура ЗаполнитьДокументПоОснованиюРегл(Основание) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Основание",Основание);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Организация,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость,
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.СтатьяДвиженияДенежныхСредств,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма, 0) + ЕСТЬNULL(ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты, 0) КАК СуммаПлатежа
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|			ПО (СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка)
	|				И (СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо)
	|		ПО ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|ГДЕ
	|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &Основание
	|	И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо ЕСТЬ NULL ";
	
	ТаблицаВыплат = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаВыплат.Количество() = 0 Тогда
		ПеречислениеЗаработнойПлаты.Очистить();
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТаблицаВыплат[0]);
		ПеречислениеЗаработнойПлаты.Загрузить(ТаблицаВыплат);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу, аналогичную таблице "Расшифровка платежа" с добавленной колонкой "СуммаУпр"
//
Процедура ПолучитьТаблицуПлатежейППУпр()
	
	Запрос = Новый Запрос;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗП Тогда
		
		ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(ДатаДвижений,ВалютаДокумента,Ссылка, "ПлатежныйОрдерСписаниеДенежныхСредств");

	Иначе
		
		Если ПеречислениеЗаработнойПлаты.Количество() > 0 Тогда
		
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
			|	НЕОПРЕДЕЛЕНО КАК Сделка,
			|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетовСКонтрагентом,
			|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
			|	НЕОПРЕДЕЛЕНО КАК ВедениеВзаиморасчетов,
			|	ПеречислениеЗаработнойПлатыДок.СуммаПлатежа КАК СуммаПлатежа,
			|	ПеречислениеЗаработнойПлатыДок.СуммаПлатежа КАК СуммаВзаиморасчетов,
			|	ПеречислениеЗаработнойПлатыДок.СуммаПлатежа КАК СуммаПлатежаПлан,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &ВалютаДокумента = &ВалютаУпрУчета
			|				ТОГДА ПеречислениеЗаработнойПлатыДок.СуммаПлатежа
			|			КОГДА &ВалютаДокумента <> &ВалютаУпрУчета
			|					И КурсыДокумента.Курс <> 0
			|					И КурсыУпрУчета.Курс <> 0
			|				ТОГДА ПеречислениеЗаработнойПлатыДок.СуммаПлатежа * КурсыДокумента.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &ВалютаДокумента = &ВалютаРеглУчета
			|				ТОГДА ПеречислениеЗаработнойПлатыДок.СуммаПлатежа
			|			КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
			|					ИЛИ КурсыДокумента.Курс ЕСТЬ NULL 
			|				ТОГДА 0
			|			КОГДА &ВалютаДокумента <> &ВалютаРеглУчета
			|					И КурсыДокумента.Курс <> 0
			|				ТОГДА ПеречислениеЗаработнойПлатыДок.СуммаПлатежа * КурсыДокумента.Курс / КурсыДокумента.Кратность
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
			|	ПеречислениеЗаработнойПлатыДок.СтатьяДвиженияДенежныхСредств,
			|	ПеречислениеЗаработнойПлатыДок.ДокументПланированияПлатежа,
			|	ПеречислениеЗаработнойПлатыДок.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь КАК ВключатьВПлатежныйКалендарь,
			|	ПеречислениеЗаработнойПлатыДок.Проект,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Курс
			|	КОНЕЦ КАК КурсДокумента,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Кратность
			|	КОНЕЦ КАК КратностьДокумента,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Курс
			|	КОНЕЦ КАК КурсУпрУчета,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Кратность
			|	КОНЕЦ КАК КратностьУпрУчета
			|ИЗ
			|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗаработнойПлатыДок
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсыДокумента
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ПеречислениеЗаработнойПлатыДок.Ссылка = &Ссылка";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
			|	НЕОПРЕДЕЛЕНО КАК Сделка,
			|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетовСКонтрагентом,
			|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
			|	НЕОПРЕДЕЛЕНО КАК ВедениеВзаиморасчетов,
			|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаПлатежа,
			|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаВзаиморасчетов,
			|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаПлатежаПлан,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &ВалютаДокумента = &ВалютаУпрУчета
			|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента
			|			КОГДА &ВалютаДокумента <> &ВалютаУпрУчета
			|					И КурсыДокумента.Курс <> 0
			|					И КурсыУпрУчета.Курс <> 0
			|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента * КурсыДокумента.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &ВалютаДокумента = &ВалютаРеглУчета
			|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента
			|			КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
			|					ИЛИ КурсыДокумента.Курс ЕСТЬ NULL 
			|				ТОГДА 0
			|			КОГДА &ВалютаДокумента <> &ВалютаРеглУчета
			|					И КурсыДокумента.Курс <> 0
			|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента * КурсыДокумента.Курс / КурсыДокумента.Кратность
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) КАК СтатьяДвиженияДенежныхСредств,
			|	ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка) КАК ДокументПланированияПлатежа,
			|	ЛОЖЬ КАК ВключатьВПлатежныйКалендарь,
			|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Курс
			|	КОНЕЦ КАК КурсДокумента,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Кратность
			|	КОНЕЦ КАК КратностьДокумента,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Курс
			|	КОНЕЦ КАК КурсУпрУчета,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Кратность
			|	КОНЕЦ КАК КратностьУпрУчета
			|ИЗ
			|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ВыплатаЗаработнойПлатыДок
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсыДокумента
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ВыплатаЗаработнойПлатыДок.Ссылка = &Ссылка";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаДокумента",   ДатаДвижений);
		Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
		Запрос.УстановитьПараметр("ВалютаУпрУчета",  глЗначениеПеременной("ВалютаУправленческогоУчета"));
		Запрос.УстановитьПараметр("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
		Запрос.УстановитьПараметр("Ссылка",          Ссылка);
		
		ТаблицаПлатежейУпр = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьТаблицуПлатежейППУпр()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж)

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура выполняет заполнение суммы документа и суммы взаиморасчетов по регистру расчетов с подотчетными лицами
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ФизЛицо",              ФизЛицо);
	Запрос.УстановитьПараметр("РасчетныйДокумент",    РасчетныйДокументРаботника);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовРаботника);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаДолга
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			,
	|			Организация = &Организация
	|				И ФизЛицо = &ФизЛицо
	|				И РасчетныйДокумент = &РасчетныйДокумент
	|				И Валюта = &ВалютаВзаиморасчетов) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток < 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов, 
		    ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
		    СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		    СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплата()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");
	
	Если ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет, на который производится перевод!");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

	СтруктураПолей = Новый Структура("Организация, Контрагент, СуммаДокумента");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	
	СтруктураПолей.Вставить("Контрагент");
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		
		Если Не Отказ Тогда
			
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли; 

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	мСтруктураПараметровДенежныхСредств.Вставить("РасчетыВозврат",            РасчетыВозврат);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",     ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",       СчетОрганизации);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",              ДатаДвижений);
	мСтруктураПараметровДенежныхСредств.Вставить("ПоРасчетномуДокументу",     ЗначениеЗаполнено(РасчетныйДокумент));
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКассаПолучатель", СчетКонтрагента);
		мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредствПолучатель",  Перечисления.ВидыДенежныхСредств.Безналичные);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("ФизЛицо",                    ФизЛицо);
		мСтруктураПараметровДенежныхСредств.Вставить("РасчетныйДокументРаботника", РасчетныйДокументРаботника);
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.ПровестиСписаниеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	Иначе
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры
 
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	// Бухгалтерские проводки документа
	Если не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	ДатаДока   = ДатаДвижений;
	
	РасчетыВВалюте = Ложь;
	СчетКт = УправлениеДенежнымиСредствами.ОпределитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетОрганизации, мВалютаРегламентированногоУчета, РасчетыВВалюте);
	
	Если ЕстьРасчетыСКонтрагентами Тогда
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок,СчетКт);
		Если Не (СтруктураПараметровДДС = Ложь) тогда
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям);
		Иначе
			БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенегПрочийРасход(ЭтотОбъект, РасчетыВВалюте, СчетКт, СтруктураШапкиДокумента,Отказ,Заголовок);
		Конецесли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Расчеты по кредитам и займам";
		
		Проводка.СчетДт      = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].ДоговорКонтрагента);
		
		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента, 1, 
				СтруктураШапкиДокумента.КратностьДокумента, 1);
		Иначе
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику
		Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = СтруктураШапкиДокумента.СуммаДокумента;
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога тогда
			Проводка.Содержание  = "Перечисление налога";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
			Проводка.Содержание = "Перечисление средств подотчетнику";
		Иначе
			Проводка.Содержание  = "Прочее списание денежных средств";
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
			Если РасчетыВВалюте Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизации", СтруктураШапкиДокумента.ФизЛицо);	
		Иначе
			Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
		КонецЕсли;
		
		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			СуммаПроводки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента, 1, 
				СтруктураШапкиДокумента.КратностьДокумента, 1);
		Иначе
			СуммаПроводки = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		Проводка.Сумма = СуммаПроводки;
		
		// Сформируем проводку по НУ
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
			И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ)
			И СтруктураШапкиДокумента.ВидОперации = 
				Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			
			Проводка.Сумма = СуммаПроводки;
			
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Прочее списание денежных средств";
			
			Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентомНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоНУДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоНУДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоНУДт3);
			
			Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ДоговорКонтрагента);
			
			Проводка.Сумма = СуммаПроводки;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		
		РасчетыВВалюте = Ложь;
		СчетДт = УправлениеДенежнымиСредствами.ОпределитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетКонтрагента, мВалютаРегламентированногоУчета, РасчетыВВалюте);
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Перевод средств на другой счет организации";
		
		Проводка.СчетДт      = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента, 1, 
				СтруктураШапкиДокумента.КратностьДокумента, 1);
		Иначе
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		
		НалоговыйУчетУСН.ПрочееДДС(ЭтотОбъект);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗП Тогда
		
		мУпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
		Если НЕ мУпрощенныйУчетВзаиморасчетов Тогда
			ДвиженияПоРегистрамЗарплРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамЗарплРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	// по регистру ВзаиморасчетыСРаботникамиОрганизаций
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Перечислено.Ссылка,
	|	Перечислено.Физлицо КАК Физлицо,
	|	СУММА(Перечислено.СуммаПлатежа) КАК СуммаВзаиморасчетов,
	|	Перечислено.Ведомость КАК Ведомость
	|ПОМЕСТИТЬ ВТПеречисления
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.ПеречислениеЗаработнойПлаты КАК Перечислено
	|ГДЕ
	|	Перечислено.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Перечислено.Физлицо,
	|	Перечислено.Ведомость,
	|	Перечислено.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Перечисления.Ведомость КАК Ведомость,
	|	Перечисления.Физлицо КАК Физлицо,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТСуммыПоВедомости
	|ИЗ
	|	ВТПеречисления КАК Перечисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ПО Перечисления.Ведомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|			И Перечисления.Физлицо = ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
	|ГДЕ
	|	Перечисления.СуммаВзаиморасчетов <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Перечисления.Ведомость,
	|	Перечисления.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Перечисления.Ведомость КАК Ведомость,
	|	Перечисления.Физлицо КАК Физлицо,
	|	СУММА(ДокументыПеречислений.СуммаПлатежа) КАК СуммаПлатежа
	|ПОМЕСТИТЬ ВТРанееВыплаченныеСуммы
	|ИЗ
	|	ВТПеречисления КАК Перечисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежныйОрдерСписаниеДенежныхСредств.ПеречислениеЗаработнойПлаты КАК ДокументыПеречислений
	|		ПО Перечисления.Физлицо = ДокументыПеречислений.Физлицо
	|			И Перечисления.Ведомость = ДокументыПеречислений.Ведомость
	|			И Перечисления.Ссылка <> ДокументыПеречислений.Ссылка
	|ГДЕ
	|	Перечисления.СуммаВзаиморасчетов <> 0
	|	И ДокументыПеречислений.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	Перечисления.Ведомость,
	|	Перечисления.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Перечисления.Ведомость КАК Ведомость,
	|	Перечисления.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТРанееЗарегистрировано
	|ИЗ
	|	ВТПеречисления КАК Перечисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|		ПО Перечисления.Физлицо = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо
	|			И Перечисления.Ведомость = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость
	|			И Перечисления.Ссылка <> СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор
	|ГДЕ
	|	Перечисления.СуммаВзаиморасчетов <> 0
	|	И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Перечисления.Ведомость,
	|	Перечисления.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Перечисления.Физлицо,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк) КАК СпособВыплаты,
	|	Перечисления.Ведомость.ХарактерВыплаты КАК ХарактерВыплаты,
	|	Перечисления.Ведомость.ПериодРегистрации КАК ПериодВзаиморасчетов,
	|	Перечисления.Ведомость,
	|	Перечисления.Ссылка.Дата КАК Период,
	|	Перечисления.Ссылка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Перечисления.СуммаВзаиморасчетов > ВЫБОР
	|				КОГДА ЕСТЬNULL(РанееВыплаченныеСуммы.СуммаПлатежа, 0) >= ЕСТЬNULL(СуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0)
	|					ТОГДА 0
	|				КОГДА ЕСТЬNULL(СуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0) > 0
	|					ТОГДА ЕСТЬNULL(СуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0) - ЕСТЬNULL(РанееВыплаченныеСуммы.СуммаПлатежа, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|			ТОГДА Перечисления.СуммаВзаиморасчетов - ВЫБОР
	|					КОГДА ЕСТЬNULL(РанееВыплаченныеСуммы.СуммаПлатежа, 0) >= ЕСТЬNULL(СуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0)
	|						ТОГДА 0
	|					КОГДА ЕСТЬNULL(СуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0) > 0
	|						ТОГДА ЕСТЬNULL(СуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0) - ЕСТЬNULL(РанееВыплаченныеСуммы.СуммаПлатежа, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА РанееЗарегистрировано.Ведомость ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РегистрироватьВыплату
	|ИЗ
	|	ВТПеречисления КАК Перечисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРанееВыплаченныеСуммы КАК РанееВыплаченныеСуммы
	|		ПО Перечисления.Ведомость = РанееВыплаченныеСуммы.Ведомость
	|			И Перечисления.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыПоВедомости КАК СуммыПоВедомости
	|		ПО Перечисления.Физлицо = СуммыПоВедомости.Физлицо
	|			И Перечисления.Ведомость = СуммыПоВедомости.Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРанееЗарегистрировано КАК РанееЗарегистрировано
	|		ПО Перечисления.Ведомость = РанееЗарегистрировано.Ведомость
	|			И Перечисления.Физлицо = РанееЗарегистрировано.Физлицо
	|ГДЕ
	|	Перечисления.СуммаВзаиморасчетов <> 0
	|	И ВЫБОР
	|			КОГДА Перечисления.СуммаВзаиморасчетов > ВЫБОР
	|					КОГДА ЕСТЬNULL(РанееВыплаченныеСуммы.СуммаПлатежа, 0) >= ЕСТЬNULL(СуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0)
	|						ТОГДА 0
	|					КОГДА ЕСТЬNULL(СуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0) > 0
	|						ТОГДА ЕСТЬNULL(СуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0) - ЕСТЬNULL(РанееВыплаченныеСуммы.СуммаПлатежа, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|				ТОГДА Перечисления.СуммаВзаиморасчетов - ВЫБОР
	|						КОГДА ЕСТЬNULL(РанееВыплаченныеСуммы.СуммаПлатежа, 0) >= ЕСТЬNULL(СуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0)
	|							ТОГДА 0
	|						КОГДА ЕСТЬNULL(СуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0) > 0
	|							ТОГДА ЕСТЬNULL(СуммыПоВедомости.КомпенсацияЗаЗадержкуЗарплаты, 0) - ЕСТЬNULL(РанееВыплаченныеСуммы.СуммаПлатежа, 0)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ <> 0";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("СпособВыплаты",	Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаВзаиморасчетов <> 0 Тогда
			СтрокаДвижения = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения,Выборка);
			СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЕсли;
		
	КонецЦикла;

	// По регистру расчетов с бюджетом по НДФЛ

	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПлДок.Ссылка.Дата > КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
	|			ТОГДА ПлДок.Ссылка.Дата
	|		ИНАЧЕ КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
	|	КОНЕЦ КАК ДатаНДФЛ
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.ПеречислениеЗаработнойПлаты КАК ПлДок
	|ГДЕ
	|	ПлДок.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПлДок.Ссылка.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДатаНДФЛ = Выборка.ДатаНДФЛ;
			
	СтруктураДокумента = Новый Структура("ДатаНДФЛ,Ссылка,Период,ОбособленноеПодразделение,Организация",ДатаНДФЛ,Ссылка,Дата,Организация,ГоловнаяОрганизация);
	
	ТекстТаблицыВыплаты = 
	"ВЫБРАТЬ
	|	ПеречислениеЗП.Физлицо КАК ФизЛицо,
	|	СУММА(ПеречислениеЗП.СуммаПлатежа) КАК Сумма
	|ПОМЕСТИТЬ ВТВыплатыФизлицам
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗП
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеречислениеЗП.Физлицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПеречислениеЗП.СуммаПлатежа) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	ПроведениеРасчетовПереопределяемый.СформироватьРасчетыПоНДФЛПриВыплате(СтруктураДокумента, ТекстТаблицыВыплаты, Движения.НДФЛРасчетыСБюджетом, Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)
	
	Если (ОтраженоВОперУчете ИЛИ (ОтражатьВБухгалтерскомУчете И Оплачено)) И (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
		
		ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
		
		Если Не Отказ Тогда
			УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(Дата, ТаблицаПлатежейУпр, Отказ, Заголовок,РасчетыВозврат);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Режим, Заголовок)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
		
		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога
			ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств Тогда

			ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
			
			УправлениеДенежнымиСредствами.ПроверитьСоответствиеРаботникаОрганизации(ФизЛицо, Организация, Дата, Отказ, Заголовок);
			
		ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента, Заголовок)

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       			, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                       			, "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьДенежныеСредстваКомитента"       , "КонтролироватьДенежныеСредстваКомитента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете
	
	Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;

	Иначе	
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		, КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	, КратностьДокумента);

	ДатаДвижений=УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата,ДатаОплаты);
	СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаДвижений);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если (Основание <> Неопределено) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание))) Тогда
		
		ДокументОснование  = Основание;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
			
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			
			ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику;
			ФизЛицо                       = Основание.ФизЛицо;
			РасчетныйДокументРаботника    = Основание;
			ВалютаВзаиморасчетовРаботника = Основание.ВалютаДокумента;
			
			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, ТекущаяДата());
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			ПроверкаКурсовВалют(СтрокаПлатеж);
			ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
			
		ИначеЕсли Основание.Метаданные().Реквизиты.Найти("Оплачено") <> Неопределено Тогда
			
			Если Основание.Оплачено Тогда
				Сообщить("Платежный ордер не вводится на основании документов, уже исполненных банком.");
				Возврат;
			КонецЕсли;
			
			РасчетныйДокумент = Основание;
			
			ЗаполнитьПоРасчетномуДокументуУпр();
			
			Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеЗП Тогда
				ЗаполнитьДокументПоОснованиюРегл(Основание)
			КонецЕсли;	
			
		Иначе
			
			УправлениеДенежнымиСредствами.ЗаполнитьРасходПоОснованию(ЭтотОбъект, Основание, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
			
		КонецЕсли;
		
	КонецЕсли;

	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	
	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(СтруктураШапкиДокумента, Заголовок);
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	РасчетыВозврат = УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	
	Если ЗначениеЗаполнено(РасчетныйДокумент)
		И РасчетныйДокумент.Оплачено 
		Тогда
		ОбщегоНазначения.СообщитьОбОшибке(Строка(РасчетныйДокумент)+" уже оплачен полностью. Проведение отменено.", Отказ, Заголовок);
	КонецЕсли;
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не совпадают сумма документа и ее расшифровка.",Отказ, Заголовок);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплата(), Отказ, Заголовок);
	
	Если ОтраженоВОперУчете И Не ВидОперации=Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПереводНаДругойСчет Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(), Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ПолучитьТаблицуПлатежейППУпр();
		
		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);
		ПроверитьЗаполнениеДокументаРегл(Отказ, Режим, Заголовок);
		
	КонецЕсли;
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете тогда
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
			мВалютаРегламентированногоУчета, Истина,Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
		
	Если НЕ Отказ 
		И ЗначениеЗаполнено(РасчетныйДокумент) 
		И НЕ РасчетныйДокумент.ЧастичнаяОплата 
		Тогда
		
			ИзменяемыйДокумент=РасчетныйДокумент.ПолучитьОбъект();
			Попытка
				ИзменяемыйДокумент.Заблокировать();
			Исключение
				Сообщить("Не удалось заблокировать документ "+ИзменяемыйДокумент+". Возможно, его форма открыта");
				Отказ = истина;
				Возврат;
			КонецПопытки;
			ИзменяемыйДокумент.Разблокировать();

			ИзменяемыйДокумент.ЧастичнаяОплата=Истина;
			ИзменяемыйДокумент.Записать(РежимЗаписиДокумента.Запись);
													
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Проверим необходимость снятия флага частичной оплаты у расчетного документа
	
	Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка
		|ИЗ
		|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств КАК ПлатежныйОрдерСписаниеДенежныхСредств
		|
		|ГДЕ
		|	ПлатежныйОрдерСписаниеДенежныхСредств.Ссылка <> &Ссылка И
		|  ПлатежныйОрдерСписаниеДенежныхСредств.РасчетныйДокумент=&РасчетныйДокумент И
		|	ПлатежныйОрдерСписаниеДенежныхСредств.Проведен";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("РасчетныйДокумент",РасчетныйДокумент);
		
		Результат=Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			ИзменяемыйДокумент=РасчетныйДокумент.ПолучитьОбъект();
			Попытка
				ИзменяемыйДокумент.Заблокировать();
			Исключение
				Сообщить("Не удалось заблокировать документ "+ИзменяемыйДокумент+". Возможно, его форма открыта");
				Отказ = истина;
				Возврат;
			КонецПопытки;
			ИзменяемыйДокумент.Разблокировать();

			ИзменяемыйДокумент.ЧастичнаяОплата=Ложь;
			ИзменяемыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
				
	КонецЕсли;

	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Оплачено=Истина;
	ДатаОплаты=Дата;
	
	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные);
