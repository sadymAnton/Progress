Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета Экспорт;

Перем мУказаниеПроектовВТабличнойЧастиДокументов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
		|Затраты.Сумма, Получатели.Сумма, Получатели.ПодразделениеПолучатель";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
		|Затраты.СуммаРегл, Получатели.СуммаРегл,
		|Затраты.СчетЗатрат, Получатели.СчетЗатратПолучатель, Получатели.ПодразделениеОрганизацииПолучатель";

	мСтрокаРеквизитыНалУчета = "Затраты.СуммаНал, Получатели.СуммаНал,
		|Затраты.СчетЗатратНУ, Получатели.СчетЗатратПолучательНУ";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура проверяет правильность заполнения реквизитов документа
//
Функция ПроверкаРеквизитов(Отказ, Заголовок) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		СтруктураПолейУчетнойПолитикиНУ = Новый Структура("ПоддержкаПБУ18");
		ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Бух", СтруктураПолейУчетнойПолитикиНУ);
	КонецЕсли;

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	РеквизитыШапки = "Организация";
	ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);

	РеквизитыТЧ = "СтатьяЗатрат, СтатьяЗатратПолучатель";

	ДополнитьРеквизитыТабличнойЧастиУпр(РеквизитыТЧ);
	ДополнитьРеквизитыТабличнойЧастиРегл(РеквизитыТЧ, СтруктураШапкиДокумента);

	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧ,    СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "Затраты");

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Затраты", Новый Структура(РеквизитыТЧ), Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
	УправлениеЗатратами.ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти(ЭтотОбъект, Затраты, "Затраты", "ПодразделениеОрганизацииПолучатель", Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СтатьяЗатрат",             "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат",           "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("СтатьяЗатратПолучатель",   "СтатьяЗатратПолучатель");
	СтруктураПолей.Вставить("ХарактерЗатратПолучатель", "СтатьяЗатратПолучатель.ХарактерЗатрат");
	ТабЗатрат = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Затраты", СтруктураПолей).Выгрузить();

	ПроверитьСтатьиЗатратВТЧ( "СтатьяЗатрат", "СчетЗатрат",        СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьСтатьиЗатратВТЧ( "СтатьяЗатратПолучатель","СчетЗатратПолучатель",СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Возврат СтруктураШапкиДокумента;

КонецФункции // ПроверкаРеквизитов()

Процедура ПроверитьСтатьиЗатратВТЧ(ИмяРеквСтатьяЗатрат, ИмяРеквСчетЗатрат, СтруктураШапкиДокумента, Отказ, Заголовок)
	Для Каждого СтрокаТЧ Из Затраты Цикл
		СтатЗатрат = СтрокаТЧ[ИмяРеквСтатьяЗатрат];
		флТребуетсяКонтроль = ложь;
		
		Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
			Если СтатЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				флТребуетсяКонтроль = истина;
			КонецЕсли;	
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТЧ[ИмяРеквСчетЗатрат], Неопределено);
			Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
				флТребуетсяКонтроль = истина;
			КонецЕсли;
		КонецЕсли;
		
		Если не флТребуетсяКонтроль Тогда
			Продолжить;
		КонецЕсли;
		
        Если СтатЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке("Укажите статью затрат с нематериальным видом затрат (таб.часть ""Затраты"" строка № " + СтрокаТЧ.НомерСтроки + ", реквизит """+?(ИмяРеквСтатьяЗатрат="СтатьяЗатрат","Статья затрат","Статья затрат - получатель")+""")", Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") + "Подразделение";

КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ") + "ПодразделениеОрганизации";

КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыТабличнойЧастиУпр(Реквизиты)
	
	Если Не ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	Реквизиты = Реквизиты + ", ПодразделениеПолучатель";

КонецПроцедуры // ДополнитьРеквизитыТабличнойЧастиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыТабличнойЧастиРегл(Реквизиты, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Реквизиты = Реквизиты + ", ПодразделениеОрганизацииПолучатель, СчетЗатрат, СчетЗатратПолучатель";
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Реквизиты = Реквизиты + ", СчетЗатратНУ, СчетЗатратПолучательНУ";
	КонецЕсли;

КонецПроцедуры // ДополнитьРеквизитыТабличнойЧастиРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоЗатратам, Отказ, Заголовок)
	
	УправлениеЗатратамиДвиженияПоРегистрам.СформироватьДвиженияПоОтражениюЗатрат(
		СтруктураШапкиДокумента,
		Неопределено, // ТаблицаЗатрат,
		Неопределено // ВидОтраженияВУчете
	);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоЗатратам, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоЗатратам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование проводок
	ТаблицаПоЗатратам.Свернуть("ПодразделениеОрганизацииПолучатель, СтатьяЗатрат, СтатьяЗатратПолучатель, ВидРасходовНУ,
		|НоменклатурнаяГруппа, НоменклатурнаяГруппаПолучатель, ОбъектСтроительства, ОбъектСтроительстваПолучатель,
		|СпособСтроительства, СпособСтроительстваПолучатель,
		|СчетЗатрат, СчетЗатратПолучатель, СчетЗатратНУ, СчетЗатратПолучательНУ,
		|Субконто1, Субконто2, Субконто3,
		|СубконтоНУ1, СубконтоНУ2, СубконтоНУ3,
		|СубконтоПолучатель1, СубконтоПолучатель2, СубконтоПолучатель3,
		|СубконтоПолучательНУ1, СубконтоПолучательНУ2, СубконтоПолучательНУ3
		|", "СуммаРегл, СуммаНал");
	
	Операция = Движения.Хозрасчетный;
	ОперацияНУ = Движения.Налоговый;
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоЗатратам Цикл
		
		Если УправлениеЗатратами.СчетаДтКтИАналитикаВПроводкеОдинаковые(СтрокаТабличнойЧасти, СтруктураШапкиДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		// Сформируем проводку по бухгалтерскому учету.
		НоваяПроводка = Операция.Добавить();
		НоваяПроводка.Организация = СтруктураШапкиДокумента.Организация;
		НоваяПроводка.Период      = СтруктураШапкиДокумента.Дата;
		НоваяПроводка.Сумма       = СтрокаТабличнойЧасти.СуммаРегл;
		НоваяПроводка.Содержание = "Корректировка затрат";
		
		ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТабличнойЧасти.СчетЗатратПолучатель);

		НоваяПроводка.СчетДт = СтрокаТабличнойЧасти.СчетЗатратПолучатель;
		Если ПроизводственныеРасходы Тогда
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "Подразделения",        СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТабличнойЧасти.НоменклатурнаяГруппаПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТабличнойЧасти.СтатьяЗатратПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТабличнойЧасти.ОбъектСтроительстваПолучатель);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, "СпособыСтроительства", СтрокаТабличнойЧасти.СпособСтроительстваПолучатель);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 1, СтрокаТабличнойЧасти.СубконтоПолучатель1);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 2, СтрокаТабличнойЧасти.СубконтоПолучатель2);
			БухгалтерскийУчет.УстановитьСубконто(НоваяПроводка.СчетДт, НоваяПроводка.СубконтоДт, 3, СтрокаТабличнойЧасти.СубконтоПолучатель3);
		КонецЕсли;
		
		УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(НоваяПроводка, СтрокаТабличнойЧасти, СтруктураШапкиДокумента, , "Кт");
		
		// Сформируем проводку по налоговому учету.
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если СтрокаТабличнойЧасти.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения
			   И Не СтруктураШапкиДокумента.ПоддержкаПБУ18
			Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяПроводкаНУ = ОперацияНУ.Добавить();
			НоваяПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
			НоваяПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
			НоваяПроводкаНУ.Сумма       = СтрокаТабличнойЧасти.СуммаНал;
			НоваяПроводкаНУ.Содержание = "Корректировка затрат";
			
			ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТабличнойЧасти.СчетЗатратПолучательНУ, "Налоговый");

			НоваяПроводкаНУ.СчетДт = СтрокаТабличнойЧасти.СчетЗатратПолучательНУ;
			Если ПроизводственныеРасходыНУ Тогда
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, "Подразделения",        СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, "НоменклатурныеГруппы", СтрокаТабличнойЧасти.НоменклатурнаяГруппаПолучатель);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, "СтатьиЗатрат",         СтрокаТабличнойЧасти.СтатьяЗатратПолучатель);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, "ОбъектыСтроительства", СтрокаТабличнойЧасти.ОбъектСтроительстваПолучатель);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, "СпособыСтроительства", СтрокаТабличнойЧасти.СпособСтроительстваПолучатель);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, 1, СтрокаТабличнойЧасти.СубконтоПолучательНУ1);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, 2, СтрокаТабличнойЧасти.СубконтоПолучательНУ2);
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, 3, СтрокаТабличнойЧасти.СубконтоПолучательНУ3);
			КонецЕсли;

			УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(НоваяПроводкаНУ, СтрокаТабличнойЧасти, СтруктураШапкиДокумента, "Налоговый" , "Кт");
			
			Если СтрокаТабличнойЧасти.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
				ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Иначе
				ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.НУ;
			КонецЕсли;
			НоваяПроводкаНУ.ВидУчетаДт = ВидУчетаПоПБУ18;
			НоваяПроводкаНУ.ВидУчетаКт = ВидУчетаПоПБУ18;
			
			// Сформируем проводку по временной разнице.
			Если СтрокаТабличнойЧасти.СуммаРегл <> СтрокаТабличнойЧасти.СуммаНал
			   И СтруктураШапкиДокумента.ПоддержкаПБУ18
			Тогда
				
				НоваяПроводкаНУ = ОперацияНУ.Добавить();
				НоваяПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				НоваяПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
				НоваяПроводкаНУ.Сумма       = СтрокаТабличнойЧасти.СуммаРегл - СтрокаТабличнойЧасти.СуммаНал;
				НоваяПроводкаНУ.Содержание = "Корректировка затрат";
				
				ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТабличнойЧасти.СчетЗатратПолучательНУ, "Налоговый");

				НоваяПроводкаНУ.СчетДт = СтрокаТабличнойЧасти.СчетЗатратПолучательНУ;
				Если ПроизводственныеРасходыНУ Тогда
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, "Подразделения",        СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, "НоменклатурныеГруппы", СтрокаТабличнойЧасти.НоменклатурнаяГруппаПолучатель);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, "СтатьиЗатрат",         СтрокаТабличнойЧасти.СтатьяЗатратПолучатель);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, "ОбъектыСтроительства", СтрокаТабличнойЧасти.ОбъектСтроительстваПолучатель);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, "СпособыСтроительства", СтрокаТабличнойЧасти.СпособСтроительстваПолучатель);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, 1, СтрокаТабличнойЧасти.СубконтоПолучательНУ1);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, 2, СтрокаТабличнойЧасти.СубконтоПолучательНУ2);
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетДт, НоваяПроводкаНУ.СубконтоДт, 3, СтрокаТабличнойЧасти.СубконтоПолучательНУ3);
				КонецЕсли;

				УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(НоваяПроводкаНУ, СтрокаТабличнойЧасти, СтруктураШапкиДокумента, "Налоговый" , "Кт");
				
				Если СтрокаТабличнойЧасти.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
					ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ПР;
				Иначе
					ВидУчетаПоПБУ18 = Перечисления.ВидыУчетаПоПБУ18.ВР;
				КонецЕсли;
				НоваяПроводкаНУ.ВидУчетаДт = ВидУчетаПоПБУ18;
				НоваяПроводкаНУ.ВидУчетаКт = ВидУчетаПоПБУ18;
					
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры // ДвиженияПоРегистрамРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПОДГОТОВКИ ТАБЛИЦ ЗНАЧЕНИЙ ДЛЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиЗатратыРегл(СтруктураПолей)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПолей.Вставить("СуммаРегл", 					"СуммаРегл");
	СтруктураПолей.Вставить("СуммаНал", 					"СуммаНал");

	СтруктураПолей.Вставить("СчетЗатрат", 					"СчетЗатрат");
	СтруктураПолей.Вставить("СчетЗатратНУ", 				"СчетЗатратНУ");
	СтруктураПолей.Вставить("СчетЗатратПолучатель", 		"СчетЗатратПолучатель");
	СтруктураПолей.Вставить("СчетЗатратПолучательНУ", 		"СчетЗатратПолучательНУ");
	
	СтруктураПолей.Вставить("Субконто1",             		"Субконто1");
	СтруктураПолей.Вставить("Субконто2",             		"Субконто2");
	СтруктураПолей.Вставить("Субконто3",             		"Субконто3");
	
	СтруктураПолей.Вставить("СубконтоНУ1",           		"СубконтоНУ1");
	СтруктураПолей.Вставить("СубконтоНУ2",           		"СубконтоНУ2");
	СтруктураПолей.Вставить("СубконтоНУ3",           		"СубконтоНУ3");
	
	СтруктураПолей.Вставить("СубконтоПолучатель1",   		"СубконтоПолучатель1");
	СтруктураПолей.Вставить("СубконтоПолучатель2",   		"СубконтоПолучатель2");
	СтруктураПолей.Вставить("СубконтоПолучатель3",   		"СубконтоПолучатель3");
	
	СтруктураПолей.Вставить("СубконтоПолучательНУ1",		"СубконтоПолучательНУ1");
	СтруктураПолей.Вставить("СубконтоПолучательНУ2", 		"СубконтоПолучательНУ2");
	СтруктураПолей.Вставить("СубконтоПолучательНУ3", 		"СубконтоПолучательНУ3");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиЗатратыРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента = ПроверкаРеквизитов(Отказ, Заголовок);

	// Подготовим таблицу затрат для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Сумма",     							"Сумма");
	СтруктураПолей.Вставить("Подразделение",						"Ссылка.Подразделение");
	СтруктураПолей.Вставить("ПодразделениеОрганизации",				"Ссылка.ПодразделениеОрганизации");
	СтруктураПолей.Вставить("СтатьяЗатрат",							"СтатьяЗатрат");
	СтруктураПолей.Вставить("ВидРасходовНУ",						"СтатьяЗатрат.ВидРасходовНУ");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", 				"НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Заказ",                				"Заказ");
	СтруктураПолей.Вставить("Продукция",							"Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции",				"ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияПродукции",						"СерияПродукции");
	СтруктураПолей.Вставить("СпособРаспределенияЗатратНаВыпуск",	"СпособРаспределенияЗатратНаВыпуск");
	СтруктураПолей.Вставить("ОбъектСтроительства",					"ОбъектСтроительства");
	СтруктураПолей.Вставить("СпособСтроительства",					"СпособСтроительства");
	
	СтруктураПолей.Вставить("ПодразделениеПолучатель",				"ПодразделениеПолучатель");
	СтруктураПолей.Вставить("ПодразделениеОрганизацииПолучатель", 	"ПодразделениеОрганизацииПолучатель");
	СтруктураПолей.Вставить("СтатьяЗатратПолучатель",				"СтатьяЗатратПолучатель");
	СтруктураПолей.Вставить("НоменклатурнаяГруппаПолучатель",		"НоменклатурнаяГруппаПолучатель");
	СтруктураПолей.Вставить("ОбъектСтроительстваПолучатель",		"ОбъектСтроительстваПолучатель");
	СтруктураПолей.Вставить("СпособСтроительстваПолучатель",		"СпособСтроительстваПолучатель");
	
	ДополнитьСтруктуруПолейТабличнойЧастиЗатратыРегл(СтруктураПолей);
	
	РезультатЗапросаПоЗатратам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Затраты", СтруктураПолей);
	ТаблицаПоЗатратам = РезультатЗапросаПоЗатратам.Выгрузить();
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоЗатратам, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним проекты в табличной части документа, если отключено указание проектов в табличной части.
	Если Не мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Затраты Цикл
			Если СтрокаТабличнойЧасти.Проект <> Проект Тогда
				СтрокаТабличнойЧасти.Проект = Проект;
			КонецЕсли;
			Если СтрокаТабличнойЧасти.ПроектПолучатель <> Проект Тогда
				СтрокаТабличнойЧасти.ПроектПолучатель = Проект;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");

мУказаниеПроектовВТабличнойЧастиДокументов = УправлениеПроектами.УказаниеПроектовВТабличнойЧастиДокументов();
