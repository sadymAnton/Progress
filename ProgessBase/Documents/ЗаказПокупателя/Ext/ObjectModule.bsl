//m.ionov@a-prof.ru 05.09.2014
//Добавили ввод на основании Претензии Покупателя и добавили данный документ в реквизит Документ Основание
//----m.ionov@a-prof.ru---
//++ Spl_Апроф 12.09.2014 (k.russkih@a-prof.ru) 
//Добавил ТЧ "ИсходныйЗаказ". Добавил реквизиты:  КП_СогласованоБухгалтерией,  КП_СогласованоКредитнымКонтролем
//Добавил тип данных в грузополучатель "адрес поставки"
//++ Spl_Апроф 17.09.2014 (k.russkih@a-prof.ru)
//Добавили отдельную форму документа "КП_ФормаДокумента"
//Добавил реквизит "КП_ВидЗаказаПокупателя" заменил им вид операции на форме элемента и списка
//-- Spl_Апроф

Перем мУдалятьДвижения;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента Экспорт;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов Экспорт;

// Хранит информацию о сумме без скидки документа.
Перем мСуммаДокументаБезСкидок Экспорт;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;

// Хранит иформацию для веб-приложения
Перем мСуммаВсего Экспорт;
Перем мСуммаВсегоНДС Экспорт;

Перем мУчетнаяПолитика Экспорт;
Перем мРезервироватьПоСериям Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

//{18.06.2015 Островерхий заявка №40747 
Перем мТабличнаяЧастьТоварыМодифицирована Экспорт; 
//18.06.2015 Островерхий}

/// Кунов О.В., 28.07.2015 - 42169
Перем мЕстьОтсрочкаПовышенияЦены Экспорт;
///

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьСчетаЗаказа и из веб-приложения
//
// Параметры:
//  Тип - строка, содержит тип печатаемого документа (счет или заказ)
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПараметрыПечатиСчетаЗаказа(Тип) Экспорт	
	
	ПараметрыПечати = Новый Структура;
	Позиции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Получатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("ЗаказПокупателя");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ (ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
	|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL Как Серия,
	|	ВложенныйЗапрос.НомерСтроки,
	|	Метка
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество)           КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма     )           КАК Сумма,
	|		СУММА(ЗаказПокупателя.СуммаНДС  )           КАК СуммаНДС,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК Характеристика,
	|		МИНИМУМ(ЗаказПокупателя.НомерСтроки)        КАК НомерСтроки,
	|		0                                           КАК Метка
	|	ИЗ
	|		Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ПроцентСкидкиНаценки,
	|		ЗаказПокупателя.ПроцентАвтоматическихСкидок,
	|		ЗаказПокупателя.Цена,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	ЗаказПокупателя.Номенклатура.Код     КАК Код,
	|	ЗаказПокупателя.Номенклатура.Артикул КАК Артикул,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
	|	ЗаказПокупателя.ПроцентСкидкиНаценки+ЗаказПокупателя.ПроцентАвтоматическихСкидок,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	ЗаказПокупателя.СуммаНДС,
	|	NULL,
	|	NULL,
	|	ЗаказПокупателя.НомерСтроки,
	|	1 КАК Метка
	|	
	|ИЗ
	|	Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	
	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПокупателя.Номенклатура) КАК Товар,
	|	ЗаказПокупателя.Номенклатура.Код            КАК Код,
	|	ЗаказПокупателя.Номенклатура.Артикул        КАК Артикул,
	|	ЗаказПокупателя.Количество,
	|	ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
	|	NULL,
	|	ЗаказПокупателя.Цена,
	|	ЗаказПокупателя.Сумма,
	|	(0)                                   КАК СуммаНДС,
	|	NULL,
	|	NULL,
	|	ЗаказПокупателя.НомерСтроки,
	|	3 КАК Метка
	|	
	|ИЗ
	|	Документ.ЗаказПокупателя.ВозвратнаяТара КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент
	
	
	
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	// Выводим шапку накладной

	ПараметрыПечати.Вставить("УчитыватьНДС", Шапка.УчитыватьНДС);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ПараметрыПечати.Вставить("ИНН", СведенияОПоставщике.ИНН);
		ПараметрыПечати.Вставить("КПП", СведенияОПоставщике.КПП);
		ПредставлениеПоставщикаДляПлатПоручения = "";
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СтруктурнаяЕдиница.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;

			ПараметрыПечати.Вставить("БИКБанкаПолучателя", БИК);
			ПараметрыПечати.Вставить("БанкПолучателя", Банк);
			ПараметрыПечати.Вставить("БанкПолучателяПредставление", СокрЛП(Банк) + " " + ГородБанка);
			ПараметрыПечати.Вставить("СчетБанкаПолучателя", КоррСчет);
			ПараметрыПечати.Вставить("СчетБанкаПолучателяПредставление", КоррСчет);
			ПараметрыПечати.Вставить("СчетПолучателяПредставление", НомерСчета);
			ПараметрыПечати.Вставить("СчетПолучателя", НомерСчета);
			ПредставлениеПоставщикаДляПлатПоручения = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ПараметрыПечати.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
	КонецЕсли; 

	Если Тип = "Счет" Тогда
		ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Счет на оплату"));
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя (на переработку)"));
		Иначе
			ПараметрыПечати.Вставить("ТекстЗаголовка", ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя"));
		КонецЕсли;
	КонецЕсли;
	ПараметрыПечати.Вставить("ТекстПоставщик", ?(Тип = "Счет", "Поставщик:", "Исполнитель:"));
	ПараметрыПечати.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ПараметрыПечати.Вставить("ТекстПокупатель", ?(Тип = "Счет", "Покупатель:", "Заказчик:"));
	ПараметрыПечати.Вставить("ПредставлениеПолучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));

	ПараметрыПечати.Вставить("ЕстьСкидки", Ложь);
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ПараметрыПечати.ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	ПараметрыПечати.Вставить("ВыводитьКоды", Ложь);
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ПараметрыПечати.ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ПараметрыПечати.ВыводитьКоды = Истина;
		Колонка = "Код";
	КонецЕсли;
	
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ПараметрыПечати.Вставить("ИмяКолонкиКодов", Колонка);
	КонецЕсли;

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		
		ПараметрыПозиции = Новый Структура;

		ПараметрыПозиции.Вставить("Номенклатура", ВыборкаСтрокТовары.Номенклатура);
		ПараметрыПозиции.Вставить("НомерСтроки", ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТовары.Артикул);
			Иначе
				ПараметрыПозиции.Вставить("Артикул", ВыборкаСтрокТовары.Код);
			КонецЕсли;
		КонецЕсли;

		ПараметрыПозиции.Вставить("Количество", ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена", ВыборкаСтрокТовары.Цена);
		ПараметрыПозиции.Вставить("Товар", СокрП(ВыборкаСтрокТовары.НаименованиеПолное) 
														+ ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
														+ ?(ВыборкаСтрокТовары.Метка = 3, " (возвратная тара)", ""));

		//++ Spl_Апроф 04.03.2015 (k.russkih@a-prof.ru)
		//Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);
		Скидка = Окр(ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.Количество, 2) - ВыборкаСтрокТовары.Сумма;

		Если ПараметрыПечати.ЕстьСкидки Тогда
			ПараметрыПозиции.Вставить("Скидка", Скидка);
			ПараметрыПозиции.Вставить("СуммаБезСкидки", ВыборкаСтрокТовары.Сумма + Скидка);
		КонецЕсли;

		ПараметрыПозиции.Вставить("Сумма", ВыборкаСтрокТовары.Сумма); 
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;
		
		Позиции.Добавить(ПараметрыПозиции);

	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	// Вывести Итого
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ПараметрыПечати.Вставить("ВсегоСкидок", ВсегоСкидок);
		ПараметрыПечати.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
	КонецЕсли;
	ПараметрыПечати.Вставить("Всего", ОбщегоНазначения.ФорматСумм(Сумма));

	// Вывести ИтогоНДС
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ПараметрыПечати.Вставить("НДС", ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:"));
		ПараметрыПечати.Вставить("ВсегоНДС", ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС")));
	КонецЕсли;

	// Вывести Сумму прописью
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ПараметрыПечати.Вставить("ИтоговаяСтрока", "Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента));
	ПараметрыПечати.Вставить("СуммаПрописью", ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента));

	// Вывести подписи
	Если Тип = "Счет" Тогда
		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;

		ПараметрыПечати.Вставить("ФИОРуководителя", "/" + Руководитель  + "/");
		ПараметрыПечати.Вставить("ФИОБухгалтера", "/" + Бухгалтер     + "/");
		ПараметрыПечати.Вставить("ФИООтветственный", "/" + Ответственный + "/");

	КонецЕсли; 
	
	Возврат ПараметрыПечати;

КонецФункции // ПолучитьПараметрыПечатиСчетаЗаказа()               

// Функция создает табличный документ для печати счета и заказа, 
// помещая в него готовые данные, переданные в виде структуры.
//
// Параметры:
//  Тип             - строка, содержит тип печатаемого документа (счет или заказ);
//  ПараметрыПечати - структура с данными для печати.
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция СоздатьТабличныйДокументПечатиСчетаЗаказа(Тип, ПараметрыПечати)
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	Макет = ПолучитьМакет("СчетЗаказ");

	/// Кунов О.В., 28.06.2016 - 54014
	ПечатнаяФорма = АП_ОбщегоНазначенияСервер.Определим_АП_ПечатныеФормыДокументов("", ЭтотОбъект);
	НастройкиПечатнойФормы = АП_ОбщегоНазначенияКлиент.ПолучимНастройкиПечатнойФормы(Ссылка, Контрагент, ПечатнаяФорма, Ложь);
	ВыводитьШтрихкод = НастройкиПечатнойФормы.Найти(Справочники.АП_НастройкиПечатныхФорм.ВыводитьШтрихКодВКолонку) <> Неопределено;
	
	Если ВыводитьШтрихкод Тогда
		
		Штрихкоды = Новый Соответствие;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураКонтрагентов.Номенклатура,
		|	НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК Штрихкод
		|ИЗ
		|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.Номенклатура В(&Номенклатура)
		|	И НоменклатураКонтрагентов.Контрагент = &Контрагент");
		
		Запрос.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Штрихкоды.Вставить(Выборка.Номенклатура, Выборка.Штрихкод);
		КонецЦикла;
		
	КонецЕсли;
	///
	
	// Выводим шапку накладной

 	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодов");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезСкидок");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = ПараметрыПечати.ИмяКолонкиКодов;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		ОбластьТовар.Параметры.Товар = "Продукция";
	Иначе
		ОбластьТовар.Параметры.Товар = "Товары (работы, услуги)";
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Увеличим ширину колонки Товар на ширину неиспользуемых колонок
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.5;
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 2.125;
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 2.625;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодов");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезСкидок");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");
	КонецЕсли;

	Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл 

		Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьКодов.Параметры.Заполнить(ПараметрыПозиции);
			
			/// Кунов О.В., 28.06.2016 - 54014
			Если ВыводитьШтрихкод Тогда
				Штрихкод = Штрихкоды[ПараметрыПозиции.Номенклатура];
				Если ЗначениеЗаполнено(Штрихкод) Тогда
					ОбластьКодов.Параметры.Артикул = СокрЛП(ПараметрыПозиции.Артикул) + Символы.ПС + Штрихкод;
				КонецЕсли;
			КонецЕсли;
			///
			
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ПараметрыПечати.ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Итого|Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодов");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезСкидок");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьНомера);
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ПараметрыПечати.ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // СоздатьТабличныйДокументПечатиСчетаЗаказа()

Функция СоздатьТабличныйДокументПечатиСчетаЗаказаENG(Тип, ПараметрыПечати)
		
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";

	Макет = ПолучитьМакет("СчетЗаказENG");

	/// Кунов О.В., 28.06.2016 - 54014
	ПечатнаяФорма = АП_ОбщегоНазначенияСервер.Определим_АП_ПечатныеФормыДокументов("", ЭтотОбъект);
	НастройкиПечатнойФормы = АП_ОбщегоНазначенияКлиент.ПолучимНастройкиПечатнойФормы(Ссылка, Контрагент, ПечатнаяФорма, Ложь);
	ВыводитьШтрихкод = НастройкиПечатнойФормы.Найти(Справочники.АП_НастройкиПечатныхФорм.ВыводитьШтрихКодВКолонку) <> Неопределено;
	
	Если ВыводитьШтрихкод Тогда
		
		Штрихкоды = Новый Соответствие;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураКонтрагентов.Номенклатура,
		|	НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК Штрихкод
		|ИЗ
		|	РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.Номенклатура В(&Номенклатура)
		|	И НоменклатураКонтрагентов.Контрагент = &Контрагент");
		
		Запрос.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Штрихкоды.Вставить(Выборка.Номенклатура, Выборка.Штрихкод);
		КонецЦикла;
		
	КонецЕсли;
	///
	
	// Выводим шапку накладной

 	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодов");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезСкидок");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = ПараметрыПечати.ИмяКолонкиКодов;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		ОбластьТовар.Параметры.Товар = "Продукция";
	Иначе
		ОбластьТовар.Параметры.Товар = "Товары (работы, услуги)";
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Увеличим ширину колонки Товар на ширину неиспользуемых колонок
	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.5;
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 2.125;
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 2.625;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодов");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезСкидок");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");
	КонецЕсли;

	Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл 

		Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Вывести(ОбластьНомера);

		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьКодов.Параметры.Заполнить(ПараметрыПозиции);
			
			/// Кунов О.В., 28.06.2016 - 54014
			Если ВыводитьШтрихкод Тогда
				Штрихкод = Штрихкоды[ПараметрыПозиции.Номенклатура];
				Если ЗначениеЗаполнено(Штрихкод) Тогда
					ОбластьКодов.Параметры.Артикул = СокрЛП(ПараметрыПозиции.Артикул) + Символы.ПС + Штрихкод;
				КонецЕсли;
			КонецЕсли;
			///
			
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьДанных);

		Если ПараметрыПечати.ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Заполнить(ПараметрыПозиции);
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ПараметрыПозиции);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Итого|Товар");
	Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодов");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезСкидок");
	ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ПараметрыПечати.ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ПараметрыПечати.ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если ПараметрыПечати.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ПараметрыПечати.ВыводитьКоды И ПараметрыПечати.ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ПараметрыПечати.ЕстьСкидки И НЕ ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьНомера);
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ПараметрыПечати.ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.Заполнить(ПараметрыПечати);
		ТабДокумент.Присоединить(ОбластьСуммы);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	
	ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // СоздатьТабличныйДокументПечатиСчетаЗаказа()


// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип)

	ПечатнаяФорма = АП_ОбщегоНазначенияСервер.Определим_АП_ПечатныеФормыДокументов("", ЭтотОбъект);
	НастройкиПечатнойФормы = АП_ОбщегоНазначенияКлиент.ПолучимНастройкиПечатнойФормы(Ссылка, Контрагент, ПечатнаяФорма, Ложь);
	НаАнглЯзыке = НастройкиПечатнойФормы.Найти(Справочники.АП_НастройкиПечатныхФорм.ПечататьМакетыНаАнглийскомЯзыке) <> Неопределено;
	
	Если НаАнглЯзыке Тогда
		Возврат СоздатьТабличныйДокументПечатиСчетаЗаказаENG(Тип, ПолучитьПараметрыПечатиСчетаЗаказа(Тип));
	Иначе
		Возврат СоздатьТабличныйДокументПечатиСчетаЗаказа(Тип, ПолучитьПараметрыПечатиСчетаЗаказа(Тип));		
	КонецЕсли;
		
			
	
	
КонецФункции 

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами (с учетом внесенных корректировок)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказаКорректировки(Тип)
	
	ПечатнаяФорма = АП_ОбщегоНазначенияСервер.Определим_АП_ПечатныеФормыДокументов("СчетЗаказСКорректировкой", ЭтотОбъект);
	НастройкиПечатнойФормы = АП_ОбщегоНазначенияКлиент.ПолучимНастройкиПечатнойФормы(Ссылка, Контрагент, ПечатнаяФорма, Ложь);
	ПечататьНаАнглЯзыке = НастройкиПечатнойФормы.Найти(Справочники.АП_НастройкиПечатныхФорм.ПечататьМакетыНаАнглийскомЯзыке) <> Неопределено;
	
	Если ПечататьНаАнглЯзыке Тогда		
		Возврат ПечатьСчетаЗаказаКорректировкиENG(Тип);		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Получатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтруктураАктуальныйЗаказ = УправлениеЗаказами.ПолучитьПоследнийЗаказПокупателяИлиИзменениеЗаказаПокупателя(Ссылка);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";
	ЗапросТовары = Новый ТаблицаЗначений;	
	
	Если СтруктураАктуальныйЗаказ <> Неопределено Тогда
		
		СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("Док");
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерТЧ,
		|	Минимум(ВложенныйЗапрос.ПризнакКорректировка) 	КАК ПризнакКорректировка,
		|	Минимум(ВложенныйЗапрос.НомерСтроки) 			КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.НаименованиеПолное,
		|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
		|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
		|	СУММА(ВложенныйЗапрос.Количество)               КАК КоличествоТовара,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
		|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
		|	СУММА(ВложенныйЗапрос.СуммаНДС)                 КАК СуммаНДС,
		|	ВложенныйЗапрос.Цена                            КАК Цена,
		|	СУММА(ВложенныйЗапрос.Сумма)                    КАК Сумма,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры      КАК Характеристика,
		|	NULL                                            КАК Серия
		|ИЗ
		|
		|(
		|ВЫБРАТЬ
		|		Док.Номенклатура                КАК Номенклатура,
		|		ВЫРАЗИТЬ (Док.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
		|		Док.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
		|		Док.Цена                        КАК Цена,
		|		Док.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
		|		Док.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                    КАК СуммаНДС,
		|" + ?(Шапка.СуммаВключаетНДС,
		"		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ",
		"		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ") + " КАК Сумма,
		|		Док.Количество                  КАК Количество,
		|		(1)                             КАК НомерТЧ,
		|		(0)                             КАК ПризнакКорректировка,
		|		Док.НомерСтроки 				КАК НомерСтроки
		|	ИЗ
		|		Документ." + СтруктураАктуальныйЗаказ.ИмяЗаказа + ".Товары КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка = &АктуальныйЗаказ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		Док.Номенклатура               КАК Номенклатура,
		|		ВЫРАЗИТЬ (Док.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
		|		Док.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
		|		Док.Цена                       КАК Цена,
		|		Док.ПроцентСкидкиНаценки       КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
		|		Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                   КАК СуммаНДС,
		|" + ?(Шапка.СуммаВключаетНДС,
		"		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ",
		"		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ") + " КАК Сумма,
		|		Док.Количество               КАК Количество,
		|	    (1)                          КАК НомерТЧ,
		|		(1)                          КАК ПризнакКорректировка,
		// Для корректировок номер строки увеличивается, чтобы добавляемые позиции были последними
		|		(9999 + Док.НомерСтроки)	 КАК НомерСтроки
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.Товары КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка.ЗаказПокупателя = &ТекущийДокумент
		|		И Док.Ссылка.Проведен      = Истина
		|		И Док.Ссылка.Дата > &ДатаАктуальногоЗаказа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		Док.Номенклатура                         КАК Номенклатура,
		|		" + СтрокаВыборкиПоляСодержания + "      КАК НаименованиеПолное,
		|		Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|		Док.Цена                                 КАК Цена,
		|		Док.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
		|		NULL                                     КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                             КАК СуммаНДС,
		|" + ?(Шапка.СуммаВключаетНДС,
		"		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ",
		"		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ") + "                              КАК Сумма,
		|		Док.Количество                           КАК Количество,
		|		(2)                                      КАК НомерТЧ,
		|		(0)                                      КАК ПризнакКорректировка,
		|		Док.НомерСтроки 						 КАК НомерСтроки
		|	ИЗ
		|		Документ." + СтруктураАктуальныйЗаказ.ИмяЗаказа + ".Услуги КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка = &АктуальныйЗаказ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		Док.Номенклатура                          КАК Номенклатура,
		|" + СтрокаВыборкиПоляСодержания + " КАК НаименованиеПолное,
		|		Док.Номенклатура.ЕдиницаХраненияОстатков  КАК ЕдиницаИзмерения,
		|		Док.Цена                                  КАК Цена,
		|		Док.ПроцентСкидкиНаценки                  КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
		|		NULL                                      КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                              КАК СуммаНДС,
		|" + ?(Шапка.СуммаВключаетНДС,
		"		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ",
		"		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ") + "                               КАК Сумма,
		|		Док.Количество                            КАК Количество,
		|		(2)                                       КАК НомерТЧ,
		|		(1)                                       КАК ПризнакКорректировка,
		// Для корректировок номер строки увеличивается, чтобы добавляемые позиции были последними
		|		(9999 + Док.НомерСтроки)	 			  КАК НомерСтроки
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.Услуги КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка.ЗаказПокупателя = &ТекущийДокумент
		|		И Док.Ссылка.Проведен      = Истина
		|		И Док.Ссылка.Дата > &ДатаАктуальногоЗаказа
		|";
		
		Если Тип <> "Счет" Тогда
			ТекстЗапроса = ТекстЗапроса +
			" 
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|		Док.Номенклатура                КАК Номенклатура,
			|		ВЫРАЗИТЬ (Док.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
			|		Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|		Док.Цена                        КАК Цена,
			|		0								КАК ПроцентСкидкиНаценки,
			|		0 								КАК ПроцентАвтоматическихСкидок,
			|		NULL 							КАК ХарактеристикаНоменклатуры,
			|		0						        КАК СуммаНДС,
			|		Док.Сумма                       КАК Сумма,
			|		Док.Количество                  КАК Количество,
			|		(3)                             КАК НомерТЧ,
			|		(0)                             КАК ПризнакКорректировка,
			|		Док.НомерСтроки 				КАК НомерСтроки
			|	ИЗ
			|		Документ." + СтруктураАктуальныйЗаказ.ИмяЗаказа + ".ВозвратнаяТара КАК Док
			|
			|	ГДЕ
			|		Док.Ссылка = &АктуальныйЗаказ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|		Док.Номенклатура            КАК Номенклатура,
			|		ВЫРАЗИТЬ (Док.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
			|		Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|		Док.Цена                    КАК Цена,
			|		0							КАК ПроцентСкидкиНаценки,
			|		0							КАК ПроцентАвтоматическихСкидок,
			|		NULL 						КАК ХарактеристикаНоменклатуры,
			|		0							КАК СуммаНДС,
			|		Док.Сумма                   КАК Сумма,
			|		Док.Количество              КАК Количество,
			|	    (3)                         КАК НомерТЧ,
			|		(1)                         КАК ПризнакКорректировка,
			// Для корректировок номер строки увеличивается, чтобы добавляемые позиции были последними
			|		(9999 + Док.НомерСтроки)	КАК НомерСтроки
			|	ИЗ
			|		Документ.КорректировкаЗаказаПокупателя.ВозвратнаяТара КАК Док
			|
			|	ГДЕ
			|		Док.Ссылка.ЗаказПокупателя = &ТекущийДокумент
			|		И Док.Ссылка.Проведен      = Истина
			|		И Док.Ссылка.Дата > &ДатаАктуальногоЗаказа
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса+
		"
		|) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.НомерТЧ,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки,
		|	ВложенныйЗапрос.ПроцентАвтоматическихСкидок,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.НаименованиеПолное
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.НомерТЧ, ПризнакКорректировка, НомерСтроки
		|";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("АктуальныйЗаказ", СтруктураАктуальныйЗаказ.Заказ);
		Запрос.УстановитьПараметр("ДатаАктуальногоЗаказа", СтруктураАктуальныйЗаказ.ДатаЗаказа);
		Запрос.Текст = ТекстЗапроса;
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
	КонецЕсли;

	
	Если Тип = "Счет" Тогда
		Макет = ПолучитьОбщийМакет("СчетЗаказ");
	Иначе
		Макет = ПолучитьМакет("СчетЗаказ");
	КонецЕсли;

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СтруктурнаяЕдиница.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Банк;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка;
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя (на переработку)");
		Иначе
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя");
		КонецЕсли;
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстПоставщик = "Поставщик:";
		Если Шапка.Организация = Шапка.Грузоотправитель Тогда
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		Иначе
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,");
		КонецЕсли;
	Иначе
		ОбластьМакета.Параметры.ТекстПоставщик = "Исполнитель:"
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстПокупатель = "Покупатель:";
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,");
	Иначе
		ОбластьМакета.Параметры.ТекстПокупатель = "Заказчик:"
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	Если Не ВыводитьКоды И ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодов");
	ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезСкидок");
	ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		ОбластьТовар.Параметры.Товар = "Продукция";
	Иначе
		ОбластьТовар.Параметры.Товар = "Товары (работы, услуги)";
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
	Если Не ВыводитьКоды И ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодов");
	ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезСкидок");
	ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");
	КонецЕсли;

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	НумераторСтрок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ВыборкаСтрокТовары.КоличествоТовара = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		НумераторСтрок = НумераторСтрок + 1;
		ОбластьНомера.Параметры.НомерСтроки = НумераторСтрок;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Товар = СокрП(ВыборкаСтрокТовары.НаименованиеПолное) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
																+ ?(ВыборкаСтрокТовары.НомерТЧ = 3, " (возвратная тара)", "");
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Количество = ВыборкаСтрокТовары.КоличествоТовара;
		ТабДокумент.Присоединить(ОбластьДанных);

		//++ Spl_Апроф 04.03.2015 (k.russkih@a-prof.ru)
		//Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);
		Скидка = Окр(ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.КоличествоТовара, 2) - ВыборкаСтрокТовары.Сумма;

		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Итого|Товар");
	Если Не ВыводитьКоды И ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодов");
	ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезСкидок");
	ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС И ЗапросТовары.Количество()>0 Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ВыводитьКоды И ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Если Тип = "Счет" Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ВсегоКОплате|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ВсегоКОплате|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ВсегоКОплате|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ВсегоКОплате|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ВсегоКОплате|Сумма");

			ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|Товар");
			Если Не ВыводитьКоды И ЕстьСкидки Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезКодов");
			ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезСкидок");
			ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезКодовИСкидок");
			КонецЕсли;

			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьТовар);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.ВсегоКОплате = ОбщегоНазначения.ФорматСумм(Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС));
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + НумераторСтрок
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");

		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		ДолжностьРуководителя = Руководители.РуководительДолжность;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;

		ОбластьМакета.Параметры.ФИОРуководителя  		= Руководитель;
		ОбластьМакета.Параметры.ДолжностьРуководителя  	= ДолжностьРуководителя;
		ОбластьМакета.Параметры.ФИОБухгалтера    		= Бухгалтер;
		
		Если НЕ ЗначениеЗаполнено(Ответственный.ФизЛицо) Тогда
			ФИООтветственный = Ответственный.Наименование;
		Иначе
			ФамилияИмяОтчествоФизЛица      	 = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Ответственный.ФизЛицо, Шапка.Дата);
			ФамилияИмяОтчествоОтветственного = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИООтветственный         		 = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтветственного);
		КонецЕсли;
		ОбластьМакета.Параметры.ФИООтветственный = ФИООтветственный;

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказаКорректировки()

Функция ПечатьСчетаЗаказаКорректировкиENG(Тип)
	
	ТекЯзык = Справочники.ЯзыкиНародовМира.НайтиПоНаименованию("Английский");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Получатель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтруктураАктуальныйЗаказ = УправлениеЗаказами.ПолучитьПоследнийЗаказПокупателяИлиИзменениеЗаказаПокупателя(Ссылка);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_СчетЗаказ";
	ЗапросТовары = Новый ТаблицаЗначений;	
	
	Если СтруктураАктуальныйЗаказ <> Неопределено Тогда
		
		СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("Док");
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерТЧ,
		|	Минимум(ВложенныйЗапрос.ПризнакКорректировка) 	КАК ПризнакКорректировка,
		|	Минимум(ВложенныйЗапрос.НомерСтроки) 			КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.НаименованиеПолное,
		|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
		|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
		|	СУММА(ВложенныйЗапрос.Количество)               КАК КоличествоТовара,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки 
		|	+ ВложенныйЗапрос.ПроцентАвтоматическихСкидок   КАК Скидка,
		|	СУММА(ВложенныйЗапрос.СуммаНДС)                 КАК СуммаНДС,
		|	ВложенныйЗапрос.Цена                            КАК Цена,
		|	СУММА(ВложенныйЗапрос.Сумма)                    КАК Сумма,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры      КАК Характеристика,
		|	NULL                                            КАК Серия
		|ИЗ
		|
		|(
		|ВЫБРАТЬ
		|		Док.Номенклатура                КАК Номенклатура,
		|		ВЫРАЗИТЬ (Док.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
		|		Док.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
		|		Док.Цена                        КАК Цена,
		|		Док.ПроцентСкидкиНаценки        КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
		|		Док.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                    КАК СуммаНДС,
		|" + ?(Шапка.СуммаВключаетНДС,
		"		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ",
		"		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ") + " КАК Сумма,
		|		Док.Количество                  КАК Количество,
		|		(1)                             КАК НомерТЧ,
		|		(0)                             КАК ПризнакКорректировка,
		|		Док.НомерСтроки 				КАК НомерСтроки
		|	ИЗ
		|		Документ." + СтруктураАктуальныйЗаказ.ИмяЗаказа + ".Товары КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка = &АктуальныйЗаказ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		Док.Номенклатура               КАК Номенклатура,
		|		ВЫРАЗИТЬ (Док.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
		|		Док.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
		|		Док.Цена                       КАК Цена,
		|		Док.ПроцентСкидкиНаценки       КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
		|		Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                   КАК СуммаНДС,
		|" + ?(Шапка.СуммаВключаетНДС,
		"		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ",
		"		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ") + " КАК Сумма,
		|		Док.Количество               КАК Количество,
		|	    (1)                          КАК НомерТЧ,
		|		(1)                          КАК ПризнакКорректировка,
		// Для корректировок номер строки увеличивается, чтобы добавляемые позиции были последними
		|		(9999 + Док.НомерСтроки)	 КАК НомерСтроки
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.Товары КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка.ЗаказПокупателя = &ТекущийДокумент
		|		И Док.Ссылка.Проведен      = Истина
		|		И Док.Ссылка.Дата > &ДатаАктуальногоЗаказа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		Док.Номенклатура                         КАК Номенклатура,
		|		" + СтрокаВыборкиПоляСодержания + "      КАК НаименованиеПолное,
		|		Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|		Док.Цена                                 КАК Цена,
		|		Док.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
		|		NULL                                     КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                             КАК СуммаНДС,
		|" + ?(Шапка.СуммаВключаетНДС,
		"		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ",
		"		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ") + "                              КАК Сумма,
		|		Док.Количество                           КАК Количество,
		|		(2)                                      КАК НомерТЧ,
		|		(0)                                      КАК ПризнакКорректировка,
		|		Док.НомерСтроки 						 КАК НомерСтроки
		|	ИЗ
		|		Документ." + СтруктураАктуальныйЗаказ.ИмяЗаказа + ".Услуги КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка = &АктуальныйЗаказ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|		Док.Номенклатура                          КАК Номенклатура,
		|" + СтрокаВыборкиПоляСодержания + " КАК НаименованиеПолное,
		|		Док.Номенклатура.ЕдиницаХраненияОстатков  КАК ЕдиницаИзмерения,
		|		Док.Цена                                  КАК Цена,
		|		Док.ПроцентСкидкиНаценки                  КАК ПроцентСкидкиНаценки,
		|		Док.ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
		|		NULL                                      КАК ХарактеристикаНоменклатуры,
		|		Док.СуммаНДС                              КАК СуммаНДС,
		|" + ?(Шапка.СуммаВключаетНДС,
		"		ВЫБОР 
		|           КОГДА Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ",
		"		ВЫБОР 
		|           КОГДА НЕ Док.Ссылка.СуммаВключаетНДС
		|				ТОГДА Док.Сумма
		|			ИНАЧЕ Док.Сумма + Док.СуммаНДС
		|		КОНЕЦ") + "                               КАК Сумма,
		|		Док.Количество                            КАК Количество,
		|		(2)                                       КАК НомерТЧ,
		|		(1)                                       КАК ПризнакКорректировка,
		// Для корректировок номер строки увеличивается, чтобы добавляемые позиции были последними
		|		(9999 + Док.НомерСтроки)	 			  КАК НомерСтроки
		|	ИЗ
		|		Документ.КорректировкаЗаказаПокупателя.Услуги КАК Док
		|
		|	ГДЕ
		|		Док.Ссылка.ЗаказПокупателя = &ТекущийДокумент
		|		И Док.Ссылка.Проведен      = Истина
		|		И Док.Ссылка.Дата > &ДатаАктуальногоЗаказа
		|";
		
		Если Тип <> "Счет" Тогда
			ТекстЗапроса = ТекстЗапроса +
			" 
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|		Док.Номенклатура                КАК Номенклатура,
			|		ВЫРАЗИТЬ (Док.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
			|		Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|		Док.Цена                        КАК Цена,
			|		0								КАК ПроцентСкидкиНаценки,
			|		0 								КАК ПроцентАвтоматическихСкидок,
			|		NULL 							КАК ХарактеристикаНоменклатуры,
			|		0						        КАК СуммаНДС,
			|		Док.Сумма                       КАК Сумма,
			|		Док.Количество                  КАК Количество,
			|		(3)                             КАК НомерТЧ,
			|		(0)                             КАК ПризнакКорректировка,
			|		Док.НомерСтроки 				КАК НомерСтроки
			|	ИЗ
			|		Документ." + СтруктураАктуальныйЗаказ.ИмяЗаказа + ".ВозвратнаяТара КАК Док
			|
			|	ГДЕ
			|		Док.Ссылка = &АктуальныйЗаказ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|		Док.Номенклатура            КАК Номенклатура,
			|		ВЫРАЗИТЬ (Док.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
			|		Док.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
			|		Док.Цена                    КАК Цена,
			|		0							КАК ПроцентСкидкиНаценки,
			|		0							КАК ПроцентАвтоматическихСкидок,
			|		NULL 						КАК ХарактеристикаНоменклатуры,
			|		0							КАК СуммаНДС,
			|		Док.Сумма                   КАК Сумма,
			|		Док.Количество              КАК Количество,
			|	    (3)                         КАК НомерТЧ,
			|		(1)                         КАК ПризнакКорректировка,
			// Для корректировок номер строки увеличивается, чтобы добавляемые позиции были последними
			|		(9999 + Док.НомерСтроки)	КАК НомерСтроки
			|	ИЗ
			|		Документ.КорректировкаЗаказаПокупателя.ВозвратнаяТара КАК Док
			|
			|	ГДЕ
			|		Док.Ссылка.ЗаказПокупателя = &ТекущийДокумент
			|		И Док.Ссылка.Проведен      = Истина
			|		И Док.Ссылка.Дата > &ДатаАктуальногоЗаказа
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса+
		"
		|) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.НомерТЧ,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ПроцентСкидкиНаценки,
		|	ВложенныйЗапрос.ПроцентАвтоматическихСкидок,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.НаименованиеПолное
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.НомерТЧ, ПризнакКорректировка, НомерСтроки
		|";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("АктуальныйЗаказ", СтруктураАктуальныйЗаказ.Заказ);
		Запрос.УстановитьПараметр("ДатаАктуальногоЗаказа", СтруктураАктуальныйЗаказ.ДатаЗаказа);
		Запрос.Текст = ТекстЗапроса;
		ЗапросТовары = Запрос.Выполнить().Выгрузить();
	КонецЕсли;

	
	Если Тип = "Счет" Тогда
		//Макет = ПолучитьОбщийМакет("СчетЗаказОбщийENG");
		Макет = ПолучитьМакет("СчетЗаказОбщийENG");
	Иначе
		Макет = ПолучитьМакет("СчетЗаказENG");
	КонецЕсли;

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		Если ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Банк       = СтруктурнаяЕдиница.Банк;
			БИК        = Банк.Код;
			КоррСчет   = Банк.КоррСчет;
			ГородБанка = Банк.Город;
			НомерСчета = СтруктурнаяЕдиница.НомерСчета;

			ОбластьМакета.Параметры.БИКБанкаПолучателя               = БИК;
			ОбластьМакета.Параметры.БанкПолучателя                   = Строка(Банк) + ПРГ_ДопФункцииКлиентСервер.СформироватьСтрокуСПереводом(Банк, ТекЯзык, , , Истина);
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = СокрЛП(Банк) + " " + ГородБанка + "/" + ПРГ_ДопФункцииКлиентСервер.СформироватьСтрокуСПереводом(Банк, ТекЯзык, , , Истина) + " " + ПРГ_ДопФункцииКлиентСервер.ПолучитьПереводНаЯзык(ГородБанка, ТекЯзык);
			ОбластьМакета.Параметры.СчетБанкаПолучателя              = КоррСчет;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = КоррСчет;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = НомерСчета;
			ОбластьМакета.Параметры.СчетПолучателя                   = НомерСчета;
			ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = СтруктурнаяЕдиница.ТекстКорреспондента;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения) Тогда
			ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
			ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = ПредставлениеПоставщикаДляПлатПоручения + ПРГ_ДопФункцииКлиентСервер.СформироватьСтрокуСПереводом(ПредставлениеПоставщикаДляПлатПоручения, ТекЯзык, , , Истина);
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Счет на оплату");
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя (на переработку)");
		Иначе
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Заказ покупателя");
		КонецЕсли;
	КонецЕсли;
	ТекстЗаголовка1 = ОбластьМакета.Параметры.ТекстЗаголовка;
	ТекстЗаголовка1 = ПРГ_ДопФункцииКлиентСервер.ПеревестиТипДокумента(ТекстЗаголовка1);
	ТекстЗаголовка1 = ПРГ_ДопФункцииКлиентСервер.ПеревестиМесяц(ТекстЗаголовка1);
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбластьМакета.Параметры.ТекстЗаголовка + "/" + ТекстЗаголовка1;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстПоставщик = "Поставщик/Supplier:";
		Если Шапка.Организация = Шапка.Грузоотправитель Тогда
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		Иначе
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,");
		КонецЕсли;
	Иначе
		ОбластьМакета.Параметры.ТекстПоставщик = "Исполнитель:"
	КонецЕсли;
	
	ТекТекст = ОбластьМакета.Параметры.ПредставлениеГрузоотправителя;
	ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ОбластьМакета.Параметры.ПредставлениеГрузоотправителя + " / " + ПРГ_ДопФункцииКлиентСервер.ПолучитьПереводНаЯзык(ТекТекст, ТекЯзык);
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	
	ТекТекст = ОбластьМакета.Параметры.ПредставлениеПоставщика;
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбластьМакета.Параметры.ПредставлениеПоставщика + " / " + ПРГ_ДопФункцииКлиентСервер.ПолучитьПереводНаЯзык(ТекТекст, ТекЯзык);
	
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета.Параметры.ТекстПокупатель = "Покупатель/Buyer:";
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ФактическийАдрес,Телефоны,");
	Иначе
		ОбластьМакета.Параметры.ТекстПокупатель = "Заказчик:"
	КонецЕсли;
	
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код/Code";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	Если Не ВыводитьКоды И ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодов");
	ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезСкидок");
	ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		ОбластьТовар.Параметры.Товар = "Продукция";
	Иначе
		ОбластьТовар.Параметры.Товар = "Товары (работы, услуги)/Description of the goods ";
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Строка|Товар");
	Если Не ВыводитьКоды И ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодов");
	ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезСкидок");
	ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Строка|ТоварБезКодовИСкидок");
	КонецЕсли;

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	НумераторСтрок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ВыборкаСтрокТовары.КоличествоТовара = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		НумераторСтрок = НумераторСтрок + 1;
		ОбластьНомера.Параметры.НомерСтроки = НумераторСтрок;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Товар = СокрП(ВыборкаСтрокТовары.НаименованиеПолное) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары)
																+ ?(ВыборкаСтрокТовары.НомерТЧ = 3, " (возвратная тара)", "") + 
																ПРГ_ДопФункцииКлиентСервер.СформироватьСтрокуСПереводом(ВыборкаСтрокТовары.Номенклатура, ТекЯзык, , , Истина);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Количество = ВыборкаСтрокТовары.КоличествоТовара;
		ОбластьДанных.Параметры.ЕдиницаИзмерения = ОбластьДанных.Параметры.ЕдиницаИзмерения + ПРГ_ДопФункцииКлиентСервер.СформироватьСтрокуСПереводом(ОбластьДанных.Параметры.ЕдиницаИзмерения, ТекЯзык, , , Истина);
		ТабДокумент.Присоединить(ОбластьДанных);

		//++ Spl_Апроф 04.03.2015 (k.russkih@a-prof.ru)
		//Скидка = Ценообразование.ПолучитьСуммуСкидки(ВыборкаСтрокТовары.Сумма, ВыборкаСтрокТовары.Скидка);
		Скидка = Окр(ВыборкаСтрокТовары.Цена * ВыборкаСтрокТовары.КоличествоТовара, 2) - ВыборкаСтрокТовары.Сумма;

		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ОбластьТовар = Макет.ПолучитьОбласть("Итого|Товар");
	Если Не ВыводитьКоды И ЕстьСкидки Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодов");
	ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезСкидок");
	ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
		ОбластьТовар = Макет.ПолучитьОбласть("Итого|ТоварБезКодовИСкидок");
	КонецЕсли;

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС И ЗапросТовары.Количество()>0 Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|Товар");
		Если Не ВыводитьКоды И ЕстьСкидки Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодов");
		ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезСкидок");
		ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
			ОбластьТовар = Макет.ПолучитьОбласть("ИтогоНДС|ТоварБезКодовИСкидок");
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС/Amount VAT:");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"));
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Если Тип = "Счет" Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ВсегоКОплате|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ВсегоКОплате|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ВсегоКОплате|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ВсегоКОплате|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ВсегоКОплате|Сумма");

			ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|Товар");
			Если Не ВыводитьКоды И ЕстьСкидки Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезКодов");
			ИначеЕсли НЕ ЕстьСкидки И ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезСкидок");
			ИначеЕсли НЕ ЕстьСкидки И НЕ ВыводитьКоды Тогда
				ОбластьТовар = Макет.ПолучитьОбласть("ВсегоКОплате|ТоварБезКодовИСкидок");
			КонецЕсли;

			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьТовар.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабДокумент.Присоединить(ОбластьТовар);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.ВсегоКОплате = ОбщегоНазначения.ФорматСумм(Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС));
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований/Total descriptions " + НумераторСтрок
	+ ", на сумму/on amount " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента) + "/" + ЧислоПрописью(СуммаКПрописи, "L=en_US", "dollar, dollars, cent, cents, 2");
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");

		Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.Дата,);
		Руководитель = Руководители.Руководитель;
		ДолжностьРуководителя = Руководители.РуководительДолжность;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;

		ОбластьМакета.Параметры.ФИОРуководителя  		= Руководитель + ПРГ_ДопФункцииКлиентСервер.СформироватьСтрокуСПереводом(Руководитель, ТекЯзык, , , Истина);
		ОбластьМакета.Параметры.ДолжностьРуководителя  	= ДолжностьРуководителя + ПРГ_ДопФункцииКлиентСервер.СформироватьСтрокуСПереводом(ДолжностьРуководителя, ТекЯзык, , , Истина);
		ОбластьМакета.Параметры.ФИОБухгалтера    		= Бухгалтер + ПРГ_ДопФункцииКлиентСервер.СформироватьСтрокуСПереводом(Бухгалтер, ТекЯзык, , , Истина);
		
		Если НЕ ЗначениеЗаполнено(Ответственный.ФизЛицо) Тогда
			ФИООтветственный = Ответственный.Наименование;
		Иначе
			ФамилияИмяОтчествоФизЛица      	 = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Ответственный.ФизЛицо, Шапка.Дата);
			ФамилияИмяОтчествоОтветственного = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
			ФИООтветственный         		 = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтветственного);
		КонецЕсли;
		ОбластьМакета.Параметры.ФИООтветственный = ФИООтветственный + ПРГ_ДопФункцииКлиентСервер.СформироватьСтрокуСПереводом(ФИООтветственный, ТекЯзык, , , Истина);

	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	КонецЕсли; 
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказаКорректировки()

// Функция формирует табличный документ с печатной формой перечня давальческого
// сырья и материалов заказа с видом операции (на переработку)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьПеречняМатериалов(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Организация,
	|	Контрагент КАК Получатель,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПокупателя_ПереченьМатериалов";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ (ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК НаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код                КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул            КАК Артикул,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.Характеристика,
	|	NULL Как Серия,
	|	НомерСтроки,
	|	Метка
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена                        КАК Цена,
	|		СУММА(ЗаказПокупателя.Количество)           КАК Количество,
	|		СУММА(ЗаказПокупателя.Сумма     )           КАК Сумма,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры  КАК Характеристика,
	|		МИНИМУМ(НомерСтроки)                        КАК НомерСтроки,
	|		0                                           КАК Метка
	|	ИЗ
	|		Документ.ЗаказПокупателя.Материалы КАК ЗаказПокупателя
	|
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.Цена,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Перечень материалов по заказу покупателя (на переработку)" + Символы.ПС);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ТекстПоставщик = "Исполнитель:";
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	СведенияОПолучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ТекстПокупатель = "Заказчик:";
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабДокумент.Вывести(ОбластьМакета);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ОбластьТовар = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьТовар.Параметры.Товар = "Сырье, материалы";
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	ТабДокумент.Присоединить(ОбластьСуммы);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	
	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьТовар.Параметры.Товар = СокрП(ВыборкаСтрокТовары.НаименованиеПолное) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьТовар);
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьТовар  = Макет.ПолучитьОбласть("Итого|Товар");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьТовар);
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма;
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПеречняМатериалов()

// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;


	// Получить экземпляр документа на печать
	Если ИмяМакета = "Заказ" Тогда
		ТабДокумент = ПечатьСчетаЗаказа(ИмяМакета);
	ИначеЕсли ИмяМакета = "ЗаказКорректировка" тогда
		ТабДокумент = ПечатьСчетаЗаказаКорректировки(ИмяМакета);
	ИначеЕсли ИмяМакета = "Счет" тогда
		ТабДокумент = ПечатьСчетаЗаказаКорректировки(ИмяМакета);
	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);
	ИначеЕсли ИмяМакета = "ПереченьМатериалов" тогда
		
		Если НЕ(Материалы.Количество() > 0) Тогда
			Сообщить("Нет материалов в переработку!");
			Возврат;
		КонецЕсли;
		
		ТабДокумент = ПечатьПеречняМатериалов(ИмяМакета);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураПечатныхФорм = Новый Структура("Заказ,ЗаказКорректировка,Счет,Бланк",
	                                        "Заказ покупателя",
	                                        "Заказ покупателя (с учетом корректировок)",
	                                        "Счет на оплату (с учетом корректировок)",
	                                        "Бланк товарного наполнения");

	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		СтруктураПечатныхФорм.Вставить("ПереченьМатериалов", "Перечень материалов для переработки");
	КонецЕсли;

	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет материалы по спецификациям.
//
Процедура ЗаполнитьМатериалыПоСпецификации() Экспорт
	
	Если Материалы.Количество() > 0 Тогда
		#Если Клиент Тогда
		Ответ = Вопрос("Табличная часть ""Материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		#КонецЕсли
		Материалы.Очистить();
	КонецЕсли;

	ТабличнаяЧастьМатериалы = Материалы.Выгрузить();
	ТабличнаяЧастьПродукция = Товары.Выгрузить();
	
	СтруктураДопКолонок = Новый Структура();
	МассивВидовВоспроизводства = Новый Массив;
	МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.ПринятыеВПереработку);
	Отбор = Новый Структура("ВидВоспроизводства", МассивВидовВоспроизводства);

	УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям(ТабличнаяЧастьМатериалы, ТабличнаяЧастьПродукция, СтруктураДопКолонок, Отбор, Дата, 0, ПараметрыВыпускаПродукции);

	ТабличнаяЧастьМатериалы.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент", "Количество");
	
	Материалы.Загрузить(ТабличнаяЧастьМатериалы);
		
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // УправлениеПроизводством.ЗаполнитьМатериалыПоСпецификациям()

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Кнопка - кнопка подменю "Заполнить и провести".
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(Параметры) Экспорт
	ОбособленныйУчет = ЗначениеЗаполнено(ДоговорКонтрагента)
	                   И ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;

	Параметры.Вставить("Заказ",ЭтотОбъект);
	Параметры.Вставить("РезервироватьПоСериям",мРезервироватьПоСериям и ОбособленныйУчет);
	Параметры.Вставить("ОбособленныйУчет",ОбособленныйУчет);

	УправлениеЗаказами.Заказ_ЗаполнитьТабличныеЧастиВозможнымРазмещением(Параметры, Товары, ВозвратнаяТара);
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

// Заполнение документа по упр. основанию
//
Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда
		КонтактноеЛицоКонтрагента    = Основание.КонтактноеЛицо;
		Контрагент                   = Основание.Контрагент;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьДокументПоОснованиюУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии() 

	Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();

	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия Тогда

		Статус = Перечисления.СтатусыПартийТоваров.Купленный; 

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда

		Статус = Перечисления.СтатусыПартийТоваров.ВПереработку; 
		
	Иначе    

		Сообщить("По виду операции """ +
		ВидОперации + """ не удалось определить статус партии товаров!", СтатусСообщения.Важное); 
	КонецЕсли; 

	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС"
	ТаблицаТоваров.Колонки.Добавить( "СуммаБезНДС",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	//m.ionov@a-prof.ru 25.12.2014
	ТаблицаТоваров.Колонки.Добавить( "СуммаСкидки",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить( "СуммаАвтоматическойСкидки",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	//----m.ionov@a-prof.ru---

	// Надо заполнить новые колонки.
	Для каждого СтрокаТЧ Из ТаблицаТоваров Цикл
		
		СтрокаТЧ.СуммаБезНДС = СтрокаТЧ.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТЧ.НДС, 0);
		
		//m.ionov@a-prof.ru 25.12.2014
		СтрокаТЧ.СуммаСкидки = Окр(СтрокаТЧ.Количество*СтрокаТЧ.Цена - СтрокаТЧ.Сумма,2);
		
		Если СтрокаТЧ.ПроцентАвтоматическихСкидок <= 0 Тогда
			СтрокаТЧ.СуммаАвтоматическойСкидки = 0;
		ИначеЕсли СтрокаТЧ.ПроцентСкидкиНаценки > 0 Тогда
			//СтрокаТЧ.СуммаАвтоматическойСкидки = (СтрокаТЧ.Количество*СтрокаТЧ.Цена)*(1-СтрокаТЧ.ПроцентСкидкиНаценки/100) - СтрокаТЧ.Сумма;
			СтрокаТЧ.СуммаАвтоматическойСкидки = Окр(СтрокаТЧ.Сумма/(1 - СтрокаТЧ.ПроцентАвтоматическихСкидок/100) - СтрокаТЧ.Сумма,2);
		Иначе
			СтрокаТЧ.СуммаАвтоматическойСкидки = СтрокаТЧ.СуммаСкидки;
		КонецЕсли;
		//----m.ionov@a-prof.ru---
								  
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаНДС = СтрокаТаблицы.НДС;
		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СуммаНДС, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
		//m.ionov@a-prof.ru 25.12.2014
		Если ЗначениеЗаполнено(СтрокаТаблицы.УстановкаСкидокНоменклатуры) Тогда
			//начало изменений Ожиганов 28.04.2015 немного оптимизируем проведение 
			//ВалютаСкидки = СтрокаТаблицы.УстановкаСкидокНоменклатуры.Валюта;
			ВалютаСкидки = СтрокаТаблицы.ВалютаУстановкаСкидок;
			//конец изменений 
			КурсВалюты =  МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаСкидки, Дата);
			
			СтрокаТаблицы.СуммаСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСкидки, ВалютаДокумента, 
		                           			      	ВалютаСкидки, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			КурсВалюты.Курс, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			КурсВалюты.Кратность);
			СтрокаТаблицы.СуммаАвтоматическойСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаАвтоматическойСкидки, ВалютаДокумента, 
		                           			      	ВалютаСкидки, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			КурсВалюты.Курс, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			КурсВалюты.Кратность);
		Иначе
			//Сумма скидки не интересна
			СтрокаТаблицы.СуммаСкидки = 0;
			СтрокаТаблицы.СуммаАвтоматическойСкидки = 0;
		КонецЕсли;
		//----m.ionov@a-prof.ru---
													
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса по табличной части "Услуги",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента)

	ТаблицаУслуг = РезультатЗапросаПоУслугам.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));	

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		                          ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента);
	
	Возврат ТаблицаУслуг;

КонецФункции // ПодготовитьТаблицуУслуг()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуУслугУпр(ТаблицаУслуг, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаУслуг.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаУслуг.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
       	СуммаНДС = СтрокаТаблицы.НДС;

		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
										 
		СуммаСНДС = СтрокаТаблицы.Сумма + ?(УчитыватьНДС И Не СуммаВключаетНДС, СуммаНДС, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДС, ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов
	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТары.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		                                 СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КурсДокумента,
		                                 СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		                                 СтруктураШапкиДокумента.КратностьДокумента,
		                                 СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = 0;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента, 
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                        					    СтруктураШапкиДокумента.КурсДокумента,
		        				                        КурсВзаиморасчетов, 
						                                СтруктураШапкиДокумента.КратностьДокумента,
		                                 				КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента, 
		                           			      	СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		                                 			СтруктураШапкиДокумента.КурсДокумента,
		                                 			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
						                 			СтруктураШапкиДокумента.КратностьДокумента,
		                                 			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("ВидОперации, Организация, ВалютаДокумента, 
					|Контрагент, ДоговорКонтрагента, КратностьВзаиморасчетов");
					
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ можно выписывать только по договору, взаиморасчеты по которому ведутся  по заказам или по договору в целом!", Отказ, Заголовок);
	КонецЕсли;
	
	//m.ionov@a-prof.ru 15.10.2014
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия Тогда
		
		
		СтруктураОбязательныхПолей.Вставить("КП_Отделение");	
		СтруктураОбязательныхПолей.Вставить("КП_УсловиеПоставки");	
		СтруктураОбязательныхПолей.Вставить("СкладГруппа");	
		СтруктураОбязательныхПолей.Вставить("КП_ДатаДоставки");
		СтруктураОбязательныхПолей.Вставить("Ответственный");
		
		Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСотруднику
			 //ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.Дегустация
			 ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ПредставительскиеРасходы
			 ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.АнализыЛаборатории
			 ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ЗаменаПродукции Тогда
			 СтруктураОбязательныхПолей.Вставить("КП_Сотрудник");
		КонецЕсли;
		 
		//++ Spl_Апроф 14.01.2015 (k.russkih@a-prof.ru)
		Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.Дегустация
			ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР 
			//Blik 71301 031017 н
			ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияС
			//Blik 71301 031017 к
			Тогда
		    мСтруктураОбязательныхПолейПроверки = Новый СписокЗначений;
			мСтруктураОбязательныхПолейПроверки.Добавить("КП_Сотрудник", "Контрагент");

			ЗаполнениеДокументов.ПроверитьЗаполнениеРеквизитов(ЭтотОбъект, мСтруктураОбязательныхПолейПроверки, Отказ);
		
		КонецЕсли;				
		//-- Spl_Апроф
		
		//m.ionov@a-prof.ru 31.01.2015
		Если КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоТЭК Тогда
			СтруктураОбязательныхПолей.Вставить("КП_ТЭК");
			СтруктураОбязательныхПолей.Вставить("КП_АдресДоставкиТЭК");
			СтруктураОбязательныхПолей.Вставить("КП_ДатаДоставкиТЭК");
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		//m.ionov@a-prof.ru 11.02.2015
		//{21.04.2015 Островерхий заявка №37984 
		//Если НЕ КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз Тогда
			СтруктураОбязательныхПолей.Вставить("Грузополучатель");
		//КонецЕсли; 
		//21.04.2015 Островерхий} 
		//----m.ionov@a-prof.ru---
		
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//++ Spl_Апроф 08.01.2015 (k.russkih@a-prof.ru)
	Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ПредставительскиеРасходы
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.АнализыЛаборатории
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.Дегустация
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР
		//Blik 71301 031017 н
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияС
		//Blik 71301 031017 к
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.БезвозмезднаяПередача
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ЗаменаПродукции 
	Тогда	
		 СтруктураОбязательныхПолей.Вставить("Подразделение");	
	КонецЕсли; 	
	//-- Spl_Апроф
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	//m.ionov@a-prof.ru 15.10.2014
	Если Не Отказ и ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия
		//{01.04.2015 Островерхий заявка №36501 
		И НЕ СтруктураШапкиДокумента.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСимов 
		//01.04.2015 Островерхий} 
		Тогда
		//начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок 
		//Если Не ТипЗнч(СкладГруппа) = Тип("СправочникСсылка.Склады") ИЛИ Не СкладГруппа.НСИ_ДоступенДляРезервирования Тогда	
		Если Не ТипЗнч(СкладГруппа) = Тип("СправочникСсылка.Склады") 
			ИЛИ Не СтруктураШапкиДокумента.НСИ_ДоступенДляРезервирования Тогда	
		//конец изменений  
			ОбщегоНазначения.СообщитьОбОшибке("Выбран склад отгрузки не доступный для резервирования!", Отказ, Заголовок);	
		КонецЕсли;
		//начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок  
		//Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ТранзитнаяОтгрузка 
		//	И ТипЗнч(СкладГруппа) = Тип("СправочникСсылка.Склады") И СкладГруппа.НСИ_ПодключенКSolvo Тогда
		Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ТранзитнаяОтгрузка 
			И ТипЗнч(СкладГруппа) = Тип("СправочникСсылка.Склады") И СтруктураШапкиДокумента.НСИ_ПодключенКSolvo Тогда
		//конец изменений 	
			ОбщегоНазначения.СообщитьОбОшибке("Выбран склад подключенный к Солво, при транзитной отгрузке данный склад выбирать нельзя!", Отказ, Заголовок);	
		КонецЕсли;
		//Blik 71301 121017	н
		Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияС и не ПроверкаСоответствияСкладаОтгрузки() Тогда
			 ОбщегоНазначения.СообщитьОбОшибке("Выбран не верный склад! Для вида заказа Дегустация С отгрузка возможна только со склада короткие сроки!!!", Отказ, Заголовок);
		КонецЕсли;
		//Blik 71301 121017	к 
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//начало изменений Ожиганов 21.04.2015 37907 
	Если  Не Отказ и ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия 
		и ТипЗнч(СтруктураШапкиДокумента.Складгруппа) = Тип("СправочникСсылка.Склады")
	Тогда	
		Если СтруктураШапкиДокумента.КП_Отделение <> СтруктураШапкиДокумента.ОтделениеСклада Тогда
				ОбщегоНазначения.СообщитьОбОшибке("не совпадает отделение склада и отделение заказа
					|отделение склада "+СокрЛп(СтруктураШапкиДокумента.ОтделениеСклада)+"
					|отделение заказа "+СокрЛп(СтруктураШапкиДокумента.КП_Отделение),Отказ);
		КонецЕслИ;	
	КонецЕсли;	
	//конец изменений 

	//{23.03.2017 Островерхий заявка №63689 
	ТекстОшибки = "";
	Если НЕ ПРГ_ДопФункцииКлиентСервер.ПроверитьЭтоДействующийДоговор(Дата,ДоговорКонтрагента,ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);	
	КонецЕсли; 
	//23.03.2017 Островерхий}
	
	//Blik 101017 70933 н
	//проверка по периоду действия договора
	Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.Дегустация
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР //Blik 201017 72066 
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияС
		Тогда
		АДоговор = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(ДоговорКонтрагента,
		Новый Структура("Дата,СрокДействия"));
		Если ЗначениеЗаполнено(АДоговор.СрокДействия) Тогда //Blik 201017 72066
			Если не (ДатаОтгрузки >= АДоговор.Дата и ДатаОтгрузки <= АДоговор.СрокДействия) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Проведение невозможно!!!
				|Приказ закрыт, необходимо выбрать действующий приказ!!! ",Отказ);
			КонецЕсли;
			Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияС
				И ((АДоговор.СрокДействия - АДоговор.Дата)/86400>30) 
				Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Проведение невозможно!!!
				|Срок действия выбранного приказа более месяца, это недопустимо. Небходимо выбрать корректный приказ!!! ",Отказ);
			КонецЕсли;
		КонецЕсли;//Blik 201017 72066
	Конецесли;
	//Blik 101017 70933 к
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения упр. реквизитов шапки
//
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять заказ с НТТ!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапкиУпр()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	//m.ionov@a-prof.ru 07.10.2014
	//Новый Структура("Номенклатура, Количество, Сумма");
	Новый Структура("Номенклатура, Количество");
	//----m.ionov@a-prof.ru---
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	//m.ionov@a-prof.ru 30.09.2014
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия Тогда
		СтруктураОбязательныхПолей.Вставить("ЕдиницаИзмеренияМест");
	КонецЕсли;
	
	Если ОбязательноДолжнаБытьЦена() Тогда
		СтруктураОбязательныхПолей.Вставить("Сумма");
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	//m.ionov@a-prof.ru 19.02.2015
	Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР Тогда
		СтруктураОбязательныхПолей.Вставить("АП_ВидыПричинПретензии");
		СтруктураОбязательныхПолей.Вставить("АП_ПричинаПретензии");
	КонецЕсли;
	//----m.ionov@a-prof.ru---

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок,"РазмещениеВидСклада");

	//{01.04.2015 Островерхий заявка №36501 
	Если СтруктураШапкиДокумента.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСимов Тогда
		ПроверитьЧтоНетГотовойПродукции(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли; 
	//01.04.2015 Островерхий} 
	
	//{28.11.2016 Островерхий заявка №57373 
	ПроверитьЧтоПроцентДопСкидкиВПределахНормы(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок); 
	//28.11.2016 Островерхий} 
	
	//Blik 71301 031017 н
	//здесь должен быть срок годности до 19 дней включительно
    Если СтруктураШапкиДокумента.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияС Тогда
		ПроверитьСоответствиеСрокаГодности(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли; 
	//Blik 71301 031017 к
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

//ПроверитьЧтоПроцентДопСкидкиВПределахНормы
//п. 4.3.1.3 ТЗ на изменение механизма ценообразования и расчета плана продаж
Процедура ПроверитьЧтоПроцентДопСкидкиВПределахНормы(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок)

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				
	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		Если СтрокаТаблицы["ПроцентДопИзмененияЦены"] >= 50 Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
			""" табличной части """ + ПредставлениеТабличнойЧасти + """: % доп изменения цены >= 50. " +
			"Такого быть не должно!", Отказ, Заголовок);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры
 

Процедура ПроверитьЧтоНетГотовойПродукции(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт
    Перем ПредставлениеТабличнойЧасти;

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура.МКЮ) Тогда
                Если ПредставлениеТабличнойЧасти = неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;	
				ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                """ табличной части """ + ПредставлениеТабличнойЧасти + """: содержится готовая продукция. " +
				        "Здесь ее быть не должно!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетГотовойПродукции()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  ТаблицаПоУслугам        - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Услуги";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма, Содержание");

	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	ИмяТабличнойЧасти = "ВозвратнаяТара";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок,"РазмещениеВидСклада");

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Нельзя резервировать возвратную тару под заказ покупателя с обособленным учетом
	УправлениеЗаказами.ПроверитьРезервированиеТарыПодЗаказСОбособленнымУчетом(ЭтотОбъект,"Ссылка", истина, "Размещение", Отказ, Заголовок);													   

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Проверяет правильность заполнения строк табличной части "Материалы".
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМатериалы(ТаблицаМатериалы, Отказ, Заголовок)
	
	РеквизитыТабМатериалы = "Номенклатура, Количество";
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТабМатериалы), Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Материалы", ТаблицаМатериалы, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", ТаблицаМатериалы, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Материалы", ТаблицаМатериалы, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиМатериалы()

// Функция удаляет из исходной таблицы строки не требующие размещения
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоКомплектам)

	ТаблицаПоТоварамРазмещение = ТаблицаПоКомплектам.Скопировать();
	
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) = Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";
	
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // СоздатьТаблицуРазмещенияЗаказов()

// Функция удаляет из исходной таблицы строки не требующие резервирования
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоКомплектам)

	ТаблицаПоТоварамРезервирование = ТаблицаПоКомплектам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
	
	Возврат ТаблицаПоТоварамРезервирование;
	
КонецФункции // СоздатьТаблицуРезервированияПодЗаказ()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоУслугам, 
							ТаблицаПоТаре, Отказ, Заголовок);
							
	Если СтруктураШапкиДокумента.ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями Тогда						
		ДвижениеПоРегиструПоставки(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоУслугам, 
								ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		
		ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, ТаблицаПоУслугам, 
		                                  ТаблицаПоТаре, Отказ, Заголовок);
										  
		//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 										  
		Если ПРГ_ДопФункцииКлиентСервер.ПРГПроводитьПоПартиям(СтруктураШапкиДокумента) Тогда
			УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());
		КонецЕсли;
		//конец изменений 
			
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирует движение в регистру РасчетыСКонтрагентами
//
Процедура ДвиженияПоРасчетамСКонтрагентами( СтруктураШапкиДокумента, Отказ)
	
	// Движения по документу.
	Если СуммаДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений = Движения.РасчетыСКонтрагентами;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
	СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
	СтрокаДвижений.Контрагент  		   = Контрагент;
	СтрокаДвижений.Организация  	   = Организация;

	СтрокаДвижений.Сделка                = Ссылка; 
	
	СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
											СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
											СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
											СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
	СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
											СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
											СтруктураШапкиДокумента.КурсДокумента, 
											СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
											СтруктураШапкиДокумента.КратностьДокумента, 
											СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРасчетамСКонтрагентами()

// Формируем движения по упр. регистрам.
//
Процедура ДвиженияПоРегистрамУпрСтарый(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоУслугам, ТаблицаПоТаре,
	Отказ, Заголовок);
	
	ДвиженияПоРасчетамСКонтрагентами( СтруктураШапкиДокумента, Отказ);
	
	Если Не Отказ Тогда
		
		// Движения по заказам покупателей.
		НаборДвижений = Движения.ЗаказыПокупателей;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Ссылка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартии(),                         "ТаблицаПоТоварам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоУслугам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
		// Движения по размещениям.
		ТаблицаПоТоварамРазмещение = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоКомплектам);
		ТаблицаПоТареРазмещение    = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТаре);
		
		Если ТаблицаПоТоварамРазмещение.Количество() > 0 ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда
			
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			
			Если Не Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРазмещение);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРазмещение);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",          Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",          Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Движения по резервированиям.
		ТаблицаПоТоварамРезервирование = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоКомплектам);
		ТаблицаПоТареРезервирование    = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТаре);
		Если ТаблицаПоТоварамРезервирование.Количество() > 0 ИЛИ ТаблицаПоТареРезервирование.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			Если Не Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезервирование);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезервирование);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Ссылка);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
		
		//++ Spl_Апроф 15.10.2014 (k.russkih@a-prof.ru)
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КП_ИмпортированныйЗаказ") Тогда
			
			// Движения по импортированным заказам
			НаборДвижений = Движения.КП_ИмпортированныеЗаказы;
			
			врем_Товары = ТаблицаПоТоварам.Скопировать();
			врем_Товары.Колонки.Сумма.Имя = "Сумма1";
			врем_Товары.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
			Для каждого мСтрокаДок Из врем_Товары Цикл
				
				мСтрокаДок.Количество 	= -мСтрокаДок.Количество;
				мСтрокаДок.Сумма 		= -мСтрокаДок.Сумма;
				
			КонецЦикла; 
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", врем_Товары);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ИмпортированныйЗаказ"	, Ссылка.ДокументОснование);
			//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента"	, ДоговорКонтрагента);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		//-- Spl_Апроф
		
		//m.ionov@a-prof.ru 25.12.2014
		// Движения по ограничениям скидки
		//>>271015 Степанов запускаем запросы на выполнение только для тех документов, у которых вообще есть процент авто-скидок
		Если ТаблицаПоТоварам.Итог("ПроцентАвтоматическихСкидок")<>0 тогда
			
//			//>>070915 Степанов надо получить тип скидки контрагента, и если это скидка с ограничением по сумме, тогда делаем проверки и движения по регистру ограничений
//			ЗапросТипСкидки = Новый Запрос;
//			//{27.10.2015 Островерхий заявка №б/н, Оптимизируем запрос 
//			//ЗапросТипСкидки.Текст = 
//			//"ВЫБРАТЬ РАЗЛИЧНЫЕ
//			//|	СкидкиНаценкиНоменклатурыСрезПоследних.Регистратор.ПЦ_ОграниченияСкидки КАК ТипОграничения
//			//|ИЗ
//			//|	РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(&Период, ) КАК СкидкиНаценкиНоменклатурыСрезПоследних
//			//|ГДЕ
//			//|	(СкидкиНаценкиНоменклатурыСрезПоследних.ПолучательСкидки.Владелец = &Контрагент
//			//|			ИЛИ СкидкиНаценкиНоменклатурыСрезПоследних.ПолучательСкидки = &Контрагент)";
//			ЗапросТипСкидки.Текст = 
//			"ВЫБРАТЬ
//			|	ВложенныйЗапрос.ТипОграничения
//			|ИЗ
//			|	(ВЫБРАТЬ
//			|		ВЫРАЗИТЬ(СкидкиНаценкиНоменклатурыСрезПоследних.Регистратор КАК Документ.УстановкаСкидокНоменклатуры).ПЦ_ОграниченияСкидки КАК ТипОграничения
//			|	ИЗ
//			|		РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(&Период, ПолучательСкидки = &Контрагент) КАК СкидкиНаценкиНоменклатурыСрезПоследних
//			|	
//			|	СГРУППИРОВАТЬ ПО
//			|		ВЫРАЗИТЬ(СкидкиНаценкиНоменклатурыСрезПоследних.Регистратор КАК Документ.УстановкаСкидокНоменклатуры).ПЦ_ОграниченияСкидки
//			|	
//			|	ОБЪЕДИНИТЬ ВСЕ
//			|	
//			|	ВЫБРАТЬ
//			|		ВЫРАЗИТЬ(СкидкиНаценкиНоменклатурыСрезПоследних.Регистратор КАК Документ.УстановкаСкидокНоменклатуры).ПЦ_ОграниченияСкидки
//			|	ИЗ
//			|		РегистрСведений.СкидкиНаценкиНоменклатуры.СрезПоследних(&Период, ВЫРАЗИТЬ(ПолучательСкидки КАК Справочник.ДоговорыКонтрагентов).Владелец = &Контрагент) КАК СкидкиНаценкиНоменклатурыСрезПоследних
//			|	
//			|	СГРУППИРОВАТЬ ПО
//			|		ВЫРАЗИТЬ(СкидкиНаценкиНоменклатурыСрезПоследних.Регистратор КАК Документ.УстановкаСкидокНоменклатуры).ПЦ_ОграниченияСкидки) КАК ВложенныйЗапрос
////>>180316 Степанов 50144			|ГДЕ
////>>180316 Степанов 50144			|	НЕ ВложенныйЗапрос.ТипОграничения = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.Период)
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	ВложенныйЗапрос.ТипОграничения";
//			//27.10.2015 Островерхий} 
//			
//			//>>180316 Степанов 50144
//			//ЗапросТипСкидки.УстановитьПараметр("Период",Дата);
//			Если ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда
//				тДатСкидок =ДатаОтгрузки;
//			ИначеЕсли ПЦ_ПересчитыватьЦеныНаДатуДоставки Тогда
//				тДатСкидок =КП_ДатаДоставки;	
//			Иначе
//				тДатСкидок =Дата;	
//			КонецЕсли;  
//			ЗапросТипСкидки.УстановитьПараметр("Период",тДатСкидок);
//			//<<
//			ЗапросТипСкидки.УстановитьПараметр("Контрагент",Контрагент);
//			РезТипСкидки = ЗапросТипСкидки.Выполнить();
//			РезТипСкидкиВыборка = РезТипСкидки.Выбрать();
//			ТипСкидкиКонтрагента = Неопределено;
//			Пока РезТипСкидкиВыборка.Следующий() цикл
//				ТипСкидкиКонтрагента = РезТипСкидкиВыборка.ТипОграничения;
//				Если ТипСкидкиКонтрагента<>Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период тогда
//					Прервать;
//				КонецЕсли;	
//			КонецЦикла;	
//			//{27.10.2015 Островерхий заявка №б/н 
//			Если ТипСкидкиКонтрагента <> Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период тогда
			//>>180316 Степанов 50144 Если НЕ РезТипСкидки.Пустой() тогда	
				//27.10.2015 Островерхий} 
				
				Запрос = Новый Запрос;
				//>>030915 Степанов 43137 [приведено в соответствие с процедурой РассчитатьСкидкиПриПродаже] Запрос.УстановитьПараметр("ДатаОстатков"       , Новый Граница(МоментВремени(), ВидГраницы.Исключая));
				Запрос.УстановитьПараметр("МассивСкидок", ТаблицаПоТоварам.ВыгрузитьКолонку("УстановкаСкидокНоменклатуры"));
				Запрос.УстановитьПараметр("Контрагент", Контрагент); 
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				
				//>>190516 Степанов б/н убрать из остатков закрывающий оборот послестоящих документов "Отмена скидок номенклатуры"
				Запрос.УстановитьПараметр("НаДату", Дата);
				//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
				//|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) КАК Количество,
				//|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) КАК СуммаСкидки,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки КАК ПЦ_ОграниченияСкидки
				//|ИЗ
				//|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(
				////>>030915 Степанов 43137 [приведено в соответствие с процедурой РассчитатьСкидкиПриПродаже] |			&ДатаОстатков,
				//|                        ,
				////<<030915					   
				//|			УстановкаСкидокНоменклатуры В (&МассивСкидок)
				////>>020915 Степанов 43137		               |				И (Контрагент = &Контрагент
				////>>020915 Степанов 43137		               |					ИЛИ ДоговорКонтрагента = &ДоговорКонтрагента)) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
				//|				И (ДоговорКонтрагента = &ДоговорКонтрагента
				//|					ИЛИ ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
				//|						И Контрагент = &Контрагент)) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
				//|
				//|СГРУППИРОВАТЬ ПО
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
				//|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры";
				Запрос.Текст = "ВЫБРАТЬ
				               |	ВложенныйЗапрос.Контрагент,
				               |	ВложенныйЗапрос.ДоговорКонтрагента,
				               |	ВложенныйЗапрос.Номенклатура,
				               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
				               |	ВложенныйЗапрос.ТоварнаяКатегория,
				               |	ВложенныйЗапрос.Брендообъем,
				               |	ВложенныйЗапрос.УстановкаСкидокНоменклатуры,
				               |	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
				               |	СУММА(ВложенныйЗапрос.СуммаСкидки) КАК СуммаСкидки,
				               |	ВложенныйЗапрос.ПЦ_ОграниченияСкидки,
				               |	ВложенныйЗапрос.ПРГ_ОбъединятьБрендообъем
				               |ИЗ
				               |	(ВЫБРАТЬ
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент КАК Контрагент,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура КАК Номенклатура,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория КАК ТоварнаяКатегория,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем КАК Брендообъем,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры КАК УстановкаСкидокНоменклатуры,
				               |		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) КАК Количество,
				               |		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) КАК СуммаСкидки,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки КАК ПЦ_ОграниченияСкидки,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры.ПРГ_ОбъединятьБрендообъем КАК ПРГ_ОбъединятьБрендообъем
				               |	ИЗ
				               |		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(
				               |				,
				               |				УстановкаСкидокНоменклатуры В (&МассивСкидок)
				               |					И (ДоговорКонтрагента = &ДоговорКонтрагента
				               |						ИЛИ ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
				               |							И Контрагент = &Контрагент)) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
				               |	
				               |	СГРУППИРОВАТЬ ПО
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры.ПРГ_ОбъединятьБрендообъем
				               |	
				               |	ОБЪЕДИНИТЬ ВСЕ
				               |	
				               |	ВЫБРАТЬ
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
				               |		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество),
				               |		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки),
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры.ПРГ_ОбъединятьБрендообъем
				               |	ИЗ
				               |		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
				               |	ГДЕ
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.ОтменаСкидокНоменклатуры
				               |		И ПЦ_ОграничениеПоПредоставленнымСкидкам.Период > &НаДату
				               |		И ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры В(&МассивСкидок)
				               |		И (ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента = &ДоговорКонтрагента
				               |				ИЛИ ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
				               |					И ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент = &Контрагент)
				               |	
				               |	СГРУППИРОВАТЬ ПО
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки,
				               |		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры.ПРГ_ОбъединятьБрендообъем) КАК ВложенныйЗапрос
				               |
				               |СГРУППИРОВАТЬ ПО
				               |	ВложенныйЗапрос.Номенклатура,
				               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
				               |	ВложенныйЗапрос.ТоварнаяКатегория,
				               |	ВложенныйЗапрос.Брендообъем,
				               |	ВложенныйЗапрос.ДоговорКонтрагента,
				               |	ВложенныйЗапрос.Контрагент,
				               |	ВложенныйЗапрос.УстановкаСкидокНоменклатуры,
				               |	ВложенныйЗапрос.ПЦ_ОграниченияСкидки,
				               |	ВложенныйЗапрос.ПРГ_ОбъединятьБрендообъем";
				
				ТаблицаСкидокПолная = Запрос.Выполнить().Выгрузить();
				ТаблицаСкидокПолная.Сортировать("Номенклатура УБЫВ,Брендообъем,ТоварнаяКатегория,УстановкаСкидокНоменклатуры");
				//>>020915 Степанов б/н
				//ТаблицаСкидок = ТаблицаСкидокПолная.Скопировать();
				//ТаблицаСкидок.Очистить();
				ТаблицаСкидок = ТаблицаСкидокПолная.СкопироватьКолонки();
				//>>170516 Степанов б/н
				ТаблицаСкидок.Колонки.Добавить("ЗаказПокупателя");
				//<<170516
				//>>280316 Степанов б/н есть клиенты у которых использовались разные типы скидок; делаем суммирование только по сумме
				//ВсегоДоступныйОстатокСкидки = ТаблицаСкидокПолная.Итог("СуммаСкидки");
				ВсегоДоступныйОстатокСкидки=0;
				Для Каждого СтрокаТаблицаСкидокПолная из ТаблицаСкидокПолная цикл
					//>>190416 Степанов Если СтрокаТаблицаСкидокПолная.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки тогда
					Если (СтрокаТаблицаСкидокПолная.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки) 
						  ИЛИ (СтрокаТаблицаСкидокПолная.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг) тогда
						ВсегоДоступныйОстатокСкидки = ВсегоДоступныйОстатокСкидки+СтрокаТаблицаСкидокПолная.СуммаСкидки;
					КонецЕсли;
				КонецЦикла;	
				//<<280316	
				ВсегоСуммаСкидкиКСписанию   = 0;
				//<<
				
				//>>020616 Степанов 52014
				Отбор = Новый Структура;
				Отбор.Вставить("ПРГ_ОбъединятьБрендообъем", Истина);
                КопияТаблицаСкидокПолная = ТаблицаСкидокПолная.Скопировать(Отбор,"Номенклатура,Брендообъем,УстановкаСкидокНоменклатуры,ПЦ_ОграниченияСкидки,ПРГ_ОбъединятьБрендообъем,Количество,СуммаСкидки");
				Если КопияТаблицаСкидокПолная.Количество()>0 тогда
					
					ТабПриказов = КопияТаблицаСкидокПолная.Скопировать(,"УстановкаСкидокНоменклатуры");
					ТабПриказов.Свернуть("УстановкаСкидокНоменклатуры");
					ЗапросБО = Новый Запрос;
					ЗапросБО.Текст = 
					"ВЫБРАТЬ
					|	УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем,
					|	УстановкаСкидокНоменклатурыТовары.Ссылка КАК УстановкаСкидокНоменклатуры,
					|	СУММА(УстановкаСкидокНоменклатурыТовары.ОграничениеСкидкиНаценки) КАК КоличествоПоПриказу
					|ПОМЕСТИТЬ ВТ_Брендообъемы
					|ИЗ
					|	Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
					|ГДЕ
					|	УстановкаСкидокНоменклатурыТовары.Ссылка В(&Приказы)
					|
					|СГРУППИРОВАТЬ ПО
					|	УстановкаСкидокНоменклатурыТовары.Ссылка,
					|	УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВложенныйЗапрос.УстановкаСкидокНоменклатуры,
					|	ВложенныйЗапрос.НСИ_Брендообъем КАК Брендообъем,
					|	СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток
					|ПОМЕСТИТЬ ВТ_ОстаткиБО
					|ИЗ
					|	(ВЫБРАТЬ
					|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры КАК УстановкаСкидокНоменклатуры,
					|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура.НСИ_Брендообъем КАК НСИ_Брендообъем,
					|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) КАК КоличествоОстаток
					|	ИЗ
					|		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(
					|				,
					|				УстановкаСкидокНоменклатуры В (&Приказы)
					|					И (ДоговорКонтрагента = &ДоговорКонтрагента
					|						ИЛИ ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
					|							И Контрагент = &Контрагент)) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
					|	
					|	СГРУППИРОВАТЬ ПО
					|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура.НСИ_Брендообъем,
					|		ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
					|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура.НСИ_Брендообъем,
					|		СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество)
					|	ИЗ
					|		РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
					|	ГДЕ
					|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.ОтменаСкидокНоменклатуры
					|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.Период > &НаДату
					|		И ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры В(&Приказы)
					|		И (ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента = &ДоговорКонтрагента
					|				ИЛИ ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
					|					И ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент = &Контрагент)
					|	
					|	СГРУППИРОВАТЬ ПО
					|		ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
					|		ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура.НСИ_Брендообъем) КАК ВложенныйЗапрос
					|
					|СГРУППИРОВАТЬ ПО
					|	ВложенныйЗапрос.УстановкаСкидокНоменклатуры,
					|	ВложенныйЗапрос.НСИ_Брендообъем
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВТ_Брендообъемы.УстановкаСкидокНоменклатуры,
					|	ВТ_Брендообъемы.ПЦ_Брендообъем КАК Брендообъем,
					|	ВТ_Брендообъемы.КоличествоПоПриказу,
					|	ЕСТЬNULL(ВТ_ОстаткиБО.КоличествоОстаток, 0) КАК КоличествоОстаток
					|ИЗ
					|	ВТ_Брендообъемы КАК ВТ_Брендообъемы
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиБО КАК ВТ_ОстаткиБО
					|		ПО ВТ_Брендообъемы.УстановкаСкидокНоменклатуры = ВТ_ОстаткиБО.УстановкаСкидокНоменклатуры
					|			И ВТ_Брендообъемы.ПЦ_Брендообъем = ВТ_ОстаткиБО.Брендообъем";
					ЗапросБО.УстановитьПараметр("Приказы",ТабПриказов);
					ЗапросБО.УстановитьПараметр("НаДату", Дата);
				    ЗапросБО.УстановитьПараметр("Контрагент", Контрагент); 
				    ЗапросБО.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
					КопияТаблицаСкидокПолная = ЗапросБО.Выполнить().Выгрузить();
					
					//КопияТаблицаСкидокПолная.Свернуть("Номенклатура,Брендообъем,УстановкаСкидокНоменклатуры,ПЦ_ОграниченияСкидки,ПРГ_ОбъединятьБрендообъем","Количество");
					//Для Каждого СтрТЗ из КопияТаблицаСкидокПолная цикл
					//	СтрТЗ.Брендообъем = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(СтрТЗ.Номенклатура,"НСИ_Брендообъем");
					//КонецЦикла;
					//КопияТаблицаСкидокПолная.Свернуть("Брендообъем,УстановкаСкидокНоменклатуры,ПЦ_ОграниченияСкидки,ПРГ_ОбъединятьБрендообъем","Количество");
					////рассчитать сумму начального количества по брендообъему
					//КопияТаблицаСкидокПолная.Колонки.Добавить("КоличествоПоПриказу");
					//ЗапросПриказБрендообъем = Новый Запрос;
					//ЗапросПриказБрендообъем.Текст = 
					//"ВЫБРАТЬ
					//|	СУММА(УстановкаСкидокНоменклатурыТовары.ОграничениеСкидкиНаценки) КАК ОграничениеСкидкиНаценки
					//|ИЗ
					//|	Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
					//|ГДЕ
					//|	УстановкаСкидокНоменклатурыТовары.Ссылка = &СсылкаПриказ
					//|	И УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем = &ПЦ_Брендообъем";
					//Для Каждого СтрТЗ из КопияТаблицаСкидокПолная цикл
					//	ЗапросПриказБрендообъем.УстановитьПараметр("СсылкаПриказ",СтрТЗ.УстановкаСкидокНоменклатуры);
					//	ЗапросПриказБрендообъем.УстановитьПараметр("ПЦ_Брендообъем",СтрТЗ.Брендообъем);
					//	РезЗапросПриказБрендообъем = ЗапросПриказБрендообъем.Выполнить().Выбрать();
					//	Пока РезЗапросПриказБрендообъем.Следующий() цикл
					//		СтрТЗ.КоличествоПоПриказу = РезЗапросПриказБрендообъем.ОграничениеСкидкиНаценки;
					//	КонецЦикла;	
					//КонецЦикла;	
				КонецЕсли;
				//<<
				
				врем_Товары = ТаблицаПоТоварам.Скопировать(,"Номенклатура,Количество,Брендообъем,ТоварнаяКатегория,СуммаСкидки,СуммаАвтоматическойСкидки,ПЦ_ОграниченияСкидки,УстановкаСкидокНоменклатуры,СтавкаНДС");
				врем_Товары.Колонки.СуммаСкидки.Имя = "_СуммаСкидки";
				врем_Товары.Колонки.СуммаАвтоматическойСкидки.Имя = "СуммаСкидки";
				
				СуммаСкидок_врем_Товары = врем_Товары.Итог("СуммаСкидки");
				//>>280316 Степанов б/н
				//Если (ВсегоДоступныйОстатокСкидки = 0) и (СуммаСкидок_врем_Товары >0) тогда
				//	Если ТипСкидкиКонтрагента = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки тогда
				//		ОбщегоНазначения.СообщитьОбОшибке("По указанным условиям нет доступных скидок, но идет попытка их применить!",Отказ,Заголовок);
				//		Возврат
				//	КонецЕсли;
				//КонецЕсли;
				//<<280316
				
				Для каждого СтрокаСкидки Из ТаблицаСкидокПолная Цикл
					//>>020915 Степанов 43137
					Если СтрокаСкидки.СуммаСкидки < 0 тогда
						//>>151015 Степанов
						//ОбщегоНазначения.СообщитьОбОшибке("Обнаружен отрицательный остаток предоставленной скидки!",Отказ,Заголовок);
						//Возврат
						СтрокаСкидки.СуммаСкидки = 0;
					КонецЕсли;
					//<<
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("УстановкаСкидокНоменклатуры", СтрокаСкидки.УстановкаСкидокНоменклатуры);
					
					//начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок 
					//СкидкаПоКоличеству = СтрокаСкидки.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем;
					СкидкаПоКоличеству = СтрокаСкидки.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем;
					//конец изменений 
					
					Если ЗначениеЗаполнено(СтрокаСкидки.Номенклатура) Тогда
						////>>020616 Степанов 52014 
						//Если СтрокаСкидки.ПРГ_ОбъединятьБрендообъем тогда
						//	СтруктураПоиска.Вставить("Брендообъем", ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(СтрокаСкидки.Номенклатура,"НСИ_Брендообъем"));
						//Иначе	
							СтруктураПоиска.Вставить("Номенклатура", СтрокаСкидки.Номенклатура);	
						//КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(СтрокаСкидки.Брендообъем) Тогда
						СтруктураПоиска.Вставить("Брендообъем", СтрокаСкидки.Брендообъем);	
					ИначеЕсли ЗначениеЗаполнено(СтрокаСкидки.ТоварнаяКатегория) Тогда
						СтруктураПоиска.Вставить("ТоварнаяКатегория", СтрокаСкидки.ТоварнаяКатегория);
					КонецЕсли;
					
					СтрокиТоваров = врем_Товары.НайтиСтроки(СтруктураПоиска);
					ВрКоличество = 0;
					ВрСуммаСкидки = 0;
					
					Для каждого СтрокаТовара Из СтрокиТоваров Цикл
						
						Если СкидкаПоКоличеству И СтрокаТовара.СуммаСкидки > 0 И СтрокаТовара.Количество > 0 Тогда //списанием ограничение скидки, если только нет наценки
							//>>020616 Степанов 52014 если надо объединять б/о используем другую таблицу
							Если не СтрокаСкидки.ПРГ_ОбъединятьБрендообъем тогда
								
								//>>111115 Степанов 45948 обнулим возможный отрицательный остаток {СтрокаСкидки.Количество}
								Если СтрокаСкидки.Количество<0 тогда
									СтрокаСкидки.Количество=0;
								КонецЕсли;	
								//<<111115
								
								ВрКоличество = ВрКоличество + МИН(СтрокаСкидки.Количество, СтрокаТовара.Количество);
								СпишемКоличество = МИН(СтрокаСкидки.Количество, СтрокаТовара.Количество);
								
								СтрокаТовара.СуммаСкидки = СтрокаТовара.СуммаСкидки*(СтрокаТовара.Количество - СпишемКоличество)/СтрокаТовара.Количество;
								
								СтрокаТовара.Количество = СтрокаТовара.Количество - СпишемКоличество;
								СтрокаСкидки.Количество = СтрокаСкидки.Количество - СпишемКоличество;
							Иначе
								//надо получить доступный остаток количества из таблицы б/о
								СтруктураПоискаБО = Новый Структура;
								СтруктураПоискаБО.Вставить("УстановкаСкидокНоменклатуры", СтрокаСкидки.УстановкаСкидокНоменклатуры);
								Брендообъем = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(СтрокаТовара.Номенклатура,"НСИ_Брендообъем");
								СтруктураПоискаБО.Вставить("Брендообъем", Брендообъем);
								
								СтрокиБрендообъемов = КопияТаблицаСкидокПолная.НайтиСтроки(СтруктураПоискаБО);
								Для Каждого СтрокаБрендообъема из СтрокиБрендообъемов цикл
									ДоступноеКоличествоБО = СтрокаБрендообъема.КоличествоПоПриказу * 0.1 + СтрокаБрендообъема.КоличествоОстаток;
									Если ДоступноеКоличествоБО < 0 тогда
										ДоступноеКоличествоБО=0;
									КонецЕсли;	
									
									ВрКоличество = ВрКоличество + МИН(ДоступноеКоличествоБО, СтрокаТовара.Количество);
									СпишемКоличество = МИН(ДоступноеКоличествоБО, СтрокаТовара.Количество);
									
									СтрокаТовара.СуммаСкидки = СтрокаТовара.СуммаСкидки*(СтрокаТовара.Количество - СпишемКоличество)/СтрокаТовара.Количество;
									
									СтрокаТовара.Количество = СтрокаТовара.Количество - СпишемКоличество;
									СтрокаБрендообъема.КоличествоОстаток = СтрокаБрендообъема.КоличествоОстаток - СпишемКоличество;
									СтрокаСкидки.Количество = СтрокаСкидки.Количество - СпишемКоличество;
								КонецЦикла;	
							КонецЕсли;
							
						ИначеЕсли СтрокаТовара.СуммаСкидки > 0 Тогда
							//>>030915 Степанов б/н подсчет итоговой суммы скидки с НДС для проверки на возникновение отрицательных остатков
							Если (СтрокаТовара.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг) ИЛИ (СтрокаТовара.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки) тогда
								Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
									ВсегоСуммаСкидкиКСписанию = ВсегоСуммаСкидкиКСписанию + СтрокаТовара.СуммаСкидки + Окр(УчетНДС.РассчитатьСуммуНДС(СтрокаТовара.СуммаСкидки, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС)),2);
								Иначе
									ВсегоСуммаСкидкиКСписанию = ВсегоСуммаСкидкиКСписанию + СтрокаТовара.СуммаСкидки;
								КонецЕсли;
							КонецЕсли;
							//<<030915
							
							/// Кунов О.В., 21.05.2015 - 39615
							СуммаКСписанию = Мин(СтрокаСкидки.СуммаСкидки, СтрокаТовара.СуммаСкидки);
							Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
								СуммаКСписанию = СуммаКСписанию +
								УчетНДС.РассчитатьСуммуНДС(СуммаКСписанию, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
								СуммаКСписанию = Мин(СтрокаСкидки.СуммаСкидки, СуммаКСписанию);
							КонецЕсли;
							//ВрСуммаСкидки = ВрСуммаСкидки + МИН(СтрокаСкидки.СуммаСкидки, СтрокаТовара.СуммаСкидки);
							//СпишемСкидку = МИН(СтрокаСкидки.СуммаСкидки, СтрокаТовара.СуммаСкидки);
							ВрСуммаСкидки = ВрСуммаСкидки + СуммаКСписанию;
							СпишемСкидку = СуммаКСписанию;
							///
							СтрокаТовара.СуммаСкидки = СтрокаТовара.СуммаСкидки - СпишемСкидку;
							СтрокаСкидки.СуммаСкидки = СтрокаСкидки.СуммаСкидки - СпишемСкидку;
						КонецЕсли;
						
					КонецЦикла; 
					
					Если ВрКоличество > 0 ИЛИ ВрСуммаСкидки > 0 Тогда
						НоваяСтрока = ТаблицаСкидок.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСкидки);
						НоваяСтрока.Количество = ВрКоличество;
						НоваяСтрока.СуммаСкидки = ВрСуммаСкидки;
					КонецЕсли;
					
					//Если ВрКоличество > 0 И СтрокаТовара.Количество > 1 Тогда
					//	ОбщегоНазначения.СообщитьОбОшибке("Превышение объема предоставленной скидки по приказу на скидку " + СокрЛП(СтрокаСкидки.УстановкаСкидокНоменклатуры) + Символы.ПС + "Превышение: " + СокрЛП(СтрокаТовара.Количество),Отказ,Заголовок);	
					//ИначеЕсли ВрСуммаСкидки > 0 И СтрокаТовара.СуммаСкидки > 1 Тогда
					//	ОбщегоНазначения.СообщитьОбОшибке("Превышение суммы предоставленной скидки по приказу на скидку " + СокрЛП(СтрокаСкидки.УстановкаСкидокНоменклатуры) + Символы.ПС + "Превышение: " + СокрЛП(СтрокаТовара.СуммаСкидки),Отказ,Заголовок);	
					//КонецЕсли;
					//
					
				КонецЦикла;
				Если ВсегоДоступныйОстатокСкидки<Окр(ВсегоСуммаСкидкиКСписанию,2) тогда
					//>>271015 Степанов
					Если (ВсегоСуммаСкидкиКСписанию - ВсегоДоступныйОстатокСкидки) > 3 тогда
						ОбщегоНазначения.СообщитьОбОшибке("Попытка применить скидку больше доступной! Доступен остаток скидки: "+Строка(ВсегоДоступныйОстатокСкидки)+", а пытаетесь применить "+Строка(Окр(ВсегоСуммаСкидкиКСписанию,2)),Отказ,Заголовок);	
					КонецЕсли;
				КонецЕсли;	
				
				//>>030915 Степанов б/н закомментировано, потому что некорректно	
				////Если врем_Товары.Итог("СуммаСкидки") > 0 И Не Отказ Тогда
				////	Для каждого СтрокаТовара Из врем_Товары Цикл
				////		
				////		//m.ionov@a-prof.ru 05.02.2015
				////		//из-за округлений - сделаем контроль до 5 рублей.
				////		//----m.ionov@a-prof.ru---
				////		
				////		Если СтрокаТовара.СуммаСкидки < 5 ИЛИ Не ЗначениеЗаполнено(СтрокаТовара.УстановкаСкидокНоменклатуры) Тогда
				////			Продолжить;
				////		КонецЕсли;
				////		
				////		//начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок 
				////		//Если СтрокаТовара.СуммаСкидки > 5 И Не СтрокаТовара.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период Тогда
				////		Если СтрокаТовара.СуммаСкидки > 5 И Не СтрокаТовара.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период Тогда
				////			ОбщегоНазначения.СообщитьОбОшибке("Превышение суммы предоставленной скидки по приказу на скидку " + СокрЛП(СтрокаТовара.УстановкаСкидокНоменклатуры) + Символы.ПС + "Превышение: " + СокрЛП(СтрокаТовара.СуммаСкидки),Отказ,Заголовок);	
				////		КонецЕсли;
				////	КонецЦикла; 
				////КонецЕсли;
				//<<030915
				
				НаборДвижений = Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам;
				
				//>>170516 Степанов
				ТаблицаСкидок.ЗаполнитьЗначения(Ссылка, "ЗаказПокупателя");
				//<<170516
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаСкидок", ТаблицаСкидок);
				
				//>>220416 Степанов проверка на соответствие данных в табличной части данным, подготовленным к записи в регистр
				ТЧ = ТаблицаПоТоварам.Скопировать(,"Количество,СуммаАвтоматическойСкидки,ПЦ_ОграниченияСкидки,УстановкаСкидокНоменклатуры,СтавкаНДС");
				Для Каждого ТекСтрокаТЧ из ТЧ цикл
					Если (ТекСтрокаТЧ.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки) или (ТекСтрокаТЧ.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг) тогда
						Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
							ТекСтрокаТЧ.СуммаАвтоматическойСкидки = ТекСтрокаТЧ.СуммаАвтоматическойСкидки + Окр(УчетНДС.РассчитатьСуммуНДС(ТекСтрокаТЧ.СуммаАвтоматическойСкидки, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТекСтрокаТЧ.СтавкаНДС)),2);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
				ТЧ.Свернуть("ПЦ_ОграниченияСкидки,УстановкаСкидокНоменклатуры","Количество,СуммаАвтоматическойСкидки");
				ТД = ТаблицаСкидок.Скопировать();
				ТД.Свернуть("УстановкаСкидокНоменклатуры","Количество,СуммаСкидки");
				Для Каждого ТекСтрокаТЧ из ТЧ цикл
					Если ТекСтрокаТЧ.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем тогда
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("УстановкаСкидокНоменклатуры", ТекСтрокаТЧ.УстановкаСкидокНоменклатуры);
						СтрокиТД = ТД.НайтиСтроки(СтруктураПоиска);
						Если СтрокиТД.Количество()=0 тогда
							ОбщегоНазначения.СообщитьОбОшибке("Ошибка при формировании записей по ограничению скидки по проданному объему! Необходимо проверить приказ.",Отказ,Заголовок);
						Иначе
							Для Каждого НайденнаяСтрокаТД из СтрокиТД цикл
								Если НайденнаяСтрокаТД.Количество <> ТекСтрокаТЧ.Количество тогда 
									ОбщегоНазначения.СообщитьОбОшибке("Ошибка при формировании записей по ограничению скидки по проданному объему! Необходимо проверить приказ.",Отказ,Заголовок);
								КонецЕсли;	
							КонецЦикла;	
						КонецЕсли;
					КонецЕсли;
					Если (ТекСтрокаТЧ.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки) или (ТекСтрокаТЧ.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг) тогда
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("УстановкаСкидокНоменклатуры", ТекСтрокаТЧ.УстановкаСкидокНоменклатуры);
						СтрокиТД = ТД.НайтиСтроки(СтруктураПоиска);
						Если СтрокиТД.Количество()=0 тогда
							ОбщегоНазначения.СообщитьОбОшибке("Ошибка при формировании записей по суммовому ограничению скидки! Необходимо пересчитать скидки и проверить приказ.",Отказ,Заголовок);
						Иначе
							Для Каждого НайденнаяСтрокаТД из СтрокиТД цикл
								Если (Макс(НайденнаяСтрокаТД.СуммаСкидки,ТекСтрокаТЧ.СуммаАвтоматическойСкидки) - Мин(НайденнаяСтрокаТД.СуммаСкидки,ТекСтрокаТЧ.СуммаАвтоматическойСкидки))>3 тогда 
									ОбщегоНазначения.СообщитьОбОшибке("Ошибка при формировании записей по суммовому ограничению скидки! Необходимо пересчитать скидки и проверить приказ.",Отказ,Заголовок);
								КонецЕсли;	
							КонецЦикла;	
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;	
				//<<220416
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента"	, ДоговорКонтрагента);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				//----m.ionov@a-prof.ru---
				
				////>>190516 Степанов б/н нужно изменить суммы в ПЦ_ОграниченияПоПредоставленнымСкидкам в случае наличия проведенной последующей отмены приказов на скидку 
				//решили лучше сделать регламентное задание
				//ЗапросПоОтменам = Новый Запрос;
				//ЗапросПоОтменам.Текст = 
				//"ВЫБРАТЬ РАЗЛИЧНЫЕ
				//|	ОтменаСкидокНоменклатурыДокументы.Ссылка КАК ОтменаСкидокНоменклатуры
				//|ИЗ
				//|	Документ.ОтменаСкидокНоменклатуры.Документы КАК ОтменаСкидокНоменклатурыДокументы
				//|ГДЕ
				//|	ОтменаСкидокНоменклатурыДокументы.Ссылка.Проведен
				//|	И ОтменаСкидокНоменклатурыДокументы.Ссылка.Дата > &НаДату
				//|	И ОтменаСкидокНоменклатурыДокументы.УстановкаСкидокНоменклатуры В(&МассивСкидок)
				//|	И (ОтменаСкидокНоменклатурыДокументы.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки = &ПЦ_ОграниченияСкидкиСумма
				//|			ИЛИ ОтменаСкидокНоменклатурыДокументы.УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки = &ПЦ_ОграниченияСкидкиАкт)";
				//ЗапросПоОтменам.УстановитьПараметр("НаДату", Дата);
				//ЗапросПоОтменам.УстановитьПараметр("ПЦ_ОграниченияСкидкиСумма", Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки);
				//ЗапросПоОтменам.УстановитьПараметр("ПЦ_ОграниченияСкидкиАкт", Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг);
				//ЗапросПоОтменам.УстановитьПараметр("МассивСкидок", ТЧ.ВыгрузитьКолонку("УстановкаСкидокНоменклатуры"));
				//РезЗапросПоОтменам = ЗапросПоОтменам.Выполнить().Выбрать();
				//Пока РезЗапросПоОтменам.Следующий() цикл
				//	ОтменаОбъект = РезЗапросПоОтменам.ОтменаСкидокНоменклатуры.ПолучитьОбъект();
				//	ОтменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				//КонецЦикла;	
				////<<190516
				
			//КонецЕсли;//<<070915 конец условия
		КонецЕсли;//<<271015 конец условия
	КонецЕсли;
	
	
КонецПроцедуры // ДвиженияПоРегистрамУпрСтарый()

// Формируем движения по упр. регистрам.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоУслугам, ТаблицаПоТаре,
	Отказ, Заголовок);
	
	ДвиженияПоРасчетамСКонтрагентами( СтруктураШапкиДокумента, Отказ);
	
	Если Не Отказ Тогда
		
		// Движения по заказам покупателей.
		НаборДвижений = Движения.ЗаказыПокупателей;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Ссылка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       ОпределитьСтатусПартии(),                         "ТаблицаПоТоварам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаПоУслугам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
		// Движения по размещениям.
		ТаблицаПоТоварамРазмещение = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоКомплектам);
		ТаблицаПоТареРазмещение    = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТаре);
		
		Если ТаблицаПоТоварамРазмещение.Количество() > 0 ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда
			
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			
			Если Не Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРазмещение);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРазмещение);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя",    Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",          Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",          Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Движения по резервированиям.
		ТаблицаПоТоварамРезервирование = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоКомплектам);
		ТаблицаПоТареРезервирование    = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТаре);
		Если ТаблицаПоТоварамРезервирование.Количество() > 0 ИЛИ ТаблицаПоТареРезервирование.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли;
			
			Если Не Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезервирование);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезервирование);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Ссылка);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
		
		//++ Spl_Апроф 15.10.2014 (k.russkih@a-prof.ru)
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КП_ИмпортированныйЗаказ") Тогда
			
			// Движения по импортированным заказам
			НаборДвижений = Движения.КП_ИмпортированныеЗаказы;
			
			врем_Товары = ТаблицаПоТоварам.Скопировать();
			врем_Товары.Колонки.Сумма.Имя = "Сумма1";
			врем_Товары.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
			Для каждого мСтрокаДок Из врем_Товары Цикл
				
				мСтрокаДок.Количество 	= -мСтрокаДок.Количество;
				мСтрокаДок.Сумма 		= -мСтрокаДок.Сумма;
				
			КонецЦикла; 
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", врем_Товары);
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ИмпортированныйЗаказ"	, Ссылка.ДокументОснование);
			//ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента"	, ДоговорКонтрагента);
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		//-- Spl_Апроф
		
		// Движения по ограничениям скидки
		//>>170816 Степанов 54372
		Если ПЦ_ПересчитыватьЦеныПриОтгрузке Или ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда /// Кунов О.В., 28.06.2017 - 63651
			ДатаСкидок = КонецДня(ДатаОтгрузки);
		ИначеЕсли ПЦ_ПересчитыватьЦеныНаДатуДоставки Или ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда /// Кунов О.В., 28.06.2017 - 66859
			ДатаСкидок = КонецДня(КП_ДатаДоставки);
		Иначе
			ДатаСкидок = КонецДня(Дата);
		КонецЕсли;
		////Если ВидРеализации = Перечисления.ВидыСкидок.Розничная Тогда
		////	КурсКратность = 1;
		////Иначе
		////	КурсКратность = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) / ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета);
		////КонецЕсли;
		//
		ТаблицаСкидок = ТаблицаПоТоварам.Скопировать(,"УстановкаСкидокНоменклатуры,ВалютаУстановкаСкидок,ПЦ_ОграниченияСкидки,НомерСтрокиПолучателя,НомерСтрокиТовара,СтавкаНДС,Количество,СуммаАвтоматическойСкидки");
		ТаблицаСкидок.Свернуть("УстановкаСкидокНоменклатуры,ВалютаУстановкаСкидок,ПЦ_ОграниченияСкидки,НомерСтрокиПолучателя,НомерСтрокиТовара,СтавкаНДС","Количество,СуммаАвтоматическойСкидки");
		Для Каждого ТекСтрокаТЧ из ТаблицаСкидок цикл
			Если (ТекСтрокаТЧ.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки) или (ТекСтрокаТЧ.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг) тогда
				Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
					ТекСтрокаТЧ.СуммаАвтоматическойСкидки = ТекСтрокаТЧ.СуммаАвтоматическойСкидки + Окр(УчетНДС.РассчитатьСуммуНДС(ТекСтрокаТЧ.СуммаАвтоматическойСкидки, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТекСтрокаТЧ.СтавкаНДС)),2);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		
		ЗапросТС = Новый Запрос;
		ЗапросТС.Текст = 
		"ВЫБРАТЬ
		|	ТЗ.УстановкаСкидокНоменклатуры,
		|	ТЗ.ВалютаУстановкаСкидок,
		|	ТЗ.ПЦ_ОграниченияСкидки,
		|	ТЗ.НомерСтрокиПолучателя,
		|	ТЗ.НомерСтрокиТовара,
		|	ТЗ.Количество,
		|	ТЗ.СуммаАвтоматическойСкидки КАК СуммаСкидкиСНДС
		|ПОМЕСТИТЬ ВТ_ТаблицаСкидок
		|ИЗ
		|	&ТЗ КАК ТЗ
		|ГДЕ
		|   НЕ (ТЗ.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.Период)) 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры,
		|	ВТ_ТаблицаСкидок.ВалютаУстановкаСкидок,
		|	ВТ_ТаблицаСкидок.ПЦ_ОграниченияСкидки,
		|	ВТ_ТаблицаСкидок.НомерСтрокиПолучателя,
		|	ВТ_ТаблицаСкидок.НомерСтрокиТовара,
		|	ВЫБОР
		|		КОГДА ВТ_ТаблицаСкидок.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем)
		|			ТОГДА ВТ_ТаблицаСкидок.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ВТ_ТаблицаСкидок.ПЦ_ОграниченияСкидки <> ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем)
		|			ТОГДА ВТ_ТаблицаСкидок.СуммаСкидкиСНДС
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаСкидки,
		|	УстановкаСкидокНоменклатурыПолучателиСкидки.ПолучательСкидки,
		|	УстановкаСкидокНоменклатурыПолучателиСкидки.Контрагент,
		|	УстановкаСкидокНоменклатурыПолучателиСкидки.ДоговорКонтрагента,
		|	УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_АдресПоставки КАК АдресПоставки,
		|	УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_Дивизион КАК Дивизион,
		|	УстановкаСкидокНоменклатурыТовары.ОбъектСкидки,
		|	ВЫБОР
		|		КОГДА УстановкаСкидокНоменклатурыТовары.Ссылка.ПРГ_ОбъединятьБрендообъем
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|					ТОГДА УстановкаСкидокНоменклатурыТовары.ПЦ_ТоварнаяКатегория
		|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
		|			КОНЕЦ
		|	КОНЕЦ КАК ТоварнаяКатегория,
		|	ВЫБОР
		|		КОГДА УстановкаСкидокНоменклатурыТовары.Ссылка.ПРГ_ОбъединятьБрендообъем
		/// Кунов О.В., 06.03.2017 - 62859
		|			ТОГДА
		|				ВЫБОР КОГДА УстановкаСкидокНоменклатурыТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|					ТОГДА УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем
		|				ИНАЧЕ УстановкаСкидокНоменклатурыТовары.Номенклатура.НСИ_Брендообъем
		|				КОНЕЦ
		///
		|		ИНАЧЕ ВЫБОР
		|				КОГДА УстановкаСкидокНоменклатурыТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|					ТОГДА УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем
		|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
		|			КОНЕЦ
		|	КОНЕЦ КАК Брендообъем,
		|	ВЫБОР
		|		КОГДА УстановкаСкидокНоменклатурыТовары.Ссылка.ПРГ_ОбъединятьБрендообъем
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		ИНАЧЕ УстановкаСкидокНоменклатурыТовары.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	&ЗаказПокупателя КАК ЗаказПокупателя
		|ИЗ
		|	ВТ_ТаблицаСкидок КАК ВТ_ТаблицаСкидок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
		|		ПО ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры = УстановкаСкидокНоменклатурыТовары.Ссылка
		|			И ВТ_ТаблицаСкидок.НомерСтрокиТовара = УстановкаСкидокНоменклатурыТовары.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УстановкаСкидокНоменклатуры.ПолучателиСкидки КАК УстановкаСкидокНоменклатурыПолучателиСкидки
		|		ПО ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры = УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка
		|			И ВТ_ТаблицаСкидок.НомерСтрокиПолучателя = УстановкаСкидокНоменклатурыПолучателиСкидки.НомерСтроки
		|ГДЕ
		|	НЕ(ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры ЕСТЬ NULL 
		|				ИЛИ ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры = ЗНАЧЕНИЕ(Документ.УстановкаСкидокНоменклатуры.ПустаяСсылка))";
		
		ЗапросТС.УстановитьПараметр("ЗаказПокупателя", Ссылка);
		ЗапросТС.УстановитьПараметр("ТЗ", ТаблицаСкидок);
		
		РезТС = ЗапросТС.Выполнить().Выгрузить();
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаСкидок", РезТС);
		НаборДвижений = Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам;
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()


// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для регл. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
											
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
			
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл() 

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,"ОтражатьВУправленческомУчете");
			
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр() 

// Формируем движения по регистру СписанныеТовары
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, 
				                          ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре,
											Отказ, Заголовок)
											
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары
	ТаблицаПоТоварамРезервирование = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТоварам);
	ТаблицаПоТареРезервирование    = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТаре);
	Если ТаблицаПоТоварамРезервирование.Количество() > 0 ИЛИ ТаблицаПоТареРезервирование.Количество() > 0 Тогда
	
		НаборДвижений = Движения.СписанныеТовары;
			
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезервирование);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезервирование);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
			
		// Недостающие поля.
		Инд = 0;
		Для каждого Строка Из ТаблицыДанныхДокумента["ТаблицаПоТоварам"] Цикл
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
		КонецЦикла;
		Для каждого Строка Из ТаблицыДанныхДокумента["ТаблицаПоТаре"] Цикл
			Инд = Инд+1;
			Строка.НомерСтрокиДокумента = Инд;
		КонецЦикла;
			
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперацииПартииТоваров", Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СписыватьТолькоПоЗаказу",  Истина);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказСписания",            Ссылка);
		
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр       ( ТаблицыДанныхДокумента["ТаблицаПоТоварам"], СтруктураШапкиДокумента, ТаблицаПоТоварам);
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл      ( ТаблицыДанныхДокумента["ТаблицаПоТоварам"], СтруктураШапкиДокумента, ТаблицаПоТоварам);
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоВозвратнойТареУпр( ТаблицыДанныхДокумента["ТаблицаПоТаре"],    СтруктураШапкиДокумента, ТаблицаПоТаре);

		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, Неопределено, ТаблицыДанныхДокумента, Дата);
		
		Движения.СписанныеТовары.Записать(Истина);
		
		УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,истина,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ", "СчетУчетаНУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ", "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаНУ", "ПринятыеСчетУчетаНУ");
	

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ", "СчетУчетаНУ");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл()

// Процедура формирует движения регистра в случае если вид операции - 
// переработка дав. сырья
//
Процедура ДвиженияПоРегистрамПереработкаУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоМатериалам, ТаблицаПоУслугам)
	
	НаборДвиженийПокуп = Движения.ЗаказыПокупателей;
	ТаблицаДвиженийПокуп = НаборДвиженийПокуп.Выгрузить();
	
	НаборДвиженийПост = Движения.ЗаказыПоставщикам;
	ТаблицаДвиженийПост = НаборДвиженийПост.Выгрузить();

	// 1. Формирование движений по регистру ЗаказыПокупателей
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвиженийПокуп);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаДвиженийПокуп);
	
	ТаблицаДвиженийПокуп.ЗаполнитьЗначения( ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийПокуп.ЗаполнитьЗначения( Ссылка, "ЗаказПокупателя");
	ТаблицаДвиженийПокуп.ЗаполнитьЗначения( Перечисления.СтатусыПартийТоваров.ВПереработку, "СтатусПартии");
	
	ТаблицаДвиженийПродукция = НаборДвиженийПокуп.Выгрузить(); 
	ТаблицаДвиженийПродукция.Очистить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвиженийПродукция);
	
	// 2. Формирование движений по регистру ЗаказыПоставщикам
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвиженийПост);
	
	ТаблицаДвиженийПост.ЗаполнитьЗначения( ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийПост.ЗаполнитьЗначения( Перечисления.СтатусыПартийТоваров.ВПереработку, "СтатусПартии");
	ТаблицаДвиженийПост.ЗаполнитьЗначения( Ссылка, "ЗаказПоставщику");
	
	// Запись движений в регистры
	НаборДвиженийПокуп.мПериод = Дата;
	НаборДвиженийПокуп.мТаблицаДвижений = ТаблицаДвиженийПокуп;
	НаборДвиженийПокуп.ВыполнитьПриход();

	// Запись движений в регистры
	НаборДвиженийПост.мПериод = Дата;
	НаборДвиженийПост.мТаблицаДвижений = ТаблицаДвиженийПост;
	НаборДвиженийПост.ВыполнитьПриход();
	
	// Движения по расчетам.
	ДвиженияПоРасчетамСКонтрагентами( СтруктураШапкиДокумента, Ложь);
	
КонецПроцедуры // ДвиженияПоРегистрамПереработка()

// Процедура добавляет в таблицу колонки, содержащие сумму упр. учета и сумму взаиморасчетов
//
Процедура ДобавитьСуммы(СтруктураШапкиДокумента, ТаблицаПоМатериалам)
	
	ТаблицаПоМатериалам.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаПоМатериалам.Колонки.Добавить("СуммаУпр",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	ЕстьСуммаНДС = (ТаблицаПоМатериалам.Колонки.Найти("СуммаНДС") <> Неопределено); // Наличие колонки с суммой НДС
	
	Для Каждого СтрокаТЧ Из ТаблицаПоМатериалам Цикл
		
		Сумма = СтрокаТЧ.Сумма;
		
		Если ЕстьСуммаНДС
			 И СтруктураШапкиДокумента.УчитыватьНДС
			 И НЕ СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
			 
			Сумма = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
			
		КонецЕсли;
		
		СтрокаТЧ.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			Сумма,
			ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента,
			КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента,
			КратностьВзаиморасчетов);
			
		СтрокаТЧ.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			Сумма,
			ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСуммы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ВЕБ-ПРИЛОЖЕНИЯ

//Проверяет необходимость расчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки() Экспорт

	//m.ionov@a-prof.ru 07.10.2014
	//m.ionov@a-prof.ru 18.02.2015
	//Возращаем как было - скидки только пока документ не проведен
	//>>281015 Степанов 45192 проведенный тоже
	//Возврат Не Проведен И (мРассчитыватьАвтоматическиеСкидки = Неопределено Или мРассчитыватьАвтоматическиеСкидки);
	Возврат (мРассчитыватьАвтоматическиеСкидки = Неопределено Или мРассчитыватьАвтоматическиеСкидки);
    //----m.ionov@a-prof.ru---
КонецФункции

// Возвращает сумму документа с НДС
//
// Возвращаемое значение:
//  Сумма документа с НДС
//
Функция ПолучитьСуммуСНДС() Экспорт

	Возврат УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") +
	        УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");

КонецФункции // ПолучитьСуммуСНДС()

// Возвращает сумму НДС документа
//
// Возвращаемое значение:
//  Сумма НДС документа
//
Функция ПолучитьСуммуНДС() Экспорт

	Возврат УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект, "Товары") +
	        УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект, "Услуги");

КонецФункции // ПолучитьСуммуНДС()

// Процедура рассчитывает суммы по заказу
//
Процедура РассчитатьСумму() Экспорт

	мСуммаВсего    = ПолучитьСуммуСНДС();
	мСуммаВсегоНДС = ПолучитьСуммуНДС();

КонецПроцедуры
                                   
// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора - структура, содержащая параметры подбора.
//
Функция ЗаполнитьТабличнуюЧастьИзПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика;

	// Получим параметры подбора из структуры подбора.
	УправлениеЗапасами.ПолучитьПараметрыДокументаИзСтруктуры(ЗначениеВыбора, ТипЦен, СпособЗаполненияЦен,
	                                      Номенклатура, Количество, КоличествоМест, Характеристика,
	                                      ВалютаЦены, Цена, ЕдиницаИзмерения);
	                                      
	Серия = ?(ЗначениеВыбора.Свойство("Серия"), ЗначениеВыбора.Серия, Справочники.СерииНоменклатуры.ПустаяСсылка());
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		Если Серия <> NULL Тогда
			СтруктураОтбора.Вставить("СерияНоменклатуры", Серия);
		КонецЕсли;
	ИначеЕсли ТабличнаяЧасть = Материалы Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
			//m.ionov@a-prof.ru 05.11.2014
			АП_ОбщегоНазначенияКлиент.ПроверитьНаКратностьВВода(СтрокаТабличнойЧасти, Истина);
			//----m.ionov@a-prof.ru---
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
				Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
				СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
				
				//m.ionov@a-prof.ru 02.03.2015
				Если ПЦ_ПересчитыватьЦеныПриОтгрузке Или ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда /// Кунов О.В., 28.06.2017 - 63651
					СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(ДатаОтгрузки));
				//{14.10.2015 Островерхий заявка №44781 
				ИначеЕсли ПЦ_ПересчитыватьЦеныНаДатуДоставки Или ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда /// Кунов О.В., 28.06.2017 - 66859
					СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(КП_ДатаДоставки));
				//14.10.2015 Островерхий}	
				Иначе
					СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(Дата));
				КонецЕсли;
				//----m.ionov@a-prof.ru---
				
				ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе // Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Материалы Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, ТекущаяДата(), Подразделение);
			СтрокаТабличнойЧасти.СерияНоменклатуры = Серия;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

			//m.ionov@a-prof.ru 07.10.2014
			// Пересчитаем цену в валюту документа.
			//Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			//СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			//												 СпособЗаполненияЦен,
			//												 ТипЦен.ЦенаВключаетНДС,
			//												 УчитыватьНДС,
			//												 СуммаВключаетНДС,
			//												 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
            ПересчитатьЦеныПоСтроке(СтрокаТабличнойЧасти, Истина, Истина);
			
			СтрокаТабличнойЧасти.КП_ОСГ = АП_ОбщегоНазначенияСервер.ПолучитьСтратегиюОСГ(Контрагент, СтрокаТабличнойЧасти.Номенклатура);
			
			СтрокаТабличнойЧасти.КП_КонтрольКратности = Истина;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест;
			АП_ОбщегоНазначенияКлиент.ПроверитьНаКратностьВВода(СтрокаТабличнойЧасти, Истина);
			//----m.ionov@a-prof.ru---  
															 
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
						
			//Расчет скидок
			Если РассчитыватьАвтоматическиеСкидки() Тогда
				СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

				мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
				СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
				СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
				СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
				СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
				СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
				СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
				
				//m.ionov@a-prof.ru 02.03.2015
				Если ПЦ_ПересчитыватьЦеныПриОтгрузке Или ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда /// Кунов О.В., 28.06.2017 - 63651
					СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(ДатаОтгрузки));
				//{14.10.2015 Островерхий заявка №44781 
				ИначеЕсли ПЦ_ПересчитыватьЦеныНаДатуДоставки Или ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда /// Кунов О.В., 28.06.2017 - 66859
					СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(КП_ДатаДоставки));
				//14.10.2015 Островерхий}	
				Иначе
					СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(Дата));
				КонецЕсли;
				//----m.ionov@a-prof.ru---
				
				ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Иначе// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

			// Рассчитываем плановую себестоимость.
			ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

			// Ввод состава набора
			СтрокаТабличнойЧасти.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена,
			                                         ВалютаЦены,
			                                         ВалютаДокумента,
			                                         ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			                                         ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                                     СпособЗаполненияЦен,
			                                                                     ТипЦен.ЦенаВключаетНДС,
			                                                                     УчитыватьНДС,
			                                                                     СуммаВключаетНДС,
			                                                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Материалы Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			СтрокаТабличнойЧасти.ЕдиницаИзмерения 	  = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      	  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			
			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                                     СпособЗаполненияЦен,
			                                                                     ТипЦен.ЦенаВключаетНДС,
			                                                                     Ложь,
			                                                                     Истина,
			                                                                     Неопределено);

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НД
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции // ЗаполнитьТабличнуюЧастьИзПодбора()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора() Экспорт

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	
	//m.ionov@a-prof.ru 05.02.2015
	Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.Дегустация
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР 
		//Blik 71301 031017 н
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияС
		//Blik 71301 031017 к
		Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПустаяСсылка();
	КонецЕсли;
	//m.ionov@a-prof.ru 18.02.2015
	//Обнулим установленную скидку
	ВремТовары = Товары.Выгрузить();
	ВремТовары.ЗаполнитьЗначения(0,"ПроцентСкидкиНаценки");
	Товары.Загрузить(ВремТовары);
	
	ПЦ_ПересчитыватьЦеныПриОтгрузке = ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке;
	
	/// Кунов О.В., 28.06.2017 - 66859
	ПЦ_ПересчитыватьЦеныНаДатуДоставки = ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки;
	///
	
	//Если поменют на предоплатный договор тогда отправим на согласование
	//{10.10.2016 Островерхий заявка №45028, +письмо Арефьевой Н. от 10.10.2016 
	//Установка статусов должна находится в одном месте
	//Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаПокупателю
	//	И ДоговорКонтрагента.ПроцентПредоплаты > 0 Тогда
	//	
	//	ПКК_АвтоматическийСтатусСогласованияОКК = Истина;
	//	ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании;
	//	ПКК_КомментарийСогласованияОКК = "Проверка предоплаты по заказу";
	//КонецЕсли;
	//10.10.2016 Островерхий} 
	//----m.ionov@a-prof.ru---

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
		
		//m.ionov@a-prof.ru 02.03.2015
		Если ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(ДатаОтгрузки));
		//{14.10.2015 Островерхий заявка №44781 
		ИначеЕсли ПЦ_ПересчитыватьЦеныНаДатуДоставки Тогда
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(КП_ДатаДоставки));
		//14.10.2015 Островерхий}	
		Иначе
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(Дата));
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

	КонецЕсли;

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДоговорКонтрагента",мТекущийДоговорКонтрагента);
	РассчитатьСумму();

КонецПроцедуры // ПриИзмененииДоговора()

// Процедура вызывается при изменении значения Контрагент
//
Процедура ПриИзмененииКонтрагента() Экспорт

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

	//{10.03.2015 Островерхий заявка №37160 
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); 
	//10.03.2015 Островерхий} 
	
	Если НЕ ЗначениеЗаполнено(КонтактноеЛицоКонтрагента) Тогда
		КонтактноеЛицоКонтрагента = Контрагент.ОсновноеКонтактноеЛицо;
	Иначе
		Если КонтактноеЛицоКонтрагента.Владелец <> Контрагент Тогда
			КонтактноеЛицоКонтрагента = Контрагент.ОсновноеКонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	//m.ionov@a-prof.ru 23.09.2014
	Если ЗначениеЗаполнено(Контрагент.НСИ_Отделение) Тогда
		КП_Отделение = Контрагент.НСИ_Отделение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент.НСИ_УсловияПоставки) И Не КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз Тогда
		КП_УсловиеПоставки = Контрагент.НСИ_УсловияПоставки;
	КонецЕсли;
	
	//{25.06.2015 Островерхий заявка №41065 
	//Если ЗначениеЗаполнено(Контрагент.НСИ_АП) Тогда
	Если ЗначениеЗаполнено(Контрагент.НСИ_АП) И Контрагент.НСИ_АП.Активный Тогда
	//25.06.2015 Островерхий} 
		Грузополучатель = Контрагент.НСИ_АП;
		
		ПриИзмененииАдресаПоставки();
	Иначе
		Грузополучатель = Справочники.АдресаПоставки.ПустаяСсылка();
	КонецЕсли;
	
	ПересчитатьЦены(Истина);
		
	//----m.ionov@a-prof.ru---

	//{19.05.2015 Островерхий заявка №39865 
	Если ЗначениеЗаполнено(Контрагент) И Контрагент.ПРГИспользоватьНастройкуНДСИзСправочника Тогда
		СуммаВключаетНДС = Контрагент.ПРГСуммаВключаетНДС;	
	КонецЕсли;  
	//19.05.2015 Островерхий}
	
КонецПроцедуры // ПриИзмененииКонтрагента()

// Процедура при изменении поля ввода номенклатуры в строке табличной части "Товары".
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти) Экспорт

	//m.ionov@a-prof.ru 01.10.2014
	СтрокаТабличнойЧасти.КП_КонтрольКратности = Истина;
	//----m.ionov@a-prof.ru---
	
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
	//m.ionov@a-prof.ru 02.10.2014
	//ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	ПроверитьОтсрочкуПовышенияЦены();

	/// Кунов О.В., 28.07.2015 - 42169
	Если мЕстьОтсрочкаПовышенияЦены Тогда		
		//{14.10.2015 Островерхий заявка №44781 
		Если ПЦ_ПересчитыватьЦеныПриОтгрузке Или ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда /// Кунов О.В., 28.06.2017 - 63651
			тДатаСкидок =ДатаОтгрузки;
		ИначеЕсли ПЦ_ПересчитыватьЦеныНаДатуДоставки Или ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда /// Кунов О.В., 28.06.2017 - 66859
			тДатаСкидок =КП_ДатаДоставки;	
		Иначе
			тДатаСкидок =Дата;	
		КонецЕсли;  
		
		//СтрокаТабличнойЧасти.ПЦ_ДатаЦены = ПЦ_Ценообразование.ПолучимДатуЦеныПоОтсрочкеПовышенияЦены(?(ПЦ_ПересчитыватьЦеныПриОтгрузке, ДатаОтгрузки, Дата), 
		СтрокаТабличнойЧасти.ПЦ_ДатаЦены = ПЦ_Ценообразование.ПолучимДатуЦеныПоОтсрочкеПовышенияЦены(тДатаСкидок, 
		//14.10.2015 Островерхий}
		//{15.04.2016 Островерхий заявка №50566 
		//Грузополучатель.Дивизион, Грузополучатель.НСИ_КаналПродаж, Контрагент, Грузополучатель.НСИ_Регион, Контрагент.НСИ_Вывеска, 
		Контрагент.Дивизион, Контрагент.НСИ_КаналПродаж, Контрагент, Грузополучатель.НСИ_Регион, Контрагент.НСИ_Вывеска,
		//15.04.2016 Островерхий} 
												СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.Номенклатура.Проект, 
												СтрокаТабличнойЧасти.Номенклатура.НСИ_ТоварнаяКатегория, СтрокаТабличнойЧасти.Номенклатура.НСИ_Брендообъем,Грузополучатель)			
	Иначе
		СтрокаТабличнойЧасти.ПЦ_ДатаЦены = Дата(1,1,1);
	КонецЕсли; 
	///
	
	//ПересчитатьЦеныПоСтроке(СтрокаТабличнойЧасти, Истина, Истина);
	ПересчитатьЦеныПоСтроке(СтрокаТабличнойЧасти, Ложь, Истина);
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаИзмеренияМест;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.КП_ОСГ = АП_ОбщегоНазначенияСервер.ПолучитьСтратегиюОСГ(Контрагент, СтрокаТабличнойЧасти.Номенклатура);
	//----m.ionov@a-prof.ru---

	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + СуммаСтрокиПослеИзменения - СуммаСтроки;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
		
		//m.ionov@a-prof.ru 02.03.2015
		Если ПЦ_ПересчитыватьЦеныПриОтгрузке Или ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда /// Кунов О.В., 28.06.2017 - 63651
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(ДатаОтгрузки));
		//{14.10.2015 Островерхий заявка №44781 
		ИначеЕсли ПЦ_ПересчитыватьЦеныНаДатуДоставки Или ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда /// Кунов О.В., 28.06.2017 - 66859
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(КП_ДатаДоставки));
		//14.10.2015 Островерхий}	
		Иначе
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(Дата));
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	// Рассчитываем плановую себестоимость.
	ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	// Ввод состава набора
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	ДокументОснование = Основание;

	Грузоотправитель = Справочники.Контрагенты.ПустаяСсылка();
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда

		// Заполнение шапки
		ВремяНапоминания  = Основание.ВремяНапоминания;
		Комментарий       = Основание.Комментарий;
		НапомнитьОСобытии = Основание.НапомнитьОСобытии;
		Ответственный     = Основание.Ответственный;

		ЗаполнитьДокументПоОснованиюУпр(Основание);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		// Заполнение шапки
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект,Основание);
		Если Основание.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия;
		КонецЕсли;
		
		ОрганизацияКонтрагента = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(Основание.Контрагент);
		Если ЗначениеЗаполнено(ОрганизацияКонтрагента) Тогда

			Контрагент  = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации( Основание.Организация);
			Организация = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту( Основание.Контрагент);
		
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

		Иначе //очистим контрагента, чтобы заполнилось значением по умолчанию в ПриОткрытии
			Контрагент = неопределено;
			ДоговорКонтрагента = неопределено;
        КонецЕсли;
		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл
			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
			НоваяСтрока.Сумма        = ТекСтрокаВозвратнаяТара.Сумма;
			НоваяСтрока.Цена         = ТекСтрокаВозвратнаяТара.Цена;
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		КонецЦикла;
		Для Каждого ТекСтрокаМатериалы Из Основание.Материалы Цикл
			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаМатериалы.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаМатериалы.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаМатериалы.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаМатериалы.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаМатериалы.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаМатериалы.Номенклатура;
			НоваяСтрока.Сумма                      = ТекСтрокаМатериалы.Сумма;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаМатериалы.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                       = ТекСтрокаМатериалы.Цена;
		КонецЦикла;
		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура               = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ПлановаяСебестоимость      = ТекСтрокаТовары.ПлановаяСебестоимость;
			НоваяСтрока.Спецификация               = ТекСтрокаТовары.Спецификация;
			НоваяСтрока.СтавкаНДС                  = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма                      = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС                   = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                       = ТекСтрокаТовары.Цена;
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		КонецЦикла;
		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.Содержание   = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СтавкаНДС    = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.Сумма        = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаНДС     = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.Цена         = ТекСтрокаУслуги.Цена;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

		// Заполнение шапки
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
		
		АвтоРазмещение   = Истина;
		ВалютаДокумента  = Основание.ВалютаДокумента;
		ВремяНапоминания = Основание.ВремяНапоминания;
		ДатаОплаты       = Основание.ДатаОплаты;
		ДатаОтгрузки     = Основание.ДатаОтгрузки;
		ДоговорКонтрагента                = Основание.ДоговорКонтрагента;
		ИспользоватьПлановуюСебестоимость = Основание.ИспользоватьПлановуюСебестоимость;
		ИтогПлановаяСебестоимость         = Основание.ИтогПлановаяСебестоимость;
		Комментарий                       = Основание.Комментарий;
		КонтактноеЛицоКонтрагента         = Основание.КонтактноеЛицоКонтрагента;
		Контрагент                        = Основание.Контрагент;
		Грузоотправитель                  = Основание.Грузоотправитель;
		Грузополучатель                   = Основание.Грузополучатель;
		КратностьВзаиморасчетов           = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов = Основание.КурсВзаиморасчетов;
		НапомнитьОСобытии  = Основание.НапомнитьОСобытии;
		Организация        = Основание.Организация;
		Ответственный      = Основание.Ответственный;
		Подразделение      = Основание.Подразделение;
		СкладГруппа        = Основание.Склад;
		СтруктурнаяЕдиница = Основание.СтруктурнаяЕдиница;
		СуммаВключаетНДС   = Основание.СуммаВключаетНДС;
		СуммаДокумента     = Основание.СуммаДокумента;
		ТипЦен             = Основание.ТипЦен;
		УчитыватьНДС       = Основание.УчитыватьНДС;
		ВидОперации        = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия;

		ЗаполнениеДокументов.ЗаполнитьДанныеДоставкиПоОснованию(ЭтотОбъект, Основание);

		ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект);

		Для Каждого ТекСтрокаВозвратнаяТара Из Основание.ВозвратнаяТара Цикл

			НоваяСтрока = ВозвратнаяТара.Добавить();
			НоваяСтрока.Количество   = ТекСтрокаВозвратнаяТара.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаВозвратнаяТара.Номенклатура;
			НоваяСтрока.Сумма        = ТекСтрокаВозвратнаяТара.Сумма;
			НоваяСтрока.Цена         = ТекСтрокаВозвратнаяТара.Цена;

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		КонецЦикла;

		Для Каждого ТекСтрокаТовары Из Основание.Товары Цикл

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения                    = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест                = ТекСтрокаТовары.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                          = ТекСтрокаТовары.Количество;
			НоваяСтрока.КоличествоМест                      = ТекСтрокаТовары.КоличествоМест;
			НоваяСтрока.Коэффициент                         = ТекСтрокаТовары.Коэффициент;
			НоваяСтрока.Номенклатура                        = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.ПлановаяСебестоимость               = ТекСтрокаТовары.ПлановаяСебестоимость;
			НоваяСтрока.ПроцентСкидкиНаценки                = ТекСтрокаТовары.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = ТекСтрокаТовары.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = ТекСтрокаТовары.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ТекСтрокаТовары.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.СтавкаНДС                           = ТекСтрокаТовары.СтавкаНДС;
			НоваяСтрока.Сумма                               = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаНДС                            = ТекСтрокаТовары.СуммаНДС;
			НоваяСтрока.ХарактеристикаНоменклатуры          = ТекСтрокаТовары.ХарактеристикаНоменклатуры;
			НоваяСтрока.Цена                                = ТекСтрокаТовары.Цена;
			НоваяСтрока.КлючСтроки                          = ТекСтрокаТовары.КлючСтроки;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		КонецЦикла;

		Если Основание.СоставНабора.Количество() > 0 Тогда
			СоставНабора.Загрузить(Основание.СоставНабора.Выгрузить());
		КонецЕсли;

		Для Каждого ТекСтрокаУслуги Из Основание.Услуги Цикл

			НоваяСтрока = Услуги.Добавить();
			НоваяСтрока.Количество                          = ТекСтрокаУслуги.Количество;
			НоваяСтрока.Номенклатура                        = ТекСтрокаУслуги.Номенклатура;
			НоваяСтрока.Содержание                          = ТекСтрокаУслуги.Содержание;
			НоваяСтрока.СтавкаНДС                           = ТекСтрокаУслуги.СтавкаНДС;
			НоваяСтрока.Сумма                               = ТекСтрокаУслуги.Сумма;
			НоваяСтрока.СуммаНДС                            = ТекСтрокаУслуги.СуммаНДС;
			НоваяСтрока.Цена                                = ТекСтрокаУслуги.Цена;
			НоваяСтрока.ПроцентСкидкиНаценки                = ТекСтрокаУслуги.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = ТекСтрокаУслуги.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = ТекСтрокаУслуги.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ТекСтрокаУслуги.ЗначениеУсловияАвтоматическойСкидки;
		КонецЦикла;
		
	//++ Spl_Апроф 08.09.2014 (k.russkih@a-prof.ru)
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПР_Претензия") Тогда
		
		ДокументОснование = Основание;
		
		Если НЕ (ТипЗнч(Основание.Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ ТипЗнч(Основание.Накладная) = Тип("ДокументСсылка.КорректировкаРеализации")) Тогда
		    Возврат;		
		КонецЕсли;
		
		мДокументЗаполнения = ?(ТипЗнч(Основание.Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг"), Основание.Накладная, Основание.Накладная.ДокументРеализации);
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, мДокументЗаполнения);
		
		КП_Отделение = Основание.КП_Отделение;
		КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.СменаПокупателя;
		
		//заполним товарами
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//			   |	ПродажиОбороты.Номенклатура,
		//			   |	ПродажиОбороты.ХарактеристикаНоменклатуры,
		//			   |	СУММА(ПродажиОбороты.КоличествоОборот) КАК Количество
		//			   |ИЗ
		//			   |	РегистрНакопления.Продажи.Обороты(, , , ДокументПродажи = &ДокументПродажи) КАК ПродажиОбороты
		//			   |
		//			   |СГРУППИРОВАТЬ ПО
		//			   |	ПродажиОбороты.Номенклатура,
		//			   |	ПродажиОбороты.ХарактеристикаНоменклатуры";
		//Запрос.УстановитьПараметр("ДокументПродажи", мДокументЗаполнения);
		//
		//Результат = Запрос.Выполнить().Выбрать();
		
		мСуммаДокументаБезСкидок = 0;
		
		Для каждого Результат Из Основание.Товары Цикл
		
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
			
			ПриИзмененииНоменклатурыТоваров(НоваяСтрока);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			
		КонецЦикла;
		
		Комментарий = Основание.Комментарий; // Шевченков 37895
		// ЭтотОбъект.АП_СтатусЗаказа = Перечисления.АП_СтатусыЗаказов.Сформирован; // Шевченков 37870 не знаю какой статус ставить
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КП_ИмпортированныйЗаказ") Тогда
		
		#Если Клиент Тогда			
			мФормируемЧерезОбработку = Ложь;
			Если Не ДополнительныеСвойства.Свойство("ФормируемЧерезОбработку", мФормируемЧерезОбработку) Тогда
				
				ДополнительныеСвойства.Вставить("НеОткрыватьДокумент"	, Истина);
				
				Если НЕ Основание.Проведен Тогда		
					ОбщегоНазначения.СообщитьОбОшибке("Документ можно вводить на только на основание проведенного импортированного заказа!");
					Возврат;		
				КонецЕсли; 
				
				Если Основание.СтатусЗаказа = Перечисления.КП_СтатусыИмпортированногоЗаказа.Импортирован Тогда	
					ОбщегоНазначения.СообщитьОбОшибке("Данный заказ уже импортирован! Для просмотра воспользуйтесь ""Структурой подчиненности""");
					Возврат;		
				КонецЕсли;
				
				ТекОбработка = Обработки.КП_ФормированиеЗаказовПокупателяИзИмпортированных.Создать();
				ТекОбработка.РучноеЗаполнение = Истина;
				
				НоваяСтрока = ТекОбработка.ТаблицаЗаказов.Добавить();
				НоваяСтрока.Документ = Основание;
				НоваяСтрока.Пометка = Истина;
				
				ТекОбработка.ПолучитьФорму().Открыть();
			
			КонецЕсли;
		#КонецЕсли
		
		ДокументОснование = Основание;
		
		мСуммаДокументаБезСкидок = 0;
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		Ответственный = глЗначениеПеременной("глТекущийПользователь");
		
		ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия;
		КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаПокупателю;
		
		//m.ionov@a-prof.ru 02.03.2015
		ПЦ_ПересчитыватьЦеныПриОтгрузке = Основание.ПЦ_ПересчитыватьЦеныПриОтгрузке;
		//----m.ionov@a-prof.ru---
		
		/// Кунов О.В., 21.10.2015 - 44958
		КП_ТЭК 				= Основание.ПРГ_ТЭК;
		КП_АдресДоставкиТЭК = Основание.ПРГ_АдресДоставкиТЭК;
		КП_ДатаДоставкиТЭК	= Основание.КП_ДатаДоставки;
		///
		
		Грузополучатель = Основание.Грузополучатель;
		//m.ionov@a-prof.ru 20.02.2015
		КП_УсловиеПоставки = Основание.КП_УсловиеПоставки;
		//m.ionov@a-prof.ru 13.02.2015
		ПриИзмененииАдресаПоставки(Истина);
		//----m.ionov@a-prof.ru---
		
		АдресДоставки = Основание.АдресДоставки;
		ДополнениеКАдресуДоставки = Основание.ДополнениеКАдресуДоставки;
		НомерПоДаннымПокупателя = Основание.НомерПоДаннымПокупателя;
		ДатаПоДаннымПокупателя = Основание.ДатаПоДаннымПокупателя; 
		
		КП_Отделение = Основание.КП_Отделение;
		КП_ГородДоставки = Основание.КП_ГородДоставки;
		КП_ТипТранспорта = Основание.КП_ТипТранспорта;
		
		СкладГруппа = Основание.СкладГруппа;
		
		КП_ДатаДоставки = Основание.КП_ДатаДоставки;
		ДатаОтгрузки = Основание.ДатаОтгрузки;
		
		//++ Spl_Апроф 16.02.2015 (k.russkih@a-prof.ru)
		КП_ТипЗаказа = "TR";
		
		ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДатаДокумента",ДоговорКонтрагента);
		
		ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НеТребуется;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НеТребуется;
		
		мТаблицаТоваров = Новый ТаблицаЗначений;
		Если ДополнительныеСвойства.Свойство("мТаблицаТоваров", мТаблицаТоваров) Тогда
			
			Если мТаблицаТоваров.Количество() > 0 Тогда
				
				Для каждого Строка Из мТаблицаТоваров Цикл
					
					НоваяСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
					
				КонецЦикла; 
				
			КонецЕсли;
		Иначе
			Товары.Загрузить(Основание.Товары.Выгрузить());			
		КонецЕсли;
		
		#Если Клиент Тогда
			Состояние("Выполняется корректировка цен");
		#КонецЕсли
		//ПересчитатьЦены();
		ДополнительныеСвойства.Вставить("ПересчитатьЦены", Истина);
		
	КонецЕсли;
	
	/// Кунов О.В., 19.04.2017 - 64447
	Если ЭтоНовый() Тогда
		ПРГ_ДопФункцииКлиентСервер.ПроставитьНомерПоставщика(ЭтотОбъект);
	КонецЕсли;
	///
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//{11.01.2017 Островерхий заявка №б/н 
	Если Не Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		тМассивДопустимыхВидовДоговоров = Новый Массив;
		тМассивДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		
		Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.Дегустация
			ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР
		    ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ПеремещениеСкоропорт 
			//Blik 71301 031017 н
			ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияС
			//Blik 71301 031017 к
			Тогда
		
			тМассивДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);	
		
		КонецЕсли; 
		
		тВидДоговора = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(ДоговорКонтрагента,"ВидДоговора");
		
		Если тМассивДопустимыхВидовДоговоров.Найти(тВидДоговора) = Неопределено Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке("В заказе " + СокрЛП(Ссылка) + " выбран договор с недопустимым видом договора ("+тВидДоговора+")!", Отказ);	
		    Возврат;
		
		КонецЕсли; 
		
	КонецЕсли; 
	//11.01.2017 Островерхий} 
	
	мУдалятьДвижения = НЕ ЭтоНовый();//>>220916 Степанов
	
	//{18.06.2015 Островерхий заявка №40747 
	мТабличнаяЧастьТоварыМодифицирована = ТабличнаяЧастьТоварыМодифицирована(); 
	//18.06.2015 Островерхий} 
	
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	ПРГПростоЗаписать = Ложь;
	Если ДополнительныеСвойства.Свойство("ПРГПростоЗаписать",ПРГПростоЗаписать) Тогда
		Если ПРГПростоЗаписать Тогда
			возврат;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 
	//начало изменений Ожиганов 09.06.2015 уберем передано на склад после статуса спланирован 
	//{11.06.2015 Островерхий заявка №б/н, письмо Ожиганова 
	//Если ПометкаУдаления  и Проведен Тогда 
	Если ПометкаУдаления ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда	
	//11.06.2015 Островерхий} 
		Если Не ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУдалятьЗаказы() Тогда
			Отказ = Истина;
			Сообщить("Недостачно прав для удаления заказа !!!");
		КонецЕсли;	
		//дальнейшие проверки не нужны
		возврат;
	КонецЕсли;	
	//конец изменений 
	
	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 	

	//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
	//ниже определим рефрежитар это или нет
	//{08.04.2015 Островерхий заявка №38729 
	//Если НЕ КП_Рефрижератор Тогда
	//
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Товары.Номенклатура
	//	|ПОМЕСТИТЬ втТовары
	//	|ИЗ
	//	|	&Товары КАК Товары
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	спрНоменклатура.Ссылка
	//	|ИЗ
	//	|	втТовары КАК втТовары
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	//	|		ПО втТовары.Номенклатура = спрНоменклатура.Ссылка
	//	|ГДЕ
	//	|	спрНоменклатура.ПРГТребуетсяРефрижератор";
	//	
	//	Запрос.УстановитьПараметр("Товары",Товары);
	//	КП_Рефрижератор = НЕ Запрос.Выполнить().Пустой();	
	//
	//КонецЕсли; 
	//08.04.2015 Островерхий} 
	//конец изменений 
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
	   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Услуги.Очистить();

	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	//m.ionov@a-prof.ru 15.10.2014
	//ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	//----m.ionov@a-prof.ru---
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуСНДС();
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары", "ПараметрыВыпускаПродукции");
		
	//>>220916 Степанов мУдалятьДвижения = НЕ ЭтоНовый();
	
	//m.ionov@a-prof.ru 15.10.2014
	Если Не ЭтоНовый() Тогда
		РазрешитьЗапись = Ложь;
		Если ДополнительныеСвойства.Свойство("РазрешитьЗапись", РазрешитьЗапись) = Ложь Тогда
			РазрешитьЗапись = Ложь;
		КонецЕсли;
		
		Если Не РазрешитьЗапись Тогда
			Отказ = Не АП_ОбщегоНазначенияСервер.МожноМенятьЗаказ(Ссылка);
			
			Если Отказ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Заказ " + СокрЛП(Ссылка) + " запрещено менять, так как есть введенные документы на основании", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		МенятьСтатус = Истина;
		Если ДополнительныеСвойства.Свойство("МенятьСтатус", МенятьСтатус) = Ложь Тогда
			МенятьСтатус = Истина;
		КонецЕсли;
		Если МенятьСтатус Тогда
        	АП_СтатусЗаказа = АП_ОбщегоНазначенияСервер.ВернутьСтатусЗаказа(Ссылка, ПометкаУдаления);				
		КонецЕсли;
	Иначе	
		
		//{27.08.2015 Островерхий заявка №43386 
		УстановитьГалкуРегион(); 
		//27.08.2015 Островерхий} 
	
	КонецЕсли;
	
	Если Не Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОбновитьСтатусКК = Истина;
		Если ДополнительныеСвойства.Свойство("ОбновитьСтатусКК", ОбновитьСтатусКК) = Ложь Тогда
			ОбновитьСтатусКК = Истина;
		КонецЕсли;
		Если ОбновитьСтатусКК Тогда
        	УстановитьСтатусСогласованияОКК(Отказ);				
		КонецЕсли;
		
		//{18.06.2015 Островерхий заявка №40747 
		Если мТабличнаяЧастьТоварыМодифицирована
			И КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.Согласовано Тогда
		
			КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании;	
		
		КонецЕсли;  
		//18.06.2015 Островерхий} 
		
	КонецЕсли;	
	
	//{19.10.2015 Островерхий заявка №б/н 
	ДополнительныеСвойства.Вставить("ОбновитьСтатусКК", Истина); 
	//19.10.2015 Островерхий} 
	
	//----m.ionov@a-prof.ru---
	
	//++ Spl_Апроф 23.10.2014 (k.russkih@a-prof.ru)
	Если НЕ Отказ И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КП_ИмпортированныйЗаказ") И ЗначениеЗаполнено(ДокументОснование) И ЭтоНовый() Тогда
	
		мТекДокумент = ДокументОснование.ПолучитьОбъект();
		мТекДокумент.СтатусЗаказа = Перечисления.КП_СтатусыИмпортированногоЗаказа.Импортирован;
		
		Попытка		
			мТекДокумент.Записать(РежимЗаписиДокумента.Запись);		
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);		
		КонецПопытки;
		
	КонецЕсли; 
	//-- Spl_Апроф
	
	//{22.04.2015 Островерхий заявка №б/н, задача по SL 
	//Если Не Отказ Тогда
	//	Если РежимЗаписи = РежимЗаписиДокумента.Проведение и Не Проведен Тогда
	//		КП_ИсходныйЗаказ.Загрузить(Товары.Выгрузить());
	//	КонецЕсли;
	//КонецЕсли; 
	//22.04.2015 Островерхий} 
	
	//начало изменений
	ОтражатьВБухгалтерскомУчете = Ложь;
	ОтражатьВНалоговомУчете = Ложь;
	//конец изменений
	
	ПроводитсяИнтерактивно = Ложь;
	Если ДополнительныеСвойства.Свойство("ПроводитсяИнтерактивно", ПроводитсяИнтерактивно) = Ложь Тогда
		ПроводитсяИнтерактивно = Ложь;
	КонецЕсли;

	Если Не Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ПроводитсяИнтерактивно И НачалоДня(ДатаОтгрузки) < НачалоДня(Дата) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Дата отгрузки меньше даты заказа!", Отказ);
		ИначеЕсли ПроводитсяИнтерактивно И НачалоДня(ДатаОтгрузки) > НачалоДня(КП_ДатаДоставки) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Дата доставки меньше даты отгрузки!", Отказ);
		ИначеЕсли ПроводитсяИнтерактивно И НачалоДня(КП_ДатаДоставки) < НачалоДня(КП_ДатаДоставкиТЭК) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Дата доставки покупателю меньше даты доставки до ТЭК!", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
	//ниже определим вес
	//m.ionov@a-prof.ru 31.01.2015
	//Если ПроводитсяИнтерактивно Тогда
	//	ТабВеса = Товары.Выгрузить(,"Номенклатура,Количество,КоличествоМест,ЕдиницаИзмерения,ЕдиницаИзмеренияМест");
	//
	//	СтуктураВесов = АП_ОбщегоНазначенияКлиент.ПолучитьИтоговыйВес(ТабВеса);
	//	
	//	КП_ИтогоВес = СтуктураВесов.ВесБрутто;
	//КонецЕсли;
	//----m.ionov@a-prof.ru---
	//конец изменений 
	
	//Заключительные проверки
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
	ТаблТоваров =  ПРГПолучитьТаблицуТоваровДляПроверки();
	Если ПроводитсяИнтерактивно Тогда
			КП_ИтогоВес = Окр(ТаблТоваров.Итог("ВесБрутто")/1000,3);
	КонецЕсли;
	//конец изменений 
	
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
		ПроверитьТаблицуТовары(ТаблТоваров,Отказ);
		//конец изменений 
		
		//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
		//мТаблицаПроверки = Товары.Выгрузить(, "Номенклатура, ХарактеристикаНоменклатуры, НомерСтроки");
		мТаблицаПроверки = Товары.ВыгрузитьКолонки("Номенклатура, ХарактеристикаНоменклатуры, НомерСтроки");
		//мТаблицаПроверки.Очистить();
		//конец изменений 
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//++ Spl_Апроф 06.03.2015 (k.russkih@a-prof.ru)
	АП_НастройкиПодсистемы = РегистрыСведений.АП_НастройкаПодсистемыПродаж.Выбрать();
	
	мСтатусГПЗакрыт = Справочники.ПРГ_СтатусыНоменклатуры.ПустаяСсылка();
	Если АП_НастройкиПодсистемы.Следующий() Тогда	
		мСтатусГПЗакрыт = АП_НастройкиПодсистемы.СтатусГПЗакрыт;	
	КонецЕсли;
	
	прг_ПР_ВидыПричинПретензии =  Справочники.ПР_ВидыПричинПретензии.ПустаяСсылка();
	прг_ПР_ПричинаПретензии	   = Справочники.ПР_ПричинаПретензии.ПустаяСсылка();
	
	//очистка серий там где их не должно быть
	РезервированиеПоСериям = ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей И мРезервироватьПоСериям;
	//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
	
	//Для каждого Строка из Товары цикл
	Для каждого ПргСтрока из ТаблТоваров цикл
		Строка = Товары[ПргСтрока.НомерСтроки-1];
		//начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок 
		Строка.Размещение = Неопределено;
		//конец изменений 
		Если НЕ КП_Рефрижератор Тогда
			  КП_Рефрижератор = ПргСтрока.ПРГТребуетсяРефрижератор;
		КонецЕсли;	
	    //конец изменений 	
		
		Если НЕ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР Тогда
			Строка.АП_ВидыПричинПретензии = прг_ПР_ВидыПричинПретензии;
			Строка.АП_ПричинаПретензии 	 = прг_ПР_ПричинаПретензии;
		КонецЕсли;		
		
		//начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок 
		Если ЗначениеЗаполнено(мСтатусГПЗакрыт) Тогда
			Если ПргСтрока.СтатусСКЮ = мСтатусГПЗакрыт Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Строка №" + СокрЛП(Строка.НомерСтроки) + ", номенклатура " + СокрЛП(ПргСтрока.Номенклатура) + " (Код: " + СокрЛП(ПргСтрока.НоменклатураКод) + ") нельзя отгружать, т.к. она в статусе: " + СокрЛП(мСтатусГПЗакрыт));
			    Отказ = Истина;
			КонецЕсли; 
		КонецЕсли; 		
		//конец изменений 
		
		Если ЗначениеЗаполнено(Строка.СерияНоменклатуры) И (не РезервированиеПоСериям ИЛИ НЕ ЗначениеЗаполнено(Строка.Размещение) ИЛИ ТипЗНч(Строка.Размещение)<>Тип("СправочникСсылка.Склады")) Тогда
			Строка.СерияНоменклатуры = "";
		КонецЕсли;
		
		//{31.03.2015 Островерхий заявка №б/н 
		Если Строка.КлючСтроки = 0 Тогда
			 Строка.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);	
		КонецЕсли;
		//31.03.2015 Островерхий} 
		//начало изменений Ожиганов 05.06.2015 немножко оптимизируем 
		//поскольку резервирование осуществляется из обработки
		//не даем резервировать  в самом заказе
		Строка.Размещение = Неопределено;
		//конец изменений 
		
		//m.ionov@a-prof.ru 01.12.2014
		//Проверим строку
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
			//ПроверитьСтроку(Строка,Отказ);
			Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР Тогда
				Если Не ПргСтрока.НСИ_СобственноеПроизводства Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В заказе с видом дегустация ПР " + СокрЛП(Ссылка) + " можно использовать только продукциию собственного производства."+Символы.ПС+"Ошибочно указана " + СокрЛП(ПргСтрока.Номенклатура) + " (Код: " + СокрЛП(ПргСтрока.НоменклатураКод) + ")",Отказ);
				КонецЕсли;
			КонецЕсли;
			//конец изменений 
						
			//m.ionov@a-prof.ru 20.02.2015
			//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
			//АП_ОбщегоНазначенияКлиент.ПроверитьНаКратностьВВода(Строка, Ложь, Истина);		
			АП_ОбщегоНазначенияКлиент.ПроверитьНаКратностьВВода(Строка, Ложь, Истина,Истина,ПргСтрока.ЕдиницаИзмеренияМестКоэффициент);		
			//конец изменений 
			//----m.ionov@a-prof.ru---
			
			НайтиСтроки = мТаблицаПроверки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры));
			
			Если НайтиСтроки.Количество() = 0 Тогда
				
				НоваяСтрока = мТаблицаПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);				
			Иначе
				
				ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Товары"" имеются дубликаты строк: ");
				ОбщегоНазначения.СообщитьОбОшибке("Строка: " 
				+ СокрЛП(Строка.НомерСтроки) + Символы.ПС + Символы.Таб
				+ "Номенклатура: """ + СокрЛП(Строка.Номенклатура) + """" 
				+ ", Характеристика номенклатуры: """ + СокрЛП(Строка.ХарактеристикаНоменклатуры) + """");
				
				/// Кунов О.В., 08.04.2015 - 38301
				Отказ = Истина;
				///
								
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//начало изменений Ожиганов 05.06.2015 немножко оптимизируем 
	Для Каждого Текстрока Из ВозвратнаяТара Цикл
		Текстрока.Размещение = Неопределено;
	КонецЦикла;	
	//конец изменений 
	
	//m.ionov@a-prof.ru 24.02.2015
	Если Не Отказ И ПометкаУдаления Тогда
		КП_ДатаРезерва = Дата(1,1,1);	
		КП_СрокРезерва = Дата(1,1,1);	
		
		УстановитьСтатусБухгалтерии();
		
		ПКК_АвтоматическийСтатусСогласованияОКК = Ложь;
		ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НеТребуется;
		ПКК_КомментарийСогласованияОКК = "Выполнена установка пометки на удаление заказа";
	КонецЕсли;
	                                                    
	////++ Spl_Апроф 25.12.2014 (k.russkih@a-prof.ru)
	////m.ionov@a-prof.ru 16.02.2015
	////Делаем проверку только при проведении
	////Если Товары.Количество() > 1 И НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
	//Если Не Отказ И Товары.Количество() > 1 И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	//	
	//	мТаблицаПроверки = Товары.Выгрузить(, "Номенклатура, ХарактеристикаНоменклатуры, НомерСтроки");
	//	мТаблицаПроверки.Очистить();
	//	мОтказ = Ложь;
	//	Для каждого мСтрока Из Товары Цикл
	//		
	//		//++ Spl_Апроф 05.02.2015 (k.russkih@a-prof.ru)
	//		АП_ОбщегоНазначенияКлиент.ПроверитьНаКратностьВВода(мСтрока, Ложь, Истина);		

	//		НайтиСтроки = мТаблицаПроверки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", мСтрока.Номенклатура, мСтрока.ХарактеристикаНоменклатуры));
	//		
	//		Если НайтиСтроки.Количество() = 0 Тогда
	//			
	//			НоваяСтрока = мТаблицаПроверки.Добавить();
	//			ЗаполнитьЗначенияСвойств(НоваяСтрока, мСтрока);				
	//		Иначе
	//			
	//			ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Товары"" имеются дубликаты строк: ");
	//			ОбщегоНазначения.СообщитьОбОшибке("Строка: " 
	//			+ СокрЛП(мСтрока.НомерСтроки) + Символы.ПС + Символы.Таб
	//			+ "Номенклатура: """ + СокрЛП(мСтрока.Номенклатура) + """" 
	//			+ ", Характеристика номенклатуры: """ + СокрЛП(мСтрока.ХарактеристикаНоменклатуры) + """");
	//			
	//			мОтказ = Истина;
	//			
	//		КонецЕсли; 
	//	
	//	КонецЦикла; 
	//	
	//	Отказ = мОтказ;
	//КонецЕсли;
	////-- Spl_Апроф
	
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"	 , "ВедениеВзаиморасчетов"             , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"              , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"      , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	Если ЗначениеЗаполнено(СкладГруппа) 
		И ТипЗнч(СкладГруппа) = Тип("СправочникСсылка.Склады") Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладГруппа", "ВидСклада", "ВидСклада");
		//начало изменений Ожиганов 21.04.2015 37907 
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладГруппа", "НСИ_Отделение", "ОтделениеСклада");
		//конец изменений 
		//начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок 
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладГруппа", "НСИ_ПодключенКSolvo", "НСИ_ПодключенКSolvo");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладГруппа", "НСИ_ДоступенДляРезервирования", "НСИ_ДоступенДляРезервирования");
		//конец изменений 
	Иначе
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "NULL", "NULL", "ВидСклада");
		//начало изменений Ожиганов 21.04.2015 37907 
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Null", "Null", "ОтделениеСклада");
		//конец изменений 
		//начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок 
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладГруппа", "Ложь", "НСИ_ПодключенКSolvo");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СкладГруппа", "Ложь", "НСИ_ДоступенДляРезервирования");
		//конец изменений 
	КонецЕсли;

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                      , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                       , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                    , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                  , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"            , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"        , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок" , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки" , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("Сумма"                       , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                   , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                         , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"  , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("Размещение"                  , "Размещение");
	СтруктураПолей.Вставить("РазмещениеВидСклада"         , "Размещение.ВидСклада");
	СтруктураПолей.Вставить("СерияНоменклатуры"           , "СерияНоменклатуры");
	СтруктураПолей.Вставить("КлючСтроки"                  , "КлючСтроки");
	СтруктураПолей.Вставить("ТипНоменклатуры", "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	
	//m.ionov@a-prof.ru 25.12.2014
	СтруктураСложныхПолей = Новый Структура();
	СтруктураСложныхПолей.Вставить("УстановкаСкидокНоменклатуры"                  , "ВЫБОР КОГДА ЗначениеУсловияАвтоматическойСкидки ССылка Документ.УстановкаСкидокНоменклатуры ТОГДА ЗначениеУсловияАвтоматическойСкидки ИНАЧЕ Значение(Документ.УстановкаСкидокНоменклатуры.ПустаяСсылка) Конец");
	//начало изменений Ожиганов 28.04.2015 немного оптимизируем проведение 
	СтруктураСложныхПолей.Вставить("ВалютаУстановкаСкидок"                  , "ВЫБОР КОГДА ЗначениеУсловияАвтоматическойСкидки ССылка Документ.УстановкаСкидокНоменклатуры ТОГДА ЗначениеУсловияАвтоматическойСкидки.Валюта ИНАЧЕ Значение(Справочник.Валюты.ПустаяСсылка) Конец");
	//начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок 
	СтруктураСложныхПолей.Вставить("ПЦ_ОграниченияСкидки"                  , "ВЫБОР КОГДА ЗначениеУсловияАвтоматическойСкидки ССылка Документ.УстановкаСкидокНоменклатуры ТОГДА ЗначениеУсловияАвтоматическойСкидки.ПЦ_ОграниченияСкидки ИНАЧЕ Значение(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.ПустаяСсылка)  Конец");
	//УстановкаСкидокНоменклатуры.ПЦ_ОграниченияСкидки 
	//конец изменений 
	//конец изменений 
	
	СтруктураПолей.Вставить("ПЦ_ТипЦен"                  , "ПЦ_ТипЦен");
	СтруктураПолей.Вставить("Брендообъем"                , "Номенклатура.НСИ_Брендообъем");
	СтруктураПолей.Вставить("ТоварнаяКатегория"          , "Номенклатура.НСИ_ТоварнаяКатегория");
	//----m.ionov@a-prof.ru---
    //>>170816 Степанов 54372
	СтруктураПолей.Вставить("НомерСтрокиПолучателя"      , "НомерСтрокиПолучателя");
	СтруктураПолей.Вставить("НомерСтрокиТовара"          , "НомерСтрокиТовара");
	СтруктураПолей.Вставить("СуммаСкидкиСНДС"            , "СуммаСкидкиСНДС");
	//<<
	//{28.11.2016 Островерхий заявка №57373 
	СтруктураПолей.Вставить("ПроцентДопИзмененияЦены"                  , "ПЦ_ПроцентДопИзмененияЦены"); 
	//28.11.2016 Островерхий} 
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	/// Кунов О.В., 20.03.2017 - 63050
	Если Не РольДоступна("ПолныеПрава") И Не ПараметрыСеанса.ПроведениеДокументов Тогда
		ПРГ_ДопФункцииКлиентСервер.ПроверитьЗаказНаБлокировкиПродукции(Ссылка, ТаблицаПоТоварам, Отказ);
	КонецЕсли;
	///
	
	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"                , "Содержание");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"      , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок" , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки" , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");

	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Цена"                      , "Цена");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("РазмещениеВидСклада"       , "Размещение.ВидСклада");

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей);

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("ВозвратнаяТара", 	ТаблицаПоТаре, 		СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Состав набора"
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура");
	СтруктураПолей.Вставить("Цена");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставНабора", СтруктураПолей, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		ТаблицаМатериалов = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура("Номенклатура, Услуга, Набор, Комплект", "Номенклатура", "Номенклатура.Услуга", "Номенклатура.Набор", "Номенклатура.Комплект")).Выгрузить();
		ПроверитьЗаполнениеТабличнойЧастиМатериалы(ТаблицаМатериалов, Отказ, Заголовок);
	КонецЕсли;
		
	// Движения по документу
	Если Не Отказ Тогда
		Если ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			
			СтруктураПолей = Новый Структура;
			СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
			СтруктураПолей.Вставить("Количество",   "Количество");
			СтруктураПолей.Вставить("Сумма",        "Сумма");
			СтруктураПолей.Вставить("Цена",         "Цена");
			СтруктураПолей.Вставить("СтавкаНДС",    "СтавкаНДС");
			СтруктураПолей.Вставить("СуммаНДС",     "СуммаНДС");
			
			ТаблицаПоУслугам    = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги",    СтруктураПолей).Выгрузить();
			ДобавитьСуммы(СтруктураШапкиДокумента, ТаблицаПоУслугам);
			
			СтруктураПолей.Очистить();
			СтруктураПолей.Вставить("Номенклатура", "Номенклатура");
			СтруктураПолей.Вставить("Количество",   "Количество");
			СтруктураПолей.Вставить("Сумма",        "Сумма");
			СтруктураПолей.Вставить("Цена",         "Цена");
			СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
			СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
			СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
			
			ТаблицаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей).Выгрузить();
			ДобавитьСуммы(СтруктураШапкиДокумента, ТаблицаПоМатериалам);
			
			ДвиженияПоРегистрамПереработкаУпр(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоМатериалам, ТаблицаПоУслугам);
			
		Иначе
			ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, 
			                    ТаблицаПоТаре, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	//{03.04.2015 Островерхий заявка №36501 
	Если НЕ Отказ 
		И СтруктураШапкиДокумента.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСимов Тогда
	
		ОтправитьУведомленияОтвественнымМенеджерам();	
	
	КонецЕсли;  
	//03.04.2015 Островерхий} 
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	ПРГПростоЗаписать = Ложь;
	Если ДополнительныеСвойства.Свойство("ПРГПростоЗаписать",ПРГПростоЗаписать) Тогда
		Если ПРГПростоЗаписать Тогда
			возврат;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 
	
	//m.ionov@a-prof.ru 23.09.2014
	Если Не Отказ Тогда
		МенятьСтатус = Истина; //По умолчанию записываем изменение
		Если ДополнительныеСвойства.Свойство("МенятьСтатус", МенятьСтатус) = Ложь Тогда
			МенятьСтатус = Истина;
		КонецЕсли;
		Если МенятьСтатус Тогда
        	//Запишем изменение статуса
			ЗаписатьИзменениеСтатусов(Отказ);
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерПоДаннымПокупателя = "";
	ДатаПоДаннымПокупателя	= Дата("00010101");
	
	//m.ionov@a-prof.ru 15.10.2014
	КП_ДатаРезерва = Дата("00010101");
	КП_СрокРезерва = Дата("00010101");
	АП_СтатусЗаказа = Перечисления.АП_СтатусыЗаказов.Сформирован;
	АП_СтатусЗаданияНаПодбор = Перечисления.СП_СтатусыЗаданияНаПодбор.ПустаяСсылка();
	АП_СтатусЗаданияНаПеревозку = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ПустаяСсылка();
	КП_IDE = Ложь;
	//----m.ionov@a-prof.ru---
	
	//{22.04.2015 Островерхий заявка №39185 
	КП_Сотрудник = Неопределено; 
	//22.04.2015 Островерхий} 
	
	//{23.06.2015 Островерхий заявка №б/н, дополнительно на случай програмного копирования.
	//до этого очистка заказа была в форме
	КП_ИсходныйЗаказ.Очистить(); 
	//23.06.2015 Островерхий} 
	
КонецПроцедуры

//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
Процедура ЗаписатьИзменениеСтатуаЗаказа(Отказ)  Экспорт 
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструСтатусыЗаказа(Отказ);
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = АП_СтатусЗаказа Тогда
		СформируемЗаписьПоРегиструСтатусыЗаказа(Отказ);
	КонецЕсли;
КонецПроцедуры	

//m.ionov@a-prof.ru 23.09.2014
Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	//начало изменений Ожиганов 29.05.2015 немножко оптимизируем 
	ЗаписатьИзменениеСтатуаЗаказа(Отказ);
	//Движения по регистру накопления "АП_СтатусыДокументов"
	//ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	//
	//Если ДанныеПоСтатусу.Количество() = 0 Тогда
	//	СформируемЗаписьПоРегиструСтатусыЗаказа(Отказ);
	//ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = АП_СтатусЗаказа Тогда
	//	СформируемЗаписьПоРегиструСтатусыЗаказа(Отказ);
	//КонецЕсли;
	//конец изменений 
	
	//{30.07.2015 Островерхий заявка №б/н
	//Не читаем данные из БД если уже был откат транзакции в процедуре ЗаписатьИзменениеСтатуаЗаказа(Отказ)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;  
	//30.07.2015 Островерхий} 
	
	//ОКК
	ДанныеПоСтатусу = РегистрыСведений.КП_СтатусыСогласованияЗаказа.СрезПоследних(ТекущаяДата(), Новый Структура("Документ, Статус", Ссылка, 1));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструСтатусы(Отказ, 1);
	ИначеЕсли НЕ ДанныеПоСтатусу[0].СогласованиеКредитнымКонтролем = ПКК_СогласованиеКредитнымКонтролем
		ИЛИ НЕ СокрЛП(ДанныеПоСтатусу[0].Комментарий) = СокрЛП(ПКК_КомментарийСогласованияОКК)
		ИЛИ НЕ ДанныеПоСтатусу[0].Автоматически = ПКК_АвтоматическийСтатусСогласованияОКК
		ИЛИ НЕ ДанныеПоСтатусу[0].ПричинаБлокировки = ПКК_ПричинаБлокировкиЗаказаОКК Тогда
	    СформируемЗаписьПоРегиструСтатусы(Отказ, 1);
	КонецЕсли; 
	
	//Бухгалтерия
	ДанныеПоСтатусу = РегистрыСведений.КП_СтатусыСогласованияЗаказа.СрезПоследних(ТекущаяДата(), Новый Структура("Документ, Статус", Ссылка, 2));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструСтатусы(Отказ, 2);
	ИначеЕсли НЕ ДанныеПоСтатусу[0].СогласованиеБухгалтерией = КП_СогласованиеБухгалтерией
		ИЛИ НЕ СокрЛП(ДанныеПоСтатусу[0].Комментарий) = СокрЛП(КП_КомментарийСогласованияБухгалтерией)
		ИЛИ НЕ ДанныеПоСтатусу[0].Автоматически = КП_АвтоматическийСтатусСогласованияБухгалтерией
		ИЛИ НЕ ДанныеПоСтатусу[0].ПричинаБлокировки = КП_ПричинаБлокировкиЗаказаБухгалтерией Тогда
	    СформируемЗаписьПоРегиструСтатусы(Отказ, 2);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусыЗаказа(Отказ)
	
	мДатаЗаписи = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	//{12.10.2015 Островерхий заявка №б/н 
	Пока НаборЗаписей.Количество() > 0 Цикл
		
		мДатаЗаписи  = мДатаЗаписи + 1;
		НаборЗаписей.Очистить();
		
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
		НаборЗаписей.Прочитать();
		
	КонецЦикла; 
	//12.10.2015 Островерхий} 
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = АП_СтатусЗаказа;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусы(Отказ, Статус) Экспорт

	мДатаЗаписи = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.КП_СтатусыСогласованияЗаказа.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Статус.Установить(Статус);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = Статус;
	
	Если Статус = 1 Тогда
		НоваяСтрока.СогласованиеКредитнымКонтролем = ПКК_СогласованиеКредитнымКонтролем;
		НоваяСтрока.Комментарий = ПКК_КомментарийСогласованияОКК;
		НоваяСтрока.Автоматически = ПКК_АвтоматическийСтатусСогласованияОКК;
		НоваяСтрока.ПричинаБлокировки = ПКК_ПричинаБлокировкиЗаказаОКК;
	Иначе
		НоваяСтрока.СогласованиеБухгалтерией = КП_СогласованиеБухгалтерией;
		НоваяСтрока.Комментарий = КП_КомментарийСогласованияБухгалтерией;
		НоваяСтрока.Автоматически = КП_АвтоматическийСтатусСогласованияБухгалтерией;
		НоваяСтрока.ПричинаБлокировки = КП_ПричинаБлокировкиЗаказаБухгалтерией;
	КонецЕсли; 
	
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры

Процедура ВвестиЗаданиеНаПодбор(ФормаЗаказа) Экспорт
	
	Если Не АП_ОбщегоНазначенияКлиент.ТребуетсяЗаданиеНаПодбор(ЭтотОбъект) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По виду заказа покупателя " + СокрЛП(КП_ВидЗаказаПокупателя) + " не вводится задание на подбор!");
		
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Или Не Проведен Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Ввести задание на подбор можно только после проведения документа!");
		
		Возврат;
	КонецЕсли;
	
	ЗаданиеНаПодбор = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(Ссылка,,,Истина);
	Если Не ЗначениеЗаполнено(ЗаданиеНаПодбор) Тогда

		#Если Клиент Тогда
		Если Не ФормаЗаказа = Неопределено И ФормаЗаказа.Модифицированность() Тогда
			Предупреждение("Необходимо записать заказ, перед вводом задания",60);
			Возврат;
		КонецЕсли;
		#КонецЕсли
	
		ЗаданиеНаПодбор = Документы.СП_ЗаданиеНаПодбор.СоздатьДокумент();
		ЗаданиеНаПодбор.Заполнить(Ссылка);
	КонецЕсли;
	
	ЗаданиеНаПодбор.ПолучитьФорму(,ФормаЗаказа).Открыть();	
	
КонецПроцедуры

Процедура ВвестиЗаданиеНаПеревозку(ФормаЗаказа) Экспорт
	
	Если Не АП_ОбщегоНазначенияКлиент.ТребуетсяЗаданиеНаПеревозку(ЭтотОбъект) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По виду заказа покупателя " + СокрЛП(КП_ВидЗаказаПокупателя) + " не вводится задание на перевозку!");
		
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Или Не Проведен Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Ввести задание на перевозку можно только после проведения документа!");
		
		Возврат;
	КонецЕсли;
	
	ЗаданиеНаПеревозку = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПеревозкуПоЗаказу(Ссылка);
	Если Не ЗначениеЗаполнено(ЗаданиеНаПеревозку) Тогда

		#Если Клиент Тогда
		Если Не ФормаЗаказа = Неопределено И ФормаЗаказа.Модифицированность() Тогда
			Предупреждение("Необходимо записать заказ, перед вводом задания",60);
			Возврат;
		КонецЕсли;
		#КонецЕсли
	
		ЗаданиеНаПеревозку = Документы.ПТЛ_ЗаданиеНаПеревозку.СоздатьДокумент();
		ЗаданиеНаПеревозку.Заполнить(Ссылка);
	КонецЕсли;
	
	ЗаданиеНаПеревозку.ПолучитьФорму(,ФормаЗаказа).Открыть();	
	
КонецПроцедуры

Процедура ПересчитатьЦеныПоСтроке(СтрокаТабличнойЧасти, МожноИзменитьКоличество = Ложь, БезРасчетаСкидок = Ложь) Экспорт
	
	Если Не ОбязательноДолжнаБытьЦена() Тогда
		
		СтрокаТабличнойЧасти.Цена = 0;
		СтрокаТабличнойЧасти.ПЦ_ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		
		СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		
		//++ Spl_Апроф 08.01.2015 (k.russkih@a-prof.ru)
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		//-- Spl_Апроф
		
	Иначе
		
		АПДляПолученияДанных = Грузополучатель;
		Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСотруднику
			И Не ЗначениеЗаполнено(АПДляПолученияДанных) И ТипЗнч(СкладГруппа) = Тип("СправочникСсылка.Склады") Тогда
			АПДляПолученияДанных = СкладГруппа.НСИ_АП;
		КонецЕсли;
		
		//++ Spl_Апроф 15.04.2015 (k.russkih@a-prof.ru)
		//{14.10.2015 Островерхий заявка №44781 
		Если ПЦ_ПересчитыватьЦеныПриОтгрузке Или ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда /// Кунов О.В., 28.06.2017 - 63651
			тДатаСкидок =КонецДня(ДатаОтгрузки);
		ИначеЕсли ПЦ_ПересчитыватьЦеныНаДатуДоставки Или ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда /// Кунов О.В., 28.06.2017 - 66859
			тДатаСкидок =КонецДня(КП_ДатаДоставки);	
		Иначе
			тДатаСкидок =КонецДня(Дата);	
		КонецЕсли;  
		//мДатаЦены = ?(СтрокаТабличнойЧасти.ПЦ_ДатаЦены = Дата(1,1,1), ?(ПЦ_ПересчитыватьЦеныПриОтгрузке,КонецДня(ДатаОтгрузки),КонецДня(Дата)), СтрокаТабличнойЧасти.ПЦ_ДатаЦены);
		мДатаЦены = ?(СтрокаТабличнойЧасти.ПЦ_ДатаЦены = Дата(1,1,1), тДатаСкидок, СтрокаТабличнойЧасти.ПЦ_ДатаЦены);
		//14.10.2015 Островерхий}
		//-- Spl_Апроф
		
		СпТипЦен = ПЦ_Ценообразование.ПолучитьТипЦенПродажи(мДатаЦены, 
														?(ЗначениеЗаполнено(АПДляПолученияДанных) и ТипЗнч(АПДляПолученияДанных) = Тип("СправочникСсылка.АдресаПоставки"), АПДляПолученияДанных.НСИ_Регион, Контрагент.НСИ_Регион),
														СтрокаТабличнойЧасти.Номенклатура.Проект,
														Контрагент.НСИ_КаналПродаж,
														//?(ЗначениеЗаполнено(АПДляПолученияДанных) и ТипЗнч(АПДляПолученияДанных) = Тип("СправочникСсылка.АдресаПоставки"), АПДляПолученияДанных.НСИ_КаналПродаж, Контрагент.НСИ_КаналПродаж),
														КП_УсловиеПоставки,//?(ЗначениеЗаполнено(АПДляПолученияДанных) и ТипЗнч(АПДляПолученияДанных) = Тип("СправочникСсылка.АдресаПоставки"), АПДляПолученияДанных.НСИ_УсловияПоставки, Контрагент.НСИ_УсловияПоставки),
														Контрагент,
														ДоговорКонтрагента,
														АПДляПолученияДанных,
														СтрокаТабличнойЧасти.Номенклатура.НСИ_ТоварнаяКатегория,
														СтрокаТабличнойЧасти.Номенклатура.НСИ_Брендообъем,
														СтрокаТабличнойЧасти.Номенклатура,
														СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	
		Если СпТипЦен.Количество() = 1 Тогда
			СтрокаТабличнойЧасти.ПЦ_ТипЦен = СпТипЦен[0].Значение;
		ИначеЕсли СпТипЦен.Количество() = 0 Тогда
			СтрокаТабличнойЧасти.ПЦ_ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		Иначе
			ОбщегоНазначения.Сообщение("По номенклатуре " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " (код: " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура.Код) + ") найдено несколько типов цен!", СтатусСообщения.Важное);
			СтрокаТабличнойЧасти.ПЦ_ТипЦен = СпТипЦен[0].Значение;
		КонецЕсли;
	
		СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	
		Если МожноИзменитьКоличество Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		Иначе
			ПЦ_Ценообразование.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		КонецЕсли;
	КонецЕсли;
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() И Не БезРасчетаСкидок Тогда
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;

		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
		
		//m.ionov@a-prof.ru 02.03.2015
		Если ПЦ_ПересчитыватьЦеныПриОтгрузке Или ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда /// Кунов О.В., 28.06.2017 - 63651
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(ДатаОтгрузки));
		//{14.10.2015 Островерхий заявка №44781 
		ИначеЕсли ПЦ_ПересчитыватьЦеныНаДатуДоставки Или ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда /// Кунов О.В., 28.06.2017 - 66859
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(КП_ДатаДоставки));
		//14.10.2015 Островерхий}	
		Иначе
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(Дата));
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
	Иначе // Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

/// Кунов О.В., 28.07.2015 - 42169
Процедура ПроверитьОтсрочкуПовышенияЦены() Экспорт
	
	Если ЗначениеЗаполнено(Грузополучатель) Тогда
		//{14.10.2015 Островерхий заявка №44781 
		Если ПЦ_ПересчитыватьЦеныПриОтгрузке Или ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда /// Кунов О.В., 28.06.2017 - 63651
			тДатаСкидок =ДатаОтгрузки;
		ИначеЕсли ПЦ_ПересчитыватьЦеныНаДатуДоставки Или ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда /// Кунов О.В., 28.06.2017 - 66859
			тДатаСкидок =КП_ДатаДоставки;	
		Иначе
			тДатаСкидок =Дата;	
		КонецЕсли;  
		//Результат = ПЦ_Ценообразование.ПроверимНаличиеДокументовПоОтсрочкеПовышенияЦены(?(ПЦ_ПересчитыватьЦеныПриОтгрузке, ДатаОтгрузки, Дата), 
		Результат = ПЦ_Ценообразование.ПроверимНаличиеДокументовПоОтсрочкеПовышенияЦены(тДатаСкидок, 
		//14.10.2015 Островерхий}
		//{23.03.2016 Островерхий заявка №50566 
		//Грузополучатель.Дивизион, Грузополучатель.НСИ_КаналПродаж, Контрагент, Грузополучатель.НСИ_Регион, Контрагент.НСИ_Вывеска,Грузополучатель);
		Контрагент.Дивизион, Контрагент.НСИ_КаналПродаж, Контрагент, Грузополучатель.НСИ_Регион, Контрагент.НСИ_Вывеска,Грузополучатель);
		//23.03.2016 Островерхий} 
			Иначе
		Результат = Ложь;
	КонецЕсли;
	
	мЕстьОтсрочкаПовышенияЦены = Результат;
	
КонецПроцедуры
///

Процедура ПересчитатьЦены(ПересчитатьОСГ = ЛОжь) Экспорт
	
	ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДатаДокумента",ДоговорКонтрагента);
	
	//m.ionov@a-prof.ru 18.02.2015
	ПроцентСкидкиПоПредоплате = 0;
	Если 
		//{22.04.2015 Островерхий заявка №б/н 
		//КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаПокупателю
		(КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаПокупателю ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.СменаПокупателя)
		//22.04.2015 Островерхий} 
		И ДоговорКонтрагента.ПроцентПредоплаты > 0 И ДоговорКонтрагента.ПЦ_ПредоставлятьСкидкиПоПредоплате Тогда
		ДанныеНастройки = РегистрыСведений.АП_НастройкаПодсистемыПродаж.Получить();
		Если ДанныеНастройки.Количество() > 0 Тогда
        	ПроцентСкидкиПоПредоплате = ДанныеНастройки.ПроцентСкидкиПоПредоплате;
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//++ Spl_Апроф 15.04.2015 (k.russkih@a-prof.ru)
	//{14.05.2015 Островерхий заявка №39626 
	
	/// Кунов О.В., 28.07.2015 - 42169
	ПроверитьОтсрочкуПовышенияЦены();
	///
	
	//Если ЗначениеЗаполнено(Грузополучатель) Тогда
	//	мЕстьОтсрочкаПовышенияЦены = ПЦ_Ценообразование.ПроверимНаличиеДокументовПоОтсрочкеПовышенияЦены(?(ПЦ_ПересчитыватьЦеныПриОтгрузке, ДатаОтгрузки, Дата), 		
	//																				Грузополучатель.Дивизион, Грузополучатель.НСИ_КаналПродаж, Контрагент, Грузополучатель.НСИ_Регион, Контрагент.НСИ_Вывеска);
	//Иначе
	//	мЕстьОтсрочкаПовышенияЦены = Ложь;
	//КонецЕсли;  
	//14.05.2015 Островерхий} 	
	//-- Spl_Апроф
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		//{26.12.2016 Островерхий заявка №60688 
		//{11.01.2017 Островерхий заявка №б/н, для учета реализаций на экспорт 
		//СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС; 
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
		//11.01.2017 Островерхий} 
		 
		//26.12.2016 Островерхий} 
		
		//m.ionov@a-prof.ru 18.02.2015
		Если ДоговорКонтрагента.ПроцентПредоплаты > 0 Тогда
			//>>150915 Степанов №43955; Если ДоговорКонтрагента.ПЦ_ПредоставлятьСкидкиПоПредоплате И СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0 Тогда
			Если ДоговорКонтрагента.ПЦ_ПредоставлятьСкидкиПоПредоплате Тогда
			//<<
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ПроцентСкидкиПоПредоплате;
			Иначе
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0;
				//Дополнительная скидка может быть только по предоплате
			КонецЕсли;
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		//++ Spl_Апроф 15.04.2015 (k.russkih@a-prof.ru) Получим дату цены, в случае если есть документ "Отсрочка повышения цены"
		Если мЕстьОтсрочкаПовышенияЦены Тогда		
			//{14.10.2015 Островерхий заявка №44781 
			Если ПЦ_ПересчитыватьЦеныПриОтгрузке Или ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда /// Кунов О.В., 28.06.2017 - 63651
				тДатаСкидок =ДатаОтгрузки;
			ИначеЕсли ПЦ_ПересчитыватьЦеныНаДатуДоставки Или ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда /// Кунов О.В., 28.06.2017 - 66859
				тДатаСкидок =КП_ДатаДоставки;	
			Иначе
				тДатаСкидок =Дата;	
			КонецЕсли; 
			//СтрокаТабличнойЧасти.ПЦ_ДатаЦены = ПЦ_Ценообразование.ПолучимДатуЦеныПоОтсрочкеПовышенияЦены(?(ПЦ_ПересчитыватьЦеныПриОтгрузке, ДатаОтгрузки, Дата),
			СтрокаТабличнойЧасти.ПЦ_ДатаЦены = ПЦ_Ценообразование.ПолучимДатуЦеныПоОтсрочкеПовышенияЦены(тДатаСкидок,
			//14.10.2015 Островерхий}
			//{23.03.2016 Островерхий заявка №50566  
				//Грузополучатель.Дивизион, Грузополучатель.НСИ_КаналПродаж, Контрагент, Грузополучатель.НСИ_Регион, Контрагент.НСИ_Вывеска, 
				Контрагент.Дивизион, Контрагент.НСИ_КаналПродаж, Контрагент, Грузополучатель.НСИ_Регион, Контрагент.НСИ_Вывеска,
				//23.03.2016 Островерхий} 
				СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.Номенклатура.Проект, 
				СтрокаТабличнойЧасти.Номенклатура.НСИ_ТоварнаяКатегория, СтрокаТабличнойЧасти.Номенклатура.НСИ_Брендообъем,Грузополучатель);			
		Иначе
			СтрокаТабличнойЧасти.ПЦ_ДатаЦены = Дата(1,1,1);
		КонецЕсли; 
		//-- Spl_Апроф
		
		ПересчитатьЦеныПоСтроке(СтрокаТабличнойЧасти,,Истина);
		
		Если ПересчитатьОСГ Тогда
			СтрокаТабличнойЧасти.КП_ОСГ = АП_ОбщегоНазначенияСервер.ПолучитьСтратегиюОСГ(Контрагент, СтрокаТабличнойЧасти.Номенклатура);	
		КонецЕсли;
		
	КонецЦикла; 
	
	//Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                               ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);
		//m.ionov@a-prof.ru 02.03.2015
		Если ПЦ_ПересчитыватьЦеныПриОтгрузке Или ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда /// Кунов О.В., 28.06.2017 - 63651
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(ДатаОтгрузки));
		//{14.10.2015 Островерхий заявка №44781 
		ИначеЕсли ПЦ_ПересчитыватьЦеныНаДатуДоставки Или ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда /// Кунов О.В., 28.06.2017 - 66859
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(КП_ДатаДоставки));
		//14.10.2015 Островерхий}	
		Иначе
			СтруктураПараметров.Вставить("ДатаСкидок",                       КонецДня(Дата));
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		
	КонецЕсли;

КонецПроцедуры
 
Функция ОбязательноДолжнаБытьЦена() Экспорт
	Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаПокупателю
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСотруднику
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.СменаПокупателя
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ТранзитнаяОтгрузка
		//{03.12.2015 Островерхий заявка №46691 
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСимов 
		//03.12.2015 Островерхий} 
		Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если АП_ОбщегоНазначенияСервер.ЕстьРезервПоЗаказу(Ссылка) Тогда
		Если РольДоступна("АП_Администратор") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение заказа покупателя. По Заказу покупателя есть резервы!", Ложь, "Отмена проведения заказа покупателя");
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение заказа покупателя. По Заказу покупателя есть резервы!", Отказ, "Отмена проведения заказа покупателя");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(Ссылка)) Или ЗначениеЗаполнено(АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПеревозкуПоЗаказу(Ссылка)) Тогда
		Если РольДоступна("АП_Администратор") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение заказа покупателя. По Заказу покупателя сформированные документы!", Ложь, "Отмена проведения заказа покупателя");
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение заказа покупателя. По Заказу покупателя сформированные документы!", Отказ, "Отмена проведения заказа покупателя");
		КонецЕсли;	
	КонецЕсли;
	
	Если Не Отказ Тогда
		КП_ДатаРезерва = Дата(1,1,1);	
		КП_СрокРезерва = Дата(1,1,1);	
		
		УстановитьСтатусБухгалтерии();
		
		ПКК_АвтоматическийСтатусСогласованияОКК = Ложь;
		ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НеТребуется;
		ПКК_КомментарийСогласованияОКК = "Выполнена отмена проведения";
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьЗадания(Отказ, ВыводитьСообщение = Истина, Создавать = Ложь) Экспорт
	
	Если ЭтоНовый() Или Не Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если Создавать 
		И (ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании ИЛИ ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НеСогласован
		ИЛИ КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании ИЛИ КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НеСогласован) Тогда
		//Не создаем автоматом задания
		Возврат;
	КонецЕсли;
	
	//Задание на подбор
	Если АП_ОбщегоНазначенияКлиент.ТребуетсяЗаданиеНаПодбор(ЭтотОбъект) Тогда
		ОбъектЗадание = Неопределено;
		Новое = Ложь;
		Задание = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(Ссылка);
		Если ЗначениеЗаполнено(Задание) Тогда
			ОбъектЗадание = Задание.ПолучитьОбъект();
		ИначеЕсли Создавать Тогда
			ОбъектЗадание = Документы.СП_ЗаданиеНаПодбор.СоздатьДокумент();
			Новое = Истина;
		КонецЕсли;
		
		Если Не ОбъектЗадание = Неопределено Тогда
			ОбъектЗадание.Заполнить(Ссылка);
			
			Если ОбъектЗадание.Дата < Дата Тогда
				ОбъектЗадание.Дата = Дата + 1;
			КонецЕсли;
			
			Попытка
				
				Если ОбъектЗадание.Проведен Тогда
					ОбъектЗадание.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
				Иначе
					Если Создавать Тогда
						ОбъектЗадание.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
					Иначе
						ОбъектЗадание.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыводитьСообщение Тогда
					Если Новое Тогда
						ОбщегоНазначения.Сообщение("Создано задание " + СокрЛП(ОбъектЗадание), СтатусСообщения.Информация);
					Иначе
						ОбщегоНазначения.Сообщение("Обновлено задание " + СокрЛП(Задание), СтатусСообщения.Информация);
					КонецЕсли;
				КонецЕсли;
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Задание на перевозку
	Если АП_ОбщегоНазначенияКлиент.ТребуетсяЗаданиеНаПеревозку(ЭтотОбъект) Тогда
		ОбъектЗадание = Неопределено;
		Новое = Ложь;
		Задание = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПеревозкуПоЗаказу(Ссылка);
		Если ЗначениеЗаполнено(Задание) Тогда
			ОбъектЗадание = Задание.ПолучитьОбъект();
		ИначеЕсли Создавать Тогда
			ОбъектЗадание = Документы.ПТЛ_ЗаданиеНаПеревозку.СоздатьДокумент();
			Новое = Истина;
		КонецЕсли;
		
		Если Не ОбъектЗадание = Неопределено Тогда
			ОбъектЗадание.Заполнить(Ссылка);
			
			Если ОбъектЗадание.Дата < Дата Тогда
				ОбъектЗадание.Дата = Дата + 1;
			КонецЕсли;
			
			Попытка
				
				Если ОбъектЗадание.Проведен Тогда
					ОбъектЗадание.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
				Иначе
					Если Создавать Тогда
						ОбъектЗадание.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
					Иначе
						ОбъектЗадание.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыводитьСообщение Тогда
					Если Новое Тогда
						ОбщегоНазначения.Сообщение("Создано задание " + СокрЛП(ОбъектЗадание), СтатусСообщения.Информация);
					Иначе
						ОбщегоНазначения.Сообщение("Обновлено задание " + СокрЛП(Задание), СтатусСообщения.Информация);
					КонецЕсли;
				КонецЕсли;
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииАдресаПоставки(ЗаполнениеИзОснования = Ложь) Экспорт
	Если Грузополучатель = Неопределено Тогда
		АдресДоставки = "";
		ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДатаДокумента",ДоговорКонтрагента);
		Возврат;
	КонецЕсли;
	
	АдресДоставки = АП_ОбщегоНазначенияСервер.ПолучитьАдресДоставкиСтрокой(Грузополучатель, ДополнениеКАдресуДоставки);	
	
	Если ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда
		Если ПустаяСтрока(АдресДоставки) Тогда
			АдресДоставки = СокрЛП(Грузополучатель);
		КонецЕсли;		
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_УсловияПоставки) И Не КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз И Не ЗаполнениеИзОснования Тогда
			КП_УсловиеПоставки = Грузополучатель.НСИ_УсловияПоставки;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Отделение) Тогда//И Не ЗначениеЗаполнено(КП_Отделение) Тогда
			КП_Отделение = Грузополучатель.НСИ_Отделение;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Склад) Тогда// И Не ЗначениеЗаполнено(СкладГруппа) Тогда
			СкладГруппа = Грузополучатель.НСИ_Склад;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.ПТЛ_Маршрут) Тогда
			КП_Маршрут = Грузополучатель.ПТЛ_Маршрут;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Город) Тогда
			КП_ГородДоставки = Грузополучатель.НСИ_Город;
		КонецЕсли;
        Если ЗначениеЗаполнено(Грузополучатель.НСИ_ЖДСтанция) Тогда
			КП_ЖДСтанция = Грузополучатель.НСИ_ЖДСтанция;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Грузополучатель.ПТЛ_ТЭК) И КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоТЭК Тогда
			КП_ТЭК = Грузополучатель.ПТЛ_ТЭК;
			КП_АдресДоставкиТЭК = Грузополучатель.КП_АдресДоставкиТЭК;
			КомментарийАдреса = "";
			КП_АдресТЭК = АП_ОбщегоНазначенияСервер.ПолучитьАдресДоставкиСтрокой(КП_АдресДоставкиТЭК, КомментарийАдреса);
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.ПТЛ_КомментарийДиспетчеру) Тогда
			КП_КомментарийКДоставке = Грузополучатель.ПТЛ_КомментарийДиспетчеру;
		КонецЕсли;  
		
		//m.ionov@a-prof.ru 31.01.2015
		Если ЗначениеЗаполнено(ДоговорКонтрагента.НСИ_РасчетныйСчетОрганизации) Тогда
			СтруктурнаяЕдиница = ДоговорКонтрагента.НСИ_РасчетныйСчетОрганизации;
		Иначе
			СтруктурнаяЕдиница = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
	Иначе
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_УсловияПоставки) И Не КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз Тогда
			КП_УсловиеПоставки = Грузополучатель.НСИ_УсловияПоставки;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Отделение) Тогда//И Не ЗначениеЗаполнено(КП_Отделение) Тогда
			КП_Отделение = Грузополучатель.НСИ_Отделение;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Склад) Тогда//И Не ЗначениеЗаполнено(СкладГруппа) Тогда
			//Blik 71301 121017 н
			//СкладГруппа = Грузополучатель.НСИ_Склад;
			Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияС Тогда
				 //оставим то что заполнил пользователь
			Иначе
				 СкладГруппа = Грузополучатель.НСИ_Склад;
			КонецЕсли;
			//Blik 71301 121017 к
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Город) Тогда
			КП_ГородДоставки = Грузополучатель.НСИ_Город;
		КонецЕсли;
		
		//m.ionov@a-prof.ru 31.01.2015
		Если ЗначениеЗаполнено(ДоговорКонтрагента.НСИ_РасчетныйСчетОрганизации) Тогда
			СтруктурнаяЕдиница = ДоговорКонтрагента.НСИ_РасчетныйСчетОрганизации;
		Иначе
			СтруктурнаяЕдиница = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		//----m.ionov@a-prof.ru---

	КонецЕсли;
	
	//ДатаОтгрузки = АП_ОбщегоНазначенияСервер.РассчитатьДатуОтгрузки(КП_ДатаДоставки, КП_Отделение, КП_УсловиеПоставки, КП_ГородДоставки, Грузополучатель);
	//ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДатаДокумента",ДоговорКонтрагента);
	ПриИзменииДатыДоставки();
	
	Если Не КП_Отделение = Ссылка.КП_Отделение Тогда
		Номер = "";
	КонецЕсли;
КонецПроцедуры

Процедура ПриИзменииДатыДоставки() Экспорт
	
	//{01.04.2015 Островерхий заявка №36501 
	Если НЕ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСимов Тогда
		Если КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоТЭК Тогда
			//{24.06.2015 Островерхий заявка №40997 
			//КП_ДатаДоставкиТЭК = АП_ОбщегоНазначенияСервер.РассчитатьДатуОтгрузки(КП_ДатаДоставки, КП_Отделение, КП_УсловиеПоставки, КП_АдресДоставкиТЭК.НСИ_Город, КП_АдресДоставкиТЭК); 
			//24.06.2015 Островерхий} 
		Иначе
			ДатаОтгрузки = АП_ОбщегоНазначенияСервер.РассчитатьДатуОтгрузки(КП_ДатаДоставки, КП_Отделение, КП_УсловиеПоставки, КП_ГородДоставки, Грузополучатель);
		КонецЕсли;	
	КонецЕсли;
	//01.04.2015 Островерхий}

	ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДатаДокумента",ДоговорКонтрагента);
	
КонецПроцедуры

Процедура ПриИзменииДатыОтгрузки() Экспорт

	КП_ДатаДоставки = АП_ОбщегоНазначенияСервер.РассчитатьДатуПоставки(ДатаОтгрузки, КП_Отделение, КП_УсловиеПоставки, КП_ГородДоставки, Грузополучатель);
    	
КонецПроцедуры

Процедура УстановитьСтатусСогласованияОКК(Отказ) Экспорт 	
	
	Если Не КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаПокупателю
		И Не КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.СменаПокупателя
		И Не КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ТранзитнаяОтгрузка Тогда
		
		ПКК_АвтоматическийСтатусСогласованияОКК = Ложь;
				
		Возврат;
	КонецЕсли;
	//начало изменений Ожиганов 09.06.2015 немного оптимизируем
	Если ЭтоНовый() Тогда
		стрСсылки = ЭтотОбъект;
	Иначе	
		стрСсылки = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Ссылка,Новый Структура("СуммаДокумента,ВалютаДокумента,ДоговорКонтрагента,Контрагент"));
	Конецесли;	
	//конец изменений 
	
	//{12.01.2016 Островерхий заявка №47716 
	тСуммаДокумента = ПолучитьСуммуСНДС(); 
	//12.01.2016 Островерхий} 
	
	Если (ЭтоНовый() или НЕ Проведен) И НЕ ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании Тогда
		//Делаем проверку
		
	//начало изменений Ожиганов 09.06.2015 немного оптимизируем
	//заменим на запрос
	//ИначеЕсли (ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НеТребуется
	//	ИЛИ ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.Согласовано)
	//	и (СуммаДокумента > Ссылка.СуммаДокумента или Не ВалютаДокумента = Ссылка.ВалютаДокумента или Не Контрагент = Ссылка.Контрагент или Не ДоговорКонтрагента = Ссылка.ДоговорКонтрагента) Тогда 

	ИначеЕсли (ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НеТребуется
		ИЛИ ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.Согласовано)
		//{12.01.2016 Островерхий заявка №47716 
		//и (СуммаДокумента > стрСсылки.СуммаДокумента или Не ВалютаДокумента = стрСсылки.ВалютаДокумента или Не Контрагент = стрСсылки.Контрагент или Не ДоговорКонтрагента = стрСсылки.ДоговорКонтрагента) Тогда 
		и (тСуммаДокумента > стрСсылки.СуммаДокумента или Не ВалютаДокумента = стрСсылки.ВалютаДокумента или Не Контрагент = стрСсылки.Контрагент или Не ДоговорКонтрагента = стрСсылки.ДоговорКонтрагента) Тогда
		//12.01.2016 Островерхий} 
	
	//конец изменений 	
		//Делаем проверку
	Иначе
		Если ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.Согласовано Тогда
			//начало изменений Ожиганов 09.06.2015 немного оптимизируем
			//СтруктураДолга = ПКК_КредитныйКонтроль.ПолучитьПросроченнуюДебеторскуюЗадолженность(Контрагент, Дата);
			СтруктураДолга = ПКК_КредитныйКонтроль.ПолучитьПросроченнуюДебеторскуюЗадолженность(Контрагент, Дата,Ложь,НачалоДня(Дата));
			//конец изменений 
			ПРГ_СогласованнаяСуммаДЗ = СтруктураДолга.Просрочено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	//m.ionov@a-prof.ru 29.01.2015
	//Проверим на предоплату
	Если ДоговорКонтрагента.ПроцентПредоплаты > 0 Тогда
		ПКК_АвтоматическийСтатусСогласованияОКК = Истина;
		ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании;
		ПКК_КомментарийСогласованияОКК = "Проверка предоплаты по заказу";
		
		Возврат;
	КонецЕсли;
	
	//Проверим сначала на статус блокировки клиента
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	МАКСИМУМ(ЕСТЬNULL(ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследнихКонтрагент.ДопустимаяСуммаЗадолженности, 0)) КАК ДопустимаяСуммаЗадолженности,
	//			   |	МАКСИМУМ(ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаУпрОстаток, 0)) КАК СуммаЗаказов,
	//			   |	МАКСИМУМ(ЕСТЬNULL(ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних.ДопустимоеЧислоДнейЗадолженности, 0)) КАК ДопустимоеЧислоДнейЗадолженности,
	//			   |	МАКСИМУМ(ЕСТЬNULL(ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследнихКонтрагент.КонтролироватьСуммуЗадолженности, ЛОЖЬ)) КАК КонтролироватьСуммуЗадолженности,
	//			   //|	МАКСИМУМ(ЕСТЬNULL(ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.ПричинаБлокировкиОтгрузки, ЗНАЧЕНИЕ(Справочник.ПКК_ПричиныБлокировкиОтгрузки.НеБлокирован))) КАК ПричинаБлокировкиОтгрузки,
	//			   |	МАКСИМУМ(ЕСТЬNULL(ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.ПричинаБлокировкиОтгрузки, ЗНАЧЕНИЕ(Справочник.ПКК_ПричиныБлокировкиОтгрузки.ПустаяСсылка))) КАК ПричинаБлокировкиОтгрузки,
	//			   |	ДоговорыКонтрагентов.Владелец
	//			   |ИЗ
	//			   |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежа.СрезПоследних(&ДатаЗаказа, ) КАК ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних
	//			   |		ПО ДоговорыКонтрагентов.Ссылка = ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних.Объект
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежа.СрезПоследних(&ДатаЗаказа, ) КАК ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследнихКонтрагент
	//			   |		ПО (ДоговорыКонтрагентов.Владелец = ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследнихКонтрагент.Объект)
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_ПричиныБлокировкиОтгрузки.СрезПоследних(&ДатаЗаказа, ) КАК ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних
	//			   |		ПО ДоговорыКонтрагентов.Владелец = ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.Контрагент
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаЗаказа) КАК ЗаказыПокупателейОстатки
	//			   |		ПО ДоговорыКонтрагентов.Владелец = ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец
	//			   |		И ЗаказыПокупателейОстатки.ЗаказПокупателя.ПКК_СогласованиеКредитнымКонтролем = &СтатусНеСогласован
	//			   |ГДЕ
	//			   |	ДоговорыКонтрагентов.Ссылка = &Договор
	//			   |
	//			   |СГРУППИРОВАТЬ ПО
	//			   |	ДоговорыКонтрагентов.Владелец";
	
   // попробуем запрос с фильтрами в виртуальных таблицах, т.к. без фильтров постоянно возникает конфликт блокировок
   //{15.07.2015 Островерхий заявка №б/н 
   //Модифицирован запрос, чтобы уйти от ЗаказыПокупателейОстатки.ЗаказПокупателя.ПКК_СогласованиеКредитнымКонтролем = &СтатусНеСогласован
   //приводящие к блокировкам
   //15.07.2015 Островерхий} 
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	               |	ДоговорыКонтрагентов.Владелец
	               |ПОМЕСТИТЬ ТаблДогов
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Владелец = &Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказыПокупателейОстатки.ДоговорКонтрагента.Владелец КАК Владелец,
	               |	ЕСТЬNULL(ЗаказыПокупателейОстатки.СуммаУпрОстаток, 0) КАК СуммаУпрОстаток
	               |ПОМЕСТИТЬ втОстаткиПоНеСогласованнымЗаказамОКК
	               |ИЗ
	               |	РегистрНакопления.ЗаказыПокупателей.Остатки(
	               |			&ДатаЗаказа,
	               |			ДоговорКонтрагента В
	               |				(ВЫБРАТЬ
	               |					ТаблДогов.Ссылка
	               |				ИЗ
	               |					ТаблДогов)) КАК ЗаказыПокупателейОстатки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КП_СтатусыСогласованияЗаказа.СрезПоследних(
	               |				,
	               |				Статус = 1
	               |					И СогласованиеКредитнымКонтролем = ЗНАЧЕНИЕ(Перечисление.ПКК_СогласованиеКредитныйКонтролем.НеСогласован)) КАК КП_СтатусыСогласованияЗаказаСрезПоследних
	               |		ПО ЗаказыПокупателейОстатки.ЗаказПокупателя = КП_СтатусыСогласованияЗаказаСрезПоследних.Документ
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Владелец
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	МАКСИМУМ(ЕСТЬNULL(ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследнихКонтрагент.ДопустимаяСуммаЗадолженности, 0)) КАК ДопустимаяСуммаЗадолженности,
	               |	МАКСИМУМ(ЕСТЬNULL(втОстаткиПоНеСогласованнымЗаказамОКК.СуммаУпрОстаток, 0)) КАК СуммаЗаказов,
	               |	МАКСИМУМ(ЕСТЬNULL(ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних.ДопустимоеЧислоДнейЗадолженности, 0)) КАК ДопустимоеЧислоДнейЗадолженности,
	               |	МАКСИМУМ(ЕСТЬNULL(ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследнихКонтрагент.КонтролироватьСуммуЗадолженности, ЛОЖЬ)) КАК КонтролироватьСуммуЗадолженности,
	               |	МАКСИМУМ(ЕСТЬNULL(ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.ПричинаБлокировкиОтгрузки, ЗНАЧЕНИЕ(Справочник.ПКК_ПричиныБлокировкиОтгрузки.ПустаяСсылка))) КАК ПричинаБлокировкиОтгрузки,
	               |	ДоговорыКонтрагентов.Владелец
	               |ИЗ
	               |	ТаблДогов КАК ДоговорыКонтрагентов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежа.СрезПоследних(&ДатаЗаказа, Объект = &Договор) КАК ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних
	               |		ПО ДоговорыКонтрагентов.Ссылка = ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежа.СрезПоследних(&ДатаЗаказа, Объект = &Контрагент) КАК ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследнихКонтрагент
	               |		ПО ДоговорыКонтрагентов.Владелец = ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследнихКонтрагент.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_ПричиныБлокировкиОтгрузки.СрезПоследних(&ДатаЗаказа, Контрагент = &Контрагент) КАК ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних
	               |		ПО ДоговорыКонтрагентов.Владелец = ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоНеСогласованнымЗаказамОКК КАК втОстаткиПоНеСогласованнымЗаказамОКК
	               |		ПО ДоговорыКонтрагентов.Владелец = втОстаткиПоНеСогласованнымЗаказамОКК.Владелец
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Ссылка = &Договор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДоговорыКонтрагентов.Владелец";
				   
				   
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДатаЗаказа", КонецДня(Дата));
	//{15.07.2015 Островерхий заявка №б/н 
	//Запрос.УстановитьПараметр("СтатусНеСогласован", Перечисления.ПКК_СогласованиеКредитныйКонтролем.НеСогласован) 
	//15.07.2015 Островерхий} ;
	Результат = Запрос.Выполнить().Выбрать();
	
	ЕстьДанные = Ложь;
	
	ПолнаяПроверка = Истина;
	
	Если Результат.Следующий() Тогда
		ЕстьДанные = Истина;
		
		Если Результат.ПричинаБлокировкиОтгрузки.ОтгрузкаЗапрещена
			ИЛИ Результат.ПричинаБлокировкиОтгрузки.КонтрольПДЗ
			ИЛИ Результат.ПричинаБлокировкиОтгрузки.НеКонтролироватьДЗ
			ИЛИ Результат.ПричинаБлокировкиОтгрузки.КонтрольЛимита Тогда
			
			ПолнаяПроверка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//Если ЕстьДанные И (Не Результат.ПричинаБлокировкиОтгрузки = Справочники.ПКК_ПричиныБлокировкиОтгрузки.НеБлокирован
	//	И Не Результат.ПричинаБлокировкиОтгрузки.НеКонтролироватьДЗ) Тогда
	//	
	//	ПКК_АвтоматическийСтатусСогласованияОКК = Истина;
	//	ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании;
	//	ПКК_КомментарийСогласованияОКК = Результат.ПричинаБлокировкиОтгрузки;
	//	
	//	Возврат;
	//КонецЕсли;
	
	Если ЕстьДанные И Результат.ПричинаБлокировкиОтгрузки.ОтгрузкаЗапрещена Тогда
		ПКК_АвтоматическийСтатусСогласованияОКК = Истина;
		ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании;
		ПКК_КомментарийСогласованияОКК = СокрЛП(Результат.ПричинаБлокировкиОтгрузки) + " (Отгрузка запрещена)";
		
		//ОбщегоНазначения.СообщитьОбОшибке("В заказе покупателя " + СокрЛП(Ссылка) + " выбран клиент " + СокрЛП(Контрагент) + " по которому отгрузка запрещена", Отказ);
		Возврат;
	КонецЕсли;      
		
	//m.ionov@a-prof.ru 31.01.2015
	Если ЕстьДанные И Результат.ПричинаБлокировкиОтгрузки.НеКонтролироватьДЗ Тогда
		//На задолженность и кредитный лимит не проверяем
		Возврат;
	КонецЕсли;
	
	//В любом случаее делаем проверку на задолженность
	//{12.01.2016 Островерхий заявка №47716 
	//СуммаДокументаРуб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента, Константы.ВалютаУправленческогоУчета.Получить(), КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
	СуммаДокументаРуб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(тСуммаДокумента, ВалютаДокумента, Константы.ВалютаУправленческогоУчета.Получить(), КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
	//12.01.2016 Островерхий} 
	//{15.07.2015 Островерхий заявка №б/н 
	//СтуктураДолга = ПКК_КредитныйКонтроль.ПолучитьПросроченнуюДебеторскуюЗадолженность(Контрагент, Дата); 
	СтуктураДолга = ПКК_КредитныйКонтроль.ПолучитьПросроченнуюДебеторскуюЗадолженность(Контрагент, Дата,,НачалоДня(Дата));
	//15.07.2015 Островерхий} 
	
	СуммаЗаказов = ?(АП_СтатусЗаказа = Перечисления.АП_СтатусыЗаказов.Отгружен,0,СуммаДокументаРуб);
	Если ЕстьДанные Тогда
		СуммаЗаказов = Результат.СуммаЗаказов;
	КонецЕсли;
	
	/// Кунов О.В., 01.04.2015 - 37857
	Если (СтуктураДолга.Просрочено = 0) Или
		(СтуктураДолга.Просрочено <= ПРГ_СогласованнаяСуммаДЗ И
			((Не ЕстьДанные) Или (Результат.ПричинаБлокировкиОтгрузки.МенятьСуммуВПределахСогласованной))) Тогда
			//{06.06.2017 Островерхий заявка №66424 
			//Возврат;
			Если Результат.ДопустимаяСуммаЗадолженности <> 0 Тогда
				Возврат;
			КонецЕсли;
			//06.06.2017 Островерхий} 
			
	КонецЕсли;
	///
	
	Если СтуктураДолга.Просрочено > 0 И (ПолнаяПроверка ИЛИ (ЕстьДанные И Результат.ПричинаБлокировкиОтгрузки.КонтрольПДЗ)) Тогда
		ПКК_АвтоматическийСтатусСогласованияОКК = Истина;
		ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании;
		ПКК_КомментарийСогласованияОКК = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПросроченнаяДЗ;
	ИначеЕсли ЕстьДанные И Результат.КонтролироватьСуммуЗадолженности И Результат.ДопустимаяСуммаЗадолженности > 0 И ((СтуктураДолга.Долг + СуммаЗаказов) > Результат.ДопустимаяСуммаЗадолженности)
		И Результат.ПричинаБлокировкиОтгрузки.КонтрольЛимита Тогда
		ПКК_АвтоматическийСтатусСогласованияОКК = Истина;
		ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании;
		ПКК_КомментарийСогласованияОКК = "Превышение кредитного лимита";
	//{06.06.2017 Островерхий заявка №66424 
	ИначеЕсли Результат.ДопустимаяСуммаЗадолженности = 0 Тогда 
		ПКК_АвтоматическийСтатусСогласованияОКК = Истина;
		ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании;
		ПКК_КомментарийСогласованияОКК = "Превышение нулевого кредитного лимита";
	//06.06.2017 Островерхий} 	
	КонецЕсли; 		
	
	/// Кунов О.В., 01.04.2015 - 37857
	Если ПКК_СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.Согласовано Тогда
		ПРГ_СогласованнаяСуммаДЗ = СтуктураДолга.Просрочено;
	КонецЕсли;
	///
	
КонецПроцедуры

#Если Клиент Тогда
Процедура ПодтвредитьОтравкуЗаказаЧерез_КонтурEDI() Экспорт
	
	ТекОбработка = Обработки.КП_КонтурEDI.Создать();
	ТекОбработка.ИнициализироватьПодключаемыеМодули();
		
	Сообщение = ТекОбработка.МодульИнтеграции_Новый.ПодготовитьИсходящееСообщение("ORDRSP", Ссылка);

	Если ЗначениеЗаполнено(Сообщение) Тогда
		
		ФормаСообщения = ТекОбработка.ПолучитьФорму("ФормаСообщения");
		ФормаСообщения.Сообщение = Сообщение;
		ФормаСообщения.ОткрытьМодально();
		
	КонецЕсли; 
	
КонецПроцедуры
#КонецЕсли

Функция ВыполнитьОбработкуЗаказа() Экспорт
	
	Отказ = Ложь;
	
	Если ЭтоНовый() Тогда
		Возврат Отказ;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Заказ помещен на удаление, нельзя обработать заказ", Отказ);
		Возврат Отказ;
	КонецЕсли;
	//Blik 71103 290917 н
	АЗаданиеНаПодбор = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(Ссылка);
	Если не АЗаданиеНаПодбор = Документы.СП_ЗаданиеНаПодбор.ПустаяСсылка() Тогда
		АЗадание = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(АЗаданиеНаПодбор,
		Новый Структура("Организация,ВидОперации,Получатель,СтатусДокумента"));
		Если не АЗадание.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаПодбор.Открыт Тогда
			 ОбщегоНазначения.СообщитьОбОшибке("Запрещено резервирования заказа. Заказ можно резервировать только в статусе задания на подбор Открыт!!!", Отказ);
             Отказ = Истина;
			 Возврат Отказ;
		КонецЕсли;
	КонецЕсли;
	//Blik 71103 290917 к
	Если Не Проведен Тогда
		Попытка
			
			ПересчитатьЦены();
			ДополнительныеСвойства.Вставить("ПроводитсяИнтерактивно", Истина);
			//{12.10.2015 Островерхий заявка №б/н 
			//ДополнительныеСвойства.Вставить("ОбновитьСтатусКК", Истина); //Чтобы обновился статус ОКК 
			мОтказ=Ложь;
			УстановитьСтатусСогласованияОКК(мОтказ); 
			Если мОтказ Тогда
				ВызватьИсключение "Ошибка при установке статуса кредитного контроля";	
			Иначе	
				ДополнительныеСвойства.Вставить("ОбновитьСтатусКК", Ложь);
				Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);		
			КонецЕсли; 
			//12.10.2015 Островерхий} 
			
		Исключение
			
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
			
		КонецПопытки;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Форма = Обработки.АП_РезервированиеТоваров.ПолучитьФорму("МастерРазмещения", );
		Форма.СкладРезерва = СкладГруппа;
		Форма.ДокументОбъект = ЭтотОбъект;
		Попытка
			
			Форма.ЗарезервироватьВсе();
			
		Исключение
			
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
		
		КонецПопытки;	
	КонецЕсли;
	
	#Если Клиент Тогда
	Если Не Отказ Тогда
		ОбновитьЗадания(Отказ, Истина, Истина);
	КонецЕсли;
	#КонецЕсли
	
	Возврат Отказ;
КонецФункции

//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
//Процедура ПроверитьТаблицуТовары(Отказ) Экспорт
Процедура ПроверитьТаблицуТовары(ТаблДляПроверки,Отказ) Экспорт	
//конец изменений 	
	
	Если Не КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаПокупателю
		И Не КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.СменаПокупателя
		И Не КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ТранзитнаяОтгрузка Тогда
		
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок 
//	НужнаПроверкаПоСрокамГодности = ДоговорКонтрагента.НСИ_ФормаДоговора.КонтролироватьСрокГодности;
	аДоговорКонтрагента = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаСпрСложНПоля(ДоговорКонтрагента,Новый Структура("КонтролироватьСрокГодности,НСИ_ФормаДоговора","НСИ_ФормаДоговора.КонтролироватьСрокГодности"));
	//начало изменений Ожиганов 27.07.2015 Формат договора может быть не заполнен
	НужнаПроверкаПоСрокамГодности = ?(ЗначениеЗаполнено(аДоговорКонтрагента.НСИ_ФормаДоговора),аДоговорКонтрагента.КонтролироватьСрокГодности,Ложь);
	//конец изменений 
	
	//конец изменений 
	//начало изменений Ожиганов 24.07.2015 минимизируем количество блокировок 
	ТаблицаСроковГодности = Новый ТаблицаЗначений;
	
	Если ЗначениеЗаполнено(аДоговорКонтрагента.НСИ_ФормаДоговора) Тогда
	//	И ЗначениеЗаполнено(ДоговорКонтрагента.НСИ_ФормаДоговора.Продукция.Количество() > 0) 
		ПРГ_Запрос = Новый Запрос("ВЫБРАТЬ
		                          |	НСИ_ФормыДоговоровПродукция.Ссылка,
		                          |	НСИ_ФормыДоговоровПродукция.НомерСтроки,
		                          |	НСИ_ФормыДоговоровПродукция.Проект,
		                          |	НСИ_ФормыДоговоровПродукция.ТоварнаяКатегория,
		                          |	НСИ_ФормыДоговоровПродукция.Брендообъем,
		                          |	НСИ_ФормыДоговоровПродукция.СрокГодностиОт,
		                          |	НСИ_ФормыДоговоровПродукция.СрокГодностиДо
		                          |ИЗ
		                          |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		                          |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НСИ_ФормыДоговоров.Продукция КАК НСИ_ФормыДоговоровПродукция
		                          |		ПО ДоговорыКонтрагентов.НСИ_ФормаДоговора = НСИ_ФормыДоговоровПродукция.Ссылка
		                          |ГДЕ
		                          |	ДоговорыКонтрагентов.Ссылка = &Ссылка");
								  
		ПРГ_Запрос.УстановитьПараметр("Ссылка",ДоговорКонтрагента);
		ТаблицаСроковГодности = ПРГ_Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	
	//Если ЗначениеЗаполнено(ДоговорКонтрагента.НСИ_ФормаДоговора)
	//	И ЗначениеЗаполнено(ДоговорКонтрагента.НСИ_ФормаДоговора.Продукция.Количество() > 0) Тогда
	//	
	//	ТаблицаСроковГодности = ДоговорКонтрагента.НСИ_ФормаДоговора.Продукция.Выгрузить();
	//	
	//КонецЕсли;
	//конец изменений 
	
	
	//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
	//в получаемой таблица есть инфа для обмена с совло
	//{25.03.2015 Островерхий заявка №38069 
	//СпНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура"); 
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Товары.Номенклатура
	//|ПОМЕСТИТЬ втНоменклатура
	//|ИЗ
	//|	&Товары КАК Товары
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	втНоменклатура.Номенклатура
	//|ИЗ
	//|	Справочник.Номенклатура КАК спрНоменклатура
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	//|		ПО спрНоменклатура.Ссылка = втНоменклатура.Номенклатура
	//|			И (спрНоменклатура.ВидНоменклатуры.НСИ_ОбменССолво = ИСТИНА)
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	втНоменклатура.Номенклатура";
	//
	//Запрос.УстановитьПараметр("Товары",Товары);
	//СпНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	//25.03.2015 Островерхий}
	СпНоменклатуры = Новый Массив;
	Для Каждого ТекСтрока Из ТаблДляПроверки Цикл
		Если ТекСтрока.НСИ_ОбменССолво Тогда
				СпНоменклатуры.Добавить(ТекСтрока.Номенклатура);
		КонецЕсли; 
	КонецЦикла;	
	//конец изменений 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПЦ_ЗапретОтгрузкиПоТипамЦенСрезПоследних.Номенклатура,
	               |	ПЦ_ЗапретОтгрузкиПоТипамЦенСрезПоследних.ТипЦен,
	               |	ПЦ_ЗапретОтгрузкиПоТипамЦенСрезПоследних.КатегорияТипЦен
	               |ИЗ
	               |	РегистрСведений.ПЦ_ЗапретОтгрузкиПоТипамЦен.СрезПоследних(&Дата, Номенклатура В (&Номенклатура)) КАК ПЦ_ЗапретОтгрузкиПоТипамЦенСрезПоследних
	               |ГДЕ
	               |	ПЦ_ЗапретОтгрузкиПоТипамЦенСрезПоследних.ЗапрещенаОтгрузка = ИСТИНА";
				   
	Запрос.УстановитьПараметр("Номенклатура", СпНоменклатуры);
	Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 ИЛИ ТаблицаСроковГодности.Количество() > 0 ИЛИ НужнаПроверкаПоСрокамГодности Тогда
		//Проверим попадаем ли под категорию и тип цен
		//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
		//Для каждого СтрокаТовар Из Товары Цикл
		Для каждого СтрокаТовар Из ТаблДляПроверки Цикл
		//конец изменений 	
		
			//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
			//{25.03.2015 Островерхий заявка №38069 
			//Проверка не требуется (актуально для тары)
			//Если СпНоменклатуры.Найти(СтрокаТовар.Номенклатура) = Неопределено Тогда
			Если Не СтрокаТовар.НСИ_ОбменССолво Тогда
			//конец изменений 	
				Продолжить;
			КонецЕсли; 
			//25.03.2015 Островерхий} 
			
			Если ТаблицаСроковГодности.Количество() > 0 И НужнаПроверкаПоСрокамГодности Тогда
				НеПопадаетВСрокГодности = Истина;
				Для каждого СтрокаСрокаГодности Из ТаблицаСроковГодности Цикл
					
					//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
					//Если (СтрокаСрокаГодности.Брендообъем = СтрокаТовар.Номенклатура.НСИ_Брендообъем
					//	ИЛИ Не ЗначениеЗаполнено(СтрокаСрокаГодности.Брендообъем))
					//	И (СтрокаСрокаГодности.ТоварнаяКатегория = СтрокаТовар.Номенклатура.НСИ_ТоварнаяКатегория
					//	ИЛИ Не ЗначениеЗаполнено(СтрокаСрокаГодности.ТоварнаяКатегория))
					//	И (СтрокаСрокаГодности.Проект = СтрокаТовар.Номенклатура.Проект
					//	ИЛИ Не ЗначениеЗаполнено(СтрокаСрокаГодности.Проект))
					//	И (НЕ ДоговорКонтрагента.НСИ_ФормаДоговора.КонтролироватьСрокГодности ИЛИ (СтрокаТовар.Номенклатура.СрокГодности = 0 
					//	ИЛИ (СтрокаСрокаГодности.СрокГодностиОт = 0 И СтрокаСрокаГодности.СрокГодностиДо = 0)
					//	ИЛИ (СтрокаТовар.Номенклатура.СрокГодности >= СтрокаСрокаГодности.СрокГодностиОт И СтрокаТовар.Номенклатура.СрокГодности <= СтрокаСрокаГодности.СрокГодностиДо)))Тогда
						
					Если (СтрокаСрокаГодности.Брендообъем = СтрокаТовар.НоменклатураНСИ_Брендообъем
						ИЛИ Не ЗначениеЗаполнено(СтрокаСрокаГодности.Брендообъем))
						И (СтрокаСрокаГодности.ТоварнаяКатегория = СтрокаТовар.НоменклатураНСИ_ТоварнаяКатегория
						ИЛИ Не ЗначениеЗаполнено(СтрокаСрокаГодности.ТоварнаяКатегория))
						И (СтрокаСрокаГодности.Проект = СтрокаТовар.НоменклатураПроект
						ИЛИ Не ЗначениеЗаполнено(СтрокаСрокаГодности.Проект))
						И (НЕ НужнаПроверкаПоСрокамГодности ИЛИ (СтрокаТовар.НоменклатураСрокГодности = 0 
						ИЛИ (СтрокаСрокаГодности.СрокГодностиОт = 0 И СтрокаСрокаГодности.СрокГодностиДо = 0)
						ИЛИ (СтрокаТовар.НоменклатураСрокГодности >= СтрокаСрокаГодности.СрокГодностиОт И СтрокаТовар.НоменклатураСрокГодности <= СтрокаСрокаГодности.СрокГодностиДо)))Тогда
					//конец изменений 	
						
						НеПопадаетВСрокГодности = Ложь;
						Прервать;
					КонецЕсли;
				
				КонецЦикла; 
				
				Если НеПопадаетВСрокГодности Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Номенклатура " + СокрЛП(СтрокаТовар.Номенклатура.Код) + " " + СокрЛП(СтрокаТовар.Номенклатура) + " не попадает в указанные сроки годности указанные в форме договора " + СокрЛП(ДоговорКонтрагента), Отказ);
				КонецЕсли;	
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТовар.ПЦ_ТипЦен) Тогда
				Продолжить;
			КонецЕсли;
			//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
			//СтрокиЗапрета = Результат.НайтиСтроки(Новый Структура("Номенклатура, КатегорияТипЦен", СтрокаТовар.Номенклатура, СтрокаТовар.ПЦ_ТипЦен.ПЦ_Категория));
			СтрокиЗапрета = Результат.НайтиСтроки(Новый Структура("Номенклатура, КатегорияТипЦен", СтрокаТовар.Номенклатура, СтрокаТовар.ПЦ_Категория));
			//конец изменений 
			Если СтрокиЗапрета.Количество() > 0 Тогда
				
				Для каждого СтрокаЗапрета Из СтрокиЗапрета Цикл
				
					Если Не ЗначениеЗаполнено(СтрокаЗапрета.ТипЦен) ИЛИ СтрокаЗапрета.ТипЦен = СтрокаТовар.ПЦ_ТипЦен Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Номенклатура " + СокрЛП(СтрокаТовар.Номенклатура.Код) + " " + СокрЛП(СтрокаТовар.Номенклатура) + " запрещена к отгрузке по типу цен " + СокрЛП(СтрокаТовар.ПЦ_ТипЦен), Отказ);
				    КонецЕсли;
				КонецЦикла; 				
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьСтроку(Строка,Отказ) Экспорт
	//m.ionov@a-prof.ru 20.02.2015
	Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР Тогда
		Если Не Строка.Номенклатура.ВидНоменклатуры.НСИ_СобственноеПроизводства Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В заказе с видом дегустация ПР " + СокрЛП(Ссылка) + " можно использовать только продукциию собственного производства."+Символы.ПС+"Ошибочно указана " + СокрЛП(Строка.Номенклатура) + " (Код: " + СокрЛП(Строка.Номенклатура.Код) + ")",Отказ);
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ПроверяемыеРеквизиты.Добавить("Отвественный");
КонецПроцедуры

// Иванов С.С. s.ivanov@a-prof.ru {{
Процедура ДвижениеПоРегиструПоставки(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоУслугам, ТаблицаПоТаре,
	                          Отказ, Заголовок)

	Если Не Отказ Тогда
						
		ТаблицаДляЗаписиДвижений = Новый ТаблицаЗначений;
		
		ТаблицаДляЗаписиДвижений.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаДляЗаписиДвижений.Колонки.Добавить("Номенклатура");
		ТаблицаДляЗаписиДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаДляЗаписиДвижений.Колонки.Добавить("Брендообъем");
		ТаблицаДляЗаписиДвижений.Колонки.Добавить("Количество");
		ТаблицаДляЗаписиДвижений.Колонки.Добавить("УсловиеПоставкиПоДоговоруСКонтрагентом");
		
		мТовары = ТаблицаПоТоварам.Скопировать();
		//мТовары.Колонки.Добавить("Брендообъем", Новый ОписаниеТипов("СправочникСсылка.НСИ_Брендообъемы"));
		мТовары.Колонки.Добавить("ТекущийОстатокДляРаспределения");
		мТовары.Колонки.Добавить("ТекущийОстатокРегистр");
		
		мМассивНоменклатуры = Товары.ВыгрузитьКолонку("Номенклатура");
		мМассивБрендоОбъема = Новый Массив;

		Для каждого СтрокаТоваров Из мТовары Цикл
			СтрокаТоваров.ТекущийОстатокРегистр = 0;
			СтрокаТоваров.ТекущийОстатокДляРаспределения = СтрокаТоваров.Количество;
			мМассивНоменклатуры.Добавить(СтрокаТоваров.Номенклатура);
			мМассивБрендоОбъема.Добавить(СтрокаТоваров.Номенклатура.НСИ_Брендообъем);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаОтбора", Дата);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Номенклатура", мМассивНоменклатуры);
		Запрос.УстановитьПараметр("Брендообъем", мМассивБрендоОбъема);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПЦ_ОграничениеОбъемаПоставкиОстатки.ДоговорКонтрагента,
		|	ПЦ_ОграничениеОбъемаПоставкиОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ПЦ_ОграничениеОбъемаПоставкиОстатки.УсловиеПоставкиПоДоговоруСКонтрагентом КАК УсловиеПоставкиПоДоговоруСКонтрагентом,
		|	ПЦ_ОграничениеОбъемаПоставкиОстатки.Номенклатура КАК Номенклатура,
		|	ПЦ_ОграничениеОбъемаПоставкиОстатки.Брендообъем КАК Брендообъем,
		|	ПЦ_ОграничениеОбъемаПоставкиОстатки.УсловиеПоставкиПоДоговоруСКонтрагентом.Дата КАК УсловиеПоставкиПоДоговоруСКонтрагентомДата,
		|	ПЦ_ОграничениеОбъемаПоставкиОстатки.ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ Т_Итого
		|ИЗ
		|	РегистрНакопления.ПЦ_ОграничениеОбъемаПоставки.Остатки(
		|			,
		|			(Брендообъем В (&Брендообъем)
		|				ИЛИ Номенклатура В (&Номенклатура))
		|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ПЦ_ОграничениеОбъемаПоставкиОстатки
		|ГДЕ
		|	ПЦ_ОграничениеОбъемаПоставкиОстатки.УсловиеПоставкиПоДоговоруСКонтрагентом.ДатаНачала <= &ДатаОтбора
		|	И ПЦ_ОграничениеОбъемаПоставкиОстатки.УсловиеПоставкиПоДоговоруСКонтрагентом.ДатаОкончания >= &ДатаОтбора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т_Итого.ДоговорКонтрагента,
		|	Т_Итого.КоличествоОстаток,
		|	Т_Итого.УсловиеПоставкиПоДоговоруСКонтрагентом КАК ДокументУПД,
		|	Т_Итого.Номенклатура,
		|	Т_Итого.Брендообъем КАК Брендообъем,
		|	Т_Итого.УсловиеПоставкиПоДоговоруСКонтрагентомДата КАК УсловиеПоставкиПоДоговоруСКонтрагентомДата,
		|	Т_Итого.ХарактеристикаНоменклатуры
		|ИЗ
		|	Т_Итого КАК Т_Итого
		|
		|УПОРЯДОЧИТЬ ПО
		|	Брендообъем,
		|	УсловиеПоставкиПоДоговоруСКонтрагентомДата";
		
		ТаблицаПолученныхОграничений = Запрос.Выполнить().Выгрузить();
					
		Если ТаблицаПолученныхОграничений.Количество() = 0 Тогда
			
			Сообщить("По договору " + СтруктураШапкиДокумента.ДоговорКонтрагента + " ограничения отсуствуют.");
			Отказ = Истина;	
			
		КонецЕсли;
		
		мТекОстаток = 0;
		мОтказ = Ложь;
		
		Для Каждого СтрокаТПО Из ТаблицаПолученныхОграничений Цикл
						
			мТекОстаток = СтрокаТПО.КоличествоОстаток; 
			
			мПрерватьВышеЦикл = Ложь;
			
			Пока НЕ СтрокаТПО.КоличествоОстаток = 0 И НЕ мПрерватьВышеЦикл Цикл
				
				Если ЗначениеЗаполнено(СтрокаТПО.Брендообъем) Тогда
					НайтиСтроки = мТовары.НайтиСтроки(Новый Структура("Брендообъем", СтрокаТПО.Брендообъем));  
				Иначе	
					НайтиСтроки = мТовары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТПО.Номенклатура, СтрокаТПО.ХарактеристикаНоменклатуры));  
				КонецЕсли;
				
				сч = 0;
				
				Для каждого СтрокаТоваров Из НайтиСтроки Цикл
					
					
					КоличествоТовара = СтрокаТоваров.ТекущийОстатокДляРаспределения;
					
					СтрокаТоваров.ТекущийОстатокРегистр = СтрокаТоваров.ТекущийОстатокРегистр + СтрокаТПО.КоличествоОстаток;
					
					Если КоличествоТовара = 0 Тогда						
						сч = сч + 1;
						
						Если Сч = НайтиСтроки.Количество() Тогда
							мПрерватьВышеЦикл = Истина;	
						Иначе	
							Продолжить;		
						КонецЕсли;
												
					ИначеЕсли СтрокаТПО.КоличествоОстаток <= КоличествоТовара Тогда
						
						НоваяСтрока = ТаблицаДляЗаписиДвижений.Добавить();
						НоваяСтрока.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
						
						Если ЗначениеЗаполнено(СтрокаТПО.Брендообъем) Тогда
							НоваяСтрока.Брендообъем = СтрокаТПО.Брендообъем;
						Иначе
							НоваяСтрока.Номенклатура 		= СтрокаТоваров.Номенклатура; 
							НоваяСтрока.ХарактеристикаНоменклатуры 	= СтрокаТоваров.ХарактеристикаНоменклатуры;
						КонецЕсли;
						
						НоваяСтрока.УсловиеПоставкиПоДоговоруСКонтрагентом = СтрокаТПО.ДокументУПД; 				
						НоваяСтрока.Количество = СтрокаТПО.КоличествоОстаток;
						
						КоличествоТовара = КоличествоТовара - СтрокаТПО.КоличествоОстаток;
						
						СтрокаТоваров.ТекущийОстатокДляРаспределения = КоличествоТовара;
						
						СтрокаТПО.КоличествоОстаток = 0;
						
						Прервать;
						
					ИначеЕсли СтрокаТПО.КоличествоОстаток > КоличествоТовара Тогда
						
						НоваяСтрока = ТаблицаДляЗаписиДвижений.Добавить();
						НоваяСтрока.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
						
						Если ЗначениеЗаполнено(СтрокаТПО.Брендообъем) Тогда
							НоваяСтрока.Брендообъем = СтрокаТПО.Брендообъем;
						Иначе
							НоваяСтрока.Номенклатура 		= СтрокаТоваров.Номенклатура; 
							НоваяСтрока.ХарактеристикаНоменклатуры 	= СтрокаТоваров.ХарактеристикаНоменклатуры;
						КонецЕсли;
						
						НоваяСтрока.УсловиеПоставкиПоДоговоруСКонтрагентом = СтрокаТПО.ДокументУПД; 
						НоваяСтрока.Количество = КоличествоТовара;
						
						//КоличествоТовара = 0;
						
						СтрокаТПО.КоличествоОстаток = СтрокаТПО.КоличествоОстаток - КоличествоТовара;
						
						СтрокаТоваров.ТекущийОстатокДляРаспределения = 0;
						
					КонецЕсли;
					
					
				КонецЦикла;
										 			
			КонецЦикла;		
						
		КонецЦикла;
		
		Для каждого стр из мТовары Цикл
				
			Если НЕ Стр.ТекущийОстатокДляРаспределения = 0 Тогда				
				
				СтрокаСообщения = "По позиции " + Стр.Номенклатура + " " + СокрЛП(Строка(Стр.Номенклатура.Код));
				
				УправлениеЗапасами.ОшибкаНетОстатка(
				СтрокаСообщения, 
				Стр.ТекущийОстатокРегистр, 
				Стр.Количество,
				Стр.ЕдиницаИзмерения, 
				Отказ, 
				Заголовок);
				
				 мОтказ = Истина;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Отказ = мОтказ;
		
		НаборДвижений = Движения.ПЦ_ОграничениеОбъемаПоставки;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаСкидок", ТаблицаДляЗаписиДвижений);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);		
		
	КонецЕсли;		
КонецПроцедуры
// }} Иванов С.С. s.ivanov@a-prof.ru

//m.ionov@a-prof.ru 16.02.2015
Процедура УстановитьСтатусБухгалтерии() Экспорт
	Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ОтгрузкаСотруднику Тогда
		КП_АвтоматическийСтатусСогласованияБухгалтерией = Ложь;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НеТребуется;
		КП_ПричинаБлокировкиЗаказаБухгалтерией = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПустаяСсылка();
	ИначеЕсли КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.Дегустация Тогда
		
		КП_АвтоматическийСтатусСогласованияБухгалтерией = Истина;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании;
		КП_ПричинаБлокировкиЗаказаБухгалтерией = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПустаяСсылка();
		//Blik 71301 031017 н
	ИначеЕсли КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияС Тогда
		
		КП_АвтоматическийСтатусСогласованияБухгалтерией = Истина;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании;
		КП_ПричинаБлокировкиЗаказаБухгалтерией = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПустаяСсылка();
		//Blik 71301 031017 к
	ИначеЕсли КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР Тогда
		
		КП_АвтоматическийСтатусСогласованияБухгалтерией = Истина;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании;
		КП_ПричинаБлокировкиЗаказаБухгалтерией = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПустаяСсылка();
		
	ИначеЕсли КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.БезвозмезднаяПередача Тогда
			
		КП_АвтоматическийСтатусСогласованияБухгалтерией = Истина;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании;
		КП_ПричинаБлокировкиЗаказаБухгалтерией = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПустаяСсылка();
						
    ИначеЕсли КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ПредставительскиеРасходы Тогда
		
		//{29.01.2016 Островерхий заявка №48430 
		//КП_АвтоматическийСтатусСогласованияБухгалтерией = Ложь;
		//КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НеТребуется;
 
		КП_АвтоматическийСтатусСогласованияБухгалтерией = Истина;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании;
		//29.01.2016 Островерхий} 
		
		КП_ПричинаБлокировкиЗаказаБухгалтерией = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПустаяСсылка();
						
	ИначеЕсли КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.АнализыЛаборатории Тогда
		
		КП_АвтоматическийСтатусСогласованияБухгалтерией = Ложь;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НеТребуется;
		КП_ПричинаБлокировкиЗаказаБухгалтерией = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПустаяСсылка();
				
	ИначеЕсли КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ЗаменаПродукции
		//{11.06.2015 Островерхий заявка №40578 
		ИЛИ КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ПеремещениеСкоропорт 
		//11.06.2015 Островерхий}  
		Тогда						
		КП_АвтоматическийСтатусСогласованияБухгалтерией = Ложь;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НеТребуется;
		КП_ПричинаБлокировкиЗаказаБухгалтерией = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПустаяСсылка();
					
	ИначеЕсли КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.СменаПокупателя Тогда
				
		КП_АвтоматическийСтатусСогласованияБухгалтерией = Истина;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании;
		КП_ПричинаБлокировкиЗаказаБухгалтерией = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПустаяСсылка();
		
	ИначеЕсли КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ТранзитнаяОтгрузка Тогда
				
		КП_АвтоматическийСтатусСогласованияБухгалтерией = Истина;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании;
		КП_ПричинаБлокировкиЗаказаБухгалтерией = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПустаяСсылка();			
	Иначе
		КП_АвтоматическийСтатусСогласованияБухгалтерией = Ложь;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НеТребуется;
		КП_ПричинаБлокировкиЗаказаБухгалтерией = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПустаяСсылка();
	КонецЕсли;
	
	// <- Шевченков 37988
	// Если отгрузка со склада МФ Склад копэкера (ПРГМФД) исключаем бухгалтерию из перечня согласователей
	//{14.04.2015 Островерхий заявка №38914 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРГ_Служебный.Объект
		|ИЗ
		|	Справочник.ПРГ_Служебный КАК ПРГ_Служебный
		|ГДЕ
		|	ПРГ_Служебный.Родитель = ЗНАЧЕНИЕ(Справочник.ПРГ_Служебный.СкладыОтгрузкиГПКопекеру)
		|	И (ВЫРАЗИТЬ(ПРГ_Служебный.Объект КАК Справочник.Склады)) = &СкладГруппа";

	Запрос.УстановитьПараметр("СкладГруппа", СкладГруппа);

	РезультатПустой = Запрос.Выполнить().Пустой(); 
	
	//Если СкладГруппа = Справочники.Склады.НайтиПоКоду("ПРГМФД") Тогда
    Если НЕ РезультатПустой Тогда
	//14.04.2015 Островерхий} 
		КП_АвтоматическийСтатусСогласованияБухгалтерией = Ложь;
		КП_СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НеТребуется;	
		КП_ПричинаБлокировкиЗаказаБухгалтерией = Справочники.ПКК_ПричиныБлокировкиЗаказа.ПустаяСсылка();
	КонецЕсли;	
	// ->
	
КонецПроцедуры
//----m.ionov@a-prof.ru---

Процедура ОтправитьУведомленияОтвественнымМенеджерам()

	//{09.11.2015 Островерхий заявка №б/н, исключить рассылку для всех баз кроме рабочей 
	Если  Нрег(СокрЛП(Константы.ПРГ_СтрокаПодключения.Получить())) <> Нрег(СтрокаСоединенияИнформационнойБазы()) Тогда
		Возврат;
	КонецЕсли;  
	//09.11.2015 Островерхий} 
	
	//{03.04.2015 Островерхий заявка №36501 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Ссылка,
	               |	ПотребностиКопекеров.Номенклатура,
	               |	ПотребностиКопекеров.ЕдиницаИзмерения,
	               |	ПотребностиКопекеров.Количество
	               |ПОМЕСТИТЬ втПотребностиКопекеров
	               |ИЗ
	               |	&ПотребностиКопекеров КАК ПотребностиКопекеров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЗаказПокупателя.Ссылка,
	               |	ЗаказПокупателя.Номер,
	               |	ЗаказПокупателя.Дата,
	               |	ЗаказПокупателя.ДатаОтгрузки КАК ДатаПотребности,
	               |	спрНоменклатура.ОтветственныйМенеджерЗаПокупки КАК ОтветственныйМенеджерЗаПокупки,
	               |	спрНоменклатура.Ссылка КАК Номенклатура,
	               |	спрНоменклатура.Код,
	               |	спрНоменклатура.Наименование,
	               |	втПотребностиКопекеров.ЕдиницаИзмерения,
	               |	втПотребностиКопекеров.Количество
	               |ИЗ
	               |	втПотребностиКопекеров КАК втПотребностиКопекеров
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |		ПО втПотребностиКопекеров.Ссылка = ЗаказПокупателя.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	               |		ПО втПотребностиКопекеров.Номенклатура = спрНоменклатура.Ссылка
	               |ГДЕ
	               |	НЕ ЗаказПокупателя.Ссылка В
	               |				(ВЫБРАТЬ
	               |					втПотребностиКопекеров.Ссылка КАК Ссылка
	               |				ИЗ
	               |					втПотребностиКопекеров КАК втПотребностиКопекеров ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ОтправленыеДокументы КАК ПРГ_ОтправленыеДокументы
	               |						ПО
	               |							втПотребностиКопекеров.Ссылка = ПРГ_ОтправленыеДокументы.Документ
				   //Blik Исправление по типам рассылок н
				   |								И ПРГ_ОтправленыеДокументы.ВариантРассылки = ЗНАЧЕНИЕ(Перечисление.ПРГ_ВариантыРассылки.ПустаяСсылка))
				   //Blik Исправление по типам рассылок к
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаПотребности,
	               |	Номенклатура
	               |ИТОГИ ПО
	               |	ОтветственныйМенеджерЗаПокупки";
	
	Запрос.УстановитьПараметр("ПотребностиКопекеров", Товары);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	ВыборкаМенеджер = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаМенеджер.Следующий() Цикл
	
		Выборка = ВыборкаМенеджер.Выбрать();
		
		ТекстПисьма = СформироватьТекстПисьмаМенеджеру(Ссылка,ВыборкаМенеджер.ОтветственныйМенеджерЗаПокупки,Выборка);
		
		АдресПолучателя = УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(ВыборкаМенеджер.ОтветственныйМенеджерЗаПокупки.Физлицо);
		
		СписокПолучателей = Справочники.ПРГ_Служебный.ПолучитьОбъектыИзГруппы(Справочники.ПРГ_Служебный.ПолучателиСообщенийОНовыхЗаказахКопекеров);
		
		ПолучателиСообщений = Новый СписокЗначений;
		ПолучателиСообщений.Добавить(АдресПолучателя);
		
		Для каждого ТекЭлемент Из СписокПолучателей Цикл
			
			ПолучателиСообщений.Добавить(УправлениеЭлектроннойПочтой.ОпределитьАдресПолучателя(ТекЭлемент));		
		
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(АдресПолучателя) Тогда
			
			ПРГ_Регламентый.ОправитьФайл("Новый заказ копекера", ПолучателиСообщений, ТекстПисьма, , , , Истина);
	
		КонецЕсли;
				
	КонецЦикла;
	
	//Зафиксируем факт отправки письма
	НаборЗаписей = РегистрыСведений.ПРГ_ОтправленыеДокументы.СоздатьМенеджерЗаписи();
	НаборЗаписей.Период = ТекущаяДата();
	НаборЗаписей.Документ = Ссылка;
	НаборЗаписей.Записать(Истина);

	//03.04.2015 Островерхий} 

КонецПроцедуры

Функция СформироватьТекстПисьмаМенеджеру(СсылкаНаЗаказ,Менеджер,Выборка)
	
	ШапкаХТМЛ =
	"<!DOCTYPE html>
	|<html>
	|<head>
	|<style type='text/css'>
	|body { font-size: 16; }
	|caption { text-align: left; font-weight: bold; }
	|th { font-weight: normal; text-align: center; background-color: lightgray; border: 1px solid black; border-bottom-width: 0px; }
	|td { padding: 2px; }
	|table { border-collapse: collapse; }
	|table, td { border: 1px solid black; }
	|.red { color: red; }
	|.ar { text-align: right; }
	|.grayinfo { font-size: 13; color: gray; }
	|</style>
	|</head>
	|<body>
	|";

	ШапкаПисьма =
	"<p>Здравствуйте, %ИмяОтчество%!</p>
	|<p>Информируем вас о том что оформлен новый заказ копекера.</p>
	|";
	
	ДанныеОДокументах =
	"<p><span style=""font-weight: bold;"">Информация о документе</span>
	|<table>
	|<colgroup>
	|<col width='200' bgcolor='lightgray'/>
	|</colgroup>
	|<tr><td>Номер заказа </td><td> %ДокументЗаказНомер% </td></tr>
	|<tr><td>Дата заказа </td><td> %ДокументЗаказДата% </td></tr>
	|<tr><td>Ответственный </td><td> %Ответственный% </td></tr>
	|</table></p>
	|";
	
	ДанныеОДокументах = СтрЗаменить(ДанныеОДокументах, "%ДокументЗаказНомер%", Строка(СсылкаНаЗаказ.Номер));
	ДанныеОДокументах = СтрЗаменить(ДанныеОДокументах, "%ДокументЗаказДата%", Строка(СсылкаНаЗаказ.Дата));
	ДанныеОДокументах = СтрЗаменить(ДанныеОДокументах, "%Ответственный%", Строка(СсылкаНаЗаказ.Ответственный));
	
	СписокРасхождений =
	"<p><span style=""font-weight: bold;"">Содержание заказа:</span>
	|<table>
	|<colgroup>
	|<col width=""400"" align=""right"" />
	|<col width='150'/>
	|<col width='150'/>
	|<col width='150'/>
	|</colgroup>
	|<tr bgcolor='lightgray'><td> Код СиМ </td><td> Наименование СиМ </td><td>Количество</td><td> Ед.изм. </td><td> Дата потребности </td></tr>";
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаРасхождения = "
		|<tr><td> %КодСиМ% </td><td> %НаименованиеСиМ% </td><td> %Количество% </td><td> %ЕдИзм% </td><td> %ДатаПотребности% </td></tr>";
		
		СтрокаРасхождения = СтрЗаменить(СтрокаРасхождения, "%КодСиМ%", Выборка.Код);
		СтрокаРасхождения = СтрЗаменить(СтрокаРасхождения, "%НаименованиеСиМ%", СокрЛП(Выборка.Наименование));
		СтрокаРасхождения = СтрЗаменить(СтрокаРасхождения, "%Количество%", Формат(Выборка.Количество, "ЧГ=0"));
		СтрокаРасхождения = СтрЗаменить(СтрокаРасхождения, "%ЕдИзм%", СокрЛП(Выборка.ЕдиницаИзмерения));
		СтрокаРасхождения = СтрЗаменить(СтрокаРасхождения, "%ДатаПотребности%", Формат(Выборка.ДатаПотребности, "ДЛФ=D"));
		
		СписокРасхождений = СписокРасхождений + СтрокаРасхождения;
		
	КонецЦикла;
	
	СписокРасхождений = СписокРасхождений + 
	"</table></p>";
	
	ПодвалПисьма =
	"<p>
	|<span class='grayinfo'>Уведомление сгенерировано автоматически, отвечать на это письмо не нужно.</span>
	|</p>
	|<br>
	|<p>С уважением,</p>
	|<p>Департамент информационных технологий.</p>
	|</html>
	|";
	
	ФИО = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Менеджер.Физлицо, Дата);
	ШапкаПисьма = СтрЗаменить(ШапкаПисьма, "%ИмяОтчество%", ФИО.Имя + " " + ФИО.Отчество);
	
	ТекстПисьма = ШапкаХТМЛ + ШапкаПисьма + ДанныеОДокументах + СписокРасхождений + ПодвалПисьма;
	
	Возврат ТекстПисьма;
	
КонецФункции

//начало изменений Ожиганов 29.04.2015 немного оптимизируем проведение 
Функция ПРГПолучитьТаблицуТоваровДляПроверки()
	
	ТаблТоваровВспом = Товары.Выгрузить(,"НомерСтроки,Номенклатура,Количество,ЕдиницаИзмеренияМест,ЕдиницаИзмерения,КоличествоМест,ПЦ_ТипЦен");
	ТаблТоваровВспом.Колонки.Добавить("ЕдиницаДляВеса",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	Для Каждого ТекСтрока Из ТаблТоваровВспом Цикл
		Если ТекСтрока.КоличествоМест = 0 Тогда
			ТекСтрока.КоличествоМест 	   = ТекСтрока.Количество;
			ТекСтрока.ЕдиницаДляВеса	   = ТекСтрока.ЕдиницаИзмерения;
		Иначе
			ТекСтрока.ЕдиницаДляВеса 	   = ТекСтрока.ЕдиницаИзмеренияМест;
		КонецЕсли;
	КонецЦикла;	
	
	//ТаблТоваровВспом.ВыбратьСтроку();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ТаблТоваров.НомерСтроки,
	                      |	ТаблТоваров.Номенклатура,
	                      |	ТаблТоваров.Количество,
	                      |	ТаблТоваров.ЕдиницаДляВеса,
	                      |	ТаблТоваров.ПЦ_ТипЦен,
	                      |	ТаблТоваров.ЕдиницаИзмеренияМест
	                      |ПОМЕСТИТЬ ТаблТоваров
	                      |ИЗ
	                      |	&ТаблТоваров КАК ТаблТоваров
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТаблТоваров.НомерСтроки,
	                      |	ТаблТоваров.Номенклатура,
	                      |	ТаблТоваров.Количество,
	                      |	Ном.ПРГТребуетсяРефрижератор,
	                      |	Ном.НСИ_Брендообъем КАК НоменклатураНСИ_Брендообъем,
	                      |	Ном.НСИ_ТоварнаяКатегория КАК НоменклатураНСИ_ТоварнаяКатегория,
	                      |	Ном.Проект КАК НоменклатураПроект,
	                      |	Ном.СрокГодности КАК НоменклатураСрокГодности,
	                      |	ЕСТЬNULL(Единица.Коэффициент, 0) КАК ЕдиницаИзмеренияМестКоэффициент,
	                      |	ВЫБОР
	                      |		КОГДА НЕ ЕдиницыВеса.ПРГ_Нетто ЕСТЬ NULL 
	                      |				И ЕдиницыВеса.Коэффициент <> 0
	                      |			ТОГДА ЕдиницыВеса.ПРГ_Нетто * ТаблТоваров.Количество / ЕдиницыВеса.Коэффициент
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК ВесНетто,
	                      |	ВЫБОР
	                      |		КОГДА НЕ ЕдиницыВеса.Объем ЕСТЬ NULL 
	                      |				И ЕдиницыВеса.Коэффициент <> 0
	                      |			ТОГДА ЕдиницыВеса.Объем * ТаблТоваров.Количество / ЕдиницыВеса.Коэффициент
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК Объем,
	                      |	ВЫБОР
	                      |		КОГДА НЕ ЕдиницыВеса.Вес ЕСТЬ NULL 
	                      |				И ЕдиницыВеса.Коэффициент <> 0
	                      |			ТОГДА ЕдиницыВеса.Вес * ТаблТоваров.Количество / ЕдиницыВеса.Коэффициент
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК ВесБрутто,
	                      |	ЕСТЬNULL(Ном.ВидНоменклатуры.НСИ_ОбменССолво, ЛОЖЬ) КАК НСИ_ОбменССолво,
	                      |	ТипыЦенНоменклатуры.ПЦ_Категория,
	                      |	ТаблТоваров.ПЦ_ТипЦен,
	                      |	Ном.ВидНоменклатуры.НСИ_СобственноеПроизводства КАК НСИ_СобственноеПроизводства,
	                      |	Ном.Код КАК НоменклатураКод,
	                      |	Ном.СтатусСКЮ
	                      |ИЗ
	                      |	ТаблТоваров КАК ТаблТоваров
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Ном
	                      |		ПО ТаблТоваров.Номенклатура = Ном.Ссылка
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК Единица
	                      |		ПО ТаблТоваров.ЕдиницаИзмеренияМест = Единица.Ссылка
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыВеса
	                      |		ПО ТаблТоваров.ЕдиницаДляВеса = ЕдиницыВеса.Ссылка
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	                      |		ПО ТаблТоваров.ПЦ_ТипЦен = ТипыЦенНоменклатуры.ПЦ_Категория");
						  
	Запрос.УстановитьПараметр("ТаблТоваров",ТаблТоваровВспом);					  
	
	возврат Запрос.Выполнить().Выгрузить();
	
	//Для Каждого ПРГТекСтрока Из ТаблТоваров Цикл
	//	Строка  = Объект.Товары[ПРГТекСтрока.НомерСтроки-1];
	//КонецЦикла;	
	
КонецФункции	
//конец изменений 

Функция ТабличнаяЧастьТоварыМодифицирована()
	
	Результат = Ложь;
	
	Если НЕ ЭтоНовый() Тогда
		
		//начало изменений Ожиганов 23.07.2015 минимизируем количество блокировок 
		//мТабличнаяЧасть = Ссылка.Товары.Выгрузить(, "Номенклатура, Количество, Цена, Сумма");
		///мТабличнаяЧасть.Свернуть("Номенклатура, Цена", "Количество, Сумма");
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЗаказПокупателяТовары.Номенклатура,
		                      |	ЗаказПокупателяТовары.Цена,
		                      |	СУММА(ЗаказПокупателяТовары.Сумма) КАК Сумма,
		                      |	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество
		                      |ИЗ
		                      |	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		                      |ГДЕ
		                      |	ЗаказПокупателяТовары.Ссылка = &Ссылка
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ЗаказПокупателяТовары.Цена,
		                      |	ЗаказПокупателяТовары.Номенклатура");
							  
		Запрос.УстановитьПараметр("Ссылка",Ссылка);					  
		мТабличнаяЧасть = Запрос.Выполнить().Выгрузить();
		//конец изменений 
		
		мТабличнаяЧастьСейчас = Товары.Выгрузить(, "Номенклатура, Количество, Цена, Сумма");
		мТабличнаяЧастьСейчас.Свернуть("Номенклатура, Цена", "Количество, Сумма");
		
		Если мТабличнаяЧасть.Количество() <> мТабличнаяЧастьСейчас.Количество() Тогда
			Возврат Истина;
		КонецЕсли; 
		
		Для Каждого СтрокаТабличнойЧастиСейчас Из мТабличнаяЧастьСейчас Цикл
			
			СтрокиТабличнойЧасти = мТабличнаяЧасть.НайтиСтроки(Новый Структура("Номенклатура, Цена", СтрокаТабличнойЧастиСейчас.Номенклатура, СтрокаТабличнойЧастиСейчас.Цена));
			
			Если СтрокиТабличнойЧасти.Количество() > 0 Тогда
				СтрокаТабличнойЧасти = СтрокиТабличнойЧасти[0];
				Если СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧастиСейчас.Количество И СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧастиСейчас.Сумма Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Результат = Истина;
			
			Прервать;
			
		КонецЦикла;	
	
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьГалкуРегион()

	Если КП_Отделение = Справочники.НСИ_Отделения.НайтиПоКоду("МФ ПРГ") Тогда
	
		КодРегиона = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(Грузополучатель,"НСИ_Регион.КодРегиона");                                           
		
		/// Кунов О.В., 22.11.2016 - 59444
		РегионыИсключенияЭлемент = Справочники.ПРГ_Служебный.РегионыИсключенияДляМФ.ТаблицаПараметров;
		Если РегионыИсключенияЭлемент.Количество() > 0 Тогда
			РегионыИсключения = РегионыИсключенияЭлемент.ВыгрузитьКолонку("Параметр");
			Для Н = 0 По РегионыИсключения.Количество() - 1 Цикл
				РегионыИсключения[Н] = РегионыИсключения[Н].КодРегиона;
			КонецЦикла;
		Иначе
			РегионыИсключения = Новый Массив;
			РегионыИсключения.Добавить("50"); // Московская область
			РегионыИсключения.Добавить("77"); // Москва
			РегионыИсключения.Добавить("69"); // Тверская область
			РегионыИсключения.Добавить("62"); // Рязанская область
			РегионыИсключения.Добавить("71"); // Тульская область
			РегионыИсключения.Добавить("40"); // Калужская область
			РегионыИсключения.Добавить("33"); // Владимирская область
		КонецЕсли;
		
		Если РегионыИсключения.Найти(КодРегиона) = Неопределено Тогда
		//Если НЕ КодРегиона = "50" И НЕ КодРегиона = "77" Тогда
		///
			КП_Регион = Истина;	
		КонецЕсли; 
		
	КонецЕсли; 

КонецПроцедуры

//Blik 71301 121017	н
// данная проверка необходима тк Дегустация с отгружается только со склада короткие сроки
Функция ПроверкаСоответствияСкладаОтгрузки() Экспорт
	
	Если КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияС Тогда
		
		Запрос = новый запрос;
		запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.СкладГруппа = СП_ПривязкаСкладовКОтделениям.СкладКороткиеСроки
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Соответствие
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СП_ПривязкаСкладовКОтделениям КАК СП_ПривязкаСкладовКОтделениям
		|		ПО ЗаказПокупателя.КП_Отделение = СП_ПривязкаСкладовКОтделениям.Отделение
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Результат.Соответствие;
		Иначе
			//что то пошлло не так
			Возврат ЛОЖЬ;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецФункции

Функция ПроверитьСоответствиеСрокаГодности(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт
													
Перем ПредставлениеТабличнойЧасти;

	// Цикл по строкам таблицы значений.
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура.СрокГодности) Тогда
			Если ПредставлениеТабличнойЧасти = неопределено Тогда
				ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
			КонецЕсли;
			Если СтрокаТаблицы.Номенклатура.СрокГодности > 19 Тогда 
				ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
				""" табличной части """ + ПредставлениеТабличнойЧасти + """: содержится готовая продукция со сроком годности более 19 дней. " +
				"Здесь ее быть не должно!", Отказ, Заголовок);
			КонецЕсли;
		Иначе
			Если ПредставлениеТабличнойЧасти = неопределено Тогда
				ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
			КонецЕсли;
            ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
				""" табличной части """ + ПредставлениеТабличнойЧасти + """: содержится готовая продукция без указания срока годности. " +
				"Необходимо проверить корректность заполнения!", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции
//Blik 71301 121017 к

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мРезервироватьПоСериям = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании") И глЗначениеПеременной("ИспользоватьСерииНоменклатуры");

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя();

//m.ionov@a-prof.ru 20.01.2015
//Для исключения ошибки при загрузки заказов
#Если Клиент Тогда
Если мСписокФильтров = Неопределено Тогда
	мСписокФильтров = УправлениеДопПравамиПользователей.ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа();
КонецЕсли;
#КонецЕсли
//----m.ionov@a-prof.ru---


 
