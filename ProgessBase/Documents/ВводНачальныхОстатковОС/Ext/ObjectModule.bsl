Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыРеглУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыБухУчета  Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета  Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета  Экспорт; // (Регл)
Перем мСтрокаРеквизитыУСН       Экспорт; // (Регл)

Перем мУчетнаяПолитика;                 // (Общ)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мФлагФормированияДвиженийПоВыработке;
Перем мТабличноеПоле Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

Функция ПечатьОпись()
			
	ТабДок  = Новый ТабличныйДокумент;
	Макет   = ПолучитьМакет("ТабЧасть");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Заголовок = Метаданные().Представление() + " № " + Номер + " от " + Формат( Дата, "ДФ=dd.MM.yyyy");
	ТабДок.Вывести( Область);
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Область = Макет.ПолучитьОбласть("ШапкаБух");
		Область.Параметры.Организация              = Организация;
		Область.Параметры.ПодразделениеОрганизации = ПодразделениеОрганизации;
		ТабДок.Вывести( Область);
	КонецЕсли;
	Если ОтражатьВУправленческомУчете Тогда
		Область = Макет.ПолучитьОбласть("ШапкаУпр");
		Область.Параметры.Подразделение = Подразделение;
		ТабДок.Вывести( Область);
	КонецЕсли;
	
	// Создадим структуру печатаемых реквизитов
	МетаТЧ     = Метаданные().ТабличныеЧасти.ОС.Реквизиты;
	СтруктРекв = Новый Структура;
	СтруктРекв.Вставить("ОсновноеСредство", МетаТЧ.ОсновноеСредство);
	Для Каждого Колонка Из мТабличноеПоле.Колонки Цикл
		Если Не (Колонка.Имя = "НомерСтроки" ИЛИ Колонка.Имя = "ИнвентарныйНомер")
			   И Колонка.Видимость Тогда
			СтруктРекв.Вставить( Колонка.Имя, МетаТЧ[Колонка.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод заголовка таб части
	Область = Макет.ПолучитьОбласть( "ТабШапка|Начало");
	ТабДок.Вывести( Область);
	Область = Макет.ПолучитьОбласть( "ТабШапка|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Не Колонка.Ключ = "ОсновноеСредство" Тогда
			Область.Параметры.КолЗаголовок = Колонка.Значение;
			ТабДок.Присоединить(Область);
		КонецЕсли;
	КонецЦикла;
	
	// Вывод данных
	Для Каждого СтрокаТЧ Из ОС Цикл
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Начало");
		Область.Параметры.НомерСтроки = СтрокаТЧ.НомерСтроки;
		Область.Параметры.ОС          = СтрокаТЧ.ОсновноеСредство;
		ТабДок.Вывести( Область);
		
		Область = Макет.ПолучитьОбласть( "ТабСтрока|Колонка");
		Для Каждого Колонка Из СтруктРекв Цикл
			Если Не Колонка.Ключ = "ОсновноеСредство" Тогда
				Если ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Булево") Тогда
					Область.Параметры.КолДанные = Формат( СтрокаТЧ[Колонка.Ключ], "БЛ=Нет; БИ=Да");
				ИначеЕсли ТипЗнч(СтрокаТЧ[Колонка.Ключ]) = Тип("Дата") Тогда
					Область.Параметры.КолДанные = Формат( СтрокаТЧ[Колонка.Ключ], "ДЛФ=DD");
				Иначе
					Область.Параметры.КолДанные = СтрокаТЧ[Колонка.Ключ];
				КонецЕсли;
				ТабДок.Присоединить(Область);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Вывод итогов
	Область = Макет.ПолучитьОбласть( "ТабИтог|Начало");
	ТабДок.Вывести( Область);
	
	Область = Макет.ПолучитьОбласть( "ТабИтог|Колонка");
	Для Каждого Колонка Из СтруктРекв Цикл
		Если Колонка.Ключ = "ОсновноеСредство" Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.Значение.Тип.Типы()[0] = Тип("Число") 
		   И (Найти(Колонка.Ключ,"Стоимость")> 0 
		   Или Найти(Колонка.Ключ,"Амортизация")> 0) Тогда
			Область.Параметры.КолИтог = Формат( ОС.Итог( Колонка.Ключ), "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=; ЧГ=3,0");
		Иначе
			Область.Параметры.КолИтог = "";
		КонецЕсли;
		ТабДок.Присоединить(Область);
	КонецЦикла;
	
	Возврат ТабДок;
		
КонецФункции
	
// Процедура печати табличной части документа
//
//Процедура Печать(КнопкаТекст) Экспорт
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Опись" Тогда
		Если мТабличноеПоле = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТабДокумент = ПечатьОпись();
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ("Данные табличной части документа " + ЭтотОбъект), Ссылка);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		
	КонецЕсли;
	
	
		
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Опись","Опись ОС при вводе остатков");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для управленческого учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение,
		|ОС.ВыработкаКоличество,
		|ОС.ГрафикАмортизации,
		|ОС.ДатаВводаВЭксплуатацию,
		|ОС.ДатаПоследнейМодернизации,
		|ОС.ДатаПринятияКУчету,
		|ОС.КоэффициентАмортизации,
		|ОС.КоэффициентУскорения,
		|ОС.МОЛ,
		|ОС.НазваниеДокументаВводаВЭксплуатацию,
		|ОС.НазваниеДокументаМодернизации,
		|ОС.НазваниеДокументаПринятияКУчету,
		|ОС.НакопленнаяАмортизация,
		|ОС.НачислятьАмортизацию,
		|ОС.Номенклатура,
		|ОС.ХарактеристикаНоменклатуры,
		|ОС.НомерДокументаВводаВЭксплуатацию,
		|ОС.НомерДокументаМодернизации,
		|ОС.НомерДокументаПринятияКУчету,
		|ОС.ОбъемПродукцииРабот,
		|ОС.ОбъемПродукцииРаботДляВычисленияАмортизации,
		|ОС.ПараметрВыработки,
		|ОС.ПервоначальнаяСтоимость,
		|ОС.ТекущаяСтоимость,
		|ОС.РодительскоеОС,
		|ОС.СобытиеВводВЭксплуатацию,
		|ОС.СобытиеМодернизации,
		|ОС.СобытиеПринятияКУчету,
		|ОС.СписатьНаЗатратыПриВводе,
		|ОС.СпособНачисленияАмортизации,
		|ОС.СпособОтраженияРасходовПоАмортизации,
		|ОС.СрокИспользованияДляВычисленияАмортизации,
		|ОС.СрокПолезногоИспользования,
		|ОС.СтоимостьДляВычисленияАмортизации,
		|ОС.СуммаПоследнейМодернизации";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
//	мСтрокаРеквизитыРеглУчета = "Организация, НадписьОрганизация, ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
	мСтрокаРеквизитыРеглУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
		|ОС.ИнвентарныйНомерРегл,
		|ОС.ДатаВводаВЭксплуатациюРегл,
		|ОС.ДатаПринятияКУчетуРегл,
		|ОС.НазваниеДокументаВводаВЭксплуатациюРегл,
		|ОС.НазваниеДокументаПринятияКУчетуРегл,
		|ОС.НомерДокументаВводаВЭксплуатациюРегл,
		|ОС.НомерДокументаПринятияКУчетуРегл,
		|ОС.СобытиеВводВЭксплуатациюРегл,
		|ОС.СобытиеПринятияКУчетуРегл,
		|ОС.МОЛРегл,
		|";
	
	мСтрокаРеквизитыБухУчета = "ОС.ТекущаяСтоимостьБУ,
		|ОС.ВыработкаКоличествоБУ,
		|ОС.ГрафикАмортизацииБУ,
		|ОС.ДатаПоследнейМодернизацииРегл,
		|ОС.КоэффициентАмортизацииБУ,
		|ОС.КоэффициентУскоренияБУ,
		|ОС.НазваниеДокументаМодернизацииРегл,
		|ОС.НакопленнаяАмортизацияБУ,
		|ОС.НачислятьАмортизациюБУ,
		|ОС.НомерДокументаМодернизацииРегл,
		|ОС.ОбъемПродукцииРаботБУ,
		|ОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
		|ОС.ПараметрВыработкиБУ,
		|ОС.ПервоначальнаяСтоимостьБУ,
		|ОС.СобытиеМодернизацииРегл,
		|ОС.СписатьНаЗатратыПриВводеРегл,
		|ОС.СпособНачисленияАмортизацииБУ,
		|ОС.СпособОтраженияРасходовПоАмортизацииБУ,
		|ОС.СпособПоступленияБУ,
		|ОС.СрокИспользованияДляВычисленияАмортизацииБУ,
		|ОС.СрокПолезногоИспользованияБУ,
		|ОС.СтоимостьДляВычисленияАмортизацииБУ,
		|ОС.СуммаПоследнейМодернизацииБУ,
		|ОС.СчетАмортизацииБУ,
		|ОС.СчетУчетаБУ";
		//,
		//|ОС.ДатаПринятияКУчетуРегл,
		//|ОС.СобытиеПринятияКУчетуРегл";
	
	мСтрокаРеквизитыНалУчета = "ОС.ТекущаяСтоимостьНУ,
		|ОС.АмортизацияДо2002НУ,
		|ОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ,
		|ОС.МетодНачисленияАмортизацииНУ,
		|ОС.НакопленнаяАмортизацияНУ,
		|ОС.НачислятьАмортизациюНУ,
		|ОС.НачислятьПоБазовойСтоимостиНУ,
		|ОС.ПервоначальнаяСтоимостьНУ,
		|ОС.СпециальныйКоэффициентНУ,
		|ОС.ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|ОС.СпособОтраженияРасходовПоАмортизацииНУ,
		|ОС.СрокПолезногоИспользованияНУ,
		|ОС.СтоимостьДо2002НУ,
		|ОС.СуммаНакопленнойАмортизацииНУ,
		|ОС.СуммаПоследнейМодернизацииНУ,
		|ОС.СчетАмортизацииНУ,
		|ОС.СчетУчетаНУ,
		|ОС.ФактическийСрокИспользованияНУ,
		|ОС.ТекущаяСтоимостьПР,
		|ОС.НакопленнаяАмортизацияПР";
	
	мСтрокаРеквизитыУСН = "
		|ОС.ДатаПриобретенияУСН,
		|ОС.ПервоначальнаяСтоимостьУСН,
		|ОС.СрокПолезногоИспользованияУСН,
		|ОС.СуммаНачисленнойАмортизацииУСН,
		|ОС.ПорядокВключенияСтоимостиВСоставРасходовУСН";
		
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура вывода сообщения об ошибке
//
Процедура ОшибкаПроведенияПоСтроке( СтрокаОС, ТекстСообщения, ТипУчета, Отказ, Заголовок)
	
	Отказ = Истина;
	
	Если СокрЛП(ТипУчета) = "(УУ)" ИЛИ НЕ ЗначениеЗаполнено(СтрокаОС.ИнвентарныйНомерРегл) Тогда
		НачалоСообщения = "- строка № " + СтрокаОС.НомерСтроки + ", код ОС <" + СтрокаОС.ОсновноеСредство.Код + "> : ";
	Иначе
		НачалоСообщения = "- строка № " + СтрокаОС.НомерСтроки + ", инв. номер ОС <" + СтрокаОС.ИнвентарныйНомерРегл + "> : ";
	КонецЕсли;
	
	ТекстСообщения = НачалоСообщения + ТекстСообщения;
	
	ОкончаниеСлужебногоСообщения = Найти( ТекстСообщения, "}:");
	Если ОкончаниеСлужебногоСообщения > 0 И Лев(ТекстСообщения, 1) = "{" Тогда
		ТекстСообщения = СокрЛП( Сред( ТекстСообщения, ОкончаниеСлужебногоСообщения + 2));
	КонецЕсли;
	
	#Если Клиент Тогда
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(Заголовок);
			Заголовок = "";
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		
	#КонецЕсли

КонецПроцедуры // ОшибкаПроведенияПоСтроке()

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураРеквизитовШапки = Новый Структура;
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		СтруктураРеквизитовШапки.Вставить("Подразделение");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
	 
		СтруктураРеквизитовШапки.Вставить("Организация");
		СтруктураРеквизитовШапки.Вставить("ПодразделениеОрганизации");
		
	КонецЕсли;
					
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураРеквизитовШапки, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧасти(РежимПроведения, ТабОС, СтруктураШапкиДокумента, Отказ, Заголовок);

	ОбязательныеРеквизиты = "ОсновноеСредство";

	// Обязательные реквизиты для отражения в УУ.
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты 
		                      + ", ДатаПринятияКУчету,
		                        |СобытиеПринятияКУчету,
		                        |ПервоначальнаяСтоимость,
		                        |";
							  
	КонецЕсли;
															
															
	// Обязательные реквизиты для отражения в регл. учете.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН	Тогда
	 
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ДатаПринятияКУчетуРегл, СобытиеПринятияКУчетуРегл";
	 
	КонецЕсли;
	
	// Обязательные реквизиты для отражения в БУ.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", , ПервоначальнаяСтоимостьБУ";
							  
	КонецЕсли;

	// Обязательные реквизиты для отражения в НУ.
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		//Бирюков 
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ПорядокВключенияСтоимостиВСоставРасходовНУ";
//		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ПорядокВключенияСтоимостиВСоставРасходовНУ, ПервоначальнаяСтоимостьНУ";
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
							  
	КонецЕсли;
	
	// Проверка заполнения обязательных реквизитов.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);

	Если НЕ Отказ Тогда
	
		Для Каждого СтрокаОС Из ТабОС Цикл
			ПроверкаПоСтроке(СтрокаОС, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть проведен!");
	КонецЕсли;

	мФлагФормированияДвиженийПоВыработке = Истина;
	
КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

//Проверка заполнения реквизитов
//
Функция ПроверкаПоСтроке(СтрокаОС, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ОбязательныеРеквизиты = "";
	
	// Обязательные реквизиты для отражения в УУ.
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		Если НЕ СтрокаОС.СписатьНаЗатратыПриВводе Тогда
			
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ТекущаяСтоимость";
			
			Если СтрокаОС.НачислятьАмортизацию Тогда
				
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СпособНачисленияАмортизации, СпособОтраженияРасходовПоАмортизации";
			
				Если СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
				 ИЛИ СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользования";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользования, КоэффициентУскорения";

				ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ПараметрВыработки, ОбъемПродукцииРабот";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", КоэффициентАмортизации";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", КоэффициентАмортизации, ПараметрВыработки, ОбъемПродукцииРабот";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользования";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	// Обязательные реквизиты для отражения в БУ.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если НЕ СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ТекущаяСтоимостьБУ, СчетУчетаБУ";
			
			Если СтрокаОС.НачислятьАмортизациюБУ Тогда
				
				ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СпособНачисленияАмортизацииБУ, СпособОтраженияРасходовПоАмортизацииБУ, СчетАмортизацииБУ";
			
				Если СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
				 ИЛИ СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользованияБУ";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СрокПолезногоИспользованияБУ, КоэффициентУскоренияБУ";

				ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ПараметрВыработкиБУ, ОбъемПродукцииРаботБУ";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", КоэффициентАмортизацииБУ";
					
				ИначеЕсли СтрокаОС.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
					
					ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", КоэффициентАмортизацииБУ, ПараметрВыработкиБУ, ОбъемПродукцииРаботБУ";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обязательные реквизиты для отражения в НУ.
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", СчетУчетаНУ, ПорядокВключенияСтоимостиВСоставРасходовНУ";
			
		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
				
			//Бирюков
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", МетодНачисленияАмортизацииНУ, 
			                                                |СпособОтраженияРасходовПоАмортизацииНУ,
			                                                |СчетАмортизацииНУ";
			//ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", МетодНачисленияАмортизацииНУ, 
			//												|СпособОтраженияРасходовПоАмортизацииНУ,
			//												|СчетАмортизацииНУ,
			//												|СрокПолезногоИспользованияНУ";
			//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
															
			Если СтрокаОС.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный тогда

				НачислениеПоБазовой = Новый Структура("ДатаПереходаКРасчетуПоБазовойСтоимостиНУ,
				                                      |СуммаНакопленнойАмортизацииНУ,
				                                      |ФактическийСрокИспользованияНУ");
													  
				Для Каждого ТекРеквизит Из НачислениеПоБазовой Цикл
														  
					Если ЗначениеЗаполнено(СтрокаОС[ТекРеквизит.Ключ]) ИЛИ СтрокаОС.НачислятьПоБазовойСтоимостиНУ Тогда
						
						ОбязательныеРеквизиты = ОбязательныеРеквизиты + ", ДатаПереходаКРасчетуПоБазовойСтоимостиНУ, 
						                                                |СуммаНакопленнойАмортизацииНУ,
						                                                |ФактическийСрокИспользованияНУ,
						                                                |НачислятьПоБазовойСтоимостиНУ";
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Конецесли;
					
		КонецЕсли;
		
	КонецЕсли;

	//Бирюков
	// Проверка текущей стоимости по НУ
	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете
	//   И НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)
	//   И СтрокаОС.ТекущаяСтоимостьНУ + СтрокаОС.ТекущаяСтоимостьПР = 0 Тогда
	//   
	//	СтрокаСообщения = "(НУ) Не заполнена текущая стоимость основного средства (НУ или ПР)";
	//	ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения, "(НУ)", Отказ, Заголовок);
	//		
	//КонецЕсли;
	
	РеквизитыДляПроверки = Новый Структура(ОбязательныеРеквизиты);
	
	// Цикл по проверяемым полям
	Для каждого КлючЗначение Из РеквизитыДляПроверки Цикл
		
		Значение = СтрокаОС[КлючЗначение.Ключ];
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			
			ПредставлениеРеквизита = Ссылка.Метаданные().ТабличныеЧасти.ОС.Реквизиты[КлючЗначение.Ключ].Представление();
			
			ВидУчета = ""; 
			
			Если Прав(КлючЗначение.Ключ, 2) = "БУ" тогда
				ВидУчета = "(БУ) ";
			ИначеЕсли Прав(КлючЗначение.Ключ, 2) = "НУ" тогда
				ВидУчета = "(НУ) ";
			ИначеЕсли Прав(КлючЗначение.Ключ, 3) = "УСН" тогда
				ВидУчета = "(УСН) ";
			КонецЕсли;
			
			СтрокаСообщения = ВидУчета+ "не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения, ВидУчета, Отказ, Заголовок);
			
		ИначеЕсли КлючЗначение.Ключ = "НачислятьПоБазовойСтоимостиНУ" И НЕ СтрокаОС.НачислятьПоБазовойСтоимостиНУ Тогда
			
			//Логическая проверка
			СтрокаСообщения ="(НУ) не установлен признак начисления по базовой стоимости (заполнены некоторые реквизиты для начисления по базовой)";
			
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения, "(НУ)", Отказ, Заголовок);
			
		КонецЕсли;

	КонецЦикла;

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
		
		//Запрет некоторых движений если ОС списано при принятии
		Если СтрокаОС.СписатьНаЗатратыПриВводеРегл И СтрокаОС.НачислятьАмортизациюБУ Тогда
			СтрокаСообщения = "(БУ) по ОС не может начисляться амортизация, если оно списано на затраты при принятии к учету";
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения , "(БУ)", Отказ, Заголовок);
		КонецЕсли;

		Если СтрокаОС.СписатьНаЗатратыПриВводеРегл И ЗначениеЗаполнено(СтрокаОС.НакопленнаяАмортизацияБУ) Тогда
			СтрокаСообщения = "(БУ) накопленная амортизация по ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения , "(БУ)", Отказ, Заголовок);
		КонецЕсли;
		
		Если СтрокаОС.СписатьНаЗатратыПриВводеРегл И ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) Тогда
			СтрокаСообщения = "(БУ) текущая стоимость ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения , "(БУ)", Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;
	
	Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда 
		
		//Запрет некоторых движений если ОС списано при принятии
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтрокаОС.НачислятьАмортизациюНУ Тогда
			СтрокаСообщения = "(НУ) по ОС не может начисляться амортизация, если оно списано на затраты при принятии к учету";
			ОшибкаПроведенияПоСтроке(СтрокаОС, СтрокаСообщения , "(НУ)", Отказ, Заголовок);
		КонецЕсли;

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И ЗначениеЗаполнено(СтрокаОС.НакопленнаяАмортизацияНУ) Тогда
			СтрокаСообщения = "(НУ) накопленная амортизация по  ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения , "(НУ)", Отказ, Заголовок);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьНУ) Тогда
			СтрокаСообщения = "(НУ) текущая стоимость ОС должна быть равна 0, если оно списано на затраты при принятии к учету
			|(проводка не будет сформирована)";
			ОшибкаПроведенияПоСтроке(СтрокаОС,СтрокаСообщения , "(НУ)", Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА ПО РЕГИСТРАМ

// Процедура формирования движений по регистру СтоимостьОС
//
Процедура ДвижениеПоРегиструАмортизацияУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СтоимостьОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводе Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			Если НЕ ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимость) тогда
				НоваяСтрока.Стоимость        = СтрокаОС.ПервоначальнаяСтоимость;
			Иначе
				НоваяСтрока.Стоимость        = СтрокаОС.ТекущаяСтоимость;
			КонецЕсли;
			НоваяСтрока.Амортизация      = СтрокаОС.НакопленнаяАмортизация;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияУпр()

// Процедура формирования движений по регистру Амортизация бух.
//
Процедура ДвижениеПоРегиструАмортизацияБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СтоимостьОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		//Бирюков
		Если СтрокаОС.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			Если НЕ ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) тогда
				СтоимостьБУ  = СтрокаОС.ПервоначальнаяСтоимостьБУ;
			Иначе
				СтоимостьБУ  = СтрокаОС.ТекущаяСтоимостьБУ;
			КонецЕсли;

			НоваяСтрока.Стоимость        = ?( НЕ ЗначениеЗаполнено( СтрокаОС.СчетУчетаБУ),       0, СтоимостьБУ);
			НоваяСтрока.Амортизация      = ?( НЕ ЗначениеЗаполнено( СтрокаОС.СчетАмортизацииБУ), 0, СтрокаОС.НакопленнаяАмортизацияБУ);
			
		КонецЕсли;
			
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияБух()

// Процедура формирования движений по регистру Амортизация нал.
//
Процедура ДвижениеПоРегиструАмортизацияНал( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СтоимостьОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			Если НЕ ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьНУ) тогда
				СтоимостьНУ  = СтрокаОС.ПервоначальнаяСтоимостьНУ;
			Иначе
				СтоимостьНУ  = СтрокаОС.ТекущаяСтоимостьНУ;
			КонецЕсли;
			
			НоваяСтрока.Стоимость        = ?( НЕ ЗначениеЗаполнено( СтрокаОС.СчетУчетаНУ),       0, СтоимостьНУ);
			НоваяСтрока.Амортизация      = ?( НЕ ЗначениеЗаполнено( СтрокаОС.СчетАмортизацииНУ), 0, СтрокаОС.НакопленнаяАмортизацияНУ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ВыработкаОС
//
Процедура ДвижениеПоРегиструВыработкаОС( ТабОС, СтруктураШапкиДокумента, Заголовок)
	
	Если мФлагФормированияДвиженийПоВыработке Тогда
		
		НаборДвижений   = Движения.ВыработкаОС;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		Для Каждого СтрокаОС Из ТабОС Цикл
			
			Если СтрокаОС.ВыработкаКоличество > 0
			   И СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
			   И ЗначениеЗаполнено(СтрокаОС.ПараметрВыработки) Тогда
				
				НоваяСтрока = ТаблицаДвижений.Добавить();
				НоваяСтрока.Период            = Дата;
				НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
				НоваяСтрока.ПараметрВыработки = СтрокаОС.ПараметрВыработки;
				НоваяСтрока.Количество        = СтрокаОС.ВыработкаКоличество;
				
			КонецЕсли;
			
			Если СтрокаОС.ВыработкаКоличествоБУ > 0
			   И СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
			   И ЗначениеЗаполнено(СтрокаОС.ПараметрВыработкиБУ) Тогда
			   
				Если СтрокаОС.ПараметрВыработкиБУ <> СтрокаОС.ПараметрВыработки тогда 				
				   
					НоваяСтрока = ТаблицаДвижений.Добавить();
					НоваяСтрока.Период            = Дата;
					НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
					НоваяСтрока.ПараметрВыработки = СтрокаОС.ПараметрВыработкиБУ;
					НоваяСтрока.Количество        = СтрокаОС.ВыработкаКоличествоБУ;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		НаборДвижений.ДобавитьДвижение();
	
	КонецЕсли;
	
КонецПроцедуры // ДвижениеПоРегиструВыработкаОС()

// Процедура формирования движений по регистру НоменклатураОС
//
Процедура ДвижениеПоРегиструНоменклатураОС( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НоменклатураОсновныхСредств;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.Номенклатура) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Номенклатура     = СтрокаОС.Номенклатура;
			НоваяСтрока.Характеристика   = СтрокаОС.ХарактеристикаНоменклатуры;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНоменклатураОС()

// Процедура формирования движений по регистру Состав ОС
//
Процедура ДвижениеПоРегиструСоставОС( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СоставОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.РодительскоеОС) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ВСоставе         = СтрокаОС.РодительскоеОС;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСоставОС()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ОССписанныеНаЗатраты.
//
Процедура ДвижениеПоРегиструОССписанныеНаЗатратыУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ОССписанныеНаЗатраты;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.СписатьНаЗатратыПриВводе Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Стоимость        = СтрокаОС.ПервоначальнаяСтоимость;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструОССписанныеНаЗатратыУпр()

// Процедура формирования движений по регистру ОССписанныеНаЗатраты бух.
//
Процедура ДвижениеПоРегиструОССписанныеНаЗатратыБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ОССписанныеНаЗатратыОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		//Бирюков
		Если СтрокаОС.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		Если СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Стоимость        = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // ДвижениеПоРегиструОССписанныеНаЗатратыБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ПервоначальныеСведенияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчету;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимость;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизации;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработки;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСУпр()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС бух.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		//Бирюков
		Если СтрокаОС.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимостьБУ;
		НоваяСтрока.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомерРегл;
		НоваяСтрока.СпособПоступления           = СтрокаОС.СпособПоступленияБУ;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизацииБУ;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработкиБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСБух()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС нал.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                                   = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Активность                               = Истина;
		НоваяСтрока.Организация                              = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство                         = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьНУ                = СтрокаОС.ПервоначальнаяСтоимостьНУ;
		НоваяСтрока.МетодНачисленияАмортизации               = СтрокаОС.МетодНачисленияАмортизацииНУ;
		НоваяСтрока.СтоимостьДо2002                          = СтрокаОС.СтоимостьДо2002НУ;
		НоваяСтрока.АмортизацияДо2002                        = СтрокаОС.АмортизацияДо2002НУ;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходов = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСНал()

// Процедура формирования движений по регистру Первоначальные сведеняи об ОС нал.
//
Процедура ДвижениеПоРегиструПервоначальныеСведенияОСУСН( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		Если СтрокаОС.СписатьНаЗатратыПриВводеРегл тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                      = СтрокаОС.ДатаПринятияКУчетуРегл;
		НоваяСтрока.Организация                 = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьУСН  = СтрокаОС.ПервоначальнаяСтоимостьУСН;
		НоваяСтрока.СрокПолезногоИспользования  = СтрокаОС.СрокПолезногоИспользованияУСН;
		НоваяСтрока.СуммаНачисленнойАмортизации = СтрокаОС.СуммаНачисленнойАмортизацииУСН;
		НоваяСтрока.ДатаПриобретения            = СтрокаОС.ДатаПриобретенияУСН;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовУСН;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	НаборДвижений.УстановитьАктивность(Истина);
	
КонецПроцедуры // ДвижениеПоРегиструПервоначальныеСведенияОСУСН()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Местонахождение ОС.
//
Процедура ДвижениеПоРегиструМестонахождениеОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.МестонахождениеОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.Активность       = Истина;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛ;
		НоваяСтрока.Местонахождение  = СтруктураШапкиДокумента.Подразделение;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСУпр()

// Процедура формирования движений по регистру Местонахождение ОС бух.
//
Процедура ДвижениеПоРегиструМестонахождениеОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.МестонахождениеОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		//Бирюков
		Если СтрокаОС.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период           = Дата;
		НоваяСтрока.Активность                  = Истина;
		НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛРегл;
		НоваяСтрока.Местонахождение  = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструМестонахождениеОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Графики амортизации ОС.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ГрафикиАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.ГрафикАмортизации) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Активность        = Истина;
			НоваяСтрока.Период            = Дата;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизации;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСУпр()

// Процедура формирования движений по регистру Графики амортизации ОС бух.
//
Процедура ДвижениеПоРегиструГрафикиАмортизацииОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено( СтрокаОС.ГрафикАмортизацииБУ) Тогда
			//Бирюков
			Если СтрокаОС.СчетУчетаБУ.Забалансовый Тогда
				Продолжить;
			КонецЕсли;
			//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		   
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = Дата;
			НоваяСтрока.Активность        = Истина;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизацииБУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструГрафикиАмортизацииОСБух()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Начисление амортизации.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НачислениеАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                             = Дата;
		НоваяСтрока.Активность                         = Истина;
		НоваяСтрока.ОсновноеСредство                   = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию               = СтрокаОС.НачислятьАмортизацию;
		НоваяСтрока.НачислятьАмортизациюВТекущемМесяце = Ложь;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииУпр()

// Процедура формирования движений по регистру Начисление амортизации бух.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		//Бирюков
		Если СтрокаОС.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период               = Дата;
		НоваяСтрока.Активность           = Истина;
		НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииБух()

// Процедура формирования движений по регистру Начисление амортизации нал.
//
Процедура ДвижениеПоРегиструНачислениеАмортизацииНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период               = Дата;
			НоваяСтрока.Активность           = Истина;
			НоваяСтрока.Организация          = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструНачислениеАмортизацииНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру ПараметрыАмортизации ОС.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.ПараметрыАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводе Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период =  ?( НЕ ЗначениеЗаполнено( СтрокаОС.ДатаПоследнейМодернизации),
										СтрокаОС.ДатаПринятияКУчету, 
										?( СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаПоследнейМодернизации,
											Мин( СтрокаОС.ДатаПринятияКУчету + 2, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
											СтрокаОС.ДатаПоследнейМодернизации));
			
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			НоваяСтрока.СрокПолезногоИспользования        = СтрокаОС.СрокПолезногоИспользования;
			НоваяСтрока.ОбъемПродукцииРабот               = СтрокаОС.ОбъемПродукцииРабот;
			НоваяСтрока.КоэффициентАмортизации            = СтрокаОС.КоэффициентАмортизации;
			НоваяСтрока.КоэффициентУскорения              = СтрокаОС.КоэффициентУскорения;
			
			НоваяСтрока.ПрименитьВТекущемМесяце = Ложь;
			
			Если НЕ ЗначениеЗаполнено( СтрокаОС.СрокИспользованияДляВычисленияАмортизации) Тогда
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокПолезногоИспользования;;
			Иначе
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизации;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено( СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРабот;
			Иначе
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено( СтрокаОС.СтоимостьДляВычисленияАмортизации) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимость) тогда
					Стоимость  = СтрокаОС.ПервоначальнаяСтоимость;
				Иначе
					Стоимость  = СтрокаОС.ТекущаяСтоимость;
				КонецЕсли;
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = Стоимость;
			Иначе
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизации;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииУпр()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		//Бирюков
		Если СтрокаОС.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период =  ?( НЕ ЗначениеЗаполнено( СтрокаОС.ДатаПоследнейМодернизацииРегл),
										СтрокаОС.ДатаПринятияКУчетуРегл, 
										?( СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
											Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 2, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
											СтрокаОС.ДатаПоследнейМодернизацииРегл));
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			
			НоваяСтрока.СрокПолезногоИспользования = СтрокаОС.СрокПолезногоИспользованияБУ;
			НоваяСтрока.ОбъемПродукцииРабот        = СтрокаОС.ОбъемПродукцииРаботБУ;
			НоваяСтрока.КоэффициентАмортизации     = СтрокаОС.КоэффициентАмортизацииБУ;
			НоваяСтрока.КоэффициентУскорения       = СтрокаОС.КоэффициентУскоренияБУ;
			
			Если НЕ ЗначениеЗаполнено( СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ) Тогда
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокПолезногоИспользованияБУ;;
			Иначе
				НоваяСтрока.СрокИспользованияДляВычисленияАмортизации   = СтрокаОС.СрокИспользованияДляВычисленияАмортизацииБУ;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено( СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ) Тогда
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботБУ;
			Иначе
				НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено( СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) тогда
					Стоимость  = СтрокаОС.ПервоначальнаяСтоимостьБУ;
				Иначе
					Стоимость  = СтрокаОС.ТекущаяСтоимостьБУ;
				КонецЕсли;
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = Стоимость;
			Иначе
				НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизацииБУ;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииБух()

// Процедура формирования движений по регистру ПараметрыАмортизации ОС нал.
//
Процедура ДвижениеПоРегиструПараметрыАмортизацииНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.ПараметрыАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период =  ?( НЕ ЗначениеЗаполнено( СтрокаОС.ДатаПоследнейМодернизацииРегл),
									СтрокаОС.ДатаПринятияКУчетуРегл, 
									?( СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
										Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 2, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
										СтрокаОС.ДатаПоследнейМодернизацииРегл));
		НоваяСтрока.Активность                 = Истина;
		НоваяСтрока.Организация                = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.ОсновноеСредство           = СтрокаОС.ОсновноеСредство;
		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету тогда
			НоваяСтрока.СрокПолезногоИспользования = 0;
		Иначе
			НоваяСтрока.СрокПолезногоИспользования = СтрокаОС.СрокПолезногоИспользованияНУ;
		КонецЕсли;
		Если СтрокаОС.СтоимостьДляВычисленияАмортизацииПР = 0 И СтрокаОС.АмортизацияДо2002НУ = 0 Тогда
			НоваяСтрока.ПРДляВычисленияАмортизации           = СтрокаОС.ТекущаяСтоимостьПР;
		Иначе
			НоваяСтрока.ПРДляВычисленияАмортизации           = СтрокаОС.СтоимостьДляВычисленияАмортизацииПР;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструПараметрыАмортизацииНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру СобытияОС.
//
Процедура ДвижениеПоРегиструСобытияОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СобытияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчету;
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Событие		      = СтрокаОС.СобытиеПринятияКУчету;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаПринятияКУчету;
		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаПринятияКУчету;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатацию) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаВводаВЭксплуатацию,
												Мин( СтрокаОС.ДатаПринятияКУчету + 1, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
												СтрокаОС.ДатаВводаВЭксплуатацию);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеВводВЭксплуатацию;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаВводаВЭксплуатацию;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаВводаВЭксплуатацию;
			
		КонецЕсли;
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводе
		   И ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизации) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаПоследнейМодернизации,
												Мин( СтрокаОС.ДатаПринятияКУчету + 2, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
												СтрокаОС.ДатаПоследнейМодернизации);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеМодернизации;
			НоваяСтрока.СуммаЗатрат       = СтрокаОС.СуммаПоследнейМодернизации;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаМодернизации;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаМодернизации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСобытияОСУпр()

// Процедура формирования движений по регистру  СобытияОСорганизаций.
//
Процедура ДвижениеПоРегиструСобытияОСБух( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СобытияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		//Бирюков
		Если СтрокаОС.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период            = СтрокаОС.ДатаПринятияКУчетуРегл;
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Событие           = СтрокаОС.СобытиеПринятияКУчетуРегл;
		НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаПринятияКУчетуРегл;
		НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаПринятияКУчетуРегл;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаВводаВЭксплуатациюРегл,
												Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 1, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
												СтрокаОС.ДатаВводаВЭксплуатациюРегл);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеВводВЭксплуатациюРегл;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаВводаВЭксплуатациюРегл;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаВводаВЭксплуатациюРегл;
			
		КонецЕсли;

		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл
		   И ЗначениеЗаполнено(СтрокаОС.ДатаПоследнейМодернизацииРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период            = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаПоследнейМодернизацииРегл,
												Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 2, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
												СтрокаОС.ДатаПоследнейМодернизацииРегл);
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Событие           = СтрокаОС.СобытиеМодернизацииРегл;
			НоваяСтрока.СуммаЗатратБУ     = СтрокаОС.СуммаПоследнейМодернизацииБУ;
			НоваяСтрока.СуммаЗатратНУ     = СтрокаОС.СуммаПоследнейМодернизацииНУ;
			НоваяСтрока.НомерДокумента    = СтрокаОС.НомерДокументаМодернизацииРегл;
			НоваяСтрока.НазваниеДокумента = СтрокаОС.НазваниеДокументаМодернизацииРегл;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);

КонецПроцедуры // ДвижениеПоРегиструСобытияОСБух()

////////////////////////////////////////////////////////////////////////////////


// Процедура формирования движений по регистру СостоянияОС.
//
Процедура ДвижениеПоРегиструСостоянияОСУпр( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СостоянияОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ПринятоКУчету;
		НоваяСтрока.ДатаСостояния	  = СтрокаОС.ДатаПринятияКУчету;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатацию) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
			НоваяСтрока.ДатаСостояния	  = ?(СтрокаОС.ДатаПринятияКУчету = СтрокаОС.ДатаВводаВЭксплуатацию,
												Мин( СтрокаОС.ДатаПринятияКУчету + 1, КонецДня(СтрокаОС.ДатаПринятияКУчету)),
												СтрокаОС.ДатаВводаВЭксплуатацию);
		КонецЕсли;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСостоянияОСУпр()

// Процедура формирования движений по регистру СостоянияОСОрганизаций.
//
Процедура ДвижениеПоРегиструСостоянияОСБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СостоянияОСОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		//Бирюков
		Если СтрокаОС.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
 		НоваяСтрока.Активность        = Истина;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ПринятоКУчету;
		НоваяСтрока.ДатаСостояния	  = СтрокаОС.ДатаПринятияКУчетуРегл;
		
		Если ЗначениеЗаполнено(СтрокаОС.ДатаВводаВЭксплуатациюРегл) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
	 		НоваяСтрока.Активность        = Истина;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация       = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.Состояние	      = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
			НоваяСтрока.ДатаСостояния	  = ?(СтрокаОС.ДатаПринятияКУчетуРегл = СтрокаОС.ДатаВводаВЭксплуатациюРегл,
												Мин( СтрокаОС.ДатаПринятияКУчетуРегл + 1, КонецДня(СтрокаОС.ДатаПринятияКУчетуРегл)),
												СтрокаОС.ДатаВводаВЭксплуатациюРегл);
		КонецЕсли;
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСостоянияОСУпр()

////////////////////////////////////////////////////////////////////////////////


// Процедура формирования движений по регистру Сопособы отражения расходов по амортизации ОС.
//
Процедура ДвижениеПоРегиструСпособыОтраженияРасходовУпр( ТабОС, СтруктураШапкиДокумента);

	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизации) Тогда
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизации;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияРасходовУпр()

// Процедура формирования движений по регистру Сопособы отражения расходов по амортизации ОС бух.
//
Процедура ДвижениеПоРегиструСпособыОтраженияРасходовБух( ТабОС, СтруктураШапкиДокумента);

	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		//Бирюков
		Если СтрокаОС.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		Если ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ) Тогда
		   
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизацииБУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияРасходовБух()

// Процедура формирования движений по регистру Сопособы отражения расходов по амортизации ОС нал.
//
Процедура ДвижениеПоРегиструСпособыОтраженияРасходовНал( ТабОС, СтруктураШапкиДокумента);

	НаборДвижений   = Движения.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
		   
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период           = Дата;
			НоваяСтрока.Активность       = Истина;
			НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация      = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособОтраженияРасходовПоАмортизацииНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСпособыОтраженияРасходовНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру Счета учета ОС бух.
//
Процедура ДвижениеПоРегиструСчетаУчетаОСБух( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.СчетаБухгалтерскогоУчетаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		НоваяСтрока.Период                    = СтрокаОС.ДатаПринятияКУчетуРегл;
 		НоваяСтрока.Активность                = Истина;
		НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация               = СтруктураШапкиДокумента.Организация;
		НоваяСтрока.СчетУчета                 = СтрокаОС.СчетУчетаБУ;
		НоваяСтрока.СчетНачисленияАмортизации = СтрокаОС.СчетАмортизацииБУ;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструСчетаУчетаОСБух()

// Процедура формирования движений по регистру Счета учета ОС нал.
//
Процедура ДвижениеПоРегиструСчетаУчетаОСНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.СчетаНалоговогоУчетаОС;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период                    = СтрокаОС.ДатаПринятияКУчетуРегл;
	 		НоваяСтрока.Активность                = Истина;
			НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация               = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СчетУчета                 = СтрокаОС.СчетУчетаНУ;
			НоваяСтрока.СчетНачисленияАмортизации = СтрокаОС.СчетАмортизацииНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);

КонецПроцедуры // ДвижениеПоРегиструСчетаУчетаОСНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистру начисление амортизации по базовой стоимости нал.
//
Процедура ДвижениеПоРегиструАмортизацияПоБазСтоимостиНал( ТабОС, СтруктураШапкиДокумента)
	
	НаборДвижений   = Движения.НачислениеАмортизацииОСПоБазовойСтоимостиНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если СтрокаОС.НачислятьПоБазовойСтоимостиНУ
		   И НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)
		   И ЗначениеЗаполнено( СтрокаОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ)
		   И    СтрокаОС.МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период                    = СтрокаОС.ДатаПереходаКРасчетуПоБазовойСтоимостиНУ;
	 		НоваяСтрока.Активность                = Истина;
			НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация               = СтруктураШапкиДокумента.Организация;
			
			НоваяСтрока.ПризнакНачисленияПоБазовойСтоимости   = СтрокаОС.НачислятьПоБазовойСтоимостиНУ;
			НоваяСтрока.СуммаНакопленнойАмортизации           = СтрокаОС.СуммаНакопленнойАмортизацииНУ;
			НоваяСтрока.ФактическийСрокполезногоИспользования = СтрокаОС.ФактическийСрокИспользованияНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ДвижениеПоРегиструАмортизацияПоБазСтоимостиНал()

// Процедура формирования движений по регистру Спец. коэф. амортизации ОС нал.
//
Процедура ДвижениеПоРегиструСпецКоэффициентНал( ТабОС, СтруктураШапкиДокумента)
		
	НаборДвижений   = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)
		   И СтрокаОС.СпециальныйКоэффициентНУ > 0 Тогда
			
			НоваяСтрока = ТаблицаДвижений.Добавить();
			НоваяСтрока.Период                 = СтруктураШапкиДокумента.Дата;
	 		НоваяСтрока.Активность             = Истина;
			НоваяСтрока.ОсновноеСредство       = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация            = СтруктураШапкиДокумента.Организация;
			НоваяСтрока.СпециальныйКоэффициент = СтрокаОС.СпециальныйКоэффициентНУ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборДвижений.Загрузить(ТаблицаДвижений);

КонецПроцедуры // ДвижениеПоРегиструСпецКоэффициентНал()

////////////////////////////////////////////////////////////////////////////////

// Процедура формирование проводок.
//
Процедура ФормированиеПроводокБух( ТабОС, СтруктураШапкиДокумента)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		//Бирюков если Дт забалансовый - возможно это лизинг, проводку сделаем позже. 
		Если СтрокаОС.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		Если Не СтрокаОС.СписатьНаЗатратыПриВводеРегл Тогда
			
			Если ЗначениеЗаполнено(СтрокаОС.СчетУчетаБУ) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаОС.ТекущаяСтоимостьБУ) Тогда
					СуммаПроводки = СтрокаОС.ПервоначальнаяСтоимостьБУ;
				Иначе
					СуммаПроводки = СтрокаОС.ТекущаяСтоимостьБУ;
				КонецЕсли;
				
				Если НЕ (СуммаПроводки = 0) Тогда
				
					// Ввод балансовой стоимости ОС.
					Проводка = Операция.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Ввод остаток по ОС (баланс. стоимость)";
					
					Проводка.Сумма       = СуммаПроводки;
					
					Проводка.СчетДт = СтрокаОС.СчетУчетаБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
					
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено( СтрокаОС.СчетАмортизацииБУ) Тогда
			   
			   СуммаПроводки = СтрокаОС.НакопленнаяАмортизацияБУ;
			   
			   Если НЕ (СуммаПроводки = 0) Тогда
			   
					// Ввод начисленной амортизации.
					Проводка = Операция.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Ввод остаток по ОС (начисл. амортизация)";
					Проводка.Сумма       = СтрокаОС.НакопленнаяАмортизацияБУ;
					
					Проводка.СчетКт = СтрокаОС.СчетАмортизацииБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
					
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Бирюков
	СоздатьДвиженияПоЛизингу(Операция)
	//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
КонецПроцедуры // ФормированиеПроводокБух

// Процедура формирование проводок нал.
//
Процедура ФормированиеПроводокНал( ТабОС, СтруктураШапкиДокумента)
	
	Операция = Движения.Налоговый;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету) Тогда
		   
            Если ЗначениеЗаполнено(СтрокаОС.СчетУчетаНУ) Тогда

				СуммаПроводки = СтрокаОС.ТекущаяСтоимостьНУ;
				
				Если НЕ (СуммаПроводки = 0) Тогда
				
					// Ввод балансовой стоимости ОС.
					Проводка = Операция.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Ввод остаток по ОС (баланс. стоимость)";
					
					Проводка.Сумма       = СуммаПроводки;
					Проводка.СчетДт      = СтрокаОС.СчетУчетаНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОС.СчетАмортизацииНУ) Тогда
			   
			   СуммаПроводки = СтрокаОС.НакопленнаяАмортизацияНУ;
			   
			   Если НЕ (СуммаПроводки = 0) Тогда
				
					// Ввод начисленной амортизации.
					Проводка = Операция.Добавить();
					Проводка.Период      = Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Ввод остаток по ОС (начисл. амортизация)";
					Проводка.Сумма       = СтрокаОС.НакопленнаяАмортизацияНУ;
					Проводка.СчетКт      = СтрокаОС.СчетАмортизацииНУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ФормированиеПроводокНал

Процедура ФормированиеПроводокПоРазницам( ТабОС, СтруктураШапкиДокумента)
	
	ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Ложь);
	Если НЕ ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) 
		ИЛИ НЕ ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18 Тогда
		
		Возврат;
	КонецЕсли; 
	
	Операция = Движения.Налоговый;
	
	Для Каждого СтрокаОС Из ТабОС Цикл
			//Бирюков
			//СуммаРазницы = СтрокаОС.ТекущаяСтоимостьНУ + СтрокаОС.ТекущаяСтоимостьПР;
			//Если СуммаРазницы = 0 Тогда
			//	Продолжить
			//КонецЕсли;
			////%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		   ТекущаяСтоимостьПР = СтрокаОС.ТекущаяСтоимостьПР;
		   ТекущаяСтоимостьВР = СтрокаОС.ТекущаяСтоимостьБУ - СтрокаОС.ТекущаяСтоимостьНУ - СтрокаОС.ТекущаяСтоимостьПР;
		   
            Если ТекущаяСтоимостьПР <> 0 Тогда

				Проводка = Операция.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Ввод остаток по ОС (ПР)";
				Проводка.Сумма       = ТекущаяСтоимостьПР;
				Проводка.СчетДт      = СтрокаОС.СчетУчетаНУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				
			КонецЕсли;
			
            Если ТекущаяСтоимостьВР <> 0 Тогда

				Проводка = Операция.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Ввод остаток по ОС (ВР)";
				Проводка.Сумма       = ТекущаяСтоимостьВР;
				Проводка.СчетДт      = СтрокаОС.СчетУчетаНУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
				
			КонецЕсли;
			
		   НакопленнаяАмортизацияПР = СтрокаОС.НакопленнаяАмортизацияПР;
		   НакопленнаяАмортизацияВР = СтрокаОС.НакопленнаяАмортизацияБУ - СтрокаОС.НакопленнаяАмортизацияНУ - СтрокаОС.НакопленнаяАмортизацияПР;
			
            Если НакопленнаяАмортизацияПР <> 0 Тогда
				
				Проводка = Операция.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Ввод остаток по ОС (ПР по начисл. амортизация)";
				Проводка.Сумма       = НакопленнаяАмортизацияПР;
				Проводка.СчетКт      = СтрокаОС.СчетАмортизацииНУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				
			КонецЕсли;
			
            Если НакопленнаяАмортизацияВР <> 0 Тогда
				
				Проводка = Операция.Добавить();
				Проводка.Период      = Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Ввод остаток по ОС (ВР по начисл. амортизация)";
				Проводка.Сумма       = НакопленнаяАмортизацияВР;
				Проводка.СчетКт      = СтрокаОС.СчетАмортизацииНУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
				Проводка.ВидУчетаКт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
				
			КонецЕсли;
			
		
	КонецЦикла;
	
КонецПроцедуры // ФормированиеПроводокПоРазницам

////////////////////////////////////////////////////////////////////////////////

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрам( ТабОС, СтруктураШапкиДокумента, Заголовок)
	
	// Движение по регистрам общим для упр. и регл. учета
	ДвижениеПоРегиструВыработкаОС( ТабОС, СтруктураШапкиДокумента, Заголовок);
	
	// Движение по упр. регистрам
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ДвижениеПоРегиструНоменклатураОС( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСоставОС      ( ТабОС, СтруктураШапкиДокумента);
		
		ДвижениеПоРегиструАмортизацияУпр             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструОССписанныеНаЗатратыУпр    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПервоначальныеСведенияОСУпр( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструМестонахождениеОСУпр       ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструГрафикиАмортизацииОСУпр    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструНачислениеАмортизацииУпр   ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПараметрыАмортизацииУпр    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСобытияОСУпр               ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСостоянияОСУпр             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСпособыОтраженияРасходовУпр( ТабОС, СтруктураШапкиДокумента);
	КонецЕсли;
	
	// Движение по регл. регистрам
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	 
		ДвижениеПоРегиструСобытияОСБух   (ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСостоянияОСБух (ТабОС, СтруктураШапкиДокумента);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ДвижениеПоРегиструАмортизацияБух             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструОССписанныеНаЗатратыБух    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПервоначальныеСведенияОСБух( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструМестонахождениеОСБух       ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструГрафикиАмортизацииОСБух    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструНачислениеАмортизацииБух   ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПараметрыАмортизацииБух    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСпособыОтраженияРасходовБух( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСчетаУчетаОСБух            ( ТабОС, СтруктураШапкиДокумента);
		
		ФормированиеПроводокБух(ТабОС, СтруктураШапкиДокумента);
		
	КонецЕсли;
			
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
		ДвижениеПоРегиструАмортизацияНал              ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПервоначальныеСведенияОСНал ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструНачислениеАмортизацииНал    ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструПараметрыАмортизацииНал     ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСпособыОтраженияРасходовНал ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСчетаУчетаОСНал             ( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструАмортизацияПоБазСтоимостиНал( ТабОС, СтруктураШапкиДокумента);
		ДвижениеПоРегиструСпецКоэффициентНал          ( ТабОС, СтруктураШапкиДокумента);
			
		ФормированиеПроводокНал(ТабОС, СтруктураШапкиДокумента);
		ФормированиеПроводокПоРазницам(ТабОС, СтруктураШапкиДокумента);
			
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда

		ДвижениеПоРегиструПервоначальныеСведенияОСУСН( ТабОС, СтруктураШапкиДокумента);
			
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ,РежимПроведения)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок, Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТабОС = ОС.Выгрузить();
	
	// Проверим правильность заполнения документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабЧасти(РежимПроведения, ТабОС, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Для Каждого СтрокаОС Из ТабОС Цикл
		//Бирюков
		Если СтрокаОС.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		
		УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьПринятияКУчетуОС(СтрокаОС.ОсновноеСредство, СтруктураШапкиДокумента.Дата, Отказ);
		УправлениеВнеоборотнымиАктивами.ПроверитьВозможностьПринятияКУчетуОС(СтрокаОС.ОсновноеСредство, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(ТабОС, СтруктураШапкиДокумента, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

//Бирюков перенес из док-та ПоступлениеТоваров
Процедура СоздатьДвиженияПоЛизингу(ПроводкиБУ)
	//Если не ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПоступлениеОСПоЛизингу Тогда
	//  	возврат;
	// КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводОстатковОС.ОсновноеСредство КАК ОС,
		|	ВводОстатковОС.НазваниеДокументаВводаВЭксплуатацию КАК Контрагент,
		|	ВводОстатковОС.НазваниеДокументаПринятияКУчету КАК Договор,
		|	ВводОстатковОС.МОЛРегл,
		|	ВводОстатковОС.ДатаПринятияКУчетуРегл,
		|	ВводОстатковОС.ТекущаяСтоимостьБУ КАК Сумма
		|ИЗ
		|	Документ.ВводНачальныхОстатковОС.ОС КАК ВводОстатковОС
		|ГДЕ
		|	ВводОстатковОС.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОсновноеСредство";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	МестонахождениеОСОрганизаций = Движения.МестонахождениеОСБухгалтерскийУчет;
	ПрГ_ОСПоЛизингу		 = Движения.ПРГ_ОСВЛизенге;
	//начало изменений БП 10 
	СостоянияОСЛизинг    = Движения.СостоянияОСЛизинг;
	//конец изменений БП 10 
	//ПринятоКУчету 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если НЕ ВыборкаДетальныеЗаписи.ОС.ДС_ВЛизинге Тогда 
			Продолжить
		КонецЕсли;	
		
		///проводки
		Проводка   = ПроводкиБУ.Добавить();
		
		Проводка.Период       = Дата;
		Проводка.Организация  = Организация;
		Проводка.Содержание   = "Ввод остатков по лизинговым ОС";
		Проводка.сумма        = ВыборкаДетальныеЗаписи.сумма;
		Проводка.СчетДт 	  = ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства;
		
		Контрагент = Справочники.Контрагенты.НайтиПоКоду(СокрЛП(ВыборкаДетальныеЗаписи.Контрагент));
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты"	,Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства"		,ВыборкаДетальныеЗаписи.ОС);
		//////МестонахождениеОСБухгалтерскийУчет		
		Движение = МестонахождениеОСОрганизаций.Добавить();
	    
		Движение.Период           = Дата;
		Движение.ОсновноеСредство = ВыборкаДетальныеЗаписи.ОС;
		Движение.Организация      = Организация;
		Движение.МОЛ              = ВыборкаДетальныеЗаписи.МОЛРегл;
		Движение.Местонахождение  = ПодразделениеОрганизации;
		
		/////Лизинг
		
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоКоду(СокрЛП(ВыборкаДетальныеЗаписи.Договор),,,Контрагент);
		Движение = ПрГ_ОСПоЛизингу.Добавить();
	    Движение.Период           = Дата;
		Движение.ОС = ВыборкаДетальныеЗаписи.ОС;
		//начало изменений БП 10
		Движение.Организация		    = Организация;
		//конец изменений БП 10
		Движение.Стоимость              = ВыборкаДетальныеЗаписи.Сумма;
		Движение.Контрагент  			= Контрагент;
		Движение.Договор  				= ДоговорКонтрагента;
		
	    //начало изменений БП 10 
		Движение =   СостоянияОСЛизинг.Добавить();
		Движение.Период			 = Дата;
		Движение.ОсновноеСредство= ВыборкаДетальныеЗаписи.ОС;
		Движение.Организация 	 = Организация;
		Движение.Состояние	 	 = Перечисления.СостоянияОС.ПринятоКУчету;
		Движение.ДатаСостояния   = ВыборкаДетальныеЗаписи.ДатаПринятияКУчетуРегл;
	    //конец изменений БП 10 
	КонецЦикла;

КонецПроцедуры
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мТабличноеПоле = Неопределено;

