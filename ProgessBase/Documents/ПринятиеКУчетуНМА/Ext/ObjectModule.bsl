Перем мДатаПерехода;
Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми

Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем УчетнаяПолитикаРегл;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регламентированного учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета =  "НачислятьАмортизациюБУ,
								|ОбъемПродукцииРаботДляВычисленияАмортизации,
								|СпособНачисленияАмортизацииБУ,
								|СрокПолезногоИспользованияБУ,
								|СтоимостьБУ,
								|СчетНачисленияАмортизацииБУ,
								|СчетУчетаБУ,
								|СчетУчетаБУВнеоборотногоАктива
								|";

	мСтрокаРеквизитыНалУчета =  "НачислятьАмортизациюНУ,
								|СпециальныйКоэффициентНУ,
								|СпособНачисленияАмортизацииНУ,
								|СрокПолезногоИспользованияНУ,
								|СтоимостьНУ,
								|СчетНачисленияАмортизацииНУ,
								|СчетУчетаНУ,
								|СчетУчетаНУВнеоборотногоАктива
								|";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Дополняет список обязательных параметров шапки
// регл. параметрами
Процедура ДополнитьОбязательныеРеквизитыШапкиРегл(Реквизиты,СтруктураШапкиДокумента)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "Организация, СтоимостьБУ,СчетУчетаБУВнеоборотногоАктива,СчетУчетаБУ";

	Если СтруктураШапкиДокумента.НачислятьАмортизациюБУ Тогда
		Реквизиты = Реквизиты + ",СпособНачисленияАмортизацииБУ,СрокПолезногоИспользованияБУ";

		Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
			Реквизиты = Реквизиты + ",СчетНачисленияАмортизацииБУ";
		КонецЕсли;

		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ) Тогда

			Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
				Реквизиты = Реквизиты + ",ОбъемПродукцииРаботДляВычисленияАмортизации";
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
				Реквизиты = Реквизиты + ",КоэффициентБУ";
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Реквизиты = Реквизиты + ",СчетУчетаНУ";  //СчетУчетаНУВнеоборотногоАктива
	
		Если СтруктураШапкиДокумента.НачислятьАмортизациюНУ Тогда
			Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив 
			   И Год(Дата) < 2009 Тогда
				Реквизиты = Реквизиты + ",СпособНачисленияАмортизацииНУ";
			КонецЕсли;
			
			Реквизиты = Реквизиты + ",СрокПолезногоИспользованияНУ";
			
			Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
				Реквизиты = Реквизиты + ",СпециальныйКоэффициентНУ,СчетНачисленияАмортизацииНУ";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(РежимПроведения,СтруктураШапкиДокумента, Отказ, Заголовок)

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Укажем, что надо проверить:
	ОбязательныеРеквизитыШапки = "ВидОбъектаУчета";
	ОбязательныеРеквизитыШапки = ОбязательныеРеквизитыШапки + ?(ПустаяСтрока(ОбязательныеРеквизитыШапки), "", ", ") + "НематериальныйАктив";

	ДополнитьОбязательныеРеквизитыШапкиРегл(ОбязательныеРеквизитыШапки,СтруктураШапкиДокумента);

	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, ОбязательныеРеквизитыШапки, СтруктураШапкиДокумента,, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	//Корректировка отображаемых сообщений для НИОКР
	СтруктураОбязательныхПолей = Новый Структура(ОбязательныеРеквизитыШапки);
	Если ВидОбъектаУчета <> Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		СтруктураОбязательныхПолей.Вставить("НематериальныйАктив", "Не заполнено значение реквизита ""НИОКР""!");
		Если СтруктураШапкиДокумента.НачислятьАмортизациюБУ Тогда
			СтруктураОбязательныхПолей.Вставить("СпособНачисленияАмортизацииБУ", "Не заполнено значение реквизита ""Способ списания расходов (БУ)""!");
			СтруктураОбязательныхПолей.Вставить("СрокПолезногоИспользованияБУ", "Не заполнено значение реквизита ""Срок списания (БУ), мес.""!");
		КонецЕсли;
	КонецЕсли;//Корректировка отображаемых сообщений для НИОКР
	
	// Проверим реквизиты со сложным порядком проверки
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		Если ЗначениеЗаполнено(УчетнаяПолитикаРегл) И УчетнаяПолитикаРегл.ПоддержкаПБУ18 Тогда
			Если (СтруктураШапкиДокумента.СтоимостьНУ + СтруктураШапкиДокумента.СтоимостьПР + СтруктураШапкиДокумента.СтоимостьВР) = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не заполнены значения реквизитов ""Первоначальная стоимость (НУ)"", ""Первоначальная стоимость (ПР)"", ""Первоначальная стоимость (ВР)""!", Отказ, Заголовок);
			Конецесли;
		Иначе
			СтруктураОбязательныхПолей.Вставить("СтоимостьНУ");
		КонецЕсли;
		
		Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
			СтруктураОбязательныхПолей.Вставить("ПорядокСписанияНИОКРНаРасходыНУ", "Не заполнено значение реквизита ""Порядок списания НИОКР на расходы""!");
		КонецЕсли;
		
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  Таблица			        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаНМА(ТаблицаПоСтрокамНМА, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (СтруктураШапкиДокумента.Дата < мДатаПерехода) Тогда
		ТаблицаПоСтрокамНМА.Очистить();
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ДатаПереходаНаУСН = УчетнаяПолитикаРегл.ДатаПереходаНаУСН;
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДатаОплаты, СуммаОплаты");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаНМА", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для Каждого СтрокаНМА Из ТаблицаПоСтрокамНМА Цикл
		
		ДатаПриобретенияНМА = СтруктураШапкиДокумента.ДатаПриобретения;
		
		Если (ДатаПриобретенияНМА < мДатаПерехода) И 
			(ДатаПереходаНаУСН < ДатаПриобретенияНМА) И 
			(СтрокаНМА.ДатаОплаты < мДатаПерехода) Тогда
			
			ТекстСообщения = "По "+ Строка(НематериальныйАктив) + " оплата от "+СтрокаНМА.ДатаОплаты+" не зарегистрирована. Расходы по данной оплате принимаются в порядке, действовавшем до 01.01.2006 г.";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
			СтрокаНМА.СуммаОплаты = 0;
		КонецЕсли;
				
	КонецЦикла;	
		
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, Истина);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики

// Процедура формирования движений регистров
//
Процедура ФормированиеДвижений(СтруктураШапкиДокумента, ТаблицаОплатНМА, ПараметрыСписанияНИОКР, ТаблицаЗатрат, Отказ, Заголовок)
	Если ТиповаяФорма тогда
	Если ТаблицаЗатрат <> Неопределено Тогда
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			СтруктураШапкиДокумента,
			ТаблицаЗатрат);
	КонецЕсли;
	
	ФормированиеДвиженийРегл(СтруктураШапкиДокумента, ТаблицаОплатНМА, ПараметрыСписанияНИОКР, Отказ, Заголовок);
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, НематериальныйАктив, Отказ);
	Иначе
		
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПринятиеКУчетуНМАНМА.НематериальныйАктив,
			|	ПринятиеКУчетуНМАНМА.СчетУчетаБУ,
			|	ПринятиеКУчетуНМАНМА.СпособОтраженияРасходов,
			|	ПринятиеКУчетуНМАНМА.СтоимостьБУ,
			|	ПринятиеКУчетуНМАНМА.СпособПоступления,
			|	ПринятиеКУчетуНМАНМА.НачислятьАмортизациюБУ,
			|	ПринятиеКУчетуНМАНМА.СрокПолезногоИспользованияБУ,
			|	ПринятиеКУчетуНМАНМА.СпособНачисленияАмортизацииБУ,
			|	ПринятиеКУчетуНМАНМА.СчетНачисленияАмортизацииБУ,
			|	ПринятиеКУчетуНМАНМА.СчетУчетаНУ,
			|	ПринятиеКУчетуНМАНМА.СтоимостьНУ,
			|	ПринятиеКУчетуНМАНМА.СтоимостьПР,
			|	ПринятиеКУчетуНМАНМА.СтоимостьВР,
			|	ПринятиеКУчетуНМАНМА.НачислятьАмортизациюНУ,
			|	ПринятиеКУчетуНМАНМА.СрокПолезногоИспользованияНУ,
			|	ПринятиеКУчетуНМАНМА.СчетНачисленияАмортизацииНУ,
			|	ПринятиеКУчетуНМАНМА.СпециальныйКоэффициентНУ,
			|	ПринятиеКУчетуНМАНМА.СчетУчетаБУВнеоборотногоАктива,
			|	ПринятиеКУчетуНМАНМА.СчетУчетаНУВнеоборотногоАктива
			|ИЗ
			|	Документ.ПринятиеКУчетуНМА.НМА КАК ПринятиеКУчетуНМАНМА
			|ГДЕ
			|	ПринятиеКУчетуНМАНМА.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выгрузить();
			
			для каждого стр из ВыборкаДетальныеЗаписи цикл			
				для каждого стрКолонки из ВыборкаДетальныеЗаписи.Колонки цикл
					СтруктураШапкиДокумента[стрКолонки.Имя]=стр[стрКолонки.Имя];
				КонецЦикла;	
				ФормированиеДвиженийРегл(СтруктураШапкиДокумента, ТаблицаОплатНМА, ПараметрыСписанияНИОКР, Отказ, Заголовок);
				ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, НематериальныйАктив, Отказ);

		    КонецЦикла;
		
	Конецесли;
КонецПроцедуры // ФормированиеДвижений()

// Процедура формирования движений регл. регистров
//
Процедура ФормированиеДвиженийРегл(СтруктураШапкиДокумента, ТаблицаОплатНМА, ПараметрыСписанияНИОКР, Отказ, Заголовок)

	// Движения по регистру Состояние
	Движение = Движения.СостоянияНМАОрганизаций.Добавить();
	Движение.Период              = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация         = СтруктураШапкиДокумента.Организация;
	Движение.Состояние           = Перечисления.ВидыСостоянийНМА.ПринятКУчету;
	Движения.СостоянияНМАОрганизаций.Записать();
	
	Проводки = Движения.Хозрасчетный;
	Проводка = Проводки.Добавить();
	Проводка.Период       = СтруктураШапкиДокумента.Дата;
	Проводка.Организация  = СтруктураШапкиДокумента.Организация;

	Если СтруктураШапкиДокумента.НематериальныйАктив.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив тогда
		Проводка.Содержание = "Принят к учету НМА";
	Иначе
		Проводка.Содержание = "Приняты к учету расходы на НИОКР";
	КонецЕсли;
	
	Проводка.НомерЖурнала = "НА";
	Проводка.Сумма        = СтруктураШапкиДокумента.СтоимостьБУ;
	Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаБУ;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
    БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР", СтруктураШапкиДокумента.НематериальныйАктив);
	
	Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаБУВнеоборотногоАктива;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР", СтруктураШапкиДокумента.НематериальныйАктив);

	// Движения по регистру СтоимостьНМАБухгалтерскийУчет
	Движение = Движения.СтоимостьНМАБухгалтерскийУчет.Добавить();
	Движение.Период                  = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив     = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация             = СтруктураШапкиДокумента.Организация;
	Движение.Амортизация             = 0;
	Движение.Стоимость               = СтруктураШапкиДокумента.СтоимостьБУ;
	
	// Движения по регистру СпособыОтраженияРасходов
	Движение = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Добавить();
	Движение.Период                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.СпособОтраженияРасходов     = СтруктураШапкиДокумента.СпособОтраженияРасходов;

	// Движения по регистру ПервоначальныеСведения
	Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
	Движение.Период                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.НачислятьАмортизацию        = СтруктураШапкиДокумента.НачислятьАмортизациюБУ;
	Движение.ПервоначальнаяСтоимость     = СтруктураШапкиДокумента.СтоимостьБУ;
	Движение.СпособНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииБУ;
	Движение.СпособПоступления           = СтруктураШапкиДокумента.СпособПоступления;
	Движение.СрокПолезногоИспользования  = СтруктураШапкиДокумента.СрокПолезногоИспользованияБУ;
 	Движение.Коэффициент                 = СтруктураШапкиДокумента.КоэффициентБУ;

	Если СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции тогда
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = СтруктураШапкиДокумента.ОбъемПродукцииРаботДляВычисленияАмортизации;
	КонецЕсли;

	// Движения по регистру СчетаБухгалтерскогоУчета
	Движение = Движения.СчетаБухгалтерскогоУчетаНМА.Добавить();
	Движение.Период                      = СтруктураШапкиДокумента.Дата;
	Движение.НематериальныйАктив         = СтруктураШапкиДокумента.НематериальныйАктив;
	Движение.Организация                 = СтруктураШапкиДокумента.Организация;
	Движение.СчетУчета                   = СтруктураШапкиДокумента.СчетУчетаБУ;
	Движение.СчетНачисленияАмортизации   = СтруктураШапкиДокумента.СчетНачисленияАмортизацииБУ;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		ПроводкиНУ = Движения.Налоговый;
		
		СуммаПРКорректировка = ПараметрыСписанияНИОКР.Итог("СуммаПРКорректировка");
		СуммаВРКорректировка = ПараметрыСписанияНИОКР.Итог("СуммаВРКорректировка");
		
		Если (СтруктураШапкиДокумента.СтоимостьНУ - СуммаПРКорректировка - СуммаВРКорректировка) <> 0 Тогда
		 	Проводка = ПроводкиНУ.Добавить();

			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Если НематериальныйАктив.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив тогда
				Проводка.Содержание              = "Принят к учету НМА";
			Иначе
				Проводка.Содержание              = "Приняты к учету расходы на НИОКР";
			КонецЕсли;
			Проводка.НомерЖурнала = "НА";
			Проводка.Сумма        = СтруктураШапкиДокумента.СтоимостьНУ - СуммаПРКорректировка - СуммаВРКорректировка;

			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР", СтруктураШапкиДокумента.НематериальныйАктив);
			Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива) Тогда
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
			
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР", СтруктураШапкиДокумента.НематериальныйАктив);
			КонецЕсли; 
			
		КонецЕсли;

		Если (СтруктураШапкиДокумента.СтоимостьПР + СуммаПРКорректировка) <> 0 И УчетнаяПолитикаРегл.ПоддержкаПБУ18 Тогда
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Если НематериальныйАктив.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив тогда
				Проводка.Содержание = "Принят к учету НМА";
			Иначе
				Проводка.Содержание = "Приняты к учету расходы на НИОКР";
			КонецЕсли;
			Проводка.НомерЖурнала = "НА";
			Проводка.Сумма        = СтруктураШапкиДокумента.СтоимостьПР + СуммаПРКорректировка;
			
			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР", СтруктураШапкиДокумента.НематериальныйАктив);
			Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива) Тогда
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР", СтруктураШапкиДокумента.НематериальныйАктив);
			КонецЕсли; 
			Проводка.ВидУчетаДт    = Перечисления.ВидыУчетаПоПБУ18.ПР;
			Проводка.ВидУчетаКт    = Перечисления.ВидыУчетаПоПБУ18.ПР;
			
		КонецЕсли;
		
		Если (СтруктураШапкиДокумента.СтоимостьВР + СуммаВРКорректировка) <> 0 И УчетнаяПолитикаРегл.ПоддержкаПБУ18 Тогда
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Если НематериальныйАктив.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив тогда
				Проводка.Содержание = "Принят к учету НМА";
			Иначе
				Проводка.Содержание = "Приняты к учету расходы на НИОКР";
			КонецЕсли;
			Проводка.НомерЖурнала = "НА";
			Проводка.Сумма        = СтруктураШапкиДокумента.СтоимостьВР + СуммаВРКорректировка;
			
			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР", СтруктураШапкиДокумента.НематериальныйАктив);
			Если ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива) Тогда
				Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтруктураШапкиДокумента.НематериальныйАктив);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР", СтруктураШапкиДокумента.НематериальныйАктив);
			КонецЕсли;
			
			Проводка.ВидУчетаДт    = Перечисления.ВидыУчетаПоПБУ18.ВР;
			Проводка.ВидУчетаКт    = Перечисления.ВидыУчетаПоПБУ18.ВР;
		КонецЕсли;
		
		Для Каждого СтрокаПараметрыСписания ИЗ ПараметрыСписанияНИОКР Цикл
			Если СтрокаПараметрыСписания.СуммаНал = 0 И СтрокаПараметрыСписания.ПостояннаяРазница = 0 И СтрокаПараметрыСписания.ВременнаяРазница = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаПараметрыСписания.СуммаНал <> 0 Тогда
				НоваяПроводкаНУ   = ПроводкиНУ.Добавить();
				НоваяПроводкаНУ.Содержание   = "Приняты к учету расходы на НИОКР";
				НоваяПроводкаНУ.НомерЖурнала = "НА";
				НоваяПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
				НоваяПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
				
				РазницаДтКт = 0;
				Если СтрокаПараметрыСписания.СуммаНал <> 0 И СтрокаПараметрыСписания.СуммаНУКт <> 0 Тогда
					РазницаДтКт = СтрокаПараметрыСписания.СуммаНал - СтрокаПараметрыСписания.СуммаНУКт;
				КонецЕсли;
				
				НоваяПроводкаНУ.СчетДт     = СтрокаПараметрыСписания.СчетЗатратНУ;
				УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(
					НоваяПроводкаНУ, СтрокаПараметрыСписания, СтруктураШапкиДокумента, "Налоговый",, Истина);
				НоваяПроводкаНУ.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
				НоваяПроводкаНУ.Сумма      = СтрокаПараметрыСписания.СуммаНал;
				
				НоваяПроводкаНУ.СчетКт     = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
				БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетКт, НоваяПроводкаНУ.СубконтоКт, "РасходыНаНИОКР", СтруктураШапкиДокумента.НематериальныйАктив);
				НоваяПроводкаНУ.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
				Если СтрокаПараметрыСписания.ПостояннаяРазница <> 0 Тогда
					НоваяПроводкаНУ   = ПроводкиНУ.Добавить();
					НоваяПроводкаНУ.Содержание   = "Приняты к учету расходы на НИОКР";
					НоваяПроводкаНУ.НомерЖурнала = "НА";
					НоваяПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
					НоваяПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					НоваяПроводкаНУ.СчетДт     = СтрокаПараметрыСписания.СчетЗатратНУ;
					УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(
						НоваяПроводкаНУ, СтрокаПараметрыСписания, СтруктураШапкиДокумента, "Налоговый",, Истина);
					НоваяПроводкаНУ.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					НоваяПроводкаНУ.Сумма      = СтрокаПараметрыСписания.ПостояннаяРазница;
					
					НоваяПроводкаНУ.СчетКт     = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетКт, НоваяПроводкаНУ.СубконтоКт, "РасходыНаНИОКР", СтруктураШапкиДокумента.НематериальныйАктив);
					
					Если СтрокаПараметрыСписания.СуммаПРКт <> 0 Тогда
						НоваяПроводкаНУ.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					ИначеЕсли СтрокаПараметрыСписания.ПостояннаяРазница = -РазницаДтКт Тогда
						НоваяПроводкаНУ.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					Иначе
						Сообщить("Ошибка проводок ПР", СтатусСообщения.Важное);
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаПараметрыСписания.ВременнаяРазница <> 0 Тогда
					НоваяПроводкаНУ   = ПроводкиНУ.Добавить();
					НоваяПроводкаНУ.Содержание   = "Приняты к учету расходы на НИОКР";
					НоваяПроводкаНУ.НомерЖурнала = "НА";
					НоваяПроводкаНУ.Период       = СтруктураШапкиДокумента.Дата;
					НоваяПроводкаНУ.Организация  = СтруктураШапкиДокумента.Организация;
					
					НоваяПроводкаНУ.СчетДт     = СтрокаПараметрыСписания.СчетЗатратНУ;
					УправлениеЗатратами.ЗаполнитьСчетИСубконтоУчетаЗатрат(
						НоваяПроводкаНУ, СтрокаПараметрыСписания, СтруктураШапкиДокумента, "Налоговый",, Истина);
					НоваяПроводкаНУ.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;
					НоваяПроводкаНУ.Сумма      = СтрокаПараметрыСписания.ВременнаяРазница;
					
					НоваяПроводкаНУ.СчетКт     = СтруктураШапкиДокумента.СчетУчетаНУВнеоборотногоАктива;
					БухгалтерскийУчет.УстановитьСубконто(НоваяПроводкаНУ.СчетКт, НоваяПроводкаНУ.СубконтоКт, "РасходыНаНИОКР", СтруктураШапкиДокумента.НематериальныйАктив);
					НоваяПроводкаНУ.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ВР;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Движения по регистру СтоимостьНМАНалоговыйУчет
		Движение = Движения.СтоимостьНМАНалоговыйУчет.Добавить();
		Движение.Период                  = СтруктураШапкиДокумента.Дата;
		Движение.НематериальныйАктив     = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация             = СтруктураШапкиДокумента.Организация;
		Движение.Амортизация             = 0;
		Движение.Стоимость               = СтруктураШапкиДокумента.СтоимостьНУ;
		
		Движение = Движения.СпособыОтраженияРасходовПоАмортизацииНМАНалоговыйУчет.Добавить();
		Движение.НематериальныйАктив     = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация             = СтруктураШапкиДокумента.Организация;
		Движение.Период                  = СтруктураШапкиДокумента.Дата;
		Движение.СпособОтраженияРасходов = СтруктураШапкиДокумента.СпособОтраженияРасходов;

		Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
		Движение.НематериальныйАктив        = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация                = СтруктураШапкиДокумента.Организация;
		Движение.Период                     = СтруктураШапкиДокумента.Дата;
		Если не СтруктураШапкиДокумента.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
			Движение.МетодНачисленияАмортизации = СтруктураШапкиДокумента.СпособНачисленияАмортизацииНУ;
		КонецЕсли;
		Движение.НачислятьАмортизацию       = СтруктураШапкиДокумента.НачислятьАмортизациюНУ;
		Движение.ПервоначальнаяСтоимостьНУ  = СтруктураШапкиДокумента.СтоимостьНУ;
		Движение.СрокПолезногоИспользования = СтруктураШапкиДокумента.СрокПолезногоИспользованияНУ;

		Движение = Движения.СчетаНалоговогоУчетаНМА.Добавить();
		Движение.НематериальныйАктив     = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация             = СтруктураШапкиДокумента.Организация;
		Движение.Период                  = СтруктураШапкиДокумента.Дата;
		Движение.СчетУчета				 = СтруктураШапкиДокумента.СчетУчетаНУ;
		Движение.СчетНачисленияАмортизации = СтруктураШапкиДокумента.СчетНачисленияАмортизацииНУ;

		Движение = Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
		Движение.НематериальныйАктив     = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация             = СтруктураШапкиДокумента.Организация;
		Движение.Период                  = СтруктураШапкиДокумента.Дата;
		Движение.СпециальныйКоэффициент  = СтруктураШапкиДокумента.СпециальныйКоэффициентНУ;

	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		// Движения по регистру ПервоначальныеСведенияНМАНалоговыйУчетУСН
		
		ПервоначальныеСведения = Движения.ПервоначальныеСведенияНМАНалоговыйУчетУСН;
		Движение = ПервоначальныеСведения.Добавить();
		
		Движение.Период                     = СтруктураШапкиДокумента.Дата;
		Движение.НематериальныйАктив        = СтруктураШапкиДокумента.НематериальныйАктив;
		Движение.Организация                = СтруктураШапкиДокумента.Организация;
		Движение.ПервоначальнаяСтоимостьУСН = СтруктураШапкиДокумента.СтоимостьУСН;
		Движение.СрокПолезногоИспользования = СтруктураШапкиДокумента.СрокПолезногоИспользованияУСН;
		Движение.ДатаПриобретения           = СтруктураШапкиДокумента.ДатаПриобретения;
		Движение.СуммаНачисленнойАмортизации= СтруктураШапкиДокумента.СуммаНачисленнойАмортизацииУСН;
		Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтруктураШапкиДокумента.ПорядокВключенияСтоимостиВСоставРасходовУСН;
		
		РегОплаты = Движения.ОплатыНМАДляУСН;

		Для Каждого Запись Из ТаблицаОплатНМА Цикл
			
			Если Запись.СуммаОплаты <> 0 Тогда
				
				СтрокаОплаты  = РегОплаты.Добавить();
				
				СтрокаОплаты.Период           = Запись.ДатаОплаты;
				СтрокаОплаты.Организация      = СтруктураШапкиДокумента.Организация;
				СтрокаОплаты.НематериальныйАктив = СтруктураШапкиДокумента.НематериальныйАктив;
				СтрокаОплаты.ДатаОплаты       = Запись.ДатаОплаты;
				СтрокаОплаты.СуммаОплаты      = Запись.СуммаОплаты;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ФормированиеДвиженийРегл()

// Процедура вызывается из тела процедуры ФормированиеДвижений
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, НематериальныйАктив, Отказ)
	
	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	// Разблокируется весь НДС, заблокированный до момента принятия к учету. 
	// Остатков быть не может, так как один объект НМА нельзя принять к учету частично.
	КоэффициентРаспределения = 1;
	
	ДатаЗаписи = СтруктураШапкиДокумента.Дата;
	
	//Разблокируем полностью вычет
	//отразим погашение события ОжидаетсяВводВЭксплуатацию
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СтруктураШапкиДокумента.НематериальныйАктив);
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ИзменениеТекущегоСостоянияНДС(СтруктураШапкиДокумента,
														МассивОбъектов,
														Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию,
														Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию,
														ДатаЗаписи, КоэффициентРаспределения, Отказ);
		
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Функция ЗаполнитьАналитикуПоТипу(СтрокаПараметрыСписания, СпособОтраженияРасходов, НомерСубконто)
	
	Субконто = СпособОтраженияРасходов["Субконто" + НомерСубконто];
	Если ТипЗнч(Субконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		СтрокаПараметрыСписания["СубконтоНУ" + НомерСубконто] = СпособОтраженияРасходов.СтатьяЗатрат;
		СтрокаПараметрыСписания.ВидРасходовНУ                 = СпособОтраженияРасходов.СтатьяЗатрат.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		СтрокаПараметрыСписания["СубконтоНУ" + НомерСубконто] = СпособОтраженияРасходов.НоменклатурнаяГруппа;
	ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		СтрокаПараметрыСписания["СубконтоНУ" + НомерСубконто] = СпособОтраженияРасходов.ПодразделениеОрганизации;
	Иначе
		СтрокаПараметрыСписания["СубконтоНУ" + НомерСубконто] = Субконто;
	КонецЕсли;
	
КонецФункции

// Функция формирует счет учета затрат, аналитику затрат
// и суммы затрат для НУ,ПР,ВР для начального случая 
Функция ПолучитьСтруктуруТаблицыСписанияНИОКР(СтруктураШапкиДокумента)
	
	ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	
	ПараметрыСписания = Новый ТаблицаЗначений;
	ПараметрыСписания.Колонки.Добавить("СчетДт",                   Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ПараметрыСписания.Колонки.Добавить("СчетКт",                   Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ПараметрыСписания.Колонки.Добавить("СубконтоДт",               Новый ОписаниеТипов("СписокЗначений"));
	ПараметрыСписания.Колонки.Добавить("СчетЗатрат",               Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПараметрыСписания.Колонки.Добавить("СчетЗатратНУ",             Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ПараметрыСписания.Колонки.Добавить("СубконтоНУ1",              ОписаниеТиповСубконто);
	ПараметрыСписания.Колонки.Добавить("СубконтоНУ2",              ОписаниеТиповСубконто);
	ПараметрыСписания.Колонки.Добавить("СубконтоНУ3",              ОписаниеТиповСубконто);
	ПараметрыСписания.Колонки.Добавить("ВидРасходовНУ",            Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРасходовНУ"));
	ПараметрыСписания.Колонки.Добавить("СтатьяЗатрат",             Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ПараметрыСписания.Колонки.Добавить("НоменклатурнаяГруппа",     Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ПараметрыСписания.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ПараметрыСписания.Колонки.Добавить("ОбъектСтроительства",      Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства"));
	ПараметрыСписания.Колонки.Добавить("СпособСтроительства",      Новый ОписаниеТипов("ПеречислениеСсылка.СпособыСтроительства"));
	ПараметрыСписания.Колонки.Добавить("СтоимостьНУ",              ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ПараметрыСписания.Колонки.Добавить("СуммаНал",                 ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ПараметрыСписания.Колонки.Добавить("ПостояннаяРазница",        ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ПараметрыСписания.Колонки.Добавить("ВременнаяРазница",         ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ПараметрыСписания.Колонки.Добавить("СуммаНУКт",                ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ПараметрыСписания.Колонки.Добавить("СуммаПРКт",                ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ПараметрыСписания.Колонки.Добавить("СуммаВРКт",                ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ПараметрыСписания.Колонки.Добавить("СуммаПРКорректировка",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	ПараметрыСписания.Колонки.Добавить("СуммаВРКорректировка",     ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	
	Возврат ПараметрыСписания;
	
КонецФункции // ПолучитьСтруктуруТаблицыСписанияНИОКР

// Функция вызывается из тела процедуры ДвиженияПоРегистрамРегл для вида операции НИОКР и порядка списания "При принятии к учету"
// Формирует счет учета затрат, аналитику затрат и суммы затрат для НУ,ПР,ВР 
Функция ПолучитьПараметрыСписанияНИОКРПриПринятииКУчету(СтруктураШапкиДокумента, Отказ = Ложь)
	
	СтоимостьНал = СтруктураШапкиДокумента.СтоимостьНУ;
	ТекСпособОтраженияРасходов = СтруктураШапкиДокумента.СпособОтраженияРасходов;
	ПараметрыСписанияНИОКР = ПолучитьСтруктуруТаблицыСписанияНИОКР(СтруктураШапкиДокумента);
	
	Если ТекСпособОтраженияРасходов.Способы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'На закладке ""Расходы НИОКР"", указан способ отражения расходов, в котором нет записей, укажите эти данные'");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , ОбщегоНазначения.ПредставлениеДокументаПриПроведении(ЭтотОбъект));
		Отказ = Истина;
		Возврат ПараметрыСписанияНИОКР;
	КонецЕсли;
	
	Если СтоимостьНал = 0 Тогда
		Возврат ПараметрыСписанияНИОКР;
	КонецЕсли;
	
	Если ТекСпособОтраженияРасходов.Способы.Количество() = 1 Тогда
		СтрокаТекСпособОтраженияРасходов = ТекСпособОтраженияРасходов.Способы[0];
		Строка = ПараметрыСписанияНИОКР.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаТекСпособОтраженияРасходов);
		Строка.СчетДт = СтрокаТекСпособОтраженияРасходов.СчетЗатратНУ;
		Для НомерСубконто = 1 По 3 Цикл
			ЗаполнитьАналитикуПоТипу(Строка, СтрокаТекСпособОтраженияРасходов, НомерСубконто);
		КонецЦикла;
		
		Строка.ПодразделениеОрганизации = СтрокаТекСпособОтраженияРасходов.ПодразделениеОрганизации;
		Строка.СтоимостьНУ = СтоимостьНал;
	Иначе
		МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтоимостьНал, ТекСпособОтраженияРасходов.Способы.ВыгрузитьКолонку("Коэффициент"), 2);
		Для Каждого СтрокаТекСпособОтраженияРасходов Из ТекСпособОтраженияРасходов.Способы Цикл
			Строка = ПараметрыСписанияНИОКР.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтрокаТекСпособОтраженияРасходов);
			Строка.СчетДт = СтрокаТекСпособОтраженияРасходов.СчетЗатратНУ;
			Для НомерСубконто = 1 По 3 Цикл
				ЗаполнитьАналитикуПоТипу(Строка, СтрокаТекСпособОтраженияРасходов, НомерСубконто);
			КонецЦикла;
			
			Строка.ПодразделениеОрганизации = СтрокаТекСпособОтраженияРасходов.ПодразделениеОрганизации;
			Строка.СтоимостьНУ = ?(ЗначениеЗаполнено(МассивСумм), МассивСумм[СтрокаТекСпособОтраженияРасходов.НомерСтроки - 1], 0);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из ПараметрыСписанияНИОКР Цикл
		Для сч = 1 По 3 Цикл
			Строка.СубконтоДт.Вставить(сч - 1, Строка["СубконтоНУ" + сч], "СубконтоДт" + сч);
		КонецЦикла;
		
		ЭтоНепринимаемйРасход = НалоговыйУчет.ОпределитьНеПринимаемыеДоходыРасходы(Строка);
		Если ЭтоНепринимаемйРасход Тогда
			Строка.СуммаНал = 0;
			Строка.СуммаНУКт = Строка.СтоимостьНУ;
			Строка.ПостояннаяРазница = 0;
			Строка.СуммаПРКт = - Строка.СтоимостьНУ;
			Строка.ВременнаяРазница = 0;
			Строка.СуммаВРКт = 0;
			Строка.СуммаВРКорректировка = 0;
			Строка.СуммаПРКорректировка = Строка.СтоимостьНУ;
		Иначе
			Если Строка.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НИОКРПоПеречнюПравительстваРФ Тогда
				КоэффициентРасходов = 1.5;
			Иначе
				КоэффициентРасходов = 1;
			КонецЕсли;
			
			Строка.СуммаНал = Строка.СтоимостьНУ * КоэффициентРасходов;
			Строка.СуммаНУКт = Строка.СтоимостьНУ;
			Строка.ПостояннаяРазница = Строка.СтоимостьНУ * (1 - КоэффициентРасходов);
			Строка.СуммаПРКт = 0;
			Строка.ВременнаяРазница = - Строка.СтоимостьНУ;
			Строка.СуммаВРКт = - Строка.СтоимостьНУ;
			Строка.СуммаВРКорректировка = Строка.СтоимостьНУ;
			Строка.СуммаПРКорректировка = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыСписанияНИОКР;
	
КонецФункции

Функция СформироватьТаблицуЗатрат(ПараметрыСписания)
	
	// определим структуру выходной таблицы
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	ТаблицаЗатрат.Колонки.Добавить("СпособОтраженияРасходов", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	
	Для Каждого СтрокаПараметрыСписания ИЗ ПараметрыСписания Цикл
		Если СтрокаПараметрыСписания.СуммаНал <> 0 ИЛИ СтрокаПараметрыСписания.ПостояннаяРазница <> 0 ИЛИ СтрокаПараметрыСписания.ВременнаяРазница <> 0 Тогда
			СтрокаТаблицыЗатрат = ТаблицаЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗатрат, СтрокаПараметрыСписания);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗатрат.ЗаполнитьЗначения(Организация,             "Организация");
	ТаблицаЗатрат.ЗаполнитьЗначения(СпособОтраженияРасходов, "СпособОтраженияРасходов");
	ТаблицаЗатрат.ЗаполнитьЗначения(Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПрочихЗатратВПроизводство, "КодОперацииНЗП");
	
	Возврат ТаблицаЗатрат;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ,РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	// Проверим правильность заполнения шапки документа
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ в обязательном порядке должен отражаться в бухгалтерском учете!",Отказ, Заголовок);
	КонецЕсли; 
	
//	ПроверитьЗаполнениеШапки(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Оплата НМА".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("ДатаОплаты",  "ДатаОплаты");
	СтруктураПолей.Вставить("СуммаОплаты", "СуммаОплаты");
	
	РезультатЗапросаПоСтрокам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаНМА", СтруктураПолей);
	ТаблицаОплатНМА = РезультатЗапросаПоСтрокам.Выгрузить();
	
	ПроверитьЗаполнениеТабличнойЧастиОплатаНМА(ТаблицаОплатНМА, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ЭтоНМА = (НематериальныйАктив.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив);
	Если Не ЭтоНМА И ПорядокСписанияНИОКРНаРасходыНУ = Перечисления.ПорядокСписанияНИОКРНУ.ПриПринятииКУчету Тогда
		ПараметрыСписанияНИОКР = ПолучитьПараметрыСписанияНИОКРПриПринятииКУчету(СтруктураШапкиДокумента, Отказ);
		
		// Способ отражения расходов заполнен 
		Если НЕ Отказ Тогда
			ТаблицаЗатрат = СформироватьТаблицуЗатрат(ПараметрыСписанияНИОКР);
		КонецЕсли;
	Иначе
		ПараметрыСписанияНИОКР = ПолучитьСтруктуруТаблицыСписанияНИОКР(СтруктураШапкиДокумента);
		ТаблицаЗатрат          = Неопределено;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		// Формирование движений регистров, бухгалтерских и налоговых проводок.
		ФормированиеДвижений(СтруктураШапкиДокумента, ТаблицаОплатНМА, ПараметрыСписанияНИОКР, ТаблицаЗатрат, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	СрокПолезногоИспользованияНУ = ?(НачислятьАмортизациюНУ, СрокПолезногоИспользованияНУ, 0);
	
КонецПроцедуры // ПередЗаписью

мДатаПерехода = Дата("20060101");

