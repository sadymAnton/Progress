Перем мУдалятьДвижения;
Перем мВалютаРегламентированногоУчета Экспорт;

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПланаПродаж()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВедениеУчетаПоПроектам", УправлениеПроектами.ВедениеУчетаПоПроектам());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланПродаж.Номер КАК Номер,
	|	ПланПродаж.Дата КАК Дата,
	|	NULL КАК Организация,
	|	ПланПродаж.Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(ПланПродаж.Подразделение) КАК ПодразделениеПредставление,
	|	ПланПродаж.Сценарий КАК Сценарий,
	|	ПРЕДСТАВЛЕНИЕ(ПланПродаж.Сценарий) КАК СценарийПредставление,
	|	ВЫБОР
	|		КОГДА &ВедениеУчетаПоПроектам = ИСТИНА
	|			ТОГДА ПланПродаж.Проект
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Проект,
	|	ВЫБОР
	|		КОГДА &ВедениеУчетаПоПроектам = ИСТИНА
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПланПродаж.Проект)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ПроектПредставление,
	|	ПланПродаж.Сценарий.Периодичность КАК Периодичность,
	|	ПРЕДСТАВЛЕНИЕ(ПланПродаж.Сценарий.Периодичность) КАК ПериодичностьПредставление,
	|	ПланПродаж.ДатаПланирования КАК ДатаПланирования,
	|	ПланПродаж.УчитыватьНДС КАК УчитыватьНДС,
	|	ПланПродаж.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ПланПродаж.Ответственный КАК Ответственный,
	|	ПРЕДСТАВЛЕНИЕ(ПланПродаж.Ответственный) КАК ОтветственныйПредставление,
	|	ПланПродаж.СоставПлана.(
	|		НомерСтроки КАК НомерСтроки,
	|		Контрагент КАК Контрагент,
	|		Договор КАК Договор,
	|		Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА ПланПродаж.СоставПлана.Номенклатура.НаименованиеПолное ЕСТЬ NULL 
	|				ТОГДА ПланПродаж.СоставПлана.Номенклатура.Наименование
	|			ИНАЧЕ ВЫБОР
	|					КОГДА (ВЫРАЗИТЬ(ПланПродаж.СоставПлана.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|						ТОГДА ПланПродаж.СоставПлана.Номенклатура.Наименование
	|					ИНАЧЕ ПланПродаж.СоставПлана.Номенклатура.НаименованиеПолное
	|				КОНЕЦ
	|		КОНЕЦ КАК НоменклатураПредставление,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		NULL КАК Серия,
	|		Заказ КАК Заказ,
	|		Заказ.Номер КАК ЗаказНомер,
	|		Заказ.Дата КАК ЗаказДата,
	|		Количество,
	|		ПРЕДСТАВЛЕНИЕ(ПланПродаж.СоставПлана.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
	|		Цена,
	|		Сумма,
	|		СуммаНДС
	|	)
	|ИЗ
	|	Документ.ПланПродаж КАК ПланПродаж
	|ГДЕ
	|	ПланПродаж.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСоставПлана = Шапка.СоставПлана.Выбрать();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланПродаж_ПланПродаж";
	Макет = ПолучитьМакет("ПланПродаж");

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "План продаж");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	
	ДатаНачала = Шапка.ДатаПланирования;
	ДатаОкончания = Шапка.ДатаПланирования;
	УправлениеПланированием.ВыровнятьПериод(ДатаНачала, ДатаОкончания, Шапка.Периодичность);

	ОбластьМакета.Параметры.ПериодПланирования = ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП=Истина");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	ВыборкаСоставПлана = Шапка.СоставПлана.Выбрать();
	Пока ВыборкаСоставПлана.Следующий() Цикл
		
		ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
		//bolshevykh@a-prof.ru 17.10.14
		//При пустой номенклатуре	
		//ОбластьСтроки.Параметры.НоменклатураПредставление = ВыборкаСоставПлана.НоменклатураПредставление + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСоставПлана);
		ОбластьСтроки.Параметры.НоменклатураПредставление = СокрЛП(ВыборкаСоставПлана.НоменклатураПредставление) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСоставПлана);
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСоставПлана.Заказ) Тогда
			ОбластьСтроки.Параметры.ЗаказПредставление = "";
		Иначе
			ОбластьСтроки.Параметры.ЗаказПредставление = ВыборкаСоставПлана.ЗаказНомер + " от " + Формат(ВыборкаСоставПлана.ЗаказДата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		ОбластьСтроки.Параметры.Всего = ВыборкаСоставПлана.Сумма + ?(Шапка.СуммаВключаетНДС = Истина, 0, ВыборкаСоставПлана.СуммаНДС);

		ТабДокумент.Вывести(ОбластьСтроки);
		
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ОтветственныйПредставление = "/" + Шапка.ОтветственныйПредставление + "/";
	ОбластьМакета.Параметры.ИтогоВсего = СоставПлана.Итог("Сумма") + ?(Шапка.СуммаВключаетНДС = Истина, 0, СоставПлана.Итог("СуммаНДС"));
	ОбластьМакета.Параметры.ИтогоСтоимость = СоставПлана.Итог("Сумма");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьПланаПродаж()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		Сообщить("Не указан сценарий планирования!");
		Возврат;
	КонецЕсли;
	
	Если ИмяМакета = "ПланПродаж" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьПланаПродаж();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПланПродаж", "План продаж");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоСоставПлана - результат запроса по табличной части "СоставПлана",
//  ВыборкаПоШапкеДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСоставПлана(РезультатЗапросаПоСоставПлана, ВыборкаПоШапкеДокумента)

	ТаблицаСоставПлана = РезультатЗапросаПоСоставПлана.Выгрузить();

	// Переименуем колонку "Сумма" в "Стоимость" (как в регистрах).
	ТаблицаСоставПлана.Колонки.Сумма.Имя = "Стоимость";

	// Надо рассчитать стоимость без НДС.
	Для каждого СтрокаТаблицы Из ТаблицаСоставПлана Цикл

		//{17.02.2016 Островерхий заявка №б/н 
		//СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - 
		//						  ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		//17.02.2016 Островерхий} 
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		                                 ВыборкаПоШапкеДокумента.ВалютаУправленческогоУчета, 
		                                 КурсДокумента,
		                                 ВыборкаПоШапкеДокумента.КурсВалютыУправленческогоУчета, 
		                                 КратностьДокумента,
		                                 ВыборкаПоШапкеДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.НДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		                                 ВыборкаПоШапкеДокумента.ВалютаУправленческогоУчета, 
		                                 КурсДокумента,
		                                 ВыборкаПоШапкеДокумента.КурсВалютыУправленческогоУчета, 
		                                 КратностьДокумента,
		                                 ВыборкаПоШапкеДокумента.КратностьВалютыУправленческогоУчета);
										 
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументПланирования) Тогда
			
			СтрокаТаблицы.ДокументПланирования = Ссылка;
			
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаСоставПлана;

КонецФункции // ПодготовитьТаблицуСоставПлана()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ВалютаДокумента, КурсДокумента, КратностьДокумента,
	                        					 |ДатаПланирования, Сценарий");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "СоставПлана".
//
// Параметры:
// Параметры: 
//  ТаблицаПоСоставПлана    - таблица значений, содержащая данные для проведения и проверки ТЧ СоставПлана
//  ВыборкаПоШапкеДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСоставПлана(ТаблицаПоСоставПлана, ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	//bolshevykh@a-prof.ru 02.10.14
	//Проверятся должно на заполнение или номенклатуры или товарной группы.	
	Для каждого СтрокаТаблицы Из СоставПлана Цикл
		// Цикл по проверяемым полям
			ЗначениеН = СтрокаТаблицы["Номенклатура"];
			ЗначениеТГ = СтрокаТаблицы["ППП_Брендообъем"];
			Если НЕ ЗначениеЗаполнено(ЗначениеН) и НЕ ЗначениеЗаполнено(ЗначениеТГ) Тогда
				Отказ = истина;
				ОбщегоНазначения.СообщитьОбОшибке("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +""" незаполненные поля: Номенкалтура и Брендообъем",,,СтатусСообщения.Важное);
			КонецЕсли;
	КонецЦикла;
	
	// Теперь вызовем общую процедуру проверки.
	СтруктураОбязательныхПолей = Новый Структура();
	
	Если Сценарий.УчетПоКоличеству Тогда
		
		//m.ionov@a-prof.ru 12.12.2014
		//Делаем не обязательным количество
		//СтруктураОбязательныхПолей.Вставить("Количество");
		//----m.ionov@a-prof.ru---
		
	КонецЕсли;
	
	Если Сценарий.УчетПоСуммам И НЕ Сценарий.УчетПоКоличеству Тогда
		
		СтруктураОбязательныхПолей.Вставить("Сумма");
		//СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
		
	КонецЕсли;

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставПлана", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "СоставПлана", ТаблицаПоСоставПлана, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "СоставПлана", ТаблицаПоСоставПлана, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиСоставПлана()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  ВыборкаПоШапкеДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоСоставПлана      - таблица значений, содержащая данные для проведения и проверки ТЧ СоставПлана
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, ТаблицаПоСоставПлана, Отказ, Заголовок)

	// ПО регистру "ПланыПродаж".
	
	НаборДвижений = Движения.ПланыПродаж;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСоставПлана, ТаблицаДвижений);
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Сценарий, "Сценарий");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	Если УправлениеПроектами.ВедениеУчетаПоПроектам() Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект, "Проект");
	КонецЕсли;	
	
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		
		Движения.ПланыПродаж.ДобавитьДвижение();
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, СоставПлана);
		
	Для каждого Строка из СоставПлана Цикл
		
		Если НЕ Сценарий.УчетПоКоличеству И Строка.Количество <> 0 Тогда
			
			Строка.Количество =  0;
			
		КонецЕсли;
		
		Если НЕ Сценарий.УчетПоСуммам  
			И (Строка.Цена <> 0 ИЛИ Строка.Сумма <> 0 ИЛИ Строка.СуммаНДС <> 0) 
			Тогда
			
			Строка.Цена = 0;
			Строка.Сумма = 0;
			Строка.СуммаНДС = 0;
			
		КонецЕсли;
		
	КонецЦикла;

	// Посчитать сумму документа и записать ее в соответствующий реквизит шапки для показа в журналах
	//{17.02.2016 Островерхий заявка №б/н 
	//СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "СоставПлана"); 
	СуммаДокумента = СоставПлана.Итог("Сумма");	
	//17.02.2016 Островерхий} 

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
		
	КонецЕсли;

	ГраницаФиксации = УправлениеПланированием.ПолучитьГраницуФиксацииПериодов(Перечисления.ВидыПланирования.Продажи, Подразделение, Проект, Сценарий);
	
	Если ДатаПланирования <= ГраницаФиксации Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может быть проведен, поскольку дата планирования находится в закрытом периоде (до " + Формат(ГраницаФиксации, "ДФ=dd.MM.yyyy; ДЛФ=D") + ").", Отказ);
		Возврат;
		
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "СоставПлана".
	СтруктураПолей = УправлениеЗапасами.СформироватьСтруктуруПолейТовары();
	
	СтруктураПолей.Вставить("Набор", "Номенклатура.Набор");
 	СтруктураПолей.Вставить("Комплект", "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Заказ", "Заказ");
	СтруктураПолей.Вставить("Контрагент", "Контрагент");
	СтруктураПолей.Вставить("Договор", "Договор");
	СтруктураПолей.Вставить("Источник", "Источник");
	СтруктураПолей.Вставить("ДокументПланирования", "Источник");
	СтруктураПолей.Вставить("ВариантРаспределения", "ВариантРаспределения");
	СтруктураПолей.Удалить("СтавкаНДС");
	СтруктураПолей.Удалить("СерияНоменклатуры");
	
    //bolshevykh@a-prof.ru 01.10.14
	СтруктураПолей.Вставить("ППП_АдресПоставки", "ППП_АдресПоставки");
	СтруктураПолей.Вставить("ППП_ТоварнаяКатегория", "ППП_ТоварнаяКатегория");
	СтруктураПолей.Вставить("ППП_Брендообъем", "ППП_Брендообъем");
	СтруктураПолей.Вставить("ППП_КаналПродаж", "ППП_КаналПродаж");
	//СтруктураПолей.Вставить("ППП_ТорговыйПредставитель", "ППП_ТорговыйПредставитель");
	СтруктураПолей.Вставить("ППП_ПрайсЛист", "ППП_ПрайсЛист");
	СтруктураПолей.Вставить("ППП_ВесБрутто", "ППП_ВесБрутто");
	СтруктураПолей.Вставить("ППП_ВесНетто", "ППП_ВесНетто");
	СтруктураПолей.Вставить("ППП_Литры", "ППП_Литры");
	СтруктураПолей.Вставить("ППП_СуммаПрайсЛист", "ППП_СуммаПрайсЛист");
	СтруктураПолей.Вставить("ППП_СуммаПовышенияЦен", "ППП_СуммаПовышенияЦен");
	СтруктураПолей.Вставить("ППП_СуммаПромоАкции", "ППП_СуммаПромоАкции");
	//{08.04.2016 Островерхий заявка №49367 
	СтруктураПолей.Вставить("ППП_СуммаПромоАкцииСкидкаПослеСчета", "ППП_СуммаПромоАкцииСкидкаПослеСчета"); 
	//08.04.2016 Островерхий} 
	СтруктураПолей.Вставить("ППП_СуммаГросс", "ППП_СуммаГросс");	
	СтруктураПолей.Вставить("ППП_СуммаБюджетРетробонусов", "ППП_СуммаБюджетРетробонусов");	
	СтруктураПолей.Вставить("ППП_СуммаМаркетинговыеУслуги", "ППП_СуммаМаркетинговыеУслуги");	
	СтруктураПолей.Вставить("ППП_СуммаЭТК", "ППП_СуммаЭТК");	
	СтруктураПолей.Удалить("Количество");
	СтруктураПолей.Вставить("Количество", "Количество * ISNULL(Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,1)");

	//{30.01.2017 Островерхий заявка №57373 
	СтруктураПолей.Вставить("ППП_СтоимостьСДопСкидкой", "ППП_СтоимостьСДопСкидкой"); 
	//30.01.2017 Островерхий} 
	
	//{31.07.2017 Островерхий заявка №64854 
	СтруктураПолей.Вставить("ППП_СуммаЭТКСкидкаВСчете",  "ППП_СуммаЭТКСкидкаВСчете");
	СтруктураПолей.Вставить("ППП_СуммаПредставленность", "ППП_СуммаПредставленность");
	//31.07.2017 Островерхий} 
	
	//{24.10.2017 Островерхий заявка №72059 
	СтруктураПолей.Вставить("ППП_СуммаRSP",  			 "ППП_СуммаRSP"); 
	//24.10.2017 Островерхий} 
	
	СтруктураСложныхПолей = Новый Структура;
	//m.ionov@a-prof.ru 26.10.2014
	//СтруктураСложныхПолей.Вставить("Период",
	//"ВЫБОР
	//|	КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Док.Период, " + ?(ПериодичностьДетализации = Перечисления.Периодичность.ПустаяСсылка(), ?(Сценарий.Периодичность = Перечисления.Периодичность.ПустаяСсылка(), "ДЕНЬ", Строка(Сценарий.Периодичность)), Строка(ПериодичностьДетализации)) + "), Док.Ссылка.ДатаПланирования, ДЕНЬ) > 0
	//|		ТОГДА Док.Ссылка.ДатаПланирования
	//|	ИНАЧЕ НАЧАЛОПЕРИОДА(Док.Период, " + ?(ПериодичностьДетализации = Перечисления.Периодичность.ПустаяСсылка(), ?(Сценарий.Периодичность = Перечисления.Периодичность.ПустаяСсылка(), "ДЕНЬ", Строка(Сценарий.Периодичность)), Строка(ПериодичностьДетализации)) + ")
	//|КОНЕЦ");
	СтруктураСложныхПолей.Вставить("Период",
	"НАЧАЛОПЕРИОДА(Док.Период, " + ?(ПериодичностьДетализации = Перечисления.Периодичность.ПустаяСсылка(), ?(Сценарий.Периодичность = Перечисления.Периодичность.ПустаяСсылка(), "ДЕНЬ", Строка(Сценарий.Периодичность)), Строка(ПериодичностьДетализации)) + ")");
	//----m.ionov@a-prof.ru---

	РезультатЗапросаПоСоставПлана = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "СоставПлана", СтруктураПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу СоставПлана для проведения.
	ТаблицаПоСоставПлана = ПодготовитьТаблицуСоставПлана(РезультатЗапросаПоСоставПлана, СтруктураШапкиДокумента);
	
	// Проверить заполнение ТЧ "СоставПлана".
	ПроверитьЗаполнениеТабличнойЧастиСоставПлана(ТаблицаПоСоставПлана, СтруктураШапкиДокумента, Отказ, Заголовок);
										
	// Движения по документу
	Если Не Отказ Тогда

		ДвиженияПоРегистрам(РежимПроведения, ТаблицаПоСоставПлана, Отказ, Заголовок);

	КонецЕсли; 

КонецПроцедуры	// ОбработкаПроведения

//bolshevykh@a-prof.ru 25.05.2015
Функция РассчитатьПланПродаж(Объект,ТолькоНулевые = Ложь, ДатаПланирования = неопределено, ТаблицаРасчитаныхЦен = неопределено ) экспорт
	
	Если ТаблицаРасчитаныхЦен = неопределено тогда
		ТаблицаРасчитаныхЦен = Новый ТаблицаЗначений();
		ТаблицаРасчитаныхЦен.Колонки.Добавить("Дата");
		ТаблицаРасчитаныхЦен.Колонки.Добавить("Контрагент");
		ТаблицаРасчитаныхЦен.Колонки.Добавить("Брендообъем");
		ТаблицаРасчитаныхЦен.Колонки.Добавить("ТоварнаяКатегория");
		ТаблицаРасчитаныхЦен.Колонки.Добавить("Регион");
		ТаблицаРасчитаныхЦен.Колонки.Добавить("УсловиеПоставки");
		ТаблицаРасчитаныхЦен.Колонки.Добавить("КаналПродаж");
		ТаблицаРасчитаныхЦен.Колонки.Добавить("ТипыЦен");
		ТаблицаРасчитаныхЦен.Колонки.Добавить("Цена");
		//bolshevykh@a-prof.ru 25.05.2015
		ТаблицаРасчитаныхЦен.Колонки.Добавить("ЦенаСПовышением");
		//-------bolshevykh@a-prof.ru 25.05.2015
	КонецЕсли;
	
	#Если Клиент Тогда
		
		мФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		мФормаПрогрессора.НаименованиеОбработкиДанных = "Расчет стоимости в плане продаж";
		мФормаПрогрессора.Значение = 0;
		
		мФормаПрогрессора.МаксимальноеЗначение = Объект.СоставПлана.Количество();
		
		мФормаПрогрессора.Открыть();	 	
		
	#КонецЕсли 
	
	//Создаем списки возможных аналитик по таблице
	ТабПоказателей = Объект.СоставПлана.Выгрузить(,"ППП_АдресПоставки,Контрагент,ППП_ТоварнаяКатегория,ППП_Брендообъем,Период");	
	ТабПоказателей.Свернуть("ППП_АдресПоставки,Контрагент,ППП_ТоварнаяКатегория,ППП_Брендообъем,Период");
	ТабКК = новый ТаблицаЗначений;
	ТабКК.Колонки.Добавить("КатегорияКлиента");
	ТабД = новый ТаблицаЗначений;
	ТабД.Колонки.Добавить("Дивизион");
	ТабП = новый ТаблицаЗначений;
	ТабП.Колонки.Добавить("Проект");
	ТабБ = новый ТаблицаЗначений;
	ТабБ.Колонки.Добавить("Брендообъем");
	ТабВ = новый ТаблицаЗначений;
	ТабВ.Колонки.Добавить("Вывеска");
	ТабПер = новый ТаблицаЗначений;
	ТабПер.Колонки.Добавить("Период");
			
	Для каждого стрПоказателей из ТабПоказателей цикл
		
		#Если Клиент Тогда
			Состояние("Формирование фильтров по показателям " + Строка(ТабПоказателей.Индекс(стрПоказателей)) + "/" + Строка(ТабПоказателей.Количество()));
		#КонецЕсли 
		
		СтрКК = ТабКК.Добавить();
		СтрКК.КатегорияКлиента = Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка();
		СтрКК = ТабКК.Добавить();
		Если стрПоказателей.ППП_АдресПоставки.НСИ_КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда
			СтрКК.КатегорияКлиента = стрПоказателей.ППП_АдресПоставки.НСИ_КатегорияКлиента;
		иначеЕсли стрПоказателей.Контрагент.НСИ_КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда 
			СтрКК.КатегорияКлиента = стрПоказателей.Контрагент.НСИ_КатегорияКлиента;
		КонецЕсли;
		
		СтрД = ТабД.Добавить();
		СтрД.Дивизион = Справочники.ПРГДивизионы.ПустаяСсылка();
		СтрД = ТабД.Добавить();
		Если стрПоказателей.ППП_АдресПоставки.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда
			СтрД.Дивизион = стрПоказателей.ППП_АдресПоставки.Дивизион;
		иначеЕсли стрПоказателей.Контрагент.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда
			СтрД.Дивизион = стрПоказателей.Контрагент.Дивизион;
		КонецЕсли;
		
		СтрБ = ТабБ.Добавить();
		СтрБ.Брендообъем = Справочники.НСИ_Брендообъемы.ПустаяСсылка();
		СтрБ = ТабБ.Добавить();
		СтрБ.Брендообъем = стрПоказателей.ППП_Брендообъем;
		
		СтрВ = ТабВ.Добавить();
		СтрВ.Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка();
		СтрВ = ТабВ.Добавить();
		Если стрПоказателей.Контрагент.НСИ_Вывеска  <> Справочники.НСИ_Вывески.ПустаяСсылка() тогда
			СтрВ.Вывеска = стрПоказателей.Контрагент.НСИ_Вывеска;
		КонецЕсли;
		
		СтрП = ТабП.Добавить();
		СтрП.Проект = Справочники.ПРГ_ПроектыГП.ПустаяСсылка();
		СтрП = ТабП.Добавить();
		Если стрПоказателей.ППП_ТоварнаяКатегория.Проект  <> Справочники.ПРГ_ПроектыГП.ПустаяСсылка() тогда
			СтрП.Проект =  стрПоказателей.ППП_ТоварнаяКатегория.Проект;
		КонецЕсли;
		
		СтрПер = ТабПер.Добавить();
		СтрПер.Период =  НачалоМесяца(стрПоказателей.Период);
		
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние("Формирование запросов по предпосылкам");	
	#КонецЕсли
	
	ТабКК.Свернуть("КатегорияКлиента");
	спКатегорияКлиент = ТабКК.ВыгрузитьКолонку("КатегорияКлиента");
	
	ТабД.Свернуть("Дивизион");
	спДивизион = ТабД.ВыгрузитьКолонку("Дивизион");
	
	ТабП.Свернуть("Проект");
	спПроект = ТабП.ВыгрузитьКолонку("Проект");
	
	ТабБ.Свернуть("Брендообъем");
	спБрендообъем = ТабБ.ВыгрузитьКолонку("Брендообъем");
	
	ТабВ.Свернуть("Вывеска");
	спВывеска = ТабВ.ВыгрузитьКолонку("Вывеска");
	
	ТабПер.Свернуть("Период");
	спПериод = ТабПер.ВыгрузитьКолонку("Период");
	
	ЗапросН = Новый Запрос;
	ЗапросН.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.НСИ_Брендообъем = &Брендообъем
		|	И Номенклатура.СтатусСКЮ В(&СтатусСКЮ)";
	    СтатусСКЮ = Новый массив;
		//bolshevykh@a-prof.ru 13.03.2015
		СтатусСКЮ.Добавить(Справочники.ПРГ_СтатусыНоменклатуры.НайтиПоКоду(1));
		СтатусСКЮ.Добавить(Справочники.ПРГ_СтатусыНоменклатуры.НайтиПоКоду(2));
		СтатусСКЮ.Добавить(Справочники.ПРГ_СтатусыНоменклатуры.НайтиПоКоду(3));
		//bolshevykh@a-prof.ru 13.03.2015
		СтатусСКЮ.Добавить(Справочники.ПРГ_СтатусыНоменклатуры.ПустаяСсылка());
		ЗапросН.УстановитьПараметр("СтатусСКЮ", СтатусСКЮ);
	
	//Временная таблица 
	ЗапросПЦ1 = Новый Запрос;
	ЗапросПЦ1.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ППП_ГрафикПовышенияЦенНаГПСрезПоследних.Брендообъем КАК Брендообъем,
		|	ППП_ГрафикПовышенияЦенНаГПСрезПоследних.Процент,
		|	ППП_ГрафикПовышенияЦенНаГПСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
		|	ППП_ГрафикПовышенияЦенНаГПСрезПоследних.Месяц КАК Месяц
		|ПОМЕСТИТЬ тППП_ГрафикПовышенияЦенНаГП
		|ИЗ
		|	РегистрСведений.ППП_ГрафикПовышенияЦенНаГП.СрезПоследних(
		|			,
		|			КатегорияКлиента В (&КатегорияКлиента)
		|				И Брендообъем В (&Брендообъем)
		|				И Месяц В (&Месяц)) КАК ППП_ГрафикПовышенияЦенНаГПСрезПоследних
		|ГДЕ
		|	ППП_ГрафикПовышенияЦенНаГПСрезПоследних.Процент <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Месяц КАК Месяц,
		|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Дивизион КАК Дивизион,
		|	ППП_ПланПроведенияПромоАкцийСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
		|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Брендообъем КАК Брендообъем,
		|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Вывеска КАК Вывеска,
		|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Показатель,
		|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Группа,
		|	ППП_ПланПроведенияПромоАкцийСрезПоследних.ВидПоказателя
		|ПОМЕСТИТЬ тППП_ПланПроведенияПромоАкцийСрезПоследних
		|ИЗ
		|	РегистрСведений.ППП_ПланПроведенияПромоАкций.СрезПоследних(
		|			,
		|			КатегорияКлиента В (&КатегорияКлиента)
		|				И Дивизион В (&Дивизион)
		|				И Вывеска В (&Вывеска)
		|				И Брендообъем В (&Брендообъем)
		|				И Месяц В (&Месяц)) КАК ППП_ПланПроведенияПромоАкцийСрезПоследних
		|ГДЕ
		|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Показатель <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ППП_ПланРетробонусовСрезПоследних.Месяц КАК Месяц,
		|	ППП_ПланРетробонусовСрезПоследних.Дивизион КАК Дивизион,
		|	ППП_ПланРетробонусовСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
		|	ППП_ПланРетробонусовСрезПоследних.Вывеска КАК Вывеска,
		|	ППП_ПланРетробонусовСрезПоследних.Проект КАК Проект,
		|	ППП_ПланРетробонусовСрезПоследних.Показатель,
		|	ППП_ПланРетробонусовСрезПоследних.Группа,
		|	ППП_ПланРетробонусовСрезПоследних.ВидПоказателя
		|ПОМЕСТИТЬ тППП_ПланРетробонусовСрезПоследних
		|ИЗ
		|	РегистрСведений.ППП_ПланРетробонусов.СрезПоследних(
		|			,
		|			КатегорияКлиента В (&КатегорияКлиента)
		|				И Дивизион В (&Дивизион)
		|				И Вывеска В (&Вывеска)
		|				И Проект В (&Проект)
		|				И Месяц В (&Месяц)) КАК ППП_ПланРетробонусовСрезПоследних
		|ГДЕ
		|	ППП_ПланРетробонусовСрезПоследних.Показатель <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ППП_ПланМаркетинговыхУслугСрезПоследних.Месяц КАК Месяц,
		|	ППП_ПланМаркетинговыхУслугСрезПоследних.Дивизион КАК Дивизион,
		|	ППП_ПланМаркетинговыхУслугСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
		|	ППП_ПланМаркетинговыхУслугСрезПоследних.Вывеска КАК Вывеска,
		|	ППП_ПланМаркетинговыхУслугСрезПоследних.Проект КАК Проект,
		|	ППП_ПланМаркетинговыхУслугСрезПоследних.Показатель,
		|	ППП_ПланМаркетинговыхУслугСрезПоследних.Группа,
		|	ППП_ПланМаркетинговыхУслугСрезПоследних.ВидПоказателя
		|ПОМЕСТИТЬ тППП_ПланМаркетинговыхУслугСрезПоследних
		|ИЗ
		|	РегистрСведений.ППП_ПланМаркетинговыхУслуг.СрезПоследних(
		|			,
		|			КатегорияКлиента В (&КатегорияКлиента)
		|				И Дивизион В (&Дивизион)
		|				И Вывеска В (&Вывеска)
		|				И Проект В (&Проект)
		|				И Месяц В (&Месяц)) КАК ППП_ПланМаркетинговыхУслугСрезПоследних
		|ГДЕ
		|	ППП_ПланМаркетинговыхУслугСрезПоследних.Показатель <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ППП_ПланЭТКСрезПоследних.Месяц КАК Месяц,
		|	ППП_ПланЭТКСрезПоследних.Дивизион КАК Дивизион,
		|	ППП_ПланЭТКСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
		|	ППП_ПланЭТКСрезПоследних.Показатель,
		|	ППП_ПланЭТКСрезПоследних.Группа,
		|	ППП_ПланЭТКСрезПоследних.ВидПоказателя
		|ПОМЕСТИТЬ тППП_ПланЭТКСрезПоследних
		|ИЗ
		|	РегистрСведений.ППП_ПланЭТК.СрезПоследних(
		|			,
		|			КатегорияКлиента В (&КатегорияКлиента)
		|				И Дивизион В (&Дивизион)
		|				И Месяц В (&Месяц)) КАК ППП_ПланЭТКСрезПоследних
		|ГДЕ
		|	ППП_ПланЭТКСрезПоследних.Показатель <> 0";
		
	ЗапросПЦ1.УстановитьПараметр("Месяц", спПериод);
	ЗапросПЦ1.УстановитьПараметр("КатегорияКлиента", спКатегорияКлиент);
	ЗапросПЦ1.УстановитьПараметр("Брендообъем", спБрендообъем);
	ЗапросПЦ1.УстановитьПараметр("Дивизион", спДивизион);
	ЗапросПЦ1.УстановитьПараметр("Вывеска", спВывеска);
	ЗапросПЦ1.УстановитьПараметр("Проект", спПроект);
	ЗапросПЦ1.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросПЦ1.Выполнить();
	
	ЗапросПЦ=Новый Запрос;
	ЗапросПЦ.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	ЗапросПЦ.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тППП_ГрафикПовышенияЦенНаГП.Брендообъем КАК Брендообъем,
		|	тППП_ГрафикПовышенияЦенНаГП.Процент,
		|	тППП_ГрафикПовышенияЦенНаГП.КатегорияКлиента КАК КатегорияКлиента
		|ИЗ
		|	тППП_ГрафикПовышенияЦенНаГП КАК тППП_ГрафикПовышенияЦенНаГП
		|ГДЕ
		|	(тППП_ГрафикПовышенияЦенНаГП.КатегорияКлиента = &КатегорияКлиента
		|			ИЛИ тППП_ГрафикПовышенияЦенНаГП.КатегорияКлиента = ЗНАЧЕНИЕ(Справочник.НСИ_КатегорииКлиентов.ПустаяСсылка))
		|	И (тППП_ГрафикПовышенияЦенНаГП.Брендообъем = &Брендообъем
		|			ИЛИ тППП_ГрафикПовышенияЦенНаГП.Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка))
		|	И тППП_ГрафикПовышенияЦенНаГП.Месяц = &Месяц
		|
		|УПОРЯДОЧИТЬ ПО
		|	КатегорияКлиента УБЫВ,
		|	Брендообъем УБЫВ";
		
	ЗапросПА = Новый Запрос;
	ЗапросПА.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	ЗапросПА.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Дивизион КАК Дивизион,
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Брендообъем КАК Брендообъем,
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Вывеска КАК Вывеска,
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Показатель,
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Группа,
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Месяц,
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.ВидПоказателя
		|ИЗ
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних
		|УПОРЯДОЧИТЬ ПО
		|	Дивизион УБЫВ,
		|	КатегорияКлиента УБЫВ,
		|	Брендообъем УБЫВ,
		|	Вывеска УБЫВ";

	
	ЗапросРБ = Новый Запрос;
	ЗапросРБ.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	ЗапросРБ.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тППП_ПланРетробонусовСрезПоследних.Дивизион КАК Дивизион,
		|	тППП_ПланРетробонусовСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
		|	тППП_ПланРетробонусовСрезПоследних.Вывеска КАК Вывеска,
		|	тППП_ПланРетробонусовСрезПоследних.Проект КАК Проект,
		|	тППП_ПланРетробонусовСрезПоследних.Показатель,
		|	тППП_ПланРетробонусовСрезПоследних.Группа,
		|	тППП_ПланРетробонусовСрезПоследних.Месяц,
		|	тППП_ПланРетробонусовСрезПоследних.ВидПоказателя
		|ИЗ
		|	тППП_ПланРетробонусовСрезПоследних КАК тППП_ПланРетробонусовСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дивизион УБЫВ,
		|	КатегорияКлиента УБЫВ,
		|	Вывеска УБЫВ,
		|	Проект УБЫВ";
			
	ЗапросМУ = Новый Запрос;
	ЗапросМУ.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	ЗапросМУ.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.Дивизион КАК Дивизион,
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.Вывеска КАК Вывеска,
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.Проект КАК Проект,
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.Показатель,
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.Группа,
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.Месяц,
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.ВидПоказателя
		|ИЗ
		|	тППП_ПланМаркетинговыхУслугСрезПоследних КАК тППП_ПланМаркетинговыхУслугСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дивизион УБЫВ,
		|	КатегорияКлиента УБЫВ,
		|	Вывеска УБЫВ,
		|	Проект УБЫВ";
		
	ЗапросЭТК = Новый Запрос;
	ЗапросЭТК.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	ЗапросЭТК.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тППП_ПланЭТКСрезПоследних.Дивизион КАК Дивизион,
		|	тППП_ПланЭТКСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
		|	тППП_ПланЭТКСрезПоследних.Показатель,
		|	тППП_ПланЭТКСрезПоследних.Группа,
		|	тППП_ПланЭТКСрезПоследних.Месяц,
		|	тППП_ПланЭТКСрезПоследних.ВидПоказателя
		|ИЗ
		|	тППП_ПланЭТКСрезПоследних КАК тППП_ПланЭТКСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дивизион УБЫВ,
		|	КатегорияКлиента УБЫВ";
		
	ЕстьНулевыеЦены = Ложь;
	
	СпИсключающийДублиСообщений = Новый СписокЗначений;
		
	//Начало 1 итерации (Цены,Выручка до скидок)
	Для каждого СтрПланПродаж из Объект.СоставПлана цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
				
		//++ Spl_Апроф 04.06.2015 (k.russkih@a-prof.ru) по просьбе Нагорной Анастасии добавлем игнор строк с нулевым количеством
		Если СтрПланПродаж.Количество = 0 Тогда		
			Продолжить;		
		КонецЕсли; 
		//-- Spl_Апроф
		
		//Состояние("Формирование фильтров по показателям " + Строка(СоставПлана.Индекс(СтрПланПродаж)) + "/" + Строка(СоставПлана.Количество()));
		//
		//СтрКК = ТабКК.Добавить();
		//СтрКК.КатегорияКлиента = Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка();
		//СтрКК = ТабКК.Добавить();
		//Если СтрПланПродаж.ППП_АдресПоставки.НСИ_КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда
		//	СтрКК.КатегорияКлиента = СтрПланПродаж.ППП_АдресПоставки.НСИ_КатегорияКлиента;
		//иначеЕсли СтрПланПродаж.Контрагент.НСИ_КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда 
		//	СтрКК.КатегорияКлиента = СтрПланПродаж.Контрагент.НСИ_КатегорияКлиента;
		//КонецЕсли;
		//
		//СтрД = ТабД.Добавить();
		//СтрД.Дивизион = Справочники.ПРГДивизионы.ПустаяСсылка();
		//СтрД = ТабД.Добавить();
		//Если СтрПланПродаж.ППП_АдресПоставки.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда
		//	СтрД.Дивизион = СтрПланПродаж.ППП_АдресПоставки.Дивизион;
		//иначеЕсли СтрПланПродаж.Контрагент.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда
		//	СтрД.Дивизион = СтрПланПродаж.Контрагент.Дивизион;
		//КонецЕсли;
		//
		//СтрБ = ТабБ.Добавить();
		//СтрБ.Брендообъем = Справочники.НСИ_Брендообъемы.ПустаяСсылка();
		//СтрБ = ТабБ.Добавить();
		//СтрБ.Брендообъем = СтрПланПродаж.ППП_Брендообъем;
		//
		//СтрВ = ТабВ.Добавить();
		//СтрВ.Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка();
		//СтрВ = ТабВ.Добавить();
		//Если СтрПланПродаж.Контрагент.НСИ_Вывеска  <> Справочники.НСИ_Вывески.ПустаяСсылка() тогда
		//	СтрВ.Вывеска = СтрПланПродаж.Контрагент.НСИ_Вывеска;
		//КонецЕсли;
		//
		//СтрП = ТабП.Добавить();
		//СтрП.Проект = Справочники.ПРГ_ПроектыГП.ПустаяСсылка();
		//СтрП = ТабП.Добавить();
		//Если СтрПланПродаж.ППП_ТоварнаяКатегория.Проект  <> Справочники.ПРГ_ПроектыГП.ПустаяСсылка() тогда
		//	СтрП.Проект =  СтрПланПродаж.ППП_ТоварнаяКатегория.Проект;
		//КонецЕсли;
		//
		//СтрПер = ТабПер.Добавить();
		//СтрПер.Период =  НачалоМесяца(СтрПланПродаж.Период);
		
		#Если Клиент Тогда
			Состояние("Расчет стоимости плана продаж " + Строка(Объект.СоставПлана.Индекс(СтрПланПродаж)) + "/" + Строка(Объект.СоставПлана.Количество()));
			
			мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
			мФормаПрогрессора.КомментарийЗначения = "Расчет средней цены по прайс листам ...";
		#КонецЕсли
		
		Если СтрПланПродаж.ППП_АдресПоставки.НСИ_КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда
			КатегорияКлиента = СтрПланПродаж.ППП_АдресПоставки.НСИ_КатегорияКлиента;
		иначеЕсли СтрПланПродаж.Контрагент.НСИ_КатегорияКлиента<> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда 
			КатегорияКлиента = СтрПланПродаж.Контрагент.НСИ_КатегорияКлиента;
		иначе
			//m.ionov@a-prof.ru 08.05.2015
			//КатегорияКлиента = неопределено;
			КатегорияКлиента = Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка();
			//----m.ionov@a-prof.ru---
		КонецЕсли;
		
		Если СтрПланПродаж.ППП_АдресПоставки.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда
			Дивизион = СтрПланПродаж.ППП_АдресПоставки.Дивизион;
		иначеЕсли СтрПланПродаж.Контрагент.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда
			Дивизион = СтрПланПродаж.Контрагент.Дивизион;
		иначе
			Дивизион = неопределено;
		КонецЕсли;
		
		Брендообъем = СтрПланПродаж.ППП_Брендообъем;
		
		Если СтрПланПродаж.Контрагент.НСИ_Вывеска  <> Справочники.НСИ_Вывески.ПустаяСсылка() тогда
			Вывеска = СтрПланПродаж.Контрагент.НСИ_Вывеска;
		Иначе
			Вывеска = неопределено;
		КонецЕсли;
		
		Если СтрПланПродаж.ППП_ТоварнаяКатегория.Проект  <> Справочники.ПРГ_ПроектыГП.ПустаяСсылка() тогда
			ПроектГП =  СтрПланПродаж.ППП_ТоварнаяКатегория.Проект;
		Иначе
			ПроектГП = неопределено;
		КонецЕсли;
		
		Если СтрПланПродаж.ППП_АдресПоставки.НСИ_Регион  <> Справочники.Регионы.ПустаяСсылка() тогда
			Регион = СтрПланПродаж.ППП_АдресПоставки.НСИ_Регион;
		Иначе
			Регион = неопределено;
		КонецЕсли;
		
		//m.ionov@a-prof.ru 22.04.2015
		Если СтрПланПродаж.Контрагент.НСИ_КаналПродаж <> Справочники.НСИ_КаналыПродаж.ПустаяСсылка() Тогда 
			КаналПродаж = СтрПланПродаж.Контрагент.НСИ_КаналПродаж;
		ИначеЕсли  СтрПланПродаж.ППП_КаналПродаж  <> Справочники.НСИ_КаналыПродаж.ПустаяСсылка() тогда
			КаналПродаж = СтрПланПродаж.ППП_КаналПродаж;
		//----m.ionov@a-prof.ru---
		Иначе
			КаналПродаж = неопределено;
		КонецЕсли;
		
		Если  СтрПланПродаж.ППП_АдресПоставки.НСИ_УсловияПоставки  <> Перечисления.ПТЛ_УсловияПоставки.ПустаяСсылка() тогда
			УсловиеПоставки = СтрПланПродаж.ППП_АдресПоставки.НСИ_УсловияПоставки;
		Иначе
			УсловиеПоставки = неопределено;
		КонецЕсли;
		
		Если  СтрПланПродаж.Контрагент  <> Справочники.Контрагенты.ПустаяСсылка() тогда
			Контрагент = СтрПланПродаж.Контрагент; 
		Иначе	
			Контрагент = неопределено;
		КонецЕсли;
			
		Если  СтрПланПродаж.Договор  <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() тогда
			ДоговорКонтрагента = СтрПланПродаж.Договор; 
		Иначе	
			//m.ionov@a-prof.ru 14.04.2015
			//Для определения индивидуальный цен - нужно определять как пустой договор
			//ДоговорКонтрагента = неопределено;
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			//----m.ionov@a-prof.ru---
		КонецЕсли;
			
		Если  СтрПланПродаж.ППП_АдресПоставки  <> Справочники.АдресаПоставки.ПустаяСсылка() тогда
			АдресПоставки = СтрПланПродаж.ППП_АдресПоставки; 
		Иначе	
			АдресПоставки = неопределено;
		КонецЕсли;
		
		Если  СтрПланПродаж.ППП_ТоварнаяКатегория  <> Справочники.НСИ_ТоварныеКатегории.ПустаяСсылка() тогда
			ТоварнаяКатегория = СтрПланПродаж.ППП_ТоварнаяКатегория; 
		Иначе	
			ТоварнаяКатегория = неопределено;
		КонецЕсли;
			
		Если  СтрПланПродаж.Номенклатура  = Справочники.Номенклатура.ПустаяСсылка() или  СтрПланПродаж.Номенклатура  = Справочники.НоменклатурныеГруппы.ПустаяСсылка() тогда
			Номенклатура = неопределено;
		Иначе	
			Номенклатура = СтрПланПродаж.Номенклатура; 
		КонецЕсли;
		
		Если  СтрПланПродаж.ХарактеристикаНоменклатуры  <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() тогда
			ХарактеристикаНоменклатуры = СтрПланПродаж.ХарактеристикаНоменклатуры;
		Иначе	
			ХарактеристикаНоменклатуры = неопределено;
		КонецЕсли;
		
		ЕдиницаИзмерения = СтрПланПродаж.ЕдиницаИзмерения;
					
		УсловиеПродаж = неопределено; 
		
		//Сумма по прайс листам
		ЦенаПрайсЛист = 0;
		ПрайсЛист = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ИтоговыйСписокТиповЦен = Новый СписокЗначений;
		//НайденныеРасчитаныеЦены = Новый ТаблицаЗначений;
		
		Если ТолькоНулевые Тогда
			ЦенаПрайсЛист = СтрПланПродаж.ППП_ЦенаПоПрайсЛистам;
		КонецЕсли;
		
		//Цены по прайс листам считать на предыдущую дату начала загруженного плана продаж. А не на каждый период (месяц) плана продаж. Так же нулевые цены выдавать только на одну дату
		//bolshevykh@a-prof.ru 25.05.2015
		Если ДатаПланирования <> неопределено тогда 
			ДатаПлана = ДатаПланирования;//СтрПланПродаж.Период
			ДатаПланаПред = Объект.ДатаПланирования - 86400;
		иначе	
			ДатаПлана = Объект.ДатаПланирования;
			ДатаПланаПред = Объект.ДатаПланирования;
		КонецЕсли;
		//------bolshevykh@a-prof.ru 25.05.2015
		
		//Ищем цену в ТаблицеРассчитаныхЦен
		НайденныеРасчитаныеЦены = ТаблицаРасчитаныхЦен.НайтиСтроки(Новый Структура("Дата,Регион,КаналПродаж,УсловиеПоставки,Контрагент,Брендообъем,ТоварнаяКатегория",ДатаПлана,Регион,КаналПродаж,УсловиеПоставки,Контрагент,Брендообъем,ТоварнаяКатегория));
		Если НайденныеРасчитаныеЦены.Количество() > 0 тогда
			ЦенаПрайсЛист = НайденныеРасчитаныеЦены[0].Цена;
			СтрПланПродаж.ППП_ПрайсЛист = НайденныеРасчитаныеЦены[0].ТипыЦен; 
		КонецЕсли;
		
		Если Номенклатура <> неопределено И ЦенаПрайсЛист = 0 И НайденныеРасчитаныеЦены.Количество() = 0 тогда
						
			//bolshevykh@a-prof.ru 25.05.2015
			СпТиповЦен = ПЦ_Ценообразование.ПолучитьТипЦенПродажи(ДатаПланаПред, Регион, ПроектГП, КаналПродаж, УсловиеПоставки, Контрагент, ДоговорКонтрагента, АдресПоставки, ТоварнаяКатегория, Брендообъем, Номенклатура, ХарактеристикаНоменклатуры);
			
			Если СпТиповЦен.Количество() > 0 Тогда
				ПрайсЛист = СпТиповЦен[0].Значение;
			КонецЕсли;
			
			ЦенаПрайсЛист = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, ХарактеристикаНоменклатуры, ПрайсЛист, ДатаПланаПред, ЕдиницаИзмерения,
			,,,, ДоговорКонтрагента,УсловиеПродаж,АдресПоставки,Контрагент);
			
			Если СпТиповЦен.Количество()>0 и ПрайсЛист.ВалютаЦены <> Сценарий.Валюта тогда 			
				ЦенаПрайсЛист = ПересчитатьВВалютуСценария(ЦенаПрайсЛист,Сценарий,ПрайсЛист.ВалютаЦены,ДатаПланаПред);
			КонецЕсли;
			//-------bolshevykh@a-prof.ru 25.05.2015
			
			
			//bolshevykh@a-prof.ru 16.03.2015
			СтрПрайсЛист = СокрЛП(СтрПрайсЛист) + ?(Не ПустаяСтрока(СтрПрайсЛист), "; ", "") + СокрЛП(ПрайсЛист);	
			//bolshevykh@a-prof.ru 16.03.2015			
			
			СтрПланПродаж.ППП_ПрайсЛист = СтрПрайсЛист;	
			
			Если ЦенаПрайсЛист = 0 Тогда
				//m.ionov@a-prof.ru 08.05.2015
				// В таблицу нулевых цен добавили КатегорияКлиента (Канал продаж)
				//----m.ionov@a-prof.ru---
				НулевыеЦеныСтроки = Объект.ППП_ТаблицаНулевыхЦен.НайтиСтроки(Новый Структура("Дата,Брендообъем,ПрайсЛист,КатегорияКлиента", Объект.ДатаПланирования, Брендообъем, ПрайсЛист, КатегорияКлиента));
				Если НулевыеЦеныСтроки.Количество() > 0 тогда
					Если НулевыеЦеныСтроки[0].Цена <> 0 тогда
						ЦенаПрайсЛист = НулевыеЦеныСтроки[0].Цена;
						//СтрПланПродаж.ППП_ПрайсЛист = НулевыеЦеныСтроки[0].ПрайсЛист;
					Иначе
						Если СпИсключающийДублиСообщений.НайтиПоЗначению(СокрЛП(Брендообъем)+ "_" + СокрЛП(КатегорияКлиента) + "_" +СокрЛП(ПрайсЛист)) = Неопределено Тогда
							ОбщегоНазначения.Сообщение("Для брендообъема :"+ СокрЛП(Брендообъем)+ " и канала продаж: " + СокрЛП(КатегорияКлиента) + " и прайс листа: " + СокрЛП(ПрайсЛист) + " в таблице нулевых цен установлена нулевая цена!");
							СпИсключающийДублиСообщений.Добавить(СокрЛП(Брендообъем) + "_" + СокрЛП(КатегорияКлиента) + "_" + СокрЛП(ПрайсЛист));
						КонецЕсли;
					КонецЕсли;
				Иначе
					ОбщегоНазначения.Сообщение("Добавлен брендообъем :"+ СокрЛП(Брендообъем)+ " и канал продаж: " + СокрЛП(КатегорияКлиента) + " и прайс лист: " + СокрЛП(ПрайсЛист) + " в таблицу нулевых цен! (строка плана:"+СокрЛП(СтрПланПродаж.НомерСтроки)+")");
					СтрНоваяТаблицаНулевыхЦен = Объект.ППП_ТаблицаНулевыхЦен.Добавить();
					СтрНоваяТаблицаНулевыхЦен.Дата = Объект.ДатаПланирования;
					СтрНоваяТаблицаНулевыхЦен.Брендообъем =  Брендообъем;
					СтрНоваяТаблицаНулевыхЦен.ПрайсЛист   =  ПрайсЛист; 
					СтрНоваяТаблицаНулевыхЦен.КатегорияКлиента   =  КатегорияКлиента; 
					
					СпИсключающийДублиСообщений.Добавить(СокрЛП(Брендообъем) + "_" + СокрЛП(КатегорияКлиента) + "_" + СокрЛП(ПрайсЛист));
				КонецЕсли;
			КонецЕсли;
						
		ИначеЕсли ЗначениеЗаполнено(Брендообъем) И ЦенаПрайсЛист = 0 И НайденныеРасчитаныеЦены.Количество() = 0 Тогда
			ЦенаПрайсЛист = 0;
			сч = 0;
			
			ЗапросН.УстановитьПараметр("Брендообъем", Брендообъем);
			РезультатН = ЗапросН.Выполнить();
			
			ВыборкаДетальныеЗаписиН = РезультатН.Выбрать();
			
			ЦенаПрайсЛистСумма = 0;
			
			//m.ionov@a-prof.ru 25.03.2015
			//посчитаем что разные прайсы для разных SKU не ведутся
			//bolshevykh@a-prof.ru 25.05.2015
			СпТиповЦен = ПЦ_Ценообразование.ПолучитьТипЦенПродажи(ДатаПланаПред, Регион, ПроектГП, КаналПродаж, УсловиеПоставки, Контрагент, ДоговорКонтрагента, АдресПоставки, ТоварнаяКатегория, Брендообъем, , );
			//-------bolshevykh@a-prof.ru 25.05.2015
			ЦенаПрайсЛист = 0;
			
			Если СпТиповЦен.Количество() > 0 Тогда
				ПрайсЛист = СпТиповЦен[0].Значение;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПрайсЛист) Тогда
				Если ИтоговыйСписокТиповЦен.НайтиПоЗначению(ПрайсЛист) = Неопределено Тогда
					ИтоговыйСписокТиповЦен.Добавить(ПрайсЛист);
				КонецЕсли;			
			КонецЕсли;
			//----m.ionov@a-prof.ru---
            					
			Если Не РезультатН.Пустой() Тогда
				Пока ВыборкаДетальныеЗаписиН.Следующий() Цикл
					//m.ionov@a-prof.ru 25.03.2015
					//посчитаем что разные прайсы для разных SKU не ведутся
					//СпТиповЦен = ПЦ_Ценообразование.ПолучитьТипЦенПродажи(ДатаПлана, Регион, ПроектГП, КаналПродаж, УсловиеПоставки, Контрагент, ДоговорКонтрагента, АдресПоставки, ТоварнаяКатегория, Брендообъем, ВыборкаДетальныеЗаписиН.Ссылка, ХарактеристикаНоменклатуры);
					//ЦенаПрайсЛист = 0;
					//					
					//Если СпТиповЦен.Количество() > 0 Тогда
					//	ПрайсЛист = СпТиповЦен[0].Значение;
					//КонецЕсли;
					//----m.ionov@a-prof.ru---
					
					//bolshevykh@a-prof.ru 25.05.2015
					ЦенаПрайсЛист = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаДетальныеЗаписиН.Ссылка, ХарактеристикаНоменклатуры,ПрайсЛист, ДатаПланаПред, ЕдиницаИзмерения,
					,,,, ДоговорКонтрагента,УсловиеПродаж,АдресПоставки,Контрагент);
					
					Если СпТиповЦен.Количество()>0 и ПрайсЛист.ВалютаЦены <> Сценарий.Валюта тогда 			
						ЦенаПрайсЛист = ПересчитатьВВалютуСценария(ЦенаПрайсЛист,Сценарий,ПрайсЛист.ВалютаЦены,ДатаПланаПред);
					КонецЕсли;
					//----------bolshevykh@a-prof.ru 25.05.2015
					
					//Если ЗначениеЗаполнено(ПрайсЛист) Тогда
					//	Если ИтоговыйСписокТиповЦен.НайтиПоЗначению(ПрайсЛист) = Неопределено Тогда
					//		ИтоговыйСписокТиповЦен.Добавить(ПрайсЛист);
					//	КонецЕсли;			
					//КонецЕсли;
					
					//Если ЦенаПрайсЛист = 0 Тогда
					//	НулевыеЦеныСтроки = ППП_ТаблицаНулевыхЦен.НайтиСтроки(Новый Структура("Дата,Брендообъем,ПрайсЛист", ДатаПланирования, Брендообъем, ПрайсЛист));
					//	Если НулевыеЦеныСтроки.Количество() > 0 тогда
					//		Если НулевыеЦеныСтроки[0].Цена <> 0 тогда
					//			ЦенаПрайсЛист = НулевыеЦеныСтроки[0].Цена;
					//			//СтрПланПродаж.ППП_ПрайсЛист = НулевыеЦеныСтроки[0].ПрайсЛист;
					//		Иначе
					//			Если СпИсключающийДублиСообщений.НайтиПоЗначению(СокрЛП(Брендообъем)+"_"+СокрЛП(ПрайсЛист)) = Неопределено Тогда
					//				ОбщегоНазначения.Сообщение("Для брендообъема :"+ СокрЛП(Брендообъем)+" и прайс листа: " + СокрЛП(ПрайсЛист) + " в таблице нулевых цен установлена нулевая цена!");
					//				СпИсключающийДублиСообщений.Добавить(СокрЛП(Брендообъем)+"_"+СокрЛП(ПрайсЛист));
					//			КонецЕсли;
					//		КонецЕсли;
					//	Иначе
					//		ОбщегоНазначения.Сообщение("Добавлен брендообъем :"+ СокрЛП(Брендообъем)+ " и прайс лист: " + СокрЛП(ПрайсЛист) + " в таблицу нулевых цен!");
					//		СтрНоваяТаблицаНулевыхЦен = ППП_ТаблицаНулевыхЦен.Добавить();
					//		СтрНоваяТаблицаНулевыхЦен.Дата = ДатаПланирования;
					//		СтрНоваяТаблицаНулевыхЦен.Брендообъем =  Брендообъем;
					//		СтрНоваяТаблицаНулевыхЦен.ПрайсЛист   =  ПрайсЛист; 
					//		
					//		СпИсключающийДублиСообщений.Добавить(СокрЛП(Брендообъем)+"_"+СокрЛП(ПрайсЛист));
					//	КонецЕсли;
					//КонецЕсли;  					
					
					ЦенаПрайсЛистСумма = ЦенаПрайсЛистСумма + ЦенаПрайсЛист;
					
					Если ЦенаПрайсЛист > 0 Тогда
						сч = сч + 1;
						//m.ionov@a-prof.ru 10.03.2015
						//Нулевые цены не должны попадать в расчет средней цены
						//Для ускорения расчета можно будет брать только одну цену
						//Прервать; 
					КонецЕсли;
					
					//Для каждого ПрайсЛист Из СпТиповЦен Цикл
					//	
					//	Если ИтоговыйСписокТиповЦен.НайтиПоЗначению(ПрайсЛист.Значение) = Неопределено Тогда
					//		ИтоговыйСписокТиповЦен.Добавить(ПрайсЛист.Значение);
					//	КонецЕсли;			
					//КонецЦикла; 
					
				КонецЦикла;
			Иначе
				//bolshevykh@a-prof.ru 25.05.2015
				СпТиповЦен = ПЦ_Ценообразование.ПолучитьТипЦенПродажи(ДатаПланаПред, Регион, ПроектГП, КаналПродаж, УсловиеПоставки, Контрагент, ДоговорКонтрагента, АдресПоставки, ТоварнаяКатегория, Брендообъем, , );
				//-------bolshevykh@a-prof.ru 25.05.2015
			
				Если СпТиповЦен.Количество() > 0 Тогда
					ПрайсЛист = СпТиповЦен[0].Значение;
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(ПрайсЛист) Тогда
					Если ИтоговыйСписокТиповЦен.НайтиПоЗначению(ПрайсЛист) = Неопределено Тогда
						ИтоговыйСписокТиповЦен.Добавить(ПрайсЛист);
					КонецЕсли;			
				КонецЕсли;
				
				//НулевыеЦеныСтроки = ППП_ТаблицаНулевыхЦен.НайтиСтроки(Новый Структура("Дата,Брендообъем,ПрайсЛист", ДатаПланирования, Брендообъем, ПрайсЛист));
				//Если НулевыеЦеныСтроки.Количество() > 0 тогда
				//	Если НулевыеЦеныСтроки[0].Цена <> 0 тогда
				//		ЦенаПрайсЛист = НулевыеЦеныСтроки[0].Цена;
				//		ЦенаПрайсЛистСумма = ЦенаПрайсЛист;
				//		сч = 1;
				//		//СтрПланПродаж.ППП_ПрайсЛист = НулевыеЦеныСтроки[0].ПрайсЛист;
				//	Иначе
				//		Если СпИсключающийДублиСообщений.НайтиПоЗначению(СокрЛП(Брендообъем)+"_"+СокрЛП(ПрайсЛист)) = Неопределено Тогда
				//			ОбщегоНазначения.Сообщение("Для брендообъема :"+ СокрЛП(Брендообъем)+" и прайс листа: " + СокрЛП(ПрайсЛист) + " в таблице нулевых цен установлена нулевая цена!");
				//			СпИсключающийДублиСообщений.Добавить(СокрЛП(Брендообъем)+"_"+СокрЛП(ПрайсЛист));
				//		КонецЕсли;
				//	КонецЕсли;
				//Иначе
				//	ОбщегоНазначения.Сообщение("Добавлен брендообъем :"+ СокрЛП(Брендообъем)+ " и прайс лист: " + СокрЛП(ПрайсЛист) + " в таблицу нулевых цен!");
				//	СтрНоваяТаблицаНулевыхЦен = ППП_ТаблицаНулевыхЦен.Добавить();
				//	СтрНоваяТаблицаНулевыхЦен.Дата = ДатаПланирования;
				//	СтрНоваяТаблицаНулевыхЦен.Брендообъем =  Брендообъем;
				//	СтрНоваяТаблицаНулевыхЦен.ПрайсЛист   =  ПрайсЛист; 
				//	
				//	СпИсключающийДублиСообщений.Добавить(СокрЛП(Брендообъем)+"_"+СокрЛП(ПрайсЛист));
				//КонецЕсли;
			КонецЕсли;
			
			ЦенаПрайсЛист = ЦенаПрайсЛистСумма / ?(сч=0,1,сч);
			
			Если ЦенаПрайсЛист = 0 Тогда
				//m.ionov@a-prof.ru 08.05.2015
				// В таблицу нулевых цен добавили КатегорияКлиента (Канал продаж)
				//----m.ionov@a-prof.ru---
				НулевыеЦеныСтроки = Объект.ППП_ТаблицаНулевыхЦен.НайтиСтроки(Новый Структура("Дата,Брендообъем,ПрайсЛист,КатегорияКлиента", Объект.ДатаПланирования, Брендообъем, ПрайсЛист, КатегорияКлиента));
				Если НулевыеЦеныСтроки.Количество() > 0 тогда
					Если НулевыеЦеныСтроки[0].Цена <> 0 тогда
						ЦенаПрайсЛист = НулевыеЦеныСтроки[0].Цена;
						//СтрПланПродаж.ППП_ПрайсЛист = НулевыеЦеныСтроки[0].ПрайсЛист;
					Иначе
						Если СпИсключающийДублиСообщений.НайтиПоЗначению(СокрЛП(Брендообъем)+ "_" + СокрЛП(КатегорияКлиента) + "_" +СокрЛП(ПрайсЛист)) = Неопределено Тогда
							ОбщегоНазначения.Сообщение("Для брендообъема :"+ СокрЛП(Брендообъем)+ " и канала продаж: " + СокрЛП(КатегорияКлиента) + " и прайс листа: " + СокрЛП(ПрайсЛист) + " в таблице нулевых цен установлена нулевая цена!");
							СпИсключающийДублиСообщений.Добавить(СокрЛП(Брендообъем)+ "_" + СокрЛП(КатегорияКлиента) + "_" +СокрЛП(ПрайсЛист));
						КонецЕсли;
					КонецЕсли;
				Иначе
					ОбщегоНазначения.Сообщение("Добавлен брендообъем :"+ СокрЛП(Брендообъем)+ " и канал продаж: " + СокрЛП(КатегорияКлиента) + " и прайс лист: " + СокрЛП(ПрайсЛист) + " в таблицу нулевых цен! (строка плана:"+СокрЛП(СтрПланПродаж.НомерСтроки)+")");
					СтрНоваяТаблицаНулевыхЦен = Объект.ППП_ТаблицаНулевыхЦен.Добавить();
					СтрНоваяТаблицаНулевыхЦен.Дата = Объект.ДатаПланирования;
					СтрНоваяТаблицаНулевыхЦен.Брендообъем =  Брендообъем;
					СтрНоваяТаблицаНулевыхЦен.ПрайсЛист   =  ПрайсЛист; 
					СтрНоваяТаблицаНулевыхЦен.КатегорияКлиента   =  КатегорияКлиента;
					
					СпИсключающийДублиСообщений.Добавить(СокрЛП(Брендообъем)+ "_" + СокрЛП(КатегорияКлиента) + "_" +СокрЛП(ПрайсЛист));
				КонецЕсли;
			КонецЕсли;  					

			
			СтрПрайсЛист = ""; 			
			Для каждого ВыбПрайсЛист  Из ИтоговыйСписокТиповЦен Цикл
				
				СтрПрайсЛист = СтрПрайсЛист + ?(Не ПустаяСтрока(СтрПрайсЛист), "; ", "") + СокрЛП(ВыбПрайсЛист.Значение);	
				
			КонецЦикла; 	
			
			СтрПланПродаж.ППП_ПрайсЛист = СтрПрайсЛист;
		КонецЕсли;
		
		////Ищем нулевые цены в таблице нулевых цен
		//Если ЦенаПрайсЛист = 0 И НайденныеРасчитаныеЦены.Количество() = 0 тогда
		//	
		//	НулевыеЦеныСтроки = ППП_ТаблицаНулевыхЦен.НайтиСтроки(Новый Структура("Дата,Брендообъем,ПрайсЛист", ДатаПланирования, Брендообъем, ПрайсЛист));
		//	Если НулевыеЦеныСтроки.Количество() > 0 тогда
		//		Если НулевыеЦеныСтроки[0].Цена <> 0 тогда
		//			ЦенаПрайсЛист = НулевыеЦеныСтроки[0].Цена;
		//			//СтрПланПродаж.ППП_ПрайсЛист = НулевыеЦеныСтроки[0].ПрайсЛист;
		//		Иначе
		//			Если СпИсключающийДублиСообщений.НайтиПоЗначению(Брендообъем) = Неопределено Тогда
		//				ОбщегоНазначения.Сообщение("Для брендообъема :"+ СокрЛП(Брендообъем)+" в таблице нулевых цен установлена нулевая цена!");
		//				СпИсключающийДублиСообщений.Добавить(Брендообъем);
		//			КонецЕсли;
		//		КонецЕсли;
		//	Иначе
		//		ОбщегоНазначения.Сообщение("Добавлен брендообъем :"+ СокрЛП(Брендообъем)+" в таблицу нулевых цен  ");
		//		СтрНоваяТаблицаНулевыхЦен = ППП_ТаблицаНулевыхЦен.Добавить();
		//		СтрНоваяТаблицаНулевыхЦен.Дата = ДатаПланирования;
		//		СтрНоваяТаблицаНулевыхЦен.Брендообъем =  Брендообъем;
		//		СтрНоваяТаблицаНулевыхЦен.ПрайсЛист   =  ПрайсЛист; 
		//		
		//		СпИсключающийДублиСообщений.Добавить(Брендообъем);
		//	КонецЕсли;
		//КонецЕсли;
		
		СтрПланПродаж.ППП_ЦенаПоПрайсЛистам = ЦенаПрайсЛист;
		СтрПланПродаж.ППП_СуммаПрайсЛист = СтрПланПродаж.Количество * ЦенаПрайсЛист; 
		
		//m.ionov@a-prof.ru 10.03.2015
		//Добавим данные в таблицу расчитанных цен
		//Если была расчитана нулевая цена, то не смысла ее считать заново - и тоже добавляем в нулевые цены
		//Так как по ценовой политике типы цен ведутся максимум до брендообъемов
		Если НайденныеРасчитаныеЦены.Количество() = 0 Тогда
			//НайденныеРасчитаныеЦены = ТаблицаРасчитаныхЦен.НайтиСтроки(Новый Структура("Дата,Регион,КаналПродаж,УсловиеПоставки,Контрагент,Брендообъем,ТоварнаяКатегория",ДатаПлана,Регион,КаналПродаж,УсловиеПоставки,Контрагент,Брендообъем,ТоварнаяКатегория));
			//Если НайденныеРасчитаныеЦены.Количество() = 0 тогда	
				НоваяСтрокаРассчитанныхЦен = ТаблицаРасчитаныхЦен.Добавить();
				
				НоваяСтрокаРассчитанныхЦен.Дата = ДатаПлана;
				НоваяСтрокаРассчитанныхЦен.Регион = Регион;
				НоваяСтрокаРассчитанныхЦен.КаналПродаж = КаналПродаж;
				НоваяСтрокаРассчитанныхЦен.УсловиеПоставки = УсловиеПоставки;
				НоваяСтрокаРассчитанныхЦен.Контрагент = Контрагент;
				НоваяСтрокаРассчитанныхЦен.Брендообъем = Брендообъем;
				НоваяСтрокаРассчитанныхЦен.ТоварнаяКатегория = ТоварнаяКатегория;
				
				НоваяСтрокаРассчитанныхЦен.Цена = ЦенаПрайсЛист;
				НоваяСтрокаРассчитанныхЦен.ТипыЦен = СтрПланПродаж.ППП_ПрайсЛист;					
			//Иначе
			//	НайденныеРасчитаныеЦены[0].Цена    = ЦенаПрайсЛист;
			//	НайденныеРасчитаныеЦены[0].ТипыЦен = СтрПланПродаж.ППП_ПрайсЛист;	
			//КонецЕсли;
		Иначе
			НайденныеРасчитаныеЦены[0].Цена    = ЦенаПрайсЛист;
			НайденныеРасчитаныеЦены[0].ТипыЦен = СтрПланПродаж.ППП_ПрайсЛист;
		КонецЕсли; 
		
		Если ЦенаПрайсЛист = 0 Тогда
			СтрПланПродаж.ППП_СуммаПовышенияЦен = 0;
			
			//bolshevykh@a-prof.ru 25.05.2015
            СтрПланПродаж.ППП_ЦенаПовышенияЦен = 0;
			//-----bolshevykh@a-prof.ru 25.05.2015

			СтрПланПродаж.ППП_СуммаПромоАкции = 0;
			СтрПланПродаж.ППП_СуммаГросс = 0;
			СтрПланПродаж.ППП_СуммаБюджетРетробонусов = 0;
			СтрПланПродаж.ППП_СуммаМаркетинговыеУслуги = 0;
			СтрПланПродаж.ППП_СуммаЭТК = 0;
			СтрПланПродаж.Сумма = 0;
			СтрПланПродаж.Цена = 0;
			
			ЕстьНулевыеЦены = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ЕстьНулевыеЦены Тогда
			//Дальнейшие расчеты нет смысла делать - только выявляем не заполненные цены
			СтрПланПродаж.Цена = ЦенаПрайсЛист;
			Продолжить;
		КонецЕсли;
		
		#Если Клиент Тогда
			мФормаПрогрессора.КомментарийЗначения = "Расчет выручки до скидок ...";
		#КонецЕсли
		
		//Сумма с повышением цен
		ЗапросПЦ.УстановитьПараметр("КатегорияКлиента", КатегорияКлиента);
		ЗапросПЦ.УстановитьПараметр("Брендообъем", Брендообъем);
		ЗапросПЦ.УстановитьПараметр("Месяц", НачалоМесяца(СтрПланПродаж.Период));
		РезультатПЦ = ЗапросПЦ.Выполнить();
		
		ВыборкаДетальныеЗаписиПЦ = РезультатПЦ.Выбрать();
		Если ВыборкаДетальныеЗаписиПЦ.Следующий() тогда
			
			СтрПланПродаж.ППП_ПовышениеЦен = СокрЛП(ВыборкаДетальныеЗаписиПЦ.Процент)+"%";
			СтрПланПродаж.ППП_СуммаПовышенияЦен = СтрПланПродаж.ППП_СуммаПрайсЛист + (СтрПланПродаж.ППП_СуммаПрайсЛист * (ВыборкаДетальныеЗаписиПЦ.Процент/100)); 
			
			Если ВыборкаДетальныеЗаписиПЦ.Количество() > 1 тогда
				ОбщегоНазначения.Сообщение("По строке № "+ СокрЛП(СтрПланПродаж.НомерСтроки)+ " найдено более 1 показателя повышения цен");
			КонецЕсли;
		иначе
			СтрПланПродаж.ППП_ПовышениеЦен = "";
			СтрПланПродаж.ППП_СуммаПовышенияЦен = СтрПланПродаж.ППП_СуммаПрайсЛист; 
		КонецЕсли;
		
		//bolshevykh@a-prof.ru 25.05.2015
		Если НайденныеРасчитаныеЦены.Количество() = 0 Тогда
			НоваяСтрокаРассчитанныхЦен.ЦенаСПовышением = ?(СтрПланПродаж.Количество = 0, 0, СтрПланПродаж.ППП_СуммаПовышенияЦен / СтрПланПродаж.Количество);					
		иначе
			НайденныеРасчитаныеЦены[0].ЦенаСПовышением = ?(СтрПланПродаж.Количество = 0, 0, СтрПланПродаж.ППП_СуммаПовышенияЦен / СтрПланПродаж.Количество);
		КонецЕсли;
		//-----bolshevykh@a-prof.ru 25.05.2015
		
		//bolshevykh@a-prof.ru 26.05.2015
		СтрПланПродаж.ППП_ЦенаПовышенияЦен = ?(СтрПланПродаж.Количество = 0, 0, СтрПланПродаж.ППП_СуммаПовышенияЦен / СтрПланПродаж.Количество);					
		//-----bolshevykh@a-prof.ru 26.05.2015
		
		СтрПланПродаж.ППП_ПромоАкции = "";
		СтрПланПродаж.ППП_СуммаПромоАкции = 0;
		СтрПланПродаж.ППП_БюджетРетробонусов = "";
		СтрПланПродаж.ППП_СуммаБюджетРетробонусов = 0;
		СтрПланПродаж.ППП_МаркетинговыеУслуги = "";
		СтрПланПродаж.ППП_СуммаМаркетинговыеУслуги = 0;
		СтрПланПродаж.ППП_БюджетЭТК = "";
		СтрПланПродаж.ППП_СуммаЭТК = 0;
		
		СтрПланПродаж.ППП_СуммаГросс = СтрПланПродаж.ППП_СуммаПовышенияЦен;
		
	КонецЦикла;
	//Конец 1 итерации (цены,Выручка до скидок)
			
	//bolshevykh@a-prof.ru 25.05.2015
	//ЭлементыФормы.НадписьЕстьНулевые.Видимость = ЕстьНулевыеЦены;
	//-------bolshevykh@a-prof.ru 25.05.2015
	
	//Если есть нулевые цены то прекращаем расчет
	Если ЕстьНулевыеЦены тогда
		ОбщегоНазначения.Сообщение("Существуют нулевые цены для продолжения расчета необходимо заполнить цены!");
		ЗапросПЦ1.Текст = 
		" УНИЧТОЖИТЬ тППП_ГрафикПовышенияЦенНаГП;
		| УНИЧТОЖИТЬ тППП_ПланПроведенияПромоАкцийСрезПоследних;
		| УНИЧТОЖИТЬ тППП_ПланРетробонусовСрезПоследних;
		| УНИЧТОЖИТЬ тППП_ПланМаркетинговыхУслугСрезПоследних;
		| УНИЧТОЖИТЬ тППП_ПланЭТКСрезПоследних";
		ЗапросПЦ1.Выполнить();
		#Если Клиент Тогда
			мФормаПрогрессора.Закрыть();
		#КонецЕсли
		//bolshevykh@a-prof.ru 25.05.2015
		//ОбновитьТабличноеПоле2();
		//Сообщить(ТекущаяДата());
		//-------bolshevykh@a-prof.ru 25.05.2015
		Возврат ТаблицаРасчитаныхЦен;
	КонецЕсли;
	
	//Состояние("Формирование запросов по предпосылкам");
	//
	//ТабКК.Свернуть("КатегорияКлиента");
	//спКатегорияКлиент = ТабКК.ВыгрузитьКолонку("КатегорияКлиента");
	//
	//ТабД.Свернуть("Дивизион");
	//спДивизион = ТабД.ВыгрузитьКолонку("Дивизион");
	//
	//ТабП.Свернуть("Проект");
	//спПроект = ТабП.ВыгрузитьКолонку("Проект");
	//
	//ТабБ.Свернуть("Брендообъем");
	//спБрендообъем = ТабБ.ВыгрузитьКолонку("Брендообъем");
	//
	//ТабВ.Свернуть("Вывеска");
	//спВывеска = ТабВ.ВыгрузитьКолонку("Вывеска");
	//
	//ТабПер.Свернуть("Период");
	//спПериод = ТабПер.ВыгрузитьКолонку("Период");
	//
	////Временная таблица 
	//ЗапросПЦ1 = Новый Запрос;
	//ЗапросПЦ1.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ППП_ГрафикПовышенияЦенНаГПСрезПоследних.Брендообъем КАК Брендообъем,
	//	|	ППП_ГрафикПовышенияЦенНаГПСрезПоследних.Процент,
	//	|	ППП_ГрафикПовышенияЦенНаГПСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
	//	|	ППП_ГрафикПовышенияЦенНаГПСрезПоследних.Месяц КАК Месяц
	//	|ПОМЕСТИТЬ тППП_ГрафикПовышенияЦенНаГП
	//	|ИЗ
	//	|	РегистрСведений.ППП_ГрафикПовышенияЦенНаГП.СрезПоследних(
	//	|			,
	//	|			КатегорияКлиента В (&КатегорияКлиента)
	//	|				И Брендообъем В (&Брендообъем)
	//	|				И Месяц В (&Месяц)) КАК ППП_ГрафикПовышенияЦенНаГПСрезПоследних
	//	|ГДЕ
	//	|	ППП_ГрафикПовышенияЦенНаГПСрезПоследних.Процент <> 0
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Месяц КАК Месяц,
	//	|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Дивизион КАК Дивизион,
	//	|	ППП_ПланПроведенияПромоАкцийСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
	//	|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Брендообъем КАК Брендообъем,
	//	|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Вывеска КАК Вывеска,
	//	|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Показатель,
	//	|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Группа,
	//	|	ППП_ПланПроведенияПромоАкцийСрезПоследних.ВидПоказателя
	//	|ПОМЕСТИТЬ тППП_ПланПроведенияПромоАкцийСрезПоследних
	//	|ИЗ
	//	|	РегистрСведений.ППП_ПланПроведенияПромоАкций.СрезПоследних(
	//	|			,
	//	|			КатегорияКлиента В (&КатегорияКлиента)
	//	|				И Дивизион В (&Дивизион)
	//	|				И Вывеска В (&Вывеска)
	//	|				И Брендообъем В (&Брендообъем)
	//	|				И Месяц В (&Месяц)) КАК ППП_ПланПроведенияПромоАкцийСрезПоследних
	//	|ГДЕ
	//	|	ППП_ПланПроведенияПромоАкцийСрезПоследних.Показатель <> 0
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ППП_ПланРетробонусовСрезПоследних.Месяц КАК Месяц,
	//	|	ППП_ПланРетробонусовСрезПоследних.Дивизион КАК Дивизион,
	//	|	ППП_ПланРетробонусовСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
	//	|	ППП_ПланРетробонусовСрезПоследних.Вывеска КАК Вывеска,
	//	|	ППП_ПланРетробонусовСрезПоследних.Проект КАК Проект,
	//	|	ППП_ПланРетробонусовСрезПоследних.Показатель,
	//	|	ППП_ПланРетробонусовСрезПоследних.Группа,
	//	|	ППП_ПланРетробонусовСрезПоследних.ВидПоказателя
	//	|ПОМЕСТИТЬ тППП_ПланРетробонусовСрезПоследних
	//	|ИЗ
	//	|	РегистрСведений.ППП_ПланРетробонусов.СрезПоследних(
	//	|			,
	//	|			КатегорияКлиента В (&КатегорияКлиента)
	//	|				И Дивизион В (&Дивизион)
	//	|				И Вывеска В (&Вывеска)
	//	|				И Проект В (&Проект)
	//	|				И Месяц В (&Месяц)) КАК ППП_ПланРетробонусовСрезПоследних
	//	|ГДЕ
	//	|	ППП_ПланРетробонусовСрезПоследних.Показатель <> 0
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ППП_ПланМаркетинговыхУслугСрезПоследних.Месяц КАК Месяц,
	//	|	ППП_ПланМаркетинговыхУслугСрезПоследних.Дивизион КАК Дивизион,
	//	|	ППП_ПланМаркетинговыхУслугСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
	//	|	ППП_ПланМаркетинговыхУслугСрезПоследних.Вывеска КАК Вывеска,
	//	|	ППП_ПланМаркетинговыхУслугСрезПоследних.Проект КАК Проект,
	//	|	ППП_ПланМаркетинговыхУслугСрезПоследних.Показатель,
	//	|	ППП_ПланМаркетинговыхУслугСрезПоследних.Группа,
	//	|	ППП_ПланМаркетинговыхУслугСрезПоследних.ВидПоказателя
	//	|ПОМЕСТИТЬ тППП_ПланМаркетинговыхУслугСрезПоследних
	//	|ИЗ
	//	|	РегистрСведений.ППП_ПланМаркетинговыхУслуг.СрезПоследних(
	//	|			,
	//	|			КатегорияКлиента В (&КатегорияКлиента)
	//	|				И Дивизион В (&Дивизион)
	//	|				И Вывеска В (&Вывеска)
	//	|				И Проект В (&Проект)
	//	|				И Месяц В (&Месяц)) КАК ППП_ПланМаркетинговыхУслугСрезПоследних
	//	|ГДЕ
	//	|	ППП_ПланМаркетинговыхУслугСрезПоследних.Показатель <> 0
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	ППП_ПланЭТКСрезПоследних.Месяц КАК Месяц,
	//	|	ППП_ПланЭТКСрезПоследних.Дивизион КАК Дивизион,
	//	|	ППП_ПланЭТКСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
	//	|	ППП_ПланЭТКСрезПоследних.Показатель,
	//	|	ППП_ПланЭТКСрезПоследних.Группа,
	//	|	ППП_ПланЭТКСрезПоследних.ВидПоказателя
	//	|ПОМЕСТИТЬ тППП_ПланЭТКСрезПоследних
	//	|ИЗ
	//	|	РегистрСведений.ППП_ПланЭТК.СрезПоследних(
	//	|			,
	//	|			КатегорияКлиента В (&КатегорияКлиента)
	//	|				И Дивизион В (&Дивизион)
	//	|				И Месяц В (&Месяц)) КАК ППП_ПланЭТКСрезПоследних
	//	|ГДЕ
	//	|	ППП_ПланЭТКСрезПоследних.Показатель <> 0";
	//	
	//ЗапросПЦ1.УстановитьПараметр("Месяц", спПериод);
	//ЗапросПЦ1.УстановитьПараметр("КатегорияКлиента", спКатегорияКлиент);
	//ЗапросПЦ1.УстановитьПараметр("Брендообъем", спБрендообъем);
	//ЗапросПЦ1.УстановитьПараметр("Дивизион", спДивизион);
	//ЗапросПЦ1.УстановитьПараметр("Вывеска", спВывеска);
	//ЗапросПЦ1.УстановитьПараметр("Проект", спПроект);
	//ЗапросПЦ1.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//ЗапросПЦ1.Выполнить();
	//			
	//ЗапросПА = Новый Запрос;
	//ЗапросПА.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	//ЗапросПА.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Дивизион КАК Дивизион,
	//	|	тППП_ПланПроведенияПромоАкцийСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
	//	|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Брендообъем КАК Брендообъем,
	//	|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Вывеска КАК Вывеска,
	//	|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Показатель,
	//	|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Группа,
	//	|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Месяц,
	//	|	тППП_ПланПроведенияПромоАкцийСрезПоследних.ВидПоказателя
	//	|ИЗ
	//	|	тППП_ПланПроведенияПромоАкцийСрезПоследних
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Дивизион УБЫВ,
	//	|	КатегорияКлиента УБЫВ,
	//	|	Брендообъем УБЫВ,
	//	|	Вывеска УБЫВ";

	//
	//ЗапросРБ = Новый Запрос;
	//ЗапросРБ.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	//ЗапросРБ.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	тППП_ПланРетробонусовСрезПоследних.Дивизион КАК Дивизион,
	//	|	тППП_ПланРетробонусовСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
	//	|	тППП_ПланРетробонусовСрезПоследних.Вывеска КАК Вывеска,
	//	|	тППП_ПланРетробонусовСрезПоследних.Проект КАК Проект,
	//	|	тППП_ПланРетробонусовСрезПоследних.Показатель,
	//	|	тППП_ПланРетробонусовСрезПоследних.Группа,
	//	|	тППП_ПланРетробонусовСрезПоследних.Месяц,
	//	|	тППП_ПланРетробонусовСрезПоследних.ВидПоказателя
	//	|ИЗ
	//	|	тППП_ПланРетробонусовСрезПоследних КАК тППП_ПланРетробонусовСрезПоследних
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Дивизион УБЫВ,
	//	|	КатегорияКлиента УБЫВ,
	//	|	Вывеска УБЫВ,
	//	|	Проект УБЫВ";
	//		
	//ЗапросМУ = Новый Запрос;
	//ЗапросМУ.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	//ЗапросМУ.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	тППП_ПланМаркетинговыхУслугСрезПоследних.Дивизион КАК Дивизион,
	//	|	тППП_ПланМаркетинговыхУслугСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
	//	|	тППП_ПланМаркетинговыхУслугСрезПоследних.Вывеска КАК Вывеска,
	//	|	тППП_ПланМаркетинговыхУслугСрезПоследних.Проект КАК Проект,
	//	|	тППП_ПланМаркетинговыхУслугСрезПоследних.Показатель,
	//	|	тППП_ПланМаркетинговыхУслугСрезПоследних.Группа,
	//	|	тППП_ПланМаркетинговыхУслугСрезПоследних.Месяц,
	//	|	тППП_ПланМаркетинговыхУслугСрезПоследних.ВидПоказателя
	//	|ИЗ
	//	|	тППП_ПланМаркетинговыхУслугСрезПоследних КАК тППП_ПланМаркетинговыхУслугСрезПоследних
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Дивизион УБЫВ,
	//	|	КатегорияКлиента УБЫВ,
	//	|	Вывеска УБЫВ,
	//	|	Проект УБЫВ";
	//	
	//ЗапросЭТК = Новый Запрос;
	//ЗапросЭТК.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	//ЗапросЭТК.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	тППП_ПланЭТКСрезПоследних.Дивизион КАК Дивизион,
	//	|	тППП_ПланЭТКСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
	//	|	тППП_ПланЭТКСрезПоследних.Показатель,
	//	|	тППП_ПланЭТКСрезПоследних.Группа,
	//	|	тППП_ПланЭТКСрезПоследних.Месяц,
	//	|	тППП_ПланЭТКСрезПоследних.ВидПоказателя
	//	|ИЗ
	//	|	тППП_ПланЭТКСрезПоследних КАК тППП_ПланЭТКСрезПоследних
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Дивизион УБЫВ,
	//	|	КатегорияКлиента УБЫВ";

	
	ТаблГупповыхСумм = Новый ТаблицаЗначений;
	ТаблГупповыхСумм.Колонки.Добавить("Аналитика");
	ТаблГупповыхСумм.Колонки.Добавить("Группа");
	ТаблГупповыхСумм.Колонки.Добавить("Сумма");
	ТаблГупповыхСумм.Колонки.Добавить("СуммаРаспределенная");
	
	//Начало 2 итерации (Перебор предпосылок Промоплан, Выручка гросс)
	ЗапросПАсумма = Новый Запрос;
	ЗапросПАсумма.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	ЗапросПАсумма.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Дивизион КАК Дивизион,
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Брендообъем КАК Брендообъем,
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Вывеска КАК Вывеска
		|ИЗ
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних
		|ГДЕ 
		|	тППП_ПланПроведенияПромоАкцийСрезПоследних.Месяц = &Месяц
		|	И тППП_ПланПроведенияПромоАкцийСрезПоследних.Группа = &Группа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дивизион УБЫВ,
		|	КатегорияКлиента УБЫВ,
		|	Брендообъем УБЫВ,
		|	Вывеска УБЫВ";
	
	#Если Клиент Тогда	
		мФормаПрогрессора.КомментарийЗначения = "Распределение скидок ...";
	#КонецЕсли
	
	РезультатПА = ЗапросПА.Выполнить();
	ВыборкаДетальныеЗаписиПА = РезультатПА.Выгрузить();
	
	//bolshevykh@a-prof.ru 20.03.2015
	#Если Клиент Тогда
		мФормаПрогрессора.Значение = 0;
		мФормаПрогрессора.МаксимальноеЗначение = ВыборкаДетальныеЗаписиПА.Количество();
	#КонецЕсли
	//bolshevykh@a-prof.ru 20.03.2015

	Для каждого СтрЗаписиПА из ВыборкаДетальныеЗаписиПА цикл
		
		//bolshevykh@a-prof.ru 20.03.2015
		#Если Клиент Тогда
			мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		#КонецЕсли
		//bolshevykh@a-prof.ru 20.03.2015	
		
		ЗапросДок = Новый Запрос;
		ЗапросДок.Текст = 
			"ВЫБРАТЬ
			|	ПланПродажСоставПлана.НомерСтроки,
			|	ПланПродажСоставПлана.ППП_Брендообъем КАК Брендообъем,
			|	ПланПродажСоставПлана.Контрагент.НСИ_Вывеска КАК Вывеска,
			|	ВЫБОР
			|		КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента <> ЗНАЧЕНИЕ(Справочник.НСИ_КатегорииКлиентов.ПустаяСсылка)
			|			ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента
			|		ИНАЧЕ ПланПродажСоставПлана.Контрагент.НСИ_КатегорияКлиента
			|	КОНЕЦ КАК КатегорияКлиента,
			|	ВЫБОР
			|		КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион <> ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
			|			ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион
			|		ИНАЧЕ ПланПродажСоставПлана.Контрагент.Дивизион
			|	КОНЕЦ КАК Дивизион
			|ИЗ
			|	Документ.ПланПродаж.СоставПлана КАК ПланПродажСоставПлана
			|ГДЕ
			|	ПланПродажСоставПлана.Ссылка = &Ссылка";

		ЗапросДок.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Если СтрЗаписиПА.Брендообъем <> Справочники.НСИ_Брендообъемы.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("Брендообъем",СтрЗаписиПА.Брендообъем);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ПланПродажСоставПлана.ППП_Брендообъем = &Брендообъем ");
		КонецЕсли;
		Если СтрЗаписиПА.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("Дивизион",СтрЗаписиПА.Дивизион);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ВЫБОР
			|			КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион <> ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
			|				ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион
			|			ИНАЧЕ ПланПродажСоставПлана.Контрагент.Дивизион
			|		КОНЕЦ = &Дивизион");
		КонецЕсли;
		Если СтрЗаписиПА.КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("КатегорияКлиента",СтрЗаписиПА.КатегорияКлиента);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ВЫБОР
			|			КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента <> ЗНАЧЕНИЕ(Справочник.НСИ_КатегорииКлиентов.ПустаяСсылка)
			|				ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента
			|			ИНАЧЕ ПланПродажСоставПлана.Контрагент.НСИ_КатегорияКлиента
			|		КОНЕЦ = &КатегорияКлиента");
		КонецЕсли;
		Если СтрЗаписиПА.Вывеска <> Справочники.НСИ_Вывески.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("Вывеска",СтрЗаписиПА.Вывеска);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ПланПродажСоставПлана.Контрагент.НСИ_Вывеска = &Вывеска ");
		КонецЕсли;
		
		РезультатДок = ЗапросДок.Выполнить();
		СтрокиПоПоказателямПА = РезультатДок.Выгрузить();
		
		Для каждого СтрСтрокиПоПоказателям из СтрокиПоПоказателямПА цикл
			
			СтрПланПродаж = Объект.СоставПлана.Найти(СтрСтрокиПоПоказателям.НомерСтроки,"НомерСтроки");
			//bolshevykh@a-prof.ru 16.03.2015			
			Если СтрПланПродаж = неопределено тогда
				Продолжить;
			КонецЕсли;
			//bolshevykh@a-prof.ru 16.03.2015
			//ПроцентныйПоказатель
			Если СтрЗаписиПА.ВидПоказателя = Перечисления.ППП_ВидПоказателя.Процент тогда
				СтрПланПродаж.ППП_ПромоАкции = ?(СтрПланПродаж.ППП_ПромоАкции = "",СокрЛП(СтрЗаписиПА.Показатель)+"%",СтрПланПродаж.ППП_ПромоАкции+"+"+СокрЛП(СтрЗаписиПА.Показатель)+"%");
				СтрПланПродаж.ППП_СуммаПромоАкции = СтрПланПродаж.ППП_СуммаПромоАкции + (СтрЗаписиПА.Показатель/100 * СтрПланПродаж.ППП_СуммаПовышенияЦен);
			Иначе	
				Группа = СтрЗаписиПА.Группа;
				НайденныеГрупповыеСуммы = ТаблГупповыхСумм.НайтиСтроки(Новый Структура("Аналитика,Группа","Скидки",Группа));
				
				Если НайденныеГрупповыеСуммы.Количество() = 0 тогда
					
					//Найдем все показатели группы
					ЗапросПАсумма.УстановитьПараметр("Группа", Группа);
					ЗапросПАсумма.УстановитьПараметр("Месяц", НачалоМесяца(СтрПланПродаж.Период));
					РезультатПАсумма = ЗапросПАсумма.Выполнить();
					ВыборкаДетальныеЗаписиПАсумма = РезультатПАсумма.Выгрузить();
					
					//Найдем сумму на все строки подходящие под показатели
					СуммаГруппы = 0;
					Для каждого стр из Объект.СоставПлана цикл
						
						//++ Spl_Апроф 04.06.2015 (k.russkih@a-prof.ru) по просьбе Нагорной Анастасии добавлем игнор строк с нулевым количеством
						Если стр.Количество = 0 Тогда		
							Продолжить;		
						КонецЕсли; 
						//-- Spl_Апроф						
						
						Если стр.ППП_АдресПоставки.НСИ_КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда
							КатегорияКлиента = стр.ППП_АдресПоставки.НСИ_КатегорияКлиента;
						иначе  
							КатегорияКлиента = стр.Контрагент.НСИ_КатегорияКлиента;
						КонецЕсли;
						
						Если стр.ППП_АдресПоставки.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда
							Дивизион = стр.ППП_АдресПоставки.Дивизион;
						иначе  
							Дивизион = стр.Контрагент.Дивизион;
						КонецЕсли;
								
						Для каждого стрПоказ из ВыборкаДетальныеЗаписиПАсумма цикл
							Если (стрПоказ.КатегорияКлиента = Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() или стрПоказ.КатегорияКлиента = КатегорияКлиента) 
								и (стрПоказ.Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка() или стрПоказ.Вывеска = стр.Контрагент.НСИ_Вывеска) 
								и (стрПоказ.Брендообъем = Справочники.НСИ_Брендообъемы.ПустаяСсылка() или стрПоказ.Брендообъем = стр.ППП_Брендообъем) 
								и (стрПоказ.Дивизион = Справочники.ПРГДивизионы.ПустаяСсылка() или стрПоказ.Дивизион = Дивизион) 
							тогда
								СуммаГруппы = СуммаГруппы + стр.ППП_СуммаПовышенияЦен;	
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					НоваяГурпповаяСумма = ТаблГупповыхСумм.Добавить();
					НоваяГурпповаяСумма.Аналитика = "Скидки";
					НоваяГурпповаяСумма.Группа = Группа;
					НоваяГурпповаяСумма.Сумма = СуммаГруппы;
					НоваяГурпповаяСумма.СуммаРаспределенная = 0;
					
					СтрокаИтогаПоГруппе = НоваяГурпповаяСумма; 
				Иначе 
					СуммаГруппы = НайденныеГрупповыеСуммы[0].Сумма;
					
					СтрокаИтогаПоГруппе = НайденныеГрупповыеСуммы[0]; 
				КонецЕсли;
					
				Если СуммаГруппы > 0 тогда
					//bolshevykh@a-prof.ru 17.03.2015
					ПоказательПропорциональный = Окр((СтрЗаписиПА.Показатель * СтрПланПродаж.ППП_СуммаПовышенияЦен/СуммаГруппы),8);
					//bolshevykh@a-prof.ru 17.03.2015
				КонецЕсли;
				
				СтрПланПродаж.ППП_ПромоАкции = ?(СтрПланПродаж.ППП_ПромоАкции = "",СокрЛП(ПоказательПропорциональный),СтрПланПродаж.ППП_ПромоАкции+"+"+СокрЛП(ПоказательПропорциональный));
				СтрПланПродаж.ППП_СуммаПромоАкции = СтрПланПродаж.ППП_СуммаПромоАкции + ПоказательПропорциональный;
				
				СтрокаИтогаПоГруппе.СуммаРаспределенная = СтрокаИтогаПоГруппе.СуммаРаспределенная + ПоказательПропорциональный; 
								
			КонецЕсли; 	
									
			//Сумма гросс
			СтрПланПродаж.ППП_СуммаГросс = СтрПланПродаж.ППП_СуммаПовышенияЦен - СтрПланПродаж.ППП_СуммаПромоАкции;
		КонецЦикла;	
	КонецЦикла;
	//Конец 2 итерации (Перебор предпосылок Промоплан, Выручка гросс)
	
	//Начало 3 итарции (Перебор предпосылок Ретробонусы)
	ЗапросРБсумма = Новый Запрос;
	ЗапросРБсумма.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	ЗапросРБсумма.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тППП_ПланРетробонусовСрезПоследних.Дивизион КАК Дивизион,
		|	тППП_ПланРетробонусовСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
		|	тППП_ПланРетробонусовСрезПоследних.Вывеска КАК Вывеска,
		|	тППП_ПланРетробонусовСрезПоследних.Проект КАК Проект
		|ИЗ
		|	тППП_ПланРетробонусовСрезПоследних
		|ГДЕ 
		|	тППП_ПланРетробонусовСрезПоследних.Месяц = &Месяц
		|	И тППП_ПланРетробонусовСрезПоследних.Группа = &Группа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дивизион УБЫВ,
		|	КатегорияКлиента УБЫВ,
		|	Вывеска УБЫВ,
		|	Проект УБЫВ";
	
	#Если Клиент Тогда	
		мФормаПрогрессора.КомментарийЗначения = "Распределение ретробонусов ...";
	#КонецЕсли
	
	РезультатРБ = ЗапросРБ.Выполнить();
	ВыборкаДетальныеЗаписиРБ = РезультатРБ.Выгрузить();
	
	//bolshevykh@a-prof.ru 20.03.2015
	#Если Клиент Тогда
		мФормаПрогрессора.Значение = 0;
		мФормаПрогрессора.МаксимальноеЗначение = ВыборкаДетальныеЗаписиРБ.Количество();
	#КонецЕсли
	//bolshevykh@a-prof.ru 20.03.2015
	
	Для каждого СтрЗаписиРБ из ВыборкаДетальныеЗаписиРБ цикл
		
		//bolshevykh@a-prof.ru 20.03.2015
		#Если Клиент Тогда
			мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		#КонецЕсли
		//bolshevykh@a-prof.ru 20.03.2015	
		
		ЗапросДок = Новый Запрос;
		ЗапросДок.Текст = 
			"ВЫБРАТЬ
			|	ПланПродажСоставПлана.НомерСтроки,
			|	ПланПродажСоставПлана.Контрагент.НСИ_Вывеска КАК Вывеска,
			|	ПланПродажСоставПлана.ППП_ТоварнаяКатегория.Проект КАК Проект,
			|	ВЫБОР
			|		КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента <> ЗНАЧЕНИЕ(Справочник.НСИ_КатегорииКлиентов.ПустаяСсылка)
			|			ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента
			|		ИНАЧЕ ПланПродажСоставПлана.Контрагент.НСИ_КатегорияКлиента
			|	КОНЕЦ КАК КатегорияКлиента,
			|	ВЫБОР
			|		КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион <> ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
			|			ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион
			|		ИНАЧЕ ПланПродажСоставПлана.Контрагент.Дивизион
			|	КОНЕЦ КАК Дивизион
			|ИЗ
			|	Документ.ПланПродаж.СоставПлана КАК ПланПродажСоставПлана
			|ГДЕ
			|	ПланПродажСоставПлана.Ссылка = &Ссылка";

		ЗапросДок.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Если СтрЗаписиРБ.Проект <> Справочники.ПРГ_ПроектыГП.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("Проект",СтрЗаписиРБ.Проект);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ПланПродажСоставПлана.ППП_ТоварнаяКатегория.Проект = &Проект ");
		КонецЕсли;
		Если СтрЗаписиРБ.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("Дивизион",СтрЗаписиРБ.Дивизион);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ВЫБОР
			|			КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион <> ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
			|				ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион
			|			ИНАЧЕ ПланПродажСоставПлана.Контрагент.Дивизион
			|		КОНЕЦ = &Дивизион");
		КонецЕсли;
		Если СтрЗаписиРБ.КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("КатегорияКлиента",СтрЗаписиРБ.КатегорияКлиента);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ВЫБОР
			|			КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента <> ЗНАЧЕНИЕ(Справочник.НСИ_КатегорииКлиентов.ПустаяСсылка)
			|				ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента
			|			ИНАЧЕ ПланПродажСоставПлана.Контрагент.НСИ_КатегорияКлиента
			|		КОНЕЦ = &КатегорияКлиента");
		КонецЕсли;
		Если СтрЗаписиРБ.Вывеска <> Справочники.НСИ_Вывески.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("Вывеска",СтрЗаписиРБ.Вывеска);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ПланПродажСоставПлана.Контрагент.НСИ_Вывеска = &Вывеска ");
		КонецЕсли;
		
		РезультатДок = ЗапросДок.Выполнить();
		СтрокиПоПоказателямРБ = РезультатДок.Выгрузить();
		
		Для каждого СтрСтрокиПоПоказателям из СтрокиПоПоказателямРБ цикл
			СтрПланПродаж = Объект.СоставПлана.Найти(СтрСтрокиПоПоказателям.НомерСтроки,"НомерСтроки");
			//bolshevykh@a-prof.ru 16.03.2015			
			Если СтрПланПродаж = неопределено тогда
				Продолжить;
			КонецЕсли;
			//bolshevykh@a-prof.ru 16.03.2015
			//ПроцентныйПоказатель
			Если СтрЗаписиРБ.ВидПоказателя = Перечисления.ППП_ВидПоказателя.Процент тогда
				СтрПланПродаж.ППП_БюджетРетробонусов = ?(СтрПланПродаж.ППП_БюджетРетробонусов = "",СокрЛП(СтрЗаписиРБ.Показатель)+"%",СтрПланПродаж.ППП_БюджетРетробонусов+"+"+СокрЛП(СтрЗаписиРБ.Показатель)+"%");
				СтрПланПродаж.ППП_СуммаБюджетРетробонусов = СтрПланПродаж.ППП_СуммаБюджетРетробонусов + (СтрЗаписиРБ.Показатель/100 * СтрПланПродаж.ППП_СуммаГросс);
			Иначе	
				Группа = СтрЗаписиРБ.Группа;
				НайденныеГрупповыеСуммы = ТаблГупповыхСумм.НайтиСтроки(Новый Структура("Аналитика,Группа","Ретробонусы",Группа));
				
				Если НайденныеГрупповыеСуммы.Количество() = 0 тогда
					
					//Найдем все показатели группы
					ЗапросРБсумма.УстановитьПараметр("Группа", Группа);
					ЗапросРБсумма.УстановитьПараметр("Месяц", НачалоМесяца(СтрПланПродаж.Период));
					
					РезультатРБсумма = ЗапросРБсумма.Выполнить();
					ВыборкаДетальныеЗаписиРБсумма = РезультатРБсумма.Выгрузить();
					
					//Найдем сумму на все строки подходящие под показатели
					СуммаГруппы = 0;
					Для каждого стр из Объект.СоставПлана цикл
						
						//++ Spl_Апроф 04.06.2015 (k.russkih@a-prof.ru) по просьбе Нагорной Анастасии добавлем игнор строк с нулевым количеством
						Если стр.Количество = 0 Тогда		
							Продолжить;		
						КонецЕсли; 
						//-- Spl_Апроф
						
						Если стр.ППП_АдресПоставки.НСИ_КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда
							КатегорияКлиента = стр.ППП_АдресПоставки.НСИ_КатегорияКлиента;
						иначе  
							КатегорияКлиента = стр.Контрагент.НСИ_КатегорияКлиента;
						КонецЕсли;
						
						Если стр.ППП_АдресПоставки.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда
							Дивизион = стр.ППП_АдресПоставки.Дивизион;
						иначе  
							Дивизион = стр.Контрагент.Дивизион;
						КонецЕсли;
						
						Для каждого стрПоказ из ВыборкаДетальныеЗаписиРБсумма цикл
							Если (стрПоказ.КатегорияКлиента = Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() или стрПоказ.КатегорияКлиента = КатегорияКлиента) 
								и (стрПоказ.Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка() или стрПоказ.Вывеска = стр.Контрагент.НСИ_Вывеска) 
								и (стрПоказ.Проект = Справочники.ПРГ_ПроектыГП.ПустаяСсылка() или стрПоказ.Проект = стр.ППП_ТоварнаяКатегория.Проект) 
								и (стрПоказ.Дивизион = Справочники.ПРГДивизионы.ПустаяСсылка() или стрПоказ.Дивизион = Дивизион) 
							тогда
								СуммаГруппы = СуммаГруппы + стр.ППП_СуммаГросс;	
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					НоваяГурпповаяСумма = ТаблГупповыхСумм.Добавить();
					НоваяГурпповаяСумма.Аналитика = "Ретробонусы";
					НоваяГурпповаяСумма.Группа = Группа;
					НоваяГурпповаяСумма.Сумма = СуммаГруппы;
				Иначе 
					СуммаГруппы = НайденныеГрупповыеСуммы[0].Сумма;
				КонецЕсли;
					
				Если СуммаГруппы > 0 тогда
					//bolshevykh@a-prof.ru 17.03.2015
					ПоказательПропорциональный = Окр((СтрЗаписиРБ.Показатель * СтрПланПродаж.ППП_СуммаГросс/СуммаГруппы),8);
					//bolshevykh@a-prof.ru 17.03.2015
				КонецЕсли;
				
				СтрПланПродаж.ППП_БюджетРетробонусов = ?(СтрПланПродаж.ППП_БюджетРетробонусов = "",СокрЛП(ПоказательПропорциональный),СтрПланПродаж.ППП_БюджетРетробонусов+"+"+СокрЛП(ПоказательПропорциональный));
				СтрПланПродаж.ППП_СуммаБюджетРетробонусов = СтрПланПродаж.ППП_СуммаБюджетРетробонусов + ПоказательПропорциональный;
			КонецЕсли; 	
		КонецЦикла;	
	КонецЦикла;
	//Конец 3 итарции (Перебор предпосылок Ретробонусы)
	
	//Начало 4 итарции (Перебор предпосылок МаркетинговыеУслуги)
	ЗапросМУсумма = Новый Запрос;
	ЗапросМУсумма.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	ЗапросМУсумма.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.Дивизион КАК Дивизион,
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.КатегорияКлиента КАК КатегорияКлиента,
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.Вывеска КАК Вывеска,
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.Проект КАК Проект
		|ИЗ
		|	тППП_ПланМаркетинговыхУслугСрезПоследних КАК тППП_ПланМаркетинговыхУслугСрезПоследних
		|ГДЕ 
		|	тППП_ПланМаркетинговыхУслугСрезПоследних.Месяц = &Месяц
		|	И тППП_ПланМаркетинговыхУслугСрезПоследних.Группа = &Группа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дивизион УБЫВ,
		|	КатегорияКлиента УБЫВ,
		|	Вывеска УБЫВ,
		|	Проект УБЫВ";
	#Если Клиент Тогда	
		мФормаПрогрессора.КомментарийЗначения = "Распределение маркетинговых услуг ...";
	#КонецЕсли

	РезультатМУ = ЗапросМУ.Выполнить();
	ВыборкаДетальныеЗаписиМУ = РезультатМУ.Выгрузить();
	
	//bolshevykh@a-prof.ru 20.03.2015
	#Если Клиент Тогда
		мФормаПрогрессора.Значение = 0;
		мФормаПрогрессора.МаксимальноеЗначение = ВыборкаДетальныеЗаписиМУ.Количество();
	#КонецЕсли
	//bolshevykh@a-prof.ru 20.03.2015


	Для каждого СтрЗаписиМУ из ВыборкаДетальныеЗаписиМУ цикл
		
		//bolshevykh@a-prof.ru 20.03.2015	
		#Если Клиент Тогда
			мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		#КонецЕсли
		//bolshevykh@a-prof.ru 20.03.2015	
		
		ЗапросДок = Новый Запрос;
		ЗапросДок.Текст = 
			"ВЫБРАТЬ
			|	ПланПродажСоставПлана.НомерСтроки,
			|	ПланПродажСоставПлана.Контрагент.НСИ_Вывеска КАК Вывеска,
			|	ПланПродажСоставПлана.ППП_ТоварнаяКатегория.Проект КАК Проект,
			|	ВЫБОР
			|		КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента <> ЗНАЧЕНИЕ(Справочник.НСИ_КатегорииКлиентов.ПустаяСсылка)
			|			ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента
			|		ИНАЧЕ ПланПродажСоставПлана.Контрагент.НСИ_КатегорияКлиента
			|	КОНЕЦ КАК КатегорияКлиента,
			|	ВЫБОР
			|		КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион <> ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
			|			ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион
			|		ИНАЧЕ ПланПродажСоставПлана.Контрагент.Дивизион
			|	КОНЕЦ КАК Дивизион
			|ИЗ
			|	Документ.ПланПродаж.СоставПлана КАК ПланПродажСоставПлана
			|ГДЕ
			|	ПланПродажСоставПлана.Ссылка = &Ссылка";

		ЗапросДок.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Если СтрЗаписиМУ.Проект <> Справочники.ПРГ_ПроектыГП.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("Проект",СтрЗаписиМУ.Проект);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ПланПродажСоставПлана.ППП_ТоварнаяКатегория.Проект = &Проект ");
		КонецЕсли;
		Если СтрЗаписиМУ.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("Дивизион",СтрЗаписиМУ.Дивизион);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ВЫБОР
			|			КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион <> ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
			|				ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион
			|			ИНАЧЕ ПланПродажСоставПлана.Контрагент.Дивизион
			|		КОНЕЦ = &Дивизион");
		КонецЕсли;
		Если СтрЗаписиМУ.КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("КатегорияКлиента",СтрЗаписиМУ.КатегорияКлиента);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ВЫБОР
			|			КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента <> ЗНАЧЕНИЕ(Справочник.НСИ_КатегорииКлиентов.ПустаяСсылка)
			|				ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента
			|			ИНАЧЕ ПланПродажСоставПлана.Контрагент.НСИ_КатегорияКлиента
			|		КОНЕЦ = &КатегорияКлиента");
		КонецЕсли;
		Если СтрЗаписиМУ.Вывеска <> Справочники.НСИ_Вывески.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("Вывеска",СтрЗаписиМУ.Вывеска);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ПланПродажСоставПлана.Контрагент.НСИ_Вывеска = &Вывеска ");
		КонецЕсли;
		
		РезультатДок = ЗапросДок.Выполнить();
		СтрокиПоПоказателямМУ = РезультатДок.Выгрузить();
		
		Для каждого СтрСтрокиПоПоказателям из СтрокиПоПоказателямМУ цикл
			СтрПланПродаж = Объект.СоставПлана.Найти(СтрСтрокиПоПоказателям.НомерСтроки,"НомерСтроки");
			//bolshevykh@a-prof.ru 16.03.2015			
			Если СтрПланПродаж = неопределено тогда
				Продолжить;
			КонецЕсли;
			//bolshevykh@a-prof.ru 16.03.2015
			//ПроцентныйПоказатель
			Если СтрЗаписиМУ.ВидПоказателя = Перечисления.ППП_ВидПоказателя.Процент тогда
				СтрПланПродаж.ППП_МаркетинговыеУслуги = ?(СтрПланПродаж.ППП_МаркетинговыеУслуги = "",СокрЛП(СтрЗаписиМУ.Показатель)+"%",СтрПланПродаж.ППП_МаркетинговыеУслуги+"+"+СокрЛП(СтрЗаписиМУ.Показатель)+"%");
				СтрПланПродаж.ППП_СуммаМаркетинговыеУслуги = СтрПланПродаж.ППП_СуммаМаркетинговыеУслуги + (СтрЗаписиМУ.Показатель/100 * СтрПланПродаж.ППП_СуммаГросс);
			Иначе	
				Группа = СтрЗаписиМУ.Группа;
				НайденныеГрупповыеСуммы = ТаблГупповыхСумм.НайтиСтроки(Новый Структура("Аналитика,Группа","МаркетинговыеУслуги",Группа));
				
				Если НайденныеГрупповыеСуммы.Количество() = 0 тогда
					
					//Найдем все показатели группы
					ЗапросМУсумма.УстановитьПараметр("Группа", Группа);
					ЗапросМУсумма.УстановитьПараметр("Месяц", НачалоМесяца(СтрПланПродаж.Период));
					
					РезультатМУсумма = ЗапросМУсумма.Выполнить();
					ВыборкаДетальныеЗаписиМУсумма = РезультатМУсумма.Выгрузить();
					
					//Найдем сумму на все строки подходящие под показатели
					СуммаГруппы = 0;
					Для каждого стр из Объект.СоставПлана цикл
						
						//++ Spl_Апроф 04.06.2015 (k.russkih@a-prof.ru) по просьбе Нагорной Анастасии добавлем игнор строк с нулевым количеством
						Если стр.Количество = 0 Тогда		
							Продолжить;		
						КонецЕсли; 
						//-- Spl_Апроф
						
						Если стр.ППП_АдресПоставки.НСИ_КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда
							КатегорияКлиента = стр.ППП_АдресПоставки.НСИ_КатегорияКлиента;
						иначе  
							КатегорияКлиента = стр.Контрагент.НСИ_КатегорияКлиента;
						КонецЕсли;
						
						Если стр.ППП_АдресПоставки.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда
							Дивизион = стр.ППП_АдресПоставки.Дивизион;
						иначе  
							Дивизион = стр.Контрагент.Дивизион;
						КонецЕсли;
						
						Для каждого стрПоказ из ВыборкаДетальныеЗаписиМУсумма цикл
							Если (стрПоказ.КатегорияКлиента = Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() или стрПоказ.КатегорияКлиента = КатегорияКлиента) 
								и (стрПоказ.Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка() или стрПоказ.Вывеска = стр.Контрагент.НСИ_Вывеска) 
								и (стрПоказ.Проект = Справочники.ПРГ_ПроектыГП.ПустаяСсылка() или стрПоказ.Проект = стр.ППП_ТоварнаяКатегория.Проект) 
								и (стрПоказ.Дивизион = Справочники.ПРГДивизионы.ПустаяСсылка() или стрПоказ.Дивизион = Дивизион) 
							тогда
								СуммаГруппы = СуммаГруппы + стр.ППП_СуммаГросс;	
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					НоваяГурпповаяСумма = ТаблГупповыхСумм.Добавить();
					НоваяГурпповаяСумма.Аналитика = "МаркетинговыеУслуги";
					НоваяГурпповаяСумма.Группа = Группа;
					НоваяГурпповаяСумма.Сумма = СуммаГруппы;
				Иначе 
					СуммаГруппы = НайденныеГрупповыеСуммы[0].Сумма;
				КонецЕсли;
					
				Если СуммаГруппы > 0 тогда
					//bolshevykh@a-prof.ru 17.03.2015
					ПоказательПропорциональный = Окр((СтрЗаписиМУ.Показатель * СтрПланПродаж.ППП_СуммаГросс/СуммаГруппы),8);
					//bolshevykh@a-prof.ru 17.03.2015
				КонецЕсли;
				
				СтрПланПродаж.ППП_МаркетинговыеУслуги = ?(СтрПланПродаж.ППП_МаркетинговыеУслуги = "",СокрЛП(ПоказательПропорциональный),СтрПланПродаж.ППП_МаркетинговыеУслуги+"+"+СокрЛП(ПоказательПропорциональный));
				СтрПланПродаж.ППП_СуммаМаркетинговыеУслуги = СтрПланПродаж.ППП_СуммаМаркетинговыеУслуги + ПоказательПропорциональный;
			КонецЕсли; 	
		КонецЦикла;	
	КонецЦикла;
	//Конец 4 итарции (Перебор предпосылок МаркетинговыеУслуги)
	
	//Начало 5 итарции (Перебор предпосылок ЭТК)
	ЗапросЭТКсумма = Новый Запрос;
	ЗапросЭТКсумма.МенеджерВременныхТаблиц = ЗапросПЦ1.МенеджерВременныхТаблиц;
	ЗапросЭТКсумма.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	тППП_ПланЭТКСрезПоследних.Дивизион КАК Дивизион,
		|	тППП_ПланЭТКСрезПоследних.КатегорияКлиента КАК КатегорияКлиента
		|ИЗ
		|	тППП_ПланЭТКСрезПоследних КАК тППП_ПланЭТКСрезПоследних
		|
		|ГДЕ 
		|	тППП_ПланЭТКСрезПоследних.Месяц = &Месяц
		|	И тППП_ПланЭТКСрезПоследних.Группа = &Группа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дивизион УБЫВ,
		|	КатегорияКлиента УБЫВ";
		
	#Если Клиент Тогда
		мФормаПрогрессора.КомментарийЗначения = "Распределение ЭТК ...";
	#КонецЕсли
	
	РезультатЭТК = ЗапросЭТК.Выполнить();
	ВыборкаДетальныеЗаписиЭТК = РезультатЭТК.Выгрузить();
	
	//bolshevykh@a-prof.ru 20.03.2015	
	#Если Клиент Тогда
		мФормаПрогрессора.Значение = 0;
		мФормаПрогрессора.МаксимальноеЗначение = ВыборкаДетальныеЗаписиЭТК.Количество();
	#КонецЕсли
	//bolshevykh@a-prof.ru 20.03.2015

	Для каждого СтрЗаписиЭТК из ВыборкаДетальныеЗаписиЭТК цикл
		
		//bolshevykh@a-prof.ru 20.03.2015	
		#Если Клиент Тогда
			мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		#КонецЕсли
		//bolshevykh@a-prof.ru 20.03.2015	
		
		ЗапросДок = Новый Запрос;
		ЗапросДок.Текст = 
			"ВЫБРАТЬ
			|	ПланПродажСоставПлана.НомерСтроки,
			|	ВЫБОР
			|		КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента <> ЗНАЧЕНИЕ(Справочник.НСИ_КатегорииКлиентов.ПустаяСсылка)
			|			ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента
			|		ИНАЧЕ ПланПродажСоставПлана.Контрагент.НСИ_КатегорияКлиента
			|	КОНЕЦ КАК КатегорияКлиента,
			|	ВЫБОР
			|		КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион <> ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
			|			ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион
			|		ИНАЧЕ ПланПродажСоставПлана.Контрагент.Дивизион
			|	КОНЕЦ КАК Дивизион
			|ИЗ
			|	Документ.ПланПродаж.СоставПлана КАК ПланПродажСоставПлана
			|ГДЕ
			|	ПланПродажСоставПлана.Ссылка = &Ссылка";

		ЗапросДок.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Если СтрЗаписиЭТК.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("Дивизион",СтрЗаписиЭТК.Дивизион);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ВЫБОР
			|			КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион <> ЗНАЧЕНИЕ(Справочник.ПРГДивизионы.ПустаяСсылка)
			|				ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.Дивизион
			|			ИНАЧЕ ПланПродажСоставПлана.Контрагент.Дивизион
			|		КОНЕЦ = &Дивизион");
		КонецЕсли;
		Если СтрЗаписиЭТК.КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда 
			ЗапросДок.УстановитьПараметр("КатегорияКлиента",СтрЗаписиЭТК.КатегорияКлиента);
			ЗапросДок.Текст = СтрЗаменить(ЗапросДок.Текст,"&Ссылка","&Ссылка И ВЫБОР
			|			КОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента <> ЗНАЧЕНИЕ(Справочник.НСИ_КатегорииКлиентов.ПустаяСсылка)
			|				ТОГДА ПланПродажСоставПлана.ППП_АдресПоставки.НСИ_КатегорияКлиента
			|			ИНАЧЕ ПланПродажСоставПлана.Контрагент.НСИ_КатегорияКлиента
			|		КОНЕЦ = &КатегорияКлиента");
		КонецЕсли;
		
		РезультатДок = ЗапросДок.Выполнить();
		СтрокиПоПоказателямЭТК = РезультатДок.Выгрузить();
		
		Для каждого СтрСтрокиПоПоказателям из СтрокиПоПоказателямЭТК цикл
			СтрПланПродаж = Объект.СоставПлана.Найти(СтрСтрокиПоПоказателям.НомерСтроки,"НомерСтроки");
			//bolshevykh@a-prof.ru 16.03.2015			
			Если СтрПланПродаж = неопределено тогда
				Продолжить;
			КонецЕсли;
			//bolshevykh@a-prof.ru 16.03.2015
			//ПроцентныйПоказатель
			Если СтрЗаписиЭТК.ВидПоказателя = Перечисления.ППП_ВидПоказателя.Процент тогда
				СтрПланПродаж.ППП_БюджетЭТК = ?(СтрПланПродаж.ППП_БюджетЭТК = "",СокрЛП(СтрЗаписиЭТК.Показатель)+"%",СтрПланПродаж.ППП_БюджетЭТК+"+"+СокрЛП(СтрЗаписиЭТК.Показатель)+"%");
				СтрПланПродаж.ППП_СуммаЭТК = СтрПланПродаж.ППП_СуммаЭТК + (СтрЗаписиЭТК.Показатель/100 * СтрПланПродаж.ППП_СуммаГросс);
			Иначе	
				Группа = СтрЗаписиЭТК.Группа;
				НайденныеГрупповыеСуммы = ТаблГупповыхСумм.НайтиСтроки(Новый Структура("Аналитика,Группа","ЭТК",Группа));
				
				Если НайденныеГрупповыеСуммы.Количество() = 0 тогда
					
					//Найдем все показатели группы
					ЗапросЭТКсумма.УстановитьПараметр("Группа", Группа);
					ЗапросЭТКсумма.УстановитьПараметр("Месяц", НачалоМесяца(СтрПланПродаж.Период));
					
					РезультатЭТКсумма = ЗапросЭТКсумма.Выполнить();
					ВыборкаДетальныеЗаписиЭТКсумма = РезультатЭТКсумма.Выгрузить();
					
					//Найдем сумму на все строки подходящие под показатели
					СуммаГруппы = 0;
					Для каждого стр из Объект.СоставПлана цикл
						
						//++ Spl_Апроф 04.06.2015 (k.russkih@a-prof.ru) по просьбе Нагорной Анастасии добавлем игнор строк с нулевым количеством
						Если стр.Количество = 0 Тогда		
							Продолжить;		
						КонецЕсли; 
						//-- Spl_Апроф
						
						Если стр.ППП_АдресПоставки.НСИ_КатегорияКлиента <> Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() тогда
							КатегорияКлиента = стр.ППП_АдресПоставки.НСИ_КатегорияКлиента;
						иначе  
							КатегорияКлиента = стр.Контрагент.НСИ_КатегорияКлиента;
						КонецЕсли;
						
						Если стр.ППП_АдресПоставки.Дивизион <> Справочники.ПРГДивизионы.ПустаяСсылка() тогда
							Дивизион = стр.ППП_АдресПоставки.Дивизион;
						иначе  
							Дивизион = стр.Контрагент.Дивизион;
						КонецЕсли;
						
						Для каждого стрПоказ из ВыборкаДетальныеЗаписиЭТКсумма цикл
							Если (стрПоказ.КатегорияКлиента = Справочники.НСИ_КатегорииКлиентов.ПустаяСсылка() или стрПоказ.КатегорияКлиента = КатегорияКлиента) 
								и (стрПоказ.Дивизион = Справочники.ПРГДивизионы.ПустаяСсылка() или стрПоказ.Дивизион = Дивизион) 
							тогда
								СуммаГруппы = СуммаГруппы + стр.ППП_СуммаГросс;	
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					НоваяГурпповаяСумма = ТаблГупповыхСумм.Добавить();
					НоваяГурпповаяСумма.Аналитика = "ЭТК";
					НоваяГурпповаяСумма.Группа = Группа;
					НоваяГурпповаяСумма.Сумма = СуммаГруппы;
				Иначе 
					СуммаГруппы = НайденныеГрупповыеСуммы[0].Сумма;
				КонецЕсли;
					
				Если СуммаГруппы > 0 тогда
					//bolshevykh@a-prof.ru 17.03.2015
					ПоказательПропорциональный = Окр((СтрЗаписиЭТК.Показатель * СтрПланПродаж.ППП_СуммаГросс/СуммаГруппы),8);
					//bolshevykh@a-prof.ru 17.03.2015
				КонецЕсли;
				
				СтрПланПродаж.ППП_БюджетЭТК = ?(СтрПланПродаж.ППП_БюджетЭТК = "",СокрЛП(ПоказательПропорциональный),СтрПланПродаж.ППП_БюджетЭТК+"+"+СокрЛП(ПоказательПропорциональный));
				СтрПланПродаж.ППП_СуммаЭТК = СтрПланПродаж.ППП_СуммаЭТК + ПоказательПропорциональный;
			КонецЕсли; 	
		КонецЦикла;	
	КонецЦикла;
	//Конец 5 итарции (Перебор предпосылок ЭТК)
		
	
	//bolshevykh@a-prof.ru 20.03.2015	
	#Если Клиент Тогда
		мФормаПрогрессора.КомментарийЗначения = "Расчет итоговой суммы и цены..";
		мФормаПрогрессора.Значение = 0;
		мФормаПрогрессора.МаксимальноеЗначение = Объект.СоставПлана.Количество();
	#КонецЕсли
	//bolshevykh@a-prof.ru 20.03.2015
	
	Для каждого СтрПланПродаж из Объект.СоставПлана цикл
		
		//++ Spl_Апроф 04.06.2015 (k.russkih@a-prof.ru) по просьбе Нагорной Анастасии добавлем игнор строк с нулевым количеством
		Если СтрПланПродаж.Количество = 0 Тогда		
			Продолжить;		
		КонецЕсли; 
		//-- Spl_Апроф		
		
		//Сумма нетто
		СтрПланПродаж.Сумма = СтрПланПродаж.ППП_СуммаГросс - СтрПланПродаж.ППП_СуммаБюджетРетробонусов - СтрПланПродаж.ППП_СуммаМаркетинговыеУслуги - СтрПланПродаж.ППП_СуммаЭТК; 
		//Расчитаем цену
		Если Не СтрПланПродаж.Количество = 0 Тогда
			СтрПланПродаж.Цена = СтрПланПродаж.Сумма/СтрПланПродаж.Количество;
		Иначе
			СтрПланПродаж.Цена = 0;
		КонецЕсли;
		Если СоставПлана.Количество() > 0 тогда
			//bolshevykh@a-prof.ru 25.05.2015	
			//ЭлементыФормы.СоставПлана.ТекущаяСтрока = ЭлементыФормы.СоставПлана.Значение[0];
			//СоставПланаСуммаПриИзменении(неопределено);
			
			// Выполнить общие действия для всех документов при изменении Суммы.
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрПланПродаж, Объект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"СоставПлана");
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрПланПродаж, Объект);
			//-----bolshevykh@a-prof.ru 25.05.2015	
		КонецЕсли;
		
		//bolshevykh@a-prof.ru 20.03.2015
		#Если Клиент Тогда
			мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		#КонецЕсли
		//bolshevykh@a-prof.ru 20.03.2015	
		
	КонецЦикла;
	
	ЗапросПЦ1.Текст = 
	" УНИЧТОЖИТЬ тППП_ГрафикПовышенияЦенНаГП;
	| УНИЧТОЖИТЬ тППП_ПланПроведенияПромоАкцийСрезПоследних;
	| УНИЧТОЖИТЬ тППП_ПланРетробонусовСрезПоследних;
	| УНИЧТОЖИТЬ тППП_ПланМаркетинговыхУслугСрезПоследних;
	| УНИЧТОЖИТЬ тППП_ПланЭТКСрезПоследних";
	ЗапросПЦ1.Выполнить();
	
	#Если Клиент Тогда
		мФормаПрогрессора.Закрыть();
	#КонецЕсли
	
	Возврат ТаблицаРасчитаныхЦен;
	
КонецФункции
    
Функция ПересчитатьВВалютуСценария(СтараяЦена = 0,Сценарий,ВалютаЦены,Дата)
	
	ПолученнаяЦена = СтараяЦена;
	
	Если ВалютаЦены <> Сценарий.Валюта и Сценарий.ИспользоватьКурсыСценария = истина тогда
		ЗапросКурс = Новый Запрос;
		ЗапросКурс.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КурсыВалютПоСценариямСрезПоследних.Период,
				|	КурсыВалютПоСценариямСрезПоследних.Валюта,
				|	КурсыВалютПоСценариямСрезПоследних.Сценарий,
				|	КурсыВалютПоСценариямСрезПоследних.Курс,
				|	КурсыВалютПоСценариямСрезПоследних.Кратность
				|ИЗ
				|	РегистрСведений.КурсыВалютПоСценариям.СрезПоследних(
				|			&Дата,
				|			Сценарий = &Сценарий
				|				И Валюта = &Валюта) КАК КурсыВалютПоСценариямСрезПоследних";

		ЗапросКурс.УстановитьПараметр("Дата", Дата);
		ЗапросКурс.УстановитьПараметр("Сценарий", Сценарий);
		ЗапросКурс.УстановитьПараметр("Валюта", ВалютаЦены);
		РезультатКурс = ЗапросКурс.Выполнить().Выбрать();
		Если РезультатКурс.Следующий()тогда 
			ПолученнаяЦена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтараяЦена, ВалютаЦены, Сценарий.Валюта, РезультатКурс.Курс, 1, РезультатКурс.Кратность, 1);
		КонецЕсли;
	ИначеЕсли  ВалютаЦены <> Сценарий.Валюта и Сценарий.ИспользоватьКурсыСценария = ложь тогда	
		ПолученнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(СтараяЦена, ВалютаЦены, Сценарий.Валюта, , , Дата);
	КонецЕсли;

	Возврат ПолученнаяЦена;	
	
КонецФункции
//-----bolshevykh@a-prof.ru 25.05.2015

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");