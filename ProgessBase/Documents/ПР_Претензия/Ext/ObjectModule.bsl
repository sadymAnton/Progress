Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета;
//++ Spl_Апроф 03.03.2015 (k.russkih@a-prof.ru)
Перем мСуммаДокументаБезСкидок Экспорт;
Перем мСписокФильтров;
Перем мУчетнаяПолитика Экспорт;
Перем мМинимальныеЦены;

#Если Клиент Тогда
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
			Возврат;
		ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
			Возврат;
		КонецЕсли;
		
		Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли;
		КонецЕсли; 
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,, Ссылка));
		
	КонецПроцедуры // Печать
	
	// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
	Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		Возврат Новый Структура();
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли



//>>070416 Степанов 47706; СКИДКИ 
Процедура РассчитатьСКидки(СтрокаТабличнойЧасти) Экспорт
	
	//Если нам известна цена накладной без вычета скидки и цена не менялась - 
	// значит это количественная корректировка и можно посчитать точную сумму изменения скидки, 
	// иначе - обратный расчет через процент с погрешностью из-за ценовых округлений
	ТекСтрока = СтрокаТабличнойЧасти;	
	ПоДаннымЦеныНакладной = Ложь;
	Если ТекСтрока.ЦенаНакладнойБезВычетаСкидки>0 тогда
		Если (ТекСтрока.ПроцентАвтоматическихСкидок<>0) И (ТекСтрока.ПроцентСкидкиНаценки<>0) тогда
			//
		Иначе	
			Если ТекСтрока.Цена = ТекСтрока.ЦенаФакт тогда
				ПоДаннымЦеныНакладной = Истина;
				ИзменениеКоличества = ТекСтрока.КоличествоФакт - ТекСтрока.КоличествоНакладной;
				СкидкаВЦене         = ТекСтрока.ЦенаНакладнойБезВычетаСкидки - ТекСтрока.Цена;
				ИзменениеСкидки     = ИзменениеКоличества * СкидкаВЦене;
				Если ТекСтрока.ПроцентАвтоматическихСкидок<>0 тогда
					ТекСтрока.СуммаИзмененияСкидки2 = ИзменениеСкидки;
				ИначеЕсли ТекСтрока.ПроцентСкидкиНаценки<>0 тогда
					ТекСтрока.СуммаИзмененияСкидки1 = ИзменениеСкидки;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ПоДаннымЦеныНакладной = Ложь тогда	
		ОстатокБазыРасчетаСкидки = (ТекСтрока.СуммаФакт-ТекСтрока.СуммаНакладной);
		Если ОстатокБазыРасчетаСкидки<>0 тогда
			Если ТекСтрока.ПроцентАвтоматическихСкидок>0 тогда
				ТекСтрока.СуммаИзмененияСкидки2 = ОстатокБазыРасчетаСкидки*100/(100-ТекСтрока.ПроцентАвтоматическихСкидок)-ОстатокБазыРасчетаСкидки;
				ОстатокБазыРасчетаСкидки = ОстатокБазыРасчетаСкидки+ТекСтрока.СуммаИзмененияСкидки2;
			Иначе
				ТекСтрока.СуммаИзмененияСкидки2=0;
			Конецесли;
			Если ТекСтрока.ПроцентСкидкиНаценки>0 тогда
				ТекСтрока.СуммаИзмененияСкидки1 = ОстатокБазыРасчетаСкидки*100/(100-ТекСтрока.ПроцентСкидкиНаценки)-ОстатокБазыРасчетаСкидки;
			Иначе
				ТекСтрока.СуммаИзмененияСкидки1=0;
			КонецЕсли;
		Иначе
			ТекСтрока.СуммаИзмененияСкидки1=0;
			ТекСтрока.СуммаИзмененияСкидки2=0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//<<070416


// Процедура - обработчик события "ОбработкаПроведения"
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//>>180416 Степанов
	Если ЭтоНовый() тогда
		ПРГ_УчитыватьСкидки = Истина;
	КонецЕсли;
	//<<
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = ПолучитьСуммуСНДС();
	
	Если ПроверкаДоступностиИзменения() И ПровереноБухгалтерией И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда	
		ОбщегоНазначения.СообщитьОбОшибке("В текущем статусе претензию нельзя снять с проведения");
		Отказ = Истина;			
	КонецЕсли; 
	
	Если Не Отказ И Не ПометкаУдаления Тогда
		ПроверимНаличиеПретензииПоНакладной(Отказ);
	КонецЕсли;
	
	//{02.06.2016 Островерхий заявка №53154 
	//{06.06.2016 Островерхий заявка №53224 
	ЗаполнитьРеквизит_ПРГ_ЕстьФайлы();
	//06.06.2016 Островерхий} 
	
	Если Не Отказ 
		И НЕ РольДоступна("АП_СотрудникБухгалтерии") 
		И НаОснованииПретензииВведеныДокументы()
		И ИзмененыНеДоступныеДляРедактированияРеквизиты() Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("На основании претензии проведены документы, изменить претензию невозможно!",Отказ);
		
	КонецЕсли;  
	//02.06.2016 Островерхий} 
	
КонецПроцедуры

Процедура ЗаполнитьРеквизит_ПРГ_ЕстьФайлы() Экспорт 

	/// Кунов О.В., 10.02.2016 - 48946
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1
	|ИЗ
	|	Справочник.ХранилищеДополнительнойИнформации КАК ХранилищеДополнительнойИнформации
	|ГДЕ
	|	ХранилищеДополнительнойИнформации.Объект = &Объект");
	Запрос.УстановитьПараметр("Объект", Ссылка);
	ЕстьФайлы = Не Запрос.Выполнить().Пустой();
	Если ЕстьФайлы И Не ПРГ_ЕстьФайлы Тогда
		ПРГ_ЕстьФайлы = Истина;
	ИначеЕсли Не ЕстьФайлы И ПРГ_ЕстьФайлы Тогда
		ПРГ_ЕстьФайлы = Ложь;
	КонецЕсли;
	///

КонецПроцедуры
 

Функция ВернутьМассивРеквизитовДоступныхДляИзмененияПослеВводаДокументовНаОсновании() Экспорт 

	тМассив = Новый Массив;
	тМассив.Добавить("СтатусДокумента");	
    тМассив.Добавить("ДатаЗакрытия"); 
	тМассив.Добавить("ПРГ_ЕстьФайлы");
	//{16.06.2016 Островерхий заявка №б/н 
	тМассив.Добавить("СтатусПриходногоОрдера");
	тМассив.Добавить("СуммаДокумента"); 
	//16.06.2016 Островерхий} 
	тМассив.Добавить("Товары.ДатаРешения");
	
	//{07.06.2016 Островерхий заявка №б/н 
	тМассив.Добавить("Товары.ВидыПричинПретензии");
	тМассив.Добавить("Товары.ПричинаПретензии");
	тМассив.Добавить("Товары.РешениеПоПретензии"); 
	тМассив.Добавить("Товары.КоличествоВозврат");
	//07.06.2016 Островерхий} 
	
	Возврат тМассив;
	
КонецФункции // ВернутьМассивРеквизитовДоступныхДляИзмененияПослеВводаДокументов()

Функция ИзмененыНеДоступныеДляРедактированияРеквизиты()
	
	Объект = ЭтотОбъект;
	ОбъектМодифицирован = Объект.ЭтоНовый();
	
	МассивИсключений = ВернутьМассивРеквизитовДоступныхДляИзмененияПослеВводаДокументовНаОсновании();
	Если НЕ ОбъектМодифицирован Тогда
		
		//Сравниваем реквизиты объекта и реквизиты ссылки
		Для каждого Свойство Из Объект.Метаданные().Реквизиты Цикл
			
			Если НЕ МассивИсключений.Найти(Свойство.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ОбъектМодифицирован = Объект[Свойство.Имя] <> Ссылка[Свойство.Имя];
			
			Если ОбъектМодифицирован Тогда
				Прервать;
			КонецЕсли; 	
			
		КонецЦикла;	
		
		Если НЕ ОбъектМодифицирован Тогда
			
			//Сравниваем стандартные реквизиты объекта и реквизиты ссылки
			Для каждого Свойство Из Объект.Метаданные().СтандартныеРеквизиты Цикл
				
				Если Свойство.Имя = "Ссылка"
					ИЛИ НЕ МассивИсключений.Найти(Свойство.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				
				ОбъектМодифицирован = Объект[Свойство.Имя] <> Ссылка[Свойство.Имя];
				
				Если ОбъектМодифицирован Тогда
					Прервать;
				КонецЕсли; 	
				
			КонецЦикла;	
			
		КонецЕсли; 
		
		//Сравниваем табличные части
		//Если НЕ ОбъектМодифицирован Тогда
		//	
		//	Для каждого СвойствоТабличнаяЧасть Из Объект.Метаданные().ТабличныеЧасти Цикл
		//		
		//		Если Объект[СвойствоТабличнаяЧасть.Имя].Количество() <> Ссылка[СвойствоТабличнаяЧасть.Имя].Количество() Тогда
		//			
		//			ОбъектМодифицирован = Истина;	
		//			
		//		Иначе
		//			
		//			Для каждого СтрокаТЧОбъекта Из Объект[СвойствоТабличнаяЧасть.Имя] Цикл
		//				
		//				СтрокаТЧСсылки = Ссылка[СвойствоТабличнаяЧасть.Имя][СтрокаТЧОбъекта.НомерСтроки-1];
		//				
		//				Для каждого СвойствоТабличнойЧасть Из Объект.Метаданные().ТабличныеЧасти[СвойствоТабличнаяЧасть.Имя].Реквизиты Цикл
		//					
		//					Если НЕ МассивИсключений.Найти(СвойствоТабличнаяЧасть.Имя+"."+СвойствоТабличнойЧасть.Имя) = Неопределено Тогда
		//						Продолжить;
		//					КонецЕсли;
		//					
		//					ОбъектМодифицирован = СтрокаТЧОбъекта[СвойствоТабличнойЧасть.Имя] <> СтрокаТЧСсылки[СвойствоТабличнойЧасть.Имя];
		//					
		//					Если ОбъектМодифицирован Тогда
		//						Прервать;
		//					КонецЕсли;
		//					
		//				КонецЦикла;	
		//				
		//				Если ОбъектМодифицирован Тогда
		//					Прервать;
		//				КонецЕсли;
		//				
		//			КонецЦикла;
		//			
		//			Если ОбъектМодифицирован Тогда
		//				Прервать;
		//			КонецЕсли;
		//			
		//		КонецЕсли;
		//		
		//		Если ОбъектМодифицирован Тогда
		//			Прервать;
		//		КонецЕсли; 	
		//		
		//	КонецЦикла;		
		//	
		//КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ОбъектМодифицирован;
	
КонецФункции
 

//++ Spl_Апроф 20.02.2015 (k.russkih@a-prof.ru)
Функция ПолучитьСуммуСНДС() Экспорт
	
	Возврат УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	
КонецФункции // ПолучитьСуммуСНДС(

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаписатьИзменениеСтатусов(Отказ);
	КонецЕсли;
	
	//Если Не Отказ Тогда
	//	СформируемСправочник_ПРГ_Претензии(Отказ);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВидПретензии, Накладная, 
	|СкладПретензии, Склад, КП_Отделение");
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//>>080416 Степанов 
	Перем ТаблицаПоТоварам;
	//<<
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПроверимЗаполнениеТоваров(Отказ);
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru = 'Проведение документа """ + СокрЛП(Ссылка) + """: '");
	
	//УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"      ,      "ВалютаУправленческогоУчета",       "ВалютаУправленческогоУчета");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке(),
	ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект), мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Период"					, "Ссылка.Дата");
	СтруктураПолей.Вставить("Номенклатура"				, "Номенклатура");	
	СтруктураПолей.Вставить("КоличествоПринятоСкладом"	, "КоличествоПринятоСкладом");
	
	//СтруктураПолей.Вставить("Сумма", "Сумма");
	
	СписокДополнений = Новый СписокЗначений;
	СписокДополнений.Добавить("Факт");
	СписокДополнений.Добавить("Рекламации");
	СписокДополнений.Добавить("Накладной");
	СписокДополнений.Добавить("");
	
	Для каждого ДополнениеКРеквизиту Из СписокДополнений Цикл
		
		ИмяПоля = "Количество"+ДополнениеКРеквизиту;		
		СтруктураПолей.Вставить(ИмяПоля, ИмяПоля);
		
		ИмяПоля = "Сумма"+ДополнениеКРеквизиту;		
		СтруктураПолей.Вставить(ИмяПоля, ИмяПоля);
		
	КонецЦикла;
	
	СтруктураПолей.Вставить("Накладная"					, "Ссылка.Накладная");
	СтруктураПолей.Вставить("ДоговорКонтрагента" 		, "Ссылка.ДоговорКонтрагента");
	СтруктураПолей.Вставить("Контрагент" 				, "Ссылка.Контрагент");
	СтруктураПолей.Вставить("ВидыПричинПретензии"		, "ВидыПричинПретензии");
	СтруктураПолей.Вставить("ПричинаПретензии"			, "ПричинаПретензии");
	СтруктураПолей.Вставить("РешениеПоПретензии"		, "РешениеПоПретензии");
	СтруктураПолей.Вставить("ДокументПретензии"			, "Ссылка");
	СтруктураПолей.Вставить("ЦенаФакт"					, "ЦенаФакт");
	//++ Spl_Апроф 03.03.2015 (k.russkih@a-prof.ru)
	СтруктураПолей.Вставить("КоличествоВозврат"			, "КоличествоВозврат");
	
	ТаблицаДвижений = ПодготовитьТаблицуДвижений(УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей), СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаДвижений, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//>>080416 Степанов
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	//<<
	
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДвижений, ТаблицаПоТоварам, Отказ);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаДвижений", ТаблицаДвижений));
	
КонецПроцедуры

//>>080416 Степанов добавлена функция
// Функция возвращает таблицу значений, содержащую строки, 
// в которых заполнено значение хотя бы в одной из проверяемых колонок
// 
// Параметры:
// 	ИсходнаяТаблица - ТаблицаЗначений -  таблица, из которой необходимо отобрать строки
// 	СписокКолонокДляПроверки - Строка - Список колонок для проверки заполнения значений
// 
// Возвращаемое значение:
// 	Результат - ТаблицаЗначений - результат отбора
//
Функция ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ИсходнаяТаблица, СписокКолонокДляПроверки)
	
	Результат = ИсходнаяТаблица.СкопироватьКолонки();
	
	КолонкиДляПроверки = Новый Структура(СписокКолонокДляПроверки);
	
	Для Каждого СтрокаТаблицы Из ИсходнаяТаблица Цикл
		
		Для Каждого Колонка Из КолонкиДляПроверки Цикл
			
			Если ИсходнаяТаблица.Колонки.Найти(Колонка.Ключ) <> Неопределено 
				И ЗначениеЗаполнено(СтрокаТаблицы[Колонка.Ключ]) Тогда
				
				// Значение в колонке заполнено. Копируем строку в таблицу Результат
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
//<<080416

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуДвижений(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаДвижений = РезультатЗапросаПоТоварам.Выгрузить();
	
	Возврат ТаблицаДвижений;
	
КонецФункции

//>> Степанов добавлена процедура
// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                        , "Номенклатура");
	СтруктураПолей.Вставить("ТипНоменклатуры"                     , "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"          , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                   , "СерияНоменклатуры");
	//СтруктураПолей.Вставить("Качество"                            , "Качество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                    , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                                , "Цена");
	//СтруктураПолей.Вставить("Услуга"                              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("СтавкаНДС"                           , "СтавкаНДС");
	//СтруктураПолей.Вставить("Склад"                               , "Склад");
	//СтруктураПолей.Вставить("ВидСклада"                           , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ЗаказПокупателя"                     , "ЗаказПокупателя");
	//СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"     	  , "ПринадлежностьНоменклатуры");
	//СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров"		  , "СпособСписанияОстаткаТоваров");
	//СтруктураПолей.Вставить("КлючСтроки"                          , "КлючСтроки");
	
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"					  , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"			  , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("СуммаИзмененияСкидки1"					  , "СуммаИзмененияСкидки1");
	СтруктураПолей.Вставить("СуммаИзмененияСкидки2"					  , "СуммаИзмененияСкидки2");
	СтруктураПолей.Вставить("ПриказУстановкиСкидки"					  , "ПриказУстановкиСкидки");
	СтруктураПолей.Вставить("НомерСтрокиПолучателя"					  , "НомерСтрокиПолучателя");
	СтруктураПолей.Вставить("НомерСтрокиТовара"					      , "НомерСтрокиТовара");
	
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("ПЦ_ОграниченияСкидки"		  , "ПриказУстановкиСкидки.ПЦ_ОграниченияСкидки");
	СтруктураСложныхПолей.Вставить("Количество"					  , "(КоличествоФакт - КоличествоНакладной) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("КоличествоДок"                , "КоличествоФакт - КоличествоНакладной");
	СтруктураСложныхПолей.Вставить("КоличествоВЕдиницахДокумента" , "КоличествоФакт - КоличествоНакладной");
	СтруктураСложныхПолей.Вставить("Сумма"						  , "СуммаФакт - СуммаНакладной");
	СтруктураСложныхПолей.Вставить("СуммаДок"					  , "СуммаФакт - СуммаНакладной");
	СтруктураСложныхПолей.Вставить("НДС"						  , "СуммаНДСФакт - СуммаНДСНакладной");
	СтруктураСложныхПолей.Вставить("НДСДок"						  , "СуммаНДСФакт - СуммаНДСНакладной");
	СтруктураСложныхПолей.Вставить("СтоимостьБезСкидок"						  , "СуммаФакт - СуммаНакладной + СуммаИзмененияСкидки1 + СуммаИзмененияСкидки2");
	
	// Подготовим таблицу товаров для проведения.
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);
	ТаблицаПоТоварам 		  = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	//СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Цена"                , "Цена");
	//СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	//СтруктураПолей.Вставить("СчетДоходовБУ"       , "СчетДоходовБУ");
	//СтруктураПолей.Вставить("СубконтоБУ"          , "СубконтоБУ");
	//СтруктураПолей.Вставить("СчетДоходовНУ"       , "СчетДоходовНУ");
	//СтруктураПолей.Вставить("СубконтоНУ"          , "СубконтоНУ");
	//СтруктураПолей.Вставить("СчетРасходовБУ"      , "СчетРасходовБУ");
	//СтруктураПолей.Вставить("СчетРасходовНУ"      , "СчетРасходовНУ");
	СтруктураПолей.Вставить("ЗаказПокупателя"     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("Количество"   , "КоличествоФакт - КоличествоНакладной");
	СтруктураСложныхПолей.Вставить("Сумма"		  , "СуммаФакт - СуммаНакладной");
	СтруктураСложныхПолей.Вставить("НДС"		  , "СуммаНДСФакт - СуммаНДСНакладной");
	
	
КонецПроцедуры // СформироватьТаблицыДокумента()
//<<


//>>080416 Степанов бн добавлена функция
// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ДокументПартии", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СтрокаТаблицы.ДокументПартии = Накладная;
	КонецЦикла;
	
	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидокВВалюте" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьВВалюте" , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	// Надо заполнить новые колонки.
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		////////////////////////// Считаем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		////////////////////////Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
		////////////////////////	СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		////////////////////////		СтрокаТаблицы.Цена, 
		////////////////////////		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаЗаказа,
		////////////////////////		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсЗаказа,
		////////////////////////		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьЗаказа);
		////////////////////////КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + ?(УчитыватьНДС И СуммаВключаетНДС,0,Окр(УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)),2));
		
		СтрокаТаблицы.Стоимость 		  = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		Если СтрокаТаблицы.СтоимостьБезСкидок = 0  Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Стоимость;
		КонецЕсли;	
		 
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		////////////////////////СтрокаТаблицы.СтоимостьВВалюте = СтрокаТаблицы.Стоимость; 
		////////////////////////СтрокаТаблицы.СтоимостьБезСкидокВВалюте = СтрокаТаблицы.СтоимостьБезСкидок;
		////////////////////////
		////////////////////////СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		////////////////////////	СтрокаТаблицы.СуммаВзаиморасчетов, 
		////////////////////////	ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		////////////////////////	СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		////////////////////////	СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		////////////////////////
		////////////////////////СтрокаТаблицы.СтоимостьБезСкидок = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		////////////////////////	СтрокаТаблицы.СтоимостьБезСкидок, 
		////////////////////////	ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		////////////////////////	СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		////////////////////////	СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		////////////////////////
		////////////////////////СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		////////////////////////	СтрокаТаблицы.СуммаВзаиморасчетов, 
		////////////////////////	ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		////////////////////////	СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		////////////////////////	СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		////////////////////////
		////////////////////////СтрокаТаблицы.Стоимость    = СтрокаТаблицы.СуммаУпр;
		////////////////////////СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		////////////////////////
		////////////////////////// Суммы пересчитаем в валюту упр. учета
		////////////////////////СтрокаТаблицы.СуммаБезНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		////////////////////////	СтрокаТаблицы.СуммаБезНДС, 
		////////////////////////	ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		////////////////////////	СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		////////////////////////	СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		////////////////////////
		////////////////////////СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		////////////////////////	СтрокаТаблицы.НДС, 
		////////////////////////	ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		////////////////////////	СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		////////////////////////	СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		////////////////////////
	КонецЦикла;
	
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()
//<<


//>>080416 Степанов 47706; СКИДКИ
// Заполняет таблицу скидок для проведения.
//
// Параметры: 
//  ТаблицаТоваров          - таблица значений по товарам,
//  ТаблицаУслуг            - таблица значений по скидкам,
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента) Экспорт
	
	МетаданныеДокумента = Метаданные();
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("ТоварнаяКатегория");
	ТаблицаДвижений.Колонки.Добавить("Брендообъем");
	
	ТаблицаДвижений.Колонки.Добавить("ПолучательСкидки");
	ТаблицаДвижений.Колонки.Добавить("АдресПоставки");
	ТаблицаДвижений.Колонки.Добавить("Дивизион");
	ТаблицаДвижений.Колонки.Добавить("ОбъектСкидки");
	ТаблицаДвижений.Колонки.Добавить("НомерСтрокиПолучателя");
	ТаблицаДвижений.Колонки.Добавить("НомерСтрокиТовара");
	
	//ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	//ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	//ТаблицаДвижений.Колонки.Добавить("ПЦ_ОграниченияСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя");
	//ТаблицаДвижений.Колонки.Добавить("ПроцентСкидки");
	ТаблицаДвижений.Колонки.Добавить("УстановкаСкидокНоменклатуры");
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	//ТаблицаДвижений.Колонки.Добавить("СуммаНДССкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		//////////СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента, 2), ВалютаДокумента, 
		//////////СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		//////////СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		//////////СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			ТипОграниченияСкидки = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(СтрокаТаблицы.ПриказУстановкиСкидки,"ПЦ_ОграниченияСкидки");
			Если ТипОграниченияСкидки <> Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.Период тогда 
				СтрокаДвижений = ТаблицаДвижений.Добавить();
				СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
				СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
				СтрокаДвижений.ТоварнаяКатегория = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(СтрокаТаблицы.Номенклатура,"НСИ_ТоварнаяКатегория"); 
				СтрокаДвижений.Брендообъем =       ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(СтрокаТаблицы.Номенклатура,"НСИ_Брендообъем");
				СтрокаДвижений.ЗаказПокупателя = СтрокаТаблицы.ЗаказПокупателя;
				
				//СтрокаДвижений.ПолучательСкидки      = СтрокаТаблицы.
				//СтрокаДвижений.АдресПоставки         = СтрокаТаблицы.
				//СтрокаДвижений.Дивизион              = СтрокаТаблицы.
				//СтрокаДвижений.ОбъектСкидки          = СтрокаТаблицы.
				СтрокаДвижений.НомерСтрокиПолучателя = СтрокаТаблицы.НомерСтрокиПолучателя;
				СтрокаДвижений.НомерСтрокиТовара     = СтрокаТаблицы.НомерСтрокиТовара;
				
				//СтрокаДвижений.ПроцентСкидки = СтрокаТаблицы.ПроцентАвтоматическихСкидок;
				СтрокаДвижений.УстановкаСкидокНоменклатуры = СтрокаТаблицы.ПриказУстановкиСкидки;
				//СтрокаДвижений.ПЦ_ОграниченияСкидки = ТипОграниченияСкидки; 
				Если (ТипОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки) или (ТипОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг) тогда
					СтрокаДвижений.СуммаСкидки = Окр(СтрокаТаблицы.СуммаИзмененияСкидки2,2);
					Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
						СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Окр(УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаИзмененияСкидки2, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС)),2);
					КонецЕсли;
				ИначеЕсли ТипОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем тогда
					СтрокаДвижений.Количество = СтрокаТаблицы.КоличествоДок;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции // ПодготовитьТаблицуСкидок()
//<<

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДвижений, ТаблицаПоТоварам, Отказ)
	
	//Движения по регистру накопления "ПР_Претензии"
	Движения.ПР_Претензии.Записывать = Истина;
	Движения.ПР_Претензии.Очистить();
	Движения.ПР_Претензии.Загрузить(ТаблицаДвижений);
	
	//>>080416 Степанов 47706; движения по регистру ПЦ_ОграниченияПоПредоставленнымСкидкам
	Если ПРГ_УчитыватьСкидки тогда
		Если СтатусДокумента <> Перечисления.ПР_СтатусыПретензии.Отклонена Тогда
			
			// находим ЗаказПокупателя
			ДокЗаказ = Документы.ЗаказПокупателя.ПустаяСсылка();
			Если ТипЗнч(Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") тогда
				ДокЗаказ = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(Накладная,"Сделка");
			ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") тогда
				ДокРеал = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Накладная, Истина);
				ДокЗаказ = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(ДокРеал,"Сделка");
			КонецЕсли;
			
			Если ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаПолностью тогда 
				Если ТипЗнч(ДокЗаказ) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
					Если ДокЗаказ <> Документы.ЗаказПокупателя.ПустаяСсылка() тогда
						//получить таблицу набора записей из соответствующего заказа и записать ее с обратным знаком
						ЗапросЗаказ = Новый Запрос;
						ЗапросЗаказ.Текст = 
						"ВЫБРАТЬ
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ПолучательСкидки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Дивизион,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.АдресПоставки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ОбъектСкидки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
						|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество) КАК Количество,
						|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки) КАК СуммаСкидки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения
						|ИЗ
						|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
						|ГДЕ
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ЗаказПокупателя = &ЗаказПокупателя
						|	И ПЦ_ОграничениеПоПредоставленнымСкидкам.Активность
						|	И НЕ ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.ПР_Претензия
						|	И НЕ ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.ПРГ_СторноНакладной
						|	И НЕ ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.КорректировкаРеализации
						|	И НЕ ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.УстановкаСкидокНоменклатуры
						|
						|СГРУППИРОВАТЬ ПО
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Дивизион,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.АдресПоставки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ОбъектСкидки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ПолучательСкидки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент";
						//получаем движения заказа по ограничениям скидок и сторнируем их
						ЗапросЗаказ.УстановитьПараметр("ЗаказПокупателя",ДокЗаказ);
						РезЗаказ = ЗапросЗаказ.Выполнить().Выбрать();
						Пока РезЗаказ.Следующий() цикл
							Если (РезЗаказ.Количество<>0) или (РезЗаказ.СуммаСкидки) тогда
								НовоеДвижение = Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам.Добавить();
								НовоеДвижение.Период                        = Дата;
								НовоеДвижение.ВидДвижения                   = РезЗаказ.ВидДвижения;
								НовоеДвижение.ПолучательСкидки              = РезЗаказ.ПолучательСкидки;
								НовоеДвижение.Контрагент                    = РезЗаказ.Контрагент;
								НовоеДвижение.ДоговорКонтрагента            = РезЗаказ.ДоговорКонтрагента;
								НовоеДвижение.Дивизион                      = РезЗаказ.Дивизион;
								НовоеДвижение.АдресПоставки                 = РезЗаказ.АдресПоставки;
								НовоеДвижение.ОбъектСкидки                  = РезЗаказ.ОбъектСкидки;
								НовоеДвижение.Номенклатура                  = РезЗаказ.Номенклатура;
								НовоеДвижение.ХарактеристикаНоменклатуры    = РезЗаказ.ХарактеристикаНоменклатуры;
								НовоеДвижение.ТоварнаяКатегория             = РезЗаказ.ТоварнаяКатегория;
								НовоеДвижение.Брендообъем                   = РезЗаказ.Брендообъем;
								НовоеДвижение.УстановкаСкидокНоменклатуры   = РезЗаказ.УстановкаСкидокНоменклатуры;
								НовоеДвижение.ЗаказПокупателя               = ДокЗаказ;
								НовоеДвижение.Количество                    = -РезЗаказ.Количество;
								НовоеДвижение.СуммаСкидки                   = -РезЗаказ.СуммаСкидки;
							КонецЕсли;
						КонецЦикла;	
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаЧастично тогда
				
				//ТабСкидки = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "СуммаИзмененияСкидки1, СуммаИзмененияСкидки2");
				//ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТабСкидки, СтруктураШапкиДокумента);
				//Если ТаблицаПоСкидкам.Количество()>0 тогда
				//	ЗапросКДвижениямПриказа = Новый Запрос;
				//	ЗапросКДвижениямПриказа.Текст = 
				//	"ВЫБРАТЬ
				//	|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент,
				//	|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
				//	|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
				//	|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
				//	|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
				//	|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
				//	|	ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
				//	|	ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки,
				//	|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество
				//	|ИЗ
				//	|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
				//	|ГДЕ
				//	|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор В (&УстановкаСкидокНоменклатуры)
				//	|	И ПЦ_ОграничениеПоПредоставленнымСкидкам.Активность
				//	|	И ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент = &Контрагент";
				//	
				//	ЗапросКДвижениямПриказа.УстановитьПараметр("Контрагент",Контрагент);
				//	//1.Получить таблицу примененных ограничений из приказа
				//	ТабПриказ = ТаблицаПоСкидкам.Скопировать(,"УстановкаСкидокНоменклатуры");
				//	ТабПриказ.Свернуть("УстановкаСкидокНоменклатуры");
				//	//ПривязанныйПриказ = Неопределено;
				//	//Для Каждого СтрПриказ из ТабПриказ Цикл
				//	//	Если (ТипЗнч(СтрПриказ.УстановкаСкидокНоменклатуры) = Тип("ДокументСсылка.УстановкаСкидокНоменклатуры")) и (СтрПриказ.УстановкаСкидокНоменклатуры<>Документы.УстановкаСкидокНоменклатуры.ПустаяСсылка()) тогда
				//	//		ПривязанныйПриказ = СтрПриказ.УстановкаСкидокНоменклатуры;
				//	//	КонецЕсли;	
				//	//КонецЦикла;
				//	//Если (ТипЗнч(ПривязанныйПриказ) = Тип("ДокументСсылка.УстановкаСкидокНоменклатуры")) и (ПривязанныйПриказ<>Документы.УстановкаСкидокНоменклатуры.ПустаяСсылка()) Тогда
				//		ЗапросКДвижениямПриказа.УстановитьПараметр("УстановкаСкидокНоменклатуры",ТабПриказ);
				//		ПланТаблица = ЗапросКДвижениямПриказа.Выполнить().Выгрузить();
				//	//Иначе
				//	//	Сообщить("Не определен приказ на скидку в строке документа! Ошибка при проведении скидок!",СтатусСообщения.Важное);
				//	//	Отказ = Истина;
				//	//	ПланТаблица = Неопределено;
				//	//КонецЕсли;
				//	Если НЕ ПланТаблица = Неопределено тогда
				//		Если ПланТаблица.Количество()=0 тогда
				//			Сообщить("Не найдены данные по установленной скидке для контрагента по выбранному приказу! Ошибка при проведении скидок!",СтатусСообщения.Важное);
				//			Отказ = Истина;
				//		Иначе	
				//			
				//			ПланТаблица.Свернуть("Контрагент,ДоговорКонтрагента,Номенклатура,ХарактеристикаНоменклатуры,ТоварнаяКатегория,Брендообъем,УстановкаСкидокНоменклатуры","СуммаСкидки,Количество");
				//			ТабПоСкидкам = Новый ТаблицаЗначений;
				//			ТабПоСкидкам.Колонки.Добавить("Контрагент");
				//			ТабПоСкидкам.Колонки.Добавить("ДоговорКонтрагента");
				//			ТабПоСкидкам.Колонки.Добавить("Номенклатура");
				//			ТабПоСкидкам.Колонки.Добавить("ХарактеристикаНоменклатуры");
				//			ТабПоСкидкам.Колонки.Добавить("ТоварнаяКатегория");
				//			ТабПоСкидкам.Колонки.Добавить("Брендообъем");
				//			ТабПоСкидкам.Колонки.Добавить("УстановкаСкидокНоменклатуры");
				//			ТабПоСкидкам.Колонки.Добавить("ЗаказПокупателя");
				//			ТабПоСкидкам.Колонки.Добавить("СуммаСкидки");
				//			ТабПоСкидкам.Колонки.Добавить("Количество");
				//			
				//			//2.Приводим ФактТаблица в формат ПланТаблица путем сворачивания по измерениям; считаем, что на каждый приказ УстановкаСкидокНоменклатуры одинаковое количество измерений
				//			ТЗУстановки = ТаблицаПоСкидкам.Скопировать(,"УстановкаСкидокНоменклатуры,СуммаСкидки,Количество");
				//			ТЗУстановки.Свернуть("УстановкаСкидокНоменклатуры","СуммаСкидки,Количество");
				//			Для Каждого СтрокаТЗУстановки из ТЗУстановки цикл
				//				СтрокаПолейСворачивания = "Номенклатура,ХарактеристикаНоменклатуры,ТоварнаяКатегория,Брендообъем,УстановкаСкидокНоменклатуры";
				//				Отбор = Новый Структура;
				//				Отбор.Вставить("УстановкаСкидокНоменклатуры", СтрокаТЗУстановки.УстановкаСкидокНоменклатуры);
				//				СтрокиПлана = ПланТаблица.НайтиСтроки(Отбор);
				//				Для Каждого Стр Из СтрокиПлана Цикл
				//					Если Стр.Номенклатура=Справочники.Номенклатура.ПустаяСсылка() тогда
				//						СтрокаПолейСворачивания = СтрЗаменить(СтрокаПолейСворачивания,"Номенклатура,","");
				//					Иначе
				//						Отбор.Вставить("Номенклатура",Стр.Номенклатура);
				//					КонецЕсли;	
				//					Если Стр.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() тогда
				//						СтрокаПолейСворачивания = СтрЗаменить(СтрокаПолейСворачивания,"ХарактеристикаНоменклатуры,","");
				//					Иначе
				//						Отбор.Вставить("ХарактеристикаНоменклатуры",Стр.ХарактеристикаНоменклатуры);
				//					КонецЕсли;	
				//					Если Стр.ТоварнаяКатегория=Справочники.НСИ_ТоварныеКатегории.ПустаяСсылка() тогда
				//						СтрокаПолейСворачивания = СтрЗаменить(СтрокаПолейСворачивания,"ТоварнаяКатегория,","");
				//					Иначе
				//						Отбор.Вставить("ТоварнаяКатегория",Стр.ТоварнаяКатегория);
				//					КонецЕсли;	
				//					Если Стр.Брендообъем=Справочники.НСИ_Брендообъемы.ПустаяСсылка() тогда
				//						СтрокаПолейСворачивания = СтрЗаменить(СтрокаПолейСворачивания,"Брендообъем,","");
				//					Иначе
				//						Отбор.Вставить("Брендообъем",Стр.Брендообъем);
				//					КонецЕсли;	
				//					ФактТаблицаПоДокументу = ТаблицаПоСкидкам.Скопировать(Отбор);
				//					ФактТаблицаПоДокументу.Свернуть(СтрокаПолейСворачивания,"СуммаСкидки,Количество");
				//					Для Каждого ТекСтрокаФактТаблицаПоДокументу Из ФактТаблицаПоДокументу Цикл
				//						Стр.СуммаСкидки = ТекСтрокаФактТаблицаПоДокументу.СуммаСкидки;
				//						Стр.Количество  = ТекСтрокаФактТаблицаПоДокументу.Количество;
				//						НоваяСтрокаТаблицыЗначений = ТабПоСкидкам.Добавить();
				//						ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыЗначений, Стр);
				//					КонецЦикла;	
				//				КонецЦикла;
				//			КонецЦикла;
				//			ТабПоСкидкам.ЗаполнитьЗначения(ДокЗаказ, "ЗаказПокупателя");
				//			//3.Формирование движений 
				//			НаборДвижений = Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам;
				//			ТаблицаДвижений = НаборДвижений.Выгрузить();
				//			ТаблицаДвижений.Очистить();
				//			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабПоСкидкам, ТаблицаДвижений);
				//			ТаблицаДвижений.ЗаполнитьЗначения(Дата,"Период");
				//			НаборДвижений.мПериод            = Дата;
				//			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
				//			Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам.ВыполнитьРасход();
				//			Если ПараметрыСеанса.ПроведениеДокументов = ложь Тогда
				//				//4.Контроль отрицательного сальдо по регистру
				//				Движения.Записать();
				//				ЗапросОстатки = Новый Запрос;
				//				ЗапросОстатки.Текст = 
				//				"ВЫБРАТЬ
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
				//				|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) КАК КоличествоОстаток,
				//				|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) КАК СуммаСкидкиОстаток,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ПолучательСкидки,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Дивизион,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.АдресПоставки,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ОбъектСкидки
				//				|ИЗ
				//				|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам.Остатки(
				//				|			,
				//				|			УстановкаСкидокНоменклатуры В (&Приказы)
				//				|				И Контрагент = &Контрагент) КАК ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки
				//				|
				//				|СГРУППИРОВАТЬ ПО
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Брендообъем,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ТоварнаяКатегория,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ХарактеристикаНоменклатуры,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Номенклатура,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ДоговорКонтрагента,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Контрагент,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.УстановкаСкидокНоменклатуры,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.АдресПоставки,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.Дивизион,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ПолучательСкидки,
				//				|	ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.ОбъектСкидки
				//				|
				//				|ИМЕЮЩИЕ
				//				|	(СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.КоличествоОстаток) < 0
				//				|		ИЛИ СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкамОстатки.СуммаСкидкиОстаток) < -3)";
				//				
				//				ТЗУстановки.Свернуть("УстановкаСкидокНоменклатуры");
				//				СписокПриказов = Новый Массив;
				//				Для Каждого СтрокаТЗУстановки из ТЗУстановки цикл
				//					//>>060616 Степанов не проверять минуса когда считаем количество по брендообъему целиком
				//					ПРГ_ОбъединятьБрендообъем = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(СтрокаТЗУстановки.УстановкаСкидокНоменклатуры,"ПРГ_ОбъединятьБрендообъем");
				//					Если Не ПРГ_ОбъединятьБрендообъем тогда
				//						СписокПриказов.Добавить(СтрокаТЗУстановки.УстановкаСкидокНоменклатуры);
				//					КонецЕсли;
				//				КонецЦикла;	
				//				ЗапросОстатки.УстановитьПараметр("Приказы",СписокПриказов);
				//				ЗапросОстатки.УстановитьПараметр("Контрагент",Контрагент);
				//				РезОстатки = ЗапросОстатки.Выполнить().Выбрать();
				//				Пока РезОстатки.Следующий() Цикл
				//					Сообщить("Проведение документа приведет к излишнему предоставлению скидки!",СтатусСообщения.Важное);
				//					Сообщить(Строка(РезОстатки.УстановкаСкидокНоменклатуры)+?(РезОстатки.КоличествоОстаток<0,"; Кол-во: "+Строка(РезОстатки.КоличествоОстаток),"")+?(РезОстатки.СуммаСкидкиОстаток<0,"; Сумма: "+Строка(РезОстатки.СуммаСкидкиОстаток),""));
				//					Отказ = Истина;
				//				КонецЦикла;
				//				Если  СтатусДокумента <> Перечисления.ПР_СтатусыПретензии.Отработана тогда
				//					Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам.Очистить();
				//				КонецЕсли;	
				//			КонецЕсли;
				//		КонецЕсли;
				//	КонецЕсли;	
				//КонецЕсли;
				
				ТаблицаСкидок = ТаблицаПоТоварам.Скопировать(,"ПриказУстановкиСкидки,ПЦ_ОграниченияСкидки,НомерСтрокиПолучателя,НомерСтрокиТовара,СтавкаНДС,Количество,СуммаИзмененияСкидки2");
				ТаблицаСкидок.Свернуть("ПриказУстановкиСкидки,ПЦ_ОграниченияСкидки,НомерСтрокиПолучателя,НомерСтрокиТовара,СтавкаНДС","Количество,СуммаИзмененияСкидки2");
				Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
					Для каждого СтрочкаТаблицыскидок Из ТаблицаСкидок Цикл
						СтрочкаТаблицыскидок.СуммаИзмененияСкидки2 = СтрочкаТаблицыскидок.СуммаИзмененияСкидки2 + Окр(УчетНДС.РассчитатьСуммуНДС(СтрочкаТаблицыскидок.СуммаИзмененияСкидки2, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтрочкаТаблицыскидок.СтавкаНДС)),2);
					КонецЦикла; 
				КонецЕсли;
				
				ЗапросТС = Новый Запрос;
				ЗапросТС.Текст = 
				"ВЫБРАТЬ
				|	ТЗ.ПриказУстановкиСкидки КАК УстановкаСкидокНоменклатуры,
				|	ВЫРАЗИТЬ(ПЦ_ОграниченияСкидки КАК Перечисление.ПЦ_ОграниченияПредоставленныхСкидок) КАК ПЦ_ОграниченияСкидки,
				|	ТЗ.НомерСтрокиПолучателя,
				|	ТЗ.НомерСтрокиТовара,
				|	ТЗ.Количество,
				|	ТЗ.СуммаИзмененияСкидки2 КАК СуммаСкидкиСНДС
				|ПОМЕСТИТЬ ВТ_ТаблицаСкидок
				|ИЗ
				|	&ТЗ КАК ТЗ
				|ГДЕ
				|	НЕ(ТЗ.ПриказУстановкиСкидки ЕСТЬ NULL 
				|				ИЛИ ТЗ.ПриказУстановкиСкидки = ЗНАЧЕНИЕ(Документ.УстановкаСкидокНоменклатуры.ПустаяСсылка))
				|   И НЕ (ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.Период)) 
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВложенныйЗапрос.УстановкаСкидокНоменклатуры,
				|	ВложенныйЗапрос.ПЦ_ОграниченияСкидки,
				|	ВложенныйЗапрос.НомерСтрокиПолучателя,
				|	ВложенныйЗапрос.НомерСтрокиТовара,
				|	ВложенныйЗапрос.Количество,
				|	ВложенныйЗапрос.СуммаСкидки,
				|	ВложенныйЗапрос.ПолучательСкидки,
				|	ВложенныйЗапрос.Контрагент,
				|	ВложенныйЗапрос.ДоговорКонтрагента,
				|	ВложенныйЗапрос.АдресПоставки,
				|	ВложенныйЗапрос.Дивизион,
				|	ВложенныйЗапрос.ОбъектСкидки,
				|	ВложенныйЗапрос.ТоварнаяКатегория,
				|	ВложенныйЗапрос.Брендообъем,
				|	ВложенныйЗапрос.Номенклатура,
				|	ВложенныйЗапрос.ЗаказПокупателя
				|ИЗ
				|(ВЫБРАТЬ
				|	ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры,
				|	ВТ_ТаблицаСкидок.ПЦ_ОграниченияСкидки,
				|	ВТ_ТаблицаСкидок.НомерСтрокиПолучателя,
				|	ВТ_ТаблицаСкидок.НомерСтрокиТовара,
				|	ВЫБОР
				|		КОГДА ВТ_ТаблицаСкидок.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем)
				|			ТОГДА ВТ_ТаблицаСкидок.Количество
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК Количество,
				|	ВЫБОР
				|		КОГДА ВТ_ТаблицаСкидок.ПЦ_ОграниченияСкидки <> ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем)
				|			ТОГДА ВТ_ТаблицаСкидок.СуммаСкидкиСНДС
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК СуммаСкидки,
				|	УстановкаСкидокНоменклатурыПолучателиСкидки.ПолучательСкидки,
				|	УстановкаСкидокНоменклатурыПолучателиСкидки.Контрагент,
				|	УстановкаСкидокНоменклатурыПолучателиСкидки.ДоговорКонтрагента,
				|	УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_АдресПоставки КАК АдресПоставки,
				|	УстановкаСкидокНоменклатурыПолучателиСкидки.ПЦ_Дивизион КАК Дивизион,
				|	УстановкаСкидокНоменклатурыТовары.ОбъектСкидки,
				|	ВЫБОР
				|		КОГДА УстановкаСкидокНоменклатурыТовары.Ссылка.ПРГ_ОбъединятьБрендообъем
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
				|		ИНАЧЕ ВЫБОР
				|				КОГДА УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем = ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
				|					ТОГДА УстановкаСкидокНоменклатурыТовары.ПЦ_ТоварнаяКатегория
				|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НСИ_ТоварныеКатегории.ПустаяСсылка)
				|			КОНЕЦ
				|	КОНЕЦ КАК ТоварнаяКатегория,
				|	ВЫБОР
				|		КОГДА УстановкаСкидокНоменклатурыТовары.Ссылка.ПРГ_ОбъединятьБрендообъем
				|			ТОГДА УстановкаСкидокНоменклатурыТовары.Номенклатура.НСИ_Брендообъем
				|		ИНАЧЕ ВЫБОР
				|				КОГДА УстановкаСкидокНоменклатурыТовары.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
				|					ТОГДА УстановкаСкидокНоменклатурыТовары.ПЦ_Брендообъем
				|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НСИ_Брендообъемы.ПустаяСсылка)
				|			КОНЕЦ
				|	КОНЕЦ КАК Брендообъем,
				|	ВЫБОР
				|		КОГДА УстановкаСкидокНоменклатурыТовары.Ссылка.ПРГ_ОбъединятьБрендообъем
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
				|		ИНАЧЕ УстановкаСкидокНоменклатурыТовары.Номенклатура
				|	КОНЕЦ КАК Номенклатура,
				|	&ЗаказПокупателя КАК ЗаказПокупателя
				|ИЗ
				|	ВТ_ТаблицаСкидок КАК ВТ_ТаблицаСкидок
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УстановкаСкидокНоменклатуры.Товары КАК УстановкаСкидокНоменклатурыТовары
				|		ПО ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры = УстановкаСкидокНоменклатурыТовары.Ссылка
				|			И ВТ_ТаблицаСкидок.НомерСтрокиТовара = УстановкаСкидокНоменклатурыТовары.НомерСтроки
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УстановкаСкидокНоменклатуры.ПолучателиСкидки КАК УстановкаСкидокНоменклатурыПолучателиСкидки
				|		ПО ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры = УстановкаСкидокНоменклатурыПолучателиСкидки.Ссылка
				|			И ВТ_ТаблицаСкидок.НомерСтрокиПолучателя = УстановкаСкидокНоменклатурыПолучателиСкидки.НомерСтроки
				|ГДЕ
				|	НЕ(ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры ЕСТЬ NULL 
				|				ИЛИ ВТ_ТаблицаСкидок.УстановкаСкидокНоменклатуры = ЗНАЧЕНИЕ(Документ.УстановкаСкидокНоменклатуры.ПустаяСсылка))) КАК ВложенныйЗапрос
				|ГДЕ (ВложенныйЗапрос.ПЦ_ОграниченияСкидки = ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем) И ВложенныйЗапрос.Количество<>0)
				|   ИЛИ (ВложенныйЗапрос.ПЦ_ОграниченияСкидки <> ЗНАЧЕНИЕ(Перечисление.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем) И ВложенныйЗапрос.СуммаСкидки<>0)";
				
				ЗапросТС.УстановитьПараметр("ЗаказПокупателя", Ссылка);
				ЗапросТС.УстановитьПараметр("ТЗ", ТаблицаСкидок);
				
				РезТС = ЗапросТС.Выполнить().Выгрузить();
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаСкидок", РезТС);
				НаборДвижений = Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам;
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//<<080416
	
КонецПроцедуры

Процедура ЗаписатьИзменениеСтатусов(Отказ)
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструСтатусы(Отказ);
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = СтатусДокумента Тогда
		СформируемЗаписьПоРегиструСтатусы(Отказ);
	КонецЕсли; 
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусы(Отказ)
	
	мДатаЗаписи = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = СтатусДокумента;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры


// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	//// Здесь услуг быть не должно.
	//УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	//// Здесь наборов быть не должно.
	//УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	//// Здесь комплектов быть не должно.
	//УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	ПроверитьСтрокиТабличнойЧасти("Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

//Проверяет заполнение реквизитов табличных частей
Процедура  ПроверитьСтрокиТабличнойЧасти(ИмяТЧ, ТЧ, Отказ, Заголовок)
	
	//Для каждого Строка из ТЧ цикл
	//	
	//	СтрокаНачалаСообщенияОбОшибке = Нстр("ru = 'В строке номер """+ СокрЛП(Строка.НомерСтроки) + """ табличной части """ + ИмяТЧ + """: '");
	//	
	//	// Описываем механизмы проверки строк 
	//	
	//КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание) Экспорт
	
	Если ЭтоНовый() И НЕ Основание = Неопределено И НЕ ТипЗнч(Основание) = Тип("Структура") Тогда
		
		ДокументОснование = Основание;
		
		//++ Spl_Апроф 29.01.2015 (k.russkih@a-prof.ru) Подберем последний документ корректировка
		ПолучитьПоследнийДокументПоРеализации(Основание); 
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АктСверкиВзаиморасчетов") Тогда	
		
	ИначеЕсли Не Основание = Неопределено Тогда			
		ЗаполнимПоДаннымНакладной(Накладная);
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаЗаполнения()

Функция ПолучитьПоследнийДокументПоРеализации(Основание) Экспорт
	
	//++ Spl_Апроф 29.01.2015 (k.russkih@a-prof.ru) Подберем последний документ корректировка
	Заполнить = Ложь;
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		ДокументСсылка   = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Основание, Ложь);
		мДокументОснование = ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка);
		
		#Если Клиент Тогда
			Если ЗначениеЗаполнено(мДокументОснование) И Основание <> мДокументОснование И Основание.Дата < мДокументОснование.Дата Тогда
				Если Вопрос("Для указанного документа существуют более поздние корректировки.
					|Использовать последнюю введенную корректировку?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
					мДокументОснование = Основание;
					Заполнить = Ложь;
				Иначе
					Заполнить = Истина;
				КонецЕсли;
			Иначе
				мДокументОснование = Основание;
			КонецЕсли;
		#КонецЕсли
		
		Если ЗначениеЗаполнено(ДокументСсылка)
			И ЗначениеЗаполнено(ДокументСсылка.ВалютаДокумента) 
			И ДокументСсылка.ВалютаДокумента <> мВалютаРегламентированногоУчета 
			И ЗначениеЗаполнено(ДокументСсылка.ДоговорКонтрагента)
			И ДокументСсылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			#Если Клиент Тогда
				Предупреждение("Для договоров в условных единицах, корректировка документов, оформленных в валюте, не поддерживается.
				|Корректируемый документ должен быть оформлен в рублях.");
			#КонецЕсли
			Возврат Ложь;			
		КонецЕсли;			
		
		Накладная = мДокументОснование;
		
	Иначе
		
		Накладная = Основание;
		
	КонецЕсли;
	
	Возврат Заполнить;
	
КонецФункции

Функция ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка) Экспорт
	
	/// Кунов О.В., 17.07.2015 - 41617
	
	ЗапросПоискПоОснованию = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязанныеДокументы.Ссылка КАК Документ
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&Документ) КАК СвязанныеДокументы");
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ДокументСсылка);
	
	Корректировки = Новый ТаблицаЗначений;
	Корректировки.Колонки.Добавить("Документ");
	Корректировки.Колонки.Добавить("Дата");
	
	СвязанныеДокументыКритерий = КритерииОтбора.СвязанныеДокументы;
	
	Н = 0;
	
	Пока Истина Цикл
		
		Документ = МассивДокументов[Н];
		
		Если Не Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(Документ)) Тогда
			Если Н = МассивДокументов.Количество()-1 Тогда
				Прервать;
			Иначе
				Н = Н+1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЗапросПоискПоОснованию.УстановитьПараметр("Документ", Документ);
		СвязанныеДокументы = ЗапросПоискПоОснованию.Выполнить().Выбрать();
		Пока СвязанныеДокументы.Следующий() Цикл
			СвязанныйДокумент = СвязанныеДокументы.Документ;
			Если МассивДокументов.Найти(СвязанныйДокумент) = Неопределено Тогда
				МассивДокументов.Добавить(СвязанныйДокумент);
				Если ТипЗнч(СвязанныйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					ЗаполнитьЗначенияСвойств(Корректировки.Добавить(), Новый Структура("Документ, Дата", СвязанныйДокумент, СвязанныйДокумент.Дата));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Н = МассивДокументов.Количество()-1 Тогда
			Прервать;
		Иначе
			Н = Н+1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Корректировки.Количество() > 0 Тогда
		Корректировки.Свернуть("Документ, Дата");
		Корректировки.Сортировать("Дата УБЫВ");
		Результат = Корректировки[0].Документ;
	Иначе
		Результат = ДокументСсылка;
	КонецЕсли;
	
	Возврат Результат;
	///
	
	
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Ссылка", 	  ДокументСсылка);
	//Запрос.УстановитьПараметр("ЭтотДокумент", ДокументСсылка);
	//
	//Запрос.Текст = 
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	КорректировкаРеализации.Ссылка
	//|ИЗ
	//|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	//|ГДЕ
	//|	КорректировкаРеализации.ИсправляемыйДокументРеализации = &Ссылка
	////++ Spl_Апроф 25.02.2015 (k.russkih@a-prof.ru)
	////|	И КорректировкаРеализации.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
	//|	И КорректировкаРеализации.Ссылка <> &ЭтотДокумент
	//|	И КорректировкаРеализации.Проведен
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	КорректировкаРеализации.Дата УБЫВ";
	//
	//Результат = Запрос.Выполнить().Выбрать();
	//
	//Если Результат.Следующий() Тогда
	//	Возврат Результат.Ссылка;
	//КонецЕсли;
	//
	//Возврат ДокументСсылка;
	
КонецФункции

Процедура ЗаполнимПоДаннымНакладной(Основание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Накладная) Тогда	
		Накладная = Основание;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Накладная) Тогда
		Товары.Очистить();
		Возврат;
	КонецЕсли;
	
	СписокИменДляПодстановкиВРеквизиты = Новый СписокЗначений;
	СписокИменДляПодстановкиВРеквизиты.Добавить("Факт");
	СписокИменДляПодстановкиВРеквизиты.Добавить("Накладной");
	
	Если ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаПолностью Тогда	
		СписокИменДляПодстановкиВРеквизиты.Добавить("");	
	КонецЕсли; 
	
	ЗаполнятьСуммы = Истина; ЭтоПеремещение = Ложь;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Накладная, "СуммаВключаетНДС, ВалютаДокумента, УчитыватьНДС, Склад");
		Если НЕ Накладная.Сделка = Неопределено Тогда		
			КП_Отделение = Накладная.Сделка.КП_Отделение;
		КонецЕсли;		
		СкладПретензии = АП_ОбщегоНазначенияСервер.ПолучимСкладыПоПривязкеКОтделению(КП_Отделение).СкладПретензии;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
		
		/// Кунов О.В., 17.03.2016 - 49346
		Если Не ЗначениеЗаполнено(ВидПретензии) Тогда
			ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаЧастично;
		КонецЕсли;
		///
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Накладная.ДокументРеализации, "СуммаВключаетНДС, ВалютаДокумента, УчитыватьНДС, Склад");
		
		Если НЕ Накладная.ДокументРеализации.Сделка = Неопределено Тогда		
			КП_Отделение = Накладная.ДокументРеализации.Сделка.КП_Отделение;
		КонецЕсли;
		СкладПретензии = АП_ОбщегоНазначенияСервер.ПолучимСкладыПоПривязкеКОтделению(КП_Отделение).СкладПретензии;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		ВидПретензии = Перечисления.ПР_ВидыПретензий.ПеремещениеПродукцииМеждуСкладами;
		
		ЗаполнятьСуммы = Ложь;
		
		ЭтоПеремещение = Истина;
		
		КП_Отделение = Основание.ВнутреннийЗаказ.КП_Отделение;
		СкладПретензии = Основание.ВнутреннийЗаказ.СП_СкладПретензий;
		
		Склад = Основание.СкладПолучатель;
		
	КонецЕсли; 
	
	ЗаполнитьВозвратПринятым = ((ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаПолностью) ИЛИ (ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаЧастично)) И СкладПодключенКСолво();
	
	ОбновитьДанныеПоПлану();
	
	мКлиентОтказалсяОтЗаказаПолностью = (ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаПолностью);
	
	Товары.Очистить();
	
	//ЕстьЦена = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", Основание.Метаданные(), "Товары");
	
	/// Кунов О.В., 06.04.2015 - 38453
	ВведеноНаОснованииРеализации = ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	///
	
	Для каждого Стр Из Основание.Товары Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Если ЭтоПеремещение = Истина Тогда			
			Если Стр.Количество = Стр.ПР_ФактическиПринято Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		/// Кунов О.В., 25.07.2017 - 68491
		Если Стр.Количество = 0 Тогда // не добавляем строки, по которым в основании нулевое факт. количество
			Продолжить;
		КонецЕсли;
		///
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
		
		НоваяСтрока.ВидыПричинПретензии = ВидыПричинПретензии;
		НоваяСтрока.РешениеПоПретензии = РешениеПоПретензии;
		НоваяСтрока.ПричинаПретензии = ПричинаПретензии;
		
		/// Кунов О.В., 06.04.2015 - 38453
		Если ЗаполнятьСуммы Тогда
			Если ВведеноНаОснованииРеализации Тогда
				//>>160216 Степанов 47341 Скидки не суммируются
				//ЦенаСоСкидкой 			= (100 - Стр.ПроцентАвтоматическихСкидок - Стр.ПроцентСкидкиНаценки) / 100 * Стр.Цена;
				
				//>>070416 Степанов
				НоваяСтрока.ЦенаНакладнойБезВычетаСкидки = Стр.Цена;
				НоваяСтрока.ПроцентАвтоматическихСкидокДоИзменения = Стр.ПроцентАвтоматическихСкидок;
				//<<070416
				
				ЦенаСоСкидкой 			= Стр.Цена*(100-Стр.ПроцентСкидкиНаценки)/100*(100-Стр.ПроцентАвтоматическихСкидок)/100;
				НоваяСтрока.ЦенаФакт 	= ЦенаСоСкидкой;
				НоваяСтрока.Цена 		= ЦенаСоСкидкой;
				
				//{20.12.2016 Островерхий заявка №57373 
				НоваяСтрока.ПЦ_ПроцентДопИзмененияЦеныНакладной = Стр.ПЦ_ПроцентДопИзмененияЦены;
				НоваяСтрока.ПЦ_ПроцентДопИзмененияЦеныФакт = Стр.ПЦ_ПроцентДопИзмененияЦены;
				//20.12.2016 Островерхий} 
				
			Иначе
				
				//>>120416 Степанов 
				Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") тогда
					НоваяСтрока.ПроцентАвтоматическихСкидокДоИзменения = Стр.ПроцентАвтоматическихСкидок;
				КонецЕсли;
				//<<120416
				
				НоваяСтрока.ЦенаФакт	= Стр.Цена;
				НоваяСтрока.Цена		= Стр.Цена;
				
				//{20.12.2016 Островерхий заявка №57373 
				НоваяСтрока.ПЦ_ПроцентДопИзмененияЦеныНакладной = Стр.ПЦ_ПроцентДопИзмененияЦеныНакладной;
				НоваяСтрока.ПЦ_ПроцентДопИзмененияЦеныФакт = Стр.ПЦ_ПроцентДопИзмененияЦеныФакт;
				//20.12.2016 Островерхий}
				
			КонецЕсли;
			//<<160216
		КонецЕсли; 
		///
		
		НоваяСтрока.Количество = 0;
		ПриИзмененииКоличества(НоваяСтрока);
		
		Для каждого Значение Из СписокИменДляПодстановкиВРеквизиты Цикл
			
			#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			НоваяСтрока["Количество"+Значение] 	= Стр.Количество;
			
			//++ Spl_Апроф 16.02.2015 (k.russkih@a-prof.ru) по заявке от Солоповой Ольги
			//Если ЗаполнитьВозвратПринятым Тогда			
			//	НоваяСтрока.КоличествоВозврат = Стр.Количество;
			//КонецЕсли;
			
			Если мКлиентОтказалсяОтЗаказаПолностью Тогда
				НоваяСтрока.КоличествоРекламации = Стр.Количество;
				ПриИзмененииКоличества(НоваяСтрока, "Рекламации");
			КонецЕсли; 
			
			//++ Spl_Апроф 01.12.2014 (k.russkih@a-prof.ru) Для перемещение заполняем количество факт
			Если ЭтоПеремещение = Истина Тогда							
				
				НоваяСтрока.КоличествоФакт = Стр.ПР_ФактическиПринято;
				
				мСписокДополнений = Новый СписокЗначений;
				мСписокДополнений.Добавить("Факт"); 
				мСписокДополнений.Добавить("Рекламации");	
				
				Для каждого Строка Из мСписокДополнений Цикл				
					ПриИзмененииКоличества(НоваяСтрока, Строка.Значение);				
				КонецЦикла;
				
			КонецЕсли; 
			//-- Spl_Апроф
			
			Если ЗаполнятьСуммы Тогда
				
				НоваяСтрока["Сумма"+Значение] 		= Стр.Сумма;
				НоваяСтрока["СуммаНДС"+Значение] 	= Стр.СуммаНДС;
				
			КонецЕсли;
			
		КонецЦикла; 				
		
	КонецЦикла;
	
	//>>080416 Степанов 47706; СКИДКИ
	ТЗТоваров = Товары.Выгрузить(,"ЗаказПокупателя");
	ТЗТоваров.Свернуть("ЗаказПокупателя");
	РодительскийЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	Для Каждого ТекСтрокаТЗ из ТЗТоваров цикл
		//ищем родительский заказ покупателя, подразумевая, что одна реализация соответствует одному заказу
		Если ТекСтрокаТЗ.ЗаказПокупателя <> Документы.ЗаказПокупателя.ПустаяСсылка() тогда
			РодительскийЗаказПокупателя = ТекСтрокаТЗ.ЗаказПокупателя;
		КонецЕсли;	
	КонецЦикла;
	Если РодительскийЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка() тогда
		//нет заказа, - нет операций со скидками
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.НомерСтроки,
		|	ЗаказПокупателяТовары.Номенклатура,
		|	ЗаказПокупателяТовары.ПроцентСкидкиНаценки,
		|	ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок,
		|	ЗаказПокупателяТовары.ЗначениеУсловияАвтоматическойСкидки,
		|	ЗаказПокупателяТовары.НомерСтрокиПолучателя,
		|	ЗаказПокупателяТовары.НомерСтрокиТовара
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка = &Заказ
		|	И (ЗаказПокупателяТовары.ПроцентСкидкиНаценки <> 0
		|	ИЛИ ЗаказПокупателяТовары.ПроцентАвтоматическихСкидок <> 0)";
		Запрос.УстановитьПараметр("Заказ",РодительскийЗаказПокупателя);
		Рез = Запрос.Выполнить().Выбрать();
		Пока Рез.Следующий() цикл
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура", Рез.Номенклатура);
			НайденныеСтроки = Товары.НайтиСтроки(Отбор);
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				//пересчет данных строки в соответствии со скидками
				//ТекСтрока.ПроцентСкидкиНаценки = Рез.ПроцентСкидкиНаценки;
				//ТекСтрока.ПроцентАвтоматическихСкидок = Рез.ПроцентАвтоматическихСкидок;
				ТекСтрока.ПриказУстановкиСкидки = Рез.ЗначениеУсловияАвтоматическойСкидки;
				//ТекСтрока.СуммаИзмененияСкидки1=0;
				//ТекСтрока.СуммаИзмененияСкидки2=0;
				ТекСтрока.НомерСтрокиПолучателя = Рез.НомерСтрокиПолучателя;
				ТекСтрока.НомерСтрокиТовара = Рез.НомерСтрокиТовара;
				
				//РазницаСуммыБезНДС = (ТекСтрока.Сумма-ТекСтрока.СуммаДоИзменения)-?(СуммаВключаетНДС,ТекСтрока.СуммаНДС-ТекСтрока.СуммаНДСДоИзменения,0);
				//ОстатокБазыРасчетаСкидки = РазницаСуммыБезНДС;
				//Если РазницаСуммыБезНДС<>0 тогда
				//	Если ТекСтрока.ПроцентАвтоматическихСкидок>0 тогда
				//		ТекСтрока.СуммаИзмененияСкидки2 = ОстатокБазыРасчетаСкидки*100/(100-ТекСтрока.ПроцентАвтоматическихСкидок)-РазницаСуммыБезНДС;
				//		ОстатокБазыРасчетаСкидки = ОстатокБазыРасчетаСкидки+ТекСтрока.СуммаИзмененияСкидки2;
				//	Конецесли;
				//	Если ТекСтрока.ПроцентСкидкиНаценки>0 тогда
				//		ТекСтрока.СуммаИзмененияСкидки1 = ОстатокБазыРасчетаСкидки*100/(100-ТекСтрока.ПроцентСкидкиНаценки)-ОстатокБазыРасчетаСкидки;
				//	КонецЕсли;	
				//КонецЕсли;
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;	
    //<<080416 Степанов 47706; СКИДКИ	
	
	
	
	//>>080416 Степанов б/н добавлены новые реквизиты
	/// Кунов О.В., 02.06.2015 - 40204
	//Товары.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения, Коэффициент, Цена, ЦенаФакт, СтавкаНДС,
	//	|ВидыПричинПретензии, ПричинаПретензии, РешениеПоПретензии, ДатаРешения, Примечание, Пометка,
	//	|ПроцентАвтоматическихСкидок, ПроцентСкидкиНаценки, ПЦ_ТипЦен, ПЦ_ДатаЦены",
	//	"Количество, КоличествоНакладной, КоличествоФакт, КоличествоРекламации, КоличествоВозврат, КоличествоПринятоСкладом, Сумма, СуммаНакладной, СуммаФакт,
	//	|СуммаРекламации, СуммаНДС, СуммаНДСНакладной, СуммаНДСФакт, СуммаНДСРекламации"
	//);
	
	//{20.12.2016 Островерхий заявка №57373
	//Товары.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения, Коэффициент, Цена, ЦенаФакт, СтавкаНДС,
	//|ВидыПричинПретензии, ПричинаПретензии, РешениеПоПретензии, ДатаРешения, Примечание, Пометка,
	//|ПроцентАвтоматическихСкидок, ПроцентСкидкиНаценки, ПЦ_ТипЦен, ПЦ_ДатаЦены, ЦенаНакладнойБезВычетаСкидки, ПроцентАвтоматическихСкидокДоИзменения, ПриказУстановкиСкидки, НомерСтрокиПолучателя, НомерСтрокиТовара, ЗаказПокупателя",
	//"Количество, КоличествоНакладной, КоличествоФакт, КоличествоРекламации, КоличествоВозврат, КоличествоПринятоСкладом, Сумма, СуммаНакладной, СуммаФакт,
	//|СуммаРекламации, СуммаНДС, СуммаНДСНакладной, СуммаНДСФакт, СуммаНДСРекламации, СуммаИзмененияСкидки1, СуммаИзмененияСкидки2"
	//);
	
	Товары.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, ЕдиницаИзмерения, Коэффициент, Цена, ЦенаФакт, СтавкаНДС,
	|ВидыПричинПретензии, ПричинаПретензии, РешениеПоПретензии, ДатаРешения, Примечание, Пометка,
	|ПроцентАвтоматическихСкидок, ПроцентСкидкиНаценки, ПЦ_ТипЦен, ПЦ_ДатаЦены, ЦенаНакладнойБезВычетаСкидки, ПроцентАвтоматическихСкидокДоИзменения, ПриказУстановкиСкидки, НомерСтрокиПолучателя, НомерСтрокиТовара, ЗаказПокупателя,ПЦ_ПроцентДопИзмененияЦеныНакладной,ПЦ_ПроцентДопИзмененияЦеныФакт",
	"Количество, КоличествоНакладной, КоличествоФакт, КоличествоРекламации, КоличествоВозврат, КоличествоПринятоСкладом, Сумма, СуммаНакладной, СуммаФакт,
	|СуммаРекламации, СуммаНДС, СуммаНДСНакладной, СуммаНДСФакт, СуммаНДСРекламации, СуммаИзмененияСкидки1, СуммаИзмененияСкидки2"
	);
	//20.12.2016 Островерхий} 
	
	///
	//<<
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ОбъектКопирования.Ссылка);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("СкладПретензии");
	ПроверяемыеРеквизиты.Добавить("Накладная");
	ПроверяемыеРеквизиты.Добавить("ЭтапВозникновенияПретензии");
	ПроверяемыеРеквизиты.Добавить("СтатусДокумента");
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("КП_Отделение");
	
	ПроверяемыеРеквизиты.Добавить("Товары.Номенклатура");
	
	Если НЕ СтатусДокумента = Перечисления.ПР_СтатусыПретензии.Новый Тогда
		
		//ПроверяемыеРеквизиты.Добавить("Товары.Количество");
		//ПроверяемыеРеквизиты.Добавить("Товары.ПричинаПретензии");
		
		Если СтатусДокумента = Перечисления.ПР_СтатусыПретензии.Отклонена Тогда
			
			ПроверяемыеРеквизиты.Добавить("Товары.РешениеПоПретензии");
			
		ИначеЕсли СтатусДокумента = Перечисления.ПР_СтатусыПретензии.Отработана Тогда
			
			ПроверяемыеРеквизиты.Добавить("ДатаЗакрытия");
			ПроверяемыеРеквизиты.Добавить("Товары.РешениеПоПретензии");
			ПроверяемыеРеквизиты.Добавить("Товары.ДатаРешения");
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриИзмененииКоличества(СтрокаТабличнойЧасти, ДополнениеКРеквизиту = "") Экспорт
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнениеКРеквизиту = "Факт" Тогда
		
		Если ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаПолностью Тогда
			СтрокаТабличнойЧасти.КоличествоРекламации 	= СтрокаТабличнойЧасти.Количество;
		Иначе	
			СтрокаТабличнойЧасти.КоличествоРекламации 	= СтрокаТабличнойЧасти.КоличествоНакладной - СтрокаТабличнойЧасти.КоличествоФакт;			
		КонецЕсли; 
		
	КонецЕсли; 
	
	//СтрокаТабличнойЧасти["Сумма"+ДополнениеКРеквизиту] = СтрокаТабличнойЧасти["Количество"+ДополнениеКРеквизиту] * СтрокаТабличнойЧасти.ЦенаФакт;
	//
	//СуммаСкидки = 0;
	//
	//СуммаСкидки = СтрокаТабличнойЧасти["Сумма"+ДополнениеКРеквизиту] * СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок / 100;	
	//СуммаСкидки = СуммаСкидки + (СтрокаТабличнойЧасти["Сумма"+ДополнениеКРеквизиту] * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
	//
	//  СтрокаТабличнойЧасти["Сумма"+ДополнениеКРеквизиту] = СтрокаТабличнойЧасти["Сумма"+ДополнениеКРеквизиту] - СуммаСкидки;
	//
	//мЦенаЗаказ = 0;
	//Если НЕ СтрокаТабличнойЧасти["Количество"+ДополнениеКРеквизиту] = 0 Тогда
	//
	//	мЦенаЗаказ = Окр(СтрокаТабличнойЧасти["Сумма"+ДополнениеКРеквизиту] / СтрокаТабличнойЧасти["Количество"+ДополнениеКРеквизиту],2);	
	//
	//КонецЕсли; 
	
	Если ДополнениеКРеквизиту = "Факт" Тогда
		мЦенаЗаказ = СтрокаТабличнойЧасти.ЦенаФакт;
	Иначе 
		мЦенаЗаказ = СтрокаТабличнойЧасти.Цена;
	КонецЕсли;
	
	СтрокаТабличнойЧасти["Сумма"+ДополнениеКРеквизиту] = мЦенаЗаказ * СтрокаТабличнойЧасти["Количество"+ДополнениеКРеквизиту];
	
	СтрокаТабличнойЧасти["СуммаНДС"+ДополнениеКРеквизиту] = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти["Сумма"+ДополнениеКРеквизиту],
	УчитыватьНДС, СуммаВключаетНДС,
	УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	
	//>>070416 Степанов 47706
	Если (ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаПолностью) или (ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаЧастично) тогда
		РассчитатьСКидки(СтрокаТабличнойЧасти);
	КонецЕсли;
	//<<
	
	
КонецПроцедуры

//++ Spl_Апроф 12.02.2015 (k.russkih@a-prof.ru)
Процедура ПриИзмененииСуммы(СтрокаТабличнойЧасти, ДополнениеКРеквизиту = "") Экспорт
	
	//>>160216 Считаем цену без скидки
	//СуммаБезСкидок  = СтрокаТабличнойЧасти["Сумма"+ДополнениеКРеквизиту] * 100/ (100 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки - СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок);
	СуммаБезСкидок = СтрокаТабличнойЧасти["Сумма"+ДополнениеКРеквизиту];	
	
	/// Кунов О.В., 16.03.2017 - 63385
	Если (ДополнениеКРеквизиту = "Факт" Или ДополнениеКРеквизиту = "") И НЕ СтрокаТабличнойЧасти["Количество"+ДополнениеКРеквизиту] = 0 Тогда
	///
		СтрокаТабличнойЧасти.ЦенаФакт = СуммаБезСкидок / ?(СтрокаТабличнойЧасти["Количество"+ДополнениеКРеквизиту] = 0, 1, СтрокаТабличнойЧасти["Количество"+ДополнениеКРеквизиту]);	
	КонецЕсли; 
	
	СтрокаТабличнойЧасти["СуммаНДС"+ДополнениеКРеквизиту] = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти["Сумма"+ДополнениеКРеквизиту],
	УчитыватьНДС, СуммаВключаетНДС,
	УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	//>>070416 Степанов 47706
	Если (ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаПолностью) или (ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаЧастично) тогда
		РассчитатьСКидки(СтрокаТабличнойЧасти);
	КонецЕсли;
	//<<
	
КонецПроцедуры

Процедура ЗаполнитьКоличествоВозврат() Экспорт
	
	//m.ionov@a-prof.ru 17.02.2015
	//Для каждого мСтрока Из Товары Цикл	
	//	мСтрока.КоличествоВозврат = мСтрока.Количество;			
	//КонецЦикла;
	МассивСтрок = Товары.НайтиСтроки(Новый Структура("Пометка", Истина));
	
	Если МассивСтрок.Количество() = 0 Тогда
		ОбщегоНазначения.Сообщение("Не выбраны строки для выполнения операции");
	КонецЕсли;
	
	Для каждого мСтрока Из МассивСтрок Цикл
		
		мСтрока.КоличествоВозврат = мСтрока.Количество;			
		
	КонецЦикла;
	//----m.ionov@a-prof.ru---
	
КонецПроцедуры

Процедура ПроверимНаличиеПретензииПоНакладной(Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПР_Претензия.Ссылка
	|ИЗ
	|	Документ.ПР_Претензия КАК ПР_Претензия
	|ГДЕ
	|	ПР_Претензия.Накладная = &Накладная
	|	И ПР_Претензия.НомерВходящегоДокумента = &НомерВходящегоДокумента
	|	И ПР_Претензия.ВидПретензии = &ВидПретензии
	|	И НЕ ПР_Претензия.Ссылка = &Ссылка
	|	И ПР_Претензия.Проведен = Истина";
	Запрос.УстановитьПараметр("Накладная"				, Накладная);
	Запрос.УстановитьПараметр("НомерВходящегоДокумента"	, НомерВходящегоДокумента);
	Запрос.УстановитьПараметр("ВидПретензии"			, ВидПретензии);
	Запрос.УстановитьПараметр("Ссылка"					, Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("По данной накладной, входящему номеру и виду претензии уже введен документ: " + СокрЛП(Результат.Ссылка), Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПроверкаДоступностиИзменения() Экспорт
	
	Если Ссылка.СтатусДокумента = Перечисления.ПР_СтатусыПретензии.Отработана И НЕ ЭтоНовый() Тогда
		
		Возврат НЕ РольДоступна("АП_Администратор");
		
	КонецЕсли; 	
	
	Возврат Истина;
	
КонецФункции // ()

Функция МожноИнтрактивноМенятьДокумент() Экспорт
	
	Если ТипЗнч(Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда		
		мСклад = ?(ЗначениеЗаполнено(Склад), Склад, Накладная.Склад);		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда		
		мСклад = ?(ЗначениеЗаполнено(Склад), Склад, Накладная.Склад);		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда		
		мСклад = ?(ЗначениеЗаполнено(Склад), Склад, Накладная.СкладПолучатель);	
	Иначе
		мСклад = Склад;
	КонецЕсли;
	
	МожноМенять = Истина;
	
	Если ЭтоНовый() 
		ИЛИ РольДоступна("АП_Администратор")// ИЛИ РольДоступна("ПолныеПрава")
		ИЛИ АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии) Тогда
		Возврат МожноМенять;
	КонецЕсли;
	
	Если МожноМенять И Не ЭтоНовый() Тогда
		Если мСклад.НСИ_ПодключенКSolvo
			И Не СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.Открыто 
			И Не СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.Отменено
			//И Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникСклада) //Пока в тестовом режиме, потом не должно быть не достуно
			Тогда
			
			МожноМенять = Ложь; //Вне изменения из SOLVO
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат МожноМенять;
	
КонецФункции

Функция МожноМенятьСтроку(ТекСтрока) Экспорт
	
	Если ТипЗнч(Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда		
		мСклад = ?(ЗначениеЗаполнено(Склад), Склад, Накладная.Склад);		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда		
		мСклад = ?(ЗначениеЗаполнено(Склад), Склад, Накладная.Склад);		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда		
		мСклад = ?(ЗначениеЗаполнено(Склад), Склад, Накладная.СкладПолучатель);	
	Иначе
		мСклад = Склад;
	КонецЕсли;	
	
	МожноМенять = Истина;
	
	Если ЭтоНовый() 
		ИЛИ РольДоступна("АП_Администратор") Тогда// ИЛИ РольДоступна("ПолныеПрава")
		//ИЛИ АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникБухгалтерии) Тогда
		Возврат МожноМенять;
	КонецЕсли;
	
	Если МожноМенять Тогда
		Если мСклад.НСИ_ПодключенКSolvo
			И Не СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.Открыто 
			И Не СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.Отменено Тогда	
			
			МожноМенять = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МожноМенять;
	
КонецФункции

Функция МожноМенятьСоставСтрок() Экспорт
	
	Если ТипЗнч(Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда		
		мСклад = ?(ЗначениеЗаполнено(Склад), Склад, Накладная.Склад);		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда		
		мСклад = ?(ЗначениеЗаполнено(Склад), Склад, Накладная.Склад);		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда		
		мСклад = ?(ЗначениеЗаполнено(Склад), Склад, Накладная.СкладПолучатель);
	Иначе
		мСклад = Склад;
	КонецЕсли;	
	
	Если РольДоступна("АП_Администратор") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не мСклад.НСИ_ПодключенКSolvo Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не Проведен Тогда
		Возврат Истина;
	ИначеЕсли Не СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.Открыто 
		И Не СтатусПриходногоОрдера = Перечисления.СП_СтатусыПриходногоОрдераСолво.Отменено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

Функция ДоступенСтатусДокумента() Экспорт
	
	Доступен = Ложь;
	
	НСИ_ПодключенКSolvo = СкладПодключенКСолво();
	
	ЗаявкаВРаботе = НЕ (СтатусДокумента = Перечисления.ПР_СтатусыПретензии.Новый);
	
	Если ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаПолностью ИЛИ ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаЧастично Тогда		
		Для каждого мСтрока Из Товары Цикл			
			Если НЕ мСтрока.КоличествоВозврат = 0 Тогда
				Доступен = Истина;
			КонецЕсли; 					
		КонецЦикла; 	
	КонецЕсли; 
	
	Возврат Доступен И НСИ_ПодключенКSolvo И ЗаявкаВРаботе;
	
КонецФункции // ()

Функция СкладПодключенКСолво() Экспорт
	
	НСИ_ПодключенКSolvo = Ложь;
	
	Если ТипЗнч(Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		НСИ_ПодключенКSolvo = ?(ЗначениеЗаполнено(Склад), Склад.НСИ_ПодключенКSolvo, Накладная.Склад.НСИ_ПодключенКSolvo);
		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		НСИ_ПодключенКSolvo = ?(ЗначениеЗаполнено(Склад), Склад.НСИ_ПодключенКSolvo, Накладная.Склад.НСИ_ПодключенКSolvo);
		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		НСИ_ПодключенКSolvo = ?(ЗначениеЗаполнено(Склад), Склад.НСИ_ПодключенКSolvo, Накладная.СкладПолучатель.НСИ_ПодключенКSolvo);
		
	КонецЕсли;
	
	Возврат НСИ_ПодключенКSolvo;
	
КонецФункции // ()


Процедура ОбработкаУдаленияПроведения(Отказ)
	Если Не МожноМенятьСоставСтрок() Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура СформируемСправочник_ПРГ_Претензии(Отказ) Экспорт
	
	Возврат;
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРГ_Претензии.Ссылка
	|ИЗ
	|	Справочник.ПРГ_Претензии КАК ПРГ_Претензии
	|ГДЕ
	|	ПРГ_Претензии.ПР_ДокументПретензии = &ПР_ДокументПретензии";
	
	Запрос.УстановитьПараметр("ПР_ДокументПретензии", Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ТекЭлемент = Результат.Ссылка.ПолучитьОбъект();		
	Иначе	
		ТекЭлемент = Справочники.ПРГ_Претензии.СоздатьЭлемент();
	КонецЕсли;
	
	мДатаПретензии = ?(ДатаВходящегоДокумента = Дата(1,1,1),ДатаВходящегоДокумента,Дата);
	ТекЭлемент.ПР_ДокументПретензии = Ссылка;
	ТекЭлемент.Наименование = "Претензия №" + ?(ЗначениеЗаполнено(НомерВходящегоДокумента),СокрЛП(НомерВходящегоДокумента),СокрЛП(Номер)) + " от " + Формат(мДатаПретензии, "ДФ=dd.MM.yyyy");
	ТекЭлемент.ДатаПретензии = мДатаПретензии;
	
	Попытка		
		ТекЭлемент.Записать();		
	Исключение			
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверимЗаполнениеТоваров(Отказ)
	
	мОтказ = Ложь;
	
	Для каждого мСтрока Из Товары Цикл
		
		Если ЗначениеЗаполнено(мСтрока.РешениеПоПретензии) Тогда
			
			Если мСтрока.РешениеПоПретензии = Справочники.ПР_РешениеПоПретензиям.Отказано ИЛИ мСтрока.РешениеПоПретензии = Справочники.ПР_РешениеПоПретензиям.ОтказКлиентом Тогда
				Продолжить;			
			КонецЕсли; 
			
			Если мСтрока.Количество = 0 И НЕ мСтрока.КоличествоРекламации = 0 Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("В строке:" + СокрЛП(мСтрока.НомерСтроки) + " не заполнена колонка ""Количество принято""");
				мОтказ = Истина;
			КонецЕсли; 
			
			Если НЕ ЗначениеЗаполнено(мСтрока.ПричинаПретензии) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("В строке:" + СокрЛП(мСтрока.НомерСтроки) + " не заполнена колонка ""Причина претензии""");
				мОтказ = Истина;
			КонецЕсли;
			
		КонецЕсли; 		
		
	КонецЦикла; 
	
	Отказ = мОтказ;
	
КонецПроцедуры

Процедура ОбновитьДанныеПоПлану() Экспорт
	
	//++ Spl_Апроф 16.02.2015 (k.russkih@a-prof.ru)
	Если НЕ Накладная = Неопределено Тогда
		//Если НЕ ЭтоНовый() И НЕ Накладная = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПТЛ_ПланДоставки.ТЭК,
		|	ПТЛ_ПланДоставки.Водитель,
		|	ПТЛ_ПланДоставки.ТранспортноеСредство
		|ИЗ
		|	РегистрНакопления.ПТЛ_ПланДоставки КАК ПТЛ_ПланДоставки
		|ГДЕ
		|	ПТЛ_ПланДоставки.ЗаданиеНаПодбор = &ЗаданиеНаПодбор
		|	И ПТЛ_ПланДоставки.Исключено = ЛОЖЬ";
		
		//мНакладная = ?(ТипЗнч(Накладная) = Тип("ДокументСсылка.КорректировкаРеализации"), Накладная.ДокументРеализации.СП_ЗаданиеНаПодбор, Накладная.СП_ЗаданиеНаПодбор);
		
		Если ТипЗнч(Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			мДокументРеализацииСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(Накладная, Истина);
			
			Запрос.УстановитьПараметр("ЗаданиеНаПодбор", мДокументРеализацииСсылка.СП_ЗаданиеНаПодбор);	
		Иначе
			Запрос.УстановитьПараметр("ЗаданиеНаПодбор", Накладная.СП_ЗаданиеНаПодбор);
		КонецЕсли; 
		
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);		
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

//++ Spl_Апроф 03.03.2015 (k.russkih@a-prof.ru)
Процедура ПересчитатьЦены() Экспорт
	
	//++ Spl_Апроф 15.04.2015 (k.russkih@a-prof.ru)
	мСделка = Документы.ЗаказПокупателя.ПустаяСсылка();
	
	ЕстьОтсрочкаПовышенияЦены = Ложь;
	
	Если ТипЗнч(Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Если НЕ Накладная.Сделка = Неопределено Тогда	
			мСделка = Накладная.Сделка;
			/// Кунов О.В., 27.06.2017 - 66859
			мДоговор = мСделка.ДоговорКонтрагента;
			Если мСделка.ПЦ_ПересчитыватьЦеныПриОтгрузке Или мДоговор.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда
				ДатаПроверки = мСделка.ДатаОтгрузки;
			ИначеЕсли мСделка.ПЦ_ПересчитыватьЦеныНаДатуДоставки Или мДоговор.ПРГ_СкидкиНаДатуДоставки Тогда
				ДатаПроверки = мСделка.КП_ДатаДоставки;
			Иначе
				ДатаПроверки = мСделка.Дата;
			КонецЕсли;
			ЕстьОтсрочкаПовышенияЦены = ПЦ_Ценообразование.ПроверимНаличиеДокументовПоОтсрочкеПовышенияЦены(
				ДатаПроверки, мСделка.Грузополучатель.Дивизион, мСделка.Грузополучатель.НСИ_КаналПродаж, мСделка.Контрагент, мСделка.Грузополучатель.НСИ_Регион, мСделка.Контрагент.НСИ_Вывеска,мСделка.Грузополучатель);
			//ЕстьОтсрочкаПовышенияЦены = ПЦ_Ценообразование.ПроверимНаличиеДокументовПоОтсрочкеПовышенияЦены(?(мСделка.ПЦ_ПересчитыватьЦеныПриОтгрузке, мСделка.ДатаОтгрузки, мСделка.Дата), 		
			//мСделка.Грузополучатель.Дивизион, мСделка.Грузополучатель.НСИ_КаналПродаж, мСделка.Контрагент, мСделка.Грузополучатель.НСИ_Регион, мСделка.Контрагент.НСИ_Вывеска,мСделка.Грузополучатель);
			///
		КонецЕсли;		
		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
		
		Если НЕ Накладная.ДокументРеализации.Сделка = Неопределено Тогда
			мСделка = Накладная.ДокументРеализации.Сделка;
			/// Кунов О.В., 27.06.2017 - 66859
			мДоговор = мСделка.ДоговорКонтрагента;
			Если мСделка.ПЦ_ПересчитыватьЦеныПриОтгрузке Или мДоговор.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда
				ДатаПроверки = мСделка.ДатаОтгрузки;
			ИначеЕсли мСделка.ПЦ_ПересчитыватьЦеныНаДатуДоставки Или мДоговор.ПРГ_СкидкиНаДатуДоставки Тогда
				ДатаПроверки = мСделка.КП_ДатаДоставки;
			Иначе
				ДатаПроверки = мСделка.Дата;
			КонецЕсли;
			ЕстьОтсрочкаПовышенияЦены = ПЦ_Ценообразование.ПроверимНаличиеДокументовПоОтсрочкеПовышенияЦены(
				ДатаПроверки, мСделка.Грузополучатель.Дивизион, мСделка.Грузополучатель.НСИ_КаналПродаж, мСделка.Контрагент, мСделка.Грузополучатель.НСИ_Регион, мСделка.Контрагент.НСИ_Вывеска,мСделка.Грузополучатель);
			//ЕстьОтсрочкаПовышенияЦены = ПЦ_Ценообразование.ПроверимНаличиеДокументовПоОтсрочкеПовышенияЦены(?(мСделка.ПЦ_ПересчитыватьЦеныПриОтгрузке, мСделка.ДатаОтгрузки, мСделка.Дата), 		
			//мСделка.Грузополучатель.Дивизион, мСделка.Грузополучатель.НСИ_КаналПродаж, мСделка.Контрагент, мСделка.Грузополучатель.НСИ_Регион, мСделка.Контрагент.НСИ_Вывеска,мСделка.Грузополучатель);
			///
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда		
		ЕстьОтсрочкаПовышенияЦены = Ложь;		
	КонецЕсли;
	
	//-- Spl_Апроф	
	
	//Определим тип цены и цену продажи
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		Если НЕ СтрокаТабличнойЧасти.Пометка Тогда		
			Продолжить;		
		КонецЕсли; 
		
		//++ Spl_Апроф 15.04.2015 (k.russkih@a-prof.ru) Получим дату цены, в случае если есть документ "Отсрочка повышения цены"
		/// Кунов О.В., 27.06.2017 - 66859
		мДоговор = мСделка.ДоговорКонтрагента;
		Если мСделка.ПЦ_ПересчитыватьЦеныПриОтгрузке Или мДоговор.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда
			ДатаПроверки = мСделка.ДатаОтгрузки;
		ИначеЕсли мСделка.ПЦ_ПересчитыватьЦеныНаДатуДоставки Или мДоговор.ПРГ_СкидкиНаДатуДоставки Тогда
			ДатаПроверки = мСделка.КП_ДатаДоставки;
		Иначе
			ДатаПроверки = Дата(1,1,1) // мСделка.Дата;
		КонецЕсли;
		Если ЕстьОтсрочкаПовышенияЦены Тогда
			СтрокаТабличнойЧасти.ПЦ_ДатаЦены = ПЦ_Ценообразование.ПолучимДатуЦеныПоОтсрочкеПовышенияЦены(
				? (ЗначениеЗаполнено(ДатаПроверки), ДатаПроверки, мСделка.Дата), /// Кунов О.В., 20.10.2017 - 72061
				мСделка.Грузополучатель.Дивизион, мСделка.Грузополучатель.НСИ_КаналПродаж, мСделка.Контрагент, мСделка.Грузополучатель.НСИ_Регион, мСделка.Контрагент.НСИ_Вывеска,
				СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.Номенклатура.Проект,
				СтрокаТабличнойЧасти.Номенклатура.НСИ_ТоварнаяКатегория, СтрокаТабличнойЧасти.Номенклатура.НСИ_Брендообъем,мСделка.Грузополучатель);
			//СтрокаТабличнойЧасти.ПЦ_ДатаЦены = ПЦ_Ценообразование.ПолучимДатуЦеныПоОтсрочкеПовышенияЦены(?(мСделка.ПЦ_ПересчитыватьЦеныПриОтгрузке, мСделка.ДатаОтгрузки, мСделка.Дата), 		
			//мСделка.Грузополучатель.Дивизион, мСделка.Грузополучатель.НСИ_КаналПродаж, мСделка.Контрагент, мСделка.Грузополучатель.НСИ_Регион, мСделка.Контрагент.НСИ_Вывеска, 		
			//СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.Номенклатура.Проект, 
			//СтрокаТабличнойЧасти.Номенклатура.НСИ_ТоварнаяКатегория, СтрокаТабличнойЧасти.Номенклатура.НСИ_Брендообъем,мСделка.Грузополучатель)			
		Иначе
			СтрокаТабличнойЧасти.ПЦ_ДатаЦены = ДатаПроверки; // Дата(1,1,1);
		КонецЕсли; 
		///
		//-- Spl_Апроф
		
		ПересчитатьЦеныПоСтроке(СтрокаТабличнойЧасти);
		
	КонецЦикла; 
	
	//Обновим скидки
	
	
	
	//выполним пересчет всех сумм
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		
		Если НЕ СтрокаТабличнойЧасти.Пометка Тогда		
			// Возврат; /// Кунов О.В., 16.03.2017 - 63385
			Продолжить;		
		КонецЕсли;
		
		СписокДополнений = Новый СписокЗначений;
		СписокДополнений.Добавить("Факт");
		СписокДополнений.Добавить("Рекламации");
		СписокДополнений.Добавить("");
		
		Для каждого Строка Из СписокДополнений Цикл
			
			ПриИзмененииКоличества(СтрокаТабличнойЧасти, Строка.Значение);
			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПересчитатьЦеныПоСтроке(СтрокаТабличнойЧасти, МожноИзменитьКоличество = Ложь, БезРасчетаСкидок = Ложь) Экспорт
	
	//++ Spl_Апроф 15.04.2015 (k.russkih@a-prof.ru)
	мДатаРасчета = ?(СтрокаТабличнойЧасти.ПЦ_ДатаЦены = Дата(1,1,1), Дата, СтрокаТабличнойЧасти.ПЦ_ДатаЦены);
	
	КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ПустаяСсылка();
	
	Если ТипЗнч(Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Если НЕ Накладная.Сделка = Неопределено Тогда		
			//++ Spl_Апроф 15.04.2015 (k.russkih@a-prof.ru)
			//мДатаРасчета = ?(Накладная.Сделка.ПЦ_ПересчитыватьЦеныПриОтгрузке, Накладная.Сделка.ДатаОтгрузки, Накладная.Сделка.Дата);
			
			/// Кунов О.В., 27.06.2017 - 66859
			Заказ = Накладная.Сделка;
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПЦ_ДатаЦены) Тогда
				мДатаРасчета = СтрокаТабличнойЧасти.ПЦ_ДатаЦены;
			ИначеЕсли Заказ.ПЦ_ПересчитыватьЦеныПриОтгрузке Или Заказ.ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда
				мДатаРасчета = Заказ.ДатаОтгрузки;
			ИначеЕсли Заказ.ПЦ_ПересчитыватьЦеныНаДатуДоставки Или Заказ.ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда
				мДатаРасчета = Заказ.КП_ДатаДоставки;
			Иначе
				мДатаРасчета = Заказ.Дата;
			КонецЕсли;
			//мДатаРасчета = ?(СтрокаТабличнойЧасти.ПЦ_ДатаЦены = Дата(1,1,1), ?(Накладная.Сделка.ПЦ_ПересчитыватьЦеныПриОтгрузке, Накладная.Сделка.ДатаОтгрузки, Накладная.Сделка.Дата), СтрокаТабличнойЧасти.ПЦ_ДатаЦены);
			///
			
			КП_УсловиеПоставки  = Накладная.Сделка.КП_УсловиеПоставки;
		КонецЕсли;		
		
		АПДляПолученияДанных = Накладная.Грузополучатель;
		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
		
		/// Кунов О.В., 31.10.2017 - 72365
		ДокументРеализации = Накладная.ДокументРеализации;
		Пока ТипЗнч(ДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Цикл
			ДокументРеализации = ДокументРеализации.ДокументРеализации;
		КонецЦикла;
		
		//ДокументРеализацииСделка = Накладная.ДокументРеализации.Сделка;
		ДокументРеализацииСделка = ДокументРеализации.Сделка;
		///
		
		Если ДокументРеализацииСделка <> Неопределено Тогда		
			//++ Spl_Апроф 15.04.2015 (k.russkih@a-prof.ru)
			//мДатаРасчета = ?(Накладная.ДокументРеализации.Сделка.ПЦ_ПересчитыватьЦеныПриОтгрузке, Накладная.ДокументРеализации.Сделка.ДатаОтгрузки, Накладная.Сделка.Дата);
			
			/// Кунов О.В., 27.06.2017 - 66859
			СтруктураРеквизитов = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(ДокументРеализацииСделка, Новый Структура(
				"ПЦ_ПересчитыватьЦеныПриОтгрузке, ПЦ_ПересчитыватьЦеныНаДатуДоставки, ДоговорКонтрагента, Дата, ДатаОтгрузки, КП_ДатаДоставки, КП_УсловиеПоставки"
			));
			Заказ = ДокументРеализацииСделка; //Накладная.ДокументРеализации.Сделка; 72365
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПЦ_ДатаЦены) Тогда
				мДатаРасчета = СтрокаТабличнойЧасти.ПЦ_ДатаЦены;
			ИначеЕсли СтруктураРеквизитов.ПЦ_ПересчитыватьЦеныПриОтгрузке Или СтруктураРеквизитов.ДоговорКонтрагента.ПЦ_ПересчитыватьЦеныПриОтгрузке Тогда
				мДатаРасчета = СтруктураРеквизитов.ДатаОтгрузки;
			ИначеЕсли СтруктураРеквизитов.ПЦ_ПересчитыватьЦеныНаДатуДоставки Или СтруктураРеквизитов.ДоговорКонтрагента.ПРГ_СкидкиНаДатуДоставки Тогда
				мДатаРасчета = СтруктураРеквизитов.КП_ДатаДоставки;
			ИначеЕсли ЗначениеЗаполнено(Заказ) Тогда
				мДатаРасчета = Заказ.Дата;
			Иначе
				мДатаРасчета = Накладная.Дата;
				#Если Клиент Тогда
					Сообщить("По корректировке реализации " + СокрЛП(Накладная.Номер) + " не удается определить заказ, используем дату документа корректировки!");
				#КонецЕсли
			КонецЕсли;
			//мДатаРасчета = ?(СтрокаТабличнойЧасти.ПЦ_ДатаЦены = Дата(1,1,1), ?(СтруктураРеквизитов.ПЦ_ПересчитыватьЦеныПриОтгрузке, СтруктураРеквизитов.ДатаОтгрузки, СтруктураРеквизитов.Дата), СтрокаТабличнойЧасти.ПЦ_ДатаЦены);
			///
			
			/// Кунов О.В., 21.01.2016 - 48113
			КП_УсловиеПоставки  = СтруктураРеквизитов.КП_УсловиеПоставки;
			///
		КонецЕсли;
		
		АПДляПолученияДанных = Накладная.Грузополучатель;
		
	ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда		
		Возврат;		
	КонецЕсли;
	
	СпТипЦен = ПЦ_Ценообразование.ПолучитьТипЦенПродажи(мДатаРасчета, 
	?(ЗначениеЗаполнено(АПДляПолученияДанных) и ТипЗнч(АПДляПолученияДанных) = Тип("СправочникСсылка.АдресаПоставки"), АПДляПолученияДанных.НСИ_Регион, Контрагент.НСИ_Регион),
	СтрокаТабличнойЧасти.Номенклатура.Проект,
	Контрагент.НСИ_КаналПродаж,
	//?(ЗначениеЗаполнено(АПДляПолученияДанных) и ТипЗнч(АПДляПолученияДанных) = Тип("СправочникСсылка.АдресаПоставки"), АПДляПолученияДанных.НСИ_КаналПродаж, Контрагент.НСИ_КаналПродаж),
	КП_УсловиеПоставки,//?(ЗначениеЗаполнено(АПДляПолученияДанных) и ТипЗнч(АПДляПолученияДанных) = Тип("СправочникСсылка.АдресаПоставки"), АПДляПолученияДанных.НСИ_УсловияПоставки, Контрагент.НСИ_УсловияПоставки),
	Контрагент,
	ДоговорКонтрагента,
	АПДляПолученияДанных,
	СтрокаТабличнойЧасти.Номенклатура.НСИ_ТоварнаяКатегория,
	СтрокаТабличнойЧасти.Номенклатура.НСИ_Брендообъем,
	СтрокаТабличнойЧасти.Номенклатура,
	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	
	Если СпТипЦен.Количество() = 1 Тогда
		СтрокаТабличнойЧасти.ПЦ_ТипЦен = СпТипЦен[0].Значение;
	ИначеЕсли СпТипЦен.Количество() = 0 Тогда
		СтрокаТабличнойЧасти.ПЦ_ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	Иначе
		ОбщегоНазначения.Сообщение("По номенклатуре " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + " (код: " + СокрЛП(СтрокаТабличнойЧасти.Номенклатура.Код) + ") найдено несколько типов цен!", СтатусСообщения.Важное);
		СтрокаТабличнойЧасти.ПЦ_ТипЦен = СпТипЦен[0].Значение;
	КонецЕсли;	
	
	СуммаСтрокиДоИзменения = СтрокаТабличнойЧасти.ЦенаФакт * СтрокаТабличнойЧасти.Количество;
	
	//>>140916 Степанов б/н по письму Суворовой,Максиной дату претензии при расчете цены заменили на дату отгрузки Заказа, если она есть
	мЦена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
	СтрокаТабличнойЧасти.ПЦ_ТипЦен, мДатаРасчета, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
	ВалютаДокумента, КурсДокумента, КратностьДокумента, ,
	ОбщегоНазначения.ПолучитьРеквизитШапки("ДоговорКонтрагента", ЭтотОбъект, Метаданные()),
	ОбщегоНазначения.ПолучитьРеквизитШапки("УсловиеПродаж", ЭтотОбъект, Метаданные()),
	ОбщегоНазначения.ПолучитьРеквизитШапки("Грузополучатель", ЭтотОбъект, Метаданные()),
	ОбщегоНазначения.ПолучитьРеквизитШапки("Контрагент", ЭтотОбъект, Метаданные())); 
	
	СтрокаТабличнойЧасти.ЦенаФакт = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(мЦена,
	Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
	СтрокаТабличнойЧасти.ПЦ_ТипЦен.ЦенаВключаетНДС,
	Метаданные().Реквизиты.Найти("УчитыватьНДС") <> Неопределено
	И УчитыватьНДС,
	Метаданные().Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
	И СуммаВключаетНДС,
	?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", Метаданные(), "Товары"),
	УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
	
	//{20.12.2016 Островерхий заявка №57373
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ЭтотОбъект.Метаданные();
	 
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПЦ_ПроцентДопИзмененияЦеныФакт", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
			ТаблицаУсловийДопИзмененияЦены = Ценообразование.ПолучитьУсловияДопИзмененияЦеныПоАПИНоменклатуре(мДатаРасчета, АПДляПолученияДанных, СтрокаТабличнойЧасти.Номенклатура);
			Ценообразование.УдалимИзНесоответствующиеУсловияДопИзмененияЦены(ЭтотОбъект, ТаблицаУсловийДопИзмененияЦены, КП_УсловиеПоставки); //breakpoint Островерхий, 20.12.2016 16:30:42  !!!!
			
			СтрокаТабличнойЧасти.ПЦ_ПроцентДопИзмененияЦеныФакт = ТаблицаУсловийДопИзмененияЦены.Итог("ПроцентИзмененияЦены");	
			
			Если СтрокаТабличнойЧасти.ПЦ_ПроцентДопИзмененияЦеныФакт <> 0 Тогда
			
				СтрокаТабличнойЧасти.ЦенаФакт = СтрокаТабличнойЧасти.ЦенаФакт - (СтрокаТабличнойЧасти.ЦенаФакт * СтрокаТабличнойЧасти.ПЦ_ПроцентДопИзмененияЦеныФакт / 100);	
			
			КонецЕсли; 
			
		КонецЕсли; 
	//20.12.2016 Островерхий} 
	
	//>>150416 Степанов 
	Если СтрокаТабличнойЧасти.КоличествоНакладной=0 тогда
	    СтрокаТабличнойЧасти.ЦенаНакладнойБезВычетаСкидки = СтрокаТабличнойЧасти.ЦенаФакт;
	КонецЕсли;
	//<<
	
	
	Если Не БезРасчетаСкидок Тогда
		
		СуммаСтрокиПослеИзменения = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		Разница = СуммаСтрокиПослеИзменения - СуммаСтрокиДоИзменения;
		
		мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок + Разница;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                       Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                      мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                               Справочники.ИнформационныеКарты.ПустаяСсылка());
		СтруктураПараметров.Вставить("УчитыватьНДС",                        УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                    СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",      мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       				мУчетнаяПолитика);
		СтруктураПараметров.Вставить("ДатаСкидок",                       	КонецДня(мДатаРасчета));
		
		//>>150416 Степанов
		СтруктураОтбора = Новый Структура ("КоличествоНакладной",0);
		//мТовары = Товары.Выгрузить();
		мТовары = Товары.Выгрузить(СтруктураОтбора);
		//<<
		
		//Для Каждого СтрокаТовара Из Товары Цикл //.НайтиСтроки(Новый Структура("ПроцентАвтоматическихСкидок", 0)) Цикл
		//	Если ЗначениеЗаполнено(СтрокаТовара.ПриказУстановкиСкидки) Тогда
		//		ЗаполнитьЗначенияСвойств(мТовары.Добавить(), СтрокаТовара);
		//	КонецЕсли;
		//КонецЦикла;
		
		мТовары.Колонки.Добавить("УсловиеАвтоматическойСкидки");
		мТовары.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");
		мТовары.Колонки.Добавить("СуммаСкидкиСНДС");
		
		мТовары.Колонки.Количество.Имя = "Количество1";
		мТовары.Колонки.Цена.Имя = "Цена1";
		
		мТовары.Колонки.КоличествоФакт.Имя = "Количество";
		мТовары.Колонки.ЦенаФакт.Имя = "Цена";
		
		//>>210416 Степанов добавлено если
		Если (ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаПолностью) или (ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаЧастично) тогда
			ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, мТовары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
			Для каждого СтрокаСоСкидками Из мТовары Цикл
			    СтрокаТоваров = Товары[СтрокаСоСкидками.НомерСтроки-1];
				СтрокаТоваров.НомерСтрокиПолучателя = СтрокаСоСкидками.НомерСтрокиПолучателя;
				СтрокаТоваров.НомерСтрокиТовара = СтрокаСоСкидками.НомерСтрокиТовара;
				//СтрокаТоваров.СуммаСкидкиСНДС = СтрокаСоСкидками.СуммаСкидкиСНДС;
			КонецЦикла; 
		КонецЕсли;
		//<<210416
		//>>150416 Степанов ошибка может появиться, когда в реализации несколько строк с одинаковой номенклатурой
		//НайтиСтроки = мТовары.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,));
		НайтиСтроки = мТовары.НайтиСтроки(Новый Структура("Номенклатура, НомерСтроки", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.НомерСтроки,));
		//<<
		
		Если НЕ НайтиСтроки.Количество() = 0 Тогда
			
			СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок = НайтиСтроки[0].ПроцентАвтоматическихСкидок;
			//>>150416
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = НайтиСтроки[0].ПроцентСкидкиНаценки;
			СтрокаТабличнойЧасти.ПриказУстановкиСкидки = НайтиСтроки[0].ЗначениеУсловияАвтоматическойСкидки;
			Если ТипЗнч(Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Накладная.Сделка;
			ИначеЕсли ТипЗнч(Накладная) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = ДокументРеализацииСделка;
			КонецЕсли;	
			//<<
			
		КонецЕсли; 
		
		
	КонецЕсли;
	
	//>>160216 Степанов уберем скидки из авторасчета, начиная с цены
	Если (СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок<>0) или (СтрокаТабличнойЧасти.ПроцентСкидкиНаценки<>0) тогда
		СтрокаТабличнойЧасти.ЦенаФакт = СтрокаТабличнойЧасти.ЦенаФакт*(100-СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок)/100*(100-СтрокаТабличнойЧасти.ПроцентСкидкиНаценки)/100;
		
		СтрокаТабличнойЧасти.СуммаФакт = СтрокаТабличнойЧасти.ЦенаФакт * СтрокаТабличнойЧасти.КоличествоФакт;
		
		СтрокаТабличнойЧасти.СуммаНДСФакт = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаФакт,
		УчитыватьНДС, СуммаВключаетНДС,
		УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;	
	//<<160216
	
	//>>070416 Степанов 47706
	Если (ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаПолностью) или (ВидПретензии = Перечисления.ПР_ВидыПретензий.КлиентОтказалсяОтЗаказаЧастично) тогда
		РассчитатьСКидки(СтрокаТабличнойЧасти);
	КонецЕсли;
	//<<
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПриказУстановкиСкидки) И СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок = 0 Тогда
		СтрокаТабличнойЧасти.СуммаИзмененияСкидки2 = 0;
	КонецЕсли;
	
КонецПроцедуры

//НаОснованииПретензииВведеныДокументы()
//Созданна на основании заявки helpme 53154
Функция НаОснованииПретензииВведеныДокументы() Экспорт 

	НаОснованииПретензииВведеныДокументы = Ложь;
	
	Если ЭтоНовый() Тогда
		Возврат НаОснованииПретензииВведеныДокументы;	
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректировкаРеализации.Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.ПР_Претензия = &ПретензияСсылка
		|	И КорректировкаРеализации.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Проведен
		|	И ПеремещениеТоваров.ДокументОснование = &ПретензияСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписаниеТоваров.Ссылка
		|ИЗ
		|	Документ.СписаниеТоваров КАК СписаниеТоваров
		|ГДЕ
		|	СписаниеТоваров.Проведен
		|	И СписаниеТоваров.ДокументОснование = &ПретензияСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТребованиеНакладная.Ссылка
		|ИЗ
		|	Документ.ТребованиеНакладная КАК ТребованиеНакладная
		|ГДЕ
		|	ТребованиеНакладная.Проведен
		|	И ТребованиеНакладная.ДокументОснование = &ПретензияСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КорректировкаДолга.Ссылка
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|ГДЕ
		|	КорректировкаДолга.Проведен
		|	И КорректировкаДолга.ДокументОснование = &ПретензияСсылка";

	Запрос.УстановитьПараметр("ПретензияСсылка", Ссылка);

	РезультатПустой = Запрос.Выполнить().Пустой();
	
	НаОснованииПретензииВведеныДокументы = НЕ РезультатПустой;
	
	Возврат НаОснованииПретензииВведеныДокументы;	
	
КонецФункции // НаОснованииПретензииВведеныДокументы()
  

//++ Spl_Апроф 03.03.2015 (k.russkih@a-prof.ru)
#Если Клиент Тогда
	Если мСписокФильтров = Неопределено Тогда
		мСписокФильтров = УправлениеДопПравамиПользователей.ПравоНеОтпускатьТоварСЦенойНижеОпределенногоТипа();
	КонецЕсли;
	
	мМинимальныеЦены = Новый ТаблицаЗначений;
	мМинимальныеЦены.Колонки.Добавить("Номенклатура");
	мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мМинимальныеЦены.Колонки.Добавить("ЕдиницаИзмерения");
	мМинимальныеЦены.Колонки.Добавить("Цена");
#КонецЕсли

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");