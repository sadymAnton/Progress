Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

Перем ЕстьБезналичныеРасчеты Экспорт;

Перем мУчетнаяПолитикаРегл;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Функция формирует табличный документ с печатной формой.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма.
//
Функция ПечатьОтчетаОПродажахККМ()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка.Номер КАК НомерДокумента,
	|	Док.Ссылка.Дата  КАК ДатаДокумента,
	|	Док.Ссылка.Организация КАК Организация,
	|	Док.Ссылка.КассаККМ КАК КассаККМ,
	|	Док.Ссылка.КассаККМ.Представление КАК ККМПредставление,
	|	Док.Склад.НомерСекции КАК НомерСекции,
	|	СУММА(ВЫБОР КОГДА Док.Сумма > 0 ТОГДА
	|		Док.Сумма + ВЫБОР КОГДА Док.Ссылка.СуммаВключаетНДС ТОГДА 0 ИНАЧЕ Док.СуммаНДС КОНЕЦ
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ) КАК Итого,
	|	СУММА(ВЫБОР КОГДА Док.Сумма > 0 ТОГДА
	|		0
	|	ИНАЧЕ
	|		-Док.Сумма - ВЫБОР КОГДА Док.Ссылка.СуммаВключаетНДС ТОГДА 0 ИНАЧЕ Док.СуммаНДС КОНЕЦ
	|	КОНЕЦ) КАК ИтогоВозврат
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Док
	|ГДЕ
	|	Док.Ссылка = &ТекущийДокумент
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Номер,
	|	Док.Ссылка.Дата,
	|	Док.Ссылка.Организация,
	|	Док.Ссылка.КассаККМ,
	|	Док.Ссылка.КассаККМ.Представление,
	|	Док.Склад.НомерСекции
	|";

	Результат = Запрос.Выполнить();

	Шапка = Результат.Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетОРозничныхПродажах_ОтчетККМ";

	Макет = ПолучитьМакет("ОтчетККМ");

	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.ОрганизацияИНН           = СведенияОПокупателе.ИНН;
	ОбластьМакета.Параметры.ПрограммаУчета           = "1С:Предприятие 8.0";
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	ТаблицаСтрок = Результат.Выгрузить();

	Для Каждого Строка Из ТаблицаСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(Строка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("Итог");

	СуммаИтого = ТаблицаСтрок.Итог("Итого");
	СуммаИтогоВозврат = ТаблицаСтрок.Итог("ИтогоВозврат");

	ОбластьМакета.Параметры.Итого = СуммаИтого;
	ОбластьМакета.Параметры.ИтогоВозврат = СуммаИтогоВозврат;

	ОбластьМакета.Параметры.СуммаВыручкиПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаИтого - СуммаИтогоВозврат, мВалютаРегламентированногоУчета);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Оборот");

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.ДатаДокумента);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаОПродажахККМ()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
//   по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка. Название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "ОтчетККМ" Тогда // получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаОПродажахККМ();
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать()
#КонецЕсли

// Возвращает доступные варианты печати документа.
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт

	СтруктураМакетов = Новый Структура("ОтчетККМ","КМ-6 (Справка отчет кассира-операциониста)");
	СтруктураМакетов.Вставить("СерийныеНомера",      "Список серийных номеров");
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураСчетов.Вставить("СчетУчетаРасчетовСЭквайрером", ПолучитьСчетРасчетовСПокупателем(Эквайрер, ДоговорВзаиморасчетовЭквайрера));
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры

Функция ПолучитьСчетРасчетовСПокупателем(ЗначениеКонтрагента, ЗначениеДоговора)Экспорт

	Если ОтражатьВБухгалтерскомУчете Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ЗначениеКонтрагента, ЗначениеДоговора);
		Возврат  СчетаУчета.СчетРасчетовПокупателя;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;

КонецФункции //ПолучитьСчетРасчетовСПокупателем()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Процедура выполняет заполниение табличной части проданными ТМЦ по инвентаризации товаров (розница).
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (Инвентаризация Товаров (розница)).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование) Экспорт

	УчитыватьНДС     = Истина;
	СуммаВключаетНДС = Истина;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка"         , Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);
	Запрос.УстановитьПараметр("ТоварНовый"             , Справочники.Качество.Новый);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Ссылка.Склад                              КАК Склад,
	|	Док.Ссылка.Склад.ВидСклада                    КАК ВидСклада,
	|	МИНИМУМ(Док.НомерСтроки) 					  КАК НомерСтроки,
	|	МАКСИМУМ(Док.КоличествоУчет - Док.Количество) КАК КоличествоОтклонение,
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.Количество) ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			СУММА(ВложенныйЗапрос.Количество)
	|	КОНЕЦ КАК КоличествоСписанное,
	|	Док.ЦенаВРознице КАК Цена,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|       ДокСписание.Номенклатура,
	|       ДокСписание.ХарактеристикаНоменклатуры,
	|       ДокСписание.СерияНоменклатуры,
	|       ДокСписание.Качество,
	|       ДокСписание.Ссылка.Склад                         КАК Склад,
	|		ДокСписание.Количество                           КАК Количество,
	|       ДокСписание.Цена
	|	 ИЗ
	|       Документ.СписаниеТоваров.Товары КАК ДокСписание
	|    ГДЕ
	|       ДокСписание.Ссылка.Проведен
	|       И ДокСписание.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|
	|    ОБЪЕДИНИТЬ ВСЕ
	|
	|	 ВЫБРАТЬ 
	|       ДокОтчетККМ.Номенклатура,
	|       ДокОтчетККМ.ХарактеристикаНоменклатуры,
	|       ДокОтчетККМ.СерияНоменклатуры,
	|       &ТоварНовый                                      КАК Качество,
	|       ДокОтчетККМ.Склад                                КАК Склад,
	|       ДокОтчетККМ.Количество                           КАК Количество,
	|       ДокОтчетККМ.Цена
	|	 ИЗ
	|       Документ.ОтчетОРозничныхПродажах.Товары КАК ДокОтчетККМ
	|    ГДЕ
	|       ДокОтчетККМ.Ссылка <> &ДокументСсылка
	|       И ДокОтчетККМ.Ссылка.Проведен
	|       И ДокОтчетККМ.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка) КАК ВложенныйЗапрос
	|ПО
	|      Док.Номенклатура               = ВложенныйЗапрос.Номенклатура
	|    И Док.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
	|    И Док.СерияНоменклатуры          = ВложенныйЗапрос.СерияНоменклатуры
	|    И Док.Качество                   = ВложенныйЗапрос.Качество
	|    И Док.Ссылка.Склад               = ВложенныйЗапрос.Склад
	|    И Док.Цена                       = ВложенныйЗапрос.Цена
	|ГДЕ
	|	Док.Ссылка = &ДокументОснованиеСсылка
	|   И ((Док.КоличествоУчет - Док.Количество) > 0)
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка.Склад,
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.ЦенаВРознице,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	Док.Качество
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		КоличествоСписать = Выборка.КоличествоОтклонение - Выборка.КоличествоСписанное;
		Если КоличествоСписать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Количество                 = КоличествоСписать;
		СтрокаТабличнойЧасти.Цена                       = Выборка.Цена;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.Склад                      = Выборка.Склад;
  		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти   , ЭтотОбъект);
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЦикла;

#Если Клиент Тогда
	Если Товары.Количество() = 0 Тогда
		Сообщить("В документе """ + ДокументОснование.Метаданные().Представление() + """ № " + ДокументОснование.Номер +" отсутствуют товары учетное количество которых превышает фактическое.");
	КонецЕсли;
#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Дополняет новую строку реквизитами регламентированного учета из исходной строки.
//
// Параметры:
// НоваяСтрока - строка, которую необходимо дополнить.
// ИсходнаяСтрока - строка, из которой берутся исходные данные.
//
Процедура ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока)

	НоваяСтрока.СчетУчетаБУ         = ИсходнаяСтрока.СчетУчетаБУ;
	НоваяСтрока.СчетУчетаНУ         = ИсходнаяСтрока.СчетУчетаНУ;
	НоваяСтрока.СчетДоходовБУ       = ИсходнаяСтрока.СчетДоходовБУ;
	НоваяСтрока.СубконтоБУ          = ИсходнаяСтрока.СубконтоБУ;
	НоваяСтрока.ПринятыеСчетУчетаБУ = ИсходнаяСтрока.ПринятыеСчетУчетаБУ;
	НоваяСтрока.ПринятыеСчетУчетаНУ = ИсходнаяСтрока.ПринятыеСчетУчетаНУ;
	НоваяСтрока.СчетРасходовБУ      = ИсходнаяСтрока.СчетРасходовБУ;
	НоваяСтрока.СчетДоходовНУ       = ИсходнаяСтрока.СчетДоходовНУ;
	НоваяСтрока.СубконтоНУ          = ИсходнаяСтрока.СубконтоНУ;
	НоваяСтрока.СчетРасходовНУ      = ИсходнаяСтрока.СчетРасходовНУ;

КонецПроцедуры // ДополнитьСтрокуРегл()

// Заполняет табличную часть по сериям при оперативном проведении.
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");

	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(Склад, Организация, МассивНоменклатуры, ,ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах);
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура"              , ИсходнаяСтрока.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("Качество"                  , Справочники.Качество.Новый);
		Если  ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
			СтруктураПоиска.Вставить("Цена"                  , ИсходнаяСтрока.Цена);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;

		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницах = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
			                                  / ИсходнаяСтрока.Коэффициент;
			Если ОстатокВЕдиницах >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницах;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницах * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура                        = ИсходнаяСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения                    = ИсходнаяСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                         = ИсходнаяСтрока.Коэффициент;
			НоваяСтрока.Цена                                = ИсходнаяСтрока.Цена;
			НоваяСтрока.ХарактеристикаНоменклатуры          = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры                   = Строка.СерияНоменклатуры;
			НоваяСтрока.ПроцентСкидкиНаценки                = ИсходнаяСтрока.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = ИсходнаяСтрока.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = ИсходнаяСтрока.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ИсходнаяСтрока.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.СтавкаНДС                           = ИсходнаяСтрока.СтавкаНДС;
			НоваяСтрока.Склад                               = ИсходнаяСтрока.Склад;
			НоваяСтрока.Количество                          = СписанноеКоличество;
			ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество * ИсходнаяСтрока.Коэффициент
			                                / ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить <> 0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура                        = ИсходнаяСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения                    = ИсходнаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                         = ИсходнаяСтрока.Коэффициент;
				НоваяСтрока.Цена                                = ИсходнаяСтрока.Цена;
				НоваяСтрока.ХарактеристикаНоменклатуры          = ИсходнаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.СерияНоменклатуры                   = ИсходнаяСтрока.СерияНоменклатуры;
				НоваяСтрока.ПроцентСкидкиНаценки                = ИсходнаяСтрока.ПроцентСкидкиНаценки;
				НоваяСтрока.ПроцентАвтоматическихСкидок         = ИсходнаяСтрока.ПроцентАвтоматическихСкидок;
				НоваяСтрока.УсловиеАвтоматическойСкидки         = ИсходнаяСтрока.УсловиеАвтоматическойСкидки;
				НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = ИсходнаяСтрока.ЗначениеУсловияАвтоматическойСкидки;
				НоваяСтрока.СтавкаНДС                           = ИсходнаяСтрока.СтавкаНДС;
				НоваяСтрока.Склад                               = ИсходнаяСтрока.Склад;
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;
				ДополнитьСтрокуРегл(НоваяСтрока, ИсходнаяСтрока);

				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);
				
			Иначе
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество + КоличествоОсталосьПогасить;

				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоСериям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура выполняет необходимые действия при изменении реквизита "ВидОплаты" в ТЧ "ОплатаБанковскимиКредитами".
//
// Параметры:
//  ТекущаяСтрока - строка, в которой необходимо выполнить пересчет.
//
Процедура ПриИзмененииДисконтнойКарты(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.ВладелецДисконтнойКарты = ТекущаяСтрока.ДисконтнаяКарта.ВладелецКарты;

КонецПроцедуры // ПриИзмененииДисконтнойКарты()

// Процедура выполняет необходимые действия при изменении реквизита "ВидОплаты" в ТЧ "ОплатаБанковскимиКредитами".
//
// Параметры:
//  ТекущаяСтрока - строка, в которой необходимо выполнить пересчет.
//
Процедура ПриИзмененииВидаОплатыБанковскимКредитом(ТекущаяСтрока) Экспорт

	ТекВидОплаты = ТекущаяСтрока.ВидОплаты;
	ТекущаяСтрока.БанкКредитор = ТекВидОплаты.БанкКредитор;
	ТекущаяСтрока.БанкКредитор = ТекВидОплаты.БанкКредитор;
	ТекущаяСтрока.ДоговорВзаиморасчетовБанкаКредитора = ТекВидОплаты.ДоговорВзаиморасчетовБанкаКредитора;
	ТекущаяСтрока.ПроцентБанковскойКомиссии = ТекВидОплаты.ПроцентБанковскойКомиссии;

	ПересчитатьСуммуКомиссии(ТекущаяСтрока);
	
	ПриИзмененииДоговораВзаиморасчетовБанкаКредитора(ТекущаяСтрока);

КонецПроцедуры // ПриИзмененииВидаОплатыБанковскимКредитом()

// Процедура пересчитывает значение банковской комиссии в переданной строке ТЧ.
//
// Параметры:
//  ТекущаяСтрока - строка, в которой необходимо выполнить пересчет.
//
Процедура ПересчитатьСуммуКомиссии(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.СуммаБанковскойКомиссии = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентБанковскойКомиссии / 100;

КонецПроцедуры // ПересчитатьСуммуКомиссии()

// Процедура выполняет необходимые действия при изменении реквизита "ДоговорВзаиморасчетовБанкаКредитора".
//
Процедура ПриИзмененииДоговораВзаиморасчетовБанкаКредитора(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.ДоговорВзаиморасчетовБанкаКредитора.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ТекущаяСтрока.ДоговорВзаиморасчетовБанкаКредитора = Неопределено;
	КонецЕсли;
	
	ТекущаяСтрока.СчетУчетаРасчетовСКонтрагентом = ПолучитьСчетРасчетовСПокупателем(ТекущаяСтрока.БанкКредитор, ТекущаяСтрока.ДоговорВзаиморасчетовБанкаКредитора);

КонецПроцедуры

// Процедура выполняет необходимые действия при изменении реквизита "ДоговорЭквайринга".
//
Процедура ПриИзмененииДоговораЭквайринга() Экспорт

	Эквайрер = ДоговорЭквайринга.Эквайрер;
	ДоговорВзаиморасчетовЭквайрера = ДоговорЭквайринга.ДоговорВзаиморасчетов;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());

КонецПроцедуры // ПриИзмененииДоговораЭквайринга()

// Процедура пересчитывает значение торговой уступки в переданной строке ТЧ.
//
// Параметры:
//  ТекущаяСтрока - строка, в которой необходимо выполнить пересчет.
//
Процедура ПересчитатьТорговуюУступку(ТекущаяСтрока) Экспорт

	ТекущаяСтрока.СуммаТорговойУступки = ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентТорговойУступки / 100;

КонецПроцедуры // ПересчитатьТорговуюУступку()

// Записывает суммы документа в соответствующие реквизиты шапки для показа в журналах.
//
Процедура РасчетСуммДокумента() Экспорт

	СуммаДокумента = Товары.Итог("Сумма");

КонецПроцедуры // РасчетСуммДокумента()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	// Надо добавить колонки "СуммаБезНДС" ".
	ТаблицаТоваров.Колонки.Добавить("СуммаНДС",             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",          Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Стоимость",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр",               Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ИмяКолонкиЦена = "ЦенаВРознице";
	Иначе
		ИмяКолонкиЦена = "Цена";
	КонецЕсли;

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.СуммаНДС             = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДС          = СтрокаТаблицы.Сумма - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		СтрокаТаблицы.Стоимость            = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		ТекЦена = СтрокаТаблицы[ИмяКолонкиЦена];
		СтрокаТаблицы.СтоимостьБезСкидок = ТекЦена * ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.КоличествоДок), 0, СтрокаТаблицы.КоличествоДок);
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + УчетНДС.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
												УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;		
		СтрокаТаблицы.Стоимость            = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, мВалютаРегламентированногоУчета,
		                                   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.НДСУпр               = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, мВалютаРегламентированногоУчета,
		                                   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.СтоимостьБезСкидок   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, мВалютаРегламентированногоУчета,
		                                   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		                                   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ПолучательСкидки");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ИмяКолонкиЦена = "ЦенаВРознице";
	Иначе
		ИмяКолонкиЦена = "Цена";
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы[ИмяКолонкиЦена] * ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.КоличествоВЕдиницахДокумента), 0, СтрокаТаблицы.КоличествоВЕдиницахДокумента), 2), мВалютаРегламентированногоУчета,
		   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		   1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;

		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ПолучательСкидки = СтрокаТаблицы.Склад;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ПолучательСкидки = СтрокаТаблицы.Склад;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);

			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;

		Разница = СтрокаТаблицы.Стоимость - СуммаСоСкидками;
		Если Разница <> 0
		   И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;

		//Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
			        СтрокаТаблицы.Номенклатура,
			        СтрокаТаблицы.ХарактеристикаНоменклатуры,
			        Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Розничная, ЭтотОбъект)) Тогда

				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));

				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;

				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;

					СтоимостьКомплектующей = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.Количество * Комплектующая.Количество,
					   мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					   1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 1,
					   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;

				СуммаСкидки = СтоимостьКомплектующих - СтрокаТаблицы.Стоимость;

				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ТаблицаДвижений.Свернуть("Номенклатура,ПолучательСкидки,ХарактеристикаНоменклатуры,УсловиеСкидки,ЗначениеУсловияСкидки",
	                         "СуммаСкидки");

	Возврат ТаблицаДвижений;

КонецФункции // ПодготовитьТаблицуСкидок()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
	
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры:
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары".
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ТаблицаТоваров.Колонки.Цена.Имя = "ЦенаВРознице";
	КонецЕсли;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета.
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Проверяет правильность заполнения шапки документа.
//
// Параметры:
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ВидОперации, Организация");

	Если Не СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");

		Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Склад) Тогда
			Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
				Если СтруктураШапкиДокумента.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
					ОбщегоНазначения.СообщитьОбОшибке("При данном виде операции в качестве склада может быть выбрана только НТТ!", Отказ, Заголовок);
				КонецЕсли;
			Иначе
				Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
					ОбщегоНазначения.СообщитьОбОшибке("При данном виде операции в качестве склада не может быть выбрана НТТ!", Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		СтруктураОбязательныхПолей.Вставить("КассаККМ");
	КонецЕсли;

	Если ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("ДоговорЭквайринга");
		СтруктураОбязательныхПолей.Вставить("Эквайрер");
		СтруктураОбязательныхПолей.Вставить("ДоговорВзаиморасчетовЭквайрера");

		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСЭквайрером");
		КонецЕсли;

		// Организация договора взаиморасчетов договора эквайринга должна совпадать с организацией шапки документа
		Если НЕ ДоговорВзаиморасчетовЭквайрера.Пустая() И ДоговорВзаиморасчетовЭквайрера.Организация <> Организация Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Выбран договор эквайринга с другой организацией!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для регл. учета.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл

			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": ";

			Если (ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ)) И (ЗначениеЗаполнено(СтрокаТЧ.СчетРасходовБУ)) Тогда
				Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ) <> НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетРасходовБУ) Тогда
					СтрокаСообщения = "Указанные счета доходов и расходов относятся к разным видам деятельности!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Выполняет проверки,которые нужны только для упр. учета.
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыУпр(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.УчитыватьНДС И Не СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
		Для каждого СтрокаТаблицы ИЗ ТаблицаПоТоварам Цикл
			Если СтрокаТаблицы.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с НТТ (строка " + СтрокаТаблицы.НомерСтроки + "), 
				|если НДС не включается в сумму.", Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Проверим заполнение автоматических скидок.
	Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
		ПроцентНеЗаполнен   = НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПроцентАвтоматическихСкидок);
		УсловиеНеЗаполнено  = НЕ ЗначениеЗаполнено(СтрокаТаблицы.УсловиеАвтоматическойСкидки);
		ЗначениеНеЗаполнено = НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки);

		Если (ПроцентНеЗаполнен И УсловиеНеЗаполнено И ЗначениеНеЗаполнено)
		 Или Не(ПроцентНеЗаполнен Или УсловиеНеЗаполнено Или ЗначениеНеЗаполнено)Тогда // ошибок нет
		Иначе
			Если НЕ ПроцентНеЗаполнен
			   И  НЕ УсловиеНеЗаполнено
			   И  ТипЗнч(СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки) = Тип("Число")
			   И  СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = 0 Тогда
				// Ошибок нет.
			Иначе
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки)
				                              + """ табличной части ""Товары"": ";
				Если ПроцентНеЗаполнен Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Процент автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				Если УсловиеНеЗаполнено Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Условие автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				Если ЗначениеНеЗаполнено Тогда
					СтрокаСообщения = "Не заполнено значение реквизита ""Значение условия автоматической скидки""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТоварыУпр()

// Проверяет правильность заполнения строк табличной части "ПродажиПоДисконтнымКартам".
//
// Параметры:
//  ТаблицаПоПродажамПоДисконтнымКартам - таблица значений, содержащая данные для проведения и проверки ТЧ.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПродажиПоДисконтнымКартам(ТаблицаПоПродажамПоДисконтнымКартам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ДисконтнаяКарта, Сумма");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПродажиПоДисконтнымКартам", СтруктураОбязательныхПолей, Отказ, Заголовок);

	//УправлениеРозничнойТорговлей.ПроверитьКорректностьТипаОплатыВТЧ(ЭтотОбъект, "ОплатаБанковскимиКредитами",
	//   ТаблицаПоБанковскимКредитам, Отказ, Заголовок, Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами()

// Проверяет правильность заполнения строк табличной части "ОплатаБанковскимиКредитами".
//
// Параметры:
//  ТаблицаПоПлатежнымКартам - таблица значений, содержащая данные для проведения и проверки ТЧ.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаБанковскимиКредитами(ТаблицаПоБанковскимКредитам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ВидОплаты, Сумма, БанкКредитор, ДоговорВзаиморасчетовБанкаКредитора");
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаБанковскимиКредитами", СтруктураОбязательныхПолей, Отказ, Заголовок);

	УправлениеРозничнойТорговлей.ПроверитьКорректностьТипаОплатыВТЧ(ЭтотОбъект, "ОплатаБанковскимиКредитами",
	   ТаблицаПоБанковскимКредитам, Отказ, Заголовок, Перечисления.ТипыОплатЧекаККМ.БанковскийКредит);
	   
	СтрокаОкончанияСообщенияОбОшибке = "выбран договор с другой организацией!";
	Для каждого СтрокаКредита Из ТаблицаПоБанковскимКредитам Цикл
		
		Если ЗначениеЗаполнено(СтрокаКредита.ДоговорВзаиморасчетовБанкаКредитора) 
			И СтрокаКредита.ОрганизацияДоговора <> СтруктураШапкиДокумента.Организация Тогда
		
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаКредита.НомерСтроки)
			   + """ табличной части ""Оплата банковскими кредитами"" ";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаОкончанияСообщенияОбОшибке,
		                    Отказ, Заголовок);
		
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами()

// Проверяет правильность заполнения строк табличной части "ОплатаПлатежнымиКартами".
//
// Параметры:
//  ТаблицаПоПлатежнымКартам - таблица значений, содержащая данные для проведения и проверки ТЧ.
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами(ТаблицаПоПлатежнымКартам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("ВидОплаты, Сумма");

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОплатаПлатежнымиКартами", СтруктураОбязательныхПолей, Отказ, Заголовок);

	УправлениеРозничнойТорговлей.ПроверитьКорректностьТипаОплатыВТЧ(ЭтотОбъект, "ОплатаПлатежнымиКартами",
	   ТаблицаПоПлатежнымКартам, Отказ, Заголовок, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ "Товары".
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество, Сумма");
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураШапкиДокумента.СкладВТабличнойЧасти Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;

	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);

	ПроверитьЗаполнениеТабличнойЧастиТоварыУпр(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	//Корректность счетов учета проверим после того, как убедимся, что они заполнены.

	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры:
//  РежимПроведения - режим проведения документа (оперативный или неоперативный).
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа.
//  ТаблицаПоТоварам - таблица значений, содержащая данные для проведения и проверки ТЧ "Товары".
//  Отказ - флаг отказа в проведении.
//  Заголовок - строка, заголовок сообщения об ошибках проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, 
	                          ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, ТаблицаПоПродажамПоДисконтнымКартам, Отказ, Заголовок)

	// По некоторым регистрам услуги проводить не нужно.
	// Подготовим отдельную таблицу.
	ТаблицаПоТоварамБезУслуг = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам,
	                           Новый Структура("Услуга", Ложь)).Выгрузить();

	//Получим таблицу по комплектам.
	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварамБезУслуг, ЭтотОбъект);

	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("СоставНабора", ТаблицаПоКомплектам, СтруктураШапкиДокумента, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам,
		ТаблицаПоКомплектам , ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, 
		ТаблицаПоПродажамПоДисконтнымКартам, Отказ, Заголовок);
						   
	ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок);

	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоКомплектам, Отказ, Заголовок);

	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
		ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, Отказ, Заголовок);
	
	СтруктураТаблицыВыручки = Новый Структура(
		"НомерСтроки, Номенклатура, Услуга, , ВидЦенности, Ценность, Партия, СчетУчетаНДСПоРеализации,СчетУчетаБУ, СчетДоходовБУ, СубконтоБУ, 
		|СтавкаНДС, Сумма, СуммаВал, НДС, НДСВал, СуммаБезНДС, СуммаБезНДСВал, ПринадлежностьНоменклатуры, Комиссионный, Комитент, ДоговорКомиссии, 
		|СчетРасчетовПоАвансамСКомитентом, СчетРасчетовСКомитентом, ВалютаРасчетовСКомитентом, СуммаСписания, Количество");
												  
	//Формируем таблицу выручки с нужной структурой и заполняем по таблице услуг
	ТаблицаВыручки = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоТоварам,СтруктураТаблицыВыручки,,Истина);
	ТаблицаВыручки.ЗаполнитьЗначения(Ложь, "Комиссионный");
	ТаблицаВыручки.ЗаполнитьЗначения(0,    "Количество");
	
	ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ);
    УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	
	// При списании партий также делаются записи в регистры бухгалтерского учета.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать();
		КонецЕсли;	
	КонецЕсли;

	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если Движения.Налоговый.Модифицированность() Тогда
			Движения.Налоговый.Записать();
		КонецЕсли;	
	КонецЕсли;

	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить());

	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если ТаблицаПоКомплектам.Найти(Перечисления.ТипыНоменклатуры.Комплект, "ТипНоменклатуры") <> Неопределено Тогда
		ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоКомплектам",ТаблицаПоКомплектам);
	КонецЕсли;	

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам,
                                 ТаблицаПоТоварамБезУслуг, ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, 
								 ТаблицаПоПродажамПоДисконтнымКартам, Отказ, Заголовок)

	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;

	УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию( ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"), Дата, Ложь, Заголовок);

	ИтогСуммаПлатежныеКарты   = ТаблицаПоПлатежнымКартам.Итог("Сумма");
	ИтогСуммаБанковскийКредит = ТаблицаПоБанковскимКредитам.Итог("Сумма");
	Если СуммаДокумента - ИтогСуммаПлатежныеКарты - ИтогСуммаБанковскийКредит <> 0 Тогда
		// По регистру РозничнаяВыручка.
		НаборДвижений = Движения.РозничнаяВыручка;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		// Заполним таблицу движений.
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
			СтрокаДвижений.РозничнаяТочка = КассаККМ;
		Иначе
			СтрокаДвижений.РозничнаяТочка = Склад;
		КонецЕсли;
		СтрокаДвижений.Сумма              = СуммаДокумента - ИтогСуммаПлатежныеКарты - ИтогСуммаБанковскийКредит;
		СтрокаДвижений.Подразделение      = Подразделение;

		НаборДвижений.мПериод             = Дата;
		НаборДвижений.мТаблицаДвижений    = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РозничнаяВыручка.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах или ТоварыВНТТ.

	ТаблицаНаСкладах = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварамБезУслуг,
	                   Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый)).Выгрузить();

	Если ТаблицаНаСкладах.Количество() > 0 Тогда
		
		// Контроль остатков товара
		ПроцедурыКонтроляОстатков.ТоварыНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
			НаборДвижений = Движения.ТоварыНаСкладах;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНаСкладах, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			НаборДвижений.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;

	ТаблицаВРознице = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварамБезУслуг,
	                  Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный)).Выгрузить();

	Если ТаблицаВРознице.Количество() > 0 Тогда
		
		// Контроль остатков товара
		ПроцедурыКонтроляОстатков.ТоварыВРозницеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		
		Если Не Отказ Тогда
			НаборДвижений = Движения.ТоварыВРознице;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			ТаблицаВРознице.Колонки.Добавить("СуммаПродажная");
			
			ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаВРознице.ВыгрузитьКолонку("Склад"),
								ТаблицаВРознице.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
			
			УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаВРознице, ТаблицаПоЦенам);
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВРознице, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			НаборДвижений.ВыполнитьРасход();
		КонецЕсли;
	КонецЕсли;

	ТаблицаВНТТ = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварамБезУслуг,
	              Новый Структура("ВидСклада", Перечисления.ВидыСкладов.НТТ)).Выгрузить();

	Если ТаблицаВНТТ.Количество() > 0 Тогда
		
		// Контроль остатков товара
		ПроцедурыКонтроляОстатков.ТоварыВНТТКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
					  
		Если Не Отказ Тогда
			НаборДвижений = Движения.ТоварыВНТТ;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВНТТ, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ТоварТара.Товар, "ТоварТара");
			
			НаборДвижений.мПериод          = Дата;
			НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
			
			НаборДвижений.ВыполнитьРасход();
		КонецЕсли;
		
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ Продажи.

	НаборДвижений   = Движения.Продажи;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаПоТоварамПродажи = ТаблицаПоТоварам.Скопировать();
	ТаблицаПоТоварамПродажи.Колонки.НДС.Имя = "НДСРегл";
    ТаблицаПоТоварамПродажи.Колонки.НДСУпр.Имя = "НДС";

	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварамПродажи, ТаблицаДвижений, Проект, Дата, "Продажи");
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамПродажи, ТаблицаДвижений);
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка       , "ДокументПродажи");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация  , "Организация");


	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.Продажи.ВыполнитьДвижения();
	КонецЕсли;

	// ПО РЕГИСТРУ ПродажиПоДисконтнымКартам.
	НаборДвижений = Движения.ПродажиПоДисконтнымКартам;

	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПродажамПоДисконтнымКартам, ТаблицаДвижений);

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьДвижения();
	КонецЕсли;

	// ТОВАРЫ ПО РЕГИСТРУ ПредоставленныеСкидки.

	НаборДвижений = Движения.ПредоставленныеСкидки;

	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);

	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "ДокументСкидки");

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
	КонецЕсли;

	// По регистрам взаиморасчетов отражаются безналичные расчеты
	
	Если ЕстьБезналичныеРасчеты Тогда
	
		НаборЗаписейВзаиморасчеты = Движения.ВзаиморасчетыСКонтрагентами;
		ТаблицаВзаиморасчеты      = НаборЗаписейВзаиморасчеты.ВыгрузитьКолонки();
		НаборЗаписейРасчеты       = Движения.РасчетыСКонтрагентами;
		ТаблицаРасчеты            = НаборЗаписейРасчеты.ВыгрузитьКолонки();
	
		// Взаиморасчеты с эквайрером
		
		СуммаВзаиморасчетовПоКартам = ТаблицаПоПлатежнымКартам.Итог("Сумма");
		
		Если СуммаВзаиморасчетовПоКартам <> 0 Тогда
			
			СуммаУпрПоКартам = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СуммаВзаиморасчетовПоКартам, 
				мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,	
				1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
			СтрокаВзаиморасчеты = ТаблицаВзаиморасчеты.Добавить();
			
			СтрокаВзаиморасчеты.ДоговорКонтрагента  = ДоговорВзаиморасчетовЭквайрера;
			СтрокаВзаиморасчеты.Контрагент          = Эквайрер;
			СтрокаВзаиморасчеты.Организация         = Организация;
			СтрокаВзаиморасчеты.Сделка              = Неопределено;
			СтрокаВзаиморасчеты.СуммаВзаиморасчетов = СуммаВзаиморасчетовПоКартам;
			СтрокаВзаиморасчеты.СуммаУпр            = СуммаУпрПоКартам;
			
			СтрокаРасчеты = ТаблицаРасчеты.Добавить();
			
			СтрокаРасчеты.ДоговорКонтрагента  = ДоговорВзаиморасчетовЭквайрера;
			СтрокаРасчеты.Контрагент  		  = Эквайрер;
			СтрокаРасчеты.Организация  	      = Организация;
			СтрокаРасчеты.Сделка              = Неопределено;
			СтрокаРасчеты.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаРасчеты.СуммаВзаиморасчетов = СуммаВзаиморасчетовПоКартам;
			СтрокаРасчеты.СуммаУпр            = СуммаУпрПоКартам;
			
		КонецЕсли;
		
		// Взаиморасчеты с банками по кредитам
		
		Для каждого СтрокаКредита Из ТаблицаПоБанковскимКредитам Цикл
		
			СуммаУпрПоКредиту = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаКредита.Сумма, 
				мВалютаРегламентированногоУчета, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				1, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,	
				1, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
			СтрокаВзаиморасчеты = ТаблицаВзаиморасчеты.Добавить();
			
			СтрокаВзаиморасчеты.ДоговорКонтрагента  = СтрокаКредита.ДоговорВзаиморасчетовБанкаКредитора;
			СтрокаВзаиморасчеты.Контрагент          = СтрокаКредита.БанкКредитор;
			СтрокаВзаиморасчеты.Организация         = Организация;
			СтрокаВзаиморасчеты.Сделка              = Неопределено;
			СтрокаВзаиморасчеты.СуммаВзаиморасчетов = СтрокаКредита.Сумма;
			СтрокаВзаиморасчеты.СуммаУпр            = СуммаУпрПоКредиту;
			
			СтрокаРасчеты = ТаблицаРасчеты.Добавить();
			
			СтрокаРасчеты.ДоговорКонтрагента  = СтрокаКредита.ДоговорВзаиморасчетовБанкаКредитора;
			СтрокаРасчеты.Контрагент  		  = СтрокаКредита.БанкКредитор;
			СтрокаРасчеты.Организация  	      = Организация;
			СтрокаРасчеты.Сделка              = Неопределено;
			СтрокаРасчеты.РасчетыВозврат      = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаРасчеты.СуммаВзаиморасчетов = СтрокаКредита.Сумма;
			СтрокаРасчеты.СуммаУпр            = СуммаУпрПоКредиту;
			
		КонецЦикла;
			
		НаборЗаписейВзаиморасчеты.мПериод            = Дата;
		НаборЗаписейВзаиморасчеты.мТаблицаДвижений   = ТаблицаВзаиморасчеты;
			
		Если Не Отказ Тогда
			НаборЗаписейВзаиморасчеты.ВыполнитьПриход();
		КонецЕсли;
			
		НаборЗаписейРасчеты.мПериод            = Дата;
		НаборЗаписейРасчеты.мТаблицаДвижений   = ТаблицаРасчеты;
			
		Если Не Отказ Тогда
			НаборЗаписейРасчеты.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоТоварамОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамБезУслуг, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	// Проверка остатков
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьРасход();
	КонецЕсли;
	
КонецПроцедуры

// Формирование движений по регистру "Списанные товары".
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг, Отказ, Заголовок)
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварамБезУслуг),
		ТаблицаДвижений,
		Истина);

	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   															"Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, 															"Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, 															"Активность");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация,   													"Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение, 													"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, 										"Качество");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Товары,   	  					"ВидТабличнойЧасти");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   				"ВедениеУчетаПоПроектам");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,  					"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,  					"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию, 					"ДопустимыйСтатус3");

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РеализацияРозница, 		"КодОперацииПартииТоваров");

	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете, 									"ОтражатьВУправленческомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,  			"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,      			"ОтражатьВНалоговомУчете");

	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "КорСчетНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату,         "КорСубконтоНУ1");
	
	Если ЕстьБезналичныеРасчеты Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями, 		"КорСчетЗадолженностиБУ");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.КассаОрганизации,               		"КорСчетЗадолженностиБУ");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств,   		"КорСубконтоЗадолженностиБУ1");
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете Тогда 
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Проект,													"Проект");
		КонецЕсли;
	КонецЕсли;
	
	КэшПоСчетам = Новый Соответствие;

	Для Каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварамБезУслуг.Получить(Строка.НомерСтроки);

		Строка.КорСчетБУ      					= СтрокаТЧ.СчетРасходовБУ;
		Строка.КорСубконтоБУ2 					= СтрокаТЧ.СубконтоБУ;
		Строка.КорСчетНУ      					= СтрокаТЧ.СчетРасходовНУ;
		Строка.КорСубконтоНУ1 					= СтрокаТЧ.СубконтоНУ;
		
		Строка.СуммаЗадолженности   			= СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
		Строка.ВалютаДокумента 					= СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
		Строка.КурсДокумента 					= 1;
		Строка.КратностьДокумента 				= 1;
		Строка.КорВалютаЗадолженностиБУ        	= СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
		Строка.КорВалютнаяСуммаЗадолженностиБУ 	= СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;

		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда 
			// Заполнение сумм выручки
			Строка.СуммаЗадолженностиБУ 		= СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			// Доход от продажи может облагаться ЕНВД (что определяется по бух. счету учета)
			Если ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ) Тогда
				
				СчетДоходовБУОтноситсяКДеятельностиЕНВД = КэшПоСчетам[СтрокаТЧ.СчетДоходовБУ];
				Если СчетДоходовБУОтноситсяКДеятельностиЕНВД = Неопределено Тогда
					СчетДоходовБУОтноситсяКДеятельностиЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ);
					КэшПоСчетам.Вставить(СтрокаТЧ.СчетДоходовБУ, СчетДоходовБУОтноситсяКДеятельностиЕНВД);
				КонецЕсли;
				
				Если СчетДоходовБУОтноситсяКДеятельностиЕНВД Тогда
					// в этом случае товар списывается на счет расходов по ЕНВД
					Строка.КорСчетНУ = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			Строка.ОтражатьВНалоговомУчете 	= Истина;
			Строка.СчетУчетаНУ 				= СтрокаТЧ.СчетУчетаБУ;
			Строка.ПринятыеСчетУчетаНУ 		= СтрокаТЧ.ПринятыеСчетУчетаБУ;
		КонецЕсли;
		
	КонецЦикла;
	
	// Возврат текущего дня отражается строчками с "-" 
	// Возвращаемое количество всегда меньше реализованного
	КолонкиГруппировок  = "";
	КолонкиСуммирования = "";
	
	Для Каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			КолонкиСуммирования = КолонкиСуммирования + Колонка.Имя +",";
		Иначе
			КолонкиГруппировок  = КолонкиГруппировок + Колонка.Имя +",";
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДвижений.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений(ТаблицаДвижений, "НомерСтрокиДокумента");
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если НЕ Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;

	Движения.СписанныеТовары.Записать(Истина);

КонецПроцедуры//ДвиженияПоРегиструСписанныеТовары

// Формирование проводок по начислению дохода от реализации товаров по бух и нал учету,
// Используется в случаях, когда при реализации может быть списан как собственный, так и комиссионный товар
//
Процедура ПроводкиПоВыручкеОтРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам)

	СписыватьПартииПриПроведенииДокументовБух = глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух;
	
	Если СписыватьПартииПриПроведенииДокументовБух Тогда // проводки только по услугам - проводки по товарам делает партионный учет
		ТаблицаВыручкиДляБУ = ТаблицаПоТоварам.Скопировать(Новый Структура("Услуга", Истина), 
			"Услуга, СчетДоходовБУ, СубконтоБУ, СчетРасходовБУ, СтавкаНДС, СуммаБезНДС, НДС");
	Иначе // проводки и по товарам, и по услугам
		ТаблицаВыручкиДляБУ = ТаблицаПоТоварам.Скопировать( Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.ПустаяСсылка()), 
			"Услуга, СчетДоходовБУ, СубконтоБУ, СчетРасходовБУ, СтавкаНДС, СуммаБезНДС, НДС");
	КонецЕсли;
	ТаблицаВыручкиДляБУ.Свернуть("Услуга, СчетДоходовБУ, СубконтоБУ, СчетРасходовБУ, СтавкаНДС", "СуммаБезНДС, НДС");
	
	ИспользуетсяРасширеннаяАналитикаУчетаЗатрат = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);
	
	Если  ИспользуетсяРасширеннаяАналитикаУчетаЗатрат Тогда
		//Проводки по выручке в НУ делает расчет себестоимости
		ТаблицаВыручкиДляНУ = ТаблицаПоТоварам.СкопироватьКолонки();
	Иначе	
		// в НУ всегда делаем проводки только по услугам - проводки по товарам делает партионный учет
		ТаблицаВыручкиДляНУ = ТаблицаПоТоварам.Скопировать(Новый Структура("Услуга", Истина), 
			"СчетДоходовБУ, СчетДоходовНУ, СубконтоБУ, СубконтоНУ, СуммаБезНДС");
		ТаблицаВыручкиДляНУ.Свернуть("СчетДоходовБУ, СчетДоходовНУ, СубконтоБУ, СубконтоНУ", "СуммаБезНДС");
	КонецЕсли;	
	
	Если ЕстьБезналичныеРасчеты Тогда
		СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
	Иначе
		СчетДт = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаВыручкиДляБУ Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период         = Дата;
		Проводка.Активность     = Истина;
		Проводка.Организация    = Организация;
		Проводка.Содержание     = ?(СтрокаТЧ.Услуга, "Реализация услуг в розницу", "Реализация товаров в розницу");
		Проводка.СписаниеПартий = НЕ СтрокаТЧ.Услуга;

		Проводка.Сумма  = СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС; // Сумма выручки по бух. учету
		
		Проводка.СчетДт = СчетДт;
		Если НЕ ЕстьБезналичныеРасчеты Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
		КонецЕсли;

		Проводка.СчетКт = СтрокаТЧ.СчетДоходовБУ;
		
		Для Каждого СубконтоСчета Из Проводка.СчетКт.ВидыСубконто Цикл
			Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУ)) Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУ);
				Прервать; // Заполняем только первое подходящее субконто
			КонецЕсли;
		КонецЦикла;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС",            СтрокаТЧ.СтавкаНДС);

		// Движения по НДС от реализации.
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтрокаТЧ.НДС <> 0 Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период         = Дата;
			Проводка.Активность     = Истина;
			Проводка.Организация    = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание     = ?(СтрокаТЧ.Услуга, "Реализация услуг в розницу", "Реализация товаров в розницу");
			Проводка.СписаниеПартий = НЕ СтрокаТЧ.Услуга;

			Проводка.СчетДт = ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаТЧ.СчетРасходовБУ, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы), 
				СтрокаТЧ.СчетРасходовБУ, ПланыСчетов.Хозрасчетный.Продажи_НДС); 
				
			Для Каждого СубконтоСчета Из Проводка.СчетДт.ВидыСубконто Цикл
				Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУ)) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
				
			БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);

			//При розничной реализации весь товар считается оплаченным (ограничение при проведении)
			Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НДС;
			Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;

			Проводка.Сумма = СтрокаТЧ.НДС;
		КонецЕсли;

	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		
		Для Каждого СтрокаТЧ Из ТаблицаВыручкиДляНУ Цикл
			
			Проводка = Движения.Налоговый.Добавить();
			
			Проводка.Период      = Дата;
			Проводка.Активность  = Истина;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Реализация услуг в розницу";
			
			Проводка.СчетДт      = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			Проводка.СубконтоДт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
			
			Если НЕ НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ) Тогда
				Проводка.СчетКт      = СтрокаТЧ.СчетДоходовНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТЧ.СубконтоНУ);
				Если ТипЗнч(СтрокаТЧ.СубконтоБУ) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
					БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТЧ.СубконтоБУ);
				КонецЕсли;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаТЧ.СуммаБезНДС;
			
		КонецЦикла;
		
	КонецЕсли;

	Движения.Хозрасчетный.Записать();
	Движения.Налоговый.Записать();

КонецПроцедуры // ПроводкиПоВыручкеОтРеализации()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, 
	ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, Отказ, Заголовок)

	// Формирование бухгалтерских проводок
	Если НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	ПроводкиПоВыручкеОтРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	// Формирование движений по регистру "Учет продаж и себестоимости".
	РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам
	);
	
	// Дополнительные проводки при наличии безналичных оплат
	ДвиженияПоРаспределениюОплат(СтруктураШапкиДокумента, ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, Отказ, Заголовок);

	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		// Отчет заполнен по ЧЕКАМ ККМ - перераспределение выручки не требуется - 
		// регистр Рознинчная выручка заполнять тоже не надо.
		Возврат; 
	КонецЕсли;
		
	ДатаДока   = Дата;
	ПроводкиБУ = Движения.Хозрасчетный;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетДоходовБУ,
	|	СчетРасходовБУ,
	|	СубконтоБУ,
	|	СтавкаНДС КАК СтавкаНДС,
	|	СУММА(Сумма "+?(СтруктураШапкиДокумента.УчитыватьНДС И СтруктураШапкиДокумента.СуммаВключаетНДС, "", " + СуммаНДС")+") КАК Сумма,
	|	СУММА(СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|
	|ГДЕ
	|	Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетДоходовБУ,
	|	СчетРасходовБУ,
	|	СубконтоБУ,
	|	СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС";
	Выборка = Запрос.Выполнить().Выгрузить();

	ТаблицаСуммНДС = Выборка.Скопировать();

	Выборка.Свернуть("СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СтавкаНДС", "Сумма, СуммаНДС");
	ТаблицаСуммНДС.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");

	// Выполним сторнирование выручки после того как она принята с помощь ПКО без учета ставок налогов
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период"     , Новый Граница(Новый МоментВремени(ДатаДока, Ссылка) ,ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КассаККМ"   , СтруктураШапкиДокумента.Склад);
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СтавкаНДС       КАК СтавкаНДС,
	|	СуммаОстаток    КАК Сумма,
	|	СуммаНДСОстаток КАК СуммаНДС
	|ИЗ
	|	РегистрНакопления.РозничнаяВыручкаОрганизаций.Остатки(&Период, КассаККМ В (&КассаККМ) И Организация В (&Организация)) КАК РозничнаяВыручкаОрганизацийОстатки";
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();

	СуммаОстаткаВыручки = - ТаблицаОстатков.Итог("Сумма");

	// Если СуммаОстаткаВыручки > 0 Тогда нам нужно сделать сторнирование и переаспределение 
	// выручки - т.е. у нас есть выручка с НТТ - т.е. сначала ввели ПКО, потом отчет ККМ
	// в противном случае - выручки с НТТ нет. т.е., сначала ввели Отчет ККМ, потом ПКО.
	
	СуммаБезналичнойОплаты = ТаблицаПоПлатежнымКартам.Итог("Сумма") + ТаблицаПоБанковскимКредитам.Итог("Сумма");
	Если СтруктураШапкиДокумента.УчитыватьНДС И СтруктураШапкиДокумента.СуммаВключаетНДС Тогда
		СуммаКСравнению = ТаблицаСуммНДС.Итог("Сумма");
	Иначе
		СуммаКСравнению = ТаблицаСуммНДС.Итог("Сумма") + ТаблицаСуммНДС.Итог("СуммаНДС");
	КонецЕсли;
	
	//Сторнируем не распределенную выручку
	Если СуммаОстаткаВыручки > 0 Тогда // т.е. есть ПКО не закрытые Отчетами ККМ

		// По регистру РозничнаяВыручкаОрганизаций.
		НаборДвижений   = Движения.РозничнаяВыручкаОрганизаций;
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		СуммаКСравнениюНал = СуммаКСравнению - СуммаБезналичнойОплаты;
		
		Если СуммаОстаткаВыручки >= СуммаКСравнениюНал Тогда
			МожноРаспределить = СуммаКСравнениюНал;
		Иначе
			МожноРаспределить = СуммаОстаткаВыручки;
		КонецЕсли;

		// сторнирование выручки 
		Для каждого СтрокаТЧ из ТаблицаОстатков Цикл

			Если МожноРаспределить = 0 Тогда
				Прервать;
			КонецЕсли;

			Если -СтрокаТЧ.Сумма >= МожноРаспределить Тогда
				КРаспределению    = - МожноРаспределить;
				СуммаНДС          = СтрокаТЧ.СуммаНДС * (МожноРаспределить / (-СтрокаТЧ.Сумма));
				МожноРаспределить = 0;
			Иначе
				КРаспределению    = СтрокаТЧ.Сумма;
				СуммаНДС          = СтрокаТЧ.СуммаНДС;
				МожноРаспределить = МожноРаспределить - КРаспределению;
			КонецЕсли;

			// Сторно выручки
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период       = ДатаДока;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = КРаспределению;
			Проводка.Содержание   = "Сторно Реализация товаров в розницу";

			Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.КассаОрганизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);

			Если мУчетнаяПолитикаРегл.РозничнаяТорговляОблагаетсяЕНВД Тогда
				Проводка.СчетКт      =  ПланыСчетов.Хозрасчетный.ВыручкаОблагаемаяЕНВД;
			Иначе
				Проводка.СчетКт      =  ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.СтавкаНДС);
			КонецЕсли;

			// Сторно НДС, если оно есть
			Если НЕ (СуммаНДС = 0) Тогда

				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма        = СуммаНДС;
				Проводка.Содержание   = "Сторно реализация товаров в розницу";

				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.Продажи_НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.СтавкаНДС);

				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.ВидыПлатежейВГосБюджет.Налог);

			КонецЕсли;

			// По регистру "Розничная выручка организаций"
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.КассаККМ        = СтруктураШапкиДокумента.Склад;
			СтрокаДвижений.СтавкаНДС       = СтрокаТЧ.СтавкаНДС;
			СтрокаДвижений.Сумма           = КРаспределению;
			СтрокаДвижений.СуммаНДС        = СуммаНДС;
			СтрокаДвижений.Подразделение   = СтруктураШапкиДокумента.Подразделение;

		КонецЦикла;
		// сторнирование выручки закончено
	КонецЕсли;
	
	//Отразим пришедшую наличную оплату и закроем безналичную
	Если СуммаОстаткаВыручки + СуммаБезналичнойОплаты > 0 Тогда
		
		// По регистру РозничнаяВыручкаОрганизаций.
		НаборДвижений   = Движения.РозничнаяВыручкаОрганизаций;
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		Если СуммаОстаткаВыручки + СуммаБезналичнойОплаты >= СуммаКСравнению Тогда
			МожноРаспределить = СуммаКСравнению;
		Иначе
			МожноРаспределить = СуммаОстаткаВыручки + СуммаБезналичнойОплаты;
		КонецЕсли;

		// перераспределение выручки
		Для каждого СтрокаТЧ из Выборка Цикл

			Если МожноРаспределить = 0 Тогда
				Прервать;
			КонецЕсли;

			Если СтрокаТЧ.Сумма >= МожноРаспределить Тогда
				КРаспределению    = МожноРаспределить;
				СуммаНДС          = УчетНДС.РассчитатьСуммуНДС(МожноРаспределить, Истина, Истина,УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
				МожноРаспределить = 0;
			Иначе
				КРаспределению    = СтрокаТЧ.Сумма;
				СуммаНДС          = СтрокаТЧ.СуммаНДС;
				МожноРаспределить = МожноРаспределить - КРаспределению;
			КонецЕсли;

			// По регистру "Розничная выручка организаций"
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Организация     = СтруктураШапкиДокумента.Организация;
			СтрокаДвижений.КассаККМ        = СтруктураШапкиДокумента.Склад;
			СтрокаДвижений.СтавкаНДС       = СтрокаТЧ.СтавкаНДС;
			СтрокаДвижений.Сумма           = КРаспределению;
			СтрокаДвижений.СуммаНДС        = СуммаНДС;
			СтрокаДвижений.Подразделение   = СтруктураШапкиДокумента.Подразделение;

		КонецЦикла;
		// перераспределение выручки закончено

		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.РозничнаяВыручкаОрганизаций.ВыполнитьРасход();
		КонецЕсли;

	КонецЕсли;

	// погашение розничной выручки
	НаборДвижений   = Движения.РозничнаяВыручкаОрганизаций;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	Для каждого СтрокаТЧ из ТаблицаСуммНДС Цикл

		// По регистру "Розничная выручка организаций"
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Организация     = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.КассаККМ        = СтруктураШапкиДокумента.Склад;
		СтрокаДвижений.СтавкаНДС       = СтрокаТЧ.СтавкаНДС;
		СтрокаДвижений.Сумма           = СтрокаТЧ.Сумма;
		СтрокаДвижений.СуммаНДС        = СтрокаТЧ.СуммаНДС;
		СтрокаДвижений.Подразделение   = СтруктураШапкиДокумента.Подразделение;

	КонецЦикла;
	// погашение выручки закончено

	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.РозничнаяВыручкаОрганизаций.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРаспределениюОплат(СтруктураШапкиДокумента, ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, Отказ, Заголовок)
	
	Если НЕ ЕстьБезналичныеРасчеты Тогда
		Возврат;
	КонецЕсли;
	
	СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
	СчетНаличные = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	ДатаДока     = Дата;
	
	// Взаиморасчеты с эквайрером
	
	СуммаПродажПоКартам = ТаблицаПоПлатежнымКартам.Итог("Сумма");
		
	Если СуммаПродажПоКартам <> 0 Тогда
			
		Проводка = Движения.Хозрасчетный.Добавить();
		
        Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = СуммаПродажПоКартам;
		Проводка.Содержание  = "Оплата платежными картами";
		
		Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСЭквайрером;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Эквайрер);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", ДоговорВзаиморасчетовЭквайрера);
			
		Проводка.СчетКт = СчетКт;		
		
	КонецЕсли;
		
	// Взаиморасчеты с банками по кредитам
		
	Для каждого СтрокаКредита Из ТаблицаПоБанковскимКредитам Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
        Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = СтрокаКредита.Сумма;
		Проводка.Содержание  = "Оплата банковским кредитом";
		
		Проводка.СчетДт = СтрокаКредита.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаКредита.БанкКредитор);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаКредита.ДоговорВзаиморасчетовБанкаКредитора);
			
		Проводка.СчетКт = СчетКт;		
		
	КонецЦикла;
		
	// Продажи за наличный расчет
	
	СуммаПродажЗаНаличные = СуммаДокумента - СуммаПродажПоКартам - ТаблицаПоБанковскимКредитам.Итог("Сумма");
	
	Если СуммаПродажЗаНаличные < 0 Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Сумма оплаты платежными картами и банковскими кредитами больше общей суммы продаж по отчету!", Отказ, Заголовок);
		
	ИначеЕсли СуммаПродажЗаНаличные > 0 Тогда
			
		Проводка = Движения.Хозрасчетный.Добавить();
		
        Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма       = СуммаПродажЗаНаличные;
		Проводка.Содержание  = "Оплата наличными";
		
		Проводка.СчетДт = СчетНаличные;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиДвиженияДенежныхСредств", СтруктураШапкиДокумента.СтатьяДвиженияДенежныхСредств);
			
		Проводка.СчетКт = СчетКт;		
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоРегистрам.
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаВыручки, Отказ) Экспорт

	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если Не ТаблицаВыручки.Количество() = 0 Тогда
		
		ТаблицаВыручкиУслуги = ТаблицаВыручки.Скопировать(Новый Структура("Услуга", Истина));
		ТаблицаВыручкиТовары = ТаблицаВыручки.Скопировать(Новый Структура("Услуга", Ложь));
	
		Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата) Тогда
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручкиТовары, , Отказ, УчетНДС.СчетОтнесенияНДС(СтруктураШапкиДокумента), , Истина);
		КонецЕсли;
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ТаблицаВыручкиУслуги, , Отказ, УчетНДС.СчетОтнесенияНДС(СтруктураШапкиДокумента));
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента,Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

Процедура ДополнитьСтруктуруПолейТоваровРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ",         "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ",         "СчетУчетаНУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ", "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаНУ", "ПринятыеСчетУчетаНУ");
	СтруктураПолей.Вставить("СчетДоходовБУ" ,      "СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ" ,         "СубконтоБУ");
	СтруктураПолей.Вставить("СчетРасходовБУ" ,     "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ" ,      "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ" ,         "СубконтоНУ");
	СтруктураПолей.Вставить("СчетРасходовНУ" ,     "СчетРасходовНУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		ФлагСкладНТТ = (ЗначениеЗаполнено(Основание.Склад)
		                 И Основание.Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ);

		Если НЕ ФлагСкладНТТ Тогда
			Возврат;
		КонецЕсли;

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		ИнвентаризацияТоваровНаСкладе = Основание;
		ТипЦен                        = Склад.ТипЦенРозничнойТорговли;
		ВидОперации                   = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах;

		ЗаполнитьТоварыПоИнвентаризацииТоваров(Основание);

	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");

	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект);
	
	// Заполним реквизит склад в табличной части "Товары"
	СкладИзШапки    =  Не мУказаниеСкладовВТЧ;
	Для каждого СтрокаТЧ из Товары Цикл
		Если (СкладИзШапки ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад)) И СтрокаТЧ.Склад <> Склад Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);

	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета", "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика" , "ВедениеУчетаПоПроектам", "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорВзаиморасчетовЭквайрера", "ВалютаВзаиморасчетов" , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Склад"                            , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                        , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Номенклатура"                     , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                           , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                            , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                         , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"             , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                       , "Количество * Коэффициент / ISNULL(Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,1)");
	СтруктураПолей.Вставить("КоличествоДок"                    , "Количество");
	СтруктураПолей.Вставить("Цена"                             , "Цена");
	СтруктураПолей.Вставить("Сумма"                            , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                         , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                        , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                              , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                           , "СуммаНДС");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"       , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"             , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"      , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"      , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КлючСтроки"                       , "КлючСтроки");
	СтруктураПолей.Вставить("ТипНоменклатуры", "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента"     , "Количество");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры"       , "ПринадлежностьНоменклатуры");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей = Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей = Неопределено;
	КонецЕсли;

	ДополнитьСтруктуруПолейТоваровРегл(СтруктураПолей);

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей,СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	//Заполнение счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Функция возвращает таблицу продаж по дисконтным картам, необходимую для проведения документа.
//
// Параметры:
//  СтруктураШапкиДокумента - структура шапки документа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица продаж по дисконтным картам.
//
Функция ПолучитьТаблицуПродажПоДисконтнымКартам(СтруктураШапкиДокумента)

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ДисконтнаяКарта"        , "ДисконтнаяКарта");
	СтруктураПолей.Вставить("ВладелецДисконтнойКарты", "ВладелецДисконтнойКарты");
	СтруктураПолей.Вставить("Сумма"                  , "Сумма");

	ТЗ = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПродажиПоДисконтнымКартам", СтруктураПолей).Выгрузить();

	Для Каждого СтрокаТЗ Из ТЗ Цикл
		СтрокаТЗ.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЗ.Сумма, мВалютаРегламентированногоУчета,
								   СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
								   1,
								   СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
								   1,
								   СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

	Возврат ТЗ;

КонецФункции // ПолучитьТаблицуПродажПоДисконтнымКартам()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ) 
    //Учетная политика не используется если отчет заполнен по ЧЕКАМ ККМ
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И ВидОперации <> Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()


Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента,Отказ);
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверим допустимость для пользователя цен документа
	УправлениеДопПравамиПользователей.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидОплаты", "ВидОплаты");
	СтруктураПолей.Вставить("ТипОплаты", "ВидОплаты.ТипОплаты");
	СтруктураПолей.Вставить("Сумма"    , "Сумма");

	ТаблицаПоПлатежнымКартам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОплатаПлатежнымиКартами", СтруктураПолей).Выгрузить();

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("ВидОплаты"                          , "ВидОплаты");
	СтруктураПолей.Вставить("ТипОплаты"                          , "ВидОплаты.ТипОплаты");
	СтруктураПолей.Вставить("Сумма"                              , "Сумма");
	СтруктураПолей.Вставить("БанкКредитор"                       , "БанкКредитор");
	СтруктураПолей.Вставить("ДоговорВзаиморасчетовБанкаКредитора", "ДоговорВзаиморасчетовБанкаКредитора");
	СтруктураПолей.Вставить("СуммаБанковскойКомиссии"            , "СуммаБанковскойКомиссии");
	СтруктураПолей.Вставить("СчетУчетаРасчетовСКонтрагентом"     , "СчетУчетаРасчетовСКонтрагентом");
	
	СтруктураСложныхПолей = Новый Структура;
	СтруктураСложныхПолей.Вставить("ОрганизацияДоговора"     , "Док.ДоговорВзаиморасчетовБанкаКредитора.Организация");

	ТаблицаПоБанковскимКредитам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(
		ЭтотОбъект, "ОплатаБанковскимиКредитами", СтруктураПолей, СтруктураСложныхПолей).Выгрузить();

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверить заполнение ТЧ "ОплатаПлатежнымиКартами".
	ПроверитьЗаполнениеТабличнойЧастиОплатаПлатежнымиКартами(ТаблицаПоПлатежнымКартам, СтруктураШапкиДокумента, Отказ, Заголовок);

	// Проверить заполнение ТЧ "ОплатаБанковскимиКредитами".
	ПроверитьЗаполнениеТабличнойЧастиОплатаБанковскимиКредитами(ТаблицаПоБанковскимКредитам, СтруктураШапкиДокумента, Отказ, Заголовок);
	Если НЕ Отказ Тогда
		ТаблицаПоБанковскимКредитам.Свернуть("БанкКредитор, ДоговорВзаиморасчетовБанкаКредитора, СчетУчетаРасчетовСКонтрагентом", "Сумма");
	КонецЕсли;

	ЕстьБезналичныеРасчеты = ТаблицаПоПлатежнымКартам.Количество() > 0 ИЛИ ТаблицаПоБанковскимКредитам.Количество() > 0;
	Если ЕстьБезналичныеРасчеты Тогда
		СуммаПродажЗаНаличные = СуммаДокумента - ТаблицаПоПлатежнымКартам.Итог("Сумма") - ТаблицаПоБанковскимКредитам.Итог("Сумма");
		Если СуммаПродажЗаНаличные < 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Сумма оплаты платежными картами и банковскими кредитами больше общей суммы продаж по отчету!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
		
	ТаблицаПоПродажамПоДисконтнымКартам = ПолучитьТаблицуПродажПоДисконтнымКартам(СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "ПродажиПоДисконтнымКартам".
	ПроверитьЗаполнениеТабличнойЧастиПродажиПоДисконтнымКартам(ТаблицаПоПродажамПоДисконтнымКартам, СтруктураШапкиДокумента, Отказ, Заголовок);

	//Проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", 		 	ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим корректность указанных (заполненных) счетов учета
	ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура());
	
	// Движения по документу
	Если Не Отказ Тогда
		// Подготовим таблицу товаров для проведения.
		ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, СтруктураШапкиДокумента);

		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, 
			ТаблицаПоПлатежнымКартам, ТаблицаПоБанковскимКредитам, ТаблицаПоПродажамПоДисконтнымКартам, Отказ, Заголовок);
			
	КонецЕсли;

	//Сделаем переменные доступными из подписок на события
	СтруктураШапкиДокумента.Вставить("ЕстьБезналичныеРасчеты",ЕстьБезналичныеРасчеты);
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.СтруктураТабличныхЧастей.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	
	// Удаление записей регистрации из всех последовательностей
		
КонецПроцедуры

// Процедура выполняет дополнение документа значениями по умолчанию.
//
Процедура ДополнитьДокументЗначениямиПоУмолчанию() Экспорт

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(Товары, "Товары", Истина, ОтражатьВНалоговомУчете);
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект, "Реализация");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
	КонецЦикла;

КонецПроцедуры // ДополнитьДокументЗначениямиПоУмолчанию()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

УказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();

мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                      Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

