Перем мУдалятьДвижения;


Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВестиУчетНДС Экспорт;

Перем мУчетнаяПолитикаПоДатам Экспорт; 

Перем мПодчиненныеДокументы;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура ЗаполнитьРасчетыСКонтрагентами() Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей ИЛИ 
		 ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		СтрокиКУдалению = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", Ложь));
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным 
		Или ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		СтрокиКУдалению = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", Истина));
	Иначе 
		СтрокиКУдалению = Неопределено;
	КонецЕсли;
	
	Если СтрокиКУдалению <> Неопределено Тогда
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			РасчетыСКонтрагентами.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПолучитьТаблицуРасчетов(), РасчетыСКонтрагентами);
	
	РасчетыСКонтрагентами.Свернуть("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументОплаты, СчетФактура, СчетУчетаРасчетовСКонтрагентом, Аванс, РасчетыСБюджетом",
	                               "СуммаВзаиморасчетов, ВалютнаяСуммаВзаиморасчетов");
								   
	//Удаление строк с нулевой суммой
	Если СтрокиКУдалению = Неопределено Тогда							   
		СтрокиКУдалению = Новый Массив;
	Иначе
		СтрокиКУдалению.Очистить();
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из РасчетыСКонтрагентами Цикл
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		РасчетыСКонтрагентами.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСФРасчетыСКонтрагентами() Экспорт
	
	ТаблицаРасчетов = ПолучитьТаблицуРасчетов();
	
	ТаблицаРасчетов.Колонки.Добавить("ДатаСФ", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Для Каждого СтрокаТЧ Из ТаблицаРасчетов Цикл
		Если СтрокаТЧ.Аванс Тогда
			Если ЗначениеЗаполнено(СтрокаТЧ.ДокументОплаты) Тогда
				СтрокаТЧ.ДатаСФ = СтрокаТЧ.ДокументОплаты.Дата;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СтрокаТЧ.СчетФактура) Тогда
				СтрокаТЧ.ДатаСФ = СтрокаТЧ.СчетФактура.Дата;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ТаблицаРасчетов.Сортировать("ДатаСФ");
	
	ЭтоАванс = (ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным);
	КолонкаСФ = ?(ЭтоАванс, "ДокументОплаты", "СчетФактура");
	
	СтрокиРасчетов = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", ЭтоАванс));
	
	СтруктураОтбора = Новый Структура("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, Аванс, РасчетыСБюджетом");
	
	Для Каждого СтрокаРасчетов Из СтрокиРасчетов Цикл
		
		СтрокаРасчетов.СчетФактура = Неопределено;
		
		РасчетыВВалюте = ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным
						И ?(НЕ ЗначениеЗаполнено(СтрокаРасчетов.ДоговорКонтрагента), Ложь, 
							(Не СтрокаРасчетов.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) И (СтрокаРасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета));
		
		Если  (Не РасчетыВВалюте И НЕ ЗначениеЗаполнено(СтрокаРасчетов.СуммаВзаиморасчетов)) Или 
			  (РасчетыВВалюте И НЕ ЗначениеЗаполнено(СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.Контрагент 				= СтрокаРасчетов.Контрагент;
		СтруктураОтбора.ДоговорКонтрагента 		= СтрокаРасчетов.ДоговорКонтрагента;
		СтруктураОтбора.ВалютаВзаиморасчетов 	= СтрокаРасчетов.ВалютаВзаиморасчетов;
		СтруктураОтбора.Аванс					= СтрокаРасчетов.Аванс;
		СтруктураОтбора.РасчетыСБюджетом		= СтрокаРасчетов.РасчетыСБюджетом;
		
		СтрокиСФ = ТаблицаРасчетов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаСФ Из СтрокиСФ Цикл
			Если ЗначениеЗаполнено(СтрокаРасчетов[КолонкаСФ]) Тогда
				Прервать;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаСФ[КолонкаСФ]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если РасчетыВВалюте и Не СтрокаРасчетов.РасчетыСБюджетом Тогда
				Если  НЕ ЗначениеЗаполнено(СтрокаСФ.ВалютнаяСуммаВзаиморасчетов) Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов > СтрокаСФ.ВалютнаяСуммаВзаиморасчетов Тогда
					НоваяСтрока = РасчетыСКонтрагентами.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов);
					НоваяСтрока[КолонкаСФ] = СтрокаСФ[КолонкаСФ];
					НоваяСтрока.ВалютнаяСуммаВзаиморасчетов = СтрокаСФ.ВалютнаяСуммаВзаиморасчетов;
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.КурсВзаиморасчетов) Тогда
						НоваяСтрока.КурсВзаиморасчетов = СтрокаСФ.КурсВзаиморасчетов;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.КратностьВзаиморасчетов) Тогда
						НоваяСтрока.КратностьВзаиморасчетов = СтрокаСФ.КратностьВзаиморасчетов;
					КонецЕсли;
					НоваяСтрока.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.ВалютнаяСуммаВзаиморасчетов, 
															НоваяСтрока.ВалютаВзаиморасчетов, 
															мВалютаРегламентированногоУчета,
															НоваяСтрока.КурсВзаиморасчетов, 1,
															НоваяСтрока.КратностьВзаиморасчетов, 1);
					СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов = СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов - НоваяСтрока.ВалютнаяСуммаВзаиморасчетов;
					СтрокаРасчетов.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов, 
															СтрокаРасчетов.ВалютаВзаиморасчетов, 
															мВалютаРегламентированногоУчета,
															?(НЕ ЗначениеЗаполнено(СтрокаРасчетов.КурсВзаиморасчетов), 1, СтрокаРасчетов.КурсВзаиморасчетов), 1,
															?(НЕ ЗначениеЗаполнено(СтрокаРасчетов.КратностьВзаиморасчетов), 1, СтрокаРасчетов.КратностьВзаиморасчетов), 1);
					СтрокаСФ.ВалютнаяСуммаВзаиморасчетов = 0;
				Иначе
					СтрокаРасчетов[КолонкаСФ] = СтрокаСФ[КолонкаСФ];
					Если НЕ ЗначениеЗаполнено(СтрокаРасчетов.КурсВзаиморасчетов) Тогда
						СтрокаРасчетов.КурсВзаиморасчетов = СтрокаСФ.КурсВзаиморасчетов;
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СтрокаРасчетов.КратностьВзаиморасчетов) Тогда
						СтрокаРасчетов.КратностьВзаиморасчетов = СтрокаСФ.КратностьВзаиморасчетов;
					КонецЕсли;
					СтрокаРасчетов.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов, 
															СтрокаРасчетов.ВалютаВзаиморасчетов, 
															мВалютаРегламентированногоУчета,
															СтрокаРасчетов.КурсВзаиморасчетов, 1,
															СтрокаРасчетов.КратностьВзаиморасчетов, 1);
															
					СтрокаСФ.СуммаВзаиморасчетов = СтрокаСФ.СуммаВзаиморасчетов - СтрокаРасчетов.СуммаВзаиморасчетов;
				КонецЕсли;
			Иначе
				Если  НЕ ЗначениеЗаполнено(СтрокаСФ.СуммаВзаиморасчетов) Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаРасчетов.СуммаВзаиморасчетов > СтрокаСФ.СуммаВзаиморасчетов Тогда
					НоваяСтрока = РасчетыСКонтрагентами.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов);
					НоваяСтрока[КолонкаСФ] = СтрокаСФ[КолонкаСФ];
					НоваяСтрока.СуммаВзаиморасчетов = СтрокаСФ.СуммаВзаиморасчетов;
					СтрокаРасчетов.СуммаВзаиморасчетов = СтрокаРасчетов.СуммаВзаиморасчетов - НоваяСтрока.СуммаВзаиморасчетов;
					СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.СуммаВзаиморасчетов, 
															мВалютаРегламентированногоУчета,
															СтрокаРасчетов.ВалютаВзаиморасчетов, 
															1, ?(НЕ ЗначениеЗаполнено(СтрокаРасчетов.КурсВзаиморасчетов), 1, СтрокаРасчетов.КурсВзаиморасчетов),
															1, ?(НЕ ЗначениеЗаполнено(СтрокаРасчетов.КратностьВзаиморасчетов), 1, СтрокаРасчетов.КратностьВзаиморасчетов));
					Если Не СтрокаРасчетов.РасчетыСБюджетом Тогда
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.КурсВзаиморасчетов) Тогда
							НоваяСтрока.КурсВзаиморасчетов = СтрокаСФ.КурсВзаиморасчетов;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.КратностьВзаиморасчетов) Тогда
							НоваяСтрока.КратностьВзаиморасчетов = СтрокаСФ.КратностьВзаиморасчетов;
						КонецЕсли;
						НоваяСтрока.ВалютнаяСуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НоваяСтрока.СуммаВзаиморасчетов, 
																мВалютаРегламентированногоУчета,
																НоваяСтрока.ВалютаВзаиморасчетов, 
																1, НоваяСтрока.КурсВзаиморасчетов, 
																1, НоваяСтрока.КратностьВзаиморасчетов);
					КонецЕсли;
					СтрокаСФ.СуммаВзаиморасчетов = 0;
				Иначе
					СтрокаРасчетов[КолонкаСФ] = СтрокаСФ[КолонкаСФ];
					Если Не СтрокаРасчетов.РасчетыСБюджетом Тогда
						Если НЕ ЗначениеЗаполнено(СтрокаРасчетов.КурсВзаиморасчетов) Тогда
							СтрокаРасчетов.КурсВзаиморасчетов = СтрокаСФ.КурсВзаиморасчетов;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(СтрокаРасчетов.КратностьВзаиморасчетов) Тогда
							СтрокаРасчетов.КратностьВзаиморасчетов = СтрокаСФ.КратностьВзаиморасчетов;
						КонецЕсли;
						СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетов.СуммаВзаиморасчетов, 
																мВалютаРегламентированногоУчета,
																СтрокаРасчетов.ВалютаВзаиморасчетов, 
																1, СтрокаРасчетов.КурсВзаиморасчетов, 
																1, СтрокаРасчетов.КратностьВзаиморасчетов);
																
					КонецЕсли;
					СтрокаСФ.СуммаВзаиморасчетов = СтрокаСФ.СуммаВзаиморасчетов - СтрокаРасчетов.СуммаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РасчетыСКонтрагентами.Свернуть("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументОплаты, СчетФактура, СчетУчетаРасчетовСКонтрагентом, Аванс, РасчетыСБюджетом",
	                               "СуммаВзаиморасчетов, ВалютнаяСуммаВзаиморасчетов");
	
КонецПроцедуры

Функция ПолучитьТаблицуРасчетов() Экспорт
	
	ТаблицаРезультатов = Новый ТаблицаЗначений();
		
	КолонкиТЧ = ЭтотОбъект.Метаданные().ТабличныеЧасти.РасчетыСКонтрагентами.Реквизиты;
	
	Для Каждого Колонка Из КолонкиТЧ Цикл
		ТаблицаРезультатов.Колонки.Добавить(Колонка.Имя, Колонка.Тип);
	КонецЦикла;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям ИЛИ
		 ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
 
		Для Каждого СтрокаСФ Из ДанныеПоСФ Цикл
			
			ДополнительныеСтроки = ДополнительныеСведения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСФ.КлючСтроки));
			
			Для Каждого ДополнительнаяСтрока Из ДополнительныеСтроки Цикл
				
				СтрокаРасчетовСКонтрагентами 							= ТаблицаРезультатов.Добавить();
				СтрокаРасчетовСКонтрагентами.Аванс						= Ложь;
				СтрокаРасчетовСКонтрагентами.Контрагент 				= СтрокаСФ.Контрагент;
				СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента 		= СтрокаСФ.ДоговорКонтрагента;
				СтрокаРасчетовСКонтрагентами.СчетФактура 				= СтрокаСФ.СчетФактура;
				
				Если ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда 
					Или ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества 
					Или ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы
					 Тогда
					СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов 	= ДополнительнаяСтрока.СуммаБезНДС - ДополнительнаяСтрока.СуммаБезНДСОплата;
				Иначе
					СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов 	= ДополнительнаяСтрока.СуммаБезНДС + ДополнительнаяСтрока.НДС - (ДополнительнаяСтрока.СуммаБезНДСОплата + ДополнительнаяСтрока.НДСОплата);
				КонецЕсли;

				СтруктураКурсаВзаиморасчетов 							= МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
				СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов     	= ?(НЕ ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс), 1, СтруктураКурсаВзаиморасчетов.Курс);
				СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= ?(НЕ ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Кратность), 1, СтруктураКурсаВзаиморасчетов.Кратность);
				
				СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов 		= СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СтрокаРасчетовСКонтрагентами.ВалютнаяСуммаВзаиморасчетов= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов, 
																			мВалютаРегламентированногоУчета,
																			СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов, 
																			1, СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов,
																			1, СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов);
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаРасчетовСКонтрагентами.Контрагент,СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента);

				Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
					СтрокаРасчетовСКонтрагентами.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
				ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда	
					СтрокаРасчетовСКонтрагентами.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				КонецЕсли;
				
				Если ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда 
					Или ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентАренда 					Или ДополнительнаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы Тогда
					 
					СтрокаРасчетовСКонтрагентами 					= ТаблицаРезультатов.Добавить();
					СтрокаРасчетовСКонтрагентами.Аванс				= Ложь;
					СтрокаРасчетовСКонтрагентами.Контрагент 		= СтрокаСФ.Контрагент;
					СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента = СтрокаСФ.ДоговорКонтрагента;
					СтрокаРасчетовСКонтрагентами.СчетФактура 		= СтрокаСФ.СчетФактура;
					СтрокаРасчетовСКонтрагентами.РасчетыСБюджетом	= Истина;
					СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов= ДополнительнаяСтрока.НДС - ДополнительнаяСтрока.НДСОплата;
					
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЦикла;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		
		Для Каждого СтрокаСФ Из ДанныеПоСФ Цикл
			
			ДополнительныеСтроки = ДополнительныеСведения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСФ.КлючСтроки));
			
			Для Каждого ДополнительнаяСтрока Из ДополнительныеСтроки Цикл
				
				СтрокаРасчетовСКонтрагентами 					= ТаблицаРезультатов.Добавить();
				СтрокаРасчетовСКонтрагентами.Аванс				= Ложь;
				СтрокаРасчетовСКонтрагентами.СчетФактура 		= СтрокаСФ.СчетФактура;
				СтрокаРасчетовСКонтрагентами.РасчетыСБюджетом	= Истина;
				СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов= ДополнительнаяСтрока.НДС - ДополнительнаяСтрока.НДСОплата;
				
			КонецЦикла;
				
		КонецЦикла;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным
		Тогда
		
		Для Каждого СтрокаСФ Из ДанныеПоСФ Цикл
			
			ДополнительныеСтроки = ДополнительныеСведения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСФ.КлючСтроки));
			
			Для Каждого ДополнительнаяСтрока Из ДополнительныеСтроки Цикл
				
				СтрокаРасчетовСКонтрагентами 							= ТаблицаРезультатов.Добавить();
				СтрокаРасчетовСКонтрагентами.Аванс						= Истина;
				СтрокаРасчетовСКонтрагентами.Контрагент 				= СтрокаСФ.Контрагент;
				СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента 		= СтрокаСФ.ДоговорКонтрагента;
				СтрокаРасчетовСКонтрагентами.ДокументОплаты				= СтрокаСФ.СчетФактура;
				СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов		= ДополнительнаяСтрока.СуммаБезНДС + ДополнительнаяСтрока.НДС - (ДополнительнаяСтрока.СуммаБезНДСОплата + ДополнительнаяСтрока.НДСОплата);
				СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов		= СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Если СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов = СтрокаСФ.ВалютаАванса Тогда
					СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов			= ?(ДополнительнаяСтрока.ВалютнаяСуммаСНДС = 0, 1, (ДополнительнаяСтрока.СуммаБезНДС + ДополнительнаяСтрока.НДС)/ДополнительнаяСтрока.ВалютнаяСуммаСНДС);
					СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= 1;
				Иначе
					СтруктураКурсаВзаиморасчетов 							= МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
					СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов     	= ?(НЕ ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс), 1, СтруктураКурсаВзаиморасчетов.Курс);
					СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= ?(НЕ ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Кратность), 1, СтруктураКурсаВзаиморасчетов.Кратность);
				
				КонецЕсли; 
				СтрокаРасчетовСКонтрагентами.ВалютнаяСуммаВзаиморасчетов= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов,
																			мВалютаРегламентированногоУчета, СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов,
																			1, СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов,
																			1, СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов);
				
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаРасчетовСКонтрагентами.Контрагент,СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента);
				СтрокаРасчетовСКонтрагентами.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетАвансовПокупателя;
				
			КонецЦикла;
				
		КонецЦикла;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		
		Для Каждого СтрокаСФ Из ДанныеПоСФ Цикл
			
			ДополнительныеСтроки = ДополнительныеСведения.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаСФ.КлючСтроки));
			
			Для Каждого ДополнительнаяСтрока Из ДополнительныеСтроки Цикл
				
				СтрокаРасчетовСКонтрагентами 							= ТаблицаРезультатов.Добавить();
				СтрокаРасчетовСКонтрагентами.Аванс						= Истина;
				СтрокаРасчетовСКонтрагентами.Контрагент 				= СтрокаСФ.Контрагент;
				СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента 		= СтрокаСФ.ДоговорКонтрагента;
				СтрокаРасчетовСКонтрагентами.ДокументОплаты				= СтрокаСФ.СчетФактура;
				СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов		= ДополнительнаяСтрока.СуммаБезНДС + ДополнительнаяСтрока.НДС - (ДополнительнаяСтрока.СуммаБезНДСОплата + ДополнительнаяСтрока.НДСОплата);
				СтрокаРасчетовСКонтрагентами.ВалютаВзаиморасчетов		= мВалютаРегламентированногоУчета;
				СтрокаРасчетовСКонтрагентами.КурсВзаиморасчетов			= 1;
				СтрокаРасчетовСКонтрагентами.КратностьВзаиморасчетов	= 1;
				СтрокаРасчетовСКонтрагентами.ВалютнаяСуммаВзаиморасчетов= СтрокаРасчетовСКонтрагентами.СуммаВзаиморасчетов;
				
				СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаРасчетовСКонтрагентами.Контрагент,СтрокаРасчетовСКонтрагентами.ДоговорКонтрагента);
				СтрокаРасчетовСКонтрагентами.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетАвансовПокупателя;
				
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаРезультатов;	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выводит сообщение об ошибке 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения не вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  СтатусСообщения
//
Процедура СообщитьОбОшибкеБезОстановкиПроведения(ТекстСообщения, Заголовок = "",Статус)

	#Если не ВнешнееСоединение Тогда
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок = "";
		КонецЕсли;
		
		Сообщить(ТекстСообщения, Статус);
		
	#КонецЕсли

КонецПроцедуры // ОбщегоНазначения.СообщитьОбОшибке()

// Процедура проверяет корректность заполнения реквизитов шапки документа
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтрРекв = "Организация";
					
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(СтрРекв), Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура проверяет корректность заполнения реквизитов таб. части документа
//
Процедура ПроверитьЗаполнениеТабЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);

	ОбязательныеРеквизиты = "";
	Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		ОбязательныеРеквизиты = "Контрагент, ДоговорКонтрагента";
	КонецЕсли;
	
	//Проверка основной таблицы
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ?(ОбязательныеРеквизиты = "", "", ", ") + 
									"ДатаСФ, НомерСФ, ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента,ВалютаАванса";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
			ОбязательныеРеквизиты = ОбязательныеРеквизиты + ?(ОбязательныеРеквизиты = "", "", ", ") + "ДатаСФ, НомерСФ"; 
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		
	КонецЕсли;
	СтруткураОбязательныхРеквизитов = Новый Структура(ОбязательныеРеквизиты);
	СтруткураОбязательныхРеквизитов.Вставить("СчетФактура", "Не заполнено значение реквизита ""Документ-основание (поступление и др.)"". Для создания документов используйте кнопку ""Заполнить|Сформировать счета-фактуры"".");

	//Проверка заполнения обязательных реквизитов
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДанныеПоСФ", СтруткураОбязательныхРеквизитов, Отказ, Заголовок);
	
	//Проверка заполнения реквизитов в зависимости от заполнения строки 
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводНачальныхОстатковНДСДанныеПоСФ.НомерСтроки,
		|	""Исправление"" КАК ИдентификаторОшибки,
		|	1 КАК Порядок
		|ИЗ
		|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
		|ГДЕ
		|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка = &ТекущийДокумент
		|	И ВводНачальныхОстатковНДСДанныеПоСФ.Исправление = ИСТИНА
		|	И (ВводНачальныхОстатковНДСДанныеПоСФ.НомерИсправления = 0
		|			ИЛИ ВводНачальныхОстатковНДСДанныеПоСФ.ДатаИсправления = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВводНачальныхОстатковНДСДанныеПоСФ.НомерСтроки,
		|	""КорректировочныйСчетФактура"",
		|	2
		|ИЗ
		|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
		|ГДЕ
		|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка = &ТекущийДокумент
		|	И ВводНачальныхОстатковНДСДанныеПоСФ.КорректировочныйСчетФактура = ИСТИНА
		|	И (ВводНачальныхОстатковНДСДанныеПоСФ.НомерИсходногоДокумента ПОДОБНО """"
		|			ИЛИ ВводНачальныхОстатковНДСДанныеПоСФ.ДатаИсходногоДокумента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВводНачальныхОстатковНДСДанныеПоСФ.НомерСтроки,
		|	""УчитыватьИсправлениеИсходногоДокумента"",
		|	3
		|ИЗ
		|	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
		|ГДЕ
		|	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка = &ТекущийДокумент
		|	И ВводНачальныхОстатковНДСДанныеПоСФ.УчитыватьИсправлениеИсходногоДокумента = ИСТИНА
		|	И (ВводНачальныхОстатковНДСДанныеПоСФ.НомерИсправленияИсходногоДокумента = 0
		|			ИЛИ ВводНачальныхОстатковНДСДанныеПоСФ.ДатаИсправленияИсходногоДокумента = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВводНачальныхОстатковНДСДанныеПоСФ.НомерСтроки,
		|	Порядок";
		
		Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Если РезультатЗапроса.Количество() <> 0 Тогда
			Для Каждого СтрокаЗапроса ИЗ РезультатЗапроса Цикл
				Если СтрокаЗапроса.ИдентификаторОшибки = "Исправление" Тогда
					СтрокаРеквизитов = """Номер исправления"" или ""Дата исправления""";
				ИначеЕсли СтрокаЗапроса.ИдентификаторОшибки = "КорректировочныйСчетФактура" Тогда
					СтрокаРеквизитов = """Номер корректируемого счета-фактуры"" или ""Дата корректируемого счета-фактуры""";
				ИначеЕсли СтрокаЗапроса.ИдентификаторОшибки = "УчитыватьИсправлениеИсходногоДокумента" Тогда
					СтрокаРеквизитов = """Номер исправления исходного документа"" или ""Дата исправления исходного документа""";
				КонецЕсли;
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаЗапроса.НомерСтроки) +
				""" табличной части: ";
				СтрокаСообщения = "Не заполнено значение реквизита " + СтрокаРеквизитов + "!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	//Проверка таблицы дополнительных сведений
	ОбязательныеРеквизиты = "ВидЦенности, СтавкаНДС";

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДополнительныеСведения", Новый Структура(ОбязательныеРеквизиты), Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиДополнительныеСведения(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабЧасти()

// Процедура проверяет корректность заполнения реквизитов таб. части "ДополнительныеСведения" документа
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДополнительныеСведения(СтруктураШапкиДокумента, Отказ, Заголовок)

	Для Каждого СтрокаТЧ Из ДополнительныеСведения Цикл
		Если ((СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям) И
			(СтрокаТЧ.СуммаБезНДССтроительство <> 0 Или СтрокаТЧ.НДССтроительство <> 0 Или СтрокаТЧ.СуммаБезНДСВведеноВЭксплуатацию <> 0 Или СтрокаТЧ.НДСВведеноВЭксплуатацию <> 0) 
			Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления)
			И (НЕ ЗначениеЗаполнено(СтрокаТЧ.ОбъектСтроительства)) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке """ + СтрокаТЧ.НомерСтроки + """ должна быть заполнена колонка " + 
							?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления, """Основное средство""", """Объект Вн.А.""") + "!", 
							?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления, Отказ, Неопределено), 
							Заголовок);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным И
			СтрокаТЧ.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 И
			НЕ ЗначениеЗаполнено(СтрокаТЧ.ДокументОтгрузки) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке """ + СтрокаТЧ.НомерСтроки + """ должна быть заполнена колонка ""Документ отгрузки""!", , Заголовок);
		КонецЕсли;
		Если (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям И
			(ЗначениеЗаполнено(СтрокаТЧ.СуммаБезНДС) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СуммаБезНДСВключеноВСтоимость) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СуммаБезНДССтроительство) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СуммаБезНДСВведеноВЭксплуатацию)
			ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СуммаБезНДССтавка0) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СуммаБезНДСПодтверждено0 ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СуммаБезНДСНеПодтверждено0) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СуммаБезНДСПредъявлено)
			ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СуммаБезНДСВведеноВЭксплуатацию) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СуммаБезНДСПредъявлено) ИЛИ ЗначениеЗаполнено(СтрокаТЧ.СуммаБезНДСПредъявленоНеПодтверждено0)))) 
			И (НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНДС)) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В строке """ + СтрокаТЧ.НомерСтроки + """ должна быть заполнена колонка ""Счет учета НДС""!", , Заголовок);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Процедура проверяет корректность заполнения реквизитов таб. части "РасчетыСКонтрагентами" документа
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРасчетыСКонтрагентами(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаТЧ Из РасчетыСКонтрагентами Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) +
		                               """ табличной части ""Расчеты с контрагентами"": ";
		Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления И
		   НЕ ЗначениеЗаполнено(СтрокаТЧ.Контрагент) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Контрагент""!", Отказ, Заголовок);
		КонецЕсли;
		Если СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления И
		   НЕ ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Договор контрагента""!", Отказ, Заголовок);
		КонецЕсли;
		Если СтрокаТЧ.Аванс Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДокументОплаты) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Документ оплаты""!", Отказ, Заголовок);
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетФактура) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Счет-фактура""!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СуммаВзаиморасчетов) Тогда
			СообщитьОбОшибкеБезОстановкиПроведения(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Сумма расчетов, руб.""!",Заголовок,СтатусСообщения.Внимание);
		КонецЕсли;
		
		Если Не СтрокаТЧ.РасчетыСБюджетом Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВалютаВзаиморасчетов) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Валюта взаиморасчетов""!", Отказ, Заголовок);
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КурсВзаиморасчетов) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Курс взаиморасчетов""!", Отказ, Заголовок);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВалютнаяСуммаВзаиморасчетов) Тогда
					СообщитьОбОшибкеБезОстановкиПроведения(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Сумма взаиморасчетов, вал.""!",Заголовок,СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОтразитьРасчетыСКонтрагентами Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) И (НЕ СтрокаТЧ.РасчетыСБюджетом) и
				ЗначениеЗаполнено(СтрокаТЧ.СуммаВзаиморасчетов) и ЗначениеЗаполнено(СтрокаТЧ.ВалютнаяСуммаВзаиморасчетов) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнен реквизит ""Счет учета расчетов с контрагентом""!", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;			
		
	КонецЦикла;
	
	ТаблицаРасчетов = ПолучитьТаблицуРасчетов();
	ТаблицаРасчетов.Свернуть("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов, ДокументОплаты, СчетФактура, СчетУчетаРасчетовСКонтрагентом, Аванс, РасчетыСБюджетом",
	                         "СуммаВзаиморасчетов, ВалютнаяСуммаВзаиморасчетов");
	//Удаление строк с нулевой суммой
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРасчетов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	ТаблицаРасчетов.Колонки.Добавить( "ФлагУдалить", Новый ОписаниеТипов("Булево"));
	ТаблицаРасчетов.ЗаполнитьЗначения( Ложь, "ФлагУдалить");
	
	ЭтоАванс = (ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным);
	КолонкаСФ = ?(ЭтоАванс, "ДокументОплаты", "СчетФактура");
	
	СтрокиРасчетов = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", ЭтоАванс));
	СтруктураОтбора = Новый Структура("Контрагент, ДоговорКонтрагента, ВалютаВзаиморасчетов, Аванс, РасчетыСБюджетом, " + КолонкаСФ);
	
	ПровереноСтрок = 0;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаРасчетов Из СтрокиРасчетов Цикл
		РасчетыВВалюте = ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным
						И ?(НЕ ЗначениеЗаполнено(СтрокаРасчетов.ДоговорКонтрагента), Ложь, 
						(Не СтрокаРасчетов.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) И (СтрокаРасчетов.ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета) И СтрокаРасчетов.Аванс);
		
								
		СуммаВзаиморасчетов = ?(РасчетыВВалюте, СтрокаРасчетов.ВалютнаяСуммаВзаиморасчетов, СтрокаРасчетов.СуммаВзаиморасчетов);
		Если НЕ ЗначениеЗаполнено(СуммаВзаиморасчетов) Тогда
			ПровереноСтрок = ПровереноСтрок + 1;
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора.Контрагент 				= СтрокаРасчетов.Контрагент;
		СтруктураОтбора.ДоговорКонтрагента 		= СтрокаРасчетов.ДоговорКонтрагента;
		СтруктураОтбора.ВалютаВзаиморасчетов 	= СтрокаРасчетов.ВалютаВзаиморасчетов;
		СтруктураОтбора.Аванс					= СтрокаРасчетов.Аванс;
		СтруктураОтбора.РасчетыСБюджетом		= СтрокаРасчетов.РасчетыСБюджетом;
		СтруктураОтбора[КолонкаСФ]				= СтрокаРасчетов[КолонкаСФ];
		
		СтрокиОсновныеДанные = ТаблицаРасчетов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаОсновныеДанные Из СтрокиОсновныеДанные Цикл
			Если (РасчетыВВалюте И НЕ ЗначениеЗаполнено(СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов)) Или
				(Не РасчетыВВалюте И НЕ ЗначениеЗаполнено(СтрокаОсновныеДанные.СуммаВзаиморасчетов)) Тогда
				СтрокаОсновныеДанные.ФлагУдалить = Истина;
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СуммаВзаиморасчетов) Тогда 
				ПровереноСтрок = ПровереноСтрок + 1;
				Прервать;
			КонецЕсли;
			
			Если РасчетыВВалюте Тогда
				Если СуммаВзаиморасчетов > СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов Тогда
					СуммаВзаиморасчетов = СуммаВзаиморасчетов - СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов;
					СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов = 0;
				Иначе
					СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов = СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов - СуммаВзаиморасчетов;
					СуммаВзаиморасчетов = 0;
				КонецЕсли;
			Иначе
				Если СуммаВзаиморасчетов > СтрокаОсновныеДанные.СуммаВзаиморасчетов Тогда
					СуммаВзаиморасчетов = СуммаВзаиморасчетов - СтрокаОсновныеДанные.СуммаВзаиморасчетов ;
					СтрокаОсновныеДанные.СуммаВзаиморасчетов = 0;
				Иначе
					СтрокаОсновныеДанные.СуммаВзаиморасчетов = СтрокаОсновныеДанные.СуммаВзаиморасчетов - СуммаВзаиморасчетов;
					СуммаВзаиморасчетов = 0;
				КонецЕсли;
			КонецЕсли;
			Если (РасчетыВВалюте И НЕ ЗначениеЗаполнено(СтрокаОсновныеДанные.ВалютнаяСуммаВзаиморасчетов)) Или
				(Не РасчетыВВалюте И НЕ ЗначениеЗаполнено(СтрокаОсновныеДанные.СуммаВзаиморасчетов)) Тогда
				СтрокаОсновныеДанные.ФлагУдалить = Истина;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(СуммаВзаиморасчетов) Тогда
			ПровереноСтрок = ПровереноСтрок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоСтрок = ТаблицаРасчетов.Количество() - 1;
	Индекс = ВсегоСтрок;
	Пока Индекс >= 0 Цикл
		Если ТаблицаРасчетов[Индекс].ФлагУдалить Тогда
			ТаблицаРасчетов.Удалить(ТаблицаРасчетов[Индекс]);
			ВсегоСтрок = ВсегоСтрок - 1;
			Индекс = Мин(Индекс, ВсегоСтрок);
		Иначе
			Индекс = Индекс - 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаРасчетов.Количество() > 0 Или ПровереноСтрок < СтрокиРасчетов.Количество() Тогда
		Сообщить("Информация о задолженности на закладке """ + ?(ЭтоАванс, "Авансы", "Расчеты с контрагентами") + """ не соответствует основным данным по остаткам", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос и выгружает таблицу в развороте по событиям для отражения в регистре НДС.
//
// Параметры: 
//  РезультатЗапросаПоСтрокам - результат запроса по табличной части "ДанныеПоСФ",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуРазвернутуюПоСобытиям(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("СчетУчетаНДС0",	ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);
	Запрос.УстановитьПараметр("СчетУчетаНДССтр",ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств);
	Запрос.УстановитьПараметр("мВалютаРегламентированногоУчета",мВалютаРегламентированногоУчета);
	
	СоответствиеСобытияИколонки  = новый Соответствие();
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком,	"НДС");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.НДСОплачен,				"НДСОплата");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство,"НДССтроительство");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию,	"НДСВведеноВЭксплуатацию");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость,		"НДСВключеноВСтоимость");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0,	"НДССтавка0");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, 	"НДСПредъявлено");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0,	"НДСПредъявлено0");
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.Реализация,				"НДС");
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.Оплата,					"НДСОплата");
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		СоответствиеСобытияИколонки.Вставить(Перечисления.СобытияПоНДСПродажи.ПолученАванс,				"НДС");
	КонецЕсли; 
	
	Счетчик = 0;
	ТекстЗапроса = "";
	Для каждого Событие из СоответствиеСобытияИколонки Цикл
		Если Счетчик>0 Тогда
		     ТекстЗапроса = ТекстЗапроса+ Символы.ПС+"Объединить все " + Символы.ПС;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
		Запрос.УстановитьПараметр("Параметр"+ Счетчик,Событие.Ключ);
		Если ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПокупки") Тогда
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПокупки.Индекс(Событие.Ключ));
		ИначеЕсли ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПродажи") Тогда
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПродажи.Индекс(Событие.Ключ));
		Иначе
			Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Счетчик);
		КонецЕсли; 
		
		
		ТекстЗапроса = ТекстЗапроса +
		 "ВЫБРАТЬ
		 |	&Организация как Организация,
		 |	&Параметр"+Счетчик+" как Событие,
		 |	&ПорядокСобытия"+Счетчик+" как ПорядокСобытия,
		 |	ОсновныеДанные.Контрагент,
		 |	ОсновныеДанные.ДоговорКонтрагента,
		 |	ОсновныеДанные.ПредъявленСФ,";
		 Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным тогда
			 ПустыеВалюты = новый массив();
			 ПустыеВалюты.Добавить(Справочники.Валюты.ПустаяСсылка());
			 ПустыеВалюты.Добавить(Неопределено);
			 Запрос.УстановитьПараметр("ПустыеВалюты",ПустыеВалюты);
			 Запрос.УстановитьПараметр("мВалютаРегламентированногоУчета",мВалютаРегламентированногоУчета);
 			 ТекстЗапроса = ТекстЗапроса +"
			 |	(выбор когда ОсновныеДанные.ВалютнаяСуммаСНДС = 0 или (ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) или ОсновныеДанные.ВалютаАванса = &мВалютаРегламентированногоУчета) тогда Расшифровка.СуммаБез"+Событие.Значение+" + Расшифровка."+Событие.Значение+" иначе Расшифровка.ВалютнаяСуммаСНДС конец) как ВалютнаяСуммаСНДС,
			 |	(выбор когда ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) или ОсновныеДанные.ВалютнаяСуммаСНДС = 0 тогда &мВалютаРегламентированногоУчета иначе ОсновныеДанные.ВалютаАванса конец) как ВалютаДокумента,
			 |	(выбор когда ОсновныеДанные.ВалютаАванса в (&ПустыеВалюты) тогда &мВалютаРегламентированногоУчета иначе ОсновныеДанные.ВалютаАванса конец) как ОргигинальнаяВалютаАванса,
			 |	СвязанныйСФ.СчетФактура,";
		 Иначе
			ТекстЗапроса = ТекстЗапроса +"
			|	ОсновныеДанные.СчетФактура,";
		 КонецЕсли;
		 ТекстЗапроса = ТекстЗапроса +"
		 |	Расшифровка.ВидЦенности,
		 |	Расшифровка.СтавкаНДС,";
		 
		 Если ТипЗнч(Событие.Ключ) = Тип("ПеречислениеСсылка.СобытияПоНДСПродажи") Тогда
			 ТекстЗапроса = ТекстЗапроса +"
			 |	Неопределено  как СчетУчетаНДС,";
		 ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство тогда
			 ТекстЗапроса = ТекстЗапроса +"
			 |	&СчетУчетаНДССтр  как СчетУчетаНДС,";
		 Иначе	
			 ТекстЗапроса = ТекстЗапроса +"
			 |	Расшифровка.СчетУчетаНДС  как СчетУчетаНДС,";
		 КонецЕсли; 
		 
		 ТекстЗапроса = ТекстЗапроса +"
		 |	Расшифровка.СуммаБез"+Событие.Значение+" как СуммаБезНДС,
		 |	Расшифровка."+Событие.Значение+" как НДС,
		 |	Расшифровка.Номенклатура,
		 |	Расшифровка.СчетЗатрат,
		 |	Расшифровка.Субконто1,
		 |	Расшифровка.Субконто2,
		 |	Расшифровка.Субконто3,
		 |	ОсновныеДанные.КлючСтроки,
		 |	Расшифровка.НомерСтроки";
		 Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям  
			 Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей	
			 тогда
				 Если Событие.Ключ = Перечисления.СобытияПоНДСПокупки.НДСОплачен 
					 или Событие.Ключ = Перечисления.СобытияПоНДСПродажи.Оплата 
					 тогда
					 ТекстЗапроса = ТекстЗапроса +"
					 |	, Выбор когда Расшифровка.ДокументОплаты = Неопределено тогда ОсновныеДанные.СчетФактура иначе Расшифровка.ДокументОплаты Конец как ДокументОплаты
					 |	, Выбор когда Расшифровка.ДокументОплаты = Неопределено тогда ОсновныеДанные.СчетФактура.дата иначе Расшифровка.ДокументОплаты.дата Конец как ДатаСобытия
					 |	";
				 ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком 
					 или Событие.Ключ = Перечисления.СобытияПоНДСПродажи.Реализация 
					 тогда
					 ТекстЗапроса = ТекстЗапроса +"
					 |	, Неопределено как ДокументОплаты
					 |	, ОсновныеДанные.СчетФактура.дата как ДатаСобытия
					 |	";
				 ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0
					тогда
					 //Заполнение даты события далее
					 ТекстЗапроса = ТекстЗапроса +"
					 |	, Неопределено как ДокументОплаты
					 |	";
					
				 Иначе
					 ТекстЗапроса = ТекстЗапроса +"
					 |	, Неопределено как ДокументОплаты
					 |	, ОсновныеДанные.Ссылка.дата как ДатаСобытия
					 |	";
				 КонецЕслИ;
		 Иначе
			Если Событие.Ключ = Перечисления.СобытияПоНДСПродажи.ПолученАванс тогда
				 ТекстЗапроса = ТекстЗапроса +"
				 |	, ОсновныеДанные.СчетФактура.дата как ДатаСобытия
				 |	";
			Иначе
				 ТекстЗапроса = ТекстЗапроса +"
				 |	, ОсновныеДанные.Ссылка.дата как ДатаСобытия
				 |	";
			КонецЕслИ;
				 
		 КонецЕсли; 
		 Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям тогда
			 Если Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0
				 тогда
				 ТекстЗапроса = ТекстЗапроса +"
				 |	, Выбор когда Расшифровка.ДокументОтгрузки = Неопределено тогда ОсновныеДанные.Ссылка.дата иначе Расшифровка.ДокументОтгрузки.дата Конец как ДатаСобытия
				 |	, Расшифровка.ДокументОтгрузки как ДокументОтгрузки";

			ИначеЕсли Событие.Ключ = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0
				 тогда
				 ТекстЗапроса = ТекстЗапроса +"
				 |	, Расшифровка.ДокументОтгрузки как ДокументОтгрузки";
			 Иначе
				 ТекстЗапроса = ТекстЗапроса +"
				 |	, Неопределено как ДокументОтгрузки";
			КонецЕслИ;	 
			 
		 КонецЕсли; 
		 ТекстЗапроса = ТекстЗапроса +"
		 |ИЗ
		 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
		 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
		 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки";
		 Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным тогда
			ТекстЗапроса = ТекстЗапроса +"
			|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СчетФактураВыданный.Ссылка КАК СчетФактура,
			|	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
			|	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
			|ИЗ
			|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		    |	
			|ГДЕ
			|	(СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС = ИСТИНА)) КАК СвязанныйСФ
			|	ПО ОсновныеДанные.ДоговорКонтрагента = СвязанныйСФ.ДоговорКонтрагента И ОсновныеДанные.СчетФактура = СвязанныйСФ.ДокументОснование
			|	";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса +"
		 |
		 |ГДЕ
		 |	ОсновныеДанные.Ссылка = &Ссылка И
		 |	Расшифровка.Ссылка = &Ссылка и
		 |	(Расшифровка.СуммаБез"+Событие.Значение+" <> 0 или Расшифровка."+Событие.Значение+" <> 0)";
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Если Счетчик>0 Тогда
		     ТекстЗапроса = ТекстЗапроса+ Символы.ПС+"Объединить все " + Символы.ПС;
		КонецЕсли; 
		Счетчик = Счетчик + 1;
		Запрос.УстановитьПараметр("Параметр"+ Счетчик,Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура);
		Запрос.УстановитьПараметр("ПорядокСобытия"+ Счетчик,Перечисления.СобытияПоНДСПокупки.Индекс(Перечисления.СобытияПоНДСПокупки.ПолученСчетФактура));
		
		ТекстЗапроса = ТекстЗапроса +
		 "ВЫБРАТЬ
		 |	&Организация как Организация,
		 |	&Параметр"+Счетчик+" как Событие,
		 |	&ПорядокСобытия"+Счетчик+" как ПорядокСобытия,
		 |	ОсновныеДанные.Контрагент,
		 |	ОсновныеДанные.ДоговорКонтрагента,
		 |	ОсновныеДанные.ПредъявленСФ,
		 |	ОсновныеДанные.СчетФактура,
		 |	Расшифровка.ВидЦенности,
		 |	Расшифровка.СтавкаНДС,
		 |	Расшифровка.СчетУчетаНДС,
		 |	Расшифровка.СуммаБезНДС,
		 |	Расшифровка.НДС,
		 |	Расшифровка.Номенклатура,
		 |	Расшифровка.СчетЗатрат,
		 |	Расшифровка.Субконто1,
		 |	Расшифровка.Субконто2,
		 |	Расшифровка.Субконто3,
		 |	ОсновныеДанные.КлючСтроки,
		 |	Расшифровка.НомерСтроки
		 |	, Неопределено как ДокументОплаты
		 |	, ОсновныеДанные.СчетФактура.Дата как ДатаСобытия
		 |	, Неопределено как ДокументОтгрузки
		 |ИЗ
		 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
		 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
		 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
		 |
		 |ГДЕ
		 |	ОсновныеДанные.Ссылка = &Ссылка И
		 |	Расшифровка.Ссылка = &Ссылка и
		 |	(Расшифровка.СуммаБезНДС <> 0 или Расшифровка.НДС <> 0)
		 |	и ОсновныеДанные.ПредъявленСФ = Истина ";
	КонецЕсли; 
	Если Счетчик = 0  Тогда
	    Возврат новый ТаблицаЗначений();
	КонецЕсли; 
	Запрос.Текст = ТекстЗапроса + "
	|	УПОРЯДОЧИТЬ ПО
	|	ОсновныеДанные.КлючСтроки,
	|	Расшифровка.НомерСтроки,
	|	ПорядокСобытия";
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();

	Возврат ТаблицаДокумента;

КонецФункции // ПодготовитьТаблицуРазвернутуюПоСобытиям()

// Формирует запрос и выгружает таблицу для формирования проводок по виду операции "НДС по приобретенным ценностям".
Функция ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПокупки(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ
	 |	&Организация КАК Организация,
	 |	ОсновныеДанные.Контрагент,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.СчетФактура,
	 |	ОсновныеДанные.СчетФактура.Дата КАК СчетФактураДата,
	 |	Расшифровка.ВидЦенности,
	 |	Расшифровка.ОбъектСтроительства,
	 |	Расшифровка.СчетУчетаНДС,
	 |	Расшифровка.СчетЗатрат,
	 |	Расшифровка.Субконто1,
	 |	Расшифровка.Субконто2,
	 |	Расшифровка.Субконто3,
	 |	Расшифровка.НДС,
	 |	Расшифровка.НДСОплата,
	 |	Расшифровка.НДССтроительство,
	 |	Расшифровка.НДСВведеноВЭксплуатацию,
	 |	Расшифровка.НДСВключеноВСтоимость,
	 |	Расшифровка.НДССтавка0,
	 |	Расшифровка.НДСПредъявлено,
	 |	Расшифровка.НДСПредъявлено0,
	 |	Расшифровка.НДС - Расшифровка.НДСВключеноВСтоимость - Расшифровка.НДСПредъявлено - Расшифровка.НДССтавка0 КАК НДСНаСчетУчета,
	 |	Расшифровка.НДССтавка0 - Расшифровка.НДСПредъявлено0 - Расшифровка.НДСПредъявленоНеПодтверждено0 КАК НДСНаСчет0,
	 |	ОсновныеДанные.КлючСтроки КАК КлючСтроки,
	 |	Расшифровка.НомерСтроки КАК НомерСтроки,
	 |	Расшифровка.ДокументОтгрузки
	 |ИЗ
	 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	 |ГДЕ
	 |	ОсновныеДанные.Ссылка = &Ссылка
	 |	И Расшифровка.Ссылка = &Ссылка
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	КлючСтроки,
	 |	НомерСтроки";
		 
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();

	Возврат ТаблицаДокумента;
	
КонецФункции //ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПокупки()	

// Формирует запрос и выгружает таблицу для формирования проводок по видам операций "НДС по авансам полученным" и "НДС неполученный от покупателей".
Функция ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПродажи(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	Запрос.УстановитьПараметр("Авансы0", Перечисления.ВидыЦенностей.АвансыПолученные0);
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ
	 |	&Организация КАК Организация,
	 |	ОсновныеДанные.Контрагент,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.СчетФактура,
	 |	ОсновныеДанные.СчетФактура.Дата КАК СчетФактураДата,
	 |	Расшифровка.НДС "+?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей,"- Расшифровка.НДСОплата","")+" КАК НДСНаСчетУчета,
	 |	" + ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, "ВЫБОР КОГДА Расшифровка.ВидЦенности = &Авансы0 ТОГДА Расшифровка.НДСПредъявлено0 + Расшифровка.НДСПредъявленоНеПодтверждено0 ИНАЧЕ Расшифровка.НДСОплата КОНЕЦ", "0") + " КАК НДСКВычету
	 |ИЗ
	 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	 |
	 |ГДЕ
	 |	ОсновныеДанные.Ссылка = &Ссылка И
	 |	Расшифровка.Ссылка = &Ссылка
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	ОсновныеДанные.КлючСтроки,
	 |	Расшифровка.НомерСтроки";
		 
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();

	Возврат ТаблицаДокумента;
	
КонецФункции //ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПродажи()	

// Формирует запрос и выгружает таблицу для формирования проводок по расчетам с контрагентами.
Функция ПодготовитьТаблицуПоРасчетам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ
	 |	РасчетыСКонтрагентами.Ссылка.Организация,
	 |	РасчетыСКонтрагентами.Контрагент,
	 |	РасчетыСКонтрагентами.ДоговорКонтрагента,
	 |	РасчетыСКонтрагентами.СчетФактура,
	 |	РасчетыСКонтрагентами.СчетФактура.Дата КАК СчетФактураДата,
	 |	РасчетыСКонтрагентами.ДокументОплаты,
	 |	РасчетыСКонтрагентами.ДокументОплаты КАК ДокументОплатыДата,
	 |	РасчетыСКонтрагентами.СчетУчетаРасчетовСКонтрагентом,
	 |	РасчетыСКонтрагентами.СуммаВзаиморасчетов,
	 |	РасчетыСКонтрагентами.ВалютаВзаиморасчетов,
	 |	РасчетыСКонтрагентами.ВалютнаяСуммаВзаиморасчетов,
	 |	РасчетыСКонтрагентами.СчетУчетаРасчетовСКонтрагентом.Валютный КАК СчетУчетаРасчетовСКонтрагентомВалютный,
	 |	РасчетыСКонтрагентами.РасчетыСБюджетом,
	 |	РасчетыСКонтрагентами.НомерСтроки КАК НомерСтроки,
	 |	РасчетыСКонтрагентами.Аванс КАК Аванс,
	 |	РасчетыСКонтрагентами.Сделка
	 |ИЗ
	 |	Документ.ВводНачальныхОстатковНДС.РасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	 |ГДЕ
	 |	РасчетыСКонтрагентами.Ссылка = &Ссылка
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	НомерСтроки";
		 
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаДокумента = РезультатЗапроса.Выгрузить();

	Возврат ТаблицаДокумента;
	
КонецФункции  //ПодготовитьТаблицуПоРасчетам()

// Формирует и выгружает таблицу для формирования движений по виду операции "НДС по приобретенным ценностям"
//
Функция ПодготовитьТаблицуНачальныхОстатковПокупка(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);

	ТекстЗапроса = 
	 "ВЫБРАТЬ
	 |	&Организация КАК Организация,
	 |	ОсновныеДанные.Контрагент КАК Поставщик,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	 |	ОсновныеДанные.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	 |	ОсновныеДанные.СчетФактура,
	 |	ОсновныеДанные.СчетФактура.Дата КАК СчетФактураДата,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	ОсновныеДанные.КурсВзаиморасчетов,
	 |	ОсновныеДанные.КратностьВзаиморасчетов,
	 |	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	 |	ОсновныеДанные.КлючСтроки КАК КлючСтроки,
	 |	СУММА(ОсновныеДанные.Сумма) КАК Сумма,
	 |	СУММА(ОсновныеДанные.СуммаВзаиморасчетов) КАК ВалютнаяСумма,
	 |	Расшифровка.ВидЦенности,
	 |	Расшифровка.Номенклатура,
	 |	Расшифровка.СтавкаНДС,
	 |	Расшифровка.СчетУчетаНДС,
	 |	Расшифровка.СчетЗатрат КАК СчетУчетаЦенности,
	 |	Расшифровка.ОбъектСтроительства КАК Объект,
	 |	Расшифровка.ДокументОплаты,
	 |	Расшифровка.НеВлияетНаВычет,
	 |	Расшифровка.ДокументОплаты.Дата КАК ДокументОплатыДата,
	 |	СУММА(Расшифровка.НДС) КАК НДС,
	 |	СУММА(Расшифровка.НДСОплата) КАК НДСОплата,
	 |	СУММА(Расшифровка.НДССтроительство) КАК НДССтроительство,
	 |	СУММА(Расшифровка.НДСВведеноВЭксплуатацию) КАК НДСВведеноВЭксплуатацию,
	 |	СУММА(Расшифровка.НДСВключеноВСтоимость) КАК НДСВключеноВСтоимость,
	 |	СУММА(Расшифровка.НДССтавка0) КАК НДССтавка0,
	 |	СУММА(Расшифровка.НДСПредъявлено) КАК НДСПредъявлено,
	 |	СУММА(Расшифровка.НДСПредъявлено0) КАК НДСПредъявлено0,
	 |	СУММА(Расшифровка.НДСПредъявленоНеПодтверждено0) КАК НДСПредъявленоНеПодтверждено0,
	 |	СУММА(Расшифровка.НДСПодтверждено0) КАК НДСПодтверждено0,
	 |	СУММА(Расшифровка.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	 |	СУММА(Расшифровка.НДС - Расшифровка.НДСВключеноВСтоимость - Расшифровка.НДСПредъявлено - Расшифровка.НДССтавка0) КАК НДСНаСчетУчета,
	 |	СУММА(Расшифровка.НДССтавка0 - Расшифровка.НДСПредъявлено0) КАК НДСНаСчет0,
	 |	СУММА(ВЫБОР
	 |			КОГДА Расшифровка.НДССтроительство = 0
	 |				ТОГДА 0
	 |			КОГДА Расшифровка.НДСПредъявлено = 0
	 |					ИЛИ Расшифровка.НДС = 0
	 |				ТОГДА Расшифровка.НДССтроительство
	 |			КОГДА Расшифровка.НДСВведеноВЭксплуатацию = 0
	 |				ТОГДА ВЫБОР
	 |						КОГДА -Расшифровка.НДС - Расшифровка.НДССтроительство - Расшифровка.НДСВключеноВСтоимость - Расшифровка.НДСПредъявлено - Расшифровка.НДССтавка0 > Расшифровка.НДССтроительство
	 |							ТОГДА Расшифровка.НДССтроительство
	 |						ИНАЧЕ -Расшифровка.НДС - Расшифровка.НДССтроительство - Расшифровка.НДСВключеноВСтоимость - Расшифровка.НДСПредъявлено - Расшифровка.НДССтавка0
	 |					КОНЕЦ
	 |			ИНАЧЕ Расшифровка.НДССтроительство
	 |		КОНЕЦ) КАК НДСНаСчетСтроительства,
	 |	ВЫБОР
	 |		КОГДА Расшифровка.НДССтроительство > 0
	 |				И Расшифровка.НДС > 0
	 |				И Расшифровка.НДСПредъявлено > 0
	 |				И Расшифровка.НДСВведеноВЭксплуатацию > 0
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ КАК РаспределитьВычетПоСтроительству,
	 |	Расшифровка.ДокументОтгрузки,
	 |	Расшифровка.ДокументОтгрузки.Дата КАК ДокументОтгрузкиДата,
	 |	СУММА(Расшифровка.СуммаБезНДС) КАК СуммаБезНДС,
	 |	СУММА(Расшифровка.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	 |	СУММА(Расшифровка.СуммаБезНДССтроительство) КАК СуммаБезНДССтроительство,
	 |	СУММА(Расшифровка.СуммаБезНДСВведеноВЭксплуатацию) КАК СуммаБезНДСВведеноВЭксплуатацию,
	 |	СУММА(Расшифровка.СуммаБезНДСВключеноВСтоимость) КАК СуммаБезНДСВключеноВСтоимость,
	 |	СУММА(Расшифровка.СуммаБезНДССтавка0) КАК СуммаБезНДССтавка0,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявлено) КАК СуммаБезНДСПредъявлено,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявлено0) КАК СуммаБезНДСПредъявлено0,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявленоНеПодтверждено0) КАК СуммаБезНДСПредъявленоНеПодтверждено0,
	 |	СУММА(Расшифровка.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	 |	СУММА(Расшифровка.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0
	 |ИЗ
	 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	 |ГДЕ
	 |	ОсновныеДанные.Ссылка = &Ссылка
	 |	И Расшифровка.Ссылка = &Ссылка
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	Расшифровка.ДокументОтгрузки,
	 |	Расшифровка.ВидЦенности,
	 |	ОсновныеДанные.Контрагент,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.ДоговорКонтрагента.УчетАгентскогоНДС,
	 |	ОсновныеДанные.ДоговорКонтрагента.ВидДоговора,
	 |	ОсновныеДанные.СчетФактура,
	 |	ОсновныеДанные.СчетФактура.Дата,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	ОсновныеДанные.ВалютаВзаиморасчетов,
	 |	ОсновныеДанные.КурсВзаиморасчетов,
	 |	ОсновныеДанные.КратностьВзаиморасчетов,
	 |	ОсновныеДанные.Ссылка.Дата,
	 |	ОсновныеДанные.КлючСтроки,
	 |	Расшифровка.СчетУчетаНДС,
	 |	Расшифровка.СчетЗатрат,
	 |	Расшифровка.СтавкаНДС,
	 |	Расшифровка.Номенклатура,
	 |	Расшифровка.ОбъектСтроительства,
	 |	Расшифровка.ДокументОплаты,
	 |	Расшифровка.НеВлияетНаВычет,
	 |	Расшифровка.ДокументОплаты.Дата,
	 |	ВЫБОР
	 |		КОГДА Расшифровка.НДССтроительство > 0
	 |				И Расшифровка.НДС > 0
	 |				И Расшифровка.НДСПредъявлено > 0
	 |				И Расшифровка.НДСВведеноВЭксплуатацию > 0
	 |			ТОГДА ИСТИНА
	 |		ИНАЧЕ ЛОЖЬ
	 |	КОНЕЦ,
	 |	Расшифровка.ДокументОтгрузки.Дата
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	КлючСтроки";
		 
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует и выгружает таблицу для формирования движений по виду операции "НДС неоплаченный покупателями"
//
Функция ПодготовитьТаблицуНачальныхОстатковПродажа(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ
	 |	&Организация КАК Организация,
	 |	ОсновныеДанные.Контрагент КАК Покупатель,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	 |	ОсновныеДанные.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	 |	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	 |	ОсновныеДанные.СчетФактура,
	 |	ОсновныеДанные.СчетФактура.Дата КАК СчетФактураДата,
	 |	ОсновныеДанные.КлючСтроки КАК КлючСтроки,
	 |	ОсновныеДанные.ВалютаВзаиморасчетов КАК ВалютаРасчетов,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	ОсновныеДанные.КурсВзаиморасчетов,
	 |	ОсновныеДанные.КратностьВзаиморасчетов,
	 |	СУММА(ОсновныеДанные.Сумма) КАК Сумма,
	 |	СУММА(ОсновныеДанные.СуммаВзаиморасчетов) КАК ВалютнаяСумма,
	 |	Расшифровка.ВидЦенности,
	 |	Расшифровка.СтавкаНДС,
	 |	Расшифровка.СчетУчетаНДС,
	 |	Расшифровка.Номенклатура,
	 |	Расшифровка.ОбъектСтроительства КАК Объект,
	 |	Расшифровка.ДокументОтгрузки,
	 |	Расшифровка.ДокументОтгрузки.Дата КАК ДокументОтгрузкиДата,
	 |	Расшифровка.ДокументОплаты,
	 |	Расшифровка.ДокументОплаты.Дата КАК ДокументОплатыДата,
	 |	СУММА(Расшифровка.СуммаБезНДС) КАК СуммаБезНДС,
	 |	СУММА(Расшифровка.НДС) КАК НДС,
	 |	СУММА(Расшифровка.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	 |	СУММА(Расшифровка.НДСОплата) КАК НДСОплата,
	 |	СУММА(Расшифровка.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	 |	СУММА(Расшифровка.НДСПодтверждено0) КАК НДСПодтверждено0,
	 |	СУММА(Расшифровка.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	 |	СУММА(Расшифровка.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	 |	Расшифровка.СтавкаНДСНеПодтверждена0
	 |ИЗ
	 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	 |ГДЕ
	 |	ОсновныеДанные.Ссылка = &Ссылка
	 |	И Расшифровка.Ссылка = &Ссылка
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ОсновныеДанные.Контрагент,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.СчетФактура,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	ОсновныеДанные.ВалютаВзаиморасчетов,
	 |	ОсновныеДанные.КурсВзаиморасчетов,
	 |	ОсновныеДанные.КратностьВзаиморасчетов,
	 |	ОсновныеДанные.Ссылка.Дата,
	 |	ОсновныеДанные.КлючСтроки,
	 |	Расшифровка.ВидЦенности,
	 |	Расшифровка.СчетУчетаНДС,
	 |	Расшифровка.СтавкаНДС,
	 |	Расшифровка.Номенклатура,
	 |	Расшифровка.ОбъектСтроительства,
	 |	Расшифровка.ДокументОплаты,
	 |	Расшифровка.ДокументОтгрузки,
	 |	Расшифровка.СтавкаНДСНеПодтверждена0,
	 |	ОсновныеДанные.ДоговорКонтрагента.ВидДоговора,
	 |	ОсновныеДанные.ДоговорКонтрагента.УчетАгентскогоНДС,
	 |	ОсновныеДанные.СчетФактура.Дата,
	 |	Расшифровка.ДокументОплаты.Дата,
	 |	Расшифровка.ДокументОтгрузки.Дата
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	КлючСтроки";
		 
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует и выгружает таблицу для формирования движений по виду операции "НДС по авансам полученным"
//
Функция ПодготовитьТаблицуНачальныхОстатковАвансы(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ
	 |	&Организация КАК Организация,
	 |	ОсновныеДанные.Контрагент КАК Покупатель,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	 |	ОсновныеДанные.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	 |	ОсновныеДанные.СчетФактура КАК СчетФактура,
	 |	ОсновныеДанные.СчетФактура.Дата КАК СчетФактураДата,
	 |	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	ОсновныеДанные.КлючСтроки КАК КлючСтроки,
	 |	ОсновныеДанные.ВалютаАванса,
	 |	Расшифровка.ВидЦенности,
	 |	Расшифровка.СтавкаНДС,
	 |	Расшифровка.СчетУчетаНДС,
	 |	Расшифровка.ДокументОтгрузки,
	 |	Расшифровка.ДокументОтгрузки.Дата КАК ДатаОплаты,
	 |	Расшифровка.ДокументОтгрузки.Дата КАК ДокументОтгрузкиДата,
	 |	Расшифровка.ДокументОплаты.Дата КАК ДокументОплатыДата,
	 |	СУММА(Расшифровка.СуммаБезНДС) КАК СуммаБезНДС,
	 |	СУММА(Расшифровка.НДС) КАК НДС,
	 |	СУММА(Расшифровка.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	 |	СУММА(Расшифровка.НДСОплата) КАК НДСОплата,
	 |	СУММА(Расшифровка.СуммаБезНДСПодтверждено0) КАК СуммаБезНДСПодтверждено0,
	 |	СУММА(Расшифровка.НДСПодтверждено0) КАК НДСПодтверждено0,
	 |	СУММА(Расшифровка.СуммаБезНДСНеПодтверждено0) КАК СуммаБезНДСНеПодтверждено0,
	 |	СУММА(Расшифровка.НДСНеПодтверждено0) КАК НДСНеПодтверждено0,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявлено) КАК СуммаБезНДСПредъявлено,
	 |	СУММА(Расшифровка.НДСПредъявлено) КАК НДСПредъявлено,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявлено0) КАК СуммаБезНДСПредъявлено0,
	 |	СУММА(Расшифровка.НДСПредъявлено0) КАК НДСПредъявлено0,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявленоНеПодтверждено0) КАК СуммаБезНДСПредъявленоНеПодтверждено0,
	 |	СУММА(Расшифровка.НДСПредъявленоНеПодтверждено0) КАК НДСПредъявленоНеПодтверждено0,
	 |	СУММА(Расшифровка.ВалютнаяСуммаСНДС) КАК ВалютнаяСуммаСНДС,
	 |	СУММА(ВЫБОР
	 |			КОГДА Расшифровка.ВалютнаяСуммаСНДС = 0
	 |				ТОГДА 1
	 |			ИНАЧЕ (Расшифровка.СуммаБезНДС + Расшифровка.НДС) / Расшифровка.ВалютнаяСуммаСНДС
	 |		КОНЕЦ) КАК КурсАванса
	 |ИЗ
	 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	 |ГДЕ
	 |	ОсновныеДанные.Ссылка = &Ссылка
	 |	И Расшифровка.Ссылка = &Ссылка
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	Расшифровка.ВидЦенности,
	 |	ОсновныеДанные.Ссылка.Дата,
	 |	ОсновныеДанные.Контрагент,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.ДоговорКонтрагента.ВидДоговора,
	 |	ОсновныеДанные.ДоговорКонтрагента.УчетАгентскогоНДС,
	 |	ОсновныеДанные.СчетФактура,
	 |	ОсновныеДанные.СчетФактура.Дата,
	 |	ОсновныеДанные.КлючСтроки,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	ОсновныеДанные.ВалютаВзаиморасчетов,
	 |	ОсновныеДанные.КурсВзаиморасчетов,
	 |	ОсновныеДанные.КратностьВзаиморасчетов,
	 |	ОсновныеДанные.ВалютаАванса,
	 |	Расшифровка.СчетУчетаНДС,
	 |	Расшифровка.СтавкаНДС,
	 |	Расшифровка.ВалютнаяСуммаСНДС,
	 |	Расшифровка.ДокументОтгрузки,
	 |	Расшифровка.ДокументОтгрузки.Дата,
	 |	Расшифровка.ДокументОплаты.Дата,
	 |	Расшифровка.ДокументОтгрузки.Дата
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	КлючСтроки";
		 
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Формирует и выгружает таблицу для формирования движений по виду операции "НДС по авансам выданным"
//
Функция ПодготовитьТаблицуНачальныхОстатковАвансыВыданные(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",	Ссылка);
	
	ТекстЗапроса = 
	 "ВЫБРАТЬ
	 |	&Организация КАК Организация,
	 |	ОсновныеДанные.Контрагент КАК Поставщик,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	 |	ОсновныеДанные.ДоговорКонтрагента.УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	 |	ОсновныеДанные.СчетФактура КАК СчетФактура,
	 |	ОсновныеДанные.СчетФактура.Дата КАК СчетФактураДата,
	 |	ОсновныеДанные.Ссылка.Дата КАК ДатаСобытия,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	ОсновныеДанные.КлючСтроки КАК КлючСтроки,
	 |	Расшифровка.ВидЦенности,
	 |	Расшифровка.СтавкаНДС,
	 |	СУММА(Расшифровка.СуммаБезНДС) КАК СуммаБезНДС,
	 |	СУММА(Расшифровка.НДС) КАК НДС,
	 |	СУММА(Расшифровка.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
	 |	СУММА(Расшифровка.НДСОплата) КАК НДСОплата,
	 |	СУММА(Расшифровка.СуммаБезНДСПредъявлено) КАК СуммаБезНДСПредъявлено,
	 |	СУММА(Расшифровка.НДСПредъявлено) КАК НДСПредъявлено
	 |ИЗ
	 |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ОсновныеДанные
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводНачальныхОстатковНДС.ДополнительныеСведения КАК Расшифровка
	 |		ПО ОсновныеДанные.КлючСтроки = Расшифровка.КлючСтроки
	 |ГДЕ
	 |	ОсновныеДанные.Ссылка = &Ссылка
	 |	И Расшифровка.Ссылка = &Ссылка
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	Расшифровка.ВидЦенности,
	 |	ОсновныеДанные.Ссылка.Дата,
	 |	ОсновныеДанные.Контрагент,
	 |	ОсновныеДанные.ДоговорКонтрагента,
	 |	ОсновныеДанные.ДоговорКонтрагента.ВидДоговора,
	 |	ОсновныеДанные.ДоговорКонтрагента.УчетАгентскогоНДС,
	 |	ОсновныеДанные.СчетФактура,
	 |	ОсновныеДанные.СчетФактура.Дата,
	 |	ОсновныеДанные.КлючСтроки,
	 |	ОсновныеДанные.ДатаПлатежноРасчетногоДокумента,
	 |	Расшифровка.СтавкаНДС
	 |
	 |УПОРЯДОЧИТЬ ПО
	 |	КлючСтроки";
		 
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получение учетной политики на дату. При повторном получении считывает ранее полученную учетную политику.
//
Функция ПолучитьПараметрыУчетнойПолитикиЛокально(КонДата, Отказ, ОбрабатываемаяОрганизация, СчетФактура = Неопределено)
	
	Если мУчетнаяПолитикаПоДатам = Неопределено Тогда 
		мУчетнаяПолитикаПоДатам = Новый Соответствие;
	КонецЕсли;
	
	УчетнаяПолитика = мУчетнаяПолитикаПоДатам[?(Не ЗначениеЗаполнено(СчетФактура), НачалоМесяца(КонДата), СчетФактура)];
	
	Если УчетнаяПолитика = Неопределено Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(КонДата, ОбрабатываемаяОрганизация);
		Если Не ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("При формировании движений по НДС " + ?(Не ЗначениеЗаполнено(СчетФактура), "на " + Формат(КонДата, "ДФ=dd.MM.yyyy"), "для документа <" + Строка(СчетФактура)+">")+ " 
			| используется момент определения налоговой базы ""по отгрузке"".", , , СтатусСообщения.Информация); 
			УчетнаяПолитика = Новый Структура("МоментОпределенияНалоговойБазыНДС", Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
			мУчетнаяПолитикаПоДатам.Вставить(?(Не ЗначениеЗаполнено(СчетФактура), НачалоМесяца(КонДата), СчетФактура), УчетнаяПолитика);
		Иначе
			мУчетнаяПолитикаПоДатам.Вставить(?(Не ЗначениеЗаполнено(СчетФактура), НачалоМесяца(КонДата), СчетФактура), УчетнаяПолитика);
		КонецЕсли;
	КонецЕсли; 
	
	Возврат УчетнаяПолитика;

КонецФункции // ПолучитьПараметрыУчетнойПолитикиЛокально()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА ПО РЕГИСТРАМ

// Процедура формирования движений по регистрам.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДокумента, ТаблицаРасчетов, ТаблицаПоДвижениям, Отказ,Заголовок)

	Если ТаблицаДокумента.Количество() = 0 И ТаблицаРасчетов.Количество() = 0 И ТаблицаПоДвижениям.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		
		СформироватьПроводкиПоВводуОстатковНДСПокупателей(СтруктураШапкиДокумента, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);

		СформироватьДвиженияВводОстатковПоРегистрамРеализацииВУЕ(СтруктураШапкиДокумента, ТаблицаРасчетов, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		СформироватьПроводкиПоВводуОстатковНДСПокупателей(СтруктураШапкиДокумента, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);		
		
		СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);		
		
		СформироватьДвиженияВводОстатковПоРегистрамРеализацииВУЕ(СтруктураШапкиДокумента, ТаблицаРасчетов, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		
		СформироватьПроводкиПоВводуОстатковНДСАвансыВыданные(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);		
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);		
		
		СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		
		СформироватьПроводкиПоВводуОстатковНДСПоставщиков(СтруктураШапкиДокумента,  Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСВключенныйВСтоимость(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСпоОСиНМА(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);	
		
		СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегистрамПриобретениеВУЕ(СтруктураШапкиДокумента, ТаблицаРасчетов, Отказ);
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		
		СформироватьПроводкиПоВводуОстатковНДСПоставщиков(СтруктураШапкиДокумента,  Отказ, Заголовок);
	
		СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСпоОСиНМА(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);	
		
		СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
		СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтразитьРасчетыСКонтрагентами Тогда
		СформироватьПроводкиПоРасчетамСКонтрагентами(СтруктураШапкиДокумента, ТаблицаРасчетов, Отказ, Заголовок)
	КонецЕсли;
	
	РегистрацияСчетовФактур(СтруктураШапкиДокумента,Отказ,Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирования проводок по входящему НДС 
//
Процедура СформироватьПроводкиПоВводуОстатковНДСПоставщиков(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	ТаблицаДляПроводок = ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПокупки(СтруктураШапкиДокумента, Отказ,Заголовок);
	
	Счет000 = ПланыСчетов.Хозрасчетный.Вспомогательный;
	Для Каждого СтрокаДок Из ТаблицаДляПроводок Цикл
		
		Если СтрокаДок.НДСНаСчет0<>0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Нач. ост.: НДС полученный, предп. 0%";
			
			Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДок.СчетФактура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРеализации", СтрокаДок.ДокументОтгрузки);

			Проводка.СчетКт       = Счет000;
			Проводка.Сумма        = СтрокаДок.НДСНаСчет0;
			
		КонецЕсли; 
			
		Если СтрокаДок.НДСНаСчетУчета <> 0 Тогда
		
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = ?(СтрокаДок.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами, 
									"Нач. ост.: НДС по строительству хоз. способом",
									"Нач. ост.: НДС полученный");
			
			Проводка.СчетДт       = СтрокаДок.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФПолученные", СтрокаДок.СчетФактура);

			Проводка.СчетКт       = Счет000;
			Проводка.Сумма        = СтрокаДок.НДСНаСчетУчета;
		КонецЕсли; 
			
	КонецЦикла;
	
КонецПроцедуры // СформироватьПроводкиПоВводуОстатковНДСПоставщиков()

// Процедура формирования проводок по неоплаченному покупателями НДС 
//
Процедура СформироватьПроводкиПоВводуОстатковНДСПокупателей(СтруктураШапкиДокумента, Отказ,Заголовок)
	
	ТаблицаДляПроводок = ПодготовитьТаблицуСведенийДляФормированияПроводокНДСПродажи(СтруктураШапкиДокумента, Отказ,Заголовок);
	
	Счет000 = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	Для Каждого СтрокаДок Из ТаблицаДляПроводок Цикл
		Если СтрокаДок.НДСНаСчетУчета=0 Тогда
		    //Нет необходимости формировать проводку с 0 суммой.
			Продолжить;
		КонецЕсли; 
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		    Проводка.Содержание   = "Нач. ост.: НДС по авансам и предопл.";
			Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаДок.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СФВыданные", СтрокаДок.СчетФактура);
			
			Проводка.СчетКт       = Счет000;
			
			Если СтрокаДок.НДСКВычету <> 0 Тогда
				
				Проводка2 = Движения.Хозрасчетный.Добавить();
				
				Проводка2.Период       = СтруктураШапкиДокумента.Дата;
				Проводка2.Организация  = СтруктураШапкиДокумента.Организация;
				
				Проводка2.СчетДт       = Счет000;
				
				Проводка2.Содержание   = "Нач. ост.: НДС по авансам и предопл.";
				Проводка2.СчетКт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;

				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "Контрагенты", СтрокаДок.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт, Проводка2.СубконтоКт, "СФВыданные", СтрокаДок.СчетФактура);
				
				Проводка2.Сумма = СтрокаДок.НДСКВычету;
				
			КонецЕсли;
			Проводка.Сумма        = СтрокаДок.НДСНаСчетУчета;
			
		Иначе
			УчетнаяПолитикаНал = ПолучитьПараметрыУчетнойПолитикиЛокально(?(НЕ ЗначениеЗаполнено(СтрокаДок.СчетФактура), СтруктураШапкиДокумента.Дата, СтрокаДок.СчетФактураДата), Отказ, СтруктураШапкиДокумента.Организация,СтрокаДок.СчетФактура);
			МоментОпределенияНалоговойБазыНДС = ?(УчетнаяПолитикаНал.Свойство("МоментОпределенияНалоговойБазыНДС"), УчетнаяПолитикаНал.МоментОпределенияНалоговойБазыНДС, Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке);
			
			Если МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			    Проводка.Содержание   = "Нач. ост.: НДС неоплаченный покупателем";
				Проводка.СчетДт       =  Счет000;
				
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;

				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаДок.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФВыданные",  СтрокаДок.СчетФактура);
				Проводка.Сумма        = СтрокаДок.НДСНаСчетУчета;
			КонецЕсли;
		КонецЕсли; 

			
	КонецЦикла;
	
КонецПроцедуры // СформироватьПроводкиПоВводуОстатковНДСПокупателей()

// Процедура формирования проводок по выданным авансам 
//
Процедура СформироватьПроводкиПоВводуОстатковНДСАвансыВыданные(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок)
	
	Счет000 = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	Для Каждого СтрокаДок Из ТаблицаПоДвижениям Цикл
		
		Если СтрокаДок.НДСПредъявлено <> 0 Тогда
		
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Нач. ост.: НДС по авансам и предопл.";
			Проводка.СчетДт       = Счет000;
			
			Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаДок.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СФПолученные", СтрокаДок.СчетФактура);
			
			Проводка.Сумма        = СтрокаДок.НДСПредъявлено;
		КонецЕсли;
		
		Если СтрокаДок.НДСОплата <> 0 Тогда
			
			Проводка2 = Движения.Хозрасчетный.Добавить();
			
			Проводка2.Период       = СтруктураШапкиДокумента.Дата;
			Проводка2.Организация  = СтруктураШапкиДокумента.Организация;
			
			Проводка2.Содержание   = "Нач. ост.: НДС по авансам и предопл.";
			Проводка2.СчетДт       = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным;

			БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт, Проводка2.СубконтоДт, "Контрагенты", СтрокаДок.Поставщик);
			БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт, Проводка2.СубконтоДт, "СФПолученные", СтрокаДок.СчетФактура);
			
			Проводка2.СчетКт       = Счет000;
			
			Проводка2.Сумма = СтрокаДок.НДСОплата;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
// Процедура формирования проводок по расчетам с контрагентами
Процедура СформироватьПроводкиПоРасчетамСКонтрагентами(СтруктураШапкиДокумента, ТаблицаРасчетов, Отказ, Заголовок)
	Если ТаблицаРасчетов.Количество()=0 Или 
		Не СтруктураШапкиДокумента.ОтразитьРасчетыСКонтрагентами Тогда
		Возврат;
	КонецЕсли;
	
	Счет000 = ПланыСчетов.Хозрасчетный.Вспомогательный;
	
	Для каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл
		
		Если СтрокаТаблицы.РасчетыСБюджетом Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
			
			Проводка.Содержание   = "Нач. ост.: расчеты с покупателем";
			
			Проводка.СчетДт       = СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    СтрокаТаблицы.ДоговорКонтрагента);
			
			Если СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентомВалютный Тогда
			     Проводка.ВалютаДт = СтрокаТаблицы.ВалютаВзаиморасчетов;
			     Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
			КонецЕсли; 
			
			Проводка.СчетКт       = Счет000;
			
		Иначе
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		    	Проводка.Содержание   = "Нач. ост.: расчеты по авансам и предопл.";
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
				Проводка.Содержание   = "Нач. ост.: расчеты с поставщиком";
			КонецЕсли;
			
			Если СтрокаТаблицы.Аванс И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
				Проводка.СчетКт       =  Счет000;
				
				Проводка.СчетДт       =  СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры",    СтрокаТаблицы.ДоговорКонтрагента);
				
				Если СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентомВалютный Тогда
				     Проводка.ВалютаДт = СтрокаТаблицы.ВалютаВзаиморасчетов;
				     Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
				КонецЕсли; 
			Иначе
				Проводка.СчетДт       =  Счет000;
				
				Проводка.СчетКт       =  СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры",    СтрокаТаблицы.ДоговорКонтрагента);
				
				Если СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентомВалютный Тогда
				    Проводка.ВалютаКт = СтрокаТаблицы.ВалютаВзаиморасчетов;
				    Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.ВалютнаяСуммаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;			 
			
		КонецЕсли; 
		Проводка.Сумма        = СтрокаТаблицы.СуммаВзаиморасчетов;
		
	КонецЦикла; 
		
КонецПроцедуры

// Процедура формирования движения по НДС предъявленному постащиком
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ, Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСПредъявленный = Движения.НДСПредъявленный;
	
	ТаблицаДвиженийНДСПредъявленный = ДвиженияНДСПредъявленный.Выгрузить();
	// НДС предъявленный поставщиком
	ТаблицаДвиженийНДСПредъявленный.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСпредъявленный);
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСпредъявленный Цикл
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
			СтрокаДвижения.Поставщик = Неопределено;
		КонецЕсли;
		Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
			СтрокаДвижения.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
		СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
	
	Если Не ТаблицаДвиженийНДСПредъявленный.Количество() = 0 Тогда
		
		ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
		ДвиженияНДСПредъявленный.ВыполнитьПриход();
		
	КонецЕсли;	
	
	// НДС включенный в стоимость
	Если Не (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления
		Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным) Тогда
		ТаблицаДвиженийНДСПредъявленный.Очистить();
		
		ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость");
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСпредъявленный);
		ТаблицаДвиженийНДСПредъявленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НДСВключенВСтоимость, "Событие");
		
		ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость", Ложь);
		
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
		
		Если Не Отказ Тогда
			
			ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
			ДвиженияНДСПредъявленный.ВыполнитьРасход();
			
		КонецЕсли;	
	КонецЕсли;
	
	// НДС принятый к вычету
	ТаблицаДвиженийНДСПредъявленный.Очистить();

	ТаблицаКВычету = ТаблицаПоДвижениям.Скопировать();
	КолонкиГруппировки = "Организация, СчетФактура, ВидЦенности, СтавкаНДС, Поставщик, ДатаСобытия";
	КолонкиСуммирования = "СуммаБезНДСПредъявлено, НДСПредъявлено";
	Если Не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		КолонкиГруппировки = КолонкиГруппировки + ", СчетУчетаНДС";
		КолонкиСуммирования = КолонкиСуммирования + ", СуммаБезНДСПредъявлено0, НДСПредъявлено0, 
							|СуммаБезНДСПредъявленоНеПодтверждено0, НДСПредъявленоНеПодтверждено0";
	Иначе
		КолонкиГруппировки = КолонкиГруппировки + ", ДоговорКонтрагента";					
	КонецЕсли;
	ТаблицаКВычету.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
							
	// НДС принятый к вычету						
	ТаблицаКВычету.Колонки.СуммаБезНДСПредъявлено.Имя = "СуммаБезНДС";
	ТаблицаКВычету.Колонки.НДСПредъявлено.Имя = "НДС";
	ТаблицаКВычету.Колонки.Добавить("Событие");
	ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
	
	Если Не (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления 
		Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным) Тогда
		// НДС по ставке 0% принятый к вычету
		ТаблицаКВычету.Колонки.Удалить("СуммаБезНДС");
		ТаблицаКВычету.Колонки.Удалить("НДС");
		ТаблицаКВычету.Колонки.СуммаБезНДСПредъявлено0.Имя = "СуммаБезНДС";
		ТаблицаКВычету.Колонки.НДСПредъявлено0.Имя = "НДС";
		ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
		
		// НДС по ставке 0% (не подтверждено) принятый к вычету
		ТаблицаКВычету.Колонки.Удалить("СуммаБезНДС");
		ТаблицаКВычету.Колонки.Удалить("НДС");
		ТаблицаКВычету.Колонки.СуммаБезНДСПредъявленоНеПодтверждено0.Имя = "СуммаБезНДС";
		ТаблицаКВычету.Колонки.НДСПредъявленоНеПодтверждено0.Имя = "НДС";
		ТаблицаКВычету.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКВычету, ТаблицаДвиженийНДСПредъявленный);
	КонецЕсли;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленный);
	
	Если Не ТаблицаДвиженийНДСПредъявленный.Количество() = 0 Тогда
		
		ДвиженияНДСПредъявленный.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленный.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленный;
		ДвиженияНДСПредъявленный.ВыполнитьРасход();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС включенному в стоимость
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСВключенныйВСтоимость(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСВключенныйВСтоимость = Движения.НДСВключенныйВСтоимость;
	
	ТаблицаДвиженийНДСВключенныйВСтоимость = ДвиженияНДСВключенныйВСтоимость.Выгрузить();
	ТаблицаДвиженийНДСВключенныйВСтоимость.Очистить();
	
	ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСВключенныйВСтоимость);
	
	ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, "СуммаБезНДСВключеноВСтоимость", "НДСВключеноВСтоимость", Ложь);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСВключенныйВСтоимость);
	
	Если Не ТаблицаДвиженийНДСВключенныйВСтоимость.Количество() = 0 Тогда
		
		ДвиженияНДСВключенныйВСтоимость.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСВключенныйВСтоимость.мТаблицаДвижений = ТаблицаДвиженийНДСВключенныйВСтоимость;
		ДвиженияНДСВключенныйВСтоимость.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС расчеты с поставщиками
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРасчетыСПоставщиками(СтруктураШапкиДокумента, ТаблицаПоДвижениям, ТаблицаРасчетов, Отказ,Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам = Движения.НДСУчетРаспределенныхОплатПоставщикам;
	
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам = НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам.Выгрузить();
	ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Очистить();

	СтрокиРасчетов = ТаблицаРасчетов.НайтиСтроки(Новый Структура("РасчетыСБюджетом", Истина));
	
	Для Каждого СтрокаТаблицы из СтрокиРасчетов Цикл
		
		СтрокаДвижения = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Добавить();
		СтрокаДвижения.Организация = СтрокаТаблицы.Организация;
		СтрокаДвижения.СчетФактура = СтрокаТаблицы.СчетФактура;
		СтрокаДвижения.РасчетыСБюджетом = Истина;
		СтрокаДвижения.РаспределеннаяСумма = СтрокаТаблицы.СуммаВзаиморасчетов;
		СтрокаДвижения.ДатаСобытия = СтрокаТаблицы.СчетФактураДата;
																		
	КонецЦикла;
	
	// Удаление строка с пустой распределенной суммой
	Счетчик = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если (ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам[Счетчик].РаспределеннаяСумма = 0) Тогда
			ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Удалить(ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам[Счетчик]);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам.Количество() = 0 Тогда
		
		НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам.мПериод = СтруктураШапкиДокумента.Дата;
		НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам.мТаблицаДвижений = ТаблицаДвижений_НДСУчетРаспределенныхОплатПоставщикам;
		НаборЗаписей_НДСУчетРаспределенныхОплатПоставщикам.ВыполнитьПриход();
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура формирования движения по НДС по ОС и НМА
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСпоОСиНМА(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПоОСиНМА = Движения.НДСпоОСиНМА;
	ТаблицаДвиженийНДСПоОСиНМА = ДвиженияПоОСиНМА.Выгрузить();
	
	// Движение по объектам строительства ожидающим принятия к учету
	ТаблицаДвиженийНДСПоОСиНМА.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Объект) Тогда
			
			Если ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				Состояние = Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОбъектаСтроительства;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.НематериальныеАктивы") 
				Или ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.Номенклатура") Тогда
				Состояние = Перечисления.НДССостоянияОСНМА.ОжидаетсяПринятиеКУчетуОС;
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
				Состояние = Перечисления.НДССостоянияОСНМА.ОжидаетсяВводВЭксплуатацию;
			КонецЕсли;
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСПоОСиНМА.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.Состояние	= Состояние;
				СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
			КонецЕсли;
			// Ценность отнесена на объект строительства
			Если СтрокаТаблицы.СуммаБезНДССтроительство <> 0 ИЛИ СтрокаТаблицы.НДССтроительство <> 0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСПоОСиНМА.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС 	= СтрокаТаблицы.СуммаБезНДССтроительство;
				СтрокаДвижения.НДС			= СтрокаТаблицы.НДССтроительство;
				СтрокаДвижения.Состояние	= Состояние;
				Если ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда				
					СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПереданНДСНаСтроительство;
				Иначе
					СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ПредъявленНДСПоставщиком;
				КонецЕсли;
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Приход;
			КонецЕсли;
			//Объект строительства введен в эксплуатацию
			Если СтрокаТаблицы.СуммаБезНДСВведеноВЭксплуатацию <> 0 ИЛИ СтрокаТаблицы.НДСВведеноВЭксплуатацию <> 0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСПоОСиНМА.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС 	= СтрокаТаблицы.СуммаБезНДСВведеноВЭксплуатацию;
				СтрокаДвижения.НДС			= СтрокаТаблицы.НДСВведеноВЭксплуатацию;
				СтрокаДвижения.Состояние	= Состояние;
				СтрокаДвижения.Событие		= Перечисления.СобытияПоНДСПокупки.ОСВведеноВЭксплуатацию;
				СтрокаДвижения.ВидДвижения	= ВидДвиженияНакопления.Расход;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПоОСиНМА);
	Если Не ТаблицаДвиженийНДСПоОСиНМА.Количество() = 0 Тогда
		
		ДвиженияПоОСиНМА.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияПоОСиНМА.мТаблицаДвижений = ТаблицаДвиженийНДСПоОСиНМА;
		ДвиженияПоОСиНМА.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС предъявленный, реализация 0%
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСПредъявленныйРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСПредъявленныйРеализация0 = Движения.НДСПредъявленныйРеализация0;
	ТаблицаДвиженийНДСПредъявленныйРеализация0 = ДвиженияНДСПредъявленныйРеализация0.Выгрузить(); 
	
	// Движение по НДС по ставке 0% ожидается подтверждение
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
			
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		СтрокиКУдалению = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			Если СтрокаТаблицы.ВидЦенности <> Перечисления.ВидыЦенностей.АвансыПолученные0 Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЕсли;
		
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			СтрокаТаблицы.СуммаБезНДС 	= СтрокаТаблицы.СуммаБезНДССтавка0;
			СтрокаТаблицы.НДС			= СтрокаТаблицы.НДССтавка0;
			СтрокаТаблицы.ДатаСобытия 	= ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
											СтруктураШапкиДокумента.Дата, 
											СтрокаТаблицы.ДокументОтгрузки.Дата);
		КонецЦикла;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным  Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСОплата;
			СтрокаТаблицы.НДС = СтрокаТаблицы.НДСОплата;
			СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
											СтруктураШапкиДокумента.Дата, 
											СтрокаТаблицы.ДокументОтгрузки.Дата);
		КонецЦикла;
	КонецЕсли;							
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0, "Событие");
		
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
	Если Не ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество() = 0 Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
			
	КонецЕсли;
		
	// Движение по НДС по ставке 0% подтверждена
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
		
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
										СтруктураШапкиДокумента.Дата, 
										СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПодтвержденаСтавка0, "Событие");
		
	Если Не ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество() = 0 Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
			
	КонецЕсли;	
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
		
	Если Не ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество() = 0 Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
			
	КонецЕсли;	
		
	// Движение по НДС по ставке 0% не подтверждена
	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
		
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки), 
										СтруктураШапкиДокумента.Дата, 
										СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0, "Событие");
		
	Если Не ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество() = 0 Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход(Ложь);
			
	КонецЕсли;	
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
		
	Если Не ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество() = 0 Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьПриход(Ложь);
			
	КонецЕсли;	
		
	// Движение по НДС по ставке 0% предъявлена к вычету

	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
		
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПредъявлено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПредъявлено0;
	КонецЦикла;
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		
	Если Не ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество() = 0 Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход();
			
	КонецЕсли;
	// Движение по НДС по ставке 0% не подтверждено предъявлена к вычету

	ТаблицаДвиженийНДСПредъявленныйРеализация0.Очистить();
		
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПредъявленоНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПредъявленоНеПодтверждено0;
	КонецЦикла;
		
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСПредъявленныйРеализация0);
		
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСПредъявленныйРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		
	Если Не ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество() = 0 Тогда
			
		ДвиженияНДСПредъявленныйРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСПредъявленныйРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСПредъявленныйРеализация0;
		ДвиженияНДСПредъявленныйРеализация0.ВыполнитьРасход();
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движения по НДС записи книги покупок
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПокупок(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ДвиженияНДСЗаписиКнигиПокупок = Движения.НДСЗаписиКнигиПокупок;
	
	ТаблицаДвиженийНДСЗаписиКнигиПокупок = ДвиженияНДСЗаписиКнигиПокупок.Выгрузить();
	ТаблицаДвиженийНДСЗаписиКнигиПокупок.Очистить();
	
	ТаблицаЗаписей = ТаблицаПоДвижениям.Скопировать();
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ТаблицаЗаписей.Колонки.Покупатель.Имя = "Поставщик";
	КонецЕсли;
	
	КолонкиГруппировки 	= "";
	КолонкиСуммирования	= "СуммаБезНДСПредъявлено0, НДСПредъявлено0, СуммаБезНДСПредъявленоНеПодтверждено0, НДСПредъявленоНеПодтверждено0";
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, Поставщик, ДокументОплаты";
		КолонкиСуммирования	= КолонкиСуммирования+ ", СуммаБезНДСПредъявлено, НДСПредъявлено"; 
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, СтавкаНДС, Поставщик, ДатаОплаты, ДоговорКонтрагента";
		КолонкиСуммирования	= КолонкиСуммирования+ ", СуммаБезНДСОплата, НДСОплата";
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, СтавкаНДС, СчетУчетаНДС, ДокументОплаты";
		КолонкиСуммирования	= "СуммаБезНДСПредъявлено, НДСПредъявлено"; 
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		КолонкиГруппировки 	= "Организация, СчетФактура, ВидЦенности, СтавкаНДС, Поставщик, ДоговорКонтрагента";
		КолонкиСуммирования	= "СуммаБезНДСПредъявлено, НДСПредъявлено, СуммаБезНДСОплата, НДСОплата"; 
	КонецЕсли;
	
	ТаблицаЗаписей.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	ТаблицаЗаписей.Колонки.Добавить("Событие");
	ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету, "Событие");
	
	Если не СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявлено.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСПредъявлено.Имя = "НДС";
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
			Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПокупок Цикл
				СтрокаДвижения.ДатаОплаты = ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), 
				                            Неопределено,
											СтрокаДвижения.ДокументОплаты.Дата);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		ТаблицаЗаписей.Колонки.СуммаБезНДСОплата.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСОплата.Имя = "НДС";
		Для каждого СтрокаЗаписи Из ТаблицаЗаписей Цикл
			Если не СтрокаЗаписи.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0 
				и не (СтрокаЗаписи.СуммаБезНДС = 0 и СтрокаЗаписи.НДС = 0)
				Тогда
				СтрокаКниги = ТаблицаДвиженийНДСЗаписиКнигиПокупок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКниги,СтрокаЗаписи);
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Не (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления 
		Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным) Тогда
		// НДС по ставке 0% принятый к вычету
		ТаблицаЗаписей.Колонки.Удалить("СуммаБезНДС");
		ТаблицаЗаписей.Колонки.Удалить("НДС");
		ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявлено0.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСПредъявлено0.Имя = "НДС";
		ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
		
		// НДС по ставке 0% (не подтверждено) принятый к вычету
		ТаблицаЗаписей.Колонки.Удалить("СуммаБезНДС");
		ТаблицаЗаписей.Колонки.Удалить("НДС");
		ТаблицаЗаписей.Колонки.СуммаБезНДСПредъявленоНеПодтверждено0.Имя = "СуммаБезНДС";
		ТаблицаЗаписей.Колонки.НДСПредъявленоНеПодтверждено0.Имя = "НДС";
		ТаблицаЗаписей.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0, "Событие");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвиженийНДСЗаписиКнигиПокупок);
		
	КонецЕсли;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСЗаписиКнигиПокупок);
	
	Если Не ТаблицаДвиженийНДСЗаписиКнигиПокупок.Количество() = 0 Тогда
		
		ДвиженияНДСЗаписиКнигиПокупок.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСЗаписиКнигиПокупок.мТаблицаДвижений = ТаблицаДвиженийНДСЗаписиКнигиПокупок;
		ДвиженияНДСЗаписиКнигиПокупок.ДобавитьДвижение();
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС записи книги покупок
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСЗаписиКнигиПродаж(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж;
	
	ТаблицаДвиженийНДСЗаписиКнигиПродаж = ДвиженияНДСЗаписиКнигиПродаж.Выгрузить();
	ТаблицаДвиженийНДСЗаписиКнигиПродаж.Очистить();
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСЗаписиКнигиПродаж);
		
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПродаж Цикл
			
			СтрокаДвижения.ДокументОплаты 	= СтрокаДвижения.СчетФактура;
			СтрокаДвижения.ДатаОплаты		= СтрокаДвижения.СчетФактура.Дата;
			СтрокаДвижения.ВидЦенности		= Перечисления.ВидыЦенностей.АвансыПолученные;
			СтрокаДвижения.ДатаСобытия		= СтрокаДвижения.СчетФактура.Дата;
			СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.ПолученАванс;
			
		КонецЦикла;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
			
			СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
			СтрокаДвижения.СуммаБезНДС 		= СтрокаТаблицы.СуммаБезНДСОплата;
			СтрокаДвижения.НДС 				= СтрокаТаблицы.НДСОплата;
			СтрокаДвижения.ДокументОплаты	= СтрокаДвижения.СчетФактура;
			СтрокаДвижения.ДатаОплаты		= СтруктураШапкиДокумента.Дата;
			СтрокаДвижения.ДатаСобытия		= СтруктураШапкиДокумента.Дата;
			СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС;
					
		КонецЦикла;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСЗаписиКнигиПродаж);
		Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСЗаписиКнигиПродаж Цикл
			СтрокаДвижения.ДатаОплаты		= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты),
												СтрокаДвижения.СчетФактура.Дата,
												СтрокаДвижения.ДокументОплаты.Дата);
			СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
			СтрокаДвижения.ДоговорКонтрагента = Неопределено;
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
			
			УчетнаяПолитикаНУ = ПолучитьПараметрыУчетнойПолитикиЛокально(?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.СчетФактураДата), Отказ, СтруктураШапкиДокумента.Организация,СтрокаТаблицы.СчетФактура);
			
			Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
				СтрокаДвижения.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
				СтрокаДвижения.ДатаОплаты 		= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДокументОплатыДата);
				СтрокаДвижения.ДатаСобытия		= СтрокаТаблицы.СчетФактураДата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0;
				Если Не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
				
				СтрокаДвижения.ДатаСобытия		= СтрокаТаблицы.СчетФактураДата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0;
				Если Не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
			Иначе
				
				СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС 		= СтрокаТаблицы.СуммаБезНДСОплата;
				СтрокаДвижения.НДС 				= СтрокаТаблицы.НДСОплата;
				СтрокаДвижения.ДатаОплаты 		= ?(НЕ ЗначениеЗаполнено(СтрокаДвижения.ДокументОплаты), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.ДокументОплатыДата);
				СтрокаДвижения.ДатаСобытия		= СтрокаТаблицы.СчетФактураДата;
				СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
				Если Не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
				Если УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
					СтрокаДвижения = ТаблицаДвиженийНДСЗаписиКнигиПродаж.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
					СтрокаДвижения.СуммаБезНДС 		= СтрокаДвижения.СуммаБезНДС - СтрокаТаблицы.СуммаБезНДСОплата;
					СтрокаДвижения.НДС 				= СтрокаДвижения.НДС - СтрокаТаблицы.НДСОплата;
					СтрокаДвижения.ДокументОплаты 	= Неопределено;
					СтрокаДвижения.ДатаСобытия		= СтрокаТаблицы.СчетФактураДата;
					СтрокаДвижения.Событие			= Перечисления.СобытияПоНДСПродажи.Реализация;
					Если Не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
						СтрокаДвижения.ДоговорКонтрагента = Неопределено;
					КонецЕсли; 
				КонецЕсли;
				
			КонецЕсли;
		
        КонецЦикла;
			
	КонецЕсли;
			
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСЗаписиКнигиПродаж);
	
	Если Не ТаблицаДвиженийНДСЗаписиКнигиПродаж.Количество() = 0 Тогда
		
		ДвиженияНДСЗаписиКнигиПродаж.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСЗаписиКнигиПродаж.мТаблицаДвижений = ТаблицаДвиженийНДСЗаписиКнигиПродаж;
		ДвиженияНДСЗаписиКнигиПродаж.ДобавитьДвижение();
		
	КонецЕсли;	
		
	
КонецПроцедуры

// Процедура формирования движения по НДС начисленный
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСНачисленный(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСНачисленный = Движения.НДСНачисленный;
	
	ТаблицаДвиженийНДСНачисленный = ДвиженияНДСНачисленный.Выгрузить();
	
	ТаблицаДвиженийНДСНачисленный.Очистить();
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным
		Или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		// Авансы и СМРХозпособом
		
		ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСНачисленКУплате, "ВидНачисления");
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Неопределено, "Покупатель, ДоговорКонтрагента");
		Иначе	
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.НДСсАвансов, "ВидНачисления");
			ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.АвансыПолученные , "ВидЦенности");
		КонецЕсли;
		
		Если Не ТаблицаДвиженийНДСНачисленный.Количество() = 0 Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			// Отражение в книге продаж сразу же, по факту начисления НДС с аванса
			ДвиженияНДСНачисленный.ВыполнитьРасход(Ложь);
			
		КонецЕсли;
		
	Иначе
		// Продажа
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСНачисленный);
		
		Для Каждого СтрокаДвижения из ТаблицаДвиженийНДСНачисленный Цикл
			Если СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияБезНДС;
			ИначеЕсли СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
			Иначе
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.РеализацияСНДС;
			КонецЕсли;	
			СтрокаДвижения.Событие = Перечисления.СобытияПоНДСПродажи.Реализация;
			СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
			Если Не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
				СтрокаДвижения.ДоговорКонтрагента = Неопределено;
			КонецЕсли; 
		КонецЦикла;
		
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		Если Не ТаблицаДвиженийНДСНачисленный.Количество() = 0 Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			
		КонецЕсли;
		
		// Не подтверждение 0%
		ТаблицаДвиженийНДСНачисленный.Очистить();
		ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
		
		СтрокиКУдалению = Новый Массив();
				
		Для Каждого СтрокаТаблицы из ТаблицаДвижений Цикл
			Если (Не СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0) Или (СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 = 0) Или 
				(СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И ТипЗнч(СтрокаТаблицы.СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			Иначе
				СтрокаТаблицы.СуммаБезНДС = - (СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 + СтрокаТаблицы.НДСНеПодтверждено0);
				СтрокаТаблицы.НДС = 0;
				СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОплаты),
														СтрокаТаблицы.СчетФактураДата,
														СтрокаТаблицы.ДокументОплатыДата);
				СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДС;
				
				Если Не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаТаблицы.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			ТаблицаДвижений.Удалить(СтрокаКУдалению);
		КонецЦикла;
				
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);

		Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл;
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
			СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
			СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
			
			Если Не СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
				СтрокаТаблицы.ДоговорКонтрагента = Неопределено;
			КонецЕсли; 
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСНачисленный);
		
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
		ТаблицаДвиженийНДСНачисленный.ЗаполнитьЗначения(Перечисления.НДСВидНачисления.Реализация0, "ВидНачисления");
		
		Если Не ТаблицаДвиженийНДСНачисленный.Количество() = 0 Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьПриход(Ложь);
			
		КонецЕсли;
	
		ТаблицаДвиженийНДСНачисленный.Очистить();
		
		Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
			
			УчетнаяПолитикаНУ = ПолучитьПараметрыУчетнойПолитикиЛокально(?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура), СтруктураШапкиДокумента.Дата, СтрокаТаблицы.СчетФактураДата), Отказ, СтруктураШапкиДокумента.Организация, СтрокаТаблицы.СчетФактура);
			
			Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
				СтрокаДвижения.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
				Если Не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
				СтрокаДвижения.ВидНачисления = Перечисления.НДСВидНачисления.Реализация0;
				Если Не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
			ИначеЕсли Не УчетнаяПолитикаНУ.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке Тогда
				
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСОплата;
				СтрокаДвижения.НДС = СтрокаТаблицы.НДСОплата;
				СтрокаДвижения.ВидНачисления = ?(СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, 
				                                Перечисления.НДСВидНачисления.РеализацияБезНДС,
												Перечисления.НДСВидНачисления.РеализацияСНДС);
				
				Если Не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
			Иначе
				СтрокаДвижения = ТаблицаДвиженийНДСНачисленный.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
				СтрокаДвижения.ВидНачисления = ?(СтрокаДвижения.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС, 
				                                Перечисления.НДСВидНачисления.РеализацияБезНДС,
												Перечисления.НДСВидНачисления.РеализацияСНДС);
												
				Если Не СтрокаДвижения.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент Тогда
					СтрокаДвижения.ДоговорКонтрагента = Неопределено;
				КонецЕсли; 
				
			КонецЕсли;
		
        КонецЦикла;
		УдалитьПустыеДвижения(ТаблицаДвиженийНДСНачисленный);
		
		Если Не ТаблицаДвиженийНДСНачисленный.Количество() = 0 Тогда
			
			ДвиженияНДСНачисленный.мПериод = СтруктураШапкиДокумента.Дата;
			ДвиженияНДСНачисленный.мТаблицаДвижений = ТаблицаДвиженийНДСНачисленный;
			ДвиженияНДСНачисленный.ВыполнитьРасход(Ложь);
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирования движения по НДС реализация 0%
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСРеализация0(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСРеализация0 = Движения.НДСРеализация0;
	
	ТаблицаДвиженийНДСРеализация0 = ДвиженияНДСРеализация0.Выгрузить();
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	Счетчик = ТаблицаДвижений.Количество();
	Пока Счетчик <> 0 Цикл
		Счетчик = Счетчик - 1;
		Если ТаблицаДвижений[Счетчик].СтавкаНДС <> Перечисления.СтавкиНДС.НДС0 Или 
			(ТаблицаДвижений[Счетчик].СтавкаНДС = Перечисления.СтавкиНДС.НДС0 И ТипЗнч(ТаблицаДвижений[Счетчик].СчетФактура) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")) Тогда
			ТаблицаДвижений.Удалить(ТаблицаДвижений[Счетчик]);
		Иначе	
			ТаблицаДвижений[Счетчик].ДатаСобытия = ?(НЕ ЗначениеЗаполнено(ТаблицаДвижений[Счетчик].ДокументОтгрузки),
														СтруктураШапкиДокумента.Дата,
														ТаблицаДвижений[Счетчик].ДокументОтгрузки);
		КонецЕсли;
	КонецЦикла;
	
	// Ожидается подтверждение ставки 0%
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.Реализация, "Событие");
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	Если Не ТаблицаДвиженийНДСРеализация0.Количество() = 0 Тогда
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	// Ставка 0% подтверждена
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСПодтверждено0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
										СтруктураШапкиДокумента.Дата,
										СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0, "Событие");
	
	Если Не ТаблицаДвиженийНДСРеализация0.Количество() = 0 Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0, "Состояние");
	
	Если Не ТаблицаДвиженийНДСРеализация0.Количество() = 0 Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	// Ставка 0% не подтверждена
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0 + СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.НДС = 0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
										СтруктураШапкиДокумента.Дата,
										СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
	
	Если Не ТаблицаДвиженийНДСРеализация0.Количество() = 0 Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
		СтрокаТаблицы.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
		СтрокаТаблицы.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
		СтрокаТаблицы.ДатаСобытия = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументОтгрузки),
										СтруктураШапкиДокумента.Дата,
										СтрокаТаблицы.ДокументОтгрузки.Дата);
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСРеализация0);
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
	
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0, "Состояние");
	ТаблицаДвиженийНДСРеализация0.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0, "Событие");
	
	Если Не ТаблицаДвиженийНДСРеализация0.Количество() = 0 Тогда                                      
		
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьПриход();
		
	КонецЕсли;
	
	ТаблицаДвиженийНДСРеализация0.Очистить();
		
	Для Каждого СтрокаТаблицы Из ТаблицаПоДвижениям Цикл
		Если СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			СтрокаДвижения = ТаблицаДвиженийНДСРеализация0.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
			СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСНеПодтверждено0;
			СтрокаДвижения.НДС = СтрокаТаблицы.НДСНеПодтверждено0;
			СтрокаДвижения.СтавкаНДС = СтрокаТаблицы.СтавкаНДСНеПодтверждена0;
			СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0;
			
			СтрокаДвижения = ТаблицаДвиженийНДСРеализация0.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения, СтрокаТаблицы);
			СтрокаДвижения.СуммаБезНДС = СтрокаТаблицы.СуммаБезНДСПодтверждено0;
			СтрокаДвижения.НДС = СтрокаТаблицы.НДСПодтверждено0;
			СтрокаДвижения.Состояние = Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0;
				
		КонецЕсли;
		
	КонецЦикла;
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСРеализация0);
		
	Если Не ТаблицаДвиженийНДСРеализация0.Количество() = 0 Тогда
			
		ДвиженияНДСРеализация0.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСРеализация0.мТаблицаДвижений = ТаблицаДвиженийНДСРеализация0;
		ДвиженияНДСРеализация0.ВыполнитьРасход();
			
	КонецЕсли;	
	
КонецПроцедуры

// Процедура формирования движения по НДС с авансов
//
Процедура СформироватьДвиженияВводОстатковПоРегиструНДСсАвансов(СтруктураШапкиДокумента, ТаблицаПоДвижениям, Отказ,Заголовок)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияНДСсАвансов = Движения.НДСсАвансов;
	
	ТаблицаДвиженийНДСсАвансов = ДвиженияНДСсАвансов.Выгрузить();
	// НДС с аванса начисленный
	ТаблицаДвиженийНДСсАвансов.Очистить();
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		ТаблицаПоДвижениям.Колонки.Поставщик.Имя = "Покупатель";
	КонецЕсли;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДвижениям, ТаблицаДвиженийНДСсАвансов);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСсАвансов Цикл
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСсАвансов);
	
	Если Не ТаблицаДвиженийНДСсАвансов.Количество() = 0 Тогда
		
		ДвиженияНДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСсАвансов.мТаблицаДвижений = ТаблицаДвиженийНДСсАвансов;
		ДвиженияНДСсАвансов.ВыполнитьПриход(Ложь);
		
	КонецЕсли;
	
	// НДС с аванса к вычету
	ТаблицаДвиженийНДСсАвансов.Очистить();
	ТаблицаДвижений = ТаблицаПоДвижениям.Скопировать();
	
	Для Каждого	СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		СтрокаТаблицы.СуммаБезНДС = ?(СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0, 
									СтрокаТаблицы.СуммаБезНДСПредъявлено0 + СтрокаТаблицы.СуммаБезНДСПредъявленоНеПодтверждено0, 
									СтрокаТаблицы.СуммаБезНДСОплата);
		СтрокаТаблицы.НДС = ?(СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные0, 
									СтрокаТаблицы.НДСПредъявлено0 + СтрокаТаблицы.НДСПредъявленоНеПодтверждено0, 
									СтрокаТаблицы.НДСОплата);
		Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда							
			СтрокаТаблицы.ВалютнаяСуммаСНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС,
																		мВалютаРегламентированногоУчета,
																		СтрокаТаблицы.ВалютаАванса,
																		1, СтрокаТаблицы.КурсАванса,
																		1, 1);
		КонецЕсли;
																	
	КонецЦикла;
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвижений, ТаблицаДвиженийНДСсАвансов);
	
	Для Каждого СтрокаДвижения Из ТаблицаДвиженийНДСсАвансов Цикл
		СтрокаДвижения.ДатаСобытия = СтрокаДвижения.СчетФактура.Дата;
	КонецЦикла;
	
	УдалитьПустыеДвижения(ТаблицаДвиженийНДСсАвансов);
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		ТаблицаПоДвижениям.Колонки.Покупатель.Имя = "Поставщик";
	КонецЕсли;
	
	Если Не ТаблицаДвиженийНДСсАвансов.Количество() = 0 Тогда
		
		ДвиженияНДСсАвансов.мПериод = СтруктураШапкиДокумента.Дата;
		ДвиженияНДСсАвансов.мТаблицаДвижений = ТаблицаДвиженийНДСсАвансов;
		ДвиженияНДСсАвансов.ВыполнитьРасход();
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура формирования движений по регистрам расчеты по приобретению в у.е.
//
Процедура СформироватьДвиженияВводОстатковПоРегистрамПриобретениеВУЕ(СтруктураШапкиДокумента, ТаблицаРасчетов, Отказ)
	
	УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
    Если Не ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если Не СтруктураШапкиДокумента.ОтразитьРасчетыСКонтрагентами Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений = Движения.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации;
	ТабДвиженийРасход = НаборДвижений.Выгрузить();
	ТабДвиженийРасход.Очистить();
	ТабДвиженийПриход = ТабДвиженийРасход.Скопировать();
	
	Для Каждого СтрокаТаб Из ТаблицаРасчетов Цикл
		Если СтрокаТаб.Аванс Тогда
			СтрокаДвиж = ТабДвиженийПриход.Добавить();
		Иначе
			СтрокаДвиж = ТабДвиженийРасход.Добавить();
		КонецЕсли;
		СтрокаДвиж.ДатаОплаты          = ?(СтрокаТаб.Аванс, 
											?( СтрокаТаб.СчетФактура <> Неопределено, СтрокаТаб.СчетФактура.Дата, ?(СтрокаТаб.ДокументОплаты = Неопределено, Дата, СтрокаТаб.ДокументОплаты.Дата)), 
											Неопределено);
		СтрокаДвиж.ДоговорКонтрагента  = СтрокаТаб.ДоговорКонтрагента;
		СтрокаДвиж.Контрагент  		   = СтрокаТаб.ДоговорКонтрагента.Владелец;
		СтрокаДвиж.Организация  	   = Организация;
		СтрокаДвиж.Документ            = ?( СтрокаТаб.СчетФактура <> Неопределено, СтрокаТаб.СчетФактура, СтрокаТаб.ДокументОплаты);
		СтрокаДвиж.Сделка              = СтрокаТаб.Сделка;
		//СтрокаДвиж.СтрокаДокумента     = ?(СтрокаТаб.Аванс, СтрокаТаб.НомерСтроки, Неопределено);
		СтрокаДвиж.СуммаВзаиморасчетов = СтрокаТаб.ВалютнаяСуммаВзаиморасчетов;
		СтрокаДвиж.СуммаРег            = СтрокаТаб.СуммаВзаиморасчетов;
		СтрокаДвиж.СчетОплаты          = СтрокаТаб.СчетУчетаРасчетовСКонтрагентом;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений = ТабДвиженийРасход;
	НаборДвижений.ВыполнитьРасход();
	
	НаборДвижений.мТаблицаДвижений = ТабДвиженийПриход;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // СформироватьДвиженияВводОстатковПоРегистрамПриобретениеВУЕ()

// Процедура формирования движений по регистрам расчеты по реализации в у.е.
//
Процедура СформироватьДвиженияВводОстатковПоРегистрамРеализацииВУЕ(СтруктураШапкиДокумента, ТаблицаРасчетов, Отказ)
	
	Если НЕ СтруктураШапкиДокумента.ОтразитьРасчетыСКонтрагентами 
		ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
	Если Не ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	НаборДвижений = Движения.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации;
	ТабДвиженийРасход = НаборДвижений.Выгрузить();
	ТабДвиженийРасход.Очистить();
	ТабДвиженийПриход = ТабДвиженийРасход.Скопировать();
	
	Для Каждого СтрокаТаб Из ТаблицаРасчетов Цикл
		Если СтрокаТаб.Аванс Тогда
			СтрокаДвиж = ТабДвиженийПриход.Добавить();
		Иначе
			СтрокаДвиж = ТабДвиженийРасход.Добавить();
		КонецЕсли;
		СтрокаДвиж.ДатаОплаты          = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, 
											?( СтрокаТаб.СчетФактура <> Неопределено, СтрокаТаб.СчетФактура.Дата, ?(СтрокаТаб.ДокументОплаты = Неопределено, Дата, СтрокаТаб.ДокументОплаты.Дата)),
											Неопределено);
		СтрокаДвиж.ДоговорКонтрагента  = СтрокаТаб.ДоговорКонтрагента;
		СтрокаДвиж.Контрагент  		   = СтрокаТаб.ДоговорКонтрагента.Владелец;
		СтрокаДвиж.Организация  	   = Организация;
		СтрокаДвиж.Документ            = ?( СтрокаТаб.СчетФактура <> Неопределено, СтрокаТаб.СчетФактура, СтрокаТаб.ДокументОплаты);
		СтрокаДвиж.Сделка              = СтрокаТаб.Сделка;
		//СтрокаДвиж.СтрокаДокумента     = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, СтрокаТаб.НомерСтроки, Неопределено);
		СтрокаДвиж.СуммаВзаиморасчетов = СтрокаТаб.ВалютнаяСуммаВзаиморасчетов;
		СтрокаДвиж.СуммаРег            = СтрокаТаб.СуммаВзаиморасчетов;
		СтрокаДвиж.СчетОплаты          = СтрокаТаб.СчетУчетаРасчетовСКонтрагентом;
		
	КонецЦикла;
	
	НаборДвижений.мПериод = СтруктураШапкиДокумента.Дата;
	НаборДвижений.мТаблицаДвижений = ТабДвиженийРасход;
	НаборДвижений.ВыполнитьРасход();
	
	НаборДвижений.мТаблицаДвижений = ТабДвиженийПриход;
	НаборДвижений.ВыполнитьПриход();
	
КонецПроцедуры // СформироватьДвиженияВводОстатковПоРегистрамПриобретениеВУЕ()

// Процедура переименовывает колонки ТЧ СуммаБезНДС и НДС и замещает их другими колонками
// Параметры:
//  ТаблицаДвижений - таблица, колонки которой требуется переименовать
//  ИмяСуммаБезНДС  - имя колонки, которая помещается в колонку СуммаБезНДС
//  ИмяНДС			- имя колонки, которая помещается в колонку НДС
//  Заменить		- если Истина, тогда колонки СуммаБезНДС и НДС замещаются, Ложь - отмена замещения
Процедура ЗаменитьКолонкиСуммаНДС(ТаблицаПоДвижениям, ИмяСуммаБезНДС, ИмяНДС, Заменить = Истина)
	
	Если Заменить Тогда
		ТаблицаПоДвижениям.Колонки.СуммаБезНДС.Имя = "УдалитьСуммаБезНДС";
		ТаблицаПоДвижениям.Колонки.НДС.Имя = "УдалитьНДС";
		ТаблицаПоДвижениям.Колонки[ИмяСуммаБезНДС].Имя = "СуммаБезНДС";
		ТаблицаПоДвижениям.Колонки[ИмяНДС].Имя = "НДС";
	Иначе
		ТаблицаПоДвижениям.Колонки.СуммаБезНДС.Имя = ИмяСуммаБезНДС;
		ТаблицаПоДвижениям.Колонки.НДС.Имя = ИмяНДС;
		ТаблицаПоДвижениям.Колонки.УдалитьСуммаБезНДС.Имя = "СуммаБезНДС";
		ТаблицаПоДвижениям.Колонки.УдалитьНДС.Имя = "НДС";
	КонецЕсли;
	
КонецПроцедуры

// Процедура удаляет из таблицы строки, в которых СуммаБезНДС и НДС равны 0
//
Процедура УдалитьПустыеДвижения(ТаблицаПоДвижениям)

	Счетчик = ТаблицаПоДвижениям.Количество();
	
	Пока Счетчик <> 0 Цикл
		
		Счетчик = Счетчик - 1;
		
		Если (ТаблицаПоДвижениям[Счетчик].СуммаБезНДС = 0) И (ТаблицаПоДвижениям[Счетчик].НДС = 0) Тогда
			
			ТаблицаПоДвижениям.Удалить(ТаблицаПоДвижениям[Счетчик]);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РегистрацияСчетовФактур(СтруктураШапкиДокумента,Отказ,Заголовок)
	
	Если мПодчиненныеДокументы = Неопределено Тогда
		СформироватьСчетаФактуры(Ложь, Ложь);
	КонецЕсли;
	
	ТаблицаДляЗапроса = Новый Таблицазначений;
	ТаблицаДляЗапроса.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.СчетФактураПолученный, ДокументСсылка.СчетФактураВыданный"));
	
	Для Каждого СтрокаТаблицы Из мПодчиненныеДокументы Цикл
		Если СтрокаТаблицы.Использован 
			И (ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				ИЛИ ТипЗнч(СтрокаТаблицы.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")) Тогда
			НоваяСтрока = ТаблицаДляЗапроса.Добавить();
			НоваяСтрока.Ссылка = СтрокаТаблицы.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДляЗапроса.Количество() = 0 Тогда
		// Синхронизация состояния не требуется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Таблица", ТаблицаДляЗапроса);
	
	Запрос.Текст = "
	|ВЫБРАТЬ *
	| Поместить ВТ_ПодчиненныеДокументы
	|ИЗ
	|	&Таблица КАК ПодчиненныеДокументы 
	|;
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Номер,
	|	СчетФактураПолученный.Организация,
	|	СчетФактураПолученный.Контрагент,
	|	СчетФактураПолученный.Контрагент.КПП КАК КППКонтрагента,
	|	СчетФактураПолученный.ВидСчетаФактуры,
	|	СчетФактураПолученный.НомерИсходногоДокумента,
	|	СчетФактураПолученный.ДатаИсходногоДокумента,
	|	СчетФактураПолученный.НомерВходящегоДокумента,
	|	СчетФактураПолученный.ДатаВходящегоДокумента,
	|	СчетФактураПолученный.Исправление,
	|	СчетФактураПолученный.НомерИсправления,
	|	СчетФактураПолученный.ДатаИсправления,
	|	"""" КАК НомерИсправляемогоКорректировочногоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИсправляемогоКорректировочногоДокумента,
	|	СчетФактураПолученный.Продавец
	|ИЗ
	|	ВТ_ПодчиненныеДокументы 
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО ВТ_ПодчиненныеДокументы.Ссылка = СчетФактураПолученный.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Организация,
	|	СчетФактураВыданный.Контрагент,
	|	СчетФактураВыданный.Контрагент.КПП,
	|	СчетФактураВыданный.ВидСчетаФактуры,
	|	СчетФактураВыданный.НомерИсходногоДокумента,
	|	СчетФактураВыданный.ДатаИсходногоДокумента,
	|	"""" КАК НомерВходящегоДокумента,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВходящегоДокумента,
	|	СчетФактураВыданный.Исправление,
	|	СчетФактураВыданный.НомерИсправления,
	|	СчетФактураВыданный.Дата КАК ДатаИсправления,
	|	СчетФактураВыданный.НомерИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданный.ДатаИсправляемогоКорректировочногоДокумента,
	|	Неопределено
	|ИЗ
	|	ВТ_ПодчиненныеДокументы
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО ВТ_ПодчиненныеДокументы.Ссылка  = СчетФактураВыданный.Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЖурналУчетаСчетовФактур = Движения.ЖурналУчетаСчетовФактур;
	
	МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
	
	ТекущийДокумент = Результат.Выбрать();
	
	Пока ТекущийДокумент.Следующий() Цикл
		
		Если ТипЗнч(ТекущийДокумент.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			Если ТекущийДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				
				ОснованияТекущегоДокумента = ТекущийДокумент.Ссылка.ДокументыОснования;
				Для Каждого СтрокаОснования ИЗ ОснованияТекущегоДокумента Цикл
					
					СтрокаДвижения = ДвиженияЖурналУчетаСчетовФактур.Добавить();
					
					СтрокаДвижения.Период          = СтруктураШапкиДокумента.Дата;
					СтрокаДвижения.Организация     = ТекущийДокумент.Организация;	
					СтрокаДвижения.Контрагент      = ТекущийДокумент.Контрагент;
					СтрокаДвижения.СчетФактура     = ТекущийДокумент.Ссылка;
					СтрокаДвижения.КППКонтрагента  = ТекущийДокумент.КППКонтрагента;
					СтрокаДвижения.ЧастьЖурнала    = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры;
					СтрокаДвижения.ИндексСтроки    = ОснованияТекущегоДокумента.Индекс(СтрокаОснования);
					
					СтрокаДвижения.НомерСчетаФактуры = СтрокаОснования.НомерИсходногоДокумента;
					СтрокаДвижения.ДатаСчетаФактуры  = СтрокаОснования.ДатаИсходногоДокумента;
					
					СтрокаДвижения.НомерКорректировочногоСчетаФактуры = ТекущийДокумент.НомерВходящегоДокумента;
					СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = ТекущийДокумент.ДатаВходящегоДокумента;
					
					Если ТекущийДокумент.Исправление Тогда
						СтрокаДвижения.НомерИсправленияКорректировочногоСчетаФактуры = ТекущийДокумент.НомерИсправления;
						СтрокаДвижения.ДатаИсправленияКорректировочногоСчетаФактуры  = ТекущийДокумент.ДатаИсправления;
					КонецЕсли;
					
					Если СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента Тогда
						СтрокаДвижения.НомерИсправления = СтрокаОснования.НомерИсправленияИсходногоДокумента;
						СтрокаДвижения.ДатаИсправления  = СтрокаОснования.ДатаИсправленияИсходногоДокумента;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ТекущийДокумент.Продавец) 
						И ТекущийДокумент.Продавец <> ТекущийДокумент.Контрагент Тогда
						СтрокаДвижения.Продавец = ТекущийДокумент.Продавец;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				СтрокаДвижения = ДвиженияЖурналУчетаСчетовФактур.Добавить();
				
				СтрокаДвижения.Период          = СтруктураШапкиДокумента.Дата;
				СтрокаДвижения.Организация     = ТекущийДокумент.Организация;	
				СтрокаДвижения.Контрагент      = ТекущийДокумент.Контрагент;
				СтрокаДвижения.СчетФактура     = ТекущийДокумент.Ссылка;
				СтрокаДвижения.КППКонтрагента  = ТекущийДокумент.КППКонтрагента;
				СтрокаДвижения.ЧастьЖурнала    = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры;
				СтрокаДвижения.ИндексСтроки    = 0;
				
				Если ТекущийДокумент.Исправление Тогда
					СтрокаДвижения.НомерИсправления = ТекущийДокумент.НомерИсправления;
					СтрокаДвижения.ДатаИсправления  = ТекущийДокумент.ДатаИсправления;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекущийДокумент.Продавец) 
					И ТекущийДокумент.Продавец <> ТекущийДокумент.Контрагент Тогда
					СтрокаДвижения.Продавец = ТекущийДокумент.Продавец;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекущийДокумент.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			Если ТекущийДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
				
				ОснованияТекущегоДокумента = ТекущийДокумент.Ссылка.ДокументыОснования;
				Для Каждого СтрокаОснования ИЗ ОснованияТекущегоДокумента Цикл
					
					СтрокаДвижения = ДвиженияЖурналУчетаСчетовФактур.Добавить();
					
					СтрокаДвижения.Период          = СтруктураШапкиДокумента.Дата;
					СтрокаДвижения.Организация     = ТекущийДокумент.Организация;	
					СтрокаДвижения.Контрагент      = ТекущийДокумент.Контрагент;
					СтрокаДвижения.СчетФактура     = ТекущийДокумент.Ссылка;
					СтрокаДвижения.КППКонтрагента  = ТекущийДокумент.КППКонтрагента;
					
					// Определим контрагента для СМР хозспособом и налогового агента
					Если НЕ ЗначениеЗаполнено(ТекущийДокумент.Контрагент) Тогда 
						СтрокаДвижения.Контрагент = ТекущийДокумент.Организация;
					КонецЕсли;
					
					СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры;
					СтрокаДвижения.ИндексСтроки = ОснованияТекущегоДокумента.Индекс(СтрокаОснования);
					
					СтрокаДвижения.НомерСчетаФактуры = СтрокаОснования.НомерИсходногоДокумента;
					СтрокаДвижения.ДатаСчетаФактуры  = СтрокаОснования.ДатаИсходногоДокумента;
					
					Если ТекущийДокумент.Исправление Тогда
						СтрокаДвижения.НомерКорректировочногоСчетаФактуры = ТекущийДокумент.НомерИсправляемогоКорректировочногоДокумента;
						СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = ТекущийДокумент.ДатаИсправляемогоКорректировочногоДокумента;
						СтрокаДвижения.НомерИсправленияКорректировочногоСчетаФактуры = ТекущийДокумент.НомерИсправления;
						СтрокаДвижения.ДатаИсправленияКорректировочногоСчетаФактуры  = ТекущийДокумент.Дата;
					Иначе
						СтрокаДвижения.НомерКорректировочногоСчетаФактуры = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущийДокумент);
						СтрокаДвижения.ДатаКорректировочногоСчетаФактуры  = ТекущийДокумент.Дата;
					КонецЕсли;
					
					Если СтрокаОснования.УчитыватьИсправлениеИсходногоДокумента Тогда
						СтрокаДвижения.НомерИсправления = СтрокаОснования.НомерИсправленияИсходногоДокумента;
						СтрокаДвижения.ДатаИсправления  = СтрокаОснования.ДатаИсправленияИсходногоДокумента;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				СтрокаДвижения = ДвиженияЖурналУчетаСчетовФактур.Добавить();
				
				СтрокаДвижения.Период          = СтруктураШапкиДокумента.Дата;
				СтрокаДвижения.Организация     = ТекущийДокумент.Организация;	
				СтрокаДвижения.Контрагент      = ТекущийДокумент.Контрагент;
				СтрокаДвижения.СчетФактура     = ТекущийДокумент.Ссылка;
				СтрокаДвижения.КППКонтрагента  = ТекущийДокумент.КППКонтрагента;
				
				// Определим контрагента для СМР хозспособом и налогового агента
				Если НЕ ЗначениеЗаполнено(ТекущийДокумент.Контрагент) Тогда 
					СтрокаДвижения.Контрагент = ТекущийДокумент.Организация;
				КонецЕсли;
				
				СтрокаДвижения.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры;
				СтрокаДвижения.ИндексСтроки = 0;
				
				Если ТекущийДокумент.Исправление Тогда
					СтрокаДвижения.НомерСчетаФактуры = ТекущийДокумент.НомерИсходногоДокумента;
					СтрокаДвижения.ДатаСчетаФактуры  = ТекущийДокумент.ДатаИсходногоДокумента;
					СтрокаДвижения.НомерИсправления  = ТекущийДокумент.НомерИсправления;
					СтрокаДвижения.ДатаИсправления   = ТекущийДокумент.Дата;
				Иначе				
					СтрокаДвижения.НомерСчетаФактуры   = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущийДокумент);
					СтрокаДвижения.ДатаСчетаФактуры    = ТекущийДокумент.Дата;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДвиженияЖурналУчетаСчетовФактур.Записывать = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ПОДЧИНЕННЫМИ ДОКУМЕНТАМИ

Процедура СформироватьСчетаФактуры(СоздаватьПодчиненныеДокументыОснования = Истина, ОбновитьСодержаниеПодчиненныхДокументов = Истина) Экспорт
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным
		Или ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		 ИспользоватьДокументыРасчетов = Истина;
	 Иначе
		 ИспользоватьДокументыРасчетов = Ложь;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВНО_НДС",Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.УстановитьПараметр("ДанныеПоСФ", ДанныеПоСФ);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	РезультатЗапроса = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = РезультатЗапроса;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|		ИНАЧЕ ВНО_НДСДанныеПоСФ.Контрагент
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|		ИНАЧЕ ВНО_НДСДанныеПоСФ.ДоговорКонтрагента
		|	КОНЕЦ КАК ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям)
		|			ТОГДА ВНО_НДСДанныеПоСФ.Продавец
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ КАК Продавец,
		|	ВЫБОР
		|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям)
		|			ТОГДА ВНО_НДСДанныеПоСФ.ПредъявленСФ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПредъявленСФ,
		|	ВЫБОР
		|		КОГДА ВНО_НДСДанныеПоСФ.Исправление
		|			ТОГДА ВНО_НДСДанныеПоСФ.ДатаИсправления
		|		ИНАЧЕ ВНО_НДСДанныеПоСФ.ДатаСФ
		|	КОНЕЦ КАК ДатаСФ,
		|	ВНО_НДСДанныеПоСФ.НомерСФ КАК НомерСФКакУказан,
		|	ВНО_НДСДанныеПоСФ.ДатаПлатежноРасчетногоДокумента КАК ДатаВходящего,
		|	ВНО_НДСДанныеПоСФ.НомерПлатежноРасчетногоДокумента КАК НомерВходящегоКакУказан,
		|	ВНО_НДСДанныеПоСФ.СчетФактура КАК ТекущийДокумент,
		|	ВНО_НДСДанныеПоСФ.НомерСтроки КАК НомерСтроки,
		|	ВНО_НДСДанныеПоСФ.СуммаБезНДС КАК Сумма,
		|	ВНО_НДСДанныеПоСФ.НДС КАК СуммаНДС,
		|	ВНО_НДСДанныеПоСФ.КлючСтроки,
		|	ВЫБОР
		|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным)
		|			ТОГДА ВНО_НДСДанныеПоСФ.ВалютаАванса
		|		ИНАЧЕ &ВалютаРегламентированногоУчета
		|	КОНЕЦ КАК ВалютаДокумента,
		|	ВЫБОР
		|		КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным)
		|			ТОГДА ВНО_НДСДанныеПоСФ.ВалютнаяСуммаСНДС
		|		ИНАЧЕ ВНО_НДСДанныеПоСФ.СуммаБезНДС + ВНО_НДСДанныеПоСФ.НДС
		|	КОНЕЦ КАК СуммаДокумента,
		|	ВНО_НДСДанныеПоСФ.Исправление,
		|	ВНО_НДСДанныеПоСФ.НомерИсправления,
		|	ВНО_НДСДанныеПоСФ.ДатаИсправления,
		|	ВНО_НДСДанныеПоСФ.КорректировочныйСчетФактура,
		|	ВНО_НДСДанныеПоСФ.НомерИсходногоДокумента,
		|	ВНО_НДСДанныеПоСФ.ДатаИсходногоДокумента,
		|	ВНО_НДСДанныеПоСФ.НомерИсправленияИсходногоДокумента,
		|	ВНО_НДСДанныеПоСФ.ДатаИсправленияИсходногоДокумента,
		|	ВНО_НДСДанныеПоСФ.УчитыватьИсправлениеИсходногоДокумента,
		|	ВНО_НДСДанныеПоСФ.ДатаСФ КАК ДатаСФВх
		|ПОМЕСТИТЬ ПараметрыДокументов
		|ИЗ
		|	&ДанныеПоСФ КАК ВНО_НДСДанныеПоСФ";
	Запрос.Выполнить();
	
	Запрос.Текст ="Выбрать * из ПараметрыДокументов 		
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	ПараметрыДокументов = Запрос.Выполнить().Выгрузить();
	ПараметрыДокументов.Колонки.Добавить("НомерСФ");
	ПараметрыДокументов.Колонки.Добавить("НомерВходящего");
	
	ПараметрыДокументов.Индексы.Добавить("Контрагент, ДоговорКонтрагента");
	ПараметрыДокументов.Индексы.Добавить("ТекущийДокумент");
	
	ИспользоватьПрефиксыПриОтработкеНомеров = Не (ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям
												Или ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления
												Или ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным);
	ПрефиксОрганизации = ?(ЗначениеЗаполнено(Организация.Префикс),Организация.Префикс,"0");
	СписокПрефиксов = новый СписокЗначений();
	
	Если ИспользоватьПрефиксыПриОтработкеНомеров Тогда
		МассивПрефиксов = ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация);
		Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
			//Дополняем префиксом "А" + префикс организации
			МассивПрефиксов.Добавить("А"+ПрефиксОрганизации);
		КонецЕсли; 
		СписокПрефиксов.ЗагрузитьЗначения(МассивПрефиксов);
	КонецЕсли; 
	
	Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
		СтрокаПараметров.НомерВходящего = ПолучитьНомерДляСравнения(СтрокаПараметров.НомерВходящегоКакУказан);
		СтрокаПараметров.НомерСФ		= ПолучитьНомерДляСравнения(СтрокаПараметров.НомерСФКакУказан, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
	КонецЦикла; 
	
	ПодчиненныеДокументы = ПолучитьТаблицуПодчиненныхДокументов(Ссылка, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
	
	ОтработкаИзмененияДатыИлиНомераПодчиненныхДокументов(ПараметрыДокументов,ПодчиненныеДокументы);
	
	СокращеннаяТаблица = ПараметрыДокументов.Скопировать();
	СокращеннаяТаблица.Свернуть("Контрагент, ДоговорКонтрагента, Продавец, 
			|ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего", "");
	СокращеннаяТаблица.Колонки.Добавить("МассивОснований");
	СокращеннаяТаблица.Колонки.Добавить("СчетФактура");

	СтруктураПоискаОснования= Новый Структура("Контрагент, ДоговорКонтрагента, ДатаВходящего, НомерВходящего");
	СтруктураПоискаСФ		= Новый Структура("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ");
	
	Для каждого СтрокаПараметров Из СокращеннаяТаблица Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПараметров.ДатаВходящего) и ПустаяСтрока(СтрокаПараметров.НомерВходящего) Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСФ, СтрокаПараметров);
			СтрокиОснований = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоискаСФ);
		Иначе
			ЗаполнитьЗначенияСвойств(СтруктураПоискаОснования, СтрокаПараметров);
			СтрокиОснований = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоискаОснования);
		КонецЕсли; 
		
		МассивОснований = Новый Массив();
		Если СтрокиОснований.Количество() = 0 Тогда
			Если СоздаватьПодчиненныеДокументыОснования Тогда
		
				// Ничего не найдено. Создаем новый документ;
				Если ИспользоватьДокументыРасчетов Тогда
					ОснованиеСФ = СоздатьДокументРасчетов(СтрокаПараметров, Ссылка);
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям
					ИЛИ ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления
					тогда
					ОснованиеСФ = СоздатьДокументОтражениеПоступленияТоваровИУслугНДС(СтрокаПараметров, Ссылка);
				Иначе
					ОснованиеСФ = СоздатьДокументОтражениеРеализацииТоваровИУслугНДС(СтрокаПараметров, Ссылка);
				КонецЕсли; 
				ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
				МассивОснований.Добавить(ОснованиеСФ.Ссылка);
				
				// Дополнит таблицу документов оснований.
				// При поиске по следующим строкам созданный документ будет использоваться
				// как прочие подчиненные
				
				НоваяСтрокаОснования = ПодчиненныеДокументы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОснования, СтрокаПараметров);
				НоваяСтрокаОснования.ДатаСФ	= "";
				НоваяСтрокаОснования.НомерСФ= "";
				НоваяСтрокаОснования.ДокументОснование = ОснованиеСФ.Ссылка;
			КонецЕсли; 
		Иначе
			Для каждого СтрокаОснования Из СтрокиОснований Цикл
				МассивОснований.Добавить(СтрокаОснования.ДокументОснование);
			КонецЦикла; 
		КонецЕсли; 
		
		СтрокаПараметров.МассивОснований = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОснований,Истина);
		
		Если СтрокаПараметров.ПредъявленСФ тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСФ, СтрокаПараметров);
			СтрокиСФ = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоискаСФ);
			Если СтрокиСФ.Количество() = 0 Тогда
				Если не СоздаватьПодчиненныеДокументыОснования и не ОбновитьСодержаниеПодчиненныхДокументов Тогда
					// Это вызов в режиме поведения или подобном ему режиме,
					// когда починенные документы не модифицируются.
					// Не создаем подчиненные счета-фактуры
				ИначеЕсли СтрокаПараметров.МассивОснований.Количество()>0 Тогда
					// Ничего не найдено.
					Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям
						ИЛИ ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления
						Или ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным
						Тогда
						ОснованиеСФ = СоздатьДокументСчетФактураПолученный(СтрокаПараметров);
						ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
					Иначе
						ОснованиеСФ = СоздатьДокументСчетФактураВыданный(СтрокаПараметров, ПрефиксОрганизации);

						Попытка
							ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
						Исключение
							Попытка
								Если не ОснованиеСФ.Номер = СтрокаПараметров.НомерСФ Тогда
									ОснованиеСФ.Номер = СтрокаПараметров.НомерСФ;
									ОснованиеСФ.Записать(РежимЗаписиДокумента.Запись);
								Иначе
									ОбщегоНазначения.СообщитьОбОшибке("Не удалось выписать выданный счет-фактуру "+СтрокаПараметров.НомерСФ+" от "+СтрокаПараметров.ДатаСФ+". Вероятно счет-фактура с таким номером уже записан в информационной базе.");
									ОснованиеСФ = Неопределено;
								КонецЕсли; 
							Исключение
								ОбщегоНазначения.СообщитьОбОшибке("Не удалось выписать выданный счет-фактуру "+СтрокаПараметров.НомерСФ+" от "+СтрокаПараметров.ДатаСФ+". Вероятно счет-фактура с таким номером уже записан в информационной базе.");
								ОснованиеСФ = Неопределено;
							КонецПопытки; 
						КонецПопытки;
					КонецЕсли; 
					СтрокаПараметров.СчетФактура = ?(ОснованиеСФ = Неопределено, Неопределено,ОснованиеСФ.Ссылка);
					
					Если не НоваяСтрокаОснования = Неопределено Тогда
						НоваяСтрокаОснования = ПодчиненныеДокументы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаОснования, СтрокаПараметров);
					КонецЕсли;
				КонецЕсли; 
			Иначе
				СтрокаПараметров.СчетФактура = СтрокиСФ[0].СчетФактура;
			КонецЕсли;
			
			Если не НоваяСтрокаОснования = Неопределено Тогда
				НоваяСтрокаОснования.ДатаСФ	= СтрокаПараметров.ДатаСФ;
				НоваяСтрокаОснования.НомерСФ= СтрокаПараметров.НомерСФ;
				НоваяСтрокаОснования.СчетФактура = СтрокаПараметров.СчетФактура;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего");
	
	ПараметрыДокументов.Колонки.Добавить("НовоеОснование");
	ПараметрыДокументов.Колонки.Добавить("НовыйСчетФактура");
	
	Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПараметров);
		СтрокиОснований = СокращеннаяТаблица.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаОснований ИЗ СтрокиОснований Цикл
			
			// Не более чем одна строка
			Если СтрокаОснований.МассивОснований.Количество() = 0 Тогда
				// Ничего не найдено.
			Иначе
				Если ЗначениеЗаполнено(СтрокаПараметров.ТекущийДокумент) Тогда
					//Ищем в массиве выбранное ранее основание. Если есть - используем его, чтобы не подменять ссылки.
					Для каждого ЭлементМассика Из СтрокаОснований.МассивОснований Цикл
						Если СтрокаПараметров.ТекущийДокумент = ЭлементМассика Тогда
							СтрокаПараметров.НовоеОснование = СтрокаПараметров.ТекущийДокумент;
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли; 
				Если Не ЗначениеЗаполнено(СтрокаПараметров.НовоеОснование) и СоздаватьПодчиненныеДокументыОснования Тогда
					СтрокаПараметров.НовоеОснование = СтрокаОснований.МассивОснований[0];
				КонецЕсли;
				СтрокаПараметров.НовыйСчетФактура = СтрокаОснований.СчетФактура;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ОбновитьСодержаниеПодчиненныхДокументов Тогда
	#Если Клиент Тогда
		ОбновитьСодержаниеПодчиненныхДокументов(ПараметрыДокументов, СоздаватьПодчиненныеДокументыОснования);
	#КонецЕсли

	КонецЕсли;
	
	мПодчиненныеДокументы = Новый ТаблицаЗначений();
	мПодчиненныеДокументы.Колонки.Добавить("Ссылка",Новый ОписаниеТипов(ПодчиненныеДокументы.Колонки.ДокументОснование.ТипЗначения,ПодчиненныеДокументы.Колонки.СчетФактура.ТипЗначения.Типы()));
	мПодчиненныеДокументы.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	мПодчиненныеДокументы.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	ИспользуемыеПодчиненныеДокументы = Новый списокЗначений();
	ИспользуемыеПодчиненныеДокументы.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПараметрыДокументов.ВыгрузитьКолонку("НовоеОснование"),Истина));
	
	ИспользуемыеСчетаФактуры = Новый списокЗначений();
	ИспользуемыеСчетаФактуры.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПараметрыДокументов.ВыгрузитьКолонку("НовыйСчетФактура"),Истина));
	
	ВсеПодчиненныеДокументы = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПодчиненныеДокументы.ВыгрузитьКолонку("ДокументОснование"),Истина);
	Для каждого Документ Из ВсеПодчиненныеДокументы Цикл
		Если ЗначениеЗаполнено(Документ) тогда
			НоваяСтрока = мПодчиненныеДокументы.Добавить();
			НоваяСтрока.Ссылка = Документ;
			НоваяСтрока.Использован = не (ИспользуемыеПодчиненныеДокументы.НайтиПоЗначению(Документ) = Неопределено);
			НоваяСтрока.НомерСтроки = мПодчиненныеДокументы.Количество();
		КонецЕсли; 
	КонецЦикла; 
	
	ВсеПодчиненныеСчетаФактуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ПодчиненныеДокументы.ВыгрузитьКолонку("СчетФактура"),Истина);
	Для каждого Документ Из ВсеПодчиненныеСчетаФактуры Цикл
		Если ЗначениеЗаполнено(Документ) тогда
			НоваяСтрока = мПодчиненныеДокументы.Добавить();
			НоваяСтрока.Ссылка = Документ;
			НоваяСтрока.Использован = не (ИспользуемыеСчетаФактуры.НайтиПоЗначению(Документ) = Неопределено);
			НоваяСтрока.НомерСтроки = мПодчиненныеДокументы.Количество();
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

#Если Клиент Тогда
Процедура ОбновитьСодержаниеПодчиненныхДокументов(ПараметрыДокументов, СоздаватьПодчиненныеДокументыОснования) Экспорт
		
	//Обновление документов-оснований
	ДеревоДокументов = УчетНДС.ТаблицуЗначенийВДеревоСГруппировкой(ПараметрыДокументов, "НовоеОснование","СуммаДокумента, Сумма, СуммаНДС");
	ЗаголовокДокумента = СокрЛП("Ввод начальных остатков НДС "+Номер+" от "+Формат(Дата,"ДЛФ =Д"));
	
	РасшифровкаСФ = Неопределено;
	Для каждого СтрокаДокументаОснования Из ДеревоДокументов.Строки Цикл
		Если не ЗначениеЗаполнено(СтрокаДокументаОснования.НовоеОснование) Тогда
			Если СоздаватьПодчиненныеДокументыОснования Тогда
				Для каждого СтрокаДАнных Из СтрокаДокументаОснования.Строки Цикл
					ДанныеПоСФ[СтрокаДанных.НомерСтроки-1].СчетФактура = Неопределено;
				КонецЦикла; 
			КонецЕсли; 
			
			Продолжить;
		КонецЕсли; 
		
		ОснованиеОбъект = СтрокаДокументаОснования.НовоеОснование.ПолучитьОбъект();
		СтрокаПараметров = СтрокаДокументаОснования.Строки[0];
		Если не ОснованиеОбъект.Организация = Организация Тогда
			ОснованиеОбъект.Номер = "";
		КонецЕсли; 
		
		ОснованиеОбъект.Организация				= Организация;
		
		СтараяДата = ОснованиеОбъект.Дата;
		ОснованиеОбъект.Дата					= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаВходящего), СтрокаПараметров.ДатаВходящего,?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ),СтрокаПараметров.ДатаСФ,Дата));
		РаботаСДиалогами.ПроверитьНомерДокумента(ОснованиеОбъект, СтараяДата);
		
		ОснованиеОбъект.Контрагент				= СтрокаПараметров.Контрагент;
		ОснованиеОбъект.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
		ОснованиеОбъект.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаВходящего;
		ОснованиеОбъект.НомерВходящегоДокумента	= СтрокаПараметров.НомерВходящего;
	
		ОснованиеОбъект.СуммаДокумента			= СтрокаДокументаОснования.СуммаДокумента;
		ОснованиеОбъект.ВалютаДокумента			= СтрокаПараметров.ВалютаДокумента;
		ОснованиеОбъект.Комментарий				= "Создан автоматически документом <"+ЗаголовокДокумента+">";
		ОснованиеОбъект.ПометкаУдаления			= Ложь;	
		
		Если ТипЗнч(СтрокаДокументаОснования.НовоеОснование) = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС")
			или ТипЗнч(СтрокаДокументаОснования.НовоеОснование) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
			ОснованиеОбъект.РасчетныйДокумент		= Ссылка;
			ОснованиеОбъект.ТоварыИУслуги.Очистить();
		Иначе
			ОснованиеОбъект.ДокументОснование		= Ссылка;
		КонецЕсли;
			
		Для каждого СтрокаПараметров Из СтрокаДокументаОснования.Строки Цикл
			Если СоздаватьПодчиненныеДокументыОснования Тогда
				ДанныеПоСФ[СтрокаПараметров.НомерСтроки-1].СчетФактура = СтрокаДокументаОснования.НовоеОснование;
			КонецЕсли; 
			Если ТипЗнч(СтрокаДокументаОснования.НовоеОснование) = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС")
				ИЛИ ТипЗнч(СтрокаДокументаОснования.НовоеОснование) = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
				Если РасшифровкаСФ= Неопределено Тогда
					РасшифровкаСФ = ДополнительныеСведения.Выгрузить(); 
					РасшифровкаСФ.Индексы.Добавить("КлючСтроки");
				КонецЕсли;
				
				СтрокиРасшифровки = РасшифровкаСФ.НайтиСтроки( Новый структура("КлючСтроки",СтрокаПараметров.КлючСтроки));
				Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					НоваяСтрокаТУ = ОснованиеОбъект.ТоварыИУслуги.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТУ ,СтрокаРасшифровки);
					НоваяСтрокаТУ.Сумма = СтрокаРасшифровки.СуммаБезНДС;
					НоваяСтрокаТУ.СуммаНДС = СтрокаРасшифровки.НДС;
				КонецЦикла; 

			КонецЕсли;
		КонецЦикла; 
		Попытка
			ОснованиеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Для каждого СтрокаТабличнойЧасти Из СтрокаДокументаОснования.Строки Цикл
				ОбщегоНазначения.СообщитьОбОшибке("Для строки №" + СтрокаТабличнойЧасти.НомерСтроки + " не удалось обновить параметры документа-основания счета-фактуры.");
			КонецЦикла; 
		Конецпопытки;
		
	КонецЦикла;
	
	//Обновление счетов-фаткур
	ПараметрыДокументов.Свернуть("НовыйСчетФактура,Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ,ДатаСФВх, НомерСФ,НовоеОснование, ВалютаДокумента,НомерСтроки, КлючСтроки, ДатаВходящего, НомерВходящего, КорректировочныйСчетФактура, НомерИсходногоДокумента, ДатаИсходногоДокумента, Исправление, НомерИсправления, ДатаИсправления, УчитыватьИсправлениеИсходногоДокумента, НомерИсправленияИсходногоДокумента, ДатаИсправленияИсходногоДокумента", "Сумма, СуммаНДС, СуммаДокумента");
	ДеревоДокументов = УчетНДС.ТаблицуЗначенийВДеревоСГруппировкой(ПараметрыДокументов, "НовыйСчетФактура","СуммаДокумента, Сумма, СуммаНДС");

	Для каждого СтрокаДокументаОснования Из ДеревоДокументов.Строки Цикл
		Если не СтрокаДокументаОснования.Строки[0].ПредъявленСФ 
			или не ЗначениеЗаполнено(СтрокаДокументаОснования.НовыйСчетФактура) Тогда
			Продолжить;
		КонецЕсли; 
		
		ОснованиеОбъект = СтрокаДокументаОснования.НовыйСчетФактура.ПолучитьОбъект();
		СтрокаПараметров = СтрокаДокументаОснования.Строки[0];
		
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") тогда
			ОснованиеОбъект.Организация				= Организация;
			ОснованиеОбъект.Дата					= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ,Дата);
		Иначе
			Если не ОснованиеОбъект.Организация = Организация Тогда
				ОснованиеОбъект.Номер = "";
			КонецЕсли; 
			
			ОснованиеОбъект.Организация				= Организация;
			СтараяДата = ОснованиеОбъект.Дата;
			ОснованиеОбъект.Дата					= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ,Дата);
			РаботаСДиалогами.ПроверитьНомерДокумента(ОснованиеОбъект, СтараяДата);
		КонецЕсли; 
		
		ОснованиеОбъект.Контрагент				= СтрокаПараметров.Контрагент;
		
		Если Не ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") 
			Или ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
			ОснованиеОбъект.ДоговорКонтрагента	= СтрокаПараметров.ДоговорКонтрагента;
		КонецЕсли;
		ОснованиеОбъект.СуммаДокумента			= СтрокаДокументаОснования.СуммаДокумента;
		ОснованиеОбъект.ВалютаДокумента			= СтрокаПараметров.ВалютаДокумента;
		ОснованиеОбъект.Комментарий				= "Создан автоматически документом <"+ЗаголовокДокумента+">";
		ОснованиеОбъект.ПометкаУдаления			= Ложь;
		
		ОснованиеОбъект.СформированПриВводеНачальныхОстатковНДС = Истина;
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ОснованиеОбъект.ВидСчетаФактуры = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным
															, Перечисления.ВидСчетаФактурыВыставленного.НаАванс
															, Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
										
			Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
				ОснованиеОбъект.Сумма		= СтрокаДокументаОснования.Сумма + СтрокаДокументаОснования.СуммаНДС;
				ОснованиеОбъект.СуммаНДС	= СтрокаДокументаОснования.СуммаНДС;
				
				ОснованиеОбъект.Авансы.Очистить();
				
				Если РасшифровкаСФ = Неопределено Тогда
					РасшифровкаСФ = ДополнительныеСведения.Выгрузить(); 
					РасшифровкаСФ.Индексы.Добавить("КлючСтроки");
				КонецЕсли;
				СтрокиРасшифровки = РасшифровкаСФ.НайтиСтроки( Новый структура("КлючСтроки",СтрокаДокументаОснования.Строки[0].КлючСтроки));
				
				Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					НоваяСтрокаАвансы = ОснованиеОбъект.Авансы.Добавить();
					НоваяСтрокаАвансы.Сумма = СтрокаРасшифровки.СуммаБезНДС + СтрокаРасшифровки.НДС; 
					НоваяСтрокаАвансы.СтавкаНДС = СтрокаРасшифровки.СтавкаНДС; 
					НоваяСтрокаАвансы.СуммаНДС = СтрокаРасшифровки.НДС; 
				КонецЦикла; 
			КонецЕсли;
		Иначе
			
			Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
				ОснованиеОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
			Иначе
				ОснованиеОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			КонецЕсли;			
			
			Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
				ОснованиеОбъект.СуммаДокумента		= СтрокаДокументаОснования.Сумма + СтрокаДокументаОснования.СуммаНДС;
				
				ОснованиеОбъект.Авансы.Очистить();
				
				Если РасшифровкаСФ = Неопределено Тогда
					РасшифровкаСФ = ДополнительныеСведения.Выгрузить(); 
					РасшифровкаСФ.Индексы.Добавить("КлючСтроки");
				КонецЕсли;
				СтрокиРасшифровки = РасшифровкаСФ.НайтиСтроки( Новый структура("КлючСтроки",СтрокаДокументаОснования.Строки[0].КлючСтроки));
				
				Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
					НоваяСтрокаАвансы = ОснованиеОбъект.Авансы.Добавить();
					НоваяСтрокаАвансы.Сумма = СтрокаРасшифровки.СуммаБезНДС + СтрокаРасшифровки.НДС; 
					НоваяСтрокаАвансы.СтавкаНДС = СтрокаРасшифровки.СтавкаНДС; 
					НоваяСтрокаАвансы.СуммаНДС = СтрокаРасшифровки.НДС; 
				КонецЦикла; 
			КонецЕсли;
			
			ОснованиеОбъект.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаСФВх;
			ОснованиеОбъект.НомерВходящегоДокумента	= СтрокаПараметров.НомерСФ;
			
		КонецЕсли; 
		
		Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
			ОснованиеОбъект.ДатаПлатежноРасчетногоДокумента	= СтрокаПараметров.ДатаВходящего;
			ОснованиеОбъект.НомерПлатежноРасчетногоДокумента= СтрокаПараметров.НомерВходящего;
		ИначеЕсли ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") тогда
			ОснованиеОбъект.ДатаПлатежноРасчетногоДокумента	= Неопределено;
			ОснованиеОбъект.НомерПлатежноРасчетногоДокумента= Неопределено;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////////////////
		ОснованиеОбъект.Исправление		 = СтрокаПараметров.Исправление;
		ОснованиеОбъект.НомерИсправления = СтрокаПараметров.НомерИсправления;
		Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			ОснованиеОбъект.ДатаИсправления = СтрокаПараметров.ДатаИсправления;
			Если СтрокаПараметров.КорректировочныйСчетФактура Тогда
				ОснованиеОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
			Иначе
				Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
					ОснованиеОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
				Иначе
					ОснованиеОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ОснованиеОбъект.Исправление Тогда
				ОснованиеОбъект.НомерИсправления = 0;
				ОснованиеОбъект.ДатаИсправления  = "";				
			КонецЕсли;
			
		Иначе
			
			Если СтрокаПараметров.КорректировочныйСчетФактура Тогда
				ОснованиеОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
				
				ОснованиеОбъект.ДатаИсправляемогоКорректировочногоДокумента  =  СтрокаПараметров.ДатаСФВх;
				ОснованиеОбъект.НомерИсправляемогоКорректировочногоДокумента =  СтрокаПараметров.НомерСФ;
			Иначе
				ОснованиеОбъект.ВидСчетаФактуры = 
					?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным,
					Перечисления.ВидСчетаФактурыВыставленного.НаАванс, Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
					
				ОснованиеОбъект.НомерИсходногоДокумента		 = СтрокаПараметров.НомерСФ;
				ОснованиеОбъект.ДатаИсходногоДокумента		 = СтрокаПараметров.ДатаСФВх;
			КонецЕсли;	
			
			Если НЕ ОснованиеОбъект.Исправление Тогда
				ОснованиеОбъект.НомерИсправления = 0;
			КонецЕсли;
			
		КонецЕсли;
				
		Если СтрокаПараметров.КорректировочныйСчетФактура Тогда
			Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				 				 
				Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
					ОснованиеОбъект.СуммаДокумента     = 0;
					ОснованиеОбъект.СуммаНДСДокумента  = 0;
					ОснованиеОбъект.СуммаУвеличение    = 0;
					ОснованиеОбъект.СуммаНДСУвеличение = 0;
					ОснованиеОбъект.СуммаУменьшение    = СтрокаДокументаОснования.СуммаДокумента;
					ОснованиеОбъект.СуммаНДСУменьшение = СтрокаДокументаОснования.СуммаНДС;
				ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
					ОснованиеОбъект.СуммаДокумента     = 0;
					ОснованиеОбъект.СуммаНДСДокумента  = 0;
					ОснованиеОбъект.СуммаУвеличение    = СтрокаДокументаОснования.СуммаДокумента;
					ОснованиеОбъект.СуммаНДСУвеличение = СтрокаДокументаОснования.СуммаНДС;
					ОснованиеОбъект.СуммаУменьшение    = 0;
					ОснованиеОбъект.СуммаНДСУменьшение = 0;
				Иначе
					ОснованиеОбъект.СуммаДокумента     = СтрокаДокументаОснования.СуммаДокумента;
					ОснованиеОбъект.СуммаНДСДокумента  = СтрокаДокументаОснования.СуммаНДС;
					ОснованиеОбъект.СуммаУвеличение    = 0;
					ОснованиеОбъект.СуммаНДСУвеличение = 0;
					ОснованиеОбъект.СуммаУменьшение    = 0;
					ОснованиеОбъект.СуммаНДСУменьшение = 0;
				КонецЕсли;				
			Иначе
				Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
					ОснованиеОбъект.СуммаДокумента     = 0;
					ОснованиеОбъект.СуммаНДСДокумента  = 0;
					ОснованиеОбъект.СуммаУвеличение    = СтрокаДокументаОснования.СуммаДокумента;
					ОснованиеОбъект.СуммаНДСУвеличение = СтрокаДокументаОснования.СуммаНДС;
					ОснованиеОбъект.СуммаУменьшение    = 0;
					ОснованиеОбъект.СуммаНДСУменьшение = 0;
				Иначе
					ОснованиеОбъект.СуммаДокумента		= СтрокаДокументаОснования.СуммаДокумента;
					ОснованиеОбъект.СуммаНДСДокумента	= СтрокаДокументаОснования.СуммаНДС;
					ОснованиеОбъект.СуммаУвеличение     = 0;
					ОснованиеОбъект.СуммаНДСУвеличение  = 0;
					ОснованиеОбъект.СуммаУменьшение     = 0;
					ОснованиеОбъект.СуммаНДСУменьшение  = 0;
				КонецЕсли;	
			КонецЕсли;
		Иначе
			ОснованиеОбъект.СуммаДокумента     = СтрокаДокументаОснования.СуммаДокумента;
			ОснованиеОбъект.СуммаНДСДокумента  = СтрокаДокументаОснования.СуммаНДС;
			ОснованиеОбъект.СуммаУвеличение    = 0;
			ОснованиеОбъект.СуммаНДСУвеличение = 0;
			ОснованиеОбъект.СуммаУменьшение    = 0;
			ОснованиеОбъект.СуммаНДСУменьшение = 0;
		КонецЕсли;
		
		ОснованиеОбъект.ДокументыОснования.Очистить();
		
		Для каждого СтрокаПараметров Из СтрокаДокументаОснования.Строки Цикл
			Если ЗначениеЗаполнено(СтрокаПараметров.НовоеОснование) Тогда
				
				Если СтрокаПараметров.КорректировочныйСчетФактура Тогда
					
					НоваяСтрока                    = ОснованиеОбъект.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование  = СтрокаПараметров.НовоеОснование;
					НоваяСтрока.НомерИсходногоДокумента = СтрокаПараметров.НомерИсходногоДокумента;
					НоваяСтрока.ДатаИсходногоДокумента  = СтрокаПараметров.ДатаИсходногоДокумента;
					НоваяСтрока.УчитыватьИсправлениеИсходногоДокумента = СтрокаПараметров.УчитыватьИсправлениеИсходногоДокумента;
					Если СтрокаПараметров.УчитыватьИсправлениеИсходногоДокумента Тогда
						НоваяСтрока.НомерИсправленияИсходногоДокумента = СтрокаПараметров.НомерИсправленияИсходногоДокумента;
						НоваяСтрока.ДатаИсправленияИсходногоДокумента  = СтрокаПараметров.ДатаИсправленияИсходногоДокумента;
					КонецЕсли;
					
					Если ТипЗнч(СтрокаДокументаОснования.НовыйСчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
						Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
							НоваяСтрока.СуммаУменьшение    		= СтрокаПараметров.Сумма + СтрокаПараметров.СуммаНДС;
							НоваяСтрока.СуммаНДСУменьшение 		= СтрокаПараметров.СуммаНДС;
						ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
							НоваяСтрока.СуммаУвеличение    		= СтрокаПараметров.Сумма + СтрокаПараметров.СуммаНДС;
							НоваяСтрока.СуммаНДСУвеличение 		= СтрокаПараметров.СуммаНДС;
						КонецЕсли;				
					Иначе
						Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
							НоваяСтрока.СуммаУвеличение    		= СтрокаПараметров.Сумма + СтрокаПараметров.СуммаНДС;
							НоваяСтрока.СуммаНДСУвеличение		= СтрокаПараметров.СуммаНДС;
						КонецЕсли;	
					КонецЕсли;
					
				Иначе
					
					ОснованиеОбъект.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.НовоеОснование;
					
				КонецЕсли;
				
			КонецЕсли; 
		КонецЦикла; 
		
		КолонкиГруппировок	= "ДокументОснование,НомерИсходногоДокумента,ДатаИсходногоДокумента,НомерИсправленияИсходногоДокумента,
		|ДатаИсправленияИсходногоДокумента,УчитыватьИсправлениеИсходногоДокумента";
		КолонкиСуммирования	= "СуммаУвеличение,СуммаУменьшение,СуммаНДСУвеличение,СуммаНДСУменьшение";
        ОснованиеОбъект.ДокументыОснования.Свернуть(КолонкиГруппировок,КолонкиСуммирования);
		
		//////////////////////////////////////////////////////////////////////////////////////////////////
		
		Попытка
			ОснованиеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Для каждого СтрокаТабличнойЧасти Из СтрокаДокументаОснования.Строки Цикл
				ОбщегоНазначения.СообщитьОбОшибке("Для строки №" + СтрокаТабличнойЧасти.НомерСтроки + " не удалось обновить параметры документа-основания счета-фактуры.");
			КонецЦикла; 
		Конецпопытки;

	КонецЦикла;
	
КонецПроцедуры
#КонецЕсли

Функция ПолучитьТаблицуПодчиненныхДокументов(ДокументОснование, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов) экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВНО_НДС",ДокументОснование);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПодчиненныеДокументы.Контрагент,
		|	ПодчиненныеДокументы.ДоговорКонтрагента,
		|	ПодчиненныеДокументы.ДатаВходящегоДокумента КАК ДатаВходящего,
		|	ПодчиненныеДокументы.НомерВходящегоДокумента КАК НомерВходящегоКакУказан,
		|	ВЫБОР
		|		КОГДА СчетаФактуры.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПредъявленСФ,
		|	ЕСТЬNULL(СчетаФактуры.ДатаСФ, НЕОПРЕДЕЛЕНО) КАК ДатаСФ,
		|	ЕСТЬNULL(СчетаФактуры.НомерСФ, НЕОПРЕДЕЛЕНО) КАК НомерСФКакУказан,
		|	ПодчиненныеДокументы.Ссылка КАК ДокументОснование,
		|	СчетаФактуры.Ссылка КАК СчетФактура
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПодчиненныйДокумент.Ссылка КАК Ссылка,
		|		ПодчиненныйДокумент.Контрагент КАК Контрагент,
		|		ПодчиненныйДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ПодчиненныйДокумент.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
		|		ПодчиненныйДокумент.НомерВходящегоДокумента КАК НомерВходящегоДокумента
		|	ИЗ
		|		Документ.ОтражениеПоступленияТоваровИУслугНДС КАК ПодчиненныйДокумент
		|	ГДЕ
		|		ПодчиненныйДокумент.РасчетныйДокумент = &ВНО_НДС
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПодчиненныйДокумент.Ссылка,
		|		ПодчиненныйДокумент.Контрагент,
		|		ПодчиненныйДокумент.ДоговорКонтрагента,
		|		ПодчиненныйДокумент.ДатаВходящегоДокумента,
		|		ПодчиненныйДокумент.НомерВходящегоДокумента
		|	ИЗ
		|		Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ПодчиненныйДокумент
		|	ГДЕ
		|		ПодчиненныйДокумент.РасчетныйДокумент = &ВНО_НДС
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПодчиненныйДокумент.Ссылка,
		|		ПодчиненныйДокумент.Контрагент,
		|		ПодчиненныйДокумент.ДоговорКонтрагента,
		|		ПодчиненныйДокумент.ДатаВходящегоДокумента,
		|		ПодчиненныйДокумент.НомерВходящегоДокумента
		|	ИЗ
		|		Документ.ДокументРасчетовСКонтрагентом КАК ПодчиненныйДокумент
		|	ГДЕ
		|		ПодчиненныйДокумент.ДокументОснование = &ВНО_НДС) КАК ПодчиненныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОснованияСФ.Ссылка КАК Ссылка,
		|			НАЧАЛОПЕРИОДА(ОснованияСФ.Ссылка.Дата, ДЕНЬ) КАК ДатаСФ,
		|			ОснованияСФ.Ссылка.Номер КАК НомерСФ,
		|			ОснованияСФ.ДокументОснование КАК ДокументОснование
		|		ИЗ
		|			Документ.СчетФактураВыданный.ДокументыОснования КАК ОснованияСФ
		|		ГДЕ
		|			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
		|			И ВЫБОР
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ДокументРасчетовСКонтрагентом).ДокументОснование = &ВНО_НДС
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ОтражениеРеализацииТоваровИУслугНДС).РасчетныйДокумент = &ВНО_НДС
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ОснованияСФ.Ссылка,
		|			ВЫБОР
		|				КОГДА ОснованияСФ.Ссылка.Исправление
		|					ТОГДА ОснованияСФ.Ссылка.Дата
		|				ИНАЧЕ ОснованияСФ.Ссылка.ДатаВходящегоДокумента
		|			КОНЕЦ,
		|			ОснованияСФ.Ссылка.НомерВходящегоДокумента,
		|			ОснованияСФ.ДокументОснование
		|		ИЗ
		|			Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСФ
		|		ГДЕ
		|			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
		|			И ВЫБОР
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ОтражениеПоступленияТоваровИУслугНДС).РасчетныйДокумент = &ВНО_НДС
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ДокументРасчетовСКонтрагентом).ДокументОснование = &ВНО_НДС
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) КАК СчетаФактуры
		|		ПО ПодчиненныеДокументы.Ссылка = СчетаФактуры.ДокументОснование";
	
	ПараметрыДокументов = Запрос.Выполнить().Выгрузить();
	ПараметрыДокументов.Колонки.Добавить("НомерСФ");
	ПараметрыДокументов.Колонки.Добавить("НомерВходящего");
	ПараметрыДокументов.Индексы.Добавить("Контрагент, ДоговорКонтрагента");
	
	Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
		СтрокаПараметров.НомерВходящего = ПолучитьНомерДляСравнения(СтрокаПараметров.НомерВходящегоКакУказан);
		СтрокаПараметров.НомерСФ		= ПолучитьНомерДляСравнения(СтрокаПараметров.НомерСФКакУказан, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
	КонецЦикла; 
	ПараметрыДокументов.Свернуть("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего, ДокументОснование, СчетФактура","");
	
	Возврат ПараметрыДокументов;
	
КонецФункции

Функция ПолучитьТаблицуИспользуемыхПодчиненныхДокументов() экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВНО_НДС",Ссылка);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	Запрос.УстановитьПараметр("ДанныеПоСФ", ДанныеПоСФ);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЕСТЬNULL(ДанныеПоСФ.СчетФактура, НЕОПРЕДЕЛЕНО) КАК ДокументОснованиеНовый,
		|	ПодчиненныеДокументы.Ссылка КАК ДокументОснование,
		|	СчетаФактуры.Ссылка КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА ДанныеПоСФ.СчетФактура ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Используется,
		|	ПодчиненныеДокументы.Проведен,
		|	ПодчиненныеДокументы.ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА ДанныеПоСФ.СчетФактура ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ВЫБОР
		|					КОГДА СчетаФактуры.Ссылка ЕСТЬ NULL 
		|						ТОГДА ЛОЖЬ
		|					КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям)
		|							И СчетаФактуры.Ссылка ССЫЛКА Документ.СчетФактураПолученный
		|						ТОГДА ИСТИНА
		|					КОГДА (НЕ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям))
		|							И СчетаФактуры.Ссылка ССЫЛКА Документ.СчетФактураВыданный
		|						ТОГДА ВЫБОР
		|								КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным)
		|										И СчетаФактуры.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс)
		|									ТОГДА ИСТИНА
		|								КОГДА (НЕ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным))
		|										И (НЕ СчетаФактуры.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАванс))
		|									ТОГДА ИСТИНА
		|								ИНАЧЕ ЛОЖЬ
		|							КОНЕЦ
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|				И ДанныеПоСФ.ПредъявленСФ
		|	КОНЕЦ КАК СФИспользуется,
		|	ЕСТЬNULL(СчетаФактуры.Проведен, ЛОЖЬ) КАК СФПроведен,
		|	ЕСТЬNULL(СчетаФактуры.ПометкаУдаления, ЛОЖЬ) КАК СФПометкаУдаления,
		|	ДанныеПоСФ.Контрагент,
		|	ДанныеПоСФ.ДоговорКонтрагента,
		|	ДанныеПоСФ.НомерСтроки,
		|	ДанныеПоСФ.Сумма,
		|	ДанныеПоСФ.СуммаНДС,
		|	ДанныеПоСФ.КлючСтроки,
		|	ДанныеПоСФ.ВалютаДокумента,
		|	ДанныеПоСФ.СуммаДокумента
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПодчиненныйДокумент.Ссылка КАК Ссылка,
		|		ПодчиненныйДокумент.Проведен КАК Проведен,
		|		ПодчиненныйДокумент.ПометкаУдаления КАК ПометкаУдаления
		|	ИЗ
		|		Документ.ОтражениеПоступленияТоваровИУслугНДС КАК ПодчиненныйДокумент
		|	ГДЕ
		|		ПодчиненныйДокумент.РасчетныйДокумент = &ВНО_НДС
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПодчиненныйДокумент.Ссылка,
		|		ПодчиненныйДокумент.Проведен,
		|		ПодчиненныйДокумент.ПометкаУдаления
		|	ИЗ
		|		Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ПодчиненныйДокумент
		|	ГДЕ
		|		ПодчиненныйДокумент.РасчетныйДокумент = &ВНО_НДС
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПодчиненныйДокумент.Ссылка,
		|		ПодчиненныйДокумент.Проведен,
		|		ПодчиненныйДокумент.ПометкаУдаления
		|	ИЗ
		|		Документ.ДокументРасчетовСКонтрагентом КАК ПодчиненныйДокумент
		|	ГДЕ
		|		ПодчиненныйДокумент.ДокументОснование = &ВНО_НДС) КАК ПодчиненныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОснованияСФ.Ссылка КАК Ссылка,
		|			НАЧАЛОПЕРИОДА(ОснованияСФ.Ссылка.Дата, ДЕНЬ) КАК ДатаСФ,
		|			ОснованияСФ.ДокументОснование КАК ДокументОснование,
		|			ОснованияСФ.Ссылка.ВидСчетаФактуры КАК ВидСчетаФактуры,
		|			ОснованияСФ.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
		|			ОснованияСФ.Ссылка.Проведен КАК Проведен
		|		ИЗ
		|			Документ.СчетФактураВыданный.ДокументыОснования КАК ОснованияСФ
		|		ГДЕ
		|			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
		|			И ВЫБОР
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ДокументРасчетовСКонтрагентом).ДокументОснование = &ВНО_НДС
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ОтражениеРеализацииТоваровИУслугНДС
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ОтражениеРеализацииТоваровИУслугНДС).РасчетныйДокумент = &ВНО_НДС
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ОснованияСФ.Ссылка,
		|			ОснованияСФ.Ссылка.ДатаВходящегоДокумента,
		|			ОснованияСФ.ДокументОснование,
		|			NULL,
		|			ОснованияСФ.Ссылка.ПометкаУдаления,
		|			ОснованияСФ.Ссылка.Проведен
		|		ИЗ
		|			Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованияСФ
		|		ГДЕ
		|			ОснованияСФ.Ссылка.СформированПриВводеНачальныхОстатковНДС
		|			И ВЫБОР
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ДокументРасчетовСКонтрагентом).ДокументОснование = &ВНО_НДС
		|					КОГДА ОснованияСФ.ДокументОснование ССЫЛКА Документ.ОтражениеПоступленияТоваровИУслугНДС
		|						ТОГДА ВЫРАЗИТЬ(ОснованияСФ.ДокументОснование КАК Документ.ОтражениеПоступленияТоваровИУслугНДС).РасчетныйДокумент = &ВНО_НДС
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ) КАК СчетаФактуры
		|		ПО ПодчиненныеДокументы.Ссылка = СчетаФактуры.ДокументОснование
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ИНАЧЕ ВНО_НДСДанныеПоСФ.Контрагент
		|			КОНЕЦ КАК Контрагент,
		|			ВЫБОР
		|				КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления)
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|				ИНАЧЕ ВНО_НДСДанныеПоСФ.ДоговорКонтрагента
		|			КОНЕЦ КАК ДоговорКонтрагента,
		|			ВЫБОР
		|				КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям)
		|					ТОГДА ВНО_НДСДанныеПоСФ.ПредъявленСФ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ КАК ПредъявленСФ,
		|			ВНО_НДСДанныеПоСФ.ДатаСФ КАК ДатаСФ,
		|			ВНО_НДСДанныеПоСФ.НомерСФ КАК НомерСФКакУказан,
		|			ВНО_НДСДанныеПоСФ.ДатаПлатежноРасчетногоДокумента КАК ДатаВходящего,
		|			ВНО_НДСДанныеПоСФ.НомерПлатежноРасчетногоДокумента КАК НомерВходящегоКакУказан,
		|			ВНО_НДСДанныеПоСФ.СчетФактура КАК СчетФактура,
		|			ВНО_НДСДанныеПоСФ.НомерСтроки КАК НомерСтроки,
		|			ВНО_НДСДанныеПоСФ.СуммаБезНДС КАК Сумма,
		|			ВНО_НДСДанныеПоСФ.НДС КАК СуммаНДС,
		|			ВНО_НДСДанныеПоСФ.КлючСтроки КАК КлючСтроки,
		|			ВЫБОР
		|				КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным)
		|					ТОГДА ВНО_НДСДанныеПоСФ.ВалютаАванса
		|				ИНАЧЕ &ВалютаРегламентированногоУчета
		|			КОНЕЦ КАК ВалютаДокумента,
		|			ВЫБОР
		|				КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным)
		|					ТОГДА ВНО_НДСДанныеПоСФ.ВалютнаяСуммаСНДС
		|				ИНАЧЕ ВНО_НДСДанныеПоСФ.СуммаБезНДС + ВНО_НДСДанныеПоСФ.НДС
		|			КОНЕЦ КАК СуммаДокумента
		|		ИЗ
		|			Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВНО_НДСДанныеПоСФ
		|		ГДЕ
		|			ВНО_НДСДанныеПоСФ.Ссылка = &ВНО_НДС) КАК ДанныеПоСФ
		|		ПО ПодчиненныеДокументы.Ссылка = ДанныеПоСФ.СчетФактура
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументОснование,
		|	СФПометкаУдаления,
		|	СФПроведен УБЫВ,
		|	СчетаФактуры.ДатаСФ";
	
	ПараметрыДокументов = Запрос.Выполнить().Выгрузить();
	//ПараметрыДокументов.Колонки.Добавить("НомерСФ");
	//ПараметрыДокументов.Колонки.Добавить("НомерВходящего");
	//ПараметрыДокументов.Индексы.Добавить("Контрагент, ДоговорКонтрагента");
	//
	//Для каждого СтрокаПараметров Из ПараметрыДокументов Цикл
	//	СтрокаПараметров.НомерВходящего = ПолучитьНомерДляСравнения(СтрокаПараметров.НомерВходящегоКакУказан);
	//	СтрокаПараметров.НомерСФ		= ПолучитьНомерДляСравнения(СтрокаПараметров.НомерСФКакУказан, ИспользоватьПрефиксыПриОтработкеНомеров, СписокПрефиксов);
	//КонецЦикла; 
	//ПараметрыДокументов.Свернуть("Контрагент, ДоговорКонтрагента, ПредъявленСФ, ДатаСФ, НомерСФ, ДатаВходящего, НомерВходящего, ДокументОснование, СчетФактура","");
	
	Возврат ПараметрыДокументов;
	
КонецФункции

Процедура ОтработкаИзмененияДатыИлиНомераПодчиненныхДокументов(ПараметрыДокументов,ПодчиненныеДокументы)
	
	НаборТекущихДокументов = ПараметрыДокументов.Скопировать();
	НаборТекущихДокументов.Свернуть("ДатаВходящего,НомерВходящего,ТекущийДокумент, ДатаСФ, НомерСФ");
	
	НаборТекущихДокументов = УчетНДС.ТаблицуЗначенийВДеревоСГруппировкой(НаборТекущихДокументов, "ТекущийДокумент");
	
	Для каждого СтрокаДокумента Из НаборТекущихДокументов.Строки Цикл
		Если не ЗначениеЗаполнено(СтрокаДокумента.ТекущийДокумент) Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаНовогоНомера = Неопределено;
		// По одному документу разные номера. Это недопустимо.
		// Необходимо затереть ссылки на текущий документ в таблице параметров.
		Для каждого СтрокаДаты_Номера Из СтрокаДокумента.Строки Цикл
			СтруктураПоиска = Новый Структура ("ДокументОснование, ДатаВходящего, НомерВходящего"
							, СтрокаДаты_Номера.ТекущийДокумент,СтрокаДаты_Номера.ДатаВходящего,СтрокаДаты_Номера.НомерВходящего);
			СтрокиПодчиненныхДокументов = ПодчиненныеДокументы.НайтиСтроки(СтруктураПоиска);
			Если СтрокиПодчиненныхДокументов.Количество() > 0 Тогда
				// Это старый номер. Оставляем его у основания, Затираем ссылки на текущий документ по строкам таблицы параметров.
				СтрокаНовогоНомера = СтрокаДаты_Номера;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
			 
		Если СтрокаНовогоНомера = Неопределено Тогда
			// Ни один из номеров не соотвествует введенному ранее. 
			// Берем номер из первой строки
			СтрокаНовогоНомера = СтрокаДокумента.Строки[0];
			ЗаменитьНомерВТаблицеПодчиненныхДокументов = Истина;
		Иначе
			ЗаменитьНомерВТаблицеПодчиненныхДокументов = Ложь;
		КонецЕсли; 
		
		Если ЗаменитьНомерВТаблицеПодчиненныхДокументов Тогда
			СтрокиДляЗамены = ПодчиненныеДокументы.НайтиСтроки(Новый Структура("ДокументОснование",СтрокаНовогоНомера.ТекущийДокумент));
			Для каждого СтрокаДляЗаменыНомера Из СтрокиДляЗамены Цикл
				СтрокаДляЗаменыНомера.ДатаВходящего		= СтрокаНовогоНомера.ДатаВходящего;
				СтрокаДляЗаменыНомера.НомерВходящего	= СтрокаНовогоНомера.НомерВходящего;
			КонецЦикла; 
		КонецЕсли; 
		
		Если СтрокаДокумента.Строки.Количество()>1 Тогда
			СтрокиТаблицыПараметров = ПараметрыДокументов.НайтиСтроки(Новый Структура("ТекущийДокумент",СтрокаДокумента.ТекущийДокумент));
			Для каждого СтрокаТаблицыПараметров Из СтрокиТаблицыПараметров Цикл
				Если СтрокаТаблицыПараметров.ДатаВходящего = СтрокаНовогоНомера.ДатаВходящего
					и СтрокаТаблицыПараметров.НомерВходящего = СтрокаНовогоНомера.НомерВходящего
				 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаТаблицыПараметров.ТекущийДокумент = Неопределено;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры
 
// Создает документ вида ДокументыРасчетовСКонтрагентами
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.ДокументыРасчетовСКонтрагентами (не записан)
//
Функция СоздатьДокументРасчетов(СтрокаПараметров, ДокументОснование)
	НовыйДокумент = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаВходящего), СтрокаПараметров.ДатаВходящего,?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ),СтрокаПараметров.ДатаСФ,ДокументОснование.Дата));
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.ДокументОснование			= ДокументОснование;
	НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаВходящего;
	НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерВходящего;
	
	Возврат НовыйДокумент;
	
КонецФункции // ()

// Создает документ вида ОтражениеПоступленияТоваровИУслугНДС
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.ОтражениеПоступленияТоваровИУслугНДС (не записан)
//
Функция СоздатьДокументОтражениеПоступленияТоваровИУслугНДС(СтрокаПараметров, ДокументОснование)
	НовыйДокумент = Документы.ОтражениеПоступленияТоваровИУслугНДС.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаВходящего), СтрокаПараметров.ДатаВходящего,?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ),СтрокаПараметров.ДатаСФ,ДокументОснование.Дата));
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.РасчетныйДокумент			= ДокументОснование;
	НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаВходящего;
	НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерВходящего;
	
	Возврат НовыйДокумент;
	
КонецФункции // ()

// Создает документ вида ОтражениеРеализацииТоваровИУслугНДС
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.ОтражениеРеализацииТоваровИУслугНДС (не записан)
//
Функция СоздатьДокументОтражениеРеализацииТоваровИУслугНДС(СтрокаПараметров, ДокументОснование)
	НовыйДокумент = Документы.ОтражениеРеализацииТоваровИУслугНДС.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаВходящего), СтрокаПараметров.ДатаВходящего,?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ),СтрокаПараметров.ДатаСФ,ДокументОснование.Дата));
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.РасчетныйДокумент			= ДокументОснование;
	НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаВходящего;
	НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерВходящего;
	
	Возврат НовыйДокумент;
	
КонецФункции // ()

// Создает документ вида СчетФактураПолученный
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.СчетФактураПолученный (не записан)
//
Функция СоздатьДокументСчетФактураПолученный(СтрокаПараметров)
	
	НовыйДокумент = Документы.СчетФактураПолученный.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ, Дата);
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.Продавец                  = СтрокаПараметров.Продавец;
	НовыйДокумент.ДокументОснование			= СтрокаПараметров.МассивОснований[0];
	НовыйДокумент.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.МассивОснований[0];
	НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаСФ;
	НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерСФ;
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
		НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
	Иначе
		НовыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
	КонецЕсли;
	НовыйДокумент.СформированПриВводеНачальныхОстатковНДС = Истина;
	
	Возврат НовыйДокумент;
	
КонецФункции // ()

// Создает документ вида СчетФактураВыданный
// и заполняет его реквизиты по по данным переданным в строке параметров
//
// Возвращаемое значение:
//   ДокументОбъект.СчетФактураВыданный (не записан)
//
Функция СоздатьДокументСчетФактураВыданный(СтрокаПараметров, ПрефиксОрганизации)
	
	НовыйДокумент = Документы.СчетФактураВыданный.СоздатьДокумент();
	НовыйДокумент.Организация				= Организация;
	НовыйДокумент.Дата						= ?(ЗначениеЗаполнено(СтрокаПараметров.ДатаСФ), СтрокаПараметров.ДатаСФ, Дата);
	НовыйДокумент.Контрагент				= СтрокаПараметров.Контрагент;
	НовыйДокумент.ДоговорКонтрагента		= СтрокаПараметров.ДоговорКонтрагента;
	НовыйДокумент.ДокументОснование			= СтрокаПараметров.МассивОснований[0];
	НовыйДокумент.ДокументыОснования.Добавить().ДокументОснование = СтрокаПараметров.МассивОснований[0];
	//НовыйДокумент.ДатаВходящегоДокумента	= СтрокаПараметров.ДатаСФ;
	//НовыйДокумент.НомерВходящегоДокумента	= СтрокаПараметров.НомерСФ;
	НовыйДокумент.СформированПриВводеНачальныхОстатковНДС = Истина;
	
	НовыйДокумент.ВидСчетаФактуры = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным
													 				, Перечисления.ВидСчетаФактурыВыставленного.НаАванс
																	, Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	// Установка номера формируемого документа
	НовыйДокумент.Номер = УстановитьНомерСФсУчетомПрефикса(СтрокаПараметров.НомерСФ, ПрефиксОрганизации, НовыйДокумент.Метаданные().ДлинаНомера);
	
	Возврат НовыйДокумент;
	
КонецФункции // ()

// Формирует номер документа с учетом префиксов с указанной значащей частью
Функция УстановитьНомерСФсУчетомПрефикса(НомерСФ, Префикс,ДлинаНомераДок)
	
	ЧистыйНомер = СокрЛП(НомерСФ);
	НовыйНомер = Префикс;
	
	Если СтрДлина(ЧистыйНомер) + СтрДлина(НовыйНомер) > ДлинаНомераДок Тогда
		Возврат ЧистыйНомер;
	КонецЕсли;		
	
	Пока СтрДлина(ЧистыйНомер) + СтрДлина(НовыйНомер) < ДлинаНомераДок Цикл
		НовыйНомер = НовыйНомер + "0";
	КонецЦикла;
	
	Возврат НовыйНомер+ЧистыйНомер;

КонецФункции

// Сокращает номер документа - удаляет префиксы и лидирующие 0
//
// Возвращаемое значение:
//   Строка   – <описание возвращаемого значения>
//
Функция ПолучитьНомерДляСравнения(Знач Номер, ИспользоватьПрефиксы = Ложь, СписокПрефиксов = Неопределено)
	
	Если не ЗначениеЗаполнено(Номер) Тогда
	    Возврат "";
	КонецЕсли; 
	
	Если ИспользоватьПрефиксы Тогда
		//Список префиксов определен ранее	
	Иначе
		СписокПрефиксов = Новый СписокЗначений();
	КонецЕсли;
	
	Если СписокПрефиксов.Количество() = 0 Тогда
		СписокПрефиксов.Добавить("");
	КонецЕсли;
	
	Для Каждого ЭлементСписка ИЗ СписокПрефиксов Цикл
		
		ТекущийПрефикс = ЭлементСписка.Значение;
		
		// удаление префикса из номера документа
		Если Найти(Номер, ТекущийПрефикс)=1 Тогда 
			Номер = Сред(Номер, СтрДлина(ТекущийПрефикс)+1);
		КонецЕсли;
		
		// так же, может остаться "минус" впереди
		Если Лев(Номер, 1) = "-" Тогда
			Номер = Сред(Номер, 2);
		КонецЕсли;
		
		// удаление ведущих нулей
		Пока Лев(Номер, 1)="0" Цикл
			Номер = Сред(Номер, 2);
		КонецЦикла;
	КонецЦикла;

	Возврат СокрЛП(Номер);

КонецФункции // СократитьНомерДокумента()

Процедура СинхронизацияСостоянияПодчиненныхДокументов()
	
	Если мПодчиненныеДокументы = Неопределено Тогда
		 СформироватьСчетаФактуры(Ложь, Ложь);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	РезультатЗапроса = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = РезультатЗапроса;
	Запрос.УстановитьПараметр("таблица", мПодчиненныеДокументы);
	Запрос.УстановитьПараметр("ПометкаУдаления",ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен", 		Проведен и не ПометкаУдаления);
	
	Запрос.Текст = 
		"ВЫБРАТЬ *
		| Поместить ПодчиненныеДокументы
		|ИЗ
		|	&таблица КАК ПодчиненныеДокументы ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// Синхронизация состояния не требуется
		Возврат;
	КонецЕсли; 
	
	Запрос.Текст ="Выбрать 
		|	ПодчиненныеДокументы.Ссылка КАК Ссылка,
		|	ПодчиненныеДокументы.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
		|	ПодчиненныеДокументы.Ссылка.Проведен КАК Проведен,
		|	ВЫБОР
		|		КОГДА ПодчиненныеДокументы.Ссылка Ссылка Документ.ДокументРасчетовСКонтрагентом
		|			 ТОГДА ЛОЖЬ
		|		КОГДА ПодчиненныеДокументы.Использован
		|			 ТОГДА &Проведен 
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Провести,
		|	ВЫБОР
		|		КОГДА ПодчиненныеДокументы.Использован
		|			ТОГДА &ПометкаУдаления
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПометитьНаУдаление
		|ИЗ
		|	ПодчиненныеДокументы КАК ПодчиненныеДокументы
		|ГДЕ
		|	ВЫБОР
		|			КОГДА не Использован
		|				ТОГДА (НЕ ПодчиненныеДокументы.Ссылка.ПометкаУдаления)
		|			КОГДА ПодчиненныеДокументы.Ссылка Ссылка Документ.ДокументРасчетовСКонтрагентом
		|				ТОГДА НЕ ПодчиненныеДокументы.Ссылка.ПометкаУдаления = &ПометкаУдаления
		|			ИНАЧЕ (НЕ(ПодчиненныеДокументы.Ссылка.Проведен = &Проведен
		|							И ПодчиненныеДокументы.Ссылка.ПометкаУдаления = &ПометкаУдаления))
		|		КОНЕЦ
		|	Упорядочить По НомерСтроки " + ?(ПометкаУдаления," Убыв","");
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		Если не ЗначениеЗаполнено(Результат.Ссылка) Тогда
			Продолжить;
		КонецЕсли; 
		
		Попытка
			ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
			Если Результат.ПометитьНаУдаление Тогда
			 	ДокументОбъект.УстановитьПометкуУдаления(Истина);
			ИначеЕсли Результат.Провести тогда
				Если Результат.ПометкаУдаления тогда
					ДокументОбъект.ПометкаУдаления = Ложь;
				КонецЕсли;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);				
			ИначеЕсли Результат.Проведен тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);  
			Иначе
			 	ДокументОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли; 
		Исключение
		    // Не удалось обновить документ. Он сам об этом расскажет.
		КонецПопытки;
	КонецЦикла; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ)

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабЧасти(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ТаблицаПоСобытиям = ПодготовитьТаблицуРазвернутуюПоСобытиям(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Получим необходимые данные для отражения расчетов с контрагентами
	ТаблицаПоРасчетам = ПодготовитьТаблицуПоРасчетам(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиРасчетыСКонтрагентами(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям
		Или ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковПокупка(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковПродажа(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковАвансы(СтруктураШапкиДокумента, Отказ, Заголовок);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		ТаблицаПоДвижениям = ПодготовитьТаблицуНачальныхОстатковАвансыВыданные(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;
	
	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоСобытиям, ТаблицаПоРасчетам, ТаблицаПоДвижениям, Отказ, Заголовок);
			
	КонецЕсли;
	
	Если Не Отказ Тогда
		СинхронизацияСостоянияПодчиненныхДокументов();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	СинхронизацияСостоянияПодчиненныхДокументов();	

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Для каждого Строка Из ДанныеПоСФ Цикл
		Строка.СчетФактура = Неопределено;	
	КонецЦикла; 
	
	Для каждого Строка Из ДанныеПоСФ Цикл
		Строка.СчетФактура = Неопределено;	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если НЕ ОбменДанными.Загрузка Тогда
		Если ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда 
			СинхронизацияСостоянияПодчиненныхДокументов();
		Конецесли;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

