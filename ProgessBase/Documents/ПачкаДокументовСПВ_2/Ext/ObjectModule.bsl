
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Проверяет правильность заполнения документа
//
Процедура ПроверитьПравильностьЗаполненияДокумента(ЕстьОшибки, СообщатьОбУспехе = Истина, ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоСтрокамДокумента = Неопределено) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок =  "Проверка документа " + СокрЛП(Ссылка);
	
	Обработка = глЗначениеПеременной("глОбработкаСообщений");
	СообщенияРазделПроверки = Обработка.ДобавитьСообщение(Заголовок, Перечисления.ВидыСообщений.Информация);

	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	Если ВыборкаПоСтрокамДокумента = Неопределено Тогда
		ВыборкаПоСтрокамДокумента = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать();
	КонецЕсли;
	
	Отказ = Ложь;
	КоличествоДокументов = ВыборкаПоШапкеДокумента.Количество;
	Если КоличествоДокументов = 0 Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Список застрахованных лиц пуст!", Отказ, Заголовок,,, СообщенияРазделПроверки);
	КонецЕсли;
	Если КоличествоДокументов > 200 Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("В документе должно быть не более 200 форм!", Отказ, Заголовок,,, СообщенияРазделПроверки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок,,, СообщенияРазделПроверки);
	ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР)) <> 14 Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Предупреждение: Регистрационный номер организации в ПФР скорее всего неправильный",,Заголовок,,, СообщенияРазделПроверки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОтчетныйПериод) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан отчетный период!", Отказ, Заголовок,,, СообщенияРазделПроверки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана категория застрахованных лиц!", Отказ, Заголовок,,, СообщенияРазделПроверки);
	КонецЕсли;
	
	Пока ВыборкаПоСтрокамДокумента.Следующий() цикл
		
	   	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки);
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ": Не выбран сотрудник!", Отказ, Заголовок,,, СообщенияРазделПроверки);
		Иначе
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " по сотруднику " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + ": ";
			
			Если Не ВыборкаПоСтрокамДокумента.ФизЛицоРаботаетВОрганизации тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- не зарегистрирован(а) как сотрудник организации " + ВыборкаПоШапкеДокумента.ОрганизацияНаименование, Отказ, Заголовок,,, СообщенияРазделПроверки);
			КонецЕсли;
			
			СтраховойНомерПФР = ВыборкаПоСтрокамДокумента.СтраховойНомерПФР;
			Если Не ЗначениеЗаполнено(СтраховойНомерПФР) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан страховой номер!", Отказ, Заголовок,,, СообщенияРазделПроверки);
			ИначеЕсли Не РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомерПФР) тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Задан неверный страховой номер!", Отказ, Заголовок,,, СообщенияРазделПроверки);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Фамилия) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана фамилия!", Отказ, Заголовок,,, СообщенияРазделПроверки);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Имя) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задано имя!", Отказ, Заголовок,,, СообщенияРазделПроверки);
			КонецЕсли;
			
			Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КоличествоЗаписейОСтаже) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- У сотрудника отсутствуют данные о стаже!", Отказ, Заголовок,,, СообщенияРазделПроверки);
			КонецЕсли;
			
			//Контроль дубля строк
			Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерПовторяющейсяСтроки) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Строка №" + ВыборкаПоСтрокамДокумента.НомерПовторяющейсяСтроки + ": Сотрудник " + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " указан в документе дважды!", Отказ, Заголовок,,, СообщенияРазделПроверки);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаСоставления) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ": Не указана дата составления!", Отказ, Заголовок,,, СообщенияРазделПроверки);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Отказ Или Не ПроцедурыПерсонифицированногоУчета.НаборЗаписейОСтажеСоответствуетТребованиям(Ссылка, Истина, СообщенияРазделПроверки);
	
	Если Отказ тогда
		ЕстьОшибки = Истина;
	КонецЕсли;	 
	
	Если СообщатьОбУспехе И Не ЕстьОшибки Тогда
		Обработка.ДобавитьСообщение("Ошибок не обнаружено.", Перечисления.ВидыСообщений.Информация, , СообщенияРазделПроверки);		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПравильностьЗаполненияДокумента()
	
Функция ДанныеОВзносах(ДатаАктуальности, ЗаОтчетныйПериод, Организация, ТаблицаФизлиц) 
	
	ВременнаяТаблица = ПроцедурыПерсонифицированногоУчетаПолныеПрава.ДанныеОФактеНачисленияВзносов(ЗаОтчетныйПериод, Организация, ТаблицаФизлиц);	

	Если Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуютсяРаботыСДосрочнойПенсией") Тогда
		Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
			СтрокаТЗ.НачисленоПоДополнительнымТарифам = Ложь
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ВременнаяТаблица
	
КонецФункции 

Процедура ЗаполнитьСтажИВзносы(СтрокаДокумента = Неопределено, ТолькоСтаж = Ложь) Экспорт
	
	Если СтрокаДокумента = Неопределено Тогда
		ТаблицаФизлиц = РаботникиОрганизации.Выгрузить(,"Физлицо, ДатаСоставления");
	Иначе
		СтрокиТЧ = Новый Массив();
		СтрокиТЧ.Добавить(СтрокаДокумента);
		ТаблицаФизлиц = РаботникиОрганизации.Выгрузить(СтрокиТЧ,"Физлицо, ДатаСоставления");
	КонецЕсли;
	
	Если ТаблицаФизлиц.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ОтчетныйПериодЗаполнения = ?(ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ, ОтчетныйПериод, КорректируемыйПериод);
	Если Не ТолькоСтаж Тогда
		ВзносыФизлиц = ДанныеОВзносах(Дата, ОтчетныйПериодЗаполнения, Организация, ТаблицаФизлиц);
		ВзносыФизлиц.Индексы.Добавить("Физлицо");
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Физлицо");
	Если СтрокаДокумента = Неопределено Тогда
		Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
			СтруктураПоиска.Физлицо = СтрокаТЧ.Физлицо;
			Если Не ТолькоСтаж Тогда
				СтрокиФизлица = ВзносыФизлиц.НайтиСтроки(СтруктураПоиска);
				Если СтрокиФизлица.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокиФизлица[0]);
				Иначе
					СтрокаТЧ.НачисленоНаОПС = Ложь;
					СтрокаТЧ.НачисленоПоДополнительнымТарифам = Ложь;
				КонецЕсли;
			КонецЕсли;
			СтрокиФизлица = ПроцедурыПерсонифицированногоУчета.СведенияОСтаже_2014(ОтчетныйПериодЗаполнения, Организация, СтрокаТЧ.Физлицо, СтрокаТЧ.ДатаСоставления);
			Для каждого СтрокаТЗ Из СтрокиФизлица Цикл
				ЗаполнитьЗначенияСвойств(ЗаписиОСтаже.Добавить(),СтрокаТЗ);
			КонецЦикла;
		КонецЦикла;
	Иначе
		СтруктураПоиска.Физлицо = СтрокаДокумента.Физлицо;
		Если Не ТолькоСтаж Тогда
			СтрокиФизлица = ВзносыФизлиц.НайтиСтроки(СтруктураПоиска);
			Если СтрокиФизлица.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокиФизлица[0]);
			Иначе
				СтрокаДокумента.НачисленоНаОПС = Ложь;
				СтрокаДокумента.НачисленоПоДополнительнымТарифам = Ложь;
			КонецЕсли;
		КонецЕсли;
		СтрокиФизлица = ПроцедурыПерсонифицированногоУчета.СведенияОСтаже_2014(ОтчетныйПериодЗаполнения, Организация, СтрокаДокумента.Физлицо, СтрокаДокумента.ДатаСоставления);
		Для каждого СтрокаТЗ Из СтрокиФизлица Цикл
			ЗаполнитьЗначенияСвойств(ЗаписиОСтаже.Добавить(),СтрокаТЗ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьВзносы()
	
// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	
	СтруктураМакетов.Вставить("ФормаСПВ2", "Форма СПВ-2");
	
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#Если ТолстыйКлиентОбычноеПриложение Тогда

//Процедура вывода сведений на печать
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ИмяМакета = "ФормаСПВ2" Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ВыборкаПоСтрокамДокумента = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать();
		
		Отказ = Ложь;
		//Проверка корректности заполнения документа
		ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
		
		Если Отказ тогда
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат "";
		КонецЕсли;	 
		
		// проверим данные руководителя
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель) Или Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность) Тогда
			
			Заголовок = "Печать документа " + СокрЛП(ЭтотОбъект);
			Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан руководитель!", , Заголовок);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана должность руководителя!", , Заголовок);
			КонецЕсли;
			
			ОбработкаКомментариев.ПоказатьСообщения();
			
		КонецЕсли;
		
		ИнформацияОРаботодателе = Новый Структура;
		ИнформацияОРаботодателе.Вставить("РегистрационныйНомерПФР", ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР);
		ИнформацияОРаботодателе.Вставить("КодПоОКПО", ВыборкаПоШапкеДокумента.ОКПО);
		ИнформацияОРаботодателе.Вставить("ИНН", ВыборкаПоШапкеДокумента.ОрганизацияИНН);
		ИнформацияОРаботодателе.Вставить("КПП", ВыборкаПоШапкеДокумента.ОрганизацияКПП);
		ИнформацияОРаботодателе.Вставить("НаименованиеСокращенное", ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеСокращенное);
		
		ИнформацияОПачке = Новый Структура;
		ИнформацияОПачке.Вставить("ИнформацияОРаботодателе", ИнформацияОРаботодателе);
		ИнформацияОПачке.Вставить("ТипДокумента", "СПВ2");
		ИнформацияОПачке.Вставить("ТипИногоДокумента","Сведения о периоде работы застрахованного лица для установления трудовой пенсии");
		ИнформацияОПачке.Вставить("ИныхДокументовВПачке", ВыборкаПоШапкеДокумента.Количество);
		ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", ВыборкаПоШапкеДокумента.НомерПачки);
		ИнформацияОПачке.Вставить("ДатаСоставленияОписи", ВыборкаПоШапкеДокумента.Дата);
		ИнформацияОПачке.Вставить("КодКатегории", ОбщегоНазначенияЗК.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц));
		ИнформацияОПачке.Вставить("КодОтчетногоПериода", ПроцедурыПерсонифицированногоУчета.ОписаниеОтчетногоПериодаДляФайла2014(ВыборкаПоШапкеДокумента.ОтчетныйПериод).Квартал);
		ИнформацияОПачке.Вставить("ОтчетныйГод", Формат(Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод),"ЧГ=0"));
		ИнформацияОПачке.Вставить("ЭтоИсходныйДокумент", ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
		ИнформацияОПачке.Вставить("ЭтоКорректирующийДокумент", ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ);
		ИнформацияОПачке.Вставить("ЭтоОтменяющийДокумент", ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ);
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			ИнформацияОПачке.Вставить("КорректируемыйГод", Формат(Год(ВыборкаПоШапкеДокумента.КорректируемыйПериод),"ЧГ=0"));
			ИнформацияОПачке.Вставить("КодКорректируемогоПериода", ПроцедурыПерсонифицированногоУчета.ОписаниеОтчетногоПериодаДляФайла2014(ВыборкаПоШапкеДокумента.КорректируемыйПериод).Квартал);
		КонецЕсли;
		
		НомерПачкиРаботодателя = ИнформацияОПачке.НомерПачкиРаботодателя;
		
		// Опись АДВ-6-1
		ДокументОписи = Новый ТабличныйДокумент;
		ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПачкаДокументовСПВ_2_АДВ_6_1";
		ДокументОписи.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ПроцедурыПерсонифицированногоУчета.ВывестиОписьАДВ6(ДокументОписи, ИнформацияОПачке, ВыборкаПоШапкеДокумента);
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументОписи, КоличествоЭкземпляров, НаПринтер,"Опись документов (АДВ-6-1); пачка №" + НомерПачкиРаботодателя,,ДокументОписи);
		
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПачкаДокументовСПВ_2";
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		Макет = ПолучитьМакет("ФормаСПВ_2");
		
		// Рабочие области макета
		ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
		ОбластьДокумент = Макет.ПолучитьОбласть("Строка");
		ОбластьВзносов	= Макет.ПолучитьОбласть("СтрокаВзносов");
		ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
		ОбластьСтаж		= Макет.ПолучитьОбласть("Стаж");
		
		// копируем данные описи в остальные документы
		ОбластьШапка.Параметры.Заполнить(ИнформацияОПачке.ИнформацияОРаботодателе);
		ОбластьШапка.Параметры.Заполнить(ИнформацияОПачке);
		ОбластьПодвал.Параметры.Заполнить(ИнформацияОПачке);
		ОбластьПодвал.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		
		СтруктураПоиска = Новый Структура("ФизЛицо");
		ВсеЗаписиОСтаже	= СформироватьЗапросПоЗаписиОСтаже(ВыборкаПоШапкеДокумента).Выгрузить();
		
		ВыводилиДанные = Ложь;
		ВыборкаПоСтрокамДокумента.Сбросить();
		Пока ВыборкаПоСтрокамДокумента.Следующий() цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПоСтрокамДокумента);
			
			Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
				ОбластьСтаж.Параметры[СчПараметр] = ""
			КонецЦикла;
			
			Если Не ВыводилиДанные Тогда
				ВыводилиДанные = Истина;
			Иначе 
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ОбластьШапка.Параметры.ДатаСоставления = ВыборкаПоСтрокамДокумента.ДатаСоставления;
			ДокументРезультат.Вывести(ОбластьШапка);
			
			// Данные по физлицу
			ОбластьДокумент.Параметры.Заполнить(ВыборкаПоСтрокамДокумента);
			ДокументРезультат.Вывести(ОбластьДокумент);
			
			//Цикл по основным записям о стаже
			СтрокиСтажевыхПериодов = ВсеЗаписиОСтаже.Скопировать(СтруктураПоиска);
			СтрокиСтажевыхПериодов.Сортировать("НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
			Если СтрокиСтажевыхПериодов.Количество() > 0 Тогда

				Для Каждого СтрокаПериодаРаботы Из СтрокиСтажевыхПериодов Цикл
					
					Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
						ОбластьСтаж.Параметры[СчПараметр] = ""
					КонецЦикла;
					
					ОбластьСтаж.Параметры.НомерСтроки = СтрокаПериодаРаботы.НомерОсновнойЗаписи;
					ОбластьСтаж.Параметры.Заполнить(СтрокаПериодаРаботы);
					
					Если СтрокаПериодаРаботы.НомерДополнительнойЗаписи > 0 Тогда
						ОбластьСтаж.Параметры.НомерСтроки 			= "";
						ОбластьСтаж.Параметры.ДатаНачалаПериода 	= "";
						ОбластьСтаж.Параметры.ДатаОкончанияПериода 	= "";
					КонецЕсли;
					
					ЗаписьТУ = Новый Структура("ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа");
					ЗаполнитьЗначенияСвойств(ЗаписьТУ, СтрокаПериодаРаботы);
					ЗаписьТУ.Вставить("Коэффициент", СтрокаПериодаРаботы.ТерриториальныеУсловияСтавка);
					ОбластьСтаж.Параметры.ДопИТС = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(СтрокаПериодаРаботы);
					ОбластьСтаж.Параметры.ДопТУ = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровТерриториальныхУсловий(ЗаписьТУ);
					ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(СтрокаПериодаРаботы, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
					
					ДокументРезультат.Вывести(ОбластьСтаж);
					
				КонецЦикла;
				
			Иначе
				ДокументРезультат.Вывести(ОбластьСтаж);
			КонецЕсли; // Записи о стаже
			
			ОбластьВзносов.Параметры.Заполнить(ВыборкаПоСтрокамДокумента);
			
			// Подвал формы на одного физлица
			ДокументРезультат.Вывести(ОбластьВзносов);
			ДокументРезультат.Вывести(ОбластьПодвал);
			
		КонецЦикла; // по документам
		
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат, КоличествоЭкземпляров, НаПринтер, "Сведения о страховом стаже застрахованного лица СПВ-2; пачка №" + НомерПачкиРаботодателя,,ДокументРезультат);
		
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ, ПроверятьДанные = Истина, ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоРаботникиОрганизации = Неопределено) Экспорт
	
	// Заголовок для сообщений об ошибках 
	Заголовок = "Формирование файла по документу " + СокрЛП(ЭтотОбъект);
	
	//Проверка корректности заполнения документа
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	Если ВыборкаПоРаботникиОрганизации = Неопределено Тогда
		ВыборкаПоРаботникиОрганизации = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать();
	КонецЕсли;
	
	Если ПроверятьДанные Тогда
		ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь, ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации);
		ВыборкаПоРаботникиОрганизации.Сбросить();
	КонецЕсли;
	
	Если Отказ тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат "";
	КонецЕсли;	 
	
	ВсеЗаписиОСтаже	= СформироватьЗапросПоЗаписиОСтаже(ВыборкаПоШапкеДокумента).Выбрать();

	////////////////////////////////////////////////////////////////////////////////////////////
	//ФОРМИРУЕМ ФАЙЛ СВЕДЕНИЙ
	
	// Загружаем формат файла сведений
	МакетФормата = ПолучитьОбщийМакет("ФорматПФР70_2010");
	ТипДокументовПачки = "СВЕДЕНИЯ_О_СТРАХОВОМ_СТАЖЕ_ЗЛ_ДЛЯ_УСТАНОВЛЕНИЯ_ПЕНСИИ";
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://schema.pfr.ru");
	УзелПФР = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", Атрибуты);
	ПроцедурыПерсонифицированногоУчета.ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(ЭтотОбъект, ВыборкаПоШапкеДокумента.Год, ВыборкаПоШапкеДокумента));
	УзелПачкаВходящихДокументов = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
	
	// Добавляем ветку ВХОДЯЩАЯ_ОПИСЬ
	
	НаборЗаписейВходящаяОпись = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ВХОДЯЩАЯ_ОПИСЬ_ДЛЯ_ОПИСИ");
	
	НаборЗаписейВходящаяОпись.НомерВПачке.Значение = 1;
	НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = СокрЛП(ВыборкаПоШапкеДокумента.НомерПачки); 
	НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ВыборкаПоШапкеДокумента.Дата;
	ПроцедурыПерсонифицированногоУчета.ЗаполнитьСоставительПачки(НаборЗаписейВходящаяОпись.СоставительПачки.Значение, ВыборкаПоШапкеДокумента); // ОрганизацияЮрФизЛицо, ОрганизацияИНН, ОрганизацияКПП, ОрганизацияОГРН, ОрганизацияНаименованиеОКОПФ, ОрганизацияНаименованиеПолное, ОрганизацияНаименованиеСокращенное
	ПроцедурыПерсонифицированногоУчета.ЗаполнитьСоставДокументов(НаборЗаписейВходящаяОпись, ТипДокументовПачки, ВыборкаПоШапкеДокумента.Количество);
	
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "ВХОДЯЩАЯ_ОПИСЬ",""), НаборЗаписейВходящаяОпись);
	
	// Добавляем ветки СВЕДЕНИЯ_О_СТРАХОВОМ_СТАЖЕ_ЗЛ_ДЛЯ_УСТАНОВЛЕНИЯ_ПЕНСИИ 
	
	ФорматСПВ = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СПВ_2");
	
	ФорматПризнакНачисленияВзносовОПС = Новый Структура("ПризнакНачисленияВзносовОПС",ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСПВ.ПризнакНачисленияВзносовОПС));
	ФорматСПВ.Удалить("ПризнакНачисленияВзносовОПС");
	ФорматПризнакНачисленияВзносовПоДопТарифу = Новый Структура("ПризнакНачисленияВзносовПоДопТарифу",ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСПВ.ПризнакНачисленияВзносовПоДопТарифу));
	ФорматСПВ.Удалить("ПризнакНачисленияВзносовПоДопТарифу");
	Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
		ФорматСПВ.Удалить("КорректируемыйОтчетныйПериод");
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		ФорматСПВ.Удалить("СтажевыйПериод");
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ФорматСПВ.Удалить("КПП");
		ТаблицаПолей = ФорматСПВ.НалоговыйНомер.Поля;
		ТаблицаПолей.Индексы.Добавить("ИмяПоля");
		СтрокаКПП = ТаблицаПолей.Найти("КПП", "ИмяПоля");
		Если СтрокаКПП <> Неопределено Тогда
			ТаблицаПолей.Удалить(СтрокаКПП);
		КонецЕсли;
	КонецЕсли;
	
	// Общие данные пачки - берем их из описи и заполняем одинаково для всех
	СоставительПачки = НаборЗаписейВходящаяОпись.СоставительПачки.Значение;
	ФорматСПВ.РегистрационныйНомер.Значение = СоставительПачки.РегистрационныйНомер.Значение;
	ФорматСПВ.НаименованиеКраткое.Значение = СоставительПачки.НаименованиеКраткое.Значение;
	ФорматСПВ.НалоговыйНомер.Значение = СоставительПачки.НалоговыйНомер.Значение;
	
	ФорматСПВ.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
	ФорматСПВ.КодКатегории.Значение = ОбщегоНазначенияЗК.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц);
	ЗаполнитьЗначенияСвойств(ФорматСПВ.ОтчетныйПериод.Значение, ПроцедурыПерсонифицированногоУчета.ОписаниеОтчетногоПериодаДляФайла2014(ВыборкаПоШапкеДокумента.ОтчетныйПериод));
	Если  ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
		ЗаполнитьЗначенияСвойств(ФорматСПВ.КорректируемыйОтчетныйПериод.Значение,ПроцедурыПерсонифицированногоУчета.ОписаниеОтчетногоПериодаДляФайла2014(ВыборкаПоШапкеДокумента.КорректируемыйПериод));
	КонецЕсли;
	ФорматСПВ.ДатаЗаполнения.Значение = ВыборкаПоШапкеДокумента.Дата;
	
	НомерДокументаВПачке = 1;
	Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл
		
		НаборЗаписейСПВ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСПВ);
		
		// Данные физлица
		НомерДокументаВПачке = НомерДокументаВПачке + 1;
		
		Фамилия = СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия);
		Имя = СокрЛП(ВыборкаПоРаботникиОрганизации.Имя);
		Отчество = СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество);
		
		НаборЗаписейСПВ.НомерВПачке.Значение = НомерДокументаВПачке;
		НаборЗаписейСПВ.СтраховойНомер.Значение = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
		НаборЗаписейФИО = НаборЗаписейСПВ.ФИО.Значение;
		НаборЗаписейФИО.Фамилия = ВРег(Фамилия);
		НаборЗаписейФИО.Имя = ВРег(Имя);
		НаборЗаписейФИО.Отчество = ВРег(Отчество);
		
		НаборЗаписейСПВ.ДатаСоставленияНа.Значение = ВыборкаПоРаботникиОрганизации.ДатаСоставления; 
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда // заполнение отменяющей формы завершено
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,""), НаборЗаписейСПВ);
			Продолжить;
		КонецЕсли;
		
		// Выводим стаж
		
		ФорматСтажевыйПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(НаборЗаписейСПВ.СтажевыйПериод.Значение);
		НаборЗаписейСПВ.Удалить("СтажевыйПериод");
		
		УзелСотрудника = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСотрудника, НаборЗаписейСПВ);
		
		ВсеЗаписиОСтаже.Сбросить();
		Если ВсеЗаписиОСтаже.НайтиСледующий(ВыборкаПоРаботникиОрганизации.ФизЛицо, "ФизЛицо") Тогда
			ПроцедурыПерсонифицированногоУчета.ВывестиСведенияОСтаже2014(ВсеЗаписиОСтаже, УзелСотрудника, ФорматСтажевыйПериод);
		КонецЕсли;
		
		// Сведения о взносах
		
		ФорматПризнакНачисленияВзносовОПС.ПризнакНачисленияВзносовОПС.Значение = Формат(ВыборкаПоРаботникиОрганизации.НачисленоНаОПС,"БЛ=НЕТ; БИ=ДА");
		ФорматПризнакНачисленияВзносовПоДопТарифу.ПризнакНачисленияВзносовПоДопТарифу.Значение = Формат(ВыборкаПоРаботникиОрганизации.НачисленоПоДополнительнымТарифам,"БЛ=НЕТ; БИ=ДА");
		
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСотрудника, ФорматПризнакНачисленияВзносовОПС);
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСотрудника, ФорматПризнакНачисленияВзносовПоДопТарифу);

	КонецЦикла;
	
	Если Отказ тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат "";
	КонецЕсли;	 
	
	// Преобразуем дерево в строковое описание XML
	ТекстФайла = ПроцедурыПерсонифицированногоУчета.ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
	Возврат ТекстФайла
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке() Экспорт 

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Руководитель);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Ответственный",	Ответственный);
	Запрос.УстановитьПараметр("ДатаФИО",		Дата);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Застрахованные.НомерСтроки) КАК Количество
	|ПОМЕСТИТЬ ВТИтоги
	|ИЗ
	|	Документ.ПачкаДокументовСПВ_2.РаботникиОрганизации КАК Застрахованные
	|ГДЕ
	|	Застрахованные.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ФизическиеЛица.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|	КОНЕЦ КАК ФИОРуководителя
	|ПОМЕСТИТЬ ВТФИОРуководителя
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаФИО, ФизЛицо = &Руководитель) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Руководитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ФизическиеЛица.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|	КОНЕЦ КАК ФИО
	|ПОМЕСТИТЬ ВТФИООтветственного
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаФИО, ФизЛицо = &Ответственный) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Ответственный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СотрудникиОрганизаций.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(СотрудникиОрганизаций.Наименование) КАК Наименование
	|ПОМЕСТИТЬ ВТИсполнитель
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо = &Ответственный
	|	И СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
	|	И (СотрудникиОрганизаций.ДатаУвольнения >= &ДатаФИО
	|			ИЛИ СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|	И СотрудникиОрганизаций.ДатаПриемаНаРаботу <= &ДатаФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ДатаФИО >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.Наименование
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.Наименование
	|		КОНЕЦ) КАК Наименование
	|ПОМЕСТИТЬ ВТИсполнительДолжность
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ДатаФИО,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					Исполнитель.Ссылка
	|				ИЗ
	|					ВТИсполнитель КАК Исполнитель)) КАК РаботникиОрганизацииСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПачкаДокументовСПВ_2.Ссылка КАК Ссылка,
	|	ПачкаДокументовСПВ_2.Дата КАК Дата,
	|	ПачкаДокументовСПВ_2.Дата КАК Период,
	|	ПачкаДокументовСПВ_2.Номер КАК Номер,
	|	ПачкаДокументовСПВ_2.Организация КАК Организация,
	|	ПачкаДокументовСПВ_2.НомерПачки,
	|	ПачкаДокументовСПВ_2.ОтчетныйПериод,
	|	ПачкаДокументовСПВ_2.КорректируемыйПериод КАК КорректируемыйПериод,
	|	ПачкаДокументовСПВ_2.КатегорияЗастрахованныхЛиц,
	|	""СПВ-2"" КАК ТипФормДокументов,
	|	ПачкаДокументовСПВ_2.Организация.Наименование,
	|	ПачкаДокументовСПВ_2.Организация.ЮрФизЛицо КАК ОрганизацияЮрФизЛицо,
	|	ПачкаДокументовСПВ_2.Организация.ОГРН КАК ОрганизацияОГРН,
	|	ПачкаДокументовСПВ_2.Организация.НаименованиеОКОПФ КАК ОрганизацияНаименованиеОКОПФ,
	|	ПачкаДокументовСПВ_2.Организация.НаименованиеПолное,
	|	ПачкаДокументовСПВ_2.Организация.НаименованиеСокращенное,
	|	ПачкаДокументовСПВ_2.Организация.РегистрационныйНомерПФР,
	|	ПачкаДокументовСПВ_2.Организация.ИНН,
	|	ПачкаДокументовСПВ_2.Организация.КПП,
	|	ПачкаДокументовСПВ_2.Организация.КодПоОКПО КАК ОКПО,
	|	ВЫБОР
	|		КОГДА ПачкаДокументовСПВ_2.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ПачкаДокументовСПВ_2.Организация
	|		ИНАЧЕ ПачкаДокументовСПВ_2.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Итоги.Количество,
	|	ЕСТЬNULL(ФИОФизЛиц.ФИОРуководителя, """") КАК Руководитель,
	|	ЕСТЬNULL(ФИООтветственного.ФИО, """") КАК Исполнитель,
	|	ЕСТЬNULL(ПачкаДокументовСПВ_2.ДолжностьРуководителя.Наименование, """") КАК РуководительДолжность,
	|	ЕСТЬNULL(ИсполнительДолжность.Наименование, """") КАК ИсполнительДолжность,
	|	ГОД(ПачкаДокументовСПВ_2.ОтчетныйПериод) КАК Год,
	|	ПачкаДокументовСПВ_2.ФорматФайла,
	|	ПачкаДокументовСПВ_2.ТипСведенийСЗВ
	|ИЗ
	|	Документ.ПачкаДокументовСПВ_2 КАК ПачкаДокументовСПВ_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОРуководителя КАК ФИОФизЛиц
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственного КАК ФИООтветственного
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК Итоги
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсполнительДолжность КАК ИсполнительДолжность
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ПачкаДокументовСПВ_2.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",			ВыборкаПоШапкеДокумента.Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗастрахованныеЛица.Ссылка КАК Ссылка,
	|	ЗастрахованныеЛица.ФизЛицо КАК ФизЛицо,
	|	ЗастрахованныеЛица.НомерСтроки КАК НомерСтроки,
	|	ЗастрахованныеЛица.СтраховойНомерПФР,
	|	ЗастрахованныеЛица.Фамилия,
	|	ЗастрахованныеЛица.Имя,
	|	ЗастрахованныеЛица.Отчество,
	|	ЗастрахованныеЛица.ДатаСоставления,
	|	ЗастрахованныеЛица.НачисленоНаОПС,
	|	ЗастрахованныеЛица.НачисленоПоДополнительнымТарифам
	|ПОМЕСТИТЬ ВТЗастрахованныеЛица
	|ИЗ
	|	Документ.ПачкаДокументовСПВ_2.РаботникиОрганизации КАК ЗастрахованныеЛица
	|ГДЕ
	|	ЗастрахованныеЛица.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТЗарегистрированныеСотрудниками
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ТЧРаботникиОрг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ТЧРаботникиОрг.ФизЛицо = СотрудникиОрганизаций.Физлицо
	|			И (СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗастрахованныеЛица.ФизЛицо КАК ФизЛицо,
	|	КОЛИЧЕСТВО(ПачкаДокументовСПВ_2ЗаписиОСтаже.НомерОсновнойЗаписи) КАК КоличествоЗаписей
	|ПОМЕСТИТЬ ВТДанныеОСтаже
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ЗастрахованныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСПВ_2.ЗаписиОСтаже КАК ПачкаДокументовСПВ_2ЗаписиОСтаже
	|		ПО ЗастрахованныеЛица.ФизЛицо = ПачкаДокументовСПВ_2ЗаписиОСтаже.ФизЛицо
	|			И ЗастрахованныеЛица.Ссылка = ПачкаДокументовСПВ_2ЗаписиОСтаже.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗастрахованныеЛица.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК НомерПовторяющейсяСтроки,
	|	ПерваяТаблица.Ссылка,
	|	ПерваяТаблица.ФизЛицо,
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПерваяТаблица.СтраховойНомерПФР,
	|	ПерваяТаблица.Фамилия,
	|	ПерваяТаблица.Имя,
	|	ПерваяТаблица.Отчество,
	|	ПерваяТаблица.ФизЛицо.Наименование,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеСотрудниками.НомерСтроки ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации,
	|	ПерваяТаблица.ДатаСоставления,
	|	ЕСТЬNULL(ДанныеОСтаже.КоличествоЗаписей, 0) КАК КоличествоЗаписейОСтаже,
	|	ПерваяТаблица.НачисленоНаОПС,
	|	ПерваяТаблица.НачисленоПоДополнительнымТарифам
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированныеСотрудниками КАК ЗарегистрированныеСотрудниками
	|		ПО ПерваяТаблица.НомерСтроки = ЗарегистрированныеСотрудниками.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеЛица КАК ВтораяТаблица
	|		ПО ПерваяТаблица.ФизЛицо = ВтораяТаблица.ФизЛицо
	|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСтаже КАК ДанныеОСтаже
	|		ПО ПерваяТаблица.ФизЛицо = ДанныеОСтаже.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ПерваяТаблица.Ссылка,
	|	ПерваяТаблица.ФизЛицо,
	|	ПерваяТаблица.НомерСтроки,
	|	ПерваяТаблица.СтраховойНомерПФР,
	|	ПерваяТаблица.Фамилия,
	|	ПерваяТаблица.Имя,
	|	ПерваяТаблица.Отчество,
	|	ПерваяТаблица.ФизЛицо.Наименование,
	|	ПерваяТаблица.ДатаСоставления,
	|	ПерваяТаблица.НачисленоНаОПС,
	|	ПерваяТаблица.НачисленоПоДополнительнымТарифам,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеСотрудниками.НомерСтроки ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЕСТЬNULL(ДанныеОСтаже.КоличествоЗаписей, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

Функция СформироватьЗапросПоЗаписиОСтаже(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",	ВыборкаПоШапкеДокумента.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиОСтаже.Ссылка,
	|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда.КодДляОтчетности2010 КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет.КодДляОтчетности2010 КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
	|ИЗ
	|	Документ.ПачкаДокументовСПВ_2.ЗаписиОСтаже КАК ЗаписиОСтаже
	|ГДЕ
	|	ЗаписиОСтаже.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	Возврат Запрос.Выполнить();

КонецФункции

	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ


Процедура ОбработкаПроведения(Отказ, Режим)

	Если Проведен И ПринятоВПФР Тогда
		Возврат
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	ВыборкаПоСтрокамДокумента = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать();
	
	ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
	
	Если Отказ тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	ВыборкаПоСтрокамДокумента.Сбросить();
	
	//При проведении файл формируем заново 
	ТекстФайла = СформироватьВыходнойФайл(Отказ, Ложь, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
	
	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл формы СПВ-1";
	Запись.Данные = ТекстФайла;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ПроцедурыПерсонифицированногоУчета.ПроставитьНомерПачки(ЭтотОбъект);
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		
		ЗаписиОСтаже.Очистить();
		Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
			СтрокаТЧ.НачисленоНаОПС = Ложь;
			СтрокаТЧ.НачисленоПоДополнительнымТарифам = Ложь;
		КонецЦикла;
		
	Иначе
		
		Соответствие = Новый Соответствие;
		Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
			Соответствие.Вставить(СтрокаТЧ.ФизЛицо, Истина)
		КонецЦикла;
		ВсегоСтрок = ЗаписиОСтаже.Количество();
		Для Сч = 1 По ВсегоСтрок Цикл
			СтрокаТЧ = ЗаписиОСтаже[ВсегоСтрок - Сч];
			Если Соответствие[СтрокаТЧ.ФизЛицо] = Неопределено Тогда
				ЗаписиОСтаже.Удалить(СтрокаТЧ)
			КонецЕсли;
		КонецЦикла;
		ТЗЗаписиОСтаже = ЗаписиОСтаже.Выгрузить();
		ТЗЗаписиОСтаже.Сортировать("ФизЛицо, НомерСтроки");
		СтруктураПоиска = Новый Структура("ФизЛицо");
		Для каждого Элемент Из Соответствие Цикл
			СтруктураПоиска.ФизЛицо = Элемент.Ключ;
			ПроцедурыПерсонифицированногоУчета.ВыполнитьНумерациюЗаписейОСтаже(ТЗЗаписиОСтаже.НайтиСтроки(СтруктураПоиска))	
		КонецЦикла;
		ЗаписиОСтаже.Загрузить(ТЗЗаписиОСтаже);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Отказ = ПринятоВПФР;
	Если Не Отказ Тогда
		Для Каждого Набор Из Движения Цикл
			Набор.Очистить();
			Набор.Записать();
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

