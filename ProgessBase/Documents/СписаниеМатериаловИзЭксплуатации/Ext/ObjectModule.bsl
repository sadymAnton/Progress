Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Функция формирования печатной формы документа СписаниеМатериалов
//
Функция ПечатьСписаниеМатериалов(ТипУчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка,
	|	Организация,
	|	Организация.Представление КАК ПечОрганизация,
	|	"+?(ТипУчета = "Упр", "Подразделение", "ПодразделениеОрганизации")+" КАК Подразделение,
	|	"+?(ТипУчета = "Упр", "Подразделение.Представление", "ПодразделениеОрганизации.Представление")+" КАК ПечПодразделение
	|ИЗ
	|	Документ.СписаниеМатериаловИзЭксплуатации КАК СписаниеМатериаловИзЭксплуатации
	|ГДЕ
	|	СписаниеМатериаловИзЭксплуатации.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура КАК Товар,
	               |	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	               |	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	               |	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ПечЕдИзм,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	               |	ВложенныйЗапрос.Характеристика,
	               |	ВложенныйЗапрос.Серия,
	               |	ВложенныйЗапрос.ДокументПередачи,
	               |	ВложенныйЗапрос.НазначениеИспользования,
	               |	ВложенныйЗапрос.ФизЛицо КАК Сотрудник,
	               |	ВложенныйЗапрос.ФизЛицо.Представление КАК ПечФИО,
	               |	МИНИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
	               |	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	               |	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВложенныйЗапрос.Количество = 0
	               |				ТОГДА 0
	               |			ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Сумма / ВложенныйЗапрос.Количество КАК ЧИСЛО(15, 2))
	               |		КОНЕЦ) КАК Цена
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СписаниеМатериаловИзЭксплуатации.Номенклатура КАК Номенклатура,
	               |		СписаниеМатериаловИзЭксплуатации.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		СписаниеМатериаловИзЭксплуатации.ХарактеристикаНоменклатуры КАК Характеристика,
	               |		СписаниеМатериаловИзЭксплуатации.СерияНоменклатуры КАК Серия,
	               |		СписаниеМатериаловИзЭксплуатации.ДокументПередачи КАК ДокументПередачи,
	               |		СписаниеМатериаловИзЭксплуатации.НазначениеИспользования КАК НазначениеИспользования,
	               |		СписаниеМатериаловИзЭксплуатации.ФизЛицо КАК ФизЛицо,
	               |		СУММА(СписаниеМатериаловИзЭксплуатации.Количество) КАК Количество,
	               |		СУММА(ВЫБОР
	               |				КОГДА &ТипУчета = ""Упр""
	               |					ТОГДА СписаниеМатериаловИзЭксплуатации.Сумма
	               |				ИНАЧЕ СписаниеМатериаловИзЭксплуатации.СуммаРегл
	               |			КОНЕЦ) КАК Сумма,
	               |		МИНИМУМ(СписаниеМатериаловИзЭксплуатации.НомерСтроки) КАК НомерСтроки
	               |	ИЗ
	               |		Документ.СписаниеМатериаловИзЭксплуатации.Материалы КАК СписаниеМатериаловИзЭксплуатации
	               |	ГДЕ
	               |		СписаниеМатериаловИзЭксплуатации.Ссылка = &ТекущийДокумент
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		СписаниеМатериаловИзЭксплуатации.Номенклатура,
	               |		СписаниеМатериаловИзЭксплуатации.ЕдиницаИзмерения,
	               |		СписаниеМатериаловИзЭксплуатации.ХарактеристикаНоменклатуры,
	               |		СписаниеМатериаловИзЭксплуатации.СерияНоменклатуры,
	               |		СписаниеМатериаловИзЭксплуатации.ДокументПередачи,
	               |		СписаниеМатериаловИзЭксплуатации.НазначениеИспользования,
	               |		СписаниеМатериаловИзЭксплуатации.ФизЛицо) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения,
	               |	ВложенныйЗапрос.Характеристика,
	               |	ВложенныйЗапрос.Серия,
	               |	ВложенныйЗапрос.ДокументПередачи,
	               |	ВложенныйЗапрос.НазначениеИспользования,
	               |	ВложенныйЗапрос.ФизЛицо,
	               |	ВложенныйЗапрос.Номенклатура.Код,
	               |	ВложенныйЗапрос.Номенклатура.Артикул,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения.Представление,
	               |	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код,
	               |	ВложенныйЗапрос.ФизЛицо.Представление,
	               |	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
				
	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.Текст = ТекстЗапроса;
	
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("ТипУчета", ТипУчета);
	
	РезультатЗапроса = ЗапросПоТоварам.Выполнить();
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеМатериалов_СписаниеМатериалов";
	
	Макет  = ПолучитьМакет("СписаниеМатериалов");
	
	// Параметры вывода
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	КолАртикул = ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул, "Артикул",
				 ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код,     "Код", ""));
	ФлагВыводКода = НЕ ПустаяСтрока(КолАртикул);
	ФлагВыводСумм = ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная;
	
	// Вывод заголовка
	Область = Макет.ПолучитьОбласть("Заголовок|Данные");
	Область.Параметры.Заголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента( ЭтотОбъект);
	Область.Параметры.Заполнить(Шапка);
		
	ТабДок.Вывести(Область);
	Если ФлагВыводСумм Тогда
		ОбластьСумм = Макет.ПолучитьОбласть("Заголовок|Суммы");
		ТабДок.Присоединить(ОбластьСумм);
	КонецЕсли;
	
	// Вывод шапки табличной части
	Если ФлагВыводКода Тогда
		Область = Макет.ПолучитьОбласть("ТабШапка|Данные");
		Область.Параметры.ПечАртикул = КолАртикул;
		Если НЕ ФлагВыводСумм Тогда
			Область.Области[?(ФлагВыводКода,"ОблКолЗаг","ОблКолЗагБезАртикула")].ГраницаСправа = Новый Линия( ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
		КонецЕсли;
		ТабДок.Вывести(Область);
		Если ФлагВыводСумм Тогда
			ОбластьСумм = Макет.ПолучитьОбласть("ТабШапка|Суммы");
			ТабДок.Присоединить(ОбластьСумм);
		КонецЕсли;
	Иначе
		Область = Макет.ПолучитьОбласть("ТабШапкаБезАртикула|Данные");
		Если НЕ ФлагВыводСумм Тогда
			Область.Области[?(ФлагВыводКода,"ОблКолЗаг","ОблКолЗагБезАртикула")].ГраницаСправа = Новый Линия( ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
		КонецЕсли;
		ТабДок.Вывести(Область);
		Если ФлагВыводСумм Тогда
			ОбластьСумм = Макет.ПолучитьОбласть("ТабШапкаБезАртикула|Суммы");
			ТабДок.Присоединить(ОбластьСумм);
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеТабНомеров = СпецодеждаИСпецоснастка.ПолучитьТабНомера( Организация, Дата, Материалы.ВыгрузитьКолонку("ФизЛицо"));
	
	// Вывод табличной части
	Если ФлагВыводКода Тогда
		Область     = Макет.ПолучитьОбласть("ТабСтрока|Данные");
		ОбластьСумм = Макет.ПолучитьОбласть("ТабСтрока|Суммы");
	Иначе
		Область     = Макет.ПолучитьОбласть("ТабСтрокаБезАртикула|Данные");
		ОбластьСумм = Макет.ПолучитьОбласть("ТабСтрокаБезАртикула|Суммы");
	КонецЕсли;
	
	ТабЧасть = РезультатЗапроса.Выбрать();
	СуммаИтого = 0;
	ПечНомер = 0;
	
	Пока ТабЧасть.Следующий() Цикл
		
		ПечНомер = ПечНомер + 1;
		Область.Параметры.ПечНомер = ПечНомер;
		
		Если ФлагВыводКода Тогда
			Область.Параметры.ПечАртикул = ТабЧасть[КолАртикул];
		КонецЕсли;
		
		Область.Параметры.Заполнить(ТабЧасть);
		Область.Параметры.ПечМатериал = СокрЛП( ТабЧасть.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий( ТабЧасть);
		Область.Параметры.Материал    = ТабЧасть.Товар;
		Область.Параметры.ПечКол      = ТабЧасть.Количество;
		
		ТабНомер = СоответствиеТабНомеров[ ТабЧасть.Сотрудник];
		Область.Параметры.ПечТабНомер = ТабНомер;
		
		Если НЕ ФлагВыводСумм Тогда
			Область.Области[?(ФлагВыводКода,"ОблЕдИзм","ОблЕдИзмБезАртикула")].ГраницаСправа = Новый Линия( ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
		КонецЕсли;
		ТабДок.Вывести(Область);
		
		Если ФлагВыводСумм Тогда
			ОбластьСумм.Параметры.ПечЦена  = ТабЧасть.Цена;
			ОбластьСумм.Параметры.ПечСумма = ТабЧасть.Сумма;
			ТабДок.Присоединить(ОбластьСумм);
			СуммаИтого = СуммаИтого + ТабЧасть.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод итогов документа
	Если ФлагВыводСумм Тогда
		Область = Макет.ПолучитьОбласть("Подвал");
	Иначе
		Область = Макет.ПолучитьОбласть("Подвал|Данные");
	КонецЕсли;
	Если СуммаИтого = 0 Тогда
		Область.Параметры.СтрокаИтог = "Всего наименований: " + ТабЧасть.Количество();
		ТабДок.Вывести( Область);
	Иначе
		Область.Параметры.СтрокаИтог = "Всего наименований: " + ТабЧасть.Количество() +
			", на сумму " + ОбщегоНазначения.ФорматСумм( СуммаИтого, ?( ТипУчета = "Упр", мВалютаУправленческогоУчета, мВалютаРегламентированногоУчета));
		ТабДок.Вывести( Область);
		Область = Макет.ПолучитьОбласть( ?(ФлагВыводСумм, "СтрокаСуммаИтого", "СтрокаСуммаИтого|Данные"));
		Область.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью( СуммаИтого, ?( ТипУчета = "Упр", мВалютаУправленческогоУчета, мВалютаРегламентированногоУчета));
		ТабДок.Вывести( Область);
	КонецЕсли;
	
	Если ФлагВыводСумм Тогда
		Область = Макет.ПолучитьОбласть("НизДокумента");
	Иначе
		Область = Макет.ПолучитьОбласть("НизДокументаБезАртикула|Данные");
	КонецЕсли;
	ТабДок.Вывести( Область);
	
	Возврат ТабДок;
	
КонецФункции //	ПечатьСписаниеМатериалов()
	
// Функция формирует табличный документ унифицированной формы МБ-8
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Табличный документ по форме МБ-8 (акт на списание).
//
Функция ПечатьМБ8(ТипУчета)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номер КАК Номер,
	|	Дата  КАК ДатаСоставления,
	|	Дата  КАК ДатаДокумента,
	|	Организация,
	|	Организация КАК ЮрФизЛицо,
	|	Организация КАК Руководители,
	|	Подразделение КАК Подразделение,
	|	ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПричинаСписания.Код КАК ПричинаСписанияКод,
	|	ПричинаСписания.Представление КАК ПричинаСписанияНаименование
	|ИЗ
	|	Документ.СписаниеМатериаловИзЭксплуатации КАК СписаниеМатериаловИзЭксплуатации
	|ГДЕ
	|	СписаниеМатериаловИзЭксплуатации.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("Организация", Шапка.Организация);
	ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", Ссылка);
	ЗапросПоТоварам.УстановитьПараметр("НачДата", НачалоМесяца(Дата));
	ЗапросПоТоварам.УстановитьПараметр("КонДата", КонецМесяца(Дата));
	Если ТипУчета = "Бух" Тогда
		ЗапросПоТоварам.УстановитьПараметр("Подразделение", Шапка.ПодразделениеОрганизации);
	Иначе
		ЗапросПоТоварам.УстановитьПараметр("Подразделение", Шапка.Подразделение);
	КонецЕсли;
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
	ЗапросПоТоварам.УстановитьПараметр("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);	
	
	ТекстЗапросаСКомментариями = "
	|ВЫБРАТЬ
	|	МИНИМУМ(Материалы.НомерСтроки) КАК НомерСтроки,
	|	Материалы.Номенклатура КАК Номенклатура,
	|	Материалы.ХарактеристикаНоменклатуры КАК Характеристика,
	|	Материалы.СерияНоменклатуры КАК Серия,
	|	Материалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Материалы.ДокументПередачи КАК ДокументПередачи,
	|	Материалы.НазначениеИспользования КАК НазначениеИспользования,
	|	Материалы.ФизЛицо КАК ФизЛицо,
	|	СУММА(Материалы.Количество) КАК Количество
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	Документ.СписаниеМатериаловИзЭксплуатации.Материалы КАК Материалы
	|ГДЕ
	|	Материалы.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Материалы.Номенклатура,
	|	Материалы.ХарактеристикаНоменклатуры,
	|	Материалы.СерияНоменклатуры,
	|	Материалы.ЕдиницаИзмерения,
	|	Материалы.ДокументПередачи,
	|	Материалы.НазначениеИспользования,
	|	Материалы.ФизЛицо
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартииВЭксплуатации.Номенклатура КАК Номенклатура,
	|	ПартииВЭксплуатации.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ПартииВЭксплуатации.СерияНоменклатуры КАК Серия,
	|	ПартииВЭксплуатации.ДокументПередачи КАК ДокументПередачи,
	|	ПартииВЭксплуатации.НазначениеИспользования КАК НазначениеИспользования,
	|	ПартииВЭксплуатации.ФизЛицо КАК ФизЛицо,
	|	ПартииВЭксплуатации.КоличествоРасход КАК КоличествоРасход,
	|	ПартииВЭксплуатации.СтоимостьРасход КАК СтоимостьРасход,
	|	ПартииВЭксплуатации.ПогашеннаяСтоимостьРасход КАК ПогашеннаяСтоимостьРасход
	|
	|ПОМЕСТИТЬ ПартииВЭксплуатации
	|ИЗ
	|	РегистрНакопления.ПартииМатериаловВЭксплуатации%СуффиксУчета%.Обороты(&НачДата, &КонДата, Период,
	|		Не &ИспользоватьРасширеннуюАналитику
	|		И Подразделение = &Подразделение
	|		И (
	|			Номенклатура,
	|			ХарактеристикаНоменклатуры,
	|			СерияНоменклатуры,
	|           НазначениеИспользования,
	|           ФизЛицо,
	|           ДокументПередачи
	|		) В (
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТаблицаДокумента.Номенклатура,
	|				ТаблицаДокумента.Характеристика,
	|				ТаблицаДокумента.Серия,
	|				ТаблицаДокумента.НазначениеИспользования,
	|				ТаблицаДокумента.ФизЛицо,
	|				ТаблицаДокумента.ДокументПередачи
	|			ИЗ
	|				ТаблицаДокумента КАК ТаблицаДокумента
	|			)
	|
	|		) КАК ПартииВЭксплуатации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрАналитикаУчетаЗатрат.Затрата КАК Номенклатура,
	|	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты КАК Характеристика,
	|	РегистрАналитикаУчетаЗатрат.СерияЗатраты КАК Серия,
	|	РегистрАналитикаУчетаПартий.ДокументПередачи КАК ДокументПередачи,
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования КАК НазначениеИспользования,
	|	РегистрАналитикаУчетаПартий.ФизЛицо КАК ФизЛицо,
	|	СУММА(УчетЗатрат.КоличествоРасход) КАК КоличествоРасход,
	|
	|	СУММА(
	|		ВЫБОР КОГДА РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МатериалыВЭксплуатации) ТОГДА
	|   		УчетЗатрат.СтоимостьРасход
	|		ИНАЧЕ
	|   		0
	|		КОНЕЦ
	|	) КАК СтоимостьРасход,
	|
	|	СУММА(
	|		ВЫБОР КОГДА РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ПогашеннаяСтоимость) ТОГДА
	|   		- УчетЗатрат.СтоимостьРасход
	|		ИНАЧЕ
	|   		0
	|		КОНЕЦ
	|	) КАК ПогашеннаяСтоимостьРасход
	|ИЗ
	|	РегистрНакопления.УчетЗатрат%СуффиксРегл%.Обороты(&НачДата, &КонДата, Период,
	|		&ИспользоватьРасширеннуюАналитику
	|		И АналитикаВидаУчета В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаВидаУчета.Ссылка
	|			ИЗ
	|				РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|			ГДЕ
	|				(РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.МатериалыВЭксплуатации)
	|				ИЛИ РегистрАналитикаВидаУчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчета.ПогашеннаяСтоимость))
	|				//ДляУпрУчета И РегистрАналитикаВидаУчета.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|				//ДляУпрУчета И РегистрАналитикаВидаУчета.Подразделение = &Подразделение
	|				//ДляБухУчета И РегистрАналитикаВидаУчета.Организация = &Организация
	|				//ДляБухУчета И РегистрАналитикаВидаУчета.ПодразделениеОрганизации = &Подразделение
	|           )
	|		И АналитикаУчетаЗатрат В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаЗатрат.Ссылка
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|			ГДЕ
	|				(
	|				Затрата,
	|				ХарактеристикаЗатраты,
	|				СерияЗатраты
	|				) В (
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ТаблицаДокумента.Номенклатура,
	|					ТаблицаДокумента.Характеристика,
	|					ТаблицаДокумента.Серия
	|				ИЗ
	|					ТаблицаДокумента КАК ТаблицаДокумента
	|				)
	|           )
	|	) КАК УчетЗатрат
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидаУчета КАК РегистрАналитикаВидаУчета
	|	ПО 
	|		УчетЗатрат.АналитикаВидаУчета = РегистрАналитикаВидаУчета.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаЗатрат КАК РегистрАналитикаУчетаЗатрат
	|	ПО 
	|		УчетЗатрат.АналитикаУчетаЗатрат = РегистрАналитикаУчетаЗатрат.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК РегистрАналитикаУчетаПартий
	|	ПО 
	|		УчетЗатрат.АналитикаУчетаПартий = РегистрАналитикаУчетаПартий.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрАналитикаУчетаЗатрат.Затрата,
	|	РегистрАналитикаУчетаЗатрат.ХарактеристикаЗатраты,
	|	РегистрАналитикаУчетаЗатрат.СерияЗатраты,
	|	РегистрАналитикаУчетаПартий.ДокументПередачи,
	|	РегистрАналитикаУчетаПартий.НазначениеИспользования,
	|	РегистрАналитикаУчетаПартий.ФизЛицо
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ТаблицаДокумента.Номенклатура.Код КАК НоменклатурныйНомер,
	|	ТаблицаДокумента.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаДокумента.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.Количество,
	|
	|	ТаблицаДокумента.Характеристика,
	|	ТаблицаДокумента.Серия,
	|	ТаблицаДокумента.НазначениеИспользования.СрокПолезногоИспользования КАК СрокСлужбы,
	|	ТаблицаДокумента.НазначениеИспользования.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ТаблицаДокумента.НазначениеИспользования.СпособПогашенияСтоимости КАК СпособПогашенияСтоимости,
	|	ТаблицаДокумента.ДокументПередачи.Дата КАК ДатаВводаВЭксплуатацию,
	|
	|	ЕСТЬNULL(ПартииВЭксплуатации.КоличествоРасход, 0) КАК КоличествоРасход,
	|	ЕСТЬNULL(ПартииВЭксплуатации.СтоимостьРасход, 0) КАК СтоимостьРасход,
	|	ЕСТЬNULL(ПартииВЭксплуатации.ПогашеннаяСтоимостьРасход, 0) КАК ПогашеннаяСтоимостьРасход
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПартииВЭксплуатации КАК ПартииВЭксплуатации
	|	ПО
	|		ТаблицаДокумента.Номенклатура = ПартииВЭксплуатации.Номенклатура
	|		И ТаблицаДокумента.Характеристика = ПартииВЭксплуатации.Характеристика
	|		И ТаблицаДокумента.Серия = ПартииВЭксплуатации.Серия
	|		И ТаблицаДокумента.ФизЛицо = ПартииВЭксплуатации.ФизЛицо
	|		И ТаблицаДокумента.ДокументПередачи = ПартииВЭксплуатации.ДокументПередачи
	|		И ТаблицаДокумента.НазначениеИспользования  = ПартииВЭксплуатации.НазначениеИспользования
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	Если ТипУчета = "Бух" Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете;
	Иначе
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
	КонецЕсли;
	ЗапросПоТоварам.Текст = УправлениеЗатратами.ЗаменитьКомментарииВТекстеЗапроса(
		ТекстЗапросаСКомментариями,
		ВидОтраженияВУчете
	);
	
	Макет = ПолучитьМакет("МБ8");
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры печатной формы по умолчанию
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	// Восстановим установленные пользователем параметры печатной формы
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеМатериаловИзЭксплуатации_МБ8";
	
	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.НомерДокумента           = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПодразделения = ?(ТипУчета = "Бух", Шапка.ПодразделениеОрганизации, Шапка.Подразделение);
	
	Если ТипУчета = "Бух" И СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ИспользоватьСтатьюЗатратДокумента Тогда
		ОбластьМакета.Параметры.Счет = СчетДт;
	Иначе
		ОбластьМакета.Параметры.Счет = "";
	КонецЕсли;
	
	/// Кунов О.В., 29.08.2017 - 68186
	ОбластьМакета.Параметры.ПредставлениеДатыДокумента = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
	ЗаполнитьЧленовКомисии(ОбластьМакета, Истина);
	///
	
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	НомерСтраницы   = 1;

	Строка          = Макет.ПолучитьОбласть("Строка");
	ПоследняяСтрока	= Макет.ПолучитьОбласть("ПоследняяСтрока");
	Итого           = Макет.ПолучитьОбласть("Итого");

	// Инициализация итогов в документе
	ИтогоКоличество 				  = 0;
	ИтогоСуммаПервоначальнойСтоимости = 0;
	ИтогоСуммаПогашеннойСтоимости     = 0;
	Ном = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	Выборка = ЗапросПоТоварам.Выполнить().Выбрать();
	КоличествоСтрок = Выборка.Количество();
	Пока Выборка.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			ОбщегоНазначения.Сообщение("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном = Ном + 1;
		
		// Проверим, помещается ли строка с данными и последняя строка (или итоги) на странице.
		СтрокаТаблицы = Новый Массив;
		СтрокаТаблицы.Добавить(Строка);
		Если НЕ (Ном = КоличествоСтрок) Тогда
			СтрокаТаблицы.Добавить(ПоследняяСтрока);
		Иначе 
			СтрокаТаблицы.Добавить(Итого);
		КонецЕсли;

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаТаблицы) Тогда

			НомерСтраницы = НомерСтраницы + 1;
			
			ТабДокумент.Вывести(ПоследняяСтрока);

			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);
			
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(Выборка);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(Выборка.ТоварНаименование)
			+ ФормированиеПечатныхФорм.ПредставлениеСерий(Выборка);
			
		Если Выборка.КоличествоРасход <> 0 Тогда
			СуммаПервоначальнойСтоимости = Окр(Выборка.Количество * Выборка.СтоимостьРасход / Выборка.КоличествоРасход, 2, 1);
			СуммаПогашеннойСтоимости = Окр(Выборка.Количество * Выборка.ПогашеннаяСтоимостьРасход / Выборка.КоличествоРасход, 2, 1);
		Иначе
			СуммаПервоначальнойСтоимости = 0;
			СуммаПогашеннойСтоимости = 0;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Цена = ?(Выборка.Количество <> 0, Окр(СуммаПервоначальнойСтоимости / Выборка.Количество, 2, 1), 0);
		ОбластьМакета.Параметры.СуммаПервоначальнойСтоимости = СуммаПервоначальнойСтоимости;
		ОбластьМакета.Параметры.СуммаПогашеннойСтоимости = СуммаПогашеннойСтоимости;
			
		ОбластьМакета.Параметры.ПричинаСписанияНаименование = Шапка.ПричинаСписанияНаименование;
		ОбластьМакета.Параметры.ПричинаСписанияКод = Шапка.ПричинаСписанияКод;

		ТабДокумент.Вывести(ОбластьМакета);

		ИтогоКоличество = ИтогоКоличество + Выборка.Количество;
		ИтогоСуммаПервоначальнойСтоимости = ИтогоСуммаПервоначальнойСтоимости + СуммаПервоначальнойСтоимости;
		ИтогоСуммаПогашеннойСтоимости     = ИтогоСуммаПогашеннойСтоимости + СуммаПогашеннойСтоимости;

	КонецЦикла;

	// Выводим итоги по документу
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.ИтогоСуммаПервоначальнойСтоимости = ИтогоСуммаПервоначальнойСтоимости;
	ОбластьМакета.Параметры.ИтогоСуммаПогашеннойСтоимости = ИтогоСуммаПогашеннойСтоимости;
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	// Проверим, помещается ли подвал
	Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакета) Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	/// Кунов О.В., 29.08.2017 - 68186
	ОбластьМакета.Параметры.ПредставлениеДатыДокумента = Формат(Шапка.ДатаДокумента, "ДЛФ=DD");
	ЗаполнитьЧленовКомисии(ОбластьМакета);
	///
	
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьМБ8()

Процедура ЗаполнитьЧленовКомисии(Область,Шапка = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРГ_дополнительнаяИнформация.Подписант КАК Подписант,
	|	ПРГ_дополнительнаяИнформация.НомерСтр КАК НомерСтр,
	|	ПРГ_дополнительнаяИнформация.Информация1,
	|	РаботникиОрганизацийСрезПоследних.Должность,
	|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" КАК Инициалы
	|ИЗ
	|	РегистрСведений.ПРГ_дополнительнаяИнформация КАК ПРГ_дополнительнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, ) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ПРГ_дополнительнаяИнформация.Информация1 = РаботникиОрганизацийСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
	|		ПО ПРГ_дополнительнаяИнформация.Информация1.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ПРГ_дополнительнаяИнформация.Документ = &Документ
	|	И (ПРГ_дополнительнаяИнформация.Подписант = ЗНАЧЕНИЕ(Справочник.ПРГ_Подписанты.ЧленКомиссии1)
	|			ИЛИ ПРГ_дополнительнаяИнформация.Подписант = ЗНАЧЕНИЕ(Справочник.ПРГ_Подписанты.ЧленКомиссии2)
	|			ИЛИ ПРГ_дополнительнаяИнформация.Подписант = ЗНАЧЕНИЕ(Справочник.ПРГ_Подписанты.ЧленКомиссии3)
	|			ИЛИ ПРГ_дополнительнаяИнформация.Подписант = ЗНАЧЕНИЕ(Справочник.ПРГ_Подписанты.ЧленКомиссии4)
	|			ИЛИ ПРГ_дополнительнаяИнформация.Подписант = ЗНАЧЕНИЕ(Справочник.ПРГ_Подписанты.ПредседательКомиссии)
	|			ИЛИ ПРГ_дополнительнаяИнформация.Подписант = ЗНАЧЕНИЕ(Справочник.ПРГ_Подписанты.Утверждаю))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подписант,
	|	НомерСтр";
	
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Подписант = ВыборкаДетальныеЗаписи.Подписант;
		ВидПодписанта=СокрЛП(СтрЗаменить(Подписант," ",""));
		Если Не Шапка тогда
			Если Подписант <> Справочники.ПРГ_Подписанты.ПредседательКомиссии И
				Подписант <> Справочники.ПРГ_Подписанты.Членкомиссии1 И
				Подписант <> Справочники.ПРГ_Подписанты.Членкомиссии2 И
				Подписант <> Справочники.ПРГ_Подписанты.Членкомиссии3 И
				Подписант <> Справочники.ПРГ_Подписанты.Членкомиссии4 Тогда
				Продолжить;
			КонецЕсли;
			Область.Параметры[ВидПодписанта+"Должность"]	= СокрЛП(ВыборкаДетальныеЗаписи.Должность);
			Область.Параметры[ВидПодписанта]				= СокрЛП(ВыборкаДетальныеЗаписи.Инициалы);
		Иначе
			Если Подписант <> Справочники.ПРГ_Подписанты.Утверждаю Тогда
				Продолжить;
			КонецЕсли;
			Область.Параметры[ВидПодписанта+"Должность"] 	= СокрЛП(ВыборкаДетальныеЗаписи.Должность);
			Область.Параметры[ВидПодписанта] 				= СокрЛП(ВыборкаДетальныеЗаписи.Инициалы);
		Конецесли;
	КонецЦикла;
	
КонецПроцедуры


// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "МБ8" ИЛИ ИмяМакета = "МБ8_Бух" ИЛИ ИмяМакета = "МБ8_Упр" Тогда
		
		ТипУчета = ?( ИмяМакета = "МБ8_Упр", "Упр",
				   ?( ИмяМакета = "МБ8_Бух", "Бух",
				   ?( ОтражатьВУправленческомУчете, "Упр", "Бух")));
				   
		ТабДокумент = ПечатьМБ8(ТипУчета);
		
	ИначеЕсли ИмяМакета = "СписаниеМатериалов" ИЛИ ИмяМакета = "СписаниеМатериаловБух" ИЛИ ИмяМакета = "СписаниеМатериаловУпр" Тогда
		
		ТипУчета = ?( ИмяМакета = "СписаниеМатериаловУпр", "Упр",
				   ?( ИмяМакета = "СписаниеМатериаловБух", "Бух",
				   ?( ОтражатьВУправленческомУчете, "Упр", "Бух")));
				   
		ТабДокумент = ПечатьСписаниеМатериалов(ТипУчета);
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечФорм = Новый Структура;
	
	Если ОтражатьВУправленческомУчете И ОтражатьВБухгалтерскомУчете Тогда
		СтруктПечФорм.Вставить( "МБ8_Упр", "МБ-8 (Акт на списание)(упр.)");
		СтруктПечФорм.Вставить( "МБ8_Бух", "МБ-8 (Акт на списание)(регл.)");
	Иначе
		СтруктПечФорм.Вставить( "МБ8",     "МБ-8 (Акт на списание)");
	КонецЕсли;
	
	Если ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная
	   И ОтражатьВУправленческомУчете
	   И ОтражатьВБухгалтерскомУчете Тогда
		СтруктПечФорм.Вставить( "СписаниеМатериаловУпр", "Списание материалов из эксплуатации (упр.)");
		СтруктПечФорм.Вставить( "СписаниеМатериаловБух", "Списание материалов из эксплуатации (регл.)");
	Иначе
		СтруктПечФорм.Вставить( "СписаниеМатериалов",    "Списание материалов из эксплуатации");
	КонецЕсли;
	
	Возврат СтруктПечФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
		|СчетДт,      НадписьСчетДт,
		|СубконтоДт1, НадписьСубконтоДт1,
		|СубконтоДт2, НадписьСубконтоДт2,
		|СубконтоДт3, НадписьСубконтоДт3";

	мСтрокаРеквизитыНалУчета = "СчетДтНУ, НадписьСчетДтНУ,
		|СубконтоДтНУ1, НадписьСубконтоДтНУ1,
		|СубконтоДтНУ2, НадписьСубконтоДтНУ2,
		|СубконтоДтНУ3, НадписьСубконтоДтНУ3";

КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура проверяет допустимость использования статьи затрат
// в документе
//
// Параметры:
//	СтатьяЗатрат - СправочникСсылка.СтатьиЗатрат - Проверяемая статья затрат
//	ВидСтатьиЗатрат - строка с видом допустимых статей затрат
//			Возможные значения:
//				"Нематериальные" - в документе могут быть только не мат. статьи затрат
//	Отказ - флаг ошибки
//	Заголовок - текст сообщения
//
Процедура ПроверитьСтатьюЗатрат(
	СтатьяЗатрат, 
	ВидСтатьиЗатрат, 
	Отказ, 
	Заголовок
	)

	Если ВидСтатьиЗатрат = "Нематериальные" Тогда
		Если СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные
		   И СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Укажите статью затрат с нематериальным видом затрат!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьСтатьиЗатрат()

// Процедура проверяет правильность заполнения реквизитов документа
//
Функция ПроверкаРеквизитов(Отказ, Заголовок) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	

	РеквизитыШапки = "Организация, ТипСтоимости";
	
	Если СтруктураШапкиДокумента.СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ИспользоватьСтатьюЗатратДокумента Тогда
		РеквизитыШапки = РеквизитыШапки + ", СтатьяЗатрат";
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
			РеквизитыШапки = РеквизитыШапки + ", СчетДт";
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			РеквизитыШапки = РеквизитыШапки + ", СчетДтНУ";
		КонецЕсли;
	КонецЕсли;
	
	ДополнитьРеквизитыШапкиУпр(РеквизитыШапки);
	ДополнитьРеквизитыШапкиРегл(РеквизитыШапки);

	РеквизитыТЧ = "Номенклатура, Количество, ЕдиницаИзмерения, ФизЛицо, НазначениеИспользования";
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧ,    СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "Материалы");

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТЧ), Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ИспользоватьСтатьюЗатратДокумента Тогда
		ПроверитьСтатьюЗатрат(
			СтатьяЗатрат, 
			"Нематериальные", 
			Отказ, 
			Заголовок
		);
	КонецЕсли;
	
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);	

	Возврат СтруктураШапкиДокумента;

КонецФункции // ПроверкаРеквизитов()

// Процедура дополняет список реквизитов шапки упр. реквизитами
//
Процедура ДополнитьРеквизитыШапкиУпр(Реквизиты)

	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты),"",", ")  + "Подразделение";

КонецПроцедуры // ДополнитьРеквизитыШапкиУпр()

// Процедура дополняет список реквизитов шапки регл. реквизитами
//
Процедура ДополнитьРеквизитыШапкиРегл(Реквизиты)
	
	Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ", ") + "ПодразделениеОрганизации";
	
	ПроизводственныеРасходы   = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетДт);
	ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетДтНУ, "Налоговый");
	
	Если ОтражатьВБухгалтерскомУчете И НЕ ПроизводственныеРасходы Тогда
		Реквизиты = Реквизиты + ",СчетДт";
		Если ОтражатьВНалоговомУчете И НЕ ПроизводственныеРасходыНУ Тогда
			Реквизиты = Реквизиты + ",СчетДтНУ";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДополнитьРеквизитыШапкиРегл()

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
		
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
		
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)

	ТаблицаПоМатериаламРегл = ТаблицаПоМатериалам.Скопировать();				
					
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,  ТаблицаПоМатериалам, Отказ, Заголовок);
	ДвиженияПоРегиструСписанныеМатериалыИзЭксплуатации(СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
	
	// Отражения движений по погашению стоимости.
	ДвиженияПоСписаниюСтоимости(
		СтруктураШапкиДокумента,
		ТаблицаПоМатериалам,
		Заголовок
	);
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// МАТЕРИАЛЫ ПО РЕГИСТРУ МатериалыВЭксплуатации.
	НаборДвижений = Движения.МатериалыВЭксплуатации;
	
	// Проверка остатков при оперативном проведении.
	//начало изменений
	//НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	//Если Отказ Тогда
	//	Возврат;
	//КонецЕсли;
	//конец изменений 
	
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийМатериалыВЭксплуатации.СписаниеИзЭксплуатации,"КодОперации");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.МатериалыВЭксплуатации.ВыполнитьРасход();
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирование движений по списанию стоимости материалов в эксплуатации.
//
// Параметры:
//	СтруктураШапкиДокумента - Структура - Реквизиты документа
//	ТаблицаПоМатериалам - ТаблицаЗначений - Таблица документа
//	Заголовок - Строка - Заголовок сообщения об ошибке проведения 
//
Процедура ДвиженияПоСписаниюСтоимости(
	СтруктураШапкиДокумента,
	ТаблицаПоМатериалам,
	Заголовок
	)
	
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОшибок = УправлениеЗатратами.СформироватьТаблицуОшибок();
	
	ПроцедурыПогашенияСтоимости.СформироватьДвиженияПоСписаниюИзЭксплуатации(
		СтруктураШапкиДокумента,
		ТаблицаПоМатериалам,
		ТаблицаОшибок
	);
		
	УправлениеЗатратами.ВывестиСообщенияОбОшибках(
		СтруктураШапкиДокумента,
		ТаблицаОшибок,
		Заголовок
	);
	
КонецПроцедуры // ДвиженияПоСписаниюСтоимости()

Процедура ЗаполнитьКолонкиРегистраСписанныеМатериалыИзЭксплуатацииУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоМатериалам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Подразделение, "Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр()

Процедура ЗаполнитьКолонкиРегистраСписанныеМатериалыИзЭксплуатацииРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоМатериалам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,	   "ОтражатьВНалоговомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,                 "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации,    "ПодразделениеОрганизации");
	
	Если СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ИспользоватьСтатьюЗатратДокумента Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетДт, 		"СчетДт");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт1, 	"СубконтоДт1");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт2, 	"СубконтоДт2");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДт3, 	"СубконтоДт3");
		
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетДтНУ, 	"СчетДтНУ");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДтНУ1, "СубконтоДтНУ1");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДтНУ2, "СубконтоДтНУ2");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.СубконтоДтНУ3, "СубконтоДтНУ3");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл()

// Формирование движений по регистру СписанныеМатериалыИзЭксплуатации.
//
Процедура ДвиженияПоРегиструСписанныеМатериалыИзЭксплуатации(СтруктураШапкиДокумента, ИсходнаяТаблицаМатериалов, Отказ, Заголовок)
	
	ТаблицаПоМатериалам = ИсходнаяТаблицаМатериалов.Скопировать();
	
	СтруктураПоиска = Новый Структура("ВестиПартионныйУчетПоСериям", Ложь);
	МассивСтрок = ТаблицаПоМатериалам.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СерияНоменклатуры) Тогда
			СтрокаТаблицы.СерияНоменклатуры = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// МАТЕРИАЛЫ ПО РЕГИСТРУ СписанныеМатериалыИзЭксплуатации.
	НаборДвижений = Движения.СписанныеМатериалыИзЭксплуатации;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериалам, ТаблицаДвижений);
	
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
	КонецЦикла;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(СпособСписанияРасходов, "СпособСписанияРасходов");
	ТаблицаДвижений.ЗаполнитьЗначения(ТипСтоимости,   		  "ТипСтоимости");
	Если СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ИспользоватьСтатьюЗатратДокумента Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтатьяЗатрат, 		"СтатьяЗатрат");
		ТаблицаДвижений.ЗаполнитьЗначения(НоменклатурнаяГруппа, "НоменклатурнаяГруппа");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииМатериаловВЭксплуатации.СписаниеИзЭксплуатации, "КодОперации");
    	
	ЗаполнитьКолонкиРегистраСписанныеМатериалыИзЭксплуатацииУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоМатериалам);
	ЗаполнитьКолонкиРегистраСписанныеМатериалыИзЭксплуатацииРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоМатериалам);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.СписанныеМатериалыИзЭксплуатации.ВыполнитьДвижения();
		
		// Запишем движения для последующей выборки запросом.
		Если СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ИспользоватьСтатьюЗатратДокумента Тогда
			Движения.СписанныеМатериалыИзЭксплуатации.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеМатериалыИзЭксплуатации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПОДГОТОВКИ ТАБЛИЦ ЗНАЧЕНИЙ ДЛЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Материалы",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента)

	ТаблицаМатериалов = РезультатЗапросаПоМатериалам.Выгрузить();
	
	Возврат ТаблицаМатериалов;

КонецФункции // ПодготовитьТаблицуМатериалов()

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл(СтруктураПолей)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПолей.Вставить("СчетУчетаБУ"      				, "СчетПередачиБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"    				, "СчетПередачиНУ");

	СтруктураПолей.Вставить("СчетПередачиБУ"      			, "СчетПередачиБУ");
	СтруктураПолей.Вставить("СчетПередачиНУ"    			, "СчетПередачиНУ");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	СтруктураШапкиДокумента = ПроверкаРеквизитов(Отказ, Заголовок);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата
		);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим таблицу материалов для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        				, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              				, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               				, "Номенклатура.Набор");
	СтруктураПолей.Вставить("ВестиОперативныйУчетОстатковНЗП"	, "Номенклатура.ВестиОперативныйУчетОстатковНЗП");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"		, "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("Количество"          				, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	
	Если ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
		СтруктураПолей.Вставить("Стоимость"						, "Сумма");
		СтруктураПолей.Вставить("СтоимостьРегл"					, "СуммаРегл");
	КонецЕсли;
	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"		, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         		, "СерияНоменклатуры");
	
	СтруктураПолей.Вставить("ФизЛицо"         					, "ФизЛицо");
	СтруктураПолей.Вставить("НазначениеИспользования"         	, "НазначениеИспользования");
	СтруктураПолей.Вставить("СпособОтраженияРасходов"         	, "НазначениеИспользования.СпособОтраженияРасходов");
	СтруктураПолей.Вставить("ДокументПередачи"         			, "ДокументПередачи");
	
	ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл(СтруктураПолей);
	
	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);
	ТаблицаПоМатериалам = ПодготовитьТаблицуМатериалов(РезультатЗапросаПоМатериалам, СтруктураШапкиДокумента);
	
	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Материалы", 	ТаблицаПоМатериалам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоМатериалам, Отказ, Заголовок);
		//начало изменений
		Если Материалы.Количество() <> 0 
			И НЕ Отказ Тогда
			Если глЗначениеПеременной("ИспользоватьБлокировкуДанных")  Тогда
				Движения.МатериалыВЭксплуатации.БлокироватьДляИзменения = Истина;
			КонецЕсли;
			Движения.Записать();
			Движения.МатериалыВЭксплуатации.КонтрольОстатковПРГ(ЭтотОбъект, "Материалы", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;
		//конец изменений 
	КонецЕсли;
	
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоМатериалам", ТаблицаПоМатериалам));
	
КонецПроцедуры	// ОбработкаПроведения()

// Процедура - обработчик события ОбработкаЗаполнения
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
		
		// Заполнение шапки
		ОтражатьВБухгалтерскомУчете  = Основание.ОтражатьВБухгалтерскомУчете;
		ОтражатьВНалоговомУчете      = Основание.ОтражатьВНалоговомУчете;
		ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		Организация                  = Основание.Организация;
		Подразделение                = Основание.Подразделение;
		ПодразделениеОрганизации     = Основание.ПодразделениеОрганизации;
		Комментарий   = Основание.Комментарий;
		Ответственный = Основание.Ответственный;
		Склад         = Основание.Склад;
		
		Для Каждого ТекСтрокаМатериалы Из Основание.Материалы Цикл
			
			НоваяСтрока = Материалы.Добавить();
			
			НоваяСтрока.Номенклатура               = ТекСтрокаМатериалы.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = ТекСтрокаМатериалы.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = ТекСтрокаМатериалы.СерияНоменклатуры;
			
			НоваяСтрока.ЕдиницаИзмерения           = ТекСтрокаМатериалы.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест       = ТекСтрокаМатериалы.ЕдиницаИзмеренияМест;
			НоваяСтрока.Количество                 = ТекСтрокаМатериалы.Количество;
			НоваяСтрока.КоличествоМест             = ТекСтрокаМатериалы.КоличествоМест;
			НоваяСтрока.Коэффициент                = ТекСтрокаМатериалы.Коэффициент;
			
			НоваяСтрока.СчетПередачиБУ             = ТекСтрокаМатериалы.СчетПередачиБУ;
			НоваяСтрока.СчетПередачиНУ             = ТекСтрокаМатериалы.СчетПередачиНУ;
			
			НоваяСтрока.ФизЛицо 				   = ТекСтрокаМатериалы.ФизЛицо;
			НоваяСтрока.НазначениеИспользования    = ТекСтрокаМатериалы.НазначениеИспользования;
			
			НоваяСтрока.ДокументПередачи = Основание;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
  	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 	
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
