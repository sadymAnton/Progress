
Перем мУдалятьДвижения;

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
		Если ЭтоНовый() Тогда
			Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
			Возврат;
		ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
			Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
			Возврат;
		КонецЕсли;
		
		Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		// Получить экземпляр документа на печать
		Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
			Если ТабДокумент = Неопределено Тогда
				Возврат
			КонецЕсли;
		КонецЕсли; 
		
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,, Ссылка));
		
	КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
		Возврат Новый Структура();
		
	КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа.
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	РезультатЗапросаПоТЧ 	= СформироватьЗапросПоТЧ();
	ТаблицаПоТЧ 			= РезультатЗапросаПоТЧ.Выгрузить();
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТЧ, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗапросПоТЧ()
	ЗапросПоТЧ = Новый Запрос;
	ЗапросПоТЧ.Текст ="ВЫБРАТЬ
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.Проект,
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.Дивизион,
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.КатегорияКлиента,
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.Вывеска,
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.ВидПоказателя,
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.Показатель,
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.Группа,
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.Ссылка.Период КАК Месяц,
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.ТоварнаяКатегория,
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.АдресПоставки,
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.Брендообъем,
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.ВидДополнительнойСкидки
	                  |ИЗ
	                  |	Документ.ППП_ПланДополнительногоИзмененияЦеныПродажи.ТабличнаяЧасть КАК ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть
	                  |ГДЕ
	                  |	ППП_ПланДополнительногоИзмененияЦеныПродажиТабличнаяЧасть.Ссылка = &Ссылка" ;
	ЗапросПоТЧ.УстановитьПараметр("Ссылка",Ссылка);
	
	Возврат ЗапросПоТЧ.Выполнить();
	
КонецФункции 	

// Выполняет движения по регистрам.
//
// Параметры:
//  СтруктураШапкиДокумента - структура реквизитов шапки.
//  ТаблицаПоТоварам- таблица товаров.
//  Отказ - флаг отказа в проведении.
//  Заголовок - заголовок сообщения об ошибках.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоТЧ, Отказ, Заголовок)
	
	НаборДвиженийТЧ 	= Движения.ППП_ПланДополнительногоИзмененияЦенПродаж;
	ТаблицаДвиженийТЧ 	= НаборДвиженийТЧ.Выгрузить();
	
	//{07.03.2017 Островерхий заявка №б/н, не требуется. Плюс данный подход ведет к значительной деградации производительности. 
	////Нужно обнулить все записи которые уже есть
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ППП_ПланДополнительногоИзмененияЦенПродажСрезПоследних.Дивизион,
	//			   |	ППП_ПланДополнительногоИзмененияЦенПродажСрезПоследних.КатегорияКлиента,
	//			   |	ППП_ПланДополнительногоИзмененияЦенПродажСрезПоследних.Проект,
	//			   |	ППП_ПланДополнительногоИзмененияЦенПродажСрезПоследних.Вывеска,
	//			   |	ППП_ПланДополнительногоИзмененияЦенПродажСрезПоследних.Группа,
	//			   |	ППП_ПланДополнительногоИзмененияЦенПродажСрезПоследних.ВидПоказателя,
	//			   |	ППП_ПланДополнительногоИзмененияЦенПродажСрезПоследних.ТоварнаяКатегория,
	//			   |	ППП_ПланДополнительногоИзмененияЦенПродажСрезПоследних.АдресПоставки,
	//			   |	ППП_ПланДополнительногоИзмененияЦенПродажСрезПоследних.Брендообъем,
	//			   |	ППП_ПланДополнительногоИзмененияЦенПродажСрезПоследних.Месяц
	//			   |ИЗ
	//			   |	РегистрСведений.ППП_ПланДополнительногоИзмененияЦенПродаж.СрезПоследних(, ) КАК ППП_ПланДополнительногоИзмененияЦенПродажСрезПоследних";
	//Запрос.УстановитьПараметр("Дата", НачалоДня(Дата) - 1);
	//Запрос.УстановитьПараметр("Месяц", НачалоМесяца(Период));
	//
	//Результат = Запрос.Выполнить().Выгрузить();
	//Сч = 0;
	//Пока Сч < Результат.Количество() Цикл
	//	СтрРезультат =  Результат[Сч];
	//	СтрТаблицы = ТаблицаПоТЧ.НайтиСтроки(Новый Структура("Дивизион,КатегорияКлиента,Проект,Вывеска,Месяц,Группа,ВидПоказателя,ТоварнаяКатегория,АдресПоставки,Брендообъем", 
	//	СтрРезультат.Дивизион,
	//	СтрРезультат.КатегорияКлиента,  
	//	СтрРезультат.Проект,
	//	СтрРезультат.Вывеска,
	//	СтрРезультат.Месяц,
	//	СтрРезультат.Группа,
	//	СтрРезультат.ВидПоказателя
	//	,СтрРезультат.ТоварнаяКатегория 
	//	,СтрРезультат.АдресПоставки
	//	,СтрРезультат.Брендообъем
	//	));
	//	Если СтрТаблицы.Количество() > 0 Тогда
	//		Результат.Удалить(Сч);
	//	Иначе
	//		Сч = Сч + 1;
	//	КонецЕсли;
	//	
	//КонецЦикла; 
	//
	//Для каждого СтрРезультат  Из Результат  Цикл
	//	НоваяСтрока = ТаблицаПоТЧ.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрРезультат);
	//	НоваяСтрока.Показатель = 0;
	//КонецЦикла; 
	//07.03.2017 Островерхий}  
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТЧ, ТаблицаДвиженийТЧ);
	
	НаборДвиженийТЧ.мПериод          = Дата;
	НаборДвиженийТЧ.мТаблицаДвижений = ТаблицаДвиженийТЧ;
	
	Если Не Отказ Тогда								
		Движения.ППП_ПланДополнительногоИзмененияЦенПродаж.ВыполнитьДвижения();
		НаборДвиженийТЧ.Записать();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить.
	СтруктураОбязательныхПолей = Новый Структура;
	
	СтруктураОбязательныхПолей.Вставить("Организация");
	СтруктураОбязательныхПолей.Вставить("Ответственный");
	СтруктураОбязательныхПолей.Вставить("Период");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

мУдалятьДвижения = Ложь;

