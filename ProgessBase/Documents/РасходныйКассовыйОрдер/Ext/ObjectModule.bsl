Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

Перем РасчетыВозврат;

Перем мСтруктураПараметровДенежныхСредств;

Перем мУпрощенныйУчетВзаиморасчетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьРКО()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата                          КАК ДатаДокумента,
	|	Организация,
	|	Организация                   КАК ЮрФизЛицо,
	|	Организация                   КАК Руководители,
	|	Подразделение,
	|	Подразделение.Представление   КАК ПредставлениеПодразделения,
	|	СуммаДокумента                КАК Сумма,
	|	Контрагент,
	|	Контрагент.Представление      КАК ФИОПолучателя,
	|	ВалютаДокумента               КАК Валюта,
	|	ВалютаДокумента.Представление КАК ВалютаПредставление,
	|	Выдать,
	|	Приложение,
	|	ПоДокументу,
	|	Основание
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент   = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасходныйКассовыйОрдер_КО2";
	Макет         = ПолучитьОбщийМакет("КО2");
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаДокумента);
	
	// Выводим шапку накладной
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеОрганизации   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование,");
	ОбластьМакета.Параметры.ПредставлениеПодразделения = Шапка.ПредставлениеПодразделения;
	ОбластьМакета.Параметры.СуммаПрописью     = ОбщегоНазначения.СформироватьСуммуПрописью(Шапка.Сумма, Шапка.Валюта);
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОбОрганизации.КодПоОКПО;
	ОбластьМакета.Параметры.ДатаДокумента     = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.НомерДокумента    = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	
	КодыСчетСубсчет=ОпределитьКодыСчетСубсчет();
	
	ОбластьМакета.Параметры.ДебетСубСчет=КодыСчетСубсчет.Дебет;
	ОбластьМакета.Параметры.КредитСубСчет=КодыСчетСубсчет.Кредит;

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Шапка.Руководители, КонецДня(Шапка.ДатаДокумента),);
	Руководитель = Руководители.Руководитель;
	РуководительДолжность = Руководители.РуководительДолжность;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	Кассир       = Руководители.Кассир;

	ОбластьМакета.Параметры.ФИОРуководителя       = Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителя = РуководительДолжность;

	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
	ОбластьМакета.Параметры.ФИОКассира            = Кассир;
	
	ТекстОснование=Шапка.Основание;
	
	Если ТекстОснование="" И ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		
		ТекстОснование=Лев(Строка(РасчетныйДокумент),Найти(Строка(РасчетныйДокумент),Строка(РасчетныйДокумент.Дата))-1)+Формат(РасчетныйДокумент.Дата,"ДФ=dd.MM.yyyy");
		
	КонецЕсли;

	ОбластьМакета.Параметры.Основание             = ТекстОснование;
	ОбластьМакета.Параметры.Приложение            = Шапка.Приложение;
	
	ТекстВыдать=Шапка.Выдать;
	ТекстПоДокументу=Шапка.ПоДокументу;
		
	Если ТекстВыдать="" И ЗначениеЗаполнено(Контрагент) Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ТекстВыдать =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);
			
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
			ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
			
			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				
				ТекстВыдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
			
	Если ТекстПоДокументу="" И ЗначениеЗаполнено(Контрагент) И (ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
			ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками) Тогда	
		
		ДокФизЛица = ОбщегоНазначения.ПаспортныеДанные(Контрагент, Дата);
		
		Если ЗначениеЗаполнено(ДокФизЛица) Тогда
			ТекстПоДокументу = Строка(ДокФизЛица.Вид) + " серия " +
			ДокФизЛица.Серия       + ", номер " +
			ДокФизЛица.Номер       + ", выданый " +
			Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
			ДокФизЛица.Выдан;
		КонецЕсли;
		
	КонецЕсли;
		
	ОбластьМакета.Параметры.ФИОПолучателя         = ТекстВыдать;
	ОбластьМакета.Параметры.РеквизитыДокументаУдостоверяющегоЛичность = ТекстПоДокументу;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьРКО()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "РКО" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьРКО();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;

	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, Строка(ВидОперации)));

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("РКО", "Расходный кассовый ордер");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет данные по УСН
//
Процедура ЗаполнитьНастройкуКнигиУСН() Экспорт

	Если РучнаяНастройка_УСН Тогда
		ТекстВороса = 
		"Отражение платежа в Книге учета доходов и расходов настроено вручную.
		|Перезаполнить показатели Книги учета доходов и расходов?";
		Если Вопрос(ТекстВороса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			РучнаяНастройка_УСН = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СуммаДляКУДиР = СуммаДокумента;

	Если НЕ ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		КурсВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СуммаДляКУДиР = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР, ВалютаДокумента, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
	КонецЕсли;

	Если НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата) Тогда

		Графа4_УСН      = СуммаДляКУДиР;
		Графа5_УСН      = СуммаДляКУДиР;
		Графа6_УСН      = 0;
		Графа7_УСН      = 0;
		НДС_УСН         = 0;
		ДоходыЕНВД_УСН  = Ложь;
		РасходыЕНВД_УСН = Ложь;
		Содержание_УСН  = "" + ВидОперации + ".";

		Если ВидОперации = перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
			Содержание_УСН = "Возврат денежных средств покупателю.";
			Графа4_УСН     = 0;
			Графа5_УСН     = 0;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьНастройкуКнигиУСН()

#КонецЕсли

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) Экспорт

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура выполняет заполнение суммы документа,
// суммы взаиморасчетов по регистру "ПодотчетныеЛицаВзаиморасчетыКомпании".
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовРаботника);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СуммаВзаиморасчетовОстаток КАК СуммаДолга // в валюте взаиморасчетов
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(,
	|	                                                           ФизЛицо = &Контрагент
	|	                                                         И РасчетныйДокумент = &РасчетныйДокумент
	|	                                                         И Валюта = &ВалютаВзаиморасчетов)
	|ГДЕ
	|	СуммаВзаиморасчетовОстаток < 0
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

// Заполняет по данным переданного физлица поля Выдать и По документу
//
// Параметры
//   СсылкаРаботник - СправочникСсылка.ФизическиеЛица, работник которому выдают з/пл
//                 или кассир-раздатчик
//
Процедура ЗаполнитьПоляВыдатьПоДокументу(СсылкаРаботник) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаРаботник);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ФизическиеЛица.Наименование) КАК ФИО,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(300)) КАК ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо = &Ссылка) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&Дата, ФизЛицо = &Ссылка) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Ссылка";

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Выдать = Выборка.ФИО;
		
		Если Выборка.ДокументВид <> NULL Тогда
		
			ПоДокументу = "" + Выборка.ДокументВид 
			+ ", серия: " + Выборка.ДокументСерия + ", № " + Выборка.ДокументНомер 
			+ ", выдан: " + Формат(Выборка.ДокументДатаВыдачи,"ДФ='дд ММММ гггг';ДП='Не указано'") + " года, " 
			+ СокрЛП(Выборка.ДокументКемВыдан) + ", № подр. " + Выборка.ДокументКодПодразделения; 
			
		Иначе
			ПоДокументу = ""
		КонецЕсли; 
		
	Иначе
		Выдать = "";
		ПоДокументу = "";
	КонецЕсли;
	

КонецПроцедуры // ЗаполнитьПоляВыдатьПоДокументу()

// Выполняет автоматическое заполнение документа 
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  нет
//
Процедура АвтозаполнениеДепонентов(ОтборПоРаботникам = Неопределено) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Физлица",			ОтборПоРаботникам);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Дата",				?(ЭтоНовый(),КонецДня(Дата),Дата));
	
	ОтборПоРаботникамТекст = ?(ОтборПоРаботникам = Неопределено,"","И Физлицо В (&Физлица)");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВзаиморасчетыСДепонентамиОрганизацийОстатки.Физлицо КАК Физлицо,
	|	ВзаиморасчетыСДепонентамиОрганизацийОстатки.Ведомость КАК Ведомость,
	|	ВзаиморасчетыСДепонентамиОрганизацийОстатки.Организация КАК Организация,
	|	ВзаиморасчетыСДепонентамиОрганизацийОстатки.СуммаОстаток КАК СуммаКВыплате
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(&Дата, Организация = &Организация
	|				" + ОтборПоРаботникамТекст + ") КАК ВзаиморасчетыСДепонентамиОрганизацийОстатки
	|ГДЕ
	|	ВзаиморасчетыСДепонентамиОрганизацийОстатки.СуммаОстаток > 0";
	
	ВыплатаДепонентов.Загрузить(Запрос.Выполнить().Выгрузить());
	СуммаДокумента = ВыплатаДепонентов.Итог("СуммаКВыплате");
	
КонецПроцедуры //  Автозаполнение

// Выполняет автоматическое заполнение документа 
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  нет
//
Процедура АвтозаполнениеПлатежныхВедомостей() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата",?(ЭтоНовый(),КонецДня(Дата),Дата));
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаПлатежа
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|			И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|ГДЕ
		|	(НЕ ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|				ИЗ
		|					Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|				ГДЕ
		|					ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособВыплаты = &ЧерезКассу
		|					И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = &НеВыплачено
		|					И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация = &Организация))
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация = &Организация
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.СпособВыплаты = &ЧерезКассу
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата <= &Дата
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма + ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) > 0";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("ЧерезКассу",Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
		Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
		Запрос.УстановитьПараметр("НеВыплачено",Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
		
	Иначе

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗарплатаКВыплатеЗарплата.Ссылка КАК Ведомость,
		|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма) КАК СуммаКВыплате
		|ИЗ
		|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|			И ЗарплатаКВыплатеЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)

		|ГДЕ
		|	ЗарплатаКВыплатеЗарплата.Ссылка.Проведен
		|	И ЗарплатаКВыплатеЗарплата.Ссылка.Дата <= &Дата
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 

		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеЗарплата.Ссылка
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма) > 0";
		
	КонецЕсли;
	
	ВыплатаЗаработнойПлаты.Загрузить(Запрос.Выполнить().Выгрузить());
	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
	УстановитьПриложение();
	
КонецПроцедуры //  АвтозаполнениеПлатежныхВедомостей

// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
// по заявке в регистре "ЗаявкиНаРасходованиеСредств"
//
Процедура ЗаполнитьПоЗаявкеРКОУпр() Экспорт
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаПлатежа,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Контрагент КАК Контрагент,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец.ОсновнойБанковскийСчет КАК СчетКонтрагента,
	|	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДокументРасчетовСКонтрагентом,
	|	ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовРаботника,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Ссылка КАК ЗаявкаНаРасходование,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Получатель КАК Получатель,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВидВыдачиДенежныхСредств КАК ВидВыдачиДенежныхСредств
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(, ЗаявкаНаРасходование = &ДокументЗаявка) КАК ЗаявкиНаРасходованиеСредствОстатки";
	
	Запрос.УстановитьПараметр("ДокументЗаявка",ДокументОснование);
	
	СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
	
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
			ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаПлатежа;
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
			
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаПлатежа;
			
			ВидВыдачиДенежныхСредств=Выборка.ВидВыдачиДенежныхСредств;
			
			Контрагент=Выборка.Получатель;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
			ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетовРаботника Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				СтруктураКурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетовРаботника,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			Контрагент                    = Выборка.Получатель;
			РасчетныйДокумент             = Выборка.РасчетныйДокумент;
			ВалютаВзаиморасчетовРаботника = Выборка.ВалютаВзаиморасчетовРаботника;
			
		Иначе
			
			Контрагент = Выборка.Контрагент;
			
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				
				СтруктураКурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
		СтрокаПлатеж.СтавкаНДС						 = СтавкаНДС;
		СтрокаПлатеж.Сделка							 = Выборка.Сделка;
		СтрокаПлатеж.ДокументРасчетовСКонтрагентом	 = Выборка.ДокументРасчетовСКонтрагентом;
		СтрокаПлатеж.ДоговорКонтрагента				 = Выборка.ДоговорКонтрагента;
	
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
		КонецЕсли;
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств	 = Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект							 = Выборка.Проект;
		СтрокаПлатеж.ДокументПланированияПлатежа	 = Выборка.ЗаявкаНаРасходование;
		СтрокаПлатеж.КурсВзаиморасчетовПлан			 = СтрокаПлатеж.КурсВзаиморасчетов;
		СтрокаПлатеж.СуммаПлатежаПлан				 = СтрокаПлатеж.СуммаПлатежа;
		
	КонецЦикла;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры // УправлениеДенежнымиСредствами.ЗаполнитьПоЗаявкеУпр()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Определяет коды счетов дебета и кредита для вывода в печатную форму.
//
Функция ОпределитьКодыСчетСубсчет() 
	
	КодыСчетов=Новый Структура("Дебет,Кредит");
	
	// Определяем код счета кредита
	КассаВВалюте = Ложь;
	Если Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
		КассаВВалюте = Истина;
	КонецЕсли;

	Если КассаВВалюте Тогда
		СчетКт = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал.Код;
		РасчетыВВалюте = Истина;
	Иначе
		СчетКт = ПланыСчетов.Хозрасчетный.КассаОрганизации.Код;
		РасчетыВВалюте = Ложь;
	КонецЕсли;
	
	КодыСчетов.Кредит=СчетКт;
	
	//Определяем коды счетов кредита. Если указаны и счет расчетов с контрагентом, и счет расчетов по авансам - выводим оба.
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда

		СтрокаДебет="";
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК Сумма,
		|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
		|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
		|
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено) И
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
		
		ВыборкаСумм = Запрос.Выполнить().Выбрать();
		Если ВыборкаСумм.Следующий() Тогда
			Если ЗначениеЗаполнено(ВыборкаСумм.Сумма) Тогда
				СтрокаДебет=СтрокаДебет + ", " + ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.Код;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаСумм.КомпенсацияЗаЗадержкуЗарплаты) Тогда
				СтрокаДебет=СтрокаДебет + ", " + ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Код;
			КонецЕсли;
		КонецЕсли;

		СтрокаДебет = Сред(СтрокаДебет,2);

	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику ТОгда

		СтрокаДебет="";
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка
		|	И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = &ФизЛицо
		|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)";
		
		Запрос.УстановитьПараметр("Ссылка",РасчетныйДокумент);
		Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
		Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
		
		ВыборкаСумм = Запрос.Выполнить().Выбрать();
		Если ВыборкаСумм.Следующий() Тогда
			Если ЗначениеЗаполнено(ВыборкаСумм.Сумма) Тогда
				СтрокаДебет=СтрокаДебет + ", " + ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.Код;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаСумм.КомпенсацияЗаЗадержкуЗарплаты) Тогда
				СтрокаДебет=СтрокаДебет + ", " + ПланыСчетов.Хозрасчетный.ПрочиеРасходы.Код;
			КонецЕсли;
		КонецЕсли;

		СтрокаДебет = Сред(СтрокаДебет,2);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
			
		СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам.Код;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			
		СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам.Код;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		Если КассаВВалюте Тогда
			СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал.Код;
		Иначе
			СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами.Код;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		
		СтрокаДебет     = СчетУчетаРасчетовСКонтрагентом.Код;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		
		Если НЕ КассаВВалюте Тогда
			СтрокаДебет = ПланыСчетов.Хозрасчетный.РасчетныеСчета.Код;
		Иначе
			СтрокаДебет = ПланыСчетов.Хозрасчетный.ВалютныеСчета.Код;
		КонецЕсли;
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ТабСчет=РасшифровкаПлатежа.Выгрузить();
		
		ТабСчет.Свернуть("СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам","СуммаПлатежа");
		
		СтрокаДебет="";
		
		Для Каждого Строка Из ТабСчет Цикл
			
			Если НЕ Строка.СчетУчетаРасчетовСКонтрагентом.Пустая() И Найти(СтрокаДебет,Строка.СчетУчетаРасчетовСКонтрагентом.Код)=0 Тогда
				СтрокаДебет=СтрокаДебет+", "+Строка.СчетУчетаРасчетовСКонтрагентом.Код;
			КонецЕсли;
			
			Если НЕ Строка.СчетУчетаРасчетовПоАвансам.Пустая() И Найти(СтрокаДебет,Строка.СчетУчетаРасчетовПоАвансам.Код)=0 Тогда
				СтрокаДебет=СтрокаДебет+", "+Строка.СчетУчетаРасчетовПоАвансам.Код;
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаДебет=Сред(СтрокаДебет,2);
		
	КонецЕсли;
	
	КодыСчетов.Дебет=СтрокаДебет;
	
	Возврат КодыСчетов;
	
	КонецФункции // ОпределитьКодыСчетСубсчет()

// Возвращает таблицу, аналогичную таблице "Расшифровка платежа" с добавленной колонкой "СуммаУпр"
//
Процедура ПолучитьТаблицуПлатежейРКОУпр()
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		 ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(Дата, ВалютаДокумента, Ссылка, "РасходныйКассовыйОрдер");

	Иначе 
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
		|	НЕОПРЕДЕЛЕНО КАК Сделка,
		|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетовСКонтрагентом,
		|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
		|	НЕОПРЕДЕЛЕНО КАК ВедениеВзаиморасчетов,
		|	ВыплатаЗаработнойПлатыДок.СуммаПлатежа КАК СуммаПлатежа,
		|	ВыплатаЗаработнойПлатыДок.СуммаПлатежа КАК СуммаВзаиморасчетов,
		|	ВыплатаЗаработнойПлатыДок.СуммаПлатежа КАК СуммаПлатежаПлан,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВыплатаЗаработнойПлатыДок.Ссылка.ВалютаДокумента = &ВалютаУпрУчета
		|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаПлатежа
		|			КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
		|				ТОГДА 0
		|			КОГДА КурсыУпрУчета.Курс = 0
		|				ТОГДА 0
		|			КОГДА КурсыДокумента.Курс ЕСТЬ NULL 
		|				ТОГДА 0
		|			КОГДА КурсыДокумента.Курс = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВыплатаЗаработнойПлатыДок.СуммаПлатежа * КурсыДокумента.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВыплатаЗаработнойПлатыДок.Ссылка.ВалютаДокумента = &ВалютаРеглУчета
		|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаПлатежа
		|			КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
		|				ТОГДА 0
		|			КОГДА КурсыУпрУчета.Курс = 0
		|				ТОГДА 0
		|			КОГДА КурсыДокумента.Курс ЕСТЬ NULL 
		|				ТОГДА 0
		|			КОГДА КурсыДокумента.Курс = 0
		|				ТОГДА 0
		|			ИНАЧЕ ВыплатаЗаработнойПлатыДок.СуммаПлатежа * КурсыДокумента.Курс / КурсыДокумента.Кратность
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
		|	ВыплатаЗаработнойПлатыДок.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ВыплатаЗаработнойПлатыДок.ДокументПланированияПлатежа КАК ДокументПланированияПлатежа,
		|	ЕСТЬNULL(ВыплатаЗаработнойПлатыДок.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь, ЛОЖЬ) КАК ВключатьВПлатежныйКалендарь,
		|	ВыплатаЗаработнойПлатыДок.Проект КАК Проект,
		|	ЕСТЬNULL(КурсыДокумента.Курс, 0) КАК КурсДокумента,
		|	ЕСТЬNULL(КурсыДокумента.Кратность, 0) КАК КратностьДокумента,
		|	ЕСТЬNULL(КурсыУпрУчета.Курс, 0) КАК КурсУпрУчета,
		|	ЕСТЬNULL(КурсыУпрУчета.Кратность, 0) КАК КратностьУпрУчета
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК ВыплатаЗаработнойПлатыДок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсыДокумента
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ВыплатаЗаработнойПлатыДок.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("ДатаДокумента",   Дата);
		Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
		Запрос.УстановитьПараметр("ВалютаУпрУчета",  глЗначениеПеременной("ВалютаУправленческогоУчета"));
		Запрос.УстановитьПараметр("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
		Запрос.УстановитьПараметр("Ссылка",          Ссылка);
		
		ТаблицаПлатежейУпр = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьТаблицуПлатежейРКОУпр()

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказуУпр(СтрокаПлатеж)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);

	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПлатеж.Сделка=Выборка.Сделка;
		Если Выборка.Сумма < 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.Сумма*(-1);
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
			                            СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			                            ВалютаДокумента,
			                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
										
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;							
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоЗаказуУпр()

Процедура ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(Основание)
	
	ВалютаДокумента=мВалютаРегламентированногоУчета;
	КурсДокумента=1;
	КратностьДокумента=1;
	
	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание,,"Проведен, ПометкаУдаления");
	
	ТаблицаВыплат = ЗарплатаКВыплатеОрганизацийДополнительный.ПолучитьДанныеДляВыплаты(Основание.Ссылка, Перечисления.ВыплаченностьЗарплаты.Выплачено);
	
	Если ТаблицаВыплат.Количество() = 0 Тогда
		ВызватьИсключение "По текущей ведомости нет сумм к выплате!";
	Иначе	
		
		ТаблицаВыплат.Свернуть("Ведомость", "СуммаКВыплате");
		
		СтрокаВедомость					= ВыплатаЗаработнойПлаты.Добавить();
		СтрокаВедомость.Ведомость		= ТаблицаВыплат[0].Ведомость;
		СтрокаВедомость.СуммаПлатежа	= ТаблицаВыплат[0].СуммаКВыплате;

		СуммаДокумента					= ТаблицаВыплат[0].СуммаКВыплате;
		
	КонецЕсли;
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;

	Организация=Основание.Организация;

	КассаПоУмолчанию=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");

	Если КассаПоУмолчанию.ВалютаДенежныхСредств=ВалютаДокумента Тогда
		Касса=КассаПоУмолчанию;
	Иначе
		Касса=Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	ОтражатьВУправленческомУчете = Истина;
	ОтражатьВБухгалтерскомУчете  = Истина;
	ОтражатьВНалоговомУчете      = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗарплатеКВыплатеУпр(Основание)
	
	ВалютаДокумента=глЗначениеПеременной("ВалютаУправленческогоУчета");

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	СтрокаВедомость=ВыплатаЗаработнойПлаты.Добавить();
	СтрокаВедомость.Ведомость=Основание;

	// Определим сумму выплаченной заработной платы
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка",Основание);

	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		СтрокаВедомость.СуммаПлатежа	= РезультатЗапроса.Сумма;
		СуммаДокумента					= РезультатЗапроса.Сумма;
	КонецЕсли;
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Организация = Справочники.Организации.ПустаяСсылка();

	КассаПоУмолчанию=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");

	Если КассаПоУмолчанию.ВалютаДенежныхСредств=ВалютаДокумента Тогда
		Касса=КассаПоУмолчанию;
	Иначе
		Касса=Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;

	ОтражатьВУправленческомУчете = Истина;
	ОтражатьВБухгалтерскомУчете  = Ложь;
	ОтражатьВНалоговомУчете      = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(Основание) 
	
	Организация             = Основание.Организация;
	Ответственный           = Основание.Ответственный;
	
	Подразделение     = Основание.ЦФО;

	Касса                   = Основание.БанковскийСчетКасса;
	ВалютаДокумента         = Основание.ВалютаДокумента;

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

	ОтражатьВУправленческомУчете=Истина;
	ОтражатьВБухгалтерскомУчете=Истина;

	ЗаполнениеДокументов.ЗаполнитьКассу(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	
	ВидОперацииЗаявка=Основание.ВидОперации;
	
	УправлениеДенежнымиСредствами.ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииЗаявка);
	
	Ответственный     = Основание.Ответственный;
	ДокументОснование = Основание.Ссылка;
	
	Если ВалютаДокумента.Пустая() Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли;

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ЗаполнитьПоЗаявкеРКОУпр();
	
КонецПроцедуры

// Заполняет документ на основании приходного кассового ордера\
//
Процедура ЗаполнитьПоПКОУпр()
	
	Если ДокументОснование.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОснование.ВалютаДокумента, ДокументОснование.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;
		
		ВидОперации=Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
				
		Контрагент = ДокументОснование.Контрагент;
		
		Для Каждого СтрокаОснование ИЗ ДокументОснование.РасшифровкаПлатежа Цикл
			
			СтрокаПлатеж      = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента  	 = СтрокаОснование.ДоговорКонтрагента;
			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			СтрокаПлатеж.СуммаПлатежа=СтрокаОснование.СуммаПлатежа;
			
			СтрокаПлатеж.Сделка = СтрокаОснование.Сделка;
			
			Если СтрокаОснование.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
				СтрокаПлатеж.ДокументРасчетовСКонтрагентом = ДокументОснование;
			КонецЕсли;
			
			СтрокаПлатеж.СтавкаНДС=СтрокаОснование.СтавкаНДС;
			
		КонецЦикла;
		
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		
		Для Индекс=0 По ДокументОснование.РасшифровкаПлатежа.Количество()-1 Цикл
			
			СтрокаПлатеж=РасшифровкаПлатежа[Индекс];
			СтрокаОснование=ДокументОснование.РасшифровкаПлатежа[Индекс];
			
			Если (ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента))
				И СтрокаПлатеж.ДоговорКонтрагента=СтрокаОснование.ДоговорКонтрагента Тогда // Остался договор из основания
						
				СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаОснование.СуммаПлатежа, 
				ДокументОснование.ВалютаДокумента, 
				СтрокаОснование.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				КурсОснования, СтрокаОснование.КурсВзаиморасчетов, 
				КратностьОснования, СтрокаОснование.КратностьВзаиморасчетов);
				
				СтрокаПлатеж.СуммаПлатежа     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
				СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента, 
				СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
					
					СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					СтрокаПлатеж.КурсВзаиморасчетов=1;
					СтрокаПлатеж.КратностьВзаиморасчетов=1;
					
				Иначе
					
					СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, 
					ВалютаДокумента, 
					СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов,
					КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов, 
					КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
					
				КонецЕсли;
				
			КонецЕсли;	
			
			УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЦикла;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	Иначе
		
		ВидОперации=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее;
		// Документ не вводится на основании ПКО с другими видами операций
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПКОУпр()

// Заполняет поле Приложение перечнем ведомостей
//
// Параметры
//  нет
//
Процедура УстановитьПриложение(НовыйДокумент = Неопределено) Экспорт

	Приложение = "";
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		Если ЗначениеЗаполнено(НовыйДокумент) Тогда
			Приложение = "Платежная ведомость №" + СокрЛП(НовыйДокумент.Номер) + " от " + Формат(НовыйДокумент.Дата,"ДЛФ=DD");
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Документы",ВыплатаЗаработнойПлаты.ВыгрузитьКолонку("Ведомость"));
		Если ОтражатьВБухгалтерскомУчете Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗарплатаКВыплатеОрганизаций.Номер КАК Номер,
			|	ЗарплатаКВыплатеОрганизаций.Дата
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
			|ГДЕ
			|	ЗарплатаКВыплатеОрганизаций.Ссылка В(&Документы)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номер";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗарплатаКВыплате.Номер КАК Номер,
			|	ЗарплатаКВыплате.Дата
			|ИЗ
			|	Документ.ЗарплатаКВыплате КАК ЗарплатаКВыплате
			|ГДЕ
			|	ЗарплатаКВыплате.Ссылка В(&Документы)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номер";
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		ПерваяВедомость = Истина;
		Пока Выборка.Следующий() Цикл
			Если ПерваяВедомость Тогда
				Если ВыплатаЗаработнойПлаты.Количество() = 1 Тогда
					Приложение = "Платежная ведомость "	
				Иначе 	
					Приложение = "Платежные ведомости: "	
				КонецЕсли;
				ПерваяВедомость = Ложь;
			Иначе
				Приложение = Приложение + ";" 	
			КонецЕсли;
			Приложение = Приложение + " №" + СокрЛП(Выборка.Номер) + " от " + Формат(Выборка.Дата,"ДЛФ=DD") 	
		КонецЦикла;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
	КонецЕсли;

КонецПроцедуры // УстановитьПриложение()

// Заполняет поле Основание в зависимости от вида операции
//
// Параметры
//  нет
//
Процедура УстановитьОснование() Экспорт

	ОснованиеПоОперации = "";
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		ОснованиеПоОперации = "Выплата заработной платы"	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		ОснованиеПоОперации = "Выплата депонированной заработной платы"	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		ОснованиеПоОперации = "Выплата заработной платы"	
	КонецЕсли;

	Если Основание <> ОснованиеПоОперации Тогда
		Основание = ОснованиеПоОперации;
	КонецЕсли

КонецПроцедуры // УстановитьОснование()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Организация");
	СтруктураПолей.Вставить("Касса");
	СтруктураПолей.Вставить("СуммаДокумента");
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		СтруктураПолей.Вставить("СчетОрганизации","Не указан счет организации");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		СтруктураПолей.Вставить("РасчетныйДокумент","Не указан договор займа");
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		СтруктураПолей.Вставить("РасчетныйДокумент","Не указана платежная ведомость");
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		Если ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
			СтруктураПолей.Вставить("Контрагент", "Не указана касса ККМ");
		Иначе
			СтруктураПолей.Вставить("Контрагент", "Не указан склад - НТТ");
		КонецЕсли; 
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчетыУпр()

	СтруктураПолей = Новый Структура;
	
	Если НЕ Оплачено Тогда // иначе эти реквизиты проверяются раньше, при вызове СтруктураОбязательныхПолейОплатаУпр()
		СтруктураПолей.Вставить("Организация");
		СтруктураПолей.Вставить("Касса");
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			СтруктураПолей.Вставить("Контрагент");
			СтруктураПолей.Вставить("СуммаДокумента");
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		СтруктураПолей.Вставить("ВалютаВзаиморасчетовРаботника");
	КонецЕсли;
	
	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейРасчетыУпр()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ,  Заголовок, "Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок, "Сумма взаиморасчетов");

		Если Не Отказ Тогда

			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;

			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТЧ

//Проверяет соответствие суммы, выданной по ведомостям, сумме документа.
//
Процедура ПроверитьСуммуКВыплатеРаботнику(Отказ,Заголовок)
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты), 0) КАК СуммаВыплачено
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &парамПлатВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = &парамКонтрагент
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)";
	
	Запрос.УстановитьПараметр("парамПлатВедомость",			РасчетныйДокумент);
	Запрос.УстановитьПараметр("парамКонтрагент",			Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Или Выборка.СуммаВыплачено <> СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не совпадает сумма документа и сумма по ведомости на выплату заработной платы.");
		Отказ=Истина;
	КонецЕсли;
		
КонецПроцедуры // ПроверитьСуммуКВыплатеРаботнику

Процедура ДвиженияПоЗарплатеУпр()
	
	// По регистру управленческих расчетов с работниками
	Если НЕ ОтражатьВБухгалтерскомУчете
		И (Оплачено ИЛИ НЕ ОтражатьВУправленческомУчете) Тогда

		ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");

		// По регистру ВзаиморасчетыСРаботниками
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.Текст=
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеЗарплата.Ссылка КАК Ведомость,
		|	ЗарплатаКВыплатеЗарплата.Физлицо,
		|	ЗарплатаКВыплатеЗарплата.Сумма,
		|	ЗарплатаКВыплатеЗарплата.Ссылка.ХарактерВыплаты
		|ИЗ
		|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
		|		ПО ЗарплатаКВыплатеЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
		|ГДЕ
		|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
		Результат = Запрос.Выполнить().Выбрать();

		Пока Результат.Следующий() Цикл

			СтрокаДвижения = Движения.СведенияОВыплатахРаботникамПоПлатежнымВедомостям.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДвижения,Результат);			
			
			Строка = Движения.ВзаиморасчетыСРаботниками.Добавить();

			Строка.Период      = Дата;
			Строка.ВидДвижения = ВидДвиженияНакопления.Расход;
			Строка.Физлицо     = Результат.ФизЛицо;
			Строка.СуммаУпр    = Результат.Сумма;
			Строка.ХарактерВыплаты = Результат.ХарактерВыплаты;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Формирует запрос по табличной части документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРКОРеглВед()
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ведомость,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ХарактерВыплаты,
	|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации, МЕСЯЦ) КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация КАК Организация,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК ВедомостьНаВыплату,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ХарактерВыплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация,
	|	НАЧАЛОПЕРИОДА(ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации, МЕСЯЦ),
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) <> 0";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРКОРеглВед()

// Формирует запрос по табличной части документа
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРКОРеглРаб()
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("парамПлатВедомость",	РасчетныйДокумент);
	Запрос.УстановитьПараметр("парамКонтрагент",	Контрагент);
	
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ХарактерВыплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК ВедомостьНаВыплату,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
	|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК СуммаВзаиморасчетов,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
	|		ПО (ВЫБОР
	|				КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация
	|				ИНАЧЕ ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация.ГоловнаяОрганизация
	|			КОНЕЦ = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация)
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &парамПлатВедомость
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = &парамКонтрагент
	|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ХарактерВыплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРКОРеглРаб()

Процедура ДвиженияПоВзаиморасчетыСРаботникамиОрганизации()

	Запрос = Новый Запрос;
	ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// По регистру ВзаиморасчетыСРаботникамиОрганизации
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		// По регистру ВзаиморасчетыСРаботникамиОрганизаций
		Результат = СформироватьЗапросПоРКОРеглВед().Выбрать();
		
		Пока Результат.Следующий() Цикл
			Если Результат.СуммаВзаиморасчетов <> 0 Тогда
				СтрокаДвижения = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения,Результат);
				
				СтрокаДвижения = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения,Результат);
				СтрокаДвижения.Период      = Дата;
				СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Расход;
				СтрокаДвижения.Ведомость   = Результат.ВедомостьНаВыплату;
				СтрокаДвижения.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу; 
			КонецЕсли;
		КонецЦикла;
		
		// По регистру расчетов с бюджетом по НДФЛ
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПлДок.Ссылка.Дата > КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
		|			ТОГДА ПлДок.Ссылка.Дата
		|		ИНАЧЕ КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
		|	КОНЕЦ КАК ДатаНДФЛ
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК ПлДок
		|ГДЕ
		|	ПлДок.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлДок.Ссылка.Дата";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ДатаНДФЛ = Выборка.ДатаНДФЛ;
		
		СтруктураДокумента = Новый Структура("ДатаНДФЛ,Ссылка,Период,ОбособленноеПодразделение,Организация",ДатаНДФЛ,Ссылка,Дата,Организация,ГоловнаяОрганизация);
		
		ТекстТаблицыВыплаты = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплате.Физлицо КАК ФизЛицо,
		|	СУММА(ЗарплатаКВыплате.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТВыплатыФизлицам
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК ПлДок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|			ПО ЗарплатаКВыплате.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|				И ЗарплатаКВыплате.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|				И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
		|		ПО ПлДок.Ведомость = ЗарплатаКВыплате.Ссылка
		|ГДЕ
		|	ПлДок.Ссылка = &ДокументСсылка
		|	И ЗарплатаКВыплате.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплате.Физлицо
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗарплатаКВыплате.Сумма) <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";
		
		ПроведениеРасчетовПереопределяемый.СформироватьРасчетыПоНДФЛПриВыплате(СтруктураДокумента, ТекстТаблицыВыплаты, Движения.НДФЛРасчетыСБюджетом, Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		// По регистру ВзаиморасчетыСРаботникамиОрганизаций
		Результат = СформироватьЗапросПоРКОРеглРаб();
		
		Если Не Результат.Пустой() Тогда
			
			СтрокаДвижения = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Добавить();
			СтрокаДвижения.Физлицо = Контрагент;
			СтрокаДвижения.Ведомость = РасчетныйДокумент;
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Если Выборка.СуммаВзаиморасчетов <> 0 Тогда
				СтрокаДвижения = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДвижения,Выборка);
				СтрокаДвижения.Период        = Дата;
				СтрокаДвижения.ВидДвижения   = ВидДвиженияНакопления.Расход;
				СтрокаДвижения.Ведомость     = Выборка.ВедомостьНаВыплату;
				СтрокаДвижения.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу; 
			КонецЕсли;
			
		КонецЕсли;
		
		// По регистру расчетов с бюджетом по НДФЛ
		
		ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		
		Запрос=Новый Запрос;
		Запрос.УстановитьПараметр("ПлатежнаяВедомость",	РасчетныйДокумент);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПлДок.Дата > КОНЕЦПЕРИОДА(ПлДок.ПериодРегистрации, МЕСЯЦ)
		|			ТОГДА ПлДок.Дата
		|		ИНАЧЕ КОНЕЦПЕРИОДА(ПлДок.ПериодРегистрации, МЕСЯЦ)
		|	КОНЕЦ КАК ДатаНДФЛ
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций КАК ПлДок
		|ГДЕ
		|	ПлДок.Ссылка = &ПлатежнаяВедомость";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		ДатаНДФЛ = Выборка.ДатаНДФЛ;
		
		СтруктураДокумента = Новый Структура("ДатаНДФЛ,Ссылка,Период,ОбособленноеПодразделение,Организация",ДатаНДФЛ,Ссылка,Дата,Организация,ГоловнаяОрганизация);
		
		ТекстТаблицыВыплаты = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплате.Физлицо КАК ФизЛицо,
		|	СУММА(ЗарплатаКВыплате.Сумма) КАК Сумма
		|ПОМЕСТИТЬ ВТВыплатыФизлицам
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|			ПО ЗарплатаКВыплате.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|				И ЗарплатаКВыплате.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|				И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
		|		ПО РасходныйКассовыйОрдер.РасчетныйДокумент = ЗарплатаКВыплате.Ссылка
		|			И РасходныйКассовыйОрдер.Контрагент = ЗарплатаКВыплате.Физлицо
		|ГДЕ
		|	РасходныйКассовыйОрдер.Ссылка = &ДокументСсылка
		|	И ЗарплатаКВыплате.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплате.Физлицо
		|
		|ИМЕЮЩИЕ
		|	СУММА(ЗарплатаКВыплате.Сумма) <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";
		
		ПроведениеРасчетовПереопределяемый.СформироватьРасчетыПоНДФЛПриВыплате(СтруктураДокумента, ТекстТаблицыВыплаты, Движения.НДФЛРасчетыСБюджетом, Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоВзаиморасчетыСРаботникамиОрганизации()

Процедура ДвиженияПоЗарплатеРегл()
	
	Если не (ОтражатьВБухгалтерскомУчете 
		И (Оплачено ИЛИ НЕ ОтражатьВУправленческомУчете)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям ИЛИ
		ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		ДвиженияПоВзаиморасчетыСРаботникамиОрганизации();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		Для каждого СтрокаТЧ Из ВыплатаДепонентов Цикл
			
			Если СтрокаТЧ.СуммаКВыплате = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = Движения.ВзаиморасчетыСДепонентамиОрганизаций.Добавить();
			
			// Свойства
			Движение.Период      = Дата;
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			// Измерения
			Движение.Организация = Организация;
			Движение.ФизЛицо     = СтрокаТЧ.ФизЛицо;
			Движение.Ведомость   = СтрокаТЧ.Ведомость;
			
			// Ресурсы
			Движение.Сумма		 = СтрокаТЧ.СуммаКВыплате;
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ДвиженияПоРегистрамУпр(Режим,Отказ,Заголовок,СтруктураШапкиДокумента);
	
	мУпрощенныйУчетВзаиморасчетов 		= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
	мУпрощенныйУчетВзаиморасчетовУпр	= глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").УпрощенныйУчетВзаиморасчетов;

	
	// Движения по зарплатным регистрам
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		Если НЕ мУпрощенныйУчетВзаиморасчетов Тогда
			
			ДвиженияПоЗарплатеРегл();
			
		КонецЕсли; 
		
		Если НЕ мУпрощенныйУчетВзаиморасчетовУпр Тогда
			
			ДвиженияПоЗарплатеУпр();
			
		КонецЕсли; 
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		Если НЕ мУпрощенныйУчетВзаиморасчетов Тогда
			
			ДвиженияПоЗарплатеРегл();
			
		КонецЕсли; 
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		ДвиженияПоЗарплатеРегл();
		
	КонецЕсли;

	ДвиженияПоРегистрамРегл(Режим, Отказ, Заголовок,СтруктураШапкиДокумента);
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(Режим, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли; 

КонецПроцедуры // ДвиженияПоРегистрам()

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(Режим, Отказ, Заголовок,СтруктураШапкиДокумента)

	мСтруктураПараметровДенежныхСредств.Вставить("РасчетыВозврат",               РасчетыВозврат);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами",    ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",        ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",          Касса);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",                 Дата);
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКассаПолучатель", СчетОрганизации);
		мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредствПолучатель",  Перечисления.ВидыДенежныхСредств.Безналичные);
		ПоОбъявлениюНаВзносНаличными = НЕ ОбъявлениеНаВзносНаличными.Пустая();
		мСтруктураПараметровДенежныхСредств.Вставить("ПоОбъявлениюНаВзносНаличными",  ПоОбъявлениюНаВзносНаличными);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("ФизЛицо",                    Контрагент);
		мСтруктураПараметровДенежныхСредств.Вставить("РасчетныйДокументРаботника", РасчетныйДокумент);
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.ПровестиСписаниеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) И ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	Иначе
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, Дата, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента)
	
	Если не (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
		И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете)) Тогда
		Возврат;
	КонецЕсли;
	
	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;

	РасчетыВВалюте = (Касса.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета);
	
	Если РасчетыВВалюте Тогда
		СчетКт = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	Иначе
		СчетКт = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		// Определим способ ведения учета расчетов с персоналом - сводно/подробно
		ВестиРеглУчетРасчетовСПерсоналомПодробно = Не глЗначениеПеременной("ВестиРеглУчетРасчетовСПерсоналомСводно");
		
		Запрос = Новый Запрос;
		Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
			
			Если мУпрощенныйУчетВзаиморасчетов Тогда
				
				Запрос.Текст=
				"ВЫБРАТЬ
				|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
				|	ЕСТЬNULL(СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма), 0) КАК Сумма,
				|	ЕСТЬNULL(СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты), 0) КАК КомпенсацияЗаЗадержкуЗарплаты,
				|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата,
				|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Номер,
				|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СтатьяДвиженияДенежныхСредств
				|ИЗ
				|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
				|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
				|ГДЕ
				|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
				|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
				|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
				|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СтатьяДвиженияДенежныхСредств,
				|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата,
				|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Номер";
				
			Иначе
				
				Запрос.Текст=
				"ВЫБРАТЬ
				|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК ФизЛицо,
				|	ЕСТЬNULL(СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма), 0) КАК Сумма,
				|	ЕСТЬNULL(СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты), 0) КАК КомпенсацияЗаЗадержкуЗарплаты,
				|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата,
				|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Номер,
				|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СтатьяДвиженияДенежныхСредств
				|ИЗ
				|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
				|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
				|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
				|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
				|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
				|ГДЕ
				|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
				|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
				|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
				|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка,
				|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СтатьяДвиженияДенежныхСредств";
				
			КонецЕсли; 
			
		Иначе
			
			Запрос.Текст=
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма), 0) КАК Сумма,
			|	ЕСТЬNULL(СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты), 0) КАК КомпенсацияЗаЗадержкуЗарплаты,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Номер,
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СтатьяДвиженияДенежныхСредств
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
			|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
			|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
			|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
			|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
			|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
			|
			|СГРУППИРОВАТЬ ПО
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СтатьяДвиженияДенежныхСредств,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Сумма <> 0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Активность  = Истина;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = Выборка.Сумма;
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
				Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
					Проводка.СубконтоДт.РаботникиОрганизации = Выборка.ФизЛицо;
				КонецЕсли;
				
				Проводка.Содержание  = "Выплата зарплаты по ведомости №" + Выборка.Номер + " от " + Выборка.Дата;
				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.КассаОрганизации;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
			КонецЕсли;
			
			Если Выборка.КомпенсацияЗаЗадержкуЗарплаты <> 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Не заполнен счет учета(БУ) для компенсации за задержку зарплаты!",Отказ, Заголовок);
					Прервать;
				КонецЕсли;
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Активность  = Истина;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = Выборка.КомпенсацияЗаЗадержкуЗарплаты;
				
				Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
				
				Если СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоПрочимОперациям) Тогда
					
					Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
						Проводка.СубконтоДт.РаботникиОрганизации = Выборка.ФизЛицо;
					КонецЕсли;
					
				Иначе
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
					
				КонецЕсли; 
				
				Проводка.Содержание  = "Компенсация за задержку выплаты зарплаты по ведомости №" + Выборка.Номер + " от " + Выборка.Дата;
				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.КассаОрганизации;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
				
				Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ) Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Не заполнен счет учета(НУ) для компенсации за задержку зарплаты!",Отказ, Заголовок);
					Прервать;
				КонецЕсли;
				
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				Проводка.Активность		= Истина;
				Проводка.Организация	= Организация;
				Проводка.Сумма			= Выборка.КомпенсацияЗаЗадержкуЗарплаты;
				
				Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентомНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоНУДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоНУДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоНУДт3);
				
				Проводка.Содержание		= "Компенсация за задержку выплаты зарплаты по ведомости №" + Выборка.Номер + " от " + Выборка.Дата;
				Проводка.СчетКт			= ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		Запрос = Новый Запрос;
		
		// Определим способ ведения учета расчетов с персоналом - сводно/подробно
		ВестиРеглУчетРасчетовСПерсоналомПодробно = Не глЗначениеПеременной("ВестиРеглУчетРасчетовСПерсоналомСводно");
		
		Запрос.Текст=
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата,
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Номер,
		|	ЕСТЬNULL(СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма), 0) КАК Сумма,
		|	ЕСТЬNULL(СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты), 0) КАК КомпенсацияЗаЗадержкуЗарплаты
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &парамПлатВедомость
		|	И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = &парамКонтрагент
		|	И ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка";
		
		Запрос.УстановитьПараметр("парамПлатВедомость",	РасчетныйДокумент);
		Запрос.УстановитьПараметр("парамКонтрагент",	Контрагент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		СтатьиДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		
		Если Выборка.Следующий() Тогда
		
			Если Выборка.Сумма <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Активность  = Истина;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = Выборка.Сумма;
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
				Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
					Проводка.СубконтоДт.РаботникиОрганизации = Контрагент;
				КонецЕсли;
				
				Проводка.Содержание  = "Выплата зарплаты по ведомости №" + Выборка.Номер + " от " + Выборка.Дата;
				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.КассаОрганизации;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = СтатьиДвиженияДенежныхСредств;
				
			КонецЕсли; 
			
			Если Выборка.КомпенсацияЗаЗадержкуЗарплаты <> 0 Тогда
				
				Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Не заполнен счет учета(БУ) для компенсации за задержку зарплаты!",Отказ, Заголовок);
					Возврат;
				КонецЕсли;
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Активность  = Истина;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = Выборка.КомпенсацияЗаЗадержкуЗарплаты;
				
				//Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
				//Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтруктураШапкиДокумента.СубконтоДт1;
				
				Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
				Если СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоПрочимОперациям) Тогда
					
					Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
						Проводка.СубконтоДт.РаботникиОрганизации = Контрагент;
					КонецЕсли;
					
				Иначе
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
					
				КонецЕсли; 
				
				Проводка.Содержание  = "Выплата зарплаты по ведомости №" + Выборка.Номер + " от " + Выборка.Дата;
				Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.КассаОрганизации;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = СтатьиДвиженияДенежныхСредств;
				
				
				Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ) Тогда
					
					ОбщегоНазначения.СообщитьОбОшибке("Не заполнен счет учета(НУ) для компенсации за задержку зарплаты!",Отказ, Заголовок);
					Возврат;
				КонецЕсли;
				
				Проводка = ПроводкиНУ.Добавить();
				
				Проводка.Период			= СтруктураШапкиДокумента.Дата;
				Проводка.Активность		= Истина;
				Проводка.Организация	= Организация;
				Проводка.Сумма			= Выборка.КомпенсацияЗаЗадержкуЗарплаты;
				
				Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентомНУ;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоНУДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоНУДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоНУДт3);
				
				Проводка.Содержание		= "Компенсация за задержку выплаты зарплаты по ведомости №" + Выборка.Номер + " от " + Выборка.Дата;
				Проводка.СчетКт			= ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		// Определим способ ведения учета расчетов с персоналом - сводно/подробно
		ВестиРеглУчетРасчетовСПерсоналомПодробно = Не глЗначениеПеременной("ВестиРеглУчетРасчетовСПерсоналомСводно");
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			СтатьяПоУмолчанию = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		Иначе 
			СтатьяПоУмолчанию = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		Для каждого ДокументВыплаты Из ВыплатаДепонентов Цикл
			
			Если ДокументВыплаты.СуммаКВыплате <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Активность  = Истина;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Сумма       = ДокументВыплаты.СуммаКВыплате;
				
				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам;
				Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
					Проводка.СубконтоДт.РаботникиОрганизации = ДокументВыплаты.ФизЛицо;
				КонецЕсли;
				
				Проводка.Содержание  = "Депонирование зарплаты";
				Проводка.СчетКт		= ПланыСчетов.Хозрасчетный.КассаОрганизации;
				Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = ?(ДокументВыплаты.СтатьяДвиженияДенежныхСредств.Пустая(),СтатьяПоУмолчанию,ДокументВыплаты.СтатьяДвиженияДенежныхСредств);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ЕстьРасчетыСКонтрагентами Тогда
			
			СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок,СчетКт);
			Если Не (СтруктураПараметровДДС = Ложь) тогда
				БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям);
			Иначе
				БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенегПрочийРасход(ЭтотОбъект, РасчетыВВалюте, СчетКт, СтруктураШапкиДокумента,Отказ,Заголовок);
			Конецесли;
			
		Иначе
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = СтруктураШапкиДокумента.Дата;
			Проводка.Активность  = Истина;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
				
				Проводка.Содержание = "Выдача средств подотчетнику";
				
				Если РасчетыВВалюте Тогда
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
				Иначе
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
				КонецЕсли;
				
				Проводка.СубконтоДт.РаботникиОрганизации = СтруктураШапкиДокумента.Контрагент;
				
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
				
				Проводка.Содержание = "Прочие расходы";
				Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоДт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоДт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоДт3);
				
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
				
				Если РасчетыВВалюте Тогда
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
				Иначе
					Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
				КонецЕсли;
				Проводка.СубконтоДт.БанковскиеСчета               = СчетОрганизации;
				Проводка.СубконтоДт.СтатьиДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
				
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
				
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
				
			ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
				
				Проводка.Содержание = "Расчеты по кредитам и займам";
				Проводка.СчетДт     = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].ДоговорКонтрагента);
				
			КонецЕсли;
			
			Если РасчетыВВалюте Тогда
				
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
				КонецЕсли;
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
				
				ВалютаРег       = мВалютаРегламентированногоУчета;
				ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, СтруктураШапкиДокумента.Дата);
				
				Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				КурсДокумента, ДанныеОВалюте.Курс, 
				КратностьДокумента, ДанныеОВалюте.Кратность);
				
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
				
			Иначе
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.КассаОрганизации;
				Проводка.Сумма  = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Проводка.СубконтоКт.СтатьиДвиженияДенежныхСредств = РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств;
			// Сформируем проводку по НУ
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
				И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ)
				И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
				
				ПроводкаНУ = ПроводкиНУ.Добавить();
				
				ПроводкаНУ.Период      = СтруктураШапкиДокумента.Дата;
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание  = "Прочие расходы";
				
				ПроводкаНУ.СчетДт = СчетУчетаРасчетовСКонтрагентомНУ;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, СубконтоНУДт1);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 2, СубконтоНУДт2);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 3, СубконтоНУДт3);
				
				ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 2, Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 3, ДоговорКонтрагента);
				
				ПроводкаНУ.Сумма = Проводка.Сумма;
				
				ДвиженияПоРазницам(Отказ, ПроводкиНУ, СтруктураШапкиДокумента.СуммаДокумента);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		НалоговыйУчетУСН.ПрочееДДС(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРазницам(Отказ, ПроводкиНУ, СуммаПроводки)
	
	УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если НЕ УчетнаяПолитикаБух.ПоддержкаПБУ18 Тогда
		Возврат;
	КонецЕсли;              
	
	мКэшСчетов = Новый Соответствие;
	
		
		СуммаВПроводку = СуммаПроводки;
		
		Если ТипЗнч(СубконтоНУДт1)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СубконтоНУДт1.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СубконтоНУДт2)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СубконтоНУДт2.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СубконтоНУДт3)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СубконтоНУДт3.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СубконтоНУДт1)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СубконтоНУДт1.ВидПрочихДоходовИРасходов;
		ИначеЕсли ТипЗнч(СубконтоНУДт2)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СубконтоНУДт2.ВидПрочихДоходовИРасходов;
		ИначеЕсли ТипЗнч(СубконтоНУДт3)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СубконтоНУДт3.ВидПрочихДоходовИРасходов;
		Иначе
			ВидЗатрат = "";
		КонецЕсли;
		
		Если ВидЗатрат = "" Тогда
			
			СтруктураСчетаВКэше = мКэшСчетов[СчетУчетаРасчетовСКонтрагентом];
			Если СтруктураСчетаВКэше = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), Ложь, Дата);
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом] = Новый Соответствие;
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом].Вставить("", СчетНУСоответствующийСчетуБУ);
			Иначе
				СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[""];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), Ложь, Дата);
					СтруктураСчетаВКэше.Вставить("", СчетНУСоответствующийСчетуБУ);
				КонецЕсли;								
			КонецЕсли;
			
			Если СчетНУСоответствующийСчетуБУ = СчетУчетаРасчетовСКонтрагентомНУ	Тогда
				Возврат;
			КонецЕсли;
		Иначе
			
			СтруктураСчетаВКэше = мКэшСчетов[СчетУчетаРасчетовСКонтрагентом];
			Если СтруктураСчетаВКэше = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СчетУчетаРасчетовСКонтрагентом, ВидЗатрат), Ложь, Дата);
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом] = Новый Соответствие;
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом].Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
			Иначе
				СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[ВидЗатрат];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СчетУчетаРасчетовСКонтрагентом, ВидЗатрат), Ложь, Дата);
					СтруктураСчетаВКэше.Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
				КонецЕсли;								
			КонецЕсли;
			
			Если СчетНУСоответствующийСчетуБУ = СчетУчетаРасчетовСКонтрагентомНУ	Тогда
				Возврат;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ)	Тогда
				
				СтруктураСчетаВКэше = мКэшСчетов[СчетУчетаРасчетовСКонтрагентом];
				Если СтруктураСчетаВКэше = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), Ложь, Дата);
					мКэшСчетов[СчетУчетаРасчетовСКонтрагентом] = Новый Соответствие;
					мКэшСчетов[СчетУчетаРасчетовСКонтрагентом].Вставить("", СчетНУСоответствующийСчетуБУ);
				Иначе
					СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[""];
					Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
						СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), Ложь, Дата);
						СтруктураСчетаВКэше.Вставить("", СчетНУСоответствующийСчетуБУ);
					КонецЕсли;								
				КонецЕсли;
				
				Если СчетНУСоответствующийСчетуБУ = СчетУчетаРасчетовСКонтрагентомНУ	Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ) Тогда
			Сообщить("Не найдено соответствие для счета БУ " +  СчетУчетаРасчетовСКонтрагентом + ", разницы между БУ и НУ не рассчитаны");
			Возврат;
		КонецЕсли;
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Прочие расходы";
		
		Проводка.СчетДт      = СчетНУСоответствующийСчетуБУ;
		
		Если СчетНУСоответствующийСчетуБУ = ПланыСчетов.Налоговый.РасходыБудущихПериодовНаДобровольноеСтрахованиеРаботников Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СубконтоДт3);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СубконтоДт3);
		КонецЕсли;
		
		Проводка.Сумма = СуммаПроводки;
		Если ТипЗнч(СубконтоНУДт1) = Тип("СправочникСсылка.СтатьиЗатрат") И СубконтоНУДт1.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СубконтоНУДт1.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт2) = Тип("СправочникСсылка.СтатьиЗатрат") И СубконтоНУДт2.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт2) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СубконтоНУДт2.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт3) = Тип("СправочникСсылка.СтатьиЗатрат") И СубконтоНУДт3.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт3) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СубконтоНУДт3.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		Иначе
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР;
		КонецЕсли;
		Проводка.ВидУчетаДт = ВидУчета;
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Прочие расходы";
		Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентомНУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СубконтоНУДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СубконтоНУДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СубконтоНУДт3);
		Проводка.Сумма = - СуммаПроводки;
		
		Проводка.ВидУчетаДт = ВидУчета;
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)
	
	Если (НЕ ОтраженоВОперУчете) И (НЕ Оплачено) И ОтражатьВУправленческомУчете Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")", Отказ, Заголовок);
	КонецЕсли;
	
	Если (ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами) 
		И НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не совпадают сумма документа и ее расшифровка.", Отказ, Заголовок);		
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		И НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не совпадают валюты банковского счета и кассы", Отказ, Заголовок);
	КонецЕсли;
		
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		Если ВыплатаЗаработнойПлаты.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не выбрана ни одна ведомость на выплату зарплаты", Отказ, Заголовок);
		ИначеЕсли ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа") <> СуммаДокумента Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не совпадают сумма документа и сумма по ведомостям на выплату зарплаты", Отказ, Заголовок);
		КонецЕсли;
	
		Если ОтражатьВУправленческомУчете Тогда 
			
			Запрос=Новый Запрос;
			Запрос.УстановитьПараметр("Ведомости", ВыплатаЗаработнойПлаты.ВыгрузитьКолонку("Ведомость"));
			
			Запрос.Текст=
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СведенияОВыплатахРаботникамПоПлатежнымВедомостям.Ведомость КАК Ведомость,
			|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамПоПлатежнымВедомостям.Ведомость) КАК ПредставлениеВедомости,
			|	СведенияОВыплатахРаботникамПоПлатежнымВедомостям.Регистратор КАК Регистратор,
			|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамПоПлатежнымВедомостям.Регистратор) КАК ПредставлениеРегистратора
			|ИЗ
			|	РегистрСведений.СведенияОВыплатахРаботникамПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамПоПлатежнымВедомостям
			|ГДЕ
			|	СведенияОВыплатахРаботникамПоПлатежнымВедомостям.Ведомость В(&Ведомости)";
			
			СведенияОВыплатах = Запрос.Выполнить().Выгрузить();
			
			ОплаченныеВедомости = СведенияОВыплатах.Скопировать();
			ОплаченныеВедомости.Свернуть("Ведомость, ПредставлениеВедомости");
			
			Для Каждого ОплаченнаяВедомость Из ОплаченныеВедомости Цикл
				
				ПлатежныеДокументы = СведенияОВыплатах.Скопировать(Новый Структура("Ведомость", ОплаченнаяВедомость.Ведомость)).ВыгрузитьКолонку("ПредставлениеРегистратора");
				ТекстОплаты = ЗарплатаКВыплатеСервис.ТекстовоеПредставлениеОплаты(ПлатежныеДокументы);
				
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОплаченнаяВедомость.ПредставлениеВедомости +" " + ТекстОплаты, Отказ, Заголовок);
				
			КонецЦикла;	
			
		КонецЕсли;
	
	КонецЕсли;
		
	Если (ОтражатьВУправленческомУчете И (ОтраженоВОперУчете ИЛИ (ОтражатьВБухгалтерскомУчете И Оплачено)))
		ИЛИ ОтражатьВБухгалтерскомУчете Тогда
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
			
			ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
			
			Если (Не Отказ) И (Режим = РежимПроведенияДокумента.Оперативный) Тогда
				УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(Дата, ТаблицаПлатежейУпр, Отказ, Заголовок,РасчетыВозврат);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Если ОтражатьВУправленческомУчете 
		И ОтраженоВОперУчете 
		И (Режим = РежимПроведенияДокумента.Оперативный) Тогда
		
		Если ВидОперации <> Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк 
			И ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
			
			ЕстьРазрешение=УправлениеДопПравамиПользователей.ПравоРазрешитьПроведениеПлатежаБезЗаявки();
			
			УправлениеДенежнымиСредствами.ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
				Касса,СуммаДокумента,ТаблицаПлатежейУпр, ЕстьРазрешение);
			
		КонецЕсли;

		// Проверяем остаток доступных денежных средств
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда 
			СвободныйОстаток = УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(Касса, Дата, ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"),
				ЭтотОбъект.ОбъявлениеНаВзносНаличными);
		Иначе
			СвободныйОстаток = УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(Касса, Дата, ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"),
				ЭтотОбъект.ВыплатаЗаработнойПлаты.ВыгрузитьКолонку("Ведомость"));
		КонецЕсли;
        		
		Если СвободныйОстаток < СуммаДокумента Тогда

			ТекстСообщения = "Сумма документа превышает возможный к использованию остаток денежных средств
				|по "+Касса.Наименование+".
				|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2; ЧН=0")+" "+ВалютаДокумента+"
				|Сумма документа = "+Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента;
			
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);

			Если НЕ УправлениеДопПравамиПользователей.ПравоРазрешитьПревышениеСвободногоОстаткаДС() Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
	Если Оплачено Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(), Отказ, Заголовок);
	КонецЕсли;

	Если ОтраженоВОперУчете Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчетыУпр(), Отказ, Заголовок);
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками И
		ЗначениеЗаполнено(РасчетныйДокумент) И НЕ РасчетныйДокумент.Организация=Организация Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Организация, выбранная в документе, не совпадает с организацией, выбранной в договоре займа.", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ 
		И НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Выдача денежных средств в кассу ККМ производится только в валюте регламентированного учета.", Отказ, Заголовок);
	КонецЕсли;

	Если Организация.ОтражатьВРегламентированномУчете
		И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")
		И Контрагент.НеЯвляетсяРезидентом Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Проводить наличные расчеты с нерезидентами по данной организации запрещено.", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
			
			Запрос = Новый Запрос;
			
			// Установим параметры запроса
			Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
			Запрос.УстановитьПараметр("Дата",				Дата);
			Запрос.УстановитьПараметр("Организация",		Организация);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходныйКассовыйОрдерВыплатаДепонентов.НомерСтроки,
			|	РасходныйКассовыйОрдерВыплатаДепонентов.Ведомость КАК Ведомость,
			|	РасходныйКассовыйОрдерВыплатаДепонентов.Ведомость.Номер КАК Номер,
			|	РасходныйКассовыйОрдерВыплатаДепонентов.Ведомость.Дата КАК Дата,
			|	РасходныйКассовыйОрдерВыплатаДепонентов.ФизЛицо,
			|	ЕСТЬNULL(ВзаиморасчетыСДепонентамиОрганизацийОстатки.СуммаОстаток, 0) КАК ОстатокДепонента,
			|	РасходныйКассовыйОрдерВыплатаДепонентов.СуммаКВыплате,
			|	РасходныйКассовыйОрдерВыплатаДепонентов.Ведомость.Организация КАК Организация
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаДепонентов КАК РасходныйКассовыйОрдерВыплатаДепонентов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСДепонентамиОрганизаций.Остатки(
			|				&Дата,
			|				Организация = &Организация
			|					И Физлицо В
			|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|							РасходныйКассовыйОрдерВыплатаДепонентов.ФизЛицо
			|						ИЗ
			|							Документ.РасходныйКассовыйОрдер.ВыплатаДепонентов КАК РасходныйКассовыйОрдерВыплатаДепонентов
			|						ГДЕ
			|							РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка = &ДокументСсылка)) КАК ВзаиморасчетыСДепонентамиОрганизацийОстатки
			|		ПО РасходныйКассовыйОрдерВыплатаДепонентов.ФизЛицо = ВзаиморасчетыСДепонентамиОрганизацийОстатки.Физлицо
			|			И РасходныйКассовыйОрдерВыплатаДепонентов.Ведомость = ВзаиморасчетыСДепонентамиОрганизацийОстатки.Ведомость
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаДепонентов.Ссылка = &ДокументСсылка
			|ИТОГИ ПО
			|	Ведомость";
			
			Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				
				ОшибкаОрганизации = Ложь;
				ВыборкаПоВыплатаДепонентов = Выборка.Выбрать();
				Пока ВыборкаПоВыплатаДепонентов.Следующий() Цикл
					
					НачалоСообщения = "В строке № """+ СокрЛП(ВыборкаПоВыплатаДепонентов.НомерСтроки) +
					""" табл. части ""Депоненты"": ";
					
					ЕстьВедомость = ЗначениеЗаполнено(ВыборкаПоВыплатаДепонентов.Ведомость);
					ЕстьФизЛицо = ЗначениеЗаполнено(ВыборкаПоВыплатаДепонентов.ФизЛицо);
					
					Если Не ЕстьФизЛицо Тогда
						ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указан сотрудник!", Отказ, Заголовок);
					КонецЕсли;
					
					Если Не ЕстьВедомость Тогда
						ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "не указана платежная ведомость!", Отказ, Заголовок);
					ИначеЕсли НЕ ОшибкаОрганизации и ВыборкаПоВыплатаДепонентов.Организация <> Организация Тогда
						ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "платежная ведомость " + ВыборкаПоВыплатаДепонентов.Номер + " от " + ВыборкаПоВыплатаДепонентов.Дата + " оформлена по другой организации!", Отказ, Заголовок);
						ОшибкаОрганизации = Истина;
					КонецЕсли;
					
					Если ЕстьВедомость И ЕстьФизЛицо И ВыборкаПоВыплатаДепонентов.ОстатокДепонента < ВыборкаПоВыплатаДепонентов.СуммаКВыплате Тогда
						ОбщегоНазначения.СообщитьОбОшибке(НачалоСообщения + "невыданный остаток депонента (" + Формат(ВыборкаПоВыплатаДепонентов.ОстатокДепонента,"ЧДЦ=2") + ") меньше суммы, указанной в документе!", Отказ, Заголовок);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда 
			
			// Проверка на то, чтобы в закрываемых ведомостях не было невыплаченных значений, совпадение организаций
			Запрос=Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",Ссылка);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Номер,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Дата,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация КАК Организация,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.ВыплаченностьЗарплаты,
			|	ЗарплатаКВыплатеОрганизацииЗарплата.НомерСтроки
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
			|ИТОГИ ПО
			|	Ведомость";
			РезультатЗапроса=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока РезультатЗапроса.Следующий() Цикл
				
				ОшибкаОрганизации = Ложь;
				
				ВложеннаяВыборка = РезультатЗапроса.Выбрать();
				Пока ВложеннаяВыборка.Следующий() Цикл
					
					Если НЕ ОшибкаОрганизации и ВложеннаяВыборка.Организация <> Организация Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке("Документ ""Зарплата к выплате"" " + ВложеннаяВыборка.Номер + " от " + ВложеннаяВыборка.Дата + " оформлен по другой организации!", Отказ, Заголовок);
						ОшибкаОрганизации = Истина;
						
					КонецЕсли; 
				
					Если ВложеннаяВыборка.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.НеВыплачено Тогда
						
						ОбщегоНазначения.СообщитьОбОшибке("В строке № "+ ВложеннаяВыборка.НомерСтроки +" документа ""Зарплата к выплате"" " + ВложеннаяВыборка.Номер + " от " + ВложеннаяВыборка.Дата + " указана отметка  ""Не выплачено""", Отказ, Заголовок);
						
					КонецЕсли; 
				
				КонецЦикла; 
				
			КонецЦикла;
			
			// Проверка на то, чтобы ведомости были раньше РКО.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Дата",	КонецДня(Дата));
			Запрос.УстановитьПараметр("Ссылка",	Ссылка);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Ведомость,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Номер,
			|	ВЫБОР
			|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата > &Дата
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОформленПозже,
			|	ВЫБОР
			|		КОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации > &Дата
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК МесяцНачисленияПозже
			|ИЗ
			|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|		ПО РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость = ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
			|ГДЕ
			|	(ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Дата > &Дата
			|			ИЛИ ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.ПериодРегистрации > &Дата)
			|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.ОформленПозже Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Документ ""Зарплата к выплате"" " + РезультатЗапроса.Номер + " от " + РезультатЗапроса.Дата + " оформлен позже, чем этот РКО!", Отказ, Заголовок);
				КонецЕсли;
				Если Выборка.МесяцНачисленияПозже Тогда
					ОбщегоНазначения.СообщитьИнформациюПользователю("Месяц начисления платежной ведомости больше даты этого РКО!");
				КонецЕсли;
			КонецЦикла;
		
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда 
			
			ПроверитьСуммуКВыплатеРаботнику(Отказ,Заголовок);
			
			Если РасчетныйДокумент.Организация <> Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не совпадают организации в расходном кассовом ордере и платежной ведомости", Отказ, Заголовок);
			КонецЕсли; 
			
			Если РасчетныйДокумент.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В документе ""Зарплата к выплате"" установлен способ выплаты через банк!", Отказ, Заголовок);
			КонецЕсли;
			
			Если КонецДня(Дата) < РасчетныйДокумент.Дата Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Указанная платежная ведомость оформлена позже, чем этот РКО!",Отказ,Заголовок);
			КонецЕсли;
			Если Дата < РасчетныйДокумент.ПериодРегистрации Тогда
				ОбщегоНазначения.СообщитьИнформациюПользователю("Месяц начисления платежной ведомости больше даты этого РКО!");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			УправлениеДенежнымиСредствами.ПроверитьСоответствиеРаботникаОрганизации(Контрагент, Организация, Дата, Отказ, Заголовок);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВыплатаДепонентов", Новый Структура("ФизЛицо,Ведомость,СуммаКВыплате"), Отказ, Заголовок);
			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа",	Новый Структура("СтатьяДвиженияДенежныхСредств,СуммаПлатежа"), Отказ, Заголовок);
			Если ВыплатаДепонентов.Итог("СуммаКВыплате") <> РасшифровкаПлатежа.Итог("СуммаПлатежа") Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Сумма выплачиваемых депонентов не совпадает с расшифровкой платежа.",Отказ,Заголовок);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", 
			Новый Структура("СчетУчетаРасчетовСКонтрагентом"), Отказ, Заголовок);
		КонецЕсли;
		
		Если ВидОперации=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее И СчетУчетаРасчетовСКонтрагентом.Пустая() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан счет учета.");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если (Основание <> Неопределено) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание))) Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ДокументОснование = Основание.Ссылка;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Касса) Тогда
		Касса = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		КонецЕсли;
		
		Если Касса.Владелец <> Организация Тогда
			
			Касса = Справочники.Кассы.ПустаяСсылка();
			
			#Если Клиент Тогда
			формаВыбораКассы = ПолучитьФорму("ФормаВыбораКассы");
			формаВыбораКассы.Организация = Организация;
			
			Если формаВыбораКассы.ОткрытьМодально() = Истина Тогда
				Касса = формаВыбораКассы.Касса;
			КонецЕсли;
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;

	ВалютаДокумента         = ?(НЕ Касса.ВалютаДенежныхСредств.Пустая(),Касса.ВалютаДенежныхСредств,мВалютаРегламентированногоУчета);
	
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	
	КурсДокумента      = СтруктураКурсаДокумента.Курс;	
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	СпособЗаполнения = "Не заполнять";

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") 
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();

		ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		Контрагент  = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;

		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Истина;

		ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;

       	УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"), Истина);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
		или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		КонецЕсли;

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		Контрагент  = Основание.Контрагент;
		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СтрокаПлатеж.Сделка = Основание.Сделка;
		
		Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			СпособЗаполнения = "По взаиморасчетам";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;
		
		ОтражатьВУправленческомУчете=Истина;
		ОтражатьВБухгалтерскомУчете=Истина;
		
		УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), Истина);

		СтрокаПлатеж.СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику;
		Контрагент                       = Основание.ФизЛицо;
		РасчетныйДокумент                = Основание;
		ВалютаВзаиморасчетовРаботника    = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;

		СпособЗаполнения = "По взаиморасчетам с подотчетным лицом";
		ОтражатьВУправленческомУчете=Истина;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		ЗаполнитьПоПКОУпр();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником")	Тогда
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками;
		Контрагент                       = Основание.ФизЛицо;
		РасчетныйДокумент                = Основание;
		ВалютаВзаиморасчетовРаботника    = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаЗайма;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		ОтражатьВУправленческомУчете=Истина;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций")	Тогда
		
		ШапкаОснования = ЗарплатаКВыплатеОрганизацийДополнительный.ПолучитьДанныеДокумента(Основание);
		
		Если НЕ ШапкаОснования.Проведен Тогда
			ВызватьИсключение "Платежная ведомость не проведена! Заполнение не выполнялось.";
		КонецЕсли;
		
		Если ШапкаОснования.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
			ВызватьИсключение "Платежная ведомость оформлена на перечисление в банк! Заполнение не выполнялось.";
		КонецЕсли;
		
		ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
		ЗаполнитьПоЗарплатеКВыплатеОрганизацииРегл(ШапкаОснования);
		
		УстановитьОснование();
		УстановитьПриложение();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплате")	Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		
		ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
		ЗаполнитьПоЗарплатеКВыплатеУпр(Основание);

		УстановитьОснование();
		УстановитьПриложение();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОбъявлениеНаВзносНаличными") Тогда

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		ВидОперации     = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк;
		СчетОрганизации = Основание.СчетОрганизации;

		Касса                   	= Основание.Касса;
		ВалютаДокумента         	= Основание.ВалютаДокумента;
		ОбъявлениеНаВзносНаличными 	= Основание.Ссылка;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

		СуммаДокумента=Основание.СуммаДокумента;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Основание.СтатьяДвиженияДенежныхСредств;
		
		ОтражатьВУправленческомУчете=Истина;
		ОтражатьВБухгалтерскомУчете=Истина;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств") Тогда

		Если НЕ Основание.ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные Тогда
			Сообщить("Заявка оформлена на расходование безналичных денежных средств.");
			Возврат;
		КонецЕсли;
		Отказ = Ложь;
		УправлениеДенежнымиСредствами.ПроверитьСогласованиеЗаявок(Основание, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ЗаполнитьПоЗаявкеНаРасходованиеСредствУпр(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.БюджетнаяОперация") Тогда
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		ВидОперации=Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		Контрагент = Основание.Контрагент;
		
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		СтрокаПлатеж=РасшифровкаПлатежа[0];
		
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов=ВалютаДокумента;
		Иначе
			ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		// Получаем курсы валют
		СтруктураГруппаВалют = Новый Структура;
		СтруктураГруппаВалют.Вставить("ВалютаВзаиморасчетов",ВалютаВзаиморасчетов.Код);
		СтруктураГруппаВалют.Вставить("ВалютаДокумента",ВалютаДокумента.Код);
		СтруктураГруппаВалют.Вставить("ВалютаОперации",Основание.ВалютаДокумента.Код);
		
		СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,Дата);
		
		КурсДокумента=СтруктураКурсыВалют.ВалютаДокументаКурс;
		КратностьДокумента=СтруктураКурсыВалют.ВалютаДокументаКратность;
		
		СтрокаПлатеж.КурсВзаиморасчетов=СтруктураКурсыВалют.ВалютаВзаиморасчетовКурс;
		СтрокаПлатеж.КратностьВзаиморасчетов=СтруктураКурсыВалют.ВалютаВзаиморасчетовКратность;
		
		СтрокаПлатеж.Проект=Основание.Проект;		
		Подразделение=Основание.ЦФО;
		
		КурсОперации=СтруктураКурсыВалют.ВалютаОперацииКурс;
		КратностьОперации=СтруктураКурсыВалют.ВалютаОперацииКратность;
		
		СуммаДокумента=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Основание.Сумма,
		Основание.ВалютаДокумента, 
		ВалютаДокумента,
		КурсОперации, КурсДокумента,
		КратностьОперации, КратностьДокумента);
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента,
		ВалютаДокумента, 
		ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		СтрокаПлатеж.СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);	
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке") Тогда
		
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();

		ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
		Контрагент  = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента        = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СтрокаПлатеж.Сделка = Основание.Заказ;
		
		Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
		КонецЕсли;
		
		СпособЗаполнения = "По сумме документа";
		
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Истина;
		
		УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), Истина);

		СтрокаПлатеж.СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		
	КонецЕсли;
		
	Если СпособЗаполнения = "По заказу" Тогда
		ПроверкаКурсовВалют(СтрокаПлатеж);
		ЗаполнитьПоЗаказуУпр(СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		ПроверкаКурсовВалют(СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,-1);
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		ПроверкаКурсовВалют(СтрокаПлатеж);
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда

		ПроверкаКурсовВалют(СтрокаПлатеж);
		
		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = Основание.СуммаДокумента - Основание.СуммаВознаграждения;
		КонецЕсли;

		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования=СтруктураКурсаОснования.Курс;
		КратностьОснования=СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                 КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента                   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;
	
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		Если ВалютаВзаиморасчетовРаботника <> ВалютаДокумента Тогда
			ОтражатьВБухгалтерскомУчете = Ложь;
			ОтражатьВНалоговомУчете     = Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидОперации <> Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		ОтражатьВБухгалтерскомУчете = Истина;
		
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	Если Выдать="" И ЗначениеЗаполнено(Контрагент) Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Выдать =?(Контрагент.НаименованиеПолное="",Контрагент.Наименование, Контрагент.НаименованиеПолное);
					
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
			ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
			|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
			|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&Дата, ФизЛицо=&ФизЛицо) КАК ФИОФизЛицСрезПоследних";
			Запрос.УстановитьПараметр("Дата",Дата);
			Запрос.УстановитьПараметр("ФизЛицо",Контрагент);
			
			Результат=Запрос.Выполнить().Выбрать();
			Если Результат.Следующий() Тогда
				
				Выдать = ?(НЕ ПустаяСтрока(Результат.Фамилия), 
				Результат.Фамилия + ?(НЕ ПустаяСтрока(Результат.Имя)," " + Результат.Имя + " " + ?(НЕ ПустаяСтрока(Результат.Отчество),Результат.Отчество, ""), ""),"");
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
				
				ЭтотОбъект.Основание=Лев(Строка(РасчетныйДокумент),Найти(Строка(РасчетныйДокумент),Строка(РасчетныйДокумент.Дата))-1)+Формат(РасчетныйДокумент.Дата,"ДФ=dd.MM.yyyy");
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
			
	Если ПоДокументу="" И ЗначениеЗаполнено(Контрагент) И (ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
			ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками) Тогда	
		
		ДокФизЛица = ОбщегоНазначения.ПаспортныеДанные(Контрагент, Дата);
		
		Если ЗначениеЗаполнено(ДокФизЛица) Тогда
			ПоДокументу = Строка(ДокФизЛица.Вид) + " серия " +
			ДокФизЛица.Серия       + ", номер " +
			ДокФизЛица.Номер       + ", выданый " +
			Формат(ДокФизЛица.ДатаВыдачи, "ДФ=dd.MM.yyyy")  + " " +
			ДокФизЛица.Выдан;
		КонецЕсли;
		
	КонецЕсли;
	
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");

	ОтраженоВОперУчете = Истина;
	Оплачено           = Истина;

	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, Режим);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами Тогда
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;

	Иначе
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	СтруктураШапкиДокумента.Вставить("ФизЛицо", СтруктураШапкиДокумента.Контрагент);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       			, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                       			, "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьДенежныеСредстваКомитента"       , "КонтролироватьДенежныеСредстваКомитента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		, КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	, КратностьДокумента);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	РасчетыВозврат = УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);

	ПолучитьТаблицуПлатежейРКОУпр();
	
	Если НЕ Отказ Тогда
		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);
	КонецЕсли;
	
	ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете тогда
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
			мВалютаРегламентированногоУчета, Истина,Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
		КонецЦикла;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	ВыплатаЗаработнойПлаты.Очистить();

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Наличные);
