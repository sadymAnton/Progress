////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Заполняет табличную часть документа отпусками по графику отпусков
//
// Параметры
//	ДатаНачала, ДатаОкончания – даты начала и окончания 
//								просмотра графика отпусков	
//
Процедура Автозаполнение(ДатаНачала, ДатаОкончания) Экспорт
	
	// Описание текста запроса:
	// 1. Выборка "НачалаОтпусков": 
	//		Выбираются строки из регистра СобытийныйПланЗанятостиФизлиц, соответствующие 
	//		началу предполагаемого отпуска.
	//
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	НачалаОтпусков.Период КАК ДатаНачала,
	|	НачалаОтпусков.ПериодЗавершения КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК НачалаОтпусков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокСотрудников.Сотрудник КАК Сотрудник,
	|			СписокСотрудников.Физлицо КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|				РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|				1 КАК Приоритет
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&ДатаАктуальности,
	|						Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|							И Сотрудник.Физлицо В
	|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|									НачалаОтпусков.ФизЛицо
	|								ИЗ
	|									РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК НачалаОтпусков
	|								ГДЕ
	|									НачалаОтпусков.Период >= &ДатаНачала
	|									И НачалаОтпусков.Период <= &ДатаОкончания
	|									И НачалаОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный))) КАК РаботникиОсновноеМесто
	|			ГДЕ
	|				ВЫБОР
	|						КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ДатаАктуальности
	|								И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
	|						ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОсновноеМесто.Сотрудник.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
	|				РаботникиСовместительство.Сотрудник.Физлицо,
	|				2
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&ДатаАктуальности,
	|						Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|							И Сотрудник.Физлицо В
	|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|									НачалаОтпусков.ФизЛицо
	|								ИЗ
	|									РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК НачалаОтпусков
	|								ГДЕ
	|									НачалаОтпусков.Период >= &ДатаНачала
	|									И НачалаОтпусков.Период <= &ДатаОкончания
	|									И НачалаОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный))) КАК РаботникиСовместительство
	|			ГДЕ
	|				ВЫБОР
	|						КОГДА РаботникиСовместительство.ПериодЗавершения <= &ДатаАктуальности
	|								И РаботникиСовместительство.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА РаботникиСовместительство.ПричинаИзмененияСостоянияЗавершения
	|						ИНАЧЕ РаботникиСовместительство.ПричинаИзмененияСостояния
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиСовместительство.Сотрудник.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Ссылка),
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|						ТОГДА 3
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|			ГДЕ
	|				СотрудникиДУ.Физлицо В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							НачалаОтпусков.ФизЛицо
	|						ИЗ
	|							РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК НачалаОтпусков
	|						ГДЕ
	|							НачалаОтпусков.Период >= &ДатаНачала
	|							И НачалаОтпусков.Период <= &ДатаОкончания
	|							И НачалаОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный))
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо,
	|				ВЫБОР
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|						ТОГДА 3
	|					КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|						ТОГДА 4
	|					ИНАЧЕ 5
	|				КОНЕЦ) КАК СписокСотрудников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СписокФизическихЛиц.Физлицо КАК Физлицо,
	|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
	|				ИЗ
	|					(ВЫБРАТЬ
	|						РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|						1 КАК Приоритет
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|								&ДатаАктуальности,
	|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|									И Сотрудник.Физлицо В
	|										(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|											НачалаОтпусков.ФизЛицо
	|										ИЗ
	|											РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК НачалаОтпусков
	|										ГДЕ
	|											НачалаОтпусков.Период >= &ДатаНачала
	|											И НачалаОтпусков.Период <= &ДатаОкончания
	|											И НачалаОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный))) КАК РаботникиОсновноеМесто
	|					ГДЕ
	|						ВЫБОР
	|								КОГДА РаботникиОсновноеМесто.ПериодЗавершения <= &ДатаАктуальности
	|										И РаботникиОсновноеМесто.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|									ТОГДА РаботникиОсновноеМесто.ПричинаИзмененияСостоянияЗавершения
	|								ИНАЧЕ РаботникиОсновноеМесто.ПричинаИзмененияСостояния
	|							КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						РаботникиСовместительство.Сотрудник.Физлицо,
	|						2
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|								&ДатаАктуальности,
	|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)
	|									И Сотрудник.Физлицо В
	|										(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|											НачалаОтпусков.ФизЛицо
	|										ИЗ
	|											РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК НачалаОтпусков
	|										ГДЕ
	|											НачалаОтпусков.Период >= &ДатаНачала
	|											И НачалаОтпусков.Период <= &ДатаОкончания
	|											И НачалаОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный))) КАК РаботникиСовместительство
	|					ГДЕ
	|						ВЫБОР
	|								КОГДА РаботникиСовместительство.ПериодЗавершения <= &ДатаАктуальности
	|										И РаботникиСовместительство.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|									ТОГДА РаботникиСовместительство.ПричинаИзмененияСостоянияЗавершения
	|								ИНАЧЕ РаботникиСовместительство.ПричинаИзмененияСостояния
	|							КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						СотрудникиДУ.Физлицо,
	|						ВЫБОР
	|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|								ТОГДА 3
	|							КОГДА СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|								ТОГДА 4
	|							ИНАЧЕ 5
	|						КОНЕЦ
	|					ИЗ
	|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|					ГДЕ
	|						СотрудникиДУ.Физлицо В
	|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|									НачалаОтпусков.ФизЛицо
	|								ИЗ
	|									РегистрСведений.СобытийныйПланЗанятостиФизлиц КАК НачалаОтпусков
	|								ГДЕ
	|									НачалаОтпусков.Период >= &ДатаНачала
	|									И НачалаОтпусков.Период <= &ДатаОкончания
	|									И НачалаОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный))) КАК СписокФизическихЛиц
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
	|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
	|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК Сотрудники
	|		ПО НачалаОтпусков.ФизЛицо = Сотрудники.Физлицо
	|ГДЕ
	|	НачалаОтпусков.Период >= &ДатаНачала
	|	И НачалаОтпусков.Период <= &ДатаОкончания
	|	И НачалаОтпусков.Состояние = ЗНАЧЕНИЕ(Перечисление.ТипыПериодическихЗадачРаботника.ОтпускЕжегодный)";
	
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	
	Запрос.УстановитьПараметр("ДатаАктуальности",		Дата);
	
	ТаблицаФизЛиц = Запрос.Выполнить().Выгрузить();
	ТаблицаФизЛиц.Колонки.Добавить("ПричинаОтсутствия");
	ТаблицаФизЛиц.ЗаполнитьЗначения(Перечисления.УдалитьПричиныОтсутствияНаРаботе.ОтпускЕжегодный, "ПричинаОтсутствия");
	Работники.Загрузить(ТаблицаФизЛиц);
	
КонецПроцедуры // Автозаполнение()

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
КонецФункции // Печать
	
#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Диаграмма","Диаграмма отпусков");
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоШапке(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Дата,
	|	Док.Ссылка
	|ИЗ
	|	Документ.УдалитьОтсутствиеНаРаботе КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по таблице "Работники" документа
//
// Параметры: 
//  Режим        - режим проведения.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоРаботники(Режим)
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвижений": 
	// 1. Выборка "ТЧРаботники": 
	//		Выбираются строки документа.  
	// 2. Выборка "ДанныеПоРаботникуДоНазначения": 
	//		Для каждой строки ТЧРаботники выполняем срез по регистру РегистрСведенийРаботники на дату ДатаНачала
	//		для выполнения движений и проверки "Работает ли работник на дату перемещения"
	//		(Использует данные выборки "ДатыПоследнегоДвиженияРаботника")
	// 3. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки, имеющие пересекающийся период действия
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	// 1. Выборка "ТЧРаботники":
	//		Выбираются строки документа 
	// 2. Выборка "РегистрСведенийРаботники":
	//		Для каждой строки ТЧРаботники ищем движения по регистру РегистрСведенийРаботники за период [ДатаНачала, ДатаОкончания]
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботники.Сотрудник,
	|	ТЧРаботники.Сотрудник.Наименование КАК СотрудникНаименование,
	|	ТЧРаботники.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботники.ДатаНачала,
	|	ТЧРаботники.ДатаОкончания,
	|	ТЧРаботники.НапомнитьПоЗавершении,
	|	ТЧРаботники.ОсвобождатьСтавку,
	|	ТЧРаботники.ПричинаОтсутствия,
	|	ДанныеПоРаботникуДоНазначения.Подразделение КАК ПрежнееПодразделение,
	|	ДанныеПоРаботникуДоНазначения.Должность КАК ПрежняяДолжность,
	|	ДанныеПоРаботникуДоНазначения.ЗанимаемыхСтавок КАК ПрежняяСтавка,
	|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
	|	ИмеющиесяСостояния.Состояние КАК КонфликтноеСостояние,
	|	ИмеющиесяСостояния.Регистратор.Представление КАК КонфликтныйДокумент
	|ИЗ
	|	Документ.УдалитьОтсутствиеНаРаботе.Работники КАК ТЧРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|			МАКСИМУМ(РегистрСведенийРаботники.Период) КАК ДатаДвижения
	|		ИЗ
	|			Документ.УдалитьОтсутствиеНаРаботе.Работники КАК ТЧРаботники
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК РегистрСведенийРаботники
	|				ПО РегистрСведенийРаботники.ФизЛицо = ТЧРаботники.Сотрудник.Физлицо
	|					И РегистрСведенийРаботники.Период <= ТЧРаботники.ДатаНачала
	|		ГДЕ
	|			ТЧРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботники.НомерСтроки) КАК ДатыПоследнегоДвиженияРаботника
	|		ПО ДатыПоследнегоДвиженияРаботника.НомерСтроки = ТЧРаботники.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники КАК ДанныеПоРаботникуДоНазначения
	|		ПО ДанныеПоРаботникуДоНазначения.ФизЛицо = ТЧРаботники.Сотрудник.Физлицо
	|			И ДанныеПоРаботникуДоНазначения.Период = ДатыПоследнегоДвиженияРаботника.ДатаДвижения
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТЧРаботники.НомерСтроки КАК НомерСтроки,
	|			МИНИМУМ(ТЧРаботники2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
	|		ИЗ
	|			Документ.УдалитьОтсутствиеНаРаботе.Работники КАК ТЧРаботники
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УдалитьОтсутствиеНаРаботе.Работники КАК ТЧРаботники2
	|				ПО (ТЧРаботники2.Ссылка = &ДокументСсылка)
	|					И ТЧРаботники.НомерСтроки <> ТЧРаботники2.НомерСтроки
	|					И ТЧРаботники.ДатаНачала <= ТЧРаботники2.ДатаНачала
	|					И ТЧРаботники.Сотрудник.Физлицо = ТЧРаботники2.Сотрудник.Физлицо
	|					И (ВЫБОР
	|						КОГДА ТЧРаботники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|							ТОГДА ИСТИНА
	|						КОГДА ТЧРаботники.НапомнитьПоЗавершении
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ТЧРаботники.ДатаОкончания >= ТЧРаботники2.ДатаНачала
	|					КОНЕЦ)
	|		ГДЕ
	|			ТЧРаботники.Ссылка = &ДокументСсылка
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТЧРаботники.НомерСтроки) КАК ПересекающиесяСтроки
	|		ПО ТЧРаботники.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботников КАК ИмеющиесяСостояния
	|		ПО ТЧРаботники.ДатаНачала = ИмеющиесяСостояния.Период
	|			И ТЧРаботники.Ссылка <> ИмеющиесяСостояния.Регистратор
	|			И ТЧРаботники.Сотрудник.Физлицо = ИмеющиесяСостояния.ФизЛицо
	|ГДЕ
	|	ТЧРаботники.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоРаботники()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 		 - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Работники" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//								  из результата запроса по работникам. 
//	Отказ        - флаг отказа в проведении,
//	Заголовок	 - Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Работники"": ";
	
	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаНачала
	НетДатыНачала = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачала);
	Если НетДатыНачала Тогда
		ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала отсутствия на работе!", Отказ, Заголовок);
	КонецЕсли;
	
	// ПричинаОтсутствия
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПричинаОтсутствия) Тогда
		ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана причина отсутствия!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника ИЛИ НетДатыНачала Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончания) и ВыборкаПоСтрокамДокумента.ДатаНачала > ВыборкаПоСтрокамДокумента.ДатаОкончания Тогда
		ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала отсутствия не может превышать дату окончания!", Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: ранее работник должен быть принят на работу
	Если ВыборкаПоСтрокамДокумента.ПрежняяСтавка = NULL Тогда
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " еще не принят на работу!";
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.ПрежняяСтавка = 0 Тогда	
		СтрокаПродолжениеСообщенияОбОшибке = "на " + Формат(ВыборкаПоСтрокамДокумента.ДатаНачала, "ДЛФ=DD") + " сотрудник " + ВыборкаПоСтрокамДокумента.СотрудникНаименование + " уже уволен!";
		Сообщить(СтрокаНачалаСообщенияОбОшибке + СтрокаПродолжениеСообщенияОбОшибке);
		
	КонецЕсли;
	
	// Проверка: противоречие другой строке документа
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "период отсутствия пересекается с периодом строки " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + "!"; 
		ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка: в регистре уже есть такое движение
	Если ВыборкаПоСтрокамДокумента.КонфликтноеСостояние <> NULL Тогда
		СтрокаСообщениеОбОшибке = "сотрудник уже переведен в состояние """ + ВыборкаПоСтрокамДокумента.КонфликтноеСостояние + """ документом " + ВыборкаПоСтрокамДокумента.КонфликтныйДокумент + "!"; 
		ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботника()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПараметров = "")
	
	Причина = ВыборкаПоРаботники.ПричинаОтсутствия;
	
	Движение = Движения.СостояниеРаботников.Добавить();
	
	// Свойства
	Движение.Период							= ВыборкаПоРаботники.ДатаНачала;
	// Измерения
	Движение.Физлицо						= ВыборкаПоРаботники.Физлицо;
	// Ресурсы
	// здесь принято следующее соглашение - на каждую причину отсутствия обязательно есть одноименное состояние работника
	Если  Причина = Справочники.ПричиныОтсутствияНаРаботе.ЕжегодныйОтпуск Тогда
		Движение.Состояние					= Перечисления.СостоянияРаботника.ОтпускЕжегодный;
	Иначе
		Движение.Состояние					= Перечисления.СостоянияРаботника.Отсутствие;
		Движение.ПричинаОтсутствия			= Причина;
	КонецЕсли;
	// Реквизиты
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаОкончания) Тогда
		
		Если НЕ ВыборкаПоРаботники.НапомнитьПоЗавершении Тогда
			Движение.ПериодЗавершения		= ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
			Движение.СостояниеЗавершения	= Перечисления.СостоянияРаботника.Работает;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//  СтруктураПроведенияПоРегистрамНакопления - структура, содержащая имена регистров 
//                                             накопления по которым надо проводить документ
//  СтруктураПараметров                      - структура параметров проведения.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, СтруктураПараметров = "")
	
	Если Не ВыборкаПоРаботники.ОсвобождатьСтавку Тогда
		Возврат;
	КонецЕсли;
	
	Должность							= ВыборкаПоРаботники.ПрежняяДолжность;
	Подразделение						= ВыборкаПоРаботники.ПрежнееПодразделение;
	ЗанимаемаяСтавка					= ВыборкаПоРаботники.ПрежняяСтавка;
	
	// освободим занимаемые ранее ставки
	Движение = Движения.ЗанятыеРабочиеМеста.Добавить();
	
	// Свойства
	Движение.Период						= ВыборкаПоРаботники.ДатаНачала;
	Движение.ВидДвижения				= ВидДвиженияНакопления.Расход;
	
	// Измерения
	Движение.Подразделение				= Подразделение;
	Движение.Должность					= Должность;
	
	// Ресурсы
	Движение.Количество					= ЗанимаемаяСтавка;
	
	Если ЗначениеЗаполнено(ВыборкаПоРаботники.ДатаОкончания)
		И НЕ ВыборкаПоРаботники.НапомнитьПоЗавершении Тогда
		
		// по прежнему месту работы займем временно освобожденные ставки
		Движение = Движения.ЗанятыеРабочиеМеста.Добавить();
		
		// Свойства
		Движение.Период					= ВыборкаПоРаботники.ДатаОкончания + мДлинаСуток;
		Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.Подразделение			= Подразделение;
		Движение.Должность				= Должность;
		
		// Ресурсы
		Движение.Количество				= ЗанимаемаяСтавка;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);	
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		// Движения стоит добавлять, если в проведении еще не отказано (отказ = ложь)
		Если НЕ Отказ Тогда
			
			// получим реквизиты табличной части
			РезультатЗапросаПоРаботники = СформироватьЗапросПоРаботники(Режим);
			ВыборкаПоРаботники = РезультатЗапросаПоРаботники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоРаботники.Следующий() Цикл 
				
				// проверим очередную строку табличной части
				ПроверитьЗаполнениеСтрокиРаботника(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники, Отказ, Заголовок);
				
				Если НЕ Отказ Тогда
					// Заполним записи в наборах записей регистров
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботники);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(Работники);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;
