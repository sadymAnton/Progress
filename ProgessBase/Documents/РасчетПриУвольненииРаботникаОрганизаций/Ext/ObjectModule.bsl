////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем мСведенияОВидахРасчета;
Перем мУдержаниеЗаОтпускУменьшаетНалоги;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
// Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//	НазваниеМакета	- строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если Не Проведен Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Документ можно распечатать только после его проведения!");
		Возврат Неопределено;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "РасчетСреднегоЗаработка" Тогда
		Если ДнейЧасовВыходногоПособия = 0 И ДнейЧасовСохраненияСреднегоЗаработка = 0 Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке("По документу не выплачивается сохраняемый средний заработок!");
			Возврат Неопределено;
		КонецЕсли;
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ТабДокумент = ФормированиеПечатныхФормЗК.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаУвольнения, ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка, "за дни(часы) компенсаций при увольнении" , Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка)");
		
	ИначеЕсли ИмяМакета = "РасчетКомпенсацииОтпуска" Тогда
		Если ДнейЧасовКомпенсацииУдержанияОтпуска = 0 Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке("По документу не выплачивается компенсация отпуска!");	
			Возврат Неопределено;
		КонецЕсли;
		
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		ТабДокумент = ФормированиеПечатныхФормЗК.ПечатьРасчетаСреднегоЗаработка(Ссылка, ДатаУвольнения, ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка, "за " + ДнейЧасовКомпенсацииУдержанияОтпуска + " дней(часов) " + ?(ПризнакКомпенсацииОтпуска,"компенсации отпуска","удержания за отпуск"), ?(ПорядокРасчетаОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке), РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ИспользуетсяСреднеЧасовойЗаработок(ЭтотОбъект));
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + " (расчет среднего заработка " + ?(ПризнакКомпенсацииОтпуска,"компенсации отпуска","удержания за отпуск") + ")");
		
	ИначеЕсли ЗначениеЗаполнено(ИмяМакета) Тогда
		ТабДокумент = РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.РегламентированнаяПечатнаяФорма(ЭтотОбъект, ИмяМакета);
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект,Метаданные().Синоним) + РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ОписаниеРегламентированнойПечатнойФормы(ЭтотОбъект, ИмяМакета));
	КонецЕсли;
	
КонецФункции // Печать()

#КонецЕсли

//Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
//
// Параметры:
//	РассчитываемыеТаблицы	- структура из элементов, соответствующих табличным частям документа. 
//								Значение Истина для каждого из элементов структуры означает необходимость расчета 
//								соответствующей табличной части документа
//	РежимПерерасчета		- булево - признак вызов расчета при перерасчете документа
//
Процедура Рассчитать(РассчитываемыеТаблицы, РежимПерерасчета = Ложь, ВыборкаПоШапкеДокумента = Неопределено) Экспорт
	
	//Перед вызовом процедуры документ должнен быть записан, движения должны быть удалены 
	
	Отказ = Ложь;
	
	Заголовок = СтрЗаменить(ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка),"Проведение документа: ","Расчет документа: ");
	
	// Дата увольнения должна быть указана
	Если Не ЗначениеЗаполнено(ДатаУвольнения) Тогда
		ОбщегоНазначенияЗК.СообщитьОбОшибке("Не указана дата увольнения сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
		// позиционируем выборку
		ВыборкаПоШапкеДокумента.Следующий();
	КонецЕсли;
	
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Очистим ТЧ Начисления
	Начисления.Очистить();
	
	// Создадим наборы записей используемых регистров 
	НаборДополнительныеНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборДополнительныеНачисления.Отбор.Регистратор.Значение = Ссылка;
	
	НаборУдержания = РегистрыРасчета.УдержанияРаботниковОрганизаций.СоздатьНаборЗаписей();
	НаборУдержания.Отбор.Регистратор.Значение = Ссылка;
	
	НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
	НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;

	// Если это документ-исправление, добавим сторно-записи из исправляемого документа.
	ПроведениеРасчетов.СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(ПерерассчитываемыйДокумент,ВыборкаПоШапкеДокумента, Неопределено, НаборДополнительныеНачисления, НаборУдержания);
	
	// Начисления (удержания) документа.
	СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборДополнительныеНачисления, НаборУдержания);
	
	Если НЕ РассчитываемыеТаблицы.РасчетСреднего Тогда
		
		// запишем движения по среднему заработку для расчета начислений
		// получим реквизиты табличной части РасчетСреднего 
		РезультатЗапросаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего(ВыборкаПоШапкеДокумента);
		ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
		
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ);
			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, НаборРасчетСреднего);
			КонецЕсли;
		КонецЦикла;
		
		НаборРасчетСреднего.Записать();
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// рассчитываем записи начислений и если надо, записи расчета среднего заработка
	Если РассчитываемыеТаблицы.Начисления Тогда
		Если РассчитываемыеТаблицы.РасчетСреднего Тогда
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
		Иначе
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
			ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("УдержанияРаботниковОрганизаций", НаборУдержания, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение);
		КонецЕсли;
		
		// перепишем записи начислений в документ
		ПереписатьНачисленияВТабличнуюЧастьДокумента(НаборДополнительныеНачисления);
		ПереписатьНачисленияВТабличнуюЧастьДокумента(НаборУдержания);
		
		ТаблицаЗаписей = НаборРасчетСреднего.Выгрузить();
		
	ИначеЕсли РассчитываемыеТаблицы.РасчетСреднего Тогда

		НаборДополнительныеНачисления.Записать();
		НаборУдержания.Записать();
		ПроведениеРасчетовПереопределяемый.СформироватьИЗаписатьДанныеРасчетаСреднего("ДополнительныеНачисленияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
		ТаблицаЗаписей = НаборРасчетСреднего.Выгрузить();
		Если НаборУдержания.Количество() > 0 Тогда
			НаборРасчетСреднего.Очистить();
			ПроведениеРасчетовПереопределяемый.СформироватьИЗаписатьДанныеРасчетаСреднего("УдержанияРаботниковОрганизаций", Ссылка, НаборРасчетСреднего);
			
			Для Каждого СтрокаНабора Из НаборРасчетСреднего Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаЗаписей.Добавить(),СтрокаНабора)
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если РассчитываемыеТаблицы.РасчетСреднего Тогда
		РасчетСреднего.Очистить();
		РасчетСреднегоДляОтпуска.Очистить();
		ТаблицаЗаписей.Свернуть("СпособРасчета,БазовыйПериодКонец,БазовыйПериодНачало,ВидРасчета,КоэффициентИндексации,НормаПоПятидневке,ОтработаноДней,ОтработаноПоПятидневке,ОтработаноЧасов,Результат,ЧислоМесяцев");
		// перепишем записи расчета среднего заработка в документ
		Для каждого СтрокаНабора Из ТаблицаЗаписей Цикл
			Если СтрокаНабора.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Тогда
				СтрокаТЧ = РасчетСреднего.Добавить();
				
			Иначе
				СтрокаТЧ = РасчетСреднегоДляОтпуска.Добавить();
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,СтрокаНабора);
		КонецЦикла;
	КонецЕсли;
	
	Если ПроведениеРасчетовПереопределяемый.ЗаписыватьДвиженияПриРасчетеДокументаСреднегоЗаработка(РассчитываемыеТаблицы, РежимПерерасчета) Тогда
		
		Если НаборДополнительныеНачисления.Модифицированность() Тогда
			НаборДополнительныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		Если НаборУдержания.Модифицированность() Тогда
			НаборУдержания.Записать();
		КонецЕсли;
		Если НаборРасчетСреднего.Модифицированность() Тогда
			НаборРасчетСреднего.Записать(Истина, Ложь, Истина, Ложь);
		КонецЕсли;
		
		ПроведениеРасчетовПереопределяемый.ВыполнитьДополнительныеДействияПриРасчетеДокументаСреднегоЗаработка(ЭтотОбъект);
	КонецЕсли;
	
	Если Не РежимПерерасчета тогда

		// Удаляем движения для режима интерактивного расчета 
		НаборДополнительныеНачисления.Очистить();
		НаборДополнительныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
		
		НаборУдержания.Очистить();
		НаборУдержания.Записать();
		
		НаборРасчетСреднего.Очистить();
		НаборРасчетСреднего.Записать();
		
	КонецЕсли;
		
КонецПроцедуры // Рассчитать()

//Выполняет перерасчет по заданному списку физлиц
//
// Параметры:
//	Физлица	- массив - ссылки на физлиц
//
// Возвращаемое значение
//	Нет.
//
Процедура Перерассчитать(Физлица = Неопределено) Экспорт

	// проверим можно ли что-то делать с документом
	ОписаниеПричиныОтказа = "";
	Если ПроведениеРасчетов.ДокументНельзяИзменятьЗаднимЧислом(Ссылка, ОписаниеПричиныОтказа) Тогда
		ВызватьИсключение(ОписаниеПричиныОтказа);
	КонецЕсли;
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	// Выполним полный перерасчет документа
	Рассчитать(Новый Структура("Начисления,РасчетСреднего",Истина,Истина), Истина, ВыборкаПоШапкеДокумента);	
	// Зафиксируем данные табличных частей после расчета
	Записать();
	
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ПереписатьПрочиеДвиженияПриПерерасчете(ЭтотОбъект, ВыборкаПоШапкеДокумента);
	
	// Удалим записи перерасчета по которым выполнен перерасчет
	ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка);
	
КонецПроцедуры // Перерассчитать()

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.РасчетПриУвольненииРаботникаОрганизаций
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПерерассчитываемыйДокумент = ИсходныйДокумент.Ссылка;
 	ЗаполнитьЗначенияСвойств(ЭтотОбъект,ИсходныйДокумент,,
		"Проведен, Номер, Дата, ПометкаУдаления, ПерерассчитываемыйДокумент, ПериодРегистрации, Комментарий, Ответственный"); // кроме указанных
	
КонецПроцедуры  // ЗаполнитьПоПерерассчитываемомуДокументу()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//	Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ПолучитьСтруктуруРегламентированныхФорм(ЭтотОбъект);
	СтруктураМакетов.Вставить("РасчетСреднегоЗаработка",	"Расчет среднего заработка");	
	СтруктураМакетов.Вставить("РасчетКомпенсацииОтпуска",	"Расчет ср. заработка " + ?(ПризнакКомпенсацииОтпуска,"компенсации отпуска","удержания за отпуск"));	
	
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

Функция ОсновнойВариантРасчетаДокумента() Экспорт 
	
	Если мУдержаниеЗаОтпускУменьшаетНалоги = Неопределено Тогда
		мУдержаниеЗаОтпускУменьшаетНалоги = РегистрыСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.Получить().УдержаниеЗаОтпускУменьшаетНалоги;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДнейЧасовКомпенсацииУдержанияОтпуска) Тогда
		Если ПризнакКомпенсацииОтпуска Тогда
			Если ПорядокРасчетаОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням Тогда
				Возврат Новый Структура("ВидРасчета, СпособРасчета", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
			Иначе
				Возврат Новый Структура("ВидРасчета, СпособРасчета", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка, Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)	
			КонецЕсли;
		ИначеЕсли мУдержаниеЗаОтпускУменьшаетНалоги Тогда
			Если ПорядокРасчетаОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням Тогда
				Возврат Новый Структура("ВидРасчета, СпособРасчета", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
			Иначе
				Возврат Новый Структура("ВидРасчета, СпособРасчета", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка, Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)	
			КонецЕсли;
		Иначе 
			Если ПорядокРасчетаОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням Тогда
				Возврат Новый Структура("ВидРасчета, СпособРасчета", ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
			Иначе
				Возврат Новый Структура("ВидРасчета, СпособРасчета", ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка, Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)	
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДнейЧасовВыходногоПособия) Тогда
		Возврат Новый Структура("ВидРасчета, СпособРасчета", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие, Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	ИначеЕсли ЗначениеЗаполнено(ДнейЧасовСохраненияСреднегоЗаработка) Тогда
		Возврат Новый Структура("ВидРасчета, СпособРасчета", ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.СохраняемыйЗаработокНаВремяТрудоустройства, Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
	Иначе 
		Возврат Новый Структура("ВидРасчета, СпособРасчета",Неопределено,Неопределено)
	КонецЕсли;
	
КонецФункции // ОсновнойСпособРасчетаСреднего()

Процедура ОпределитьРасчетныйПериод() Экспорт

	Если ЗначениеЗаполнено(ДатаУвольнения) Тогда 
		
		ВидРасчета = ОсновнойВариантРасчетаДокумента().ВидРасчета;
		Если ЗначениеЗаполнено(ВидРасчета) Тогда
			СведениеОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ВидРасчета);
			МесяцевРасчетногоПериода = ?(СведениеОВидеРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору,СведениеОВидеРасчета.ПериодРасчетаСреднегоЗаработка,РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.КоличествоМесяцевРасчетаПоЗакону(ЭтотОбъект));
		Иначе
			МесяцевРасчетногоПериода = 12
		КонецЕсли;
		Если КонецДня(ДатаУвольнения) = КонецМесяца(ДатаУвольнения) Тогда
			ПериодРасчетаСреднегоЗаработкаОкончание = КонецМесяца(ДатаУвольнения);
		Иначе
			ПериодРасчетаСреднегоЗаработкаОкончание = НачалоМесяца(ДатаУвольнения) - 1;
		КонецЕсли;
		ПериодРасчетаСреднегоЗаработкаНачало = ДобавитьМесяц(КонецДня(ПериодРасчетаСреднегоЗаработкаОкончание) + 1, - МесяцевРасчетногоПериода);
	Иначе
		ПериодРасчетаСреднегоЗаработкаНачало = "";
		ПериодРасчетаСреднегоЗаработкаОкончание = ""
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует записи регистра "ОсновныеНачисленияРаботниковОрганизаций" по данным шапки документа
//
Процедура СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборДополнительныеНачисления, НаборУдержания)
	
	СтрокаОбщихПараметров = "ПодразделениеОрганизации,ОбособленноеПодразделение,ПериодРегистрации,Сотрудник,Физлицо,ГрафикРаботы,ДатаНачалаСобытия,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание,Авторасчет";
	
	//Если ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени Тогда
	Если РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ИспользуетсяСреднеЧасовойЗаработок(ЭтотОбъект) Тогда//Blik 091014 31541
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
	Иначе
		ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДнейЧасовВыходногоПособия > 0 Тогда
		Движение = НаборДополнительныеНачисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаОбщихПараметров);
		
		Движение.Организация	 = ВыборкаПоШапкеДокумента.Организация;
		Движение.ВидРасчета		 = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие;
		Движение.Показатель1	 = ВыборкаПоШапкеДокумента.ДнейЧасовВыходногоПособия;
		Движение.ВидУчетаВремени = ВидУчетаВремени;
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДнейЧасовСохраненияСреднегоЗаработка > 0 Тогда
		Движение = НаборДополнительныеНачисления.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаОбщихПараметров);
		
		Движение.Организация	 = ВыборкаПоШапкеДокумента.Организация;
		Движение.ВидРасчета		 = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.СохраняемыйЗаработокНаВремяТрудоустройства;
		Движение.Показатель1	 = ВыборкаПоШапкеДокумента.ДнейЧасовСохраненияСреднегоЗаработка;
		Движение.ВидУчетаВремени = ВидУчетаВремени;
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииУдержанияОтпуска > 0 Тогда
		Если РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ИспользуетсяСреднеЧасовойЗаработок(ЭтотОбъект) Тогда
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
		Иначе
			ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням;
		КонецЕсли;
		Если ВыборкаПоШапкеДокумента.ПризнакКомпенсацииОтпуска Тогда
			Движение = НаборДополнительныеНачисления.Добавить();
			
		Иначе
			СтрокаОбщихПараметров = СтрЗаменить(СтрокаОбщихПараметров, "ПодразделениеОрганизации,", "");
			Движение = НаборУдержания.Добавить();
			
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаОбщихПараметров);
		Движение.Организация	 = ВыборкаПоШапкеДокумента.Организация;
		Движение.ВидРасчета		 = ВыборкаПоШапкеДокумента.ВидРасчетаСреднегоЗаработкаОтпуск;
		Движение.Показатель1	 = ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииУдержанияОтпуска;
		Движение.ВидУчетаВремени = ВидУчетаВремени;
	КонецЕсли;
		
КонецПроцедуры // СформироватьДвиженияПоНачислениям()

// На основе сформированных движений по регистру расчета заполняет ТЧ "Начисления"
//
Процедура ПереписатьНачисленияВТабличнуюЧастьДокумента(НаборДополнительныеНачисления)
	
	Для Каждого СтрокаНачислений Из НаборДополнительныеНачисления Цикл
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаНачислений);
		НоваяСтрока.Размер = СтрокаНачислений.Показатель1;
	КонецЦикла;
	
КонецПроцедуры // ПереписатьНачисленияВТабличнуюЧастьДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоШапке() Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("ДатаАктуальности",	ДатаУвольнения);
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	Запрос.УстановитьПараметр("МесяцевРасчетаПоЗакону",	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.КоличествоМесяцевРасчетаПоЗакону(ЭтотОбъект));
	Запрос.УстановитьПараметр("ИспользоватьСреднеЧасовойЗаработок",	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ИспользуетсяСреднеЧасовойЗаработок(ЭтотОбъект));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетПриУвольненииРаботникаОрганизации.Дата,
	|	РасчетПриУвольненииРаботникаОрганизации.ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.Дата < РасчетПриУвольненииРаботникаОрганизации.ПериодРегистрации
	|			ТОГДА РасчетПриУвольненииРаботникаОрганизации.ПериодРегистрации
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.Дата > КОНЕЦПЕРИОДА(РасчетПриУвольненииРаботникаОрганизации.ПериодРегистрации, МЕСЯЦ)
	|			ТОГДА КОНЕЦПЕРИОДА(РасчетПриУвольненииРаботникаОрганизации.ПериодРегистрации, МЕСЯЦ)
	|		ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.Дата
	|	КОНЕЦ КАК ПериодРегистрацииДополнительныхНачислений,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасчетПриУвольненииРаботникаОрганизации.Организация
	|		ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА РасчетПриУвольненииРаботникаОрганизации.Организация
	|		ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	РасчетПриУвольненииРаботникаОрганизации.Организация КАК ОбособленноеПодразделение,
	|	РасчетПриУвольненииРаботникаОрганизации.Ссылка,
	|	РасчетПриУвольненииРаботникаОрганизации.ПерерассчитываемыйДокумент.Сотрудник КАК ИсправляемыйДокументСотрудник,
	|	РасчетПриУвольненииРаботникаОрганизации.Сотрудник,
	|	РасчетПриУвольненииРаботникаОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	РасчетПриУвольненииРаботникаОрганизации.ДатаУвольнения,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(РасчетПриУвольненииРаботникаОрганизации.ДатаУвольнения, МЕСЯЦ) = КОНЕЦПЕРИОДА(РасчетПриУвольненииРаботникаОрганизации.ДатаУвольнения, ДЕНЬ)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(РасчетПриУвольненииРаботникаОрганизации.ДатаУвольнения, ДЕНЬ, 1), ДЕНЬ)
	|		ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.ДатаУвольнения
	|	КОНЕЦ КАК ДатаНачалаСобытия,
	|	РасчетПриУвольненииРаботникаОрганизации.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.ПериодРасчетаСреднегоЗаработкаОкончание = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ КОНЕЦПЕРИОДА(РасчетПриУвольненииРаботникаОрганизации.ПериодРасчетаСреднегоЗаработкаОкончание, ДЕНЬ)
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	РАЗНОСТЬДАТ(РасчетПриУвольненииРаботникаОрганизации.ПериодРасчетаСреднегоЗаработкаНачало, НАЧАЛОПЕРИОДА(РасчетПриУвольненииРаботникаОрганизации.ПериодРасчетаСреднегоЗаработкаОкончание, МЕСЯЦ), МЕСЯЦ) + 1 КАК ПериодРасчетаСреднегоЗаработка,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.ПризнакКомпенсацииОтпуска
	|			ТОГДА ИСТИНА
	|		КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.УдержаниеЗаОтпускУменьшаетНалоги, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакКомпенсацииОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизации.ДокументОснование,
	|	РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска,
	|	&ИспользоватьСреднеЧасовойЗаработок,
	|	РасчетПриУвольненииРаботникаОрганизации.ПерерассчитываемыйДокумент КАК ПерерассчитываемыйДокумент,
	|	РасчетПриУвольненииРаботникаОрганизации.ПерерассчитываемыйДокумент.ПериодРегистрации КАК ПериодПерерасчета,
	|	РасчетПриУвольненииРаботникаОрганизации.ПерерассчитываемыйДокумент.Организация КАК ОрганизацияПерерасчета,
	|	ИСТИНА КАК Авторасчет,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|		КОНЕЦ, ЛОЖЬ) КАК СуммированныйУчетРабочегоВремени,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.ПризнакКомпенсацииОтпуска
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни)
	|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка)
	|				КОНЕЦ
	|		КОГДА ЕСТЬNULL(ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.УдержаниеЗаОтпускУменьшаетНалоги, ЛОЖЬ)
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни)
	|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка)
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидРасчетаСреднегоЗаработкаОтпуск,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
	|	КОНЕЦ КАК СпособРасчетаПоСреднемуДляОтпуска,
	|	ВЫБОР
	|		КОГДА РасчетПриУвольненииРаботникаОрганизации.Сотрудник.Организация = ВЫБОР
	|				КОГДА РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА РасчетПриУвольненииРаботникаОрганизации.Организация
	|				ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация
	|			КОНЕЦ
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
	|	РасчетПриУвольненииРаботникаОрганизации.ДнейЧасовКомпенсацииУдержанияОтпуска КАК ДнейЧасовКомпенсацииУдержанияОтпуска,
	|	РасчетПриУвольненииРаботникаОрганизации.ДнейЧасовСохраненияСреднегоЗаработка * ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫБОР
	|					КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|							И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|					ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|				КОНЕЦ, ЛОЖЬ) = Ложь //Blik 071014 31541
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|							И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ДлительностьРабочейНедели
	|					ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ДлительностьРабочейНедели
	|				КОНЕЦ / ВЫБОР
	|					КОГДА ВЫБОР
	|							КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|									И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ВидГрафика
	|							ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ВидГрафика
	|						КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|						ТОГДА 6
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДнейЧасовСохраненияСреднегоЗаработка,
	|	РасчетПриУвольненииРаботникаОрганизации.ДнейЧасовВыходногоПособия * ВЫБОР
	|		КОГДА ЕСТЬNULL(ВЫБОР
	|					КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|							И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.СуммированныйУчетРабочегоВремени
	|					ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.СуммированныйУчетРабочегоВремени
	|				КОНЕЦ, ЛОЖЬ)  = Ложь //Blik 071014 31541
	|			ТОГДА ВЫБОР
	|					КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|							И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ДлительностьРабочейНедели
	|					ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ДлительностьРабочейНедели
	|				КОНЕЦ / ВЫБОР
	|					КОГДА ВЫБОР
	|							КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|									И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|								ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения.ВидГрафика
	|							ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ВидГрафика
	|						КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Шестидневка)
	|						ТОГДА 6
	|					ИНАЧЕ 5
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДнейЧасовВыходногоПособия
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций КАК РасчетПриУвольненииРаботникаОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты КАК ВариантыВстроенныхАлгоритмовРасчетаЗарплаты
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ПО (РаботникиОрганизацииСрезПоследних.Организация = ВЫБОР
	|				КОГДА РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА РасчетПриУвольненииРаботникаОрганизации.Организация
	|				ИНАЧЕ РасчетПриУвольненииРаботникаОрганизации.Организация.ГоловнаяОрганизация
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций КАК ПараметрыВидаРасчетаУдержание
	|		ПО (ПараметрыВидаРасчетаУдержание.Ссылка = ВЫБОР
	|				КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка)
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаВыходноеПособие
	|		ПО (ПараметрыВидаРасчетаВыходноеПособие.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаСохраняемыйЗаработокНаВремяТрудоустройства
	|		ПО (ПараметрыВидаРасчетаСохраняемыйЗаработокНаВремяТрудоустройства.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.СохраняемыйЗаработокНаВремяТрудоустройства))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаКомпенсация
	|		ПО (ПараметрыВидаРасчетаКомпенсация.Ссылка = ВЫБОР
	|				КОГДА РасчетПриУвольненииРаботникаОрганизации.ПризнакКомпенсацииОтпуска
	|					ТОГДА ВЫБОР
	|							КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни)
	|							ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка)
	|						КОНЕЦ
	|				КОГДА РасчетПриУвольненииРаботникаОрганизации.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка)
	|			КОНЕЦ)
	|ГДЕ
	|	РасчетПриУвольненииРаботникаОрганизации.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Формирует запрос по табличной части Начисления
//
// Возвращаемое значение:
//	Результат запроса
//
Функция СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента) Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);
	СпособыРасчетаОтпуска = Новый Массив;
	СпособыРасчетаОтпуска.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	СпособыРасчетаОтпуска.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	Запрос.УстановитьПараметр("СпособыРасчетаОтпуска", СпособыРасчетаОтпуска);

	Запрос.УстановитьПараметр("ГрафикРаботы", ВыборкаПоШапкеДокумента.ГрафикРаботы);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ВыборкаПоШапкеДокумента.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("СуммированныйУчетРабочегоВремени", ВыборкаПоШапкеДокумента.СуммированныйУчетРабочегоВремени);
	
	Запрос.УстановитьПараметр("МесяцевРасчетаПоЗакону",	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.КоличествоМесяцевРасчетаПоЗакону(ЭтотОбъект));
	Запрос.УстановитьПараметр("ИспользоватьСреднеЧасовойЗаработок",	ВыборкаПоШапкеДокумента.ИспользоватьСреднеЧасовойЗаработок);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисление.НомерСтроки,
	|	Начисление.ВидРасчета,
	|	РАЗНОСТЬДАТ(Начисление.ПериодРасчетаСреднегоЗаработкаНачало, НАЧАЛОПЕРИОДА(Начисление.ПериодРасчетаСреднегоЗаработкаОкончание, МЕСЯЦ), МЕСЯЦ) + 1 КАК ЧислоМесяцевРасчета,
	|	ВЫБОР
	|		КОГДА Начисление.ВидРасчета.СпособРасчета В (&СпособыРасчетаОтпуска)
	|			ТОГДА ВЫБОР
	|					КОГДА &ИспользоватьСреднеЧасовойЗаработок
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|				КОНЕЦ
	|		КОГДА &СуммированныйУчетРабочегоВремени
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
	|	КОНЕЦ КАК ВидУчетаВремени,
	|	Начисление.ВидРасчета.КодДоходаНДФЛ КАК КодДоходаНДФЛ,
	|	Начисление.ВидРасчета ССЫЛКА ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК Начисления,
	|	Начисление.Размер КАК Показатель1,
	|	НЕОПРЕДЕЛЕНО КАК Показатель2,
	|	НЕОПРЕДЕЛЕНО КАК Показатель3,
	|	НЕОПРЕДЕЛЕНО КАК Показатель4,
	|	НЕОПРЕДЕЛЕНО КАК Показатель5,
	|	НЕОПРЕДЕЛЕНО КАК Показатель6,
	|	НЕОПРЕДЕЛЕНО КАК БазовыйПериодНачало,
	|	НЕОПРЕДЕЛЕНО КАК БазовыйПериодКонец,
	|	НЕОПРЕДЕЛЕНО КАК ЧислоМесяцев,
	|	Начисление.Результат,
	|	Начисление.ВидРасчета.СпособРасчета КАК СпособРасчета,
	|	Начисление.Сторно,
	|	Начисление.Авторасчет,
	|	Начисление.ОплаченоДнейЧасов,
	|	ВЫБОР
	|		КОГДА Начисление.Сторно
	|			ТОГДА Начисление.Ссылка.ПерерассчитываемыйДокумент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СторнируемыйДокумент,
	|	&ГрафикРаботы КАК ГрафикРаботы,
	|	&ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Начисление.Ссылка.Сотрудник,
	|	Начисление.ПериодРасчетаСреднегоЗаработкаНачало,
	|	Начисление.ПериодРасчетаСреднегоЗаработкаОкончание
	|ИЗ
	|	Документ.РасчетПриУвольненииРаботникаОрганизаций.Начисления КАК Начисление
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ПараметрыВидаРасчетаКомпенсация
	|		ПО (ПараметрыВидаРасчетаКомпенсация.Ссылка = ВЫБОР
	|				КОГДА Начисление.Ссылка.ПризнакКомпенсацииОтпуска
	|					ТОГДА ВЫБОР
	|							КОГДА Начисление.Ссылка.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|								ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни)
	|							ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка)
	|						КОНЕЦ
	|				КОГДА Начисление.Ссылка.ПорядокРасчетаОтпуска = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаОтпуска.ПоКалендарнымДням)
	|					ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка)
	|			КОНЕЦ)
	|ГДЕ
	|	Начисление.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоНачислениям()

// Формирует запрос по таблице "РасчетСреднего" документа
//
// Параметры: 
//	Режим	- режим проведения
//
// Возвращаемое значение:
//	Результат запроса.
//
Функция СформироватьЗапросПоРасчетСреднего(ВыборкаПоШапкеДокумента) Экспорт

	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",							Ссылка);
	Запрос.УстановитьПараметр("МесяцевВыходноеПособие",					ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка);
	Запрос.УстановитьПараметр("МесяцевСохраняемыйЗаработокНаВремяТрудоустройства", ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка);
	Запрос.УстановитьПараметр("МесяцевСреднегоДляОтпуска",				ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка);
	Запрос.УстановитьПараметр("ПоСреднемуДляОтпуска",					ВыборкаПоШапкеДокумента.СпособРасчетаПоСреднемуДляОтпуска);
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",						НачалоМесяца(ВыборкаПоШапкеДокумента.ДатаНачалаСобытия));
	Запрос.УстановитьПараметр("ОкончаниеРасчетногоПериода",				ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание);
	Запрос.УстановитьПараметр("НачалоРасчетногоПериодаВыходноеПособие",	ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало);
	Запрос.УстановитьПараметр("НачалоРасчетногоПериодаДляОтпуска",		ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало);
	Запрос.УстановитьПараметр("НачалоРасчетногоПериодаСохраняемыйЗаработокНаВремяТрудоустройства", ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало);
	Запрос.УстановитьПараметр("ГодовыеПремии", 							РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.МассивГодовыхПремий());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеОЗаработке.НомерСтроки,
	|	ДанныеОЗаработке.ВидРасчета,
	|	ДанныеОЗаработке.БазовыйПериодНачало,
	|	ДанныеОЗаработке.БазовыйПериодКонец,
	|	ДанныеОЗаработке.ОтработаноПоПятидневке,
	|	ДанныеОЗаработке.НормаПоПятидневке,
	|	ДанныеОЗаработке.ОтработаноДней,
	|	ДанныеОЗаработке.ОтработаноЧасов,
	|	ДанныеОЗаработке.ЧислоМесяцев,
	|	ДанныеОЗаработке.КоэффициентИндексации,
	|	ДанныеОЗаработке.Результат,
	|	&ОкончаниеРасчетногоПериода КАК ДатаОкончанияРасчетногоПериода,
	|	&НачалоРасчетногоПериодаДляОтпуска КАК ДатаНачалаРасчетногоПериода,
	|	&МесяцевСреднегоДляОтпуска КАК ЧислоМесяцевРасчета,
	|	&ПоСреднемуДляОтпуска КАК СпособРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтрокаРасчетСреднегоДляОтпуска.НомерСтроки КАК НомерСтроки,
	|		СтрокаРасчетСреднегоДляОтпуска.ВидРасчета КАК ВидРасчета,
	|		СтрокаРасчетСреднегоДляОтпуска.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|		ВЫБОР
	|			КОГДА СтрокаРасчетСреднегоДляОтпуска.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднегоДляОтпуска.БазовыйПериодКонец, ДЕНЬ)
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОНЕЦ КАК БазовыйПериодКонец,
	|		СтрокаРасчетСреднегоДляОтпуска.ОтработаноПоПятидневке КАК ОтработаноПоПятидневке,
	|		СтрокаРасчетСреднегоДляОтпуска.НормаПоПятидневке КАК НормаПоПятидневке,
	|		СтрокаРасчетСреднегоДляОтпуска.ОтработаноДней КАК ОтработаноДней,
	|		""ОтработаноЧасов"" КАК ОтработаноЧасов,
	|		СтрокаРасчетСреднегоДляОтпуска.ЧислоМесяцев КАК ЧислоМесяцев,
	|		СтрокаРасчетСреднегоДляОтпуска.КоэффициентИндексации КАК КоэффициентИндексации,
	|		СтрокаРасчетСреднегоДляОтпуска.Результат КАК Результат
	|	ИЗ
	|		Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднегоДляОтпуска КАК СтрокаРасчетСреднегоДляОтпуска
	|	ГДЕ
	|		СтрокаРасчетСреднегоДляОтпуска.Ссылка = &ДокументСсылка
	|		И СтрокаРасчетСреднегоДляОтпуска.Ссылка.ДнейЧасовКомпенсацииУдержанияОтпуска > 0) КАК ДанныеОЗаработке
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеОЗаработке.НомерСтроки,
	|	ДанныеОЗаработке.ВидРасчета,
	|	ДанныеОЗаработке.БазовыйПериодНачало,
	|	ДанныеОЗаработке.БазовыйПериодКонец,
	|	ДанныеОЗаработке.ОтработаноПоПятидневке,
	|	ДанныеОЗаработке.НормаПоПятидневке,
	|	ДанныеОЗаработке.ОтработаноДней,
	|	ДанныеОЗаработке.ОтработаноЧасов,
	|	ДанныеОЗаработке.ЧислоМесяцев,
	|	ДанныеОЗаработке.КоэффициентИндексации,
	|	ДанныеОЗаработке.Результат,
	|	&ОкончаниеРасчетногоПериода,
	|	Начисления.ДатаНачалаРасчетногоПериода,
	|	Начисления.ЧислоМесяцевРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку)
	|ИЗ
	|	(ВЫБРАТЬ
	|		&МесяцевВыходноеПособие КАК ЧислоМесяцевРасчета,
	|		&НачалоРасчетногоПериодаВыходноеПособие КАК ДатаНачалаРасчетногоПериода
	|	ИЗ
	|		Документ.РасчетПриУвольненииРаботникаОрганизаций КАК РасчетПриУвольненииРаботникаОрганизаций
	|	ГДЕ
	|		РасчетПриУвольненииРаботникаОрганизаций.Ссылка = &ДокументСсылка
	|		И РасчетПриУвольненииРаботникаОрганизаций.ДнейЧасовВыходногоПособия > 0
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		&МесяцевСохраняемыйЗаработокНаВремяТрудоустройства,
	|		&НачалоРасчетногоПериодаСохраняемыйЗаработокНаВремяТрудоустройства
	|	ИЗ
	|		Документ.РасчетПриУвольненииРаботникаОрганизаций КАК РасчетПриУвольненииРаботникаОрганизаций
	|	ГДЕ
	|		РасчетПриУвольненииРаботникаОрганизаций.Ссылка = &ДокументСсылка
	|		И РасчетПриУвольненииРаботникаОрганизаций.ДнейЧасовСохраненияСреднегоЗаработка > 0) КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтрокаРасчетСреднего.НомерСтроки КАК НомерСтроки,
	|			СтрокаРасчетСреднего.ВидРасчета КАК ВидРасчета,
	|			СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|			ВЫБОР
	|				КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			КОНЕЦ КАК БазовыйПериодКонец,
	|			СтрокаРасчетСреднего.ОтработаноПоПятидневке КАК ОтработаноПоПятидневке,
	|			СтрокаРасчетСреднего.НормаПоПятидневке КАК НормаПоПятидневке,
	|			СтрокаРасчетСреднего.ОтработаноДней КАК ОтработаноДней,
	|			СтрокаРасчетСреднего.ОтработаноЧасов КАК ОтработаноЧасов,
	|			СтрокаРасчетСреднего.ЧислоМесяцев КАК ЧислоМесяцев,
	|			СтрокаРасчетСреднего.КоэффициентИндексации КАК КоэффициентИндексации,
	|			СтрокаРасчетСреднего.Результат КАК Результат,
	|			ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку) КАК СпособРасчета
	|		ИЗ
	|			Документ.РасчетПриУвольненииРаботникаОрганизаций.РасчетСреднего КАК СтрокаРасчетСреднего
	|		ГДЕ
	|			СтрокаРасчетСреднего.Ссылка = &ДокументСсылка) КАК ДанныеОЗаработке
	|		ПО (&МесяцевВыходноеПособие = &НачалоРасчетногоПериодаВыходноеПособие
	|				ИЛИ (НЕ ДанныеОЗаработке.ВидРасчета В (&ГодовыеПремии))
	|					И Начисления.ДатаНачалаРасчетногоПериода <= ДанныеОЗаработке.БазовыйПериодНачало
	|					И &ОкончаниеРасчетногоПериода >= ДанныеОЗаработке.БазовыйПериодКонец
	|				ИЛИ ДанныеОЗаработке.ВидРасчета В (&ГодовыеПремии)
	|					И Начисления.ДатаНачалаРасчетногоПериода = ДанныеОЗаработке.БазовыйПериодНачало
	|					И &ОкончаниеРасчетногоПериода = ДанныеОЗаработке.БазовыйПериодКонец)";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,"""ОтработаноЧасов""", РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ПолучитьПрочиеПоляЗапросаПоСреднему());
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРасчетСреднего()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//	Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок = "")

	//  Организация
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОбособленноеПодразделение) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация, по которой выполняется начисление!"), Отказ, Заголовок);
	КонецЕсли;
	
	// ПериодРегистрации
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРегистрации) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан период регистрации!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;

	// ДатаНачалаСобытия
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаУвольнения) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата увольнения!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата начала расчетного периода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата окончания расчетного периода!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание < ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Дата окончания расчетного периода не должна быть меньше даты начала расчетного периода!", Отказ, Заголовок);
	КонецЕсли;

	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоШапкеДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.ДнейЧасовКомпенсацииУдержанияОтпуска <> 0 И НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПорядокРасчетаОтпуска) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не  указан порядок расчета отпуска!", Отказ, Заголовок);
	КонецЕсли;

	// Проверка того, что не изменили сотрудника при исправлении
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИсправляемыйДокументСотрудник) 
		И (ВыборкаПоШапкеДокумента.ИсправляемыйДокументСотрудник <> ВыборкаПоШапкеДокумента.Сотрудник) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("При исправлении документа нельзя изменить сотрудника!", Отказ, Заголовок);
	КонецЕсли;

	// соответствие периодов документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ПериодПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ПериодРегистрации <= ВыборкаПоШапкеДокумента.ПериодПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Период документа должен быть больше периода перерассчитываемого документа!", Отказ, Заголовок);
	КонецЕсли;
	// соответствие организаций документа и перерассчитываемого документа
	Если ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета <> null 
		и ВыборкаПоШапкеДокумента.ОбособленноеПодразделение <> ВыборкаПоШапкеДокумента.ОрганизацияПерерасчета Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Организация, заданная для документа, должна совпадать с организацией перерассчитываемого документа!"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, ПроводитьДополнительныеПроверки = Ложь) Экспорт

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Начисления"": ";
	
	// ВидРасчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ПроводитьДополнительныеПроверки Тогда
		РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ВыполнитьДополнительныеПроверкиСтрокиНачислений(ЭтотОбъект,ВыборкаПоСтрокамДокумента,Отказ, Заголовок, СтрокаНачалаСообщенияОбОшибке);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет правильность заполнения реквизитов в строке ТЧ "Начисления" документа.
// Если какой-то из реквизитов, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса к ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры:
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
//	Отказ						- флаг отказа в проведении,
//	Заголовок					- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок = "") Экспорт

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									""" табл. части ""Расчет среднего"": ";
	
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ, Заголовок);
	КонецЕсли;
	
	// Дата начала базового периода
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодНачало) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ, Заголовок);
		
		// Дата окончания базового периода
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.БазовыйПериодКонец) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата окончания базового периода!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоСтрокамДокумента.БазовыйПериодКонец < ВыборкаПоСтрокамДокумента.БазовыйПериодНачало Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата начала базового периода не может быть больше даты окончания базового периода!", Отказ, Заголовок);
		
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиРасчетСреднего()

// По строке выборок из результатов запроса по документу формируем движения по регистру
//
// Параметры:
//	ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//								  из результата запроса к ТЧ документа, 
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, НаборРасчетСреднего) Экспорт 
	
	Движение = НаборРасчетСреднего.Добавить();
	
	СтрокаСвойствИзДокумента = "ПериодРегистрации,Сотрудник,ФизЛицо,Организация,ДатаНачалаСобытия";
	СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,СпособРасчета,Результат," 
									+ "ДатаНачалаРасчетногоПериода,ДатаОкончанияРасчетногоПериода,"
									+ "ОтработаноПоПятидневке,НормаПоПятидневке,ОтработаноДней,ОтработаноЧасов,"
									+ "КоэффициентИндексации,ЧислоМесяцев";
	
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
	ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
	
	// Реквизиты
	Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоСтрокамДокумента.ЧислоМесяцевРасчета;
	
КонецПроцедуры // ДобавитьСтрокуРасчетаСреднего()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Проверка ДатаУвольнения
	Если НЕ ЗначениеЗаполнено(ДатаУвольнения) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата увольнения работника!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат
	КонецЕсли;
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке();

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	//Надо позвать проверку заполнения реквизитов шапки
	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	
	// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
	Если НЕ Отказ Тогда
		
		Движения.ДополнительныеНачисленияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска	= Истина;
		Движения.УдержанияРаботниковОрганизаций.мВыполнятьСписаниеФактическогоОтпуска					= Истина;
		
		// получим реквизиты табличной части
		ВыборкаПоРасчетСреднего = СформироватьЗапросПоРасчетСреднего(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоРасчетСреднего.Следующий() Цикл
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиРасчетСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Отказ, Заголовок);
			Если НЕ Отказ Тогда
				ДобавитьСтрокуРасчетаСреднего(ВыборкаПоШапкеДокумента, ВыборкаПоРасчетСреднего, Движения.РасчетСреднегоЗаработка);
			КонецЕсли;
		КонецЦикла;
		
		// перепишем данные из таблицы начислений в набор записей
		ВыборкаПоНачислениям = СформироватьЗапросПоНачислениям(ВыборкаПоШапкеДокумента).Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл 
			// проверим очередную строку табличной части
			ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям, Отказ, Заголовок, Истина);
			Если НЕ Отказ Тогда
				Если ВыборкаПоНачислениям.Начисления Тогда
					ПроведениеРасчетов.ДобавитьСтрокуДополнительныхНачислений(Движения.ДополнительныеНачисленияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				Иначе
					ПроведениеРасчетов.ДобавитьСтрокуУдержаний(Движения.УдержанияРаботниковОрганизаций, ВыборкаПоШапкеДокумента, ВыборкаПоНачислениям);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для каждого Движение Из Движения.УдержанияРаботниковОрганизаций Цикл
			Движение.ДатаНачалаСобытия = ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
		КонецЦикла;
		
		РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ВыполнитьПрочиеДвиженияДокумента(ЭтотОбъект, ВыборкаПоШапкеДокумента, Отказ, Заголовок, ВыборкаПоНачислениям);
		
		// выполним удаление перерасчетов исправленного документа
		Если Не Отказ И ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
			ПроведениеРасчетов.УдалитьСведенияОПерерасчетеДокумента(Ссылка, Истина); // Только по исправленным документам
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры // ОбработкаПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток 		= 86400; // в секундах
мСведенияОВидахРасчета = Новый Соответствие;
мУдержаниеЗаОтпускУменьшаетНалоги = Неопределено;
