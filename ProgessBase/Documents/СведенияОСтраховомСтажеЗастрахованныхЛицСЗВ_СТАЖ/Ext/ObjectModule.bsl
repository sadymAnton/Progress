
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПечатьСЗВ_СТАЖ" Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
		Заголовок = "Печать документа: " + СокрЛП(ЭтотОбъект);
		
		Отказ = Ложь;
		
		//Проверка корректности заполнения документа
		ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
		
		Если Отказ Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат Неопределено;
		КонецЕсли;	 
		
		ТабДокумент = ПроцедурыПерсонифицированногоУчета.ПечатнаяФормаОДВ_1(Ссылка);
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Опись ОДВ-1 " + ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект, "по документу"), , ТабДокумент);
		
		ТабДокумент = ПечатнаяФормаСЗВ_СТАЖ();
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Форма СЗВ-СТАЖ " + ОбщегоНазначенияЗК.СформироватьЗаголовокДокумента(ЭтотОбъект, "по документу"), , ТабДокумент);
		
	КонецЕсли;
	
КонецФункции // Печать

Функция ПечатнаяФормаСЗВ_СТАЖ()
	
	Макет = ПолучитьМакет("ФормаСЗВ_СТАЖ");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЗВ_СТАЖ";
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаСтажа = Макет.ПолучитьОбласть("СтрокаСтажа");
	ОбластьДвустрочнаяСтрокаСтажа = Макет.ПолучитьОбласть("ДвустрочнаяСтрокаСтажа");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечати().Выбрать();
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати().Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда 
		
		ТекущийЛист = Новый ТабличныйДокумент;
		ТекущийЛист.ПолеСлева = 0;
		ТекущийЛист.ПолеСправа = 0;
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		
		РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
		РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12, 13);
		
		ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12, 13);
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьШапка, "КПП", 9);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьШапка, "КПП", 9, 10);
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.Год,"ЧГ=0"), ОбластьШапка, "Год", 4);
		
		НомерСтраницы = 1;
		НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 5);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьШапка, "НомСтр", 5);
		
		ОбластьШапка.Параметры.Исходная = ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная;
		ОбластьШапка.Параметры.Дополняющая = ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Дополняющая;
		ОбластьШапка.Параметры.НазначениеПенсии = ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии;
		
		ОбластьШапка.Параметры.НаименованиеОрганизации = ВыборкаПоШапкеДокумента.НаименованиеОрганизации;
		ОбластьШапка.Параметры.Организация = ВыборкаПоШапкеДокумента.Организация;
		
		ТекущийЛист.Вывести(ОбластьШапка);
		
		НомерСтроки = 0;
		Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			
			ОчиститьОбласть(ОбластьСтрокаСтажа);
			ОчиститьОбласть(ОбластьДвустрочнаяСтрокаСтажа);
			ЗаполнитьЗначенияСвойств(ОбластьСтрокаСтажа.Параметры, ВыборкаПоРаботникам);
			ЗаполнитьЗначенияСвойств(ОбластьДвустрочнаяСтрокаСтажа.Параметры, ВыборкаПоРаботникам);
			
			НомерСтроки = НомерСтроки + 1;
			ОбластьСтрокаСтажа.Параметры.НомерСтроки = СтрЗаменить(ВыборкаПоРаботникам.НомерСтроки, Символы.НПП, "") + ".";
			ОбластьДвустрочнаяСтрокаСтажа.Параметры.НомерСтроки = ОбластьСтрокаСтажа.Параметры.НомерСтроки;
			
			Если ВыборкаПоРаботникам.ЗаполненСтаж Тогда
				Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка) Тогда
						ЗаполнитьДвустрочнуюОбластьСтаж(ВыборкаПоРаботникам, ОбластьДвустрочнаяСтрокаСтажа);
						ВывестиОбласть(ОбластьДвустрочнаяСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
					Иначе
						ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтрокаСтажа);
						ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
					КонецЕсли;
					ОбластьСтрокаСтажа.Параметры.Фамилия = "";
					ОбластьСтрокаСтажа.Параметры.Имя = "";
					ОбластьСтрокаСтажа.Параметры.Отчество = "";
					ОбластьСтрокаСтажа.Параметры.СтраховойНомерПФР = "";
					ОбластьСтрокаСтажа.Параметры.НомерСтроки = "";
					ОбластьДвустрочнаяСтрокаСтажа.Параметры.Фамилия = "";
					ОбластьДвустрочнаяСтрокаСтажа.Параметры.Имя = "";
					ОбластьДвустрочнаяСтрокаСтажа.Параметры.Отчество = "";
					ОбластьДвустрочнаяСтрокаСтажа.Параметры.СтраховойНомерПФР = "";
					ОбластьДвустрочнаяСтрокаСтажа.Параметры.НомерСтроки = "";
					Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
						Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
							Продолжить;
						КонецЕсли;
						Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка) Тогда
							ЗаполнитьДвустрочнуюОбластьСтаж(ВыборкаПоРаботникам, ОбластьДвустрочнаяСтрокаСтажа);
							ОбластьДвустрочнаяСтрокаСтажа.Параметры.ДатаНачалаПериода = "";
							ОбластьДвустрочнаяСтрокаСтажа.Параметры.ДатаОкончанияПериода = "";
							ВывестиОбласть(ОбластьДвустрочнаяСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						Иначе
							ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтрокаСтажа);
							ОбластьСтрокаСтажа.Параметры.ДатаНачалаПериода = "";
							ОбластьСтрокаСтажа.Параметры.ДатаОкончанияПериода = "";
							ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						КонецЕсли;
					КонецЦикла;	
				КонецЦикла;
			Иначе
				ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
		ВывестиОбласть(ОбластьПодвал, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
		ДокументРезультат.Вывести(ТекущийЛист);
		
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецЕсли

Процедура ПроверитьПравильностьЗаполненияДокумента(ЕстьОшибки, СообщатьОбУспехе = Истина, ВыборкаПоШапкеДокумента = Неопределено, ВыборкаПоРаботникам = Неопределено) Экспорт
	
	Обработка = глЗначениеПеременной("глОбработкаСообщений");

	Если ВыборкаПоШапкеДокумента = Неопределено Тогда
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапкеДокументов().Выбрать();
	КонецЕсли;
	Если ВыборкаПоРаботникам = Неопределено Тогда
		ВыборкаПоРаботникам = СформироватьЗапросПоРаботникам().Выбрать();
	КонецЕсли;
	
	Отказ = Ложь;
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
		
		ТекущийДокумент = ВыборкаПоШапкеДокумента.Ссылка;
		
		// Заголовок для сообщений об ошибках проведения.
		Заголовок =  "Проверка документа " + СокрЛП(ВыборкаПоШапкеДокумента.Ссылка);
		СообщенияРазделПроверки = Обработка.ДобавитьСообщение(Заголовок, Перечисления.ВидыСообщений.Информация);
		
		КоличествоДокументов = ВыборкаПоШапкеДокумента.Количество;
		Если КоличествоДокументов = 0 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Список застрахованных лиц пуст!", Отказ, Заголовок,,, СообщенияРазделПроверки);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок,,, СообщенияРазделПроверки);
		ИначеЕсли СтрДлина(СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР)) <> 14 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Предупреждение: Регистрационный номер организации в ПФР скорее всего неправильный",,Заголовок,,, СообщенияРазделПроверки);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Год) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан отчетный год!", Отказ, Заголовок,,, СообщенияРазделПроверки);
		ИначеЕсли ВыборкаПоШапкеДокумента.Год < Год(РасчетСтраховыхВзносов.ДатаПередачиАдминистрированияВзносовФНС()) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Форма СЗВ-СТАЖ представляется начиная с 2017 года!", Отказ,,,, СообщенияРазделПроверки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан тип сведений!", Отказ,,,, СообщенияРазделПроверки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайла) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано имя файла!", Отказ, Заголовок);
		КонецЕсли;
		
		// проверим данные руководителя
		Если Не ЗначениеЗаполнено(Руководитель) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан руководитель!", Отказ, Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДолжностьРуководителя) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана должность руководителя!", Отказ, Заголовок);
		КонецЕсли;
		
		ВыборкаПоРаботникам.Сбросить();
		Если ВыборкаПоРаботникам.НайтиСледующий(ВыборкаПоШапкеДокумента.Ссылка, "Ссылка") Тогда
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") цикл
				
				Если ВыборкаПоРаботникам.Ссылка <> ТекущийДокумент Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаНачалаСообщенияОбОшибке = "В строке № "+ СокрЛП(ВыборкаПоРаботникам.НомерСтроки);
				
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ФизЛицо) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ": Не выбран сотрудник!", Отказ, Заголовок,,, СообщенияРазделПроверки);
				Иначе
					
					СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " по сотруднику " + ВыборкаПоРаботникам.ФизЛицоНаименование + ": ";
					
					Если Не ВыборкаПоРаботникам.ФизЛицоРаботаетВОрганизации тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- не зарегистрирован(а) как сотрудник организации " + ВыборкаПоШапкеДокумента.ОрганизацияНаименование, Отказ, Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;
					
					СтраховойНомерПФР = ВыборкаПоРаботникам.СтраховойНомерПФР;
					Если Не ЗначениеЗаполнено(СтраховойНомерПФР) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан страховой номер!", Отказ, Заголовок,,, СообщенияРазделПроверки);
					ИначеЕсли Не РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомерПФР) тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Задан неверный страховой номер!", Отказ, Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.Фамилия) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.Имя) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не заданы фамилия и имя!", Отказ ,Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;	
					
					//Контроль дубля строк
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерПовторяющейсяСтроки) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Строка №" + ВыборкаПоРаботникам.НомерПовторяющейсяСтроки + ": Сотрудник " + ВыборкаПоРаботникам.ФизЛицоНаименование + " указан в документе дважды!", Отказ, Заголовок,,, СообщенияРазделПроверки);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Отказ Или Не ПроцедурыПерсонифицированногоУчета.НаборЗаписейОСтажеСоответствуетТребованиям(Ссылка, Истина, СообщенияРазделПроверки);
	
	Если Отказ Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;	 
	
	Если СообщатьОбУспехе И Не ЕстьОшибки Тогда
		Обработка.ДобавитьСообщение("Ошибок не обнаружено.", Перечисления.ВидыСообщений.Информация, , СообщенияРазделПроверки);		
	КонецЕсли;
	
КонецПроцедуры 
	
// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Процедура Автозаполнение() Экспорт

	СписокПустыхНомеровПФР = Новый СписокЗначений;
	СписокПустыхНомеровПФР.Добавить("");
	СписокПустыхНомеровПФР.Добавить("   -   -      ");
	
	КонецОтчетногоПериода = ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Дата",					Макс(КонецОтчетногоПериода, КонецДня(Дата)));
	Запрос.УстановитьПараметр("СписокПустыхНомеровПФР",	СписокПустыхНомеровПФР);
	Запрос.УстановитьПараметр("НачалоМесяца",			ОтчетныйПериод);
	Запрос.УстановитьПараметр("КонецМесяца",			КонецОтчетногоПериода);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сотрудники.Физлицо КАК ФизЛицо,
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ДатаУвольнения,
	|	Сотрудники.ВидЗанятости
	|ПОМЕСТИТЬ ВТСотрудникиГоловнойОрганизации
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Организация = &ГоловнаяОрганизация
	|	И Сотрудники.ДатаПриемаНаРаботу <= &КонецМесяца
	|	И Сотрудники.ДатаПриемаНаРаботу <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И (Сотрудники.ДатаУвольнения >= &НачалоМесяца
	|			ИЛИ Сотрудники.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|	И НЕ Сотрудники.Физлицо.СтраховойНомерПФР В (&СписокПустыхНомеровПФР)
	|	И НЕ Сотрудники.ЯвляетсяСтудентомРаботающимВСтудотряде
	|	И &ПервоеДополнительноеУсловие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТРаботающиеВОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоМесяца,
	|			Организация = &ГоловнаяОрганизация
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						Сотрудники.Сотрудник
	|					ИЗ
	|						ВТСотрудникиГоловнойОрганизации КАК Сотрудники)) КАК РаботникиОрганизации
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &НачалоМесяца
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник.Физлицо
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизаций.Сотрудник В
	|			(ВЫБРАТЬ
	|				Сотрудники.Сотрудник
	|			ИЗ
	|				ВТСотрудникиГоловнойОрганизации КАК Сотрудники)
	|	И РаботникиОрганизаций.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизЛицо КАК ФизЛицо,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СотрудникиГоловнойОрганизации.Сотрудник ЕСТЬ НЕ NULL 
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК СотрудникУволен
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТРаботающиеВОрганизации КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиГоловнойОрганизации КАК СотрудникиГоловнойОрганизации
	|		ПО Сотрудники.ФизЛицо = СотрудникиГоловнойОрганизации.ФизЛицо
	|			И (КОНЕЦПЕРИОДА(СотрудникиГоловнойОрганизации.ДатаУвольнения, ДЕНЬ) = &КонецМесяца)
	|			И (СотрудникиГоловнойОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.ФизЛицо
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецМесяца
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоМесяца
	|	И НЕ ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо.СтраховойНомерПФР В (&СписокПустыхНомеровПФР)
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
	|	И НЕ ДоговорНаВыполнениеРаботСФизЛицом.ЗаключенСоСтудентомРаботающимВСтудотряде
	|	И ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.ВидРасчета.КодДоходаСтраховыеВзносы, ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.НеЯвляетсяОбъектом)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ПервоеДополнительноеУсловие", СтрЗаменить(ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников(), "Сотрудник.", "Сотрудники."));
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат[0].Количество = 0 Тогда
		Возврат
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	|	СписокФизлиц.ФизЛицо,
	|	СписокФизлиц.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	СписокФизлиц.ФизЛицо.ИНН КАК ИНН,
	|	СписокФизлиц.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР
	|ИЗ
	|	ВТСотрудники КАК СписокФизлиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&КонецМесяца,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						Сотрудники.ФизЛицо
	|					ИЗ
	|						ВТСотрудники КАК Сотрудники)) КАК ФИОФизЛицСрезПоследних
	|		ПО СписокФизлиц.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
	|				&КонецМесяца,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						Сотрудники.ФизЛицо
	|					ИЗ
	|						ВТСотрудники КАК Сотрудники)) КАК ГражданствоФизЛицСрезПоследних
	|		ПО СписокФизлиц.ФизЛицо = ГражданствоФизЛицСрезПоследних.ФизЛицо
	|			И (ГражданствоФизЛицСрезПоследних.ДатаРегистрацииИзменений <= &Дата)
	|ГДЕ
	|	НЕ ЕСТЬNULL(ГражданствоФизЛицСрезПоследних.ВидЗастрахованногоЛица, ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ)) В (ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыНестрахуемые), ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыИзЕАЭС), ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСтрахуемыеФСС))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицоНаименование";
	ВыборкаПоРаботникиОрганизации = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл
		СтрокаРаботника = РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРаботника, ВыборкаПоРаботникиОрганизации);
		Если "" + СтрокаРаботника.Фамилия + СтрокаРаботника.Имя + СтрокаРаботника.Отчество = ""  Тогда
			ОбщегоНазначенияЗК.ФамилияИнициалыФизЛица(ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование,СтрокаРаботника.Фамилия,СтрокаРаботника.Имя,СтрокаРаботника.Отчество);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписиОСтаже.Загрузить(ПроцедурыПерсонифицированногоУчета.СведенияОСтаже_2014(ОтчетныйПериод, Организация, РаботникиОрганизации.ВыгрузитьКолонку("ФизЛицо"), , Истина, Дата, Истина));
	
КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатьСЗВ_СТАЖ","СЗВ-СТАЖ");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ) Экспорт
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	Отказ = Ложь;
	
	//Проверка корректности заполнения документа
	ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
	
	Если Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат "";
	КонецЕсли;	 
	
	ВыборкаПоШапкеДокумента = ПроцедурыПерсонифицированногоУчета.ЗапросПоШапкеДляПечатиОДВ_1(Ссылка, Дата).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ВыборкаПоДаннымДНП = ПроцедурыПерсонифицированногоУчета.ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(Ссылка).Выбрать();
	ВыборкаПоРаботникам = ЗапросПоСотрудникамДляПечати().Выбрать();
	
	// Загружаем формат файла сведений
	МакетФормата = ПолучитьОбщийМакет("ФорматПФР_2016");
	
	ФорматОДВ_1 = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ОДВ_1_СЗВ_СТАЖ");
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения",ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.ДатаЗаполнения));
	ФорматОДВ_1.Удалить("ДатаЗаполнения");
	НаборЗаписейРуководитель = Новый Структура("Руководитель", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.Руководитель));
	ФорматОДВ_1.Удалить("Руководитель");
	ФорматОснованияДНП = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОДВ_1.ОснованияДНП.Значение);
	ФорматОДВ_1.Удалить("ОснованияДНП");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/ВС/СЗВ-СТАЖ/2017-01-01");
	Атрибуты.Вставить("xmlns:АФ", "http://пф.рф/АФ");
	Атрибуты.Вставить("xmlns:АФ2", "http://пф.рф/АФ/2016-06-21");
	Атрибуты.Вставить("xmlns:УТ", "http://пф.рф/унифицированныеТипы/2014-01-01");
	Атрибуты.Вставить("xmlns:ВС", "http://пф.рф/ВС/типы/2014-01-01");
	Атрибуты.Вставить("xmlns:РВ", "http://пф.рф/ВС/типыРВ/2014-01-01");
	Атрибуты.Вставить("xmlns:ИС", "http://пф.рф/ВС/типыИС/2017-01-01");
	
	УзелПФР = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР) Тогда
		ЧастиИмениФайла = ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ__ДатаВремя.Значение = ПроцедурыПерсонифицированногоУчета.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	НаборЗаписейСлужебнаяИнформация.АФ2__ПрограммаПодготовки.Значение = ИсправленныйСимвольныйЭлемент("1С:" + РегламентированнаяОтчетность.ИДКонфигурации()) + " " + РегламентированнаяОтчетность.РедакцияКонфигурации();
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация",""), НаборЗаписейСлужебнаяИнформация);
	
	// Данные формы и страхователя
	НаборЗаписейСтрахователь = ФорматОДВ_1.Страхователь.Значение;
	НаборЗаписейСтрахователь.ИС__Наименование = ИсправленныйСимвольныйЭлемент(ВыборкаПоШапкеДокумента.НаименованиеСокращенное);
	НаборЗаписейСтрахователь.УТ__РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейСтрахователь.УТ__ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.УТ__КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Удалить("УТ__КПП");
		СтрокаПоляКПП = ФорматОДВ_1.Страхователь.Поля.Найти("УТ__КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматОДВ_1.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	НаборЗаписейОтчетныйПериод = ФорматОДВ_1.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Код = "0";
	НаборЗаписейОтчетныйПериод.Год = ВыборкаПоШапкеДокумента.Год;
	
	ФорматОДВ_1.КоличествоЗЛ.Значение = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;	
	
	УзелФормы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "ОДВ-1", "");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, ФорматОДВ_1);
	
	Если ВыборкаПоДаннымДНП.Количество() > 0 Тогда 
		УзелСпискаОснованияДНП = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелФормы, "ОснованияДНП", "");
		ФорматОснование = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОснованияДНП.ИС__Основание.Значение);
		ФорматОснованияДНП.Удалить("ИС__Основание");
		ВсегоШтат = 0;
		ВсегоФакт = 0;
		Пока ВыборкаПоДаннымДНП.Следующий() Цикл 
			НаборЗаписейОснование = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматОснование);
			НаборЗаписейОснование.ИС__Подразделение.Значение =ИсправленныйСимвольныйЭлемент(ВыборкаПоДаннымДНП.НаименованиеПодразделения);
			НаборЗаписейОснование.ИС__ПрофессияДолжность.Значение = ИсправленныйСимвольныйЭлемент(ВыборкаПоДаннымДНП.НаименованиеДолжности);
			НаборЗаписейОснование.ИС__КоличествоШтат.Значение = ВыборкаПоДаннымДНП.КоличествоРабочихМест;
			НаборЗаписейОснование.ИС__КоличествоФакт.Значение = ВыборкаПоДаннымДНП.КоличествоРаботающих;
			НаборЗаписейОснование.ИС__Описание.Значение = ИсправленныйСимвольныйЭлемент(ВыборкаПоДаннымДНП.ХарактерВыполняемыхРабот);
			НаборЗаписейОснование.ИС__Документы.Значение = ИсправленныйСимвольныйЭлемент(ВыборкаПоДаннымДНП.ПервичныеДокументы);
			НаборЗаписейОУТ = НаборЗаписейОснование.ИС__ОУТ.Значение;
			ОписаниеПолей = НаборЗаписейОснование.ИС__ОУТ.Поля;
			Если ЗначениеЗаполнено(ВыборкаПоДаннымДНП.ОснованиеВыслугиЛетКод) Тогда
				НаборЗаписейОУТ.ИС__Код = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоДаннымДНП.ОснованиеВыслугиЛетКод));
			Иначе
				НаборЗаписейОУТ.Удалить("ИС__Код");
				СтрокаКУдалению = ОписаниеПолей.Найти("ИС__Код", "ИмяПоля");
				ОписаниеПолей.Удалить(СтрокаКУдалению);
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаПоДаннымДНП.КодПозицииСпискаКод) Тогда
				НаборЗаписейОУТ.ИС__ПозицияСписка = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоДаннымДНП.КодПозицииСпискаКод));
			Иначе
				НаборЗаписейОУТ.Удалить("ИС__ПозицияСписка");
				СтрокаКУдалению = ОписаниеПолей.Найти("ИС__ПозицияСписка", "ИмяПоля");
				ОписаниеПолей.Удалить(СтрокаКУдалению);
			КонецЕсли;
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСпискаОснованияДНП, "ИС__Основание", ""), НаборЗаписейОснование);
			ВсегоШтат = ВсегоШтат + ВыборкаПоДаннымДНП.КоличествоРабочихМест;
			ВсегоФакт = ВсегоФакт + ВыборкаПоДаннымДНП.КоличествоРаботающих;
		КонецЦикла;
		ФорматОснованияДНП.ИС__ВсегоШтат.Значение = ВсегоШтат;
		ФорматОснованияДНП.ИС__ВсегоФакт.Значение = ВсегоФакт;
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСпискаОснованияДНП, ФорматОснованияДНП);
	КонецЕсли;
	
	НаборЗаписейРуководитель.Руководитель.Значение.Должность.Значение = ИсправленныйСимвольныйЭлемент(ВыборкаПоШапкеДокумента.ДолжностьРуководителя);
	НаборЗаписейФИО = НаборЗаписейРуководитель.Руководитель.Значение.ФИО.Значение;
	НаборЗаписейФИО.УТ__Фамилия = ВРег(ВыборкаПоШапкеДокумента.ФамилияРуководителя);
	НаборЗаписейФИО.УТ__Имя = ВРег(ВыборкаПоШапкеДокумента.ИмяРуководителя);
	НаборЗаписейФИО.УТ__Отчество = ВРег(ВыборкаПоШапкеДокумента.ОтчествоРуководителя);
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейРуководитель);
	
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата, "ДФ=yyyy-MM-dd");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	ФорматСЗВ_СТАЖ = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СЗВ_СТАЖ");
	
	ФорматЗЛ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_СТАЖ.ЗЛ.Значение);
	ФорматСЗВ_СТАЖ.Удалить("ЗЛ");
	НаборЗаписейСВ = Новый Структура("СВ", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСЗВ_СТАЖ.СВ));
	ФорматСЗВ_СТАЖ.Удалить("СВ");
	
	// Данные формы и страхователя
	ЗаполнитьЗначенияСвойств(ФорматСЗВ_СТАЖ.Страхователь.Значение, ФорматОДВ_1.Страхователь.Значение);
	ЗаполнитьЗначенияСвойств(ФорматСЗВ_СТАЖ.ОтчетныйПериод.Значение, ФорматОДВ_1.ОтчетныйПериод.Значение);

	Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная Тогда
		ФорматСЗВ_СТАЖ.Тип.Значение = 0;	
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Дополняющая Тогда
		ФорматСЗВ_СТАЖ.Тип.Значение = 1;	
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии Тогда
		ФорматСЗВ_СТАЖ.Тип.Значение = 2;	
	КонецЕсли;	
	
	УзелФормы = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-СТАЖ", "");
	ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, ФорматСЗВ_СТАЖ);
	
	ФорматСтажевыйПериод = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЗЛ.СтажевыйПериод.Значение);
	ФорматЗЛ.Удалить("СтажевыйПериод");
	НаборЗаписейДатаУвольнения = Новый Структура("ДатаУвольнения", ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЗЛ.ДатаУвольнения));
	ФорматЗЛ.Удалить("ДатаУвольнения");
	
	НаборЗаписейФизическоеЛицо = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЗЛ);
	
	Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		
		// Данные по физлицу
		Фамилия = СокрЛП(ВыборкаПоРаботникам.Фамилия);
		Имя = СокрЛП(ВыборкаПоРаботникам.Имя);
		Отчество = СокрЛП(ВыборкаПоРаботникам.Отчество);
		
		НаборЗаписейЗЛ = НаборЗаписейФизическоеЛицо;
		
		НаборЗаписейЗЛ.СНИЛС.Значение = ВыборкаПоРаботникам.СтраховойНомерПФР;
		НаборЗаписейФИО = НаборЗаписейЗЛ.ФИО.Значение;
		НаборЗаписейФИО.УТ__Фамилия = ВРег(Фамилия);
		НаборЗаписейФИО.УТ__Имя = ВРег(Имя);
		НаборЗаписейФИО.УТ__Отчество = ВРег(Отчество);
		
		УзелСотрудника = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелФормы, "ЗЛ", "");
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСотрудника, НаборЗаписейЗЛ);
		
		ВписатьЗаписиОСтажеВНаборДанных(УзелСотрудника, ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматСтажевыйПериод), ВыборкаПоРаботникам);
		
		Если ЗначениеЗаполнено(ВыборкаПоРаботникам.СотрудникУволен) Тогда
			НаборЗаписейДатаУвольнения.ДатаУвольнения.Значение = Формат(Дата(ВыборкаПоШапкеДокумента.Год, 12, 31), "ДФ=yyyy-MM-dd");
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСотрудника, НаборЗаписейДатаУвольнения);
		КонецЕсли;
		
	КонецЦикла;
			
	Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии Тогда
		НаборЗаписейСВ.СВ.Значение.НачисленыНаОПС = ?(ВыборкаПоШапкеДокумента.НачисленыВзносыНаОПС, "1", "0");
		НаборЗаписейСВ.СВ.Значение.НачисленыПоДТ = ?(ВыборкаПоШапкеДокумента.НачисленыВзносыПоДТ, "1", "0");
		ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейСВ);
	КонецЕсли;
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ПроцедурыПерсонифицированногоУчета.СоздатьПотокXML(, "UTF-8");
	СправкиПоНДФЛ.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML);
	ТекстФайла = ПроцедурыПерсонифицированногоУчета.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции

Процедура ВписатьЗаписиОСтажеВНаборДанных(УзелСотрудника, ФорматСтажевыйПериод, ВыборкаПоРаботникам) Экспорт	
	
	ФорматЛьготныйСтаж = ФорматСтажевыйПериод.ИС__ЛьготныйСтаж.Значение;
	ФорматСтажевыйПериод.Удалить("ИС__ЛьготныйСтаж");
	ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПроцедурыПерсонифицированногоУчета.ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
			
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.НомерОсновнойЗаписи) Тогда
		
		Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл	
			
			УзелСтажевыйПериод = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСотрудника, "СтажевыйПериод", "");
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
			
			УзелСтажевыйПериод.Строки.Найти("ИС__Период").Строки.Найти("УТ__С").Значение = Формат(ВыборкаПоРаботникам.ДатаНачалаПериода, "ДФ=yyyy-MM-dd");
			УзелСтажевыйПериод.Строки.Найти("ИС__Период").Строки.Найти("УТ__По").Значение = Формат(ВыборкаПоРаботникам.ДатаОкончанияПериода, "ДФ=yyyy-MM-dd");
			
			НаборЗаписейЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
			
			ВыводитьЛьготныйСтаж = Ложь;
			НеВыводитьВФайлТУ = Ложь;
			НеВыводитьВФайлОУТ = Ложь;
			НеВыводитьВФайлИС = Ложь;
			НеВыводитьВФайлДопСведенияИС = Ложь;
			НеВыводитьВФайлВЛ = Ложь;
			
			// ДопСведенияИС
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
				НаборЗаписейЛьготныйСтаж.ИС__ДопСведенияИС.Значение = ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод;
				ВыводитьЛьготныйСтаж = Истина;
			Иначе
				НеВыводитьВФайлДопСведенияИС = Истина;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа)
				И ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда 
				
				НеВыводитьВФайлВЛ = Истина;
				НеВыводитьВФайлИС = Истина;
				НеВыводитьВФайлОУТ = Истина;
				НеВыводитьВФайлТУ = Истина;
				
			Иначе
				
				// Территориальные условия
				НаборЗаписейТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС__ТУ.Значение;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловияКод) Тогда
					НаборЗаписейТерриториальныеУсловия.ИС__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
					НаборЗаписейТерриториальныеУсловия.ИС__Коэффициент = ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка;
					Если ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС 
						Или ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС 
						Или ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКСМ 
						Или ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКСР Тогда
						НаборЗаписейТерриториальныеУсловия.ИС__Коэффициент = ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка;
					Иначе
						ОписаниеПолей = НаборЗаписейЛьготныйСтаж.ИС__ТУ.Поля;
						СтрокаКУдалению = ОписаниеПолей.Найти("ИС__Коэффициент", "ИмяПоля");
						ОписаниеПолей.Удалить(СтрокаКУдалению);
					КонецЕсли;
				Иначе
					НеВыводитьВФайлТУ = Истина;	
				КонецЕсли;	
				
				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ИС__Основание);
				
				// Особые условия труда
				НаборЗаписейОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС__ОУТ.Значение;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод) Тогда
					НаборЗаписейОсобыеУсловияТруда.ИС__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
					НаборЗаписейОсобыеУсловияТруда.ИС__ПозицияСписка = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
					ВыводитьЛьготныйСтаж = Истина;
				Иначе
					НеВыводитьВФайлОУТ = Истина;
				КонецЕсли;	
				
				// Исчисляемый стаж
				НаборЗаписейИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС__ИС.Значение;
				НаборЗаписейИсчисляемыйСтаж.ИС__Основание.Значение = СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод);
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) И ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
					НеВыводитьВФайлИС = Истина;
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа) Тогда		
					НеВыводитьВФайлВыработкаВЧасахИС = Ложь;
					НеВыводитьВФайлВыработкаКалендарнаяИС = Ложь;
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
						НеВыводитьВФайлВыработкаВЧасахИС = Истина;
					ИначеЕсли ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
						НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.ВС__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаВЧасах.ВС__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
						НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
					ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
						НеВыводитьВФайлВыработкаВЧасахИС = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВС__ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
					Иначе
						НеВыводитьВФайлВыработкаВЧасахИС = Истина;
						НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаВЧасахИС Тогда
						НаборЗаписейИсчисляемыйСтаж.Удалить("ВС__ВыработкаВЧасах")
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаКалендарнаяИС Тогда
						НаборЗаписейИсчисляемыйСтаж.Удалить("ВС__ВыработкаКалендарная")
					КонецЕсли;
					ВыводитьЛьготныйСтаж = Истина;
					Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Тогда
						НаборЗаписейИсчисляемыйСтаж.Удалить("ИС__Основание")
					КонецЕсли;
				Иначе
					НеВыводитьВФайлИС = Истина;		
				КонецЕсли;	

				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ИС__Основание.Значение);
				
				// Выслуга лет
				НаборЗаписейВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС__ВЛ.Значение;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод) Тогда
					НеВыводитьВФайлВыработкаВЧасахВЛ = Ложь;
					НеВыводитьВФайлВыработкаКалендарнаяВЛ = Ложь;
					НаборЗаписейВыслугаЛет.ИС__Основание.Значение = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
					НаборЗаписейВыслугаЛет.ИС__ДоляСтавки.Значение = ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет;
					Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда	
						НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
						НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
					ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет) Тогда
						НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
						НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
					ИначеЕсли ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15 Тогда
						НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВС__ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					Иначе
						НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
						НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВС__ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.ВС__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаВЧасах.ВС__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаВЧасахВЛ Тогда
						НаборЗаписейВыслугаЛет.Удалить("ВС__ВыработкаВЧасах")
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаКалендарнаяВЛ Тогда
						НаборЗаписейВыслугаЛет.Удалить("ВС__ВыработкаКалендарная")
					КонецЕсли;
					ВыводитьЛьготныйСтаж = Истина;
				Иначе
					НеВыводитьВФайлВЛ = Истина;	
				КонецЕсли;	
					
			КонецЕсли;
			
			Если ВыводитьЛьготныйСтаж Тогда
				
				Если НеВыводитьВФайлТУ Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ТУ")
				КонецЕсли;
				Если НеВыводитьВФайлОУТ Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ОУТ")
				КонецЕсли;
				Если НеВыводитьВФайлИС Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ИС")
				КонецЕсли;
				Если НеВыводитьВФайлДопСведенияИС Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ДопСведенияИС")
				КонецЕсли;
				Если НеВыводитьВФайлВЛ Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ВЛ")
				КонецЕсли;
				
				УзелЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС__ЛьготныйСтаж","");
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
			КонецЕсли;
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
				
				//В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НаборЗаписейЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматЛьготныйСтаж);
				
				// Территориальные условия
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ТерриториальныеУсловия) Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ТУ")
				Иначе
					НаборЗаписейДопТерриториальныеУсловия = НаборЗаписейЛьготныйСтаж.ИС__ТУ.Значение;
					НаборЗаписейДопТерриториальныеУсловия.ИС__Основание = СокрЛП(ВыборкаПоРаботникам.ТерриториальныеУсловияКод);
					НаборЗаписейДопТерриториальныеУсловия.ИС__Коэффициент = ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка;
					Если ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС
						Или ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС
						Или ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКСМ 
						Или ВыборкаПоРаботникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКСР Тогда
						
						НаборЗаписейДопТерриториальныеУсловия.ИС__Коэффициент = ВыборкаПоРаботникам.ТерриториальныеУсловияСтавка;
					Иначе
						ОписаниеПолей = НаборЗаписейЛьготныйСтаж.ИС__ТУ.Поля;
						СтрокаКУдалению = ОписаниеПолей.Найти("ИС__Коэффициент","ИмяПоля");
						ОписаниеПолей.Удалить(СтрокаКУдалению);
					КонецЕсли;
				КонецЕсли;
				
				// Особые условия труда
				Если Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ОсобыеУсловияТруда) И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСписка) Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ОУТ")
				Иначе
					НаборЗаписейДопОсобыеУсловияТруда = НаборЗаписейЛьготныйСтаж.ИС__ОУТ.Значение;
					НаборЗаписейДопОсобыеУсловияТруда.ИС__Код = СокрЛП(ВыборкаПоРаботникам.ОсобыеУсловияТрудаКод);
					НаборЗаписейДопОсобыеУсловияТруда.ИС__ПозицияСписка = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.КодПозицииСпискаКод));
				КонецЕсли;
				
				// Исчисляемый стаж
				НаборЗаписейДопИсчисляемыйСтаж = НаборЗаписейЛьготныйСтаж.ИС__ИС.Значение;
				НеВыводитьВФайлВыработкаВЧасахИС = Ложь;
				НеВыводитьВФайлВыработкаКалендарнаяИС = Ложь;
				Если ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ Тогда
					НаборЗаписейВыработкаВЧасах = НаборЗаписейДопИсчисляемыйСтаж.ВС__ВыработкаВЧасах.Значение;
					НаборЗаписейВыработкаВЧасах.ВС__Часы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейВыработкаВЧасах.ВС__Минуты = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
					НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
				ИначеЕсли ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа > 0 
					ИЛИ ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
					
					НаборЗаписейДопВыработкаКалендарная = НаборЗаписейДопИсчисляемыйСтаж.ВС__ВыработкаКалендарная.Значение;
					НаборЗаписейДопВыработкаКалендарная.ВС__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейДопВыработкаКалендарная.ВС__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрИсчисляемогоСтажа;
					НеВыводитьВФайлВыработкаВЧасахИС = Истина;
				Иначе
					НеВыводитьВФайлВыработкаВЧасахИС = Истина;
					НеВыводитьВФайлВыработкаКалендарнаяИС = Истина;
				КонецЕсли;
				Если НеВыводитьВФайлВыработкаВЧасахИС Тогда
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВС__ВыработкаВЧасах")
				КонецЕсли;
				Если НеВыводитьВФайлВыработкаКалендарнаяИС Тогда
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ВС__ВыработкаКалендарная")
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажа) Тогда
					НаборЗаписейДопИсчисляемыйСтаж.ИС__Основание.Значение = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.ОснованиеИсчисляемогоСтажаКод));
				ИначеЕсли НеВыводитьВФайлВыработкаВЧасахИС И НеВыводитьВФайлВыработкаКалендарнаяИС Тогда
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ИС")
				Иначе
					НаборЗаписейДопИсчисляемыйСтаж.Удалить("ИС__Основание")
				КонецЕсли;
				
				// Выслуга лет
				НаборЗаписейДопВыслугаЛет = НаборЗаписейЛьготныйСтаж.ИС__ВЛ.Значение;
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ОснованиеВыслугиЛет) Тогда
					НаборЗаписейДопВыслугаЛет.ИС__Основание.Значение = ИсправленныйСимвольныйЭлемент(СокрЛП(ВыборкаПоРаботникам.ОснованиеВыслугиЛетКод));
					НаборЗаписейДопВыслугаЛет.ИС__ДоляСтавки.Значение = ВыборкаПоРаботникам.ТретийПараметрВыслугиЛет;
					НеВыводитьВФайлВыработкаВЧасахВЛ = Ложь;
					НеВыводитьВФайлВыработкаКалендарнаяВЛ = Ложь;
					Если ВыборкаПоРаботникам.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст27_15 Тогда
						НеВыводитьВФайлВыработкаВЧасахВЛ = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейДопВыслугаЛет.ВС__ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеМесяцы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаКалендарная.ВС__ВсеДни = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					Иначе
						НеВыводитьВФайлВыработкаКалендарнаяВЛ = Истина;
						НаборЗаписейДопВыработкаВЧасах = НаборЗаписейДопВыслугаЛет.ВС__ВыработкаВЧасах.Значение;
						НаборЗаписейДопВыработкаВЧасах.ВС__Часы = ВыборкаПоРаботникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейДопВыработкаВЧасах.ВС__Минуты = ВыборкаПоРаботникам.ВторойПараметрВыслугиЛет;
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаВЧасахВЛ Тогда
						НаборЗаписейДопВыслугаЛет.Удалить("ВС__ВыработкаВЧасах")
					КонецЕсли;
					Если НеВыводитьВФайлВыработкаКалендарнаяВЛ Тогда
						НаборЗаписейДопВыслугаЛет.Удалить("ВС__ВыработкаКалендарная")
					КонецЕсли;
				Иначе
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ВЛ")
				КонецЕсли;
				
				// ДопСведенияИС
				Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
					НаборЗаписейЛьготныйСтаж.ИС__ДопСведенияИС.Значение = Строка(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажаКод);
				Иначе	
					НаборЗаписейЛьготныйСтаж.Удалить("ИС__ДопСведенияИС")
				КонецЕсли;
				
				УзелЛьготныйСтаж = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ИС__ЛьготныйСтаж", "");
				ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры	

Функция ИсправленныйСимвольныйЭлемент(СтроковоеЗначение, ИспользоватьВРег = Истина) 

	НовоеЗначение = ?(ИспользоватьВРег, ВРег(СтроковоеЗначение), СтроковоеЗначение); // традиционно в файле строки передаются в верхнем регистре
	// правило ВС.ОИС2017.1.2: Лидирующие пробелы в символьных элементах, за исключением элементов блока ФИО, не допускаются
    НовоеЗначение = СокрЛП(НовоеЗначение);
	// правило ВС.ОИС2017.1.3: Если в символьном элементе, за исключением элементов блока ФИО, использован символ '-', то рядом с этим символом пробелы недопустимы
	Пока Найти(НовоеЗначение," -") > 0 Или Найти(НовоеЗначение,"- ") > 0 Цикл
		НовоеЗначение = СтрЗаменить(НовоеЗначение," -","-");
	    НовоеЗначение = СтрЗаменить(НовоеЗначение,"- ","-");
	КонецЦикла;
	// правило ВС.ОИС2017.1.4: Наличие двух и более пробелов подряд внутри символьных элементов, за исключением элементов блока ФИО, не допускается (только один)
	Пока Найти(НовоеЗначение,"  ") > 0 Цикл
		НовоеЗначение = СтрЗаменить(НовоеЗначение,"  "," ");
	КонецЦикла;
	
	Возврат НовоеЗначение
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////

Функция ЗапросПоШапкеДляПечати()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивСсылок", Ссылка);
	Запрос.УстановитьПараметр("Руководитель",	Руководитель);
	Запрос.УстановитьПараметр("ДатаФИО",		Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ФизическиеЛица.Наименование
	|		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество
	|	КОНЕЦ КАК ФИОРуководителя
	|ПОМЕСТИТЬ ВТФИОРуководителя
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаФИО, ФизЛицо = &Руководитель) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &Руководитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка КАК Ссылка,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.НаименованиеСокращенное КАК НаименованиеОрганизации,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.ИНН КАК ИНН,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.КПП КАК КПП,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.ЮрФизЛицо КАК ЮридическоеФизическоеЛицо,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Год,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ТипСведенийСЗВ КАК ТипСведений,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Руководитель КАК Руководитель,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителя,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Дата,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.НаименованиеПолное КАК НаименованиеПолное,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.НачисленыВзносыНаОПС,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.НачисленыВзносыПоДТ
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
	|ГДЕ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	ДанныеДокументов.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.ЮридическоеФизическоеЛицо,
	|	ДанныеДокументов.ИНН КАК ИНН,
	|	ДанныеДокументов.КПП КАК КПП,
	|	ДанныеДокументов.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеДокументов.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ДанныеДокументов.Год КАК Год,
	|	ДанныеДокументов.ТипСведений КАК ТипСведений,
	|	ЕСТЬNULL(ВТФИОПоследние.ФИОРуководителя, """") КАК Руководитель,
	|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокументов.Дата,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии)
	|			ТОГДА ДанныеДокументов.НачисленыВзносыНаОПС
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачисленыВзносыНаОПС,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии)
	|			ТОГДА ДанныеДокументов.НачисленыВзносыПоДТ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НачисленыВзносыПоДТ,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии)
	|			ТОГДА НЕ ДанныеДокументов.НачисленыВзносыНаОПС
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеНачисленыВзносыНаОПС,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии)
	|			ТОГДА НЕ ДанныеДокументов.НачисленыВзносыПоДТ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеНачисленыВзносыПоДТ
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИОРуководителя КАК ВТФИОПоследние
	|		ПО (ИСТИНА)";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоСотрудникамДляПечати()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивСсылок", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.НомерСтроки КАК НомерСтроки,
	|	Сотрудники.ФизЛицо КАК Сотрудник,
	|	Сотрудники.СтраховойНомерПФР,
	|	Сотрудники.Фамилия,
	|	Сотрудники.Имя,
	|	Сотрудники.Отчество,
	|	Сотрудники.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Сотрудники.СотрудникУволен
	|			ТОГДА ""Х""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СотрудникУволен
	|ПОМЕСТИТЬ ВТСотрудникиДокумента
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.РаботникиОрганизации КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.Ссылка.Год < 2009
	|			ТОГДА ЗаписиОСтаже.ОсобыеУсловияТруда.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОсобыеУсловияТруда.КодДляОтчетности2010
	|	КОНЕЦ КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.Ссылка.Год < 2009
	|			ТОГДА ЗаписиОСтаже.ОснованиеВыслугиЛет.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОснованиеВыслугиЛет.КодДляОтчетности2010
	|	КОНЕЦ КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	СотрудникиДокумента.НомерСтроки КАК НомерСтроки,
	|	СотрудникиДокумента.Сотрудник,
	|	СотрудникиДокумента.СтраховойНомерПФР,
	|	СотрудникиДокумента.Фамилия,
	|	СотрудникиДокумента.Имя,
	|	СотрудникиДокумента.Отчество,
	|	СотрудникиДокумента.СотрудникУволен,
	|	СотрудникиДокумента.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.НомерОсновнойЗаписи ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаполненСтаж
	|ИЗ
	|	ВТСотрудникиДокумента КАК СотрудникиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.ФизЛицо
	|			И СотрудникиДокумента.Ссылка = ЗаписиОСтаже.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ВывестиОбласть(ВыводимаяОбласть, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы)
	
	ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыводимаяОбласть);
	Если ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТекущийЛист, ВыводимыеОбласти, Ложь) Тогда 
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	Иначе 
		ДокументРезультат.Вывести(ТекущийЛист);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ТекущийЛист = НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы);
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	КонецЕсли;	
	
КонецПроцедуры 

Функция НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы)
	
	ТекущийЛист = Новый ТабличныйДокумент;
	ТекущийЛист.ПолеСлева = 0;
	ТекущийЛист.ПолеСправа = 0;
	ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
	
	ОбластьКолонтитул1 = Макет.ПолучитьОбласть("R2C1:R2C24");
	ОбластьКолонтитул2 = Макет.ПолучитьОбласть("R3C1:R4C27");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
	РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьКолонтитул1, "НомРег", 12);
	
	НомерСтраницы = НомерСтраницы + 1;
	НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 5);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьКолонтитул1, "НомСтр", 5);
	
	ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ИНН, ОбластьКолонтитул2, "ИНН", 12);
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьКолонтитул2, "КПП", 9);
	
	ТекущийЛист.Вывести(ОбластьКолонтитул1);
	ТекущийЛист.Вывести(ОбластьКолонтитул2);
	ТекущийЛист.Вывести(ОбластьПустаяСтрока);
	
	Возврат ТекущийЛист;
	
КонецФункции

Процедура ЗаполнитьОбластьСтаж(ВыборкаЗаписейСтажа, ОбластьСтаж)
	
	ОбластьСтаж.Параметры.ДатаНачалаПериода = Формат(ВыборкаЗаписейСтажа.ДатаНачалаПериода, "ДФ=""дд.ММ.гггг""");
	ОбластьСтаж.Параметры.ДатаОкончанияПериода = Формат(ВыборкаЗаписейСтажа.ДатаОкончанияПериода, "ДФ=""дд.ММ.гггг""");
	
	ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод;
	ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ВыборкаЗаписейСтажа.ОсобыеУсловияТрудаКод;
	ОбластьСтаж.Параметры.ОснованиеИсчисляемогоСтажаКод = ВыборкаЗаписейСтажа.ОснованиеИсчисляемогоСтажаКод;
	ОбластьСтаж.Параметры.ОснованиеВыслугиЛетКод = ВыборкаЗаписейСтажа.ОснованиеВыслугиЛетКод;
	ОбластьСтаж.Параметры.ДопИТС = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ВыборкаЗаписейСтажа);
	
	ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ВыборкаЗаписейСтажа, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
	
КонецПроцедуры

Процедура ЗаполнитьДвустрочнуюОбластьСтаж(ВыборкаЗаписейСтажа, ОбластьСтаж)
	
	ОбластьСтаж.Параметры.ДатаНачалаПериода = Формат(ВыборкаЗаписейСтажа.ДатаНачалаПериода, "ДФ=""дд.ММ.гггг""");
	ОбластьСтаж.Параметры.ДатаОкончанияПериода = Формат(ВыборкаЗаписейСтажа.ДатаОкончанияПериода, "ДФ=""дд.ММ.гггг""");
	
	ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод;
	ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ВыборкаЗаписейСтажа.ОсобыеУсловияТрудаКод;
	ОбластьСтаж.Параметры.КодПозицииСпискаКод = ВыборкаЗаписейСтажа.КодПозицииСпискаКод;
	ОбластьСтаж.Параметры.ОснованиеИсчисляемогоСтажаКод = ВыборкаЗаписейСтажа.ОснованиеИсчисляемогоСтажаКод;
	ОбластьСтаж.Параметры.ОснованиеВыслугиЛетКод = ВыборкаЗаписейСтажа.ОснованиеВыслугиЛетКод;
	ОбластьСтаж.Параметры.ДопИТС = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ВыборкаЗаписейСтажа);
	ЗаписьТУ = Новый Структура("ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа");
	ЗаполнитьЗначенияСвойств(ЗаписьТУ, ВыборкаЗаписейСтажа);
	ЗаписьТУ.Вставить("Коэффициент", ВыборкаЗаписейСтажа.ТерриториальныеУсловияСтавка);
	ОбластьСтаж.Параметры.ДопТУ = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровТерриториальныхУсловий(ЗаписьТУ);
	
	ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ВыборкаЗаписейСтажа, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
	
КонецПроцедуры

Процедура ОчиститьОбласть(ОбластьМакета)
	
	Для Счетчик = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		ОбластьМакета.Параметры[Счетчик] = ""
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Функция СформироватьЗапросПоШапкеДокументов()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.НомерСтроки) КАК Количество,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.Ссылка
	|ПОМЕСТИТЬ ВТИтоги
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.РаботникиОрганизации КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации
	|ГДЕ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.Ссылка В(&ДокументСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка,
	|	Документы.Номер,
	|	Документы.Дата,
	|	Документы.Проведен,
	|	Документы.Организация,
	|	Документы.Год,
	|	Документы.ТипСведенийСЗВ,
	|	Документы.ПринятоВПФР,
	|	Документы.Ответственный,
	|	ЗНАЧЕНИЕ(Перечисление.ФорматФайлаПФР.Версия07) КАК ФорматФайла,
	|	Документы.Организация.Наименование,
	|	Документы.Организация.ЮрФизЛицо,
	|	Документы.Организация.НаименованиеОКОПФ,
	|	Документы.Организация.НаименованиеПолное,
	|	Документы.Организация.НаименованиеСокращенное,
	|	Документы.Организация.РегистрационныйНомерПФР,
	|	Документы.Организация.ИНН,
	|	Документы.Организация.КПП,
	|	ВЫБОР
	|		КОГДА Документы.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Документы.Организация
	|		ИНАЧЕ Документы.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	Документы.Организация.КодПоОКПО КАК ОКПО,
	|	ЕСТЬNULL(Итоги.Количество, 0) КАК Количество,
	|	Документы.ИмяФайла
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК Итоги
	|		ПО Документы.Ссылка = Итоги.Ссылка
	|ГДЕ
	|	Документы.Ссылка В(&ДокументСсылка)";
	
	Возврат Запрос.Выполнить();

КонецФункции 

Функция СформироватьЗапросПоРаботникам()
	
	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	 Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.Ссылка КАК Ссылка,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.СтраховойНомерПФР,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.Фамилия,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.Имя,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.Отчество,
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.СотрудникУволен,
	|	ВЫБОР
	|		КОГДА СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.Ссылка.Организация
	|		ИНАЧЕ СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.Ссылка.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТЗастрахованныеЛица
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.РаботникиОрганизации КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации
	|ГДЕ
	|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖРаботникиОрганизации.Ссылка В(&ДокументСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрг.Ссылка
	|ПОМЕСТИТЬ ВТЗарегистрированныеСотрудниками
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ТЧРаботникиОрг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ПО ТЧРаботникиОрг.ФизЛицо = СотрудникиОрганизаций.Физлицо
	|			И ТЧРаботникиОрг.ГоловнаяОрганизация = СотрудникиОрганизаций.Организация
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка ЕСТЬ НЕ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВтораяТаблица.НомерСтроки) КАК НомерПовторяющейсяСтроки,
	|	ПерваяТаблица.Ссылка КАК Ссылка,
	|	ПерваяТаблица.ФизЛицо,
	|	ПерваяТаблица.НомерСтроки КАК НомерСтроки,
	|	ПерваяТаблица.СтраховойНомерПФР,
	|	ПерваяТаблица.Фамилия,
	|	ПерваяТаблица.Имя,
	|	ПерваяТаблица.Отчество,
	|	ПерваяТаблица.СотрудникУволен,
	|	ПерваяТаблица.ФизЛицо.Наименование,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеСотрудниками.НомерСтроки ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
	|ИЗ
	|	ВТЗастрахованныеЛица КАК ПерваяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированныеСотрудниками КАК ЗарегистрированныеСотрудниками
	|		ПО ПерваяТаблица.НомерСтроки = ЗарегистрированныеСотрудниками.НомерСтроки
	|			И ПерваяТаблица.Ссылка = ЗарегистрированныеСотрудниками.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗастрахованныеЛица КАК ВтораяТаблица
	|		ПО ПерваяТаблица.ФизЛицо = ВтораяТаблица.ФизЛицо
	|			И ПерваяТаблица.НомерСтроки < ВтораяТаблица.НомерСтроки
	|			И ПерваяТаблица.Ссылка = ВтораяТаблица.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПерваяТаблица.Ссылка,
	|	ПерваяТаблица.ФизЛицо,
	|	ПерваяТаблица.НомерСтроки,
	|	ПерваяТаблица.СтраховойНомерПФР,
	|	ПерваяТаблица.Фамилия,
	|	ПерваяТаблица.Имя,
	|	ПерваяТаблица.Отчество,
	|	ПерваяТаблица.ФизЛицо.Наименование,
	|	ПерваяТаблица.СотрудникУволен,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеСотрудниками.НомерСтроки ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица)
	
	СтрокиДоговоров = ЗаписиФизлица.НайтиСтроки(СтруктураПоискаДоговоров);
	Для каждого СтрокаТЗ Из СтрокиДоговоров Цикл
		ЗаполнитьЗначенияСвойств(ВременнаяТаблицаФизлица.Добавить(),СтрокаТЗ);
		ЗаписиФизлица.Удалить(СтрокаТЗ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьНумерациюЗаписейОСтаже(СообщатьОПроблемах) Экспорт
	
	Отказ = Ложь;
	Если СообщатьОПроблемах Тогда
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ФизЛицо");
	СтруктураПоискаДоговоров = Новый Структура("ФизЛицо,ТретийПараметрИсчисляемогоСтажа");
	ВременнаяТаблица = ЗаписиОСтаже.ВыгрузитьКолонки();
	ВременнаяТаблицаФизлица = ЗаписиОСтаже.ВыгрузитьКолонки();
	
	ТЗЗаписиОСтаже = ЗаписиОСтаже.Выгрузить();
	ТЗЗаписиОСтаже.Сортировать("ФизЛицо, НомерСтроки");
	
	Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
		
		СтруктураПоиска.ФизЛицо = СтрокаТЧ.ФизЛицо;
		СтруктураПоискаДоговоров.ФизЛицо = СтрокаТЧ.ФизЛицо;
		
		ВременнаяТаблицаФизлица.Очистить();
		
		ЗаписиФизлица = ТЗЗаписиОСтаже.Скопировать(ТЗЗаписиОСтаже.НайтиСтроки(СтруктураПоиска));
		
		СтруктураПоискаДоговоров.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.ДОГОВОР;
		ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица);
		СтруктураПоискаДоговоров.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.НЕОПЛАВТ;
		ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица);
		СтруктураПоискаДоговоров.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа2014.НЕОПЛДОГ;
		ВыделитьСтрокиДоговоров(СтруктураПоискаДоговоров, ЗаписиФизлица, ВременнаяТаблицаФизлица);
		
		ВременнаяТаблицаФизлица.Сортировать("ДатаНачалаПериода");
		ОбщегоНазначенияЗК.ЗагрузитьВТаблицуЗначений(ЗаписиФизлица, ВременнаяТаблицаФизлица);
		
		//Нумерация записей стажа 
		НомерОсновнойЗаписи = 0; 
		НомерСтроки = 0;
		Для Каждого СтрокаСтажа Из ВременнаяТаблицаФизлица цикл
			
			НомерСтроки = НомерСтроки + 1;
			ТекстОшибкиСНомеромСтроки = "В строке стажа " + НомерСтроки + ": ";
			
			//Контролируем смену основной записи
			Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) И ЗначениеЗаполнено(СтрокаСтажа.ДатаОкончанияПериода) тогда
				//Встретили основную запись
				НомерОсновнойЗаписи = НомерОсновнойЗаписи + 1; 
				НомерДополнительнойЗаписи = 0;
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) И Не ЗначениеЗаполнено(СтрокаСтажа.ДатаОкончанияПериода) тогда	
				Если НомерОсновнойЗаписи <> 0 Тогда
					НомерДополнительнойЗаписи = НомерДополнительнойЗаписи + 1; 
				ИначеЕсли СообщатьОПроблемах Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указаны даты начала и окончания периода!", Отказ);
				КонецЕсли;
			ИначеЕсли СообщатьОПроблемах Тогда
				Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указана дата окончания периода!", Отказ);
				Иначе
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ТекстОшибкиСНомеромСтроки + "не указана начала окончания периода!", Отказ);
				КонецЕсли;
			КонецЕсли;	
			
			СтрокаСтажа.НомерОсновнойЗаписи = НомерОсновнойЗаписи;
			СтрокаСтажа.НомерДополнительнойЗаписи = НомерДополнительнойЗаписи;
			
		КонецЦикла;	
		
		ОбщегоНазначенияЗК.ЗагрузитьВТаблицуЗначений(ВременнаяТаблицаФизлица, ВременнаяТаблица);
		
	КонецЦикла;
	
	ВременнаяТаблица.Сортировать("ФизЛицо, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
	ЗаписиОСтаже.Загрузить(ВременнаяТаблица);
	
	Если СообщатьОПроблемах И Отказ Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
КонецПроцедуры	 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)

	Если Проведен И ПринятоВПФР Тогда
		Возврат
	КонецЕсли;
	
	Для Каждого Набор Из Движения Цикл
		Набор.Очистить();
	КонецЦикла;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	ПроверитьПравильностьЗаполненияДокумента(Отказ, Ложь);
	
	Если Отказ тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	ТекстФайла = СформироватьВыходнойФайл(Отказ);
	
	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл формы СЗВ-СТАЖ";
	Запись.Данные = ТекстФайла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетныйПериод = Дата(Год, 1, 1);
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
	Соответствие = Новый Соответствие;
	Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
		Соответствие.Вставить(СтрокаТЧ.ФизЛицо, Истина)
	КонецЦикла;
	
	ВсегоСтрок = ЗаписиОСтаже.Количество();
	Для Сч = 1 По ВсегоСтрок Цикл
		СтрокаТЧ = ЗаписиОСтаже[ВсегоСтрок - Сч];
		Если Соответствие[СтрокаТЧ.ФизЛицо] = Неопределено Тогда
			ЗаписиОСтаже.Удалить(СтрокаТЧ)
		КонецЕсли;
	КонецЦикла;
	ВыполнитьНумерациюЗаписейОСтаже(РежимЗаписи = РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Отказ = ПринятоВПФР;
	
	Если Не Отказ Тогда
		Для Каждого Набор Из Движения Цикл
			Набор.Очистить();
			Набор.Записать();
		КонецЦикла
	КонецЕсли;
	
КонецПроцедуры // ОбработкаУдаленияПроведения()

