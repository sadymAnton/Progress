////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// предназначена для заполнения табличной части 
// Параметры:
//	Основание - передается объект-основание
// Возвращаемое значение: нет
//
Процедура ЗаполнитьПоОснованию(Основание) Экспорт
	
	ИсполнительныйЛист = Основание;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ИзменениеУсловийИсполнительногоЛиста.ДатаИзменения), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаИзменения
	|ИЗ
	|	Документ.ИзменениеУсловийИсполнительногоЛиста КАК ИзменениеУсловийИсполнительногоЛиста
	|ГДЕ
	|	ИзменениеУсловийИсполнительногоЛиста.ИсполнительныйЛист = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование",Основание);
	Выборка = Запрос.Выполнить().Выбрать();
	ДатаПоследнегоИзменения = '00010101';
	Если Выборка.Следующий() Тогда
		ДатаПоследнегоИзменения = Выборка.ДатаИзменения
	КонецЕсли;
	
	СтрокаРеквизитов = "";
	Если Физлицо.Пустая() Тогда
		СтрокаРеквизитов = СтрокаРеквизитов + "Физлицо,"; 
	КонецЕсли;
	Если Организация.Пустая() Тогда
		СтрокаРеквизитов = СтрокаРеквизитов + "Организация,"; 
	КонецЕсли;
	Если Действие.Пустая() Тогда 
		ДатаИзменения = Макс(ДатаПоследнегоИзменения + 86400, ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
		Действие = Перечисления.ВидыДействияСНачислением.Изменить;
	ИначеЕсли ДатаИзменения = '00010101' Тогда
		ДатаИзменения = Макс(ДатаПоследнегоИзменения + 86400, Дата)
	КонецЕсли;
	
	Если Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
		ЗаполняемыеРеквизиты = "ДатаОкончания, СпособРасчетаУдержания, Размер, Предел, ПрожиточныйМинимум, ПроцентПочтовогоСбора, Тариф, СпособПеречисленияПоИсполнительномуЛисту, ТарифБанкаНаДенежныеПереводы, ПочтовыйСборРассчитыватьПроцентом";
	Иначе
		СтруктураПустыхДанных = Новый Структура("ДатаОкончания, Размер, Предел, ПрожиточныйМинимум, ПроцентПочтовогоСбора, Тариф, ТарифБанкаНаДенежныеПереводы, ПочтовыйСборРассчитыватьПроцентом");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПустыхДанных);
		ЗаполняемыеРеквизиты = "СпособРасчетаУдержания, СпособПеречисленияПоИсполнительномуЛисту";
	КонецЕсли;
	СтрокаРеквизитов = СтрокаРеквизитов + ЗаполняемыеРеквизиты;
	
	Если Не ПустаяСтрока(СтрокаРеквизитов) Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(Основание, СтрокаРеквизитов));
	КонецЕсли;
	
КонецПроцедуры  // ЗаполнитьПоОснованию

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ИЛВПрожиточныхМинимумах", ОбщегоНазначенияЗК.ОсобыйЭлемент(ПланыВидовРасчета.УдержанияОрганизаций, "ИЛВПрожиточныхМинимумах"));
	Запрос.УстановитьПараметр("БанковскиеИздержкиПоИЛ", ОбщегоНазначенияЗК.ОсобыйЭлемент(ПланыВидовРасчета.УдержанияОрганизаций, "БанковскиеИздержкиПоИЛ"));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзменениеУсловийИсполнительногоЛиста.Дата,
	|	ИзменениеУсловийИсполнительногоЛиста.Организация,
	|	ВЫБОР
	|		КОГДА ИзменениеУсловийИсполнительногоЛиста.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ИзменениеУсловийИсполнительногоЛиста.Организация
	|		ИНАЧЕ ИзменениеУсловийИсполнительногоЛиста.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ИзменениеУсловийИсполнительногоЛиста.Физлицо,
	|	ИзменениеУсловийИсполнительногоЛиста.ИсполнительныйЛист.Получатель КАК Получатель,
	|	ИзменениеУсловийИсполнительногоЛиста.ДатаИзменения КАК ДатаДействия,
	|	ИзменениеУсловийИсполнительногоЛиста.ДатаОкончания,
	|	ИзменениеУсловийИсполнительногоЛиста.Размер,
	|	ИзменениеУсловийИсполнительногоЛиста.Предел,
	|	ИзменениеУсловийИсполнительногоЛиста.СпособРасчетаУдержания,
	|	ИзменениеУсловийИсполнительногоЛиста.ИсполнительныйЛист,
	|	ИзменениеУсловийИсполнительногоЛиста.Ссылка,
	|	ИзменениеУсловийИсполнительногоЛиста.ПроцентПочтовогоСбора,
	|	ИзменениеУсловийИсполнительногоЛиста.СпособПеречисленияПоИсполнительномуЛисту,
	|	ИзменениеУсловийИсполнительногоЛиста.ТарифБанкаНаДенежныеПереводы,
	|	ИзменениеУсловийИсполнительногоЛиста.ПочтовыйСборРассчитыватьПроцентом,
	|	ИзменениеУсловийИсполнительногоЛиста.Тариф,
	|	ИзменениеУсловийИсполнительногоЛиста.ПрожиточныйМинимум,
	|	ИзменениеУсловийИсполнительногоЛиста.Действие,
	|	ВЫБОР
	|		КОГДА ИзменениеУсловийИсполнительногоЛиста.СпособРасчетаУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанийПоИЛ.ПроцентомОтЗаработкаСУчетомБольничныхЛистов)
	|				И ИзменениеУсловийИсполнительногоЛиста.Предел = 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ИЛПроцентом)
	|		КОГДА ИзменениеУсловийИсполнительногоЛиста.СпособРасчетаУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанийПоИЛ.ПроцентомОтЗаработкаСУчетомБольничныхЛистов)
	|				И ИзменениеУсловийИсполнительногоЛиста.Предел > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПредела)
	|		КОГДА ИзменениеУсловийИсполнительногоЛиста.СпособРасчетаУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанийПоИЛ.ПроцентомОтЗаработка)
	|				И ИзменениеУсловийИсполнительногоЛиста.Предел = 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ИЛПроцентомБезБЛ)
	|		КОГДА ИзменениеУсловийИсполнительногоЛиста.СпособРасчетаУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанийПоИЛ.ПроцентомОтЗаработка)
	|				И ИзменениеУсловийИсполнительногоЛиста.Предел > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПределаБезБЛ)
	|		КОГДА ИзменениеУсловийИсполнительногоЛиста.СпособРасчетаУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанийПоИЛ.ФиксированнойСуммой)
	|				И ИзменениеУсловийИсполнительногоЛиста.Предел = 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой)
	|		КОГДА ИзменениеУсловийИсполнительногоЛиста.СпособРасчетаУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанийПоИЛ.ФиксированнойСуммой)
	|				И ИзменениеУсловийИсполнительногоЛиста.Предел > 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммойДоПредела)
	|		КОГДА ИзменениеУсловийИсполнительногоЛиста.СпособРасчетаУдержания = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаУдержанийПоИЛ.КратноВеличинеПрожиточногоМинимума)
	|			ТОГДА &ИЛВПрожиточныхМинимумах
	|	КОНЕЦ КАК ВидРасчетаУдержания,
	|	ВЫБОР
	|		КОГДА ИзменениеУсловийИсполнительногоЛиста.СпособПеречисленияПоИсполнительномуЛисту = ЗНАЧЕНИЕ(Перечисление.СпособыПеречисленийПоИсполнительномуЛисту.БанковскийПеревод)
	|			ТОГДА &БанковскиеИздержкиПоИЛ
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовРасчета.УдержанияОрганизаций.ПочтовыйСборПоИЛ)
	|	КОНЕЦ КАК ВидРасчетаИздержек,
	|	ВЫБОР
	|		КОГДА ИзменениеУсловийИсполнительногоЛиста.СпособПеречисленияПоИсполнительномуЛисту = ЗНАЧЕНИЕ(Перечисление.СпособыПеречисленийПоИсполнительномуЛисту.ПочтовыйПеревод)
	|				И ИзменениеУсловийИсполнительногоЛиста.ПочтовыйСборРассчитыватьПроцентом
	|			ТОГДА ИзменениеУсловийИсполнительногоЛиста.ПроцентПочтовогоСбора
	|		КОГДА ИзменениеУсловийИсполнительногоЛиста.СпособПеречисленияПоИсполнительномуЛисту = ЗНАЧЕНИЕ(Перечисление.СпособыПеречисленийПоИсполнительномуЛисту.ПочтовыйПеревод)
	|				И (НЕ ИзменениеУсловийИсполнительногоЛиста.ПочтовыйСборРассчитыватьПроцентом)
	|			ТОГДА ИзменениеУсловийИсполнительногоЛиста.Тариф
	|		КОГДА ИзменениеУсловийИсполнительногоЛиста.СпособПеречисленияПоИсполнительномуЛисту = ЗНАЧЕНИЕ(Перечисление.СпособыПеречисленийПоИсполнительномуЛисту.БанковскийПеревод)
	|			ТОГДА ИзменениеУсловийИсполнительногоЛиста.ТарифБанкаНаДенежныеПереводы
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПорядокИсчисленияИздержек,
	|	ИзменениеУсловийИсполнительногоЛиста.ИсполнительныйЛист.ДатаДействия КАК ДатаНачалаУдержания,
	|	ИзменениеУсловийИсполнительногоЛиста.ИсполнительныйЛист.ДатаОкончания КАК ДатаОкончанияУдержания,
	|	ИзменениеУсловийИсполнительногоЛиста.ИсполнительныйЛист.Проведен
	|ИЗ
	|	Документ.ИзменениеУсловийИсполнительногоЛиста КАК ИзменениеУсловийИсполнительногоЛиста
	|ГДЕ
	|	ИзменениеУсловийИсполнительногоЛиста.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Физлицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИсполнительныйЛист) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан изменяемый Исполнительный лист!", Отказ, Заголовок);
	ИначеЕсли Не ВыборкаПоШапкеДокумента.ИсполнительныйЛистПроведен Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Изменять можно только проведенные документы Исполнительный лист!", Отказ, Заголовок);
	ИначеЕсли ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаДействия) Тогда
		Если ВыборкаПоШапкеДокумента.ДатаДействия < ВыборкаПоШапкеДокумента.ДатаНачалаУдержания Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Дата изменения условий удержания должна быть позже даты начала удержаний!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаДействия) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указана дата изменения условий удержания!", Отказ, Заголовок);
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Возврат
	КонецЕсли;
	
	Если ВыборкаПоШапкеДокумента.Предел < 0 Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Размер общего удержания не может быть отрицательным!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.СпособРасчетаУдержания) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан способ расчета сумм удержания!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоШапкеДокумента.СпособРасчетаУдержания = Перечисления.СпособыРасчетаУдержанийПоИЛ.КратноВеличинеПрожиточногоМинимума И Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ПрожиточныйМинимум) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан прожиточный минимум для расчета сумм удержания!", Отказ, Заголовок);
	КонецЕсли;
	
	//Проверка почтового сбора
	Если ВыборкаПоШапкеДокумента.СпособПеречисленияПоИсполнительномуЛисту = Перечисления.СпособыПеречисленийПоИсполнительномуЛисту.ПочтовыйПеревод Тогда
		Если ВыборкаПоШапкеДокумента.ПочтовыйСборРассчитыватьПроцентом И ВыборкаПоШапкеДокумента.ПроцентПочтовогоСбора = 0 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не задан процент почтового сбора!"), Отказ, Заголовок);
		КонецЕсли;
		Если НЕ ВыборкаПоШапкеДокумента.ПочтовыйСборРассчитыватьПроцентом И НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Тариф) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не задан тариф почтового сбора!"), Отказ, Заголовок);
		КонецЕсли;
	ИначеЕсли ВыборкаПоШапкеДокумента.СпособПеречисленияПоИсполнительномуЛисту = Перечисления.СпособыПеречисленийПоИсполнительномуЛисту.БанковскийПеревод Тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ТарифБанкаНаДенежныеПереводы) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не задан тариф банка на денежные переводы!"), Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//	ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//
// Возвращаемое значение:
//	Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента)
	
	// Движения регистра ПлановыеУдержанияРаботниковОрганизаций
	
	ВводимыеУдержания = Новый Массив;
	Если ВыборкаПоШапкеДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		ВводимыеУдержания.Добавить(ВыборкаПоШапкеДокумента.ВидРасчетаУдержания);
		Если ВыборкаПоШапкеДокумента.СпособПеречисленияПоИсполнительномуЛисту <> Перечисления.СпособыПеречисленийПоИсполнительномуЛисту.ЧерезКассуПлатежнымПоручением Тогда
			ВводимыеУдержания.Добавить(ВыборкаПоШапкеДокумента.ВидРасчетаИздержек);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеУдержанияРаботниковОрганизаций.Организация,
	|	ПлановыеУдержанияРаботниковОрганизаций.ФизЛицо,
	|	ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета,
	|	ПлановыеУдержанияРаботниковОрганизаций.ДокументОснование,
	|	ПлановыеУдержанияРаботниковОрганизаций.Получатель,
	|	ПлановыеУдержанияРаботниковОрганизаций.ПорядокИсчисленияИздержек,
	|	ПлановыеУдержанияРаботниковОрганизаций.ПрожиточныйМинимум
	|ИЗ
	|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержанияРаботниковОрганизаций
	|ГДЕ
	|	ПлановыеУдержанияРаботниковОрганизаций.Регистратор = &Регистратор
	|	И (НЕ ПлановыеУдержанияРаботниковОрганизаций.ВидРасчета В (&ВводимыеУдержания))";
	Запрос.УстановитьПараметр("ВводимыеУдержания", ВводимыеУдержания);
	Запрос.УстановитьПараметр("Регистратор", ВыборкаПоШапкеДокумента.ИсполнительныйЛист);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Движение = Движения.ПлановыеУдержанияРаботниковОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(Движение,Выборка);
		Движение.Период	= ВыборкаПоШапкеДокумента.ДатаДействия;
		Движение.Действие = Перечисления.ВидыДействияСНачислением.Прекратить;
	КонецЦикла;
	
	// Новые данные об удержании
	Если ВыборкаПоШапкеДокумента.Действие <> Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		
		Движение = Движения.ПлановыеУдержанияРаботниковОрганизаций.Добавить();
		// свойства
		Движение.Период					= ВыборкаПоШапкеДокумента.ДатаДействия;
		
		// измерения
		Движение.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
		Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
		Движение.ВидРасчета				= ВыборкаПоШапкеДокумента.ВидРасчетаУдержания;
		Движение.ДокументОснование		= ВыборкаПоШапкеДокумента.ИсполнительныйЛист;
		
		// ресурсы
		Движение.Действие				= Перечисления.ВидыДействияСНачислением.Изменить;
		Движение.Показатель1			= ВыборкаПоШапкеДокумента.Размер;
		
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
			Движение.ПериодЗавершения	= ВыборкаПоШапкеДокумента.ДатаОкончания + 86400;
			Движение.ДействиеЗавершения	= Перечисления.ВидыДействияСНачислением.Прекратить;
			// не заполняются
			//Показатель1Завершения
		КонецЕсли;
		
		// реквизиты
		Движение.Получатель				= ВыборкаПоШапкеДокумента.Получатель;
		Если ВыборкаПоШапкеДокумента.СпособРасчетаУдержания = Перечисления.СпособыРасчетаУдержанийПоИЛ.КратноВеличинеПрожиточногоМинимума Тогда 
			Движение.ПрожиточныйМинимум = ВыборкаПоШапкеДокумента.ПрожиточныйМинимум;
		КонецЕсли;
		Если ВыборкаПоШапкеДокумента.СпособПеречисленияПоИсполнительномуЛисту <> Перечисления.СпособыПеречисленийПоИсполнительномуЛисту.ЧерезКассуПлатежнымПоручением Тогда
			Движение.ПорядокИсчисленияИздержек	= ВыборкаПоШапкеДокумента.ПорядокИсчисленияИздержек;
		КонецЕсли;
		
		// строка издержек
		Если ВыборкаПоШапкеДокумента.СпособПеречисленияПоИсполнительномуЛисту <> Перечисления.СпособыПеречисленийПоИсполнительномуЛисту.ЧерезКассуПлатежнымПоручением Тогда
			
			Движение = Движения.ПлановыеУдержанияРаботниковОрганизаций.Добавить();
			// свойства
			Движение.Период					= ВыборкаПоШапкеДокумента.ДатаДействия;
			
			// измерения
			Движение.Организация			= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ВидРасчета				= ВыборкаПоШапкеДокумента.ВидРасчетаИздержек;
			Движение.ФизЛицо				= ВыборкаПоШапкеДокумента.ФизЛицо;
			Движение.ДокументОснование		= ВыборкаПоШапкеДокумента.ИсполнительныйЛист;
			
			// ресурсы
			Движение.Действие				= Перечисления.ВидыДействияСНачислением.Изменить;
			Если ВыборкаПоШапкеДокумента.СпособПеречисленияПоИсполнительномуЛисту = Перечисления.СпособыПеречисленийПоИсполнительномуЛисту.ПочтовыйПеревод И ВыборкаПоШапкеДокумента.ПочтовыйСборРассчитыватьПроцентом Тогда
				Движение.Показатель1			= ВыборкаПоШапкеДокумента.ПроцентПочтовогоСбора;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДатаОкончания) Тогда
				Движение.ПериодЗавершения	= ВыборкаПоШапкеДокумента.ДатаОкончания + 86400;
				Движение.ДействиеЗавершения	= Перечисления.ВидыДействияСНачислением.Прекратить;
				// не заполняются
				//Показатель1Завершения
			КонецЕсли;
			
			// реквизиты
			Движение.Получатель				= ВыборкаПоШапкеДокумента.Получатель;
			Движение.ПорядокИсчисленияИздержек	= ВыборкаПоШапкеДокумента.ПорядокИсчисленияИздержек;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИсполнительныйЛист") Тогда
		ЗаполнитьПоОснованию(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособРасчетаУдержания = Перечисления.СпособыРасчетаУдержанийПоИЛ.КратноВеличинеПрожиточногоМинимума Тогда
		Предел = 0
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Если документ перенесен - движения не делаем
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	РезультатЗапросаПоШапке = СформироватьЗапросПоШапке(Режим);

	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = РезультатЗапросаПоШапке.Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			Если НЕ Отказ Тогда
				// Заполним записи в наборах записей регистров
				ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента);
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

