Перем мУдалятьДвижения;

// Строки, хранят реквизиты имеющие смысл только для бух. учета и упр. соответственно
// в случае если документ не отражается в каком-то виде учета, делаются невидимыми
Перем мСтрокаРеквизитыБухУчета Экспорт; // (Регл)
Перем мСтрокаРеквизитыУпрУчета Экспорт; // (Упр)
Перем мСтрокаРеквизитыНалУчета Экспорт; // (Регл)

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мВалютаУправленческогоУчета     Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирование печатной формы
//
Функция ПечатьВводОстатков()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДокВводОстатков.Организация,
		|	ПРЕДСТАВЛЕНИЕ(ДокВводОстатков.Организация) КАК ПечОрганизация,
		|	ДокВводОстатков.Подразделение КАК Подразделение,
		|	ПРЕДСТАВЛЕНИЕ(ДокВводОстатков.Подразделение) КАК ПечПодразделение,
		|	ДокВводОстатков.Ссылка КАК Док,
		|	ПРЕДСТАВЛЕНИЕ(ДокВводОстатков.Ссылка) КАК ПечДок,
		|	ДокВводОстатков.Материалы.(
		|		НомерСтроки КАК НомерСтроки,
		|		ЕдиницаИзмерения КАК ЕдИзм,
		|		ПРЕДСТАВЛЕНИЕ(ДокВводОстатков.Материалы.ЕдиницаИзмерения) КАК ПечЕдИзм,
		|		ДокументПартии КАК ДокПередачи,
		|		ДатаПередачиВЭксплуатацию КАК ДатаПередачи,
		|		ПРЕДСТАВЛЕНИЕ(ДокВводОстатков.Материалы.ДокументПартии) КАК ПечДокПередачи,
		|		Номенклатура КАК Материал,
		|		Номенклатура.Код КАК Код,
		|		Номенклатура.Артикул КАК Артикул,
		|		ПРЕДСТАВЛЕНИЕ(ДокВводОстатков.Материалы.Номенклатура) КАК ПечМатериал,
		|		ПогашеннаяВременнаяРазница,
		|		ПогашеннаяПостояннаяРазница,
		|		ПогашеннаяСтоимость,
		|		ПогашеннаяСтоимостьРегл,
		|		ВременнаяРазница,
		|		ПостояннаяРазница,
		|		Количество,
		|		Стоимость,
		|		СтоимостьРегл,
		|		ФизЛицо КАК Работник,
		|		ПРЕДСТАВЛЕНИЕ(ДокВводОстатков.Материалы.ФизЛицо) КАК ПечРаботник,
		|		СерияНоменклатуры
		|	)
		|ИЗ
		|	Документ.ВводНачальныхОстатковМатериаловВЭксплуатации КАК ДокВводОстатков
		|ГДЕ
		|	ДокВводОстатков.Ссылка = &ТекДок
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр( "ТекДок",   Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Шапка = РезультатЗапроса.Выбрать();
	Шапка.Следующий();
	
	// Вывод заголовка
	ТабДок  = Новый ТабличныйДокумент;
	Макет   = ПолучитьМакет("ВводОстатков");
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовок = ОбщегоНазначения.СформироватьЗаголовокДокумента( Ссылка);
	
	Область.Параметры.Организация      = Шапка.Организация;
	Область.Параметры.ПечОрганизация   = Шапка.ПечОрганизация;
	Область.Параметры.Подразделение    = Шапка.Подразделение;
	Область.Параметры.ПечПодразделение = Шапка.ПечПодразделение;
	
	ТабДок.Вывести(Область);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	КолАртикул = ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул, "Артикул",
				 ?( ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код,     "Код", ""));
	ФлагВыводКода = НЕ ПустаяСтрока(КолАртикул);
	Суффикс = ?(ФлагВыводКода, "СКодом", "");
	Область = Макет.ПолучитьОбласть("ТабШапка" + Суффикс);
	Если ФлагВыводКода Тогда
		Область.Параметры.ИмяАртикул = КолАртикул;
	КонецЕсли;
	
	ТабДок.Вывести(Область);
	
	Область  = Макет.ПолучитьОбласть("Строка" + Суффикс);
	ТабЧасть = Шапка.Материалы.Выбрать();
	Пока ТабЧасть.Следующий() Цикл
		
		Если ФлагВыводКода Тогда
			Область.Параметры.Артикул = ТабЧасть[КолАртикул];
		КонецЕсли;
		
		Область.Параметры.ПечНомер    = ТабЧасть.НомерСтроки;
		Область.Параметры.Материал    = ТабЧасть.Материал;
		Область.Параметры.ПечМатериал = ТабЧасть.ПечМатериал;
		
		Область.Параметры.Колво    = ТабЧасть.Количество;
		Область.Параметры.ПечЕдИзм = ТабЧасть.ПечЕдИзм;
		Область.Параметры.ЕдИзм    = ТабЧасть.ЕдИзм;
		
		Область.Параметры.Работник            = ТабЧасть.Работник;
		Область.Параметры.ПечРаботник         = ТабЧасть.ПечРаботник;
		
		Область.Параметры.ДатаПередачи        = ТабЧасть.ДатаПередачи;
		Область.Параметры.ДокПередачи         = ТабЧасть.ДокПередачи;
		Область.Параметры.ПечДокПередачи      = ТабЧасть.ПечДокПередачи;
		
		Область.Параметры.Стоимость           = ТабЧасть.Стоимость;
		Область.Параметры.ПогашеннаяСтоимость = ТабЧасть.ПогашеннаяСтоимость;
		
		Область.Параметры.СтоимостьРегл               = ТабЧасть.СтоимостьРегл;
		Область.Параметры.ПогашеннаяСтоимостьРегл     = ТабЧасть.ПогашеннаяСтоимостьРегл;
		
		Область.Параметры.ВременнаяРазница            = ТабЧасть.ВременнаяРазница;
		Область.Параметры.ПогашеннаяВременнаяРазница  = ТабЧасть.ПогашеннаяВременнаяРазница;
		
		Область.Параметры.ПостояннаяРазница           = ТабЧасть.ПостояннаяРазница;
		Область.Параметры.ПогашеннаяПостояннаяРазница = ТабЧасть.ПогашеннаяПостояннаяРазница;
		
		ТабДок.Вывести(Область);
		
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ТабНиз");
	ТабДок.Вывести(Область);
	
	//Область = Макет.ПолучитьОбласть("Подвал");
	//Область.Параметры.СтрокаИтог = "Всего наименований: " + ТабЧасть.Количество();
	//ТабДок.Вывести( Область);
	
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабДок;
	
КонецФункции // ПечатьВводОстатков()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
		
	ИначеЕсли ИмяМакета = "ВводОстатков" Тогда
		
		ТабДокумент = ПечатьВводОстатков();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Ссылка), Ссылка);
	
КонецПроцедуры // Печать()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечФорм = Новый Структура;
	СтруктПечФорм.Вставить( "ВводОстатков", "Ввод начальных остатков материалов в эксплуатации");
	
	Возврат СтруктПечФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для определенного вида учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета() Экспорт
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл();
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для упр. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()
	
	мСтрокаРеквизитыУпрУчета = "Подразделение, НадписьПодразделение, Материалы.Стоимость, Материалы.ПогашеннаяСтоимость";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаУпр()

// Процедура заполняет структуры именами реквизитов, которые имеют смысл
// только для регл. учета
//
Процедура ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()
	
	мСтрокаРеквизитыБухУчета = "ПодразделениеОрганизации, НадписьПодразделениеОрганизации,
							   |Материалы.СтоимостьРегл, Материалы.ПогашеннаяСтоимостьРегл";
	
	мСтрокаРеквизитыНалУчета = "Материалы.ВременнаяРазница, Материалы.ПостояннаяРазница,
							   |Материалы.ПогашеннаяВременнаяРазница, Материалы.ПогашеннаяПостояннаяРазница";
	
КонецПроцедуры // ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчетаРегл()

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Функция проверяет правильность заполнения документа
// Возврат - структура с данными шапки документа
//
Процедура ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	РеквизитыШапки = "Организация, Подразделение, ПодразделениеОрганизации";
	РеквизитыТЧ = "Номенклатура, Количество, ЕдиницаИзмерения, ФизЛицо, НазначениеИспользования, ДатаПередачиВЭксплуатацию, ДокументПартии";
	
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыШапки, СтруктураШапкиДокумента, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	УправлениеЗатратами.НепроверятьРеквизитыПоТипуУчета(ЭтотОбъект, РеквизитыТЧ, 	СтруктураШапкиДокумента,  мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, "Материалы");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, Новый Структура(РеквизитыШапки), Отказ, Заголовок);
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Материалы", Новый Структура(РеквизитыТЧ), Отказ, Заголовок);
	
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
	
КонецПроцедуры // ПроверкаРеквизитов()

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл(СтруктураПолей)
	
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПолей.Вставить( "СчетУчетаБУ", "СчетУчетаБУ");
	СтруктураПолей.Вставить( "СчетУчетаНУ", "СчетУчетаНУ");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ДОКУМЕНТА

// Процедура формирования движений документа
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоМатериалам)
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		
		ДвиженияПоРегистрамУпр (СтруктураШапкиДокумента, ТаблицаПоМатериалам);
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		ДвиженияПоРегистрамРегл( СтруктураШапкиДокумента, ТаблицаПоМатериалам);
		ФормироватьПроводкиБух ( СтруктураШапкиДокумента, ТаблицаПоМатериалам);
		ФормироватьПроводкиНал ( СтруктураШапкиДокумента, ТаблицаПоМатериалам);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура формирования движений документа упр.
//
Процедура ДвиженияПоРегистрамУпр(СтруктураШапкиДокумента, ТаблицаПоМатериалам)
	
	Если НЕ УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) Тогда
	
		НаборДвижений = Движения.ПартииМатериаловВЭксплуатации;
		ТабПартии = НаборДвижений.Выгрузить();
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений( ТаблицаПоМатериалам, ТабПартии);
		ТабПартии.ЗаполнитьЗначения( СтруктураШапкиДокумента.Подразделение, "Подразделение");
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТабПартии;
		НаборДвижений.ВыполнитьПриход();
		
	КонецЕсли;	
		
	НаборДвиженийМат = Движения.МатериалыВЭксплуатации;
	ТабПартииМат = НаборДвиженийМат.Выгрузить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений( ТаблицаПоМатериалам, ТабПартииМат);
	ТабПартииМат.ЗаполнитьЗначения( СтруктураШапкиДокумента.Подразделение, "Подразделение");
	ТабПартииМат.ЗаполнитьЗначения( Перечисления.КодыОперацийМатериалыВЭксплуатации.СписаниеПартийВЭксплуатацию, "КодОперации");
	
	НаборДвиженийМат.мПериод = Дата;
	НаборДвиженийМат.мТаблицаДвижений = ТабПартииМат;
	НаборДвиженийМат.ВыполнитьПриход();
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Процедура формирования движений документа регл.
//
Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, ТаблицаПоМатериалам)
	
	Если НЕ УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) Тогда
		
		НаборДвижений = Движения.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет;
		ТаблицаДвиженийПартииБухгалтерскийУчет = НаборДвижений.Выгрузить();
		
		ТаблицаПоМатериаламРегл = ТаблицаПоМатериалам.Скопировать();
		
		ТаблицаПоМатериаламРегл.Колонки["СчетУчетаБУ"            ].Имя = "СчетУчета";
		ТаблицаПоМатериаламРегл.Колонки["Стоимость"              ].Имя = "_Стоимость";
		ТаблицаПоМатериаламРегл.Колонки["СтоимостьРегл"          ].Имя = "Стоимость";
		ТаблицаПоМатериаламРегл.Колонки["ПогашеннаяСтоимость"    ].Имя = "_ПогашеннаяСтоимость";
		ТаблицаПоМатериаламРегл.Колонки["ПогашеннаяСтоимостьРегл"].Имя = "ПогашеннаяСтоимость";
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериаламРегл, ТаблицаДвиженийПартииБухгалтерскийУчет);
		
		ТаблицаПоМатериаламРегл.Колонки["СчетУчета"              ].Имя = "СчетУчетаБУ";
		
		ТаблицаДвиженийПартииБухгалтерскийУчет.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
		ТаблицаДвиженийПартииБухгалтерскийУчет.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "Подразделение");
		
		НаборДвижений.мПериод = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийПартииБухгалтерскийУчет;
		НаборДвижений.ВыполнитьПриход();
		
		ТаблицаПоМатериаламРегл.Колонки["Стоимость"].Имя = "СтоимостьРегл";
		ТаблицаПоМатериаламРегл.Колонки["ПогашеннаяСтоимость"].Имя = "ПогашеннаяСтоимостьРегл";
		
		ТаблицаПоМатериаламРегл.Колонки["ПогашеннаяПостояннаяРазница"].Имя = "ПогашеннаяСтоимостьПР";
		ТаблицаПоМатериаламРегл.Колонки["ПогашеннаяВременнаяРазница" ].Имя = "ПогашеннаяСтоимостьВР";
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			НаборДвиженийНал = Движения.ПартииМатериаловВЭксплуатацииНалоговыйУчет;
			ТаблицаДвиженийПартииНалоговыйУчет = НаборДвиженийНал.Выгрузить();
			
			ТаблицаПоМатериаламРегл.Колонки["СчетУчетаНУ"].Имя = "СчетУчета";
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоМатериаламРегл, ТаблицаДвиженийПартииНалоговыйУчет);
			ТаблицаПоМатериаламРегл.Колонки["СчетУчета"  ].Имя = "СчетУчетаНУ";
			
			ТаблицаДвиженийПартииНалоговыйУчет.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");
			ТаблицаДвиженийПартииНалоговыйУчет.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеОрганизации, "Подразделение");
			
			НаборДвиженийНал.мПериод = Дата;
			НаборДвиженийНал.мТаблицаДвижений = ТаблицаДвиженийПартииНалоговыйУчет;
			НаборДвиженийНал.ВыполнитьПриход();
		
		КонецЕсли;

	КонецЕсли;	
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура формирования проводок по бух.учету
//
Процедура ФормироватьПроводкиБух( СтруктураШапкиДокумента, ТаблицаПоМатериалам)
	
	Операция = Движения.Хозрасчетный;
	
	Для Каждого СтрокаДок Из ТаблицаПоМатериалам Цикл
		
		Если СтрокаДок.СчетУчетаБУ <> ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности Тогда
		
			Сумма = СтрокаДок.СтоимостьРегл - СтрокаДок.ПогашеннаяСтоимостьРегл;
			
			Проводка = Операция.Добавить();
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Регистратор = Ссылка;
			Проводка.Период      = Дата;
				
			Проводка.СчетДт = СтрокаДок.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаДок.Номенклатура);
				
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
				
			Проводка.Содержание = "Ввод остатков";
				
			Проводка.КоличествоДт = СтрокаДок.Количество;
			Проводка.Сумма        = Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ФормироватьПроводкиБух()

// Процедура формирования проводок по нал.учету
//
Процедура ФормироватьПроводкиНал( СтруктураШапкиДокумента, ТаблицаПоМатериалам)
	
	Операция = Движения.Налоговый;
	
	Для Каждого СтрокаДок Из ТаблицаПоМатериалам Цикл
		
		Если СтрокаДок.СчетУчетаНУ <> ПланыСчетов.Налоговый.ИнвентарьИХозяйственныеПринадлежности Тогда
		
			Сумма = СтрокаДок.ПостояннаяРазница - СтрокаДок.ПогашеннаяПостояннаяРазница;
			Если Сумма > 0 Тогда
				
				Проводка = Операция.Добавить();
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Регистратор = Ссылка;
				Проводка.Период      = Дата;
				
				Проводка.СчетДт = СтрокаДок.СчетУчетаНУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаДок.Номенклатура);
				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ПР;
				
				Проводка.Сумма  = Сумма;
				Проводка.Содержание = "Ввод остатков";
				
			КонецЕсли;
			
			Сумма = СтрокаДок.ВременнаяРазница - СтрокаДок.ПогашеннаяВременнаяРазница;
			Если Сумма > 0 Тогда
				
				Проводка = Операция.Добавить();
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Регистратор = Ссылка;
				Проводка.Период      = Дата;
				
				Проводка.СчетДт = СтрокаДок.СчетУчетаНУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаДок.Номенклатура);
				Проводка.ВидУчетаДт   = Перечисления.ВидыУчетаПоПБУ18.ВР;
				
				Проводка.Сумма  = Сумма;
				Проводка.Содержание = "Ввод остатков";
				
			КонецЕсли;
			
			Если СтрокаДок.Количество > 0 Тогда
				
				Проводка = Операция.Добавить();
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Регистратор = Ссылка;
				Проводка.Период      = Дата;
				
				Проводка.СчетДт = СтрокаДок.СчетУчетаНУ;
				БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаДок.Номенклатура);
				Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
				
				Проводка.КоличествоДт = СтрокаДок.Количество;
				Проводка.Содержание = "Ввод остатков";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ФормироватьПроводкиНал()

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события ОбработкаПроведения
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;

	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	СтруктураШапкиДокумента   = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента   = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим таблицу материалов для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить( "Номенклатура", "Номенклатура");
	СтруктураПолей.Вставить( "Услуга",       "Номенклатура.Услуга");
	СтруктураПолей.Вставить( "Набор",        "Номенклатура.Набор");
	СтруктураПолей.Вставить( "Количество",   "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	
	СтруктураПолей.Вставить( "ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить( "СерияНоменклатуры",          "СерияНоменклатуры");
	
	СтруктураПолей.Вставить( "ФизЛицо",                 "ФизЛицо");
	СтруктураПолей.Вставить( "НазначениеИспользования", "НазначениеИспользования");
	СтруктураПолей.Вставить( "СпособПогашенияСтоимости", "НазначениеИспользования.СпособПогашенияСтоимости");
	СтруктураПолей.Вставить( "ДокументПередачи",        "ДокументПартии");
	
	СтруктураПолей.Вставить( "Стоимость",                   "Стоимость");
	СтруктураПолей.Вставить( "СтоимостьРегл",               "СтоимостьРегл");
	СтруктураПолей.Вставить( "ВременнаяРазница",            "ВременнаяРазница");
	СтруктураПолей.Вставить( "ПостояннаяРазница",           "ПостояннаяРазница");
	СтруктураПолей.Вставить( "ПогашеннаяСтоимость",         "ПогашеннаяСтоимость");
	СтруктураПолей.Вставить( "ПогашеннаяСтоимостьРегл",     "ПогашеннаяСтоимостьРегл");
	СтруктураПолей.Вставить( "ПогашеннаяВременнаяРазница",  "ПогашеннаяВременнаяРазница");
	СтруктураПолей.Вставить( "ПогашеннаяПостояннаяРазница", "ПогашеннаяПостояннаяРазница");
	
	ДополнитьСтруктуруПолейТабличнойЧастиМатериалыРегл(СтруктураПолей);
	
	РезультатЗапросаПоМатериалам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Материалы", СтруктураПолей);
	ТаблицаПоМатериалам = РезультатЗапросаПоМатериалам.Выгрузить();
	
	//Заполнение и проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Материалы", ТаблицаПоМатериалам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоМатериалам);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоМатериалам", ТаблицаПоМатериалам));
	
КонецПроцедуры	// ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");

