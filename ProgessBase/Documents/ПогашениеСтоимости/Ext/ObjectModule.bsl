Перем мУдалятьДвижения;

Перем мПорядокСписанияПартий;

Перем мУчетнаяПолитика Экспорт;
Перем мУчетнаяПолитикаРегл Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа по рег учету.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если (НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) И (НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле Организация", Отказ,Заголовок);
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ПериодРегистрации");

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок, Истина);

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеШапкиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ТаблицаОшибок = УправлениеЗатратами.СформироватьТаблицуОшибок();
	
	ПроцедурыПогашенияСтоимости.ПогашениеСтоимостиМатериаловВЭксплуатации(
		СтруктураШапкиДокумента,
		ТаблицаОшибок
	);
	ПроцедурыПогашенияСтоимости.СформироватьДвиженияПоМатериаламВЭксплуатации(
		СтруктураШапкиДокумента,
		ТаблицаОшибок
	);
	УправлениеЗатратами.ВывестиСообщенияОбОшибках(
		СтруктураШапкиДокумента,
		ТаблицаОшибок,
		Заголовок
	);

КонецПроцедуры // ДвиженияПоРегистрам()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		мУчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация,истина);
	    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	Отказ - Булево - Признак отказа от проведения документа
//	Заголовок - Строка - Текст представления документа 
//
Процедура ПодготовитьСтруктуруШапкиДокумента(
	СтруктураШапкиДокумента, 
	Отказ, 
	Заголовок
	)
	
	СтруктураШапкиДокумента.Вставить("Дата", КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации));
	
	НачГраница = Новый Граница(НачалоМесяца(СтруктураШапкиДокумента.ПериодРегистрации), ВидГраницы.Включая);
	КонГраница = Новый Граница(КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации), ВидГраницы.Включая);
	
	СтруктураШапкиДокумента.Вставить("НачДата", НачалоМесяца(СтруктураШапкиДокумента.ПериодРегистрации));
	СтруктураШапкиДокумента.Вставить("КонДата", КонецМесяца(СтруктураШапкиДокумента.ПериодРегистрации));
	СтруктураШапкиДокумента.Вставить("НачГраница", НачГраница);
	СтруктураШапкиДокумента.Вставить("КонГраница", КонГраница);
	
	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете
	   И ЗначениеЗаполнено(мУчетнаяПолитика)
	Тогда
		СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗ", мУчетнаяПолитика.СпособОценкиМПЗ);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
	   И ЗначениеЗаполнено(мУчетнаяПолитикаРегл)
	Тогда
		СтруктураШапкиДокумента.Вставить("СпособОценкиМПЗБух", мУчетнаяПолитикаРегл.СпособОценкиМПЗ);
	КонецЕсли;
	
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СуффиксыИмениРегистра = Новый Соответствие;
	СуффиксыИмениРегистра.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете, "");
	СуффиксыИмениРегистра.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете, "БухгалтерскийУчет");
	СуффиксыИмениРегистра.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете, "НалоговыйУчет");
	СтруктураШапкиДокумента.Вставить("СуффиксыИмениРегистра", СуффиксыИмениРегистра);
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.ПериодРегистрации);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);
	
	СоответствиеВидУчета = Новый Соответствие;
	СоответствиеВидУчета.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете, "ОтражатьВУправленческомУчете");
	Если СтруктураШапкиДокумента.ИспользоватьРасширеннуюАналитику Тогда
		СоответствиеВидУчета.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете, "ОтражатьВБухгалтерскомУчете");
	Иначе
		СоответствиеВидУчета.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
		СоответствиеВидУчета.Вставить(Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете, "ОтражатьВНалоговомУчете");
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("СоответствиеВидУчета", СоответствиеВидУчета);
	
	ПоддержкаПБУ18 = Ложь;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
		И ЗначениеЗаполнено(мУчетнаяПолитикаРегл) Тогда
		
		ПоддержкаПБУ18 = мУчетнаяПолитикаРегл.ПоддержкаПБУ18;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ПоддержкаПБУ18", ПоддержкаПБУ18);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ)

	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ПериодРегистрации", КонецМесяца(ПериодРегистрации));
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ПодготовитьСтруктуруШапкиДокумента(
		СтруктураШапкиДокумента, 
		Отказ, 
		Заголовок
	);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");


