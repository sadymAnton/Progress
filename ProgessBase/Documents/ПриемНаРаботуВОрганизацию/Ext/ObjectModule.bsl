////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем СоответствиеВалютныеСпособыРасчета;
Перем ОбработкаКомментариев;

// Механизм исправлений
Перем мВосстанавливатьДвижения;
Перем мСоответствиеДвижений;
Перем мИсправляемыйДокумент;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Т1_от_5_1_2004" Тогда
		ТабДокумент = ПечатьТ1(ИмяМакета);
		
	ИначеЕсли ИмяМакета = "Т1а_от_5_1_2004" тогда
		ТабДокумент = ПечатьТ1а(ИмяМакета);
		
	Иначе
		ТабДокумент = ПриемНаРаботуВОрганизациюПереопределяемый.ПечатьДополнительныхФорм(ИмяМакета, ЭтотОбъект);
		
	КонецЕсли;

	Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,"Прием на работу в организацию "),,ТабДокумент);

КонецФункции // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураПечатныхФорм = Новый Структура;
	СтруктураПечатныхФорм.Вставить("Т1а_от_5_1_2004",	"Форма Т-1а");
	СтруктураПечатныхФорм.Вставить("Т1_от_5_1_2004",	"Форма Т-1");
	
	ПриемНаРаботуВОрганизациюПереопределяемый.ДополнитьСтруктуруПечатныхФорм(СтруктураПечатныхФорм, ЭтотОбъект);
	
	Возврат СтруктураПечатныхФорм;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Заполняет табличную часть документа "Работники" списком по оформленным трудовым договорам
//
Процедура ЗаполнитьТабличнуюЧастьРаботникиСотрудниками(ДатаНачалаПериода, ДатаОкончанияПериода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НеУказанаДатаНачалаПериода", Не ЗначениеЗаполнено(ДатаНачалаПериода));
	Запрос.УстановитьПараметр("НеУказанаДатаОкончанияПериода", Не ЗначениеЗаполнено(ДатаОкончанияПериода));
	Запрос.УстановитьПараметр("ДатаНачалаПериода",		ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода",	ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Ссылка",					Ссылка);
	Запрос.УстановитьПараметр("ВидыТрудовыхДоговоров",	ПриемНаРаботуВОрганизациюПереопределяемый.ВидыТрудовыхДоговоров());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	СотрудникиОрганизаций.Должность,
	|	СотрудникиОрганизаций.ПодразделениеОрганизации,
	|	СотрудникиОрганизаций.ЗанимаемыхСтавок,
	|	СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
	|	СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
	|	ИСТИНА КАК НапомнитьПоЗавершении,
	|	СотрудникиОрганизаций.ИспытательныйСрок,
	|	СотрудникиОрганизаций.ГрафикРаботы,
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Измайлова Полина 27.12.2011 17:30 
	|	СотрудникиОрганизаций.AVTШтатноеРасписание,
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
	|	СотрудникиОрганизаций.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизаций.Сотрудник
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА СотрудникиОрганизаций.Организация
	|			ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|	И СотрудникиОрганизаций.ВидДоговора В (&ВидыТрудовыхДоговоров)
	|	И (РаботникиОрганизаций.Сотрудник ЕСТЬ NULL 
	|			ИЛИ РаботникиОрганизаций.Регистратор = &Ссылка)
	|	И (&НеУказанаДатаНачалаПериода
	|			ИЛИ СотрудникиОрганизаций.ДатаНачала >= &ДатаНачалаПериода)
	|	И (&НеУказанаДатаОкончанияПериода
	|			ИЛИ СотрудникиОрганизаций.ДатаНачала <= &ДатаОкончанияПериода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	ВременнаяТЗ = Запрос.Выполнить().Выгрузить();
	
	РаботникиОрганизации.Загрузить(ВременнаяТЗ);
	ОсновныеНачисления.Загрузить(ЗаполнениеДокументовЗК.ПолучитьТаблицуДействийСНачислениями(ВременнаяТЗ, Ссылка, Дата, Организация, "ДатаПриема", , Истина, Ложь));
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьРаботникиПоТрудовымДоговорам()

Процедура ДобавитьНачисленияПоСтроке(СтрокаТабличнойЧасти) Экспорт
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрокаТабличнойЧасти);
	
	ДействияСНачислениями = ЗаполнениеДокументовЗК.ПолучитьТаблицуДействийСНачислениями(РаботникиОрганизации.Выгрузить(МассивСтрок), Ссылка, Дата, Организация, "ДатаПриема", , Истина, Ложь);

	СтруктураПоиска = Новый Структура("Сотрудник, ВидРасчета");
	СтруктураПоиска.Вставить("Сторно",	Ложь);
	
	Для Каждого СтрокаТаблицы Из ДействияСНачислениями Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивНачислений = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНачислений.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ОсновныеНачисления.Добавить(), СтрокаТаблицы);
		
	КонецЦикла;
	
	ПриемНаРаботуВОрганизациюПереопределяемый.ДобавитьДополнительноПоСтроке(ЭтотОбъект, СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДобавитьНачисленияПоСтроке()

Процедура ДобавитьСтрокиНачисленийПоРаботнику(Сотрудник, ДатаАктуальности = Неопределено) Экспорт
	
	СтрокаТабличнойЧасти = РаботникиОрганизации.Найти(Сотрудник, "Сотрудник");

	ДобавитьНачисленияПоСтроке(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ДобавитьСтрокиНачисленийПоРаботнику()

// Заполняет документ по перерассчитываемому документу
// ИсходныйДокумент - тип ДокументОбъект.ПриемНаРаботуВОрганизацию
//
Процедура ЗаполнитьПоПерерассчитываемомуДокументу(ИсходныйДокумент, Сотрудники = Неопределено) Экспорт
	
	ПроведениеРасчетов.ЗаполнитьИсправлениеПоКадровомуДокументу(ЭтотОбъект, ИсходныйДокумент.Ссылка, Сотрудники);
	
КонецПроцедуры // ЗаполнитьПоПерерассчитываемомуДокументу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Формирует запрос по документу
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросДляПечати(Режим)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
	Запрос.УстановитьПараметр("РеглВалюта",		Константы.ВалютаРегламентированногоУчета.Получить());

	Если Режим = "ПоРеквизитамДокумента" Тогда

		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница",Организация);
		
		Запрос.Текст = ФормированиеПечатныхФормЗК.ПолучитьТекстЗапросаПоОтветственнымЛицам(
			"ДатаДокумента",
			"ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
			|И СтруктурнаяЕдиница = &СтруктурнаяЕдиница");
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботуВОрганизацию.Номер КАК НомерДок,
		|	ПриемНаРаботуВОрганизацию.Дата КАК ДатаДок,
		|	ПриемНаРаботуВОрганизацию.Организация.КодПоОКПО КАК КодПоОКПО,
		|	ПриемНаРаботуВОрганизацию.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	ОтветственныеЛицаОрганизаций.Должность КАК ДолжностьРуководителя,
		|	ОтветственныеЛицаОрганизаций.НаименованиеОтветственногоЛица КАК ФИОРуководителя,
		|	ПриемНаРаботуВОрганизацию.Организация.Префикс
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОбОтветственномЛице КАК ОтветственныеЛицаОрганизаций
		|		ПО ПриемНаРаботуВОрганизацию.Организация = ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница
		|ГДЕ
		|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	ИначеЕсли Режим = "ПоТабличнойЧастиДокумента" Тогда
		
		Запрос.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная);
		СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая);
		Запрос.УстановитьПараметр("ТарифнаяСтавкаОклад", СписокПоказателей);
				///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 25.08.2011 09:43 
		// ОПИСАНИЕ: добавленое поле AVTШтатноеРасписание и соединение по этому полю с надбавками,
		// соединение по подразделению и долджности закомментировано
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}  
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.НомерСтроки,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ФизЛицо,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель2,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта2,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель3,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта3,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель4,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта4,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель5,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта5,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель6,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта6,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд2,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд3,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд4,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд5,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд6,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Сторно
		|ПОМЕСТИТЬ ВТСтрокиНачислений
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|ГДЕ
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка = &ДокументСсылка
		|	И НЕ ПриемНаРаботуВОрганизациюОсновныеНачисления.Сторно
		|	И ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриемНаРаботуВОрганизациюРаботники.НомерСтроки КАК НомерСтроки,
		|	ПриемНаРаботуВОрганизациюРаботники.Сотрудник КАК Сотрудник,
		|	ПриемНаРаботуВОрганизациюРаботники.ФизЛицо.Пол КАК ФизЛицоПол,
		|	ПриемНаРаботуВОрганизациюРаботники.ДатаПриема КАК ДатаПриема,
		|	ПриемНаРаботуВОрганизациюРаботники.ДатаУвольнения КАК ДатаУвольнения,
		|	ПриемНаРаботуВОрганизациюРаботники.ИспытательныйСрок КАК ИспытательныйСрок,
		|	ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ПриемНаРаботуВОрганизациюРаботники.Должность КАК Должность,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ТребуетВводаТарифногоРазряда КАК ТребуетВводаТарифногоРазряда,
		|	ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1 КАК ТарифныйРазряд,
		|	ВЫБОР
		|		КОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ПроизвольнаяФормулаРасчета
		|			ТОГДА ВЫБОР
		|					КОГДА Показатели.Показатель1 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель1.ТарифнаяСтавка
		|						ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1
		|					КОГДА Показатели.Показатель2 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель2.ТарифнаяСтавка
		|						ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель2
		|					КОГДА Показатели.Показатель3 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель3.ТарифнаяСтавка
		|						ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель3
		|					КОГДА Показатели.Показатель4 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель4.ТарифнаяСтавка
		|						ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель4
		|					КОГДА Показатели.Показатель5 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель5.ТарифнаяСтавка
		|						ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель5
		|					КОГДА Показатели.Показатель6 В (&ТарифнаяСтавкаОклад)
		|							ИЛИ Показатели.Показатель6.ТарифнаяСтавка
		|						ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель6
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ПриемНаРаботуВОрганизациюОсновныеНачисления.Показатель1
		|	КОНЕЦ КАК ОкладТарифнаяСтавка,
		|	РазмерТарифныхСтавокСрезПоследних.Размер КАК РазмерТарифныйРазряд,
		|	РазмерТарифныхСтавокСрезПоследних.Валюта КАК ВалютаТарифныйРазряд,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""руб.""
		|		ИНАЧЕ ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1.Наименование
		|	КОНЕЦ КАК ВалютаТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""коп.""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КопейкиТарифнойСтавки,
		|	ВЫБОР
		|		КОГДА ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ВидЗанятости = &ОсновноеМестоРаботы
		|			ТОГДА """"
		|		ИНАЧЕ ""По совместительству ""
		|	КОНЕЦ КАК НачалоУсловияПриемаНаРаботу,
		|	ПриемНаРаботуВОрганизациюРаботники.УсловияПриемаНаРаботу КАК УсловияПриемаНаРаботу,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПриемНаРаботуВОрганизациюОсновныеНачисления.Валюта1, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВалютаТарифнойСтавкиРегламентированная,
		|	ВЫБОР
		|		КОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ПроизвольнаяФормулаРасчета
		|			ТОГДА ВЫБОР
		|					КОГДА Показатели.Показатель1.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1
		|					КОГДА Показатели.Показатель2.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд2
		|					КОГДА Показатели.Показатель3.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд3
		|					КОГДА Показатели.Показатель4.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд4
		|					КОГДА Показатели.Показатель5.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд5
		|					КОГДА Показатели.Показатель6.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|						ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд6
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1
		|	КОНЕЦ КАК ТарифныйРазряд1,
		|	ПриемНаРаботуВОрганизациюРаботники.AVTШтатноеРасписание
		|ПОМЕСТИТЬ ВТСтрокиДокумента
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиНачислений КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				МАКСИМУМ(ВЫБОР
		|						КОГДА ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки = 1
		|							ТОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель
		|						ИНАЧЕ NULL
		|					КОНЕЦ) КАК Показатель1,
		|				МАКСИМУМ(ВЫБОР
		|						КОГДА ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки = 2
		|							ТОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель
		|						ИНАЧЕ NULL
		|					КОНЕЦ) КАК Показатель2,
		|				МАКСИМУМ(ВЫБОР
		|						КОГДА ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки = 3
		|							ТОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель
		|						ИНАЧЕ NULL
		|					КОНЕЦ) КАК Показатель3,
		|				МАКСИМУМ(ВЫБОР
		|						КОГДА ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки = 4
		|							ТОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель
		|						ИНАЧЕ NULL
		|					КОНЕЦ) КАК Показатель4,
		|				МАКСИМУМ(ВЫБОР
		|						КОГДА ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки = 5
		|							ТОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель
		|						ИНАЧЕ NULL
		|					КОНЕЦ) КАК Показатель5,
		|				МАКСИМУМ(ВЫБОР
		|						КОГДА ОсновныеНачисленияОрганизацийПоказатели.НомерСтроки = 6
		|							ТОГДА ОсновныеНачисленияОрганизацийПоказатели.Показатель
		|						ИНАЧЕ NULL
		|					КОНЕЦ) КАК Показатель6,
		|				ПриемНаРаботуВОрганизациюОсновныеНачисления.НомерСтроки КАК НомерСтроки
		|			ИЗ
		|				ВТСтрокиНачислений КАК ПриемНаРаботуВОрганизациюОсновныеНачисления
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК ОсновныеНачисленияОрганизацийПоказатели
		|					ПО ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета = ОсновныеНачисленияОрганизацийПоказатели.Ссылка
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ПриемНаРаботуВОрганизациюОсновныеНачисления.НомерСтроки) КАК Показатели
		|			ПО ПриемНаРаботуВОрганизациюОсновныеНачисления.НомерСтроки = Показатели.НомерСтроки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерТарифныхСтавок.СрезПоследних(
		|					&ДатаДокумента,
		|					ТарифныйРазряд В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1
		|						ИЗ
		|							ВТСтрокиНачислений КАК ПриемНаРаботуВОрганизациюОсновныеНачисления)) КАК РазмерТарифныхСтавокСрезПоследних
		|			ПО (ВЫБОР
		|					КОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета.ПроизвольнаяФормулаРасчета
		|						ТОГДА ВЫБОР
		|								КОГДА Показатели.Показатель1.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|									ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1
		|								КОГДА Показатели.Показатель2.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|									ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд2
		|								КОГДА Показатели.Показатель3.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|									ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд3
		|								КОГДА Показатели.Показатель4.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|									ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд4
		|								КОГДА Показатели.Показатель5.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|									ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд5
		|								КОГДА Показатели.Показатель6.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд)
		|									ТОГДА ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд6
		|								ИНАЧЕ НЕОПРЕДЕЛЕНО
		|							КОНЕЦ
		|					ИНАЧЕ ПриемНаРаботуВОрганизациюОсновныеНачисления.ТарифныйРазряд1
		|				КОНЕЦ = РазмерТарифныхСтавокСрезПоследних.ТарифныйРазряд)
		|		ПО ПриемНаРаботуВОрганизациюРаботники.Сотрудник = ПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник
		|ГДЕ
		|	ПриемНаРаботуВОрганизациюРаботники.Ссылка = &ДокументСсылка
		|	И НЕ ПриемНаРаботуВОрганизациюРаботники.Сторно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Показатель1 КАК РазмерНадбавки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта1, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""руб.""
		|		ИНАЧЕ НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта1.Наименование
		|	КОНЕЦ КАК ВалютаНадбавки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Валюта1, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""коп.""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КопейкиНадбавки,
		|	НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ВидНадбавки.СпособРасчета КАК СпособРасчета,
		|	СтрокиДокумента.ДатаПриема,
		|	СтрокиДокумента.ДатаУвольнения,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, СтрокиДокумента.Сотрудник.Наименование) КАК Работник,
		|	СтрокиДокумента.ФизЛицоПол,
		|	СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|	СтрокиДокумента.ИспытательныйСрок,
		|	СтрокиДокумента.НачалоУсловияПриемаНаРаботу,
		|	СтрокиДокумента.УсловияПриемаНаРаботу,
		|	СтрокиДокумента.Сотрудник.НомерДоговора КАК ТрудовойДоговорНомер,
		|	СтрокиДокумента.Сотрудник.ДатаДоговора КАК ТрудовойДоговорДата,
		|	СтрокиДокумента.ПодразделениеОрганизации.Наименование КАК Подразделение,
		|	СтрокиДокумента.Должность.Наименование КАК Должность,
		|	СтрокиДокумента.ВалютаТарифнойСтавки,
		|	СтрокиДокумента.КопейкиТарифнойСтавки,
		|	ЕСТЬNULL(СтрокиДокумента.ОкладТарифнаяСтавка, 0) КАК ОкладТарифнаяСтавка,
		|	ЕСТЬNULL(СтрокиДокумента.ТребуетВводаТарифногоРазряда, ЛОЖЬ) КАК ТребуетВводаТарифногоРазряда,
		|	ЕСТЬNULL(СтрокиДокумента.РазмерТарифныйРазряд, 0) КАК РазмерТарифныйРазряд,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СтрокиДокумента.ВалютаТарифныйРазряд, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""коп.""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КопейкиТарифныйРазряд,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СтрокиДокумента.ВалютаТарифныйРазряд, &РеглВалюта) = &РеглВалюта
		|			ТОГДА ""руб.""
		|		ИНАЧЕ ЕСТЬNULL(СтрокиДокумента.ВалютаТарифныйРазряд.Наименование, ""руб."")
		|	КОНЕЦ КАК ВалютаТарифныйРазряд,
		|	СтрокиДокумента.Сотрудник.Код КАК ТабельныйНомер,
		|	СтрокиДокумента.ВалютаТарифнойСтавкиРегламентированная,
		|	СтрокиДокумента.ТарифныйРазряд1 КАК ТарифныйРазряд
		|ИЗ
		|	ВТСтрокиДокумента КАК СтрокиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НадбавкиПоШтатномуРасписаниюОрганизаций.СрезПоследних(&ДатаДокумента, ) КАК НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних
		|		ПО СтрокиДокумента.ПодразделениеОрганизации = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.ПодразделениеОрганизации
		|			И СтрокиДокумента.Должность = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.Должность
		|			И СтрокиДокумента.AVTШтатноеРасписание = НадбавкиПоШтатномуРасписаниюОрганизацииСрезПоследних.AVTШтатноеРасписание
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаДокумента,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.Физлицо
		|					ИЗ
		|						ВТСтрокиДокумента КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации)) КАК ФИОФизЛицСрезПоследних
		|		ПО СтрокиДокумента.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	НомерСтроки";
		
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросДляПечати()

// Функция формирует табличный документ с печатной формой "Т-1а",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ1а(ИмяМакета)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ПолеСлева = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_Т1а";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// подсчитываем количество страниц документа - для корректного разбиения на страницы
	ВсегоСтрокДокумента = РаботникиОрганизации.Количество();

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа.
	ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати"); // повторяющаяся шапка страницы
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");// Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); // строка работника

	// массив с двумя строками - для разбиения на страницы
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	
	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
	КонецЕсли;

	// Начинаем формировать выходной документ
	ТабДокумент.Вывести(ОбластьМакетаШапка); // Шапка документа.

	ВыведеноСтрок = 0;
	// выводим строки по работникам
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
		
		РезультатСклонения = "";
		Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВложеннаяВыборка.Работник, 4,ВложеннаяВыборка.ФизЛицоПол, РезультатСклонения) Тогда
			ОбластьМакета.Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		// Уточним валюту тарифной ставки
		ОкладВПечатнойФорме = 0;
		Если ВложеннаяВыборка.ТребуетВводаТарифногоРазряда тогда
			ОкладВПечатнойФорме = ВложеннаяВыборка.РазмерТарифныйРазряд;
		Иначе
			Если ВложеннаяВыборка.РазмерТарифныйРазряд <> 0 и ВложеннаяВыборка.ОкладТарифнаяСтавка = 0 тогда 
				ОкладВПечатнойФорме = ВложеннаяВыборка.РазмерТарифныйРазряд
			Иначе 
				ОкладВПечатнойФорме = ВложеннаяВыборка.ОкладТарифнаяСтавка
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(ВложеннаяВыборка.ВалютаТарифнойСтавки) Тогда
			Если НЕ ВложеннаяВыборка.ВалютаТарифнойСтавкиРегламентированная тогда
				ОбластьМакета.Параметры.ОкладТарифнаяСтавка = "" + Формат(ОкладВПечатнойФорме,"ЧЦ=15; ЧДЦ=2") + Символы.ПС + "(" + ?(ВложеннаяВыборка.ТребуетВводаТарифногоРазряда, ВложеннаяВыборка.ТарифныйРазряд + ", ", "") + ВложеннаяВыборка.ВалютаТарифнойСтавки+")";
			Иначе
				ОбластьМакета.Параметры.ОкладТарифнаяСтавка = "" + Формат(ОкладВПечатнойФорме,"ЧЦ=15; ЧДЦ=2") + ?(ВложеннаяВыборка.ТребуетВводаТарифногоРазряда, Символы.ПС + "(" + ВложеннаяВыборка.ТарифныйРазряд + ")", "");
			КонецЕсли;
		Иначе
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = ОкладВПечатнойФорме;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВложеннаяВыборка.РазмерНадбавки) Тогда
			
			ТекстЯчейки = ОбластьМакета.Параметры.ОкладТарифнаяСтавка;
			ТекстЯчейки = "" + ТекстЯчейки + "," + Символы.ПС + ВложеннаяВыборка.РазмерНадбавки;
			
			Если ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
				ТекстЯчейки = ТекстЯчейки + "(%)"
			Иначе	
				ТекстЯчейки = ТекстЯчейки + ?(ЗначениеЗаполнено(ВложеннаяВыборка.ВалютаНадбавки)," (" + ВложеннаяВыборка.ВалютаНадбавки+")","");
			КонецЕсли;
			
			ОбластьМакета.Параметры.ОкладТарифнаяСтавка = ТекстЯчейки;
		КонецЕсли;	

		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВложеннаяВыборка.ТабельныйНомер;
		
		// разбиение на страницы
		ВыведеноСтрок = ВыведеноСтрок + 1;
		
		// Проверим, уместится ли строка на странице или надо открывать новую страницу
		ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		Если Не ВывестиПодвалЛиста и ВыведеноСтрок = ВсегоСтрокДокумента Тогда
			ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
			ВывестиПодвалЛиста = Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти);
		КонецЕсли;
		Если ВывестиПодвалЛиста Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабДокумент.Вывести(ПовторятьПриПечатиСтроки);
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	ВыводимыеОбласти = Новый Массив();
	ВыводимыеОбласти.Добавить(ОбластьМакета);
	ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
	Для Сч = 1 По ОбластьМакета.Параметры.Количество() Цикл
		ОбластьМакета.Параметры.Установить(Сч - 1,""); 
	КонецЦикла;
	ОбластьМакета.Параметры.Работник = " " + Символы.ПС + " ";
	Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, Ложь) Цикл
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	// выводим предварительно подготовленный Подвал документа.
	ТабДокумент.Вывести(ОбластьМакетаПодвал);

	Возврат ТабДокумент;

КонецФункции // ПечатьТ1а()

// Функция формирует табличный документ с печатной формой "Т-1",
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьТ1(ИмяМакета)
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриемНаРаботуВОрганизацию_Т1";
	
	// получаем данные для печати
	ВыборкаДляШапки = СформироватьЗапросДляПечати("ПоРеквизитамДокумента").Выбрать();
	ВыборкаРаботники = СформироватьЗапросДляПечати("ПоТабличнойЧастиДокумента").Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	// запоминаем области макета
	Макет = ПолучитьМакет(ИмяМакета);
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); // Шапка документа
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал"); // Подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Работник"); // строка работника

	// выводим данные о руководителях организации
	Если ВыборкаДляШапки.Следующий() Тогда
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаДляШапки); // Шапка документа.
		ОбластьМакетаШапка.Параметры.НазваниеОрганизации	= СокрЛП(ОбластьМакетаШапка.Параметры.НазваниеОрганизации);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаДляШапки); // Для подвала.
		НомерДокДляПечати	= ВыборкаДляШапки.НомерДок;
		
		ВыводитьДатуОзнакомленияСПриказом = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПроставлятьАвтоматическиДатуОзнакомленияВКадровыхПриказах");
		Если Не ВыводитьДатуОзнакомленияСПриказом Тогда
			ОбластьМакетаПодвал.Параметры.ДатаДок = ФормированиеПечатныхФормЗК.ПустаяДатаВПечатнойФорме();
		КонецЕсли;
	КонецЕсли;
	
	НомерФормы = 0;
	ПечататьПостфикс = ВыборкаРаботники.Количество() > 1;
	// Начинаем формировать выходной документ
	Пока ВыборкаРаботники.Следующий() Цикл

		ВложеннаяВыборка = ВыборкаРаботники.Выбрать(); 
		ВложеннаяВыборка.Следующий();
		
		// Каждый приказ на отдельной странице.
		Если ТабДокумент.ВысотаТаблицы > 0 Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Если ПечататьПостфикс Тогда
			НомерФормы = НомерФормы + 1;
			ОбластьМакетаШапка.Параметры.НомерДок = НомерДокДляПечати + "/" + НомерФормы
		КонецЕсли;
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		// Данные по работнику.
		ОбластьМакета.Параметры.Заполнить(ВложеннаяВыборка);
		
		РезультатСклонения = "";
		Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), ВложеннаяВыборка.Работник, 4,ВложеннаяВыборка.ФизЛицоПол, РезультатСклонения) Тогда
			ОбластьМакета.Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		ПредставлениеДатыДоговора                       = Формат(ВложеннаяВыборка.ТрудовойДоговорДата, "ДЛФ=DD");
		ОбластьМакета.Параметры.ТрудовойДоговорЧисло    = ?(ЗначениеЗаполнено(ВложеннаяВыборка.ТрудовойДоговорДата), СокрЛП(Лев(ПредставлениеДатыДоговора,2)), "      ");
		ОбластьМакета.Параметры.ТрудовойДоговорМесяцГод = ?(ЗначениеЗаполнено(ВложеннаяВыборка.ТрудовойДоговорДата), СокрЛП(Прав(ПредставлениеДатыДоговора, СтрДлина(ПредставлениеДатыДоговора)-2)), "                     г.");
		ОбластьМакета.Параметры.УсловияПриемаНаРаботу = ВложеннаяВыборка.НачалоУсловияПриемаНаРаботу + ВложеннаяВыборка.УсловияПриемаНаРаботу;
		
		// Уточним размер и валюту тарифной ставки
		ОкладВПечатнойФорме = 0;
		Если ВложеннаяВыборка.ТребуетВводаТарифногоРазряда тогда
			ОкладВПечатнойФорме = ВложеннаяВыборка.РазмерТарифныйРазряд;
		Иначе
			Если ВложеннаяВыборка.РазмерТарифныйРазряд <> 0 и ВложеннаяВыборка.ОкладТарифнаяСтавка = 0 тогда 
				ОкладВПечатнойФорме = ВложеннаяВыборка.РазмерТарифныйРазряд;
			Иначе 
				ОкладВПечатнойФорме = ВложеннаяВыборка.ОкладТарифнаяСтавка;
			КонецЕсли;
		КонецЕсли;
		ВалютаТарифнойСтавки = ?(ВложеннаяВыборка.ТребуетВводаТарифногоРазряда, ВложеннаяВыборка.ВалютаТарифныйРазряд, ВложеннаяВыборка.ВалютаТарифнойСтавки);
		
		ОбластьМакета.Параметры.КопейкиТарифнойСтавки = ?(ВложеннаяВыборка.ТребуетВводаТарифногоРазряда, ВложеннаяВыборка.КопейкиТарифныйРазряд, ВложеннаяВыборка.КопейкиТарифнойСтавки);
		ОбластьМакета.Параметры.ВалютаТарифнойСтавки = ВалютаТарифнойСтавки;
		
		Если ЗначениеЗаполнено(ОбластьМакета.Параметры.КопейкиТарифнойСтавки) Тогда // в иностр. валюте
			ОбластьМакета.Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = Цел(ОкладВПечатнойФорме);
			ДробнаяЧасть = ОкладВПечатнойФорме - Цел(ОкладВПечатнойФорме);
			ОбластьМакета.Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
		Иначе
			ОбластьМакета.Параметры.ОкладТарифнаяСтавкаЦелаяЧасть = Формат(ОкладВПечатнойФорме,"ЧЦ=15; ЧДЦ=2");
			ОбластьМакета.Параметры.ОкладТарифнаяСтавкаДробнаяЧасть = "";
		КонецЕсли;
		
		ОбластьМакета.Параметры.НадбавкаЦелаяЧасть   = "";
		ОбластьМакета.Параметры.НадбавкаДробнаяЧасть = "";
		ОбластьМакета.Параметры.ВалютаНадбавки = "руб.";
		ОбластьМакета.Параметры.КопейкиНадбавки = "коп.";
		
		Если ЗначениеЗаполнено(ВложеннаяВыборка.РазмерНадбавки) Тогда
			
			Если ВложеннаяВыборка.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
				ОбластьМакета.Параметры.ВалютаНадбавки = "";
				ОбластьМакета.Параметры.КопейкиНадбавки = "";
				ОбластьМакета.Параметры.НадбавкаЦелаяЧасть = "" + ВложеннаяВыборка.РазмерНадбавки + "(%)"
			Иначе
				
				ОбластьМакета.Параметры.ВалютаНадбавки = ВложеннаяВыборка.ВалютаНадбавки;
				ОбластьМакета.Параметры.КопейкиНадбавки = ВложеннаяВыборка.КопейкиНадбавки;
				
				Если ЗначениеЗаполнено(ОбластьМакета.Параметры.КопейкиНадбавки) Тогда // в иностр. валюте
					ОбластьМакета.Параметры.НадбавкаЦелаяЧасть = Цел(ВложеннаяВыборка.РазмерНадбавки);
					ДробнаяЧасть = ВложеннаяВыборка.РазмерНадбавки - Цел(ВложеннаяВыборка.РазмерНадбавки);
					ОбластьМакета.Параметры.НадбавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100); 
				Иначе
					ОбластьМакета.Параметры.НадбавкаЦелаяЧасть = Формат(ВложеннаяВыборка.РазмерНадбавки,"ЧЦ=15; ЧДЦ=2");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВложеннаяВыборка.ИспытательныйСрок = 0 Тогда
			ОбластьМакета.Параметры.ИспытательныйСрок = "Без срока испытания";
			
		Иначе
			ОбластьМакета.Параметры.ИспытательныйСрок = ВложеннаяВыборка.ИспытательныйСрок;
			
		КонецЕсли;
		
		//уберем из табельного номера префикс
		ОбластьМакета.Параметры.ТабельныйНомер = ВложеннаяВыборка.ТабельныйНомер;

		ТабДокумент.Вывести(ОбластьМакета);

		// Подвал документа.
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецЦикла;

	// если не было ни одного работника - выводим пустой бланк
	Если ТабДокумент.ВысотаТаблицы = 0 Тогда
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		ОбластьМакета.Параметры.ТрудовойДоговорЧисло = "     ";
		ОбластьМакета.Параметры.ТрудовойДоговорМесяцГод = "                 г.";
		ТабДокумент.Вывести(ОбластьМакета);
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьТ1()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке(Режим) Экспорт

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриемНаРаботуВОрганизацию.Дата,
	|	ПриемНаРаботуВОрганизацию.Организация,
	|	ВЫБОР
	|		КОГДА ПриемНаРаботуВОрганизацию.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ПриемНаРаботуВОрганизацию.Организация
	|		ИНАЧЕ ПриемНаРаботуВОрганизацию.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	ПриемНаРаботуВОрганизацию.Ссылка,
	|	ПриемНаРаботуВОрганизацию.Организация.Наименование
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|ГДЕ
	|	ПриемНаРаботуВОрганизацию.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

Функция СформироватьЗапросПоПрежнимМестам(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДокументСсылка",			Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
	|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
	|	ТЧРаботникиОрганизации.Ссылка
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
	|	И (НЕ ТЧРаботникиОрганизации.Сторно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	ДатаПриема,
	|	ВидЗанятости,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧРаботникиОрганизации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТИспытуемыеСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК ТЧРаботникиОрганизации
	|ГДЕ
	|	ТЧРаботникиОрганизации.Физлицо В
	|			(ВЫБРАТЬ
	|				Док.Физлицо
	|			ИЗ
	|				ВТДанныеДокумента КАК Док)
	|	И ТЧРаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеПоРаботникуДоНазначения.Сотрудник.Физлицо КАК Физлицо,
	|	ДанныеПоРаботникуДоНазначения.Регистратор КАК КонфликтныйДокумент,
	|	ДанныеПоРаботникуДоНазначения.Сотрудник.ВидЗанятости КАК ВидЗанятостиПоДругомуМестуРаботы,
	|	0 КАК НомерСтроки
	|ПОМЕСТИТЬ ВТДанныеПоРаботникуДоНазначения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Физлицо КАК Физлицо,
	|		СостояниеВнутри.Сотрудник КАК Сотрудник,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА СостояниеВнутри.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА СостояниеВнутри.Период
	|				КОГДА ДОБАВИТЬКДАТЕ(СостояниеВнутри.ПериодЗавершения, ДЕНЬ, -1) > Док.ДатаПриема
	|					ТОГДА СостояниеВнутри.Период
	|				ИНАЧЕ ДОБАВИТЬКДАТЕ(СостояниеВнутри.ПериодЗавершения, ДЕНЬ, -1)
	|			КОНЕЦ) КАК ДатаПоследнегоИзменения
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций КАК СостояниеВнутри
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДокумента КАК Док
	|			ПО СостояниеВнутри.Сотрудник.Физлицо = Док.Физлицо
	|				И СостояниеВнутри.Период <= Док.ДатаПриема
	|	ГДЕ
	|		СостояниеВнутри.Сотрудник В
	|				(ВЫБРАТЬ
	|					Спр.Ссылка
	|				ИЗ
	|					ВТИспытуемыеСотрудники КАК Спр)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Док.Физлицо,
	|		СостояниеВнутри.Сотрудник) КАК СписокДат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуДоНазначения
	|		ПО СписокДат.Сотрудник = ДанныеПоРаботникуДоНазначения.Сотрудник
	|			И (ДанныеПоРаботникуДоНазначения.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|			И (ВЫБОР
	|				КОГДА ДанныеПоРаботникуДоНазначения.Период = СписокДат.ДатаПоследнегоИзменения
	|					ТОГДА ИСТИНА
	|				КОГДА ДанныеПоРаботникуДоНазначения.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ЛОЖЬ
	|				КОГДА ДОБАВИТЬКДАТЕ(ДанныеПоРаботникуДоНазначения.ПериодЗавершения, ДЕНЬ, -1) = СписокДат.ДатаПоследнегоИзменения
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	ДанныеПоРаботникуДоНазначения.Регистратор ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Физлицо,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ВидЗанятости,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки
	|ИЗ
	|	ВТДанныеДокумента КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	ВидЗанятостиПоДругомуМестуРаботы,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрганизации.ВидЗанятости КАК ВидЗанятости,
	|	ВложенныйЗапрос.КонфликтныйДокумент КАК КонфликтныйДокумент,
	|	ВложенныйЗапрос.ВидЗанятостиПоДругомуМестуРаботы КАК ВидЗанятостиПоДругомуМестуРаботы
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПоРаботникуДоНазначения КАК ВложенныйЗапрос
	|		ПО ТЧРаботникиОрганизации.Физлицо = ВложенныйЗапрос.Физлицо
	|			И ТЧРаботникиОрганизации.НомерСтроки <> ВложенныйЗапрос.НомерСтроки
	|			И ТЧРаботникиОрганизации.ВидЗанятости <> ВложенныйЗапрос.ВидЗанятостиПоДругомуМестуРаботы
	|ИТОГИ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоПрежнимМестам()

Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, КонтрольКоличестваСтавокШтатногоРасписания)

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ВидыТрудовыхДоговоров",	ПриемНаРаботуВОрганизациюПереопределяемый.ВидыТрудовыхДоговоров());
	
	// Описание текста запроса:
	// Первая часть запроса  - вид строки запроса "ДанныеДляДвижений": 
	// 1. Выборка "ТЧРаботникиОрганизации": 
	//		Выбираются строки документа.  
	// 2. Выборка "ПересекающиесяСтроки": 
	//		Среди остальных строк документа ищем строки с одинаковым значением реквизита "ФизЛицо"
	//
	// Вторая часть запроса - вид строки запроса "КонфликтныйДокумент" - поиск конфликтных документов: 
	//		На каждую дату приема и увольнения ищем движения в регистре "РаботникиОрганизации" и "СостояниеРаботниковОрганизации"
    	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Петрухин Андрей 22.06.2011 22:36 
	// ОПИСАНИЕ: Добавили в запросы реквизит "ШтатноеРасписание"
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	Если КонтрольКоличестваСтавокШтатногоРасписания Тогда
		
		// определим самую раннюю и позднюю дату перемещения, чтобы с нее начать расчет остатков штатных единиц
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема) КАК ДатаНачала
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|ГДЕ
		|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И (НЕ ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сторно)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачала = ?(ЗначениеЗаполнено(Выборка.ДатаНачала),Выборка.ДатаНачала, Дата);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаНачала",	ДатаНачала);
		Запрос.УстановитьПараметр("Приход",		ВидДвиженияНакопления.Приход);
		
		ТаблицаСтрокШтатногоРасписания = РаботникиОрганизации.Выгрузить(Новый Структура("Сторно",Ложь),"НомерСтроки,ДатаПриема,ПодразделениеОрганизации,Должность");
		ТаблицаСтрокШтатногоРасписания.Колонки.ДатаПриема.Имя = "ДатаНачала";
		ДанныеОСтавках = ПолныеПраваЗК.ВременноСвободныеСтавкиСтрокШтатногоРасписания(ТаблицаСтрокШтатногоРасписания, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("ДанныеОСтавках", ДанныеОСтавках);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтрокиДокумента.ОсвобожденныеСтавки,
		|	СтрокиДокумента.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ОсвобожденныеСтавки
		|ИЗ
		|	&ДанныеОСтавках КАК СтрокиДокумента
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";
		Запрос.Выполнить();
		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 24.08.2011 15:41 
		// В запросe добавлено поле AVTШтатноеРасписание для соединения с регистром сведений ШтатноеРасписание и
		// закомментированы поля ПодразделениеОрганизации и Должность, так как эти измерения из регистра удалены.
		//  Дополнительно используем выборки: 
		//  СвободноСтавокНаДатуПриема
		//		Для каждой строки ТЧРаботникиОрганизации на дату ДатаПриема
		//		подсчитываем количество остающихся ставок (с учетом "предшествующих" данных текущего документа)
		//

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЧРаботникиОрганизации.Ссылка,
		|	ТЧРаботникиОрганизации.НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Организация,
		|	ТЧРаботникиОрганизации.Сотрудник.ВидДоговора,
		|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости,
		|	ТЧРаботникиОрганизации.ФизЛицо,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.СпособРасчета,
		|	ТЧРаботникиОрганизации.ГрафикРаботы,
		|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,
		|	ТЧРаботникиОрганизации.ДатаУвольнения,
		|	ТЧРаботникиОрганизации.ДатаПриема,
		|	ТЧРаботникиОрганизации.ИспытательныйСрок,
		|	ТЧРаботникиОрганизации.AVTШтатноеРасписание,
		|	ТЧРаботникиОрганизации.Сторно
		|ПОМЕСТИТЬ ВТСтрокиДокумента
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И (НЕ ТЧРаботникиОрганизации.Сторно)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.ФизЛицо КАК Физлицо,
		|	ТЧРаботникиОрганизации.СотрудникВидЗанятости КАК ВидЗанятости,
		|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	ТЧРаботникиОрганизации.ДатаУвольнения,
		|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ИспытательныйСрок,
		|	ТЧРаботникиОрганизации.ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.СотрудникОрганизация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизацииВладелец <> &Организация
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	СвободноСтавокНаДатуПриема.ОстатокСтавок КАК ОстатокСтавок,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.ВидДоговора В (&ВидыТрудовыхДоговоров)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НеВерныйДоговор,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаСотрудникРаботалВОрганизации,
		|	ПРЕДСТАВЛЕНИЕ(ТЧРаботникиОрганизации.ПодразделениеОрганизации) КАК ПодразделениеПредставление,
				|	ТЧРаботникиОрганизации.AVTШтатноеРасписание,
		|	ПРЕДСТАВЛЕНИЕ(ТЧРаботникиОрганизации.Должность)
		|ИЗ
		|	ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			ВТСтрокиДокумента КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСтрокиДокумента КАК ТЧРаботникиОрганизации2
		|				ПО ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|					И ТЧРаботникиОрганизации.Сторно = ТЧРаботникиОрганизации2.Сторно
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МаксимальныеПериодыШР.НомерСтроки КАК НомерСтроки,
		|			ЕСТЬNULL(ШтатноеРасписание.КоличествоСтавок, 0) + ЕСТЬNULL(ОсвобожденныеСтавкиОрганизаций.ОсвобожденныеСтавки, 0) - ЕСТЬNULL(Вакансии.КоличествоСтавок, 0) - ЕСТЬNULL(РанееЗанятоСтавок.КоличествоСтавок, 0) КАК ОстатокСтавок
		|		ИЗ
		|			(ВЫБРАТЬ
		|				Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|				Работники.Должность КАК Должность,
		|				Работники.НомерСтроки КАК НомерСтроки,
			|				Работники.AVTШтатноеРасписание КАК AVTШтатноеРасписание,
		|				МАКСИМУМ(ШтатноеРасписание.Период) КАК МаксПериод
		|			ИЗ
		|				ВТСтрокиДокумента КАК Работники
		|					ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|						ЕСТЬNULL(ШтатноеРасписание.Период, &ДатаНачала) КАК Период,
				//|						Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		//|						Работники.Должность КАК Должность
		|						Работники.AVTШтатноеРасписание КАК AVTШтатноеРасписание
		|					ИЗ
		|						ВТСтрокиДокумента КАК Работники
		|							ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		//|							ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		//|								И Работники.Должность = ШтатноеРасписание.Должность) КАК ШтатноеРасписание
		|							ПО Работники.AVTШтатноеРасписание = ШтатноеРасписание.AVTШтатноеРасписание) КАК ШтатноеРасписание
			//|					ПО Работники.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		//|						И Работники.Должность = ШтатноеРасписание.Должность
		|					ПО Работники.AVTШтатноеРасписание = ШтатноеРасписание.AVTШтатноеРасписание
		|						И Работники.ДатаПриема >= ШтатноеРасписание.Период
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Работники.ПодразделениеОрганизации,
		|				Работники.НомерСтроки,
			|				Работники.AVTШтатноеРасписание,
		|				Работники.Должность) КАК МаксимальныеПериодыШР
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписание
		|				ПО МаксимальныеПериодыШР.МаксПериод = ШтатноеРасписание.Период
	//|					И МаксимальныеПериодыШР.ПодразделениеОрганизации = ШтатноеРасписание.ПодразделениеОрганизации
		//|					И МаксимальныеПериодыШР.Должность = ШтатноеРасписание.Должность
		|					И МаксимальныеПериодыШР.AVTШтатноеРасписание = ШтатноеРасписание.AVTШтатноеРасписание
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Работники.НомерСтроки КАК НомерСтроки,
		|					Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|					Работники.Должность КАК Должность,
		|					СУММА(ВЫБОР
		|							КОГДА Вакансии.ВидДвижения = &Приход
		|								ТОГДА Вакансии.КоличествоСтавок
		|							ИНАЧЕ -Вакансии.КоличествоСтавок
		|						КОНЕЦ) КАК КоличествоСтавок
		|				ИЗ
		|					ВТСтрокиДокумента КАК Работники
		|						ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК Вакансии
			//|						ПО Работники.ПодразделениеОрганизации = Вакансии.ПодразделениеОрганизации
		//|							И Работники.Должность = Вакансии.Должность
		|							ПО Работники.AVTШтатноеРасписание = Вакансии.AVTШтатноеРасписание
		|							И Работники.ДатаПриема >= Вакансии.Период
		|							И (Вакансии.Регистратор <> &ДокументСсылка)
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Работники.ПодразделениеОрганизации,
		|					Работники.Должность,
		|					Работники.НомерСтроки) КАК Вакансии
		|				ПО МаксимальныеПериодыШР.НомерСтроки = Вакансии.НомерСтроки
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					СтрокиДокумента.НомерСтроки КАК НомерСтроки,
		|					СУММА(ВЫБОР
		|							КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема <= СтрокиДокумента.ДатаПриема
		|								ТОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок
		|							ИНАЧЕ 0
		|						КОНЕЦ - ВЫБОР
		|							КОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения < СтрокиДокумента.ДатаПриема
		|									И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|								ТОГДА ПриемНаРаботуВОрганизациюРаботникиОрганизации.ЗанимаемыхСтавок
		|							ИНАЧЕ 0
		|						КОНЕЦ) КАК КоличествоСтавок
		|				ИЗ
		|					ВТСтрокиДокумента КАК СтрокиДокумента
		|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|						ПО СтрокиДокумента.Ссылка = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
		|							И СтрокиДокумента.НомерСтроки <> ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки
		|							И СтрокиДокумента.ПодразделениеОрганизации = ПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации
		|							И СтрокиДокумента.Должность = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность
		|							И СтрокиДокумента.Сторно = ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сторно
		|				
		|				СГРУППИРОВАТЬ ПО
		|					СтрокиДокумента.НомерСтроки) КАК РанееЗанятоСтавок
		|				ПО МаксимальныеПериодыШР.НомерСтроки = РанееЗанятоСтавок.НомерСтроки
		|				ЛЕВОЕ СОЕДИНЕНИЕ ОсвобожденныеСтавки КАК ОсвобожденныеСтавкиОрганизаций
		|				ПО МаксимальныеПериодыШР.НомерСтроки = ОсвобожденныеСтавкиОрганизаций.НомерСтроки) КАК СвободноСтавокНаДатуПриема
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = СвободноСтавокНаДатуПриема.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
		|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	ВидСтрокиЗапроса";
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ДанныеДляДвижений"" КАК ВидСтрокиЗапроса,
		|	ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрганизации.Сотрудник,
		|	ТЧРаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
		|	ТЧРаботникиОрганизации.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		|	ТЧРаботникиОрганизации.ДатаПриема КАК ДатаПриема,
		|	ТЧРаботникиОрганизации.ДатаУвольнения,
		|	НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,
		|	ТЧРаботникиОрганизации.ПодразделениеОрганизации,
		|	ТЧРаботникиОрганизации.Должность,
		|	ТЧРаботникиОрганизации.ЗанимаемыхСтавок,
		|	ТЧРаботникиОрганизации.ИспытательныйСрок,
		|	ТЧРаботникиОрганизации.ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.Организация = &ГоловнаяОрганизация
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаНеСоответствиеСотрудникаИОрганизации,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.ПодразделениеОрганизации.Владелец <> &Организация
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаПодразделениеНеПринадлежитОрганизации,
		|	ПересекающиесяСтроки.КонфликтнаяСтрокаНомер,
		|	ВЫБОР
		|		КОГДА ТЧРаботникиОрганизации.Сотрудник.ВидДоговора В (&ВидыТрудовыхДоговоров)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НеВерныйДоговор,
				|	ТЧРаботникиОрганизации.AVTШтатноеРасписание,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОшибкаСотрудникРаботалВОрганизации,
		//Blik 67118 070717 н
		|	ТЧРаботникиОрганизации.ПРГ_временноеЗамещение КАК ВременноеЗамещение,
		|	ТЧРаботникиОрганизации.УсловияПриемаНаРаботу  Как ТекстЗамещения
		//Blik 67118 070717 к
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТЧРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|			МИНИМУМ(ТЧРаботникиОрганизации2.НомерСтроки) КАК КонфликтнаяСтрокаНомер
		|		ИЗ
		|			Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ТЧРаботникиОрганизации2
		|				ПО (ТЧРаботникиОрганизации2.Ссылка = &ДокументСсылка)
		|					И ТЧРаботникиОрганизации.НомерСтроки > ТЧРаботникиОрганизации2.НомерСтроки
		|					И ТЧРаботникиОрганизации.Сотрудник = ТЧРаботникиОрганизации2.Сотрудник
		|					И ТЧРаботникиОрганизации.Сторно = ТЧРаботникиОрганизации2.Сторно
		|		ГДЕ
		|			ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|			И (НЕ ТЧРаботникиОрганизации.Сторно)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТЧРаботникиОрганизации.НомерСтроки) КАК ПересекающиесяСтроки
		|		ПО ТЧРаботникиОрганизации.НомерСтроки = ПересекающиесяСтроки.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ТЧРаботникиОрганизации.Сотрудник = РаботникиОрганизаций.Сотрудник
		|			И (РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
		|ГДЕ
		|	ТЧРаботникиОрганизации.Ссылка = &ДокументСсылка
		|	И (НЕ ТЧРаботникиОрганизации.Сторно)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	ВидСтрокиЗапроса";
		
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕОПРЕДЕЛЕНО КАК ДополнительноеПоле,", ПриемНаРаботуВОрганизациюПереопределяемый.ДополнительноеПолеТабличнойЧасти());
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоРаботникиОрганизации()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация, в которую принимается сотрудник!"), Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении.
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, КонтрольКоличестваСтавокШтатногоРасписания)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Сотрудники"": ";
	
	// Сотрудник
	НетСотрудника = НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник);
	Если НетСотрудника Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
	
	// Принимаем только по трудовому договору
	Если ВыборкаПоСтрокамДокумента.НеВерныйДоговор Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "у сотрудника указан вид договора отличный от 'Трудового договора'!", Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	// Организация сотрудника должна совпадать с организацией документа
	Если ВыборкаПоСтрокамДокумента.ОшибкаНеСоответствиеСотрудникаИОрганизации Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Указанный сотрудник оформлен на другую организацию!"), Отказ, Заголовок);
	КонецЕсли;
	
	// Подразделение
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано подразделение, в которое принимается сотрудник!", Отказ, Заголовок);
	ИначеЕсли ВыборкаПоСтрокамДокумента.ОшибкаПодразделениеНеПринадлежитОрганизации Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Указано подразделение, принадлежащее другой организации!"), Отказ, Заголовок);
	КонецЕсли;
	///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
	// Петрухин Андрей 23.06.2011 14:33 
	// ОПИСАНИЕ: Проверка на заполнение ШтатногоРасписания
	////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
	// Штатное расписание
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.AVTШтатноеРасписание) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана штатная единица сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	// Должность
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Должность) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана должность сотрудника!", Отказ, Заголовок);
	КонецЕсли;
	
	// ДатаПриема
	ЕстьДатаПриема = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаПриема);
	Если НЕ ЕстьДатаПриема Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата приема на работу!", Отказ, Заголовок);
	КонецЕсли;
	
	// Количество ставок
	Если ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок = 0 Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано количество занимаемых сотрудником ставок!", Отказ, Заголовок);
		
	ИначеЕсли ЕстьДатаПриема И КонтрольКоличестваСтавокШтатногоРасписания Тогда
		Если ВыборкаПоСтрокамДокумента.ОстатокСтавок < ВыборкаПоСтрокамДокумента.ЗанимаемыхСтавок Тогда
			
			Расшифровки = Новый Массив;
			// расшифровка сообщений представляет собой массив структур "Представление+Расшифровка"
			ОткрытьШтатноеРасписание = Новый Массив;
			ОткрытьШтатноеРасписание.Добавить("РаботаСДиалогамиЗК.ОткрытьФормуШтатноеРасписаниеОрганизаций");
			ОткрытьШтатноеРасписание.Добавить(Новый Структура("Организация, ПодразделениеОрганизации, Должность", ВыборкаПоШапкеДокумента.Организация, ВыборкаПоСтрокамДокумента.ПодразделениеОрганизации, ВыборкаПоСтрокамДокумента.Должность));
			Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", "штатном расписании", ОткрытьШтатноеРасписание));
			
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(
			"В %% не предусмотрены ставки для приема сотрудника! Подразделение: " + 
					ВыборкаПоСтрокамДокумента.ПодразделениеПредставление + 
					", должность: " + ВыборкаПоСтрокамДокумента.ДолжностьПредставление,
					Отказ, Заголовок, Перечисления.ВидыСообщений.Ошибка, Расшифровки);
			
		КонецЕсли;
	КонецЕсли;
	
	// ГрафикРаботы
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ГрафикРаботы)  Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан рабочий график!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НетСотрудника ИЛИ (НЕ ЕстьДатаПриема) Тогда
		Возврат;
	КонецЕсли;
	
	// ДатаУвольнения
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаУвольнения) и ВыборкаПоСтрокамДокумента.ДатаПриема > ВыборкаПоСтрокамДокумента.ДатаУвольнения Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "дата приема не может превышать дату окончания работы!", Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник указан дважды
	Если ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер <> NULL Тогда
		СтрокаСообщениеОбОшибке = "сотрудник не может быть указан в документе дважды (см. строку " + ВыборкаПоСтрокамДокумента.КонфликтнаяСтрокаНомер + ")!"; 
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;
	
	// Сотрудник раньше работал в организации
	Если ВыборкаПоСтрокамДокумента.ОшибкаСотрудникРаботалВОрганизации Тогда
		СтрокаСообщениеОбОшибке = "Сотрудник уже работал в " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + ", для повторного приема на работу необходимо создать нового сотрудника!"; 
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

// Проверяет правильность заполнения реквизитов в строке ТЧ "ОсновныеНачисления" документа.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определенной строке выборка 
//  							  из результата запроса, 
//  Отказ 						- флаг отказа в проведении,
//	Заголовок				- Заголовок для сообщений об ошибках проведения.
//
Процедура ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, КонтрольРазмераСтавокШтатногоРасписания)

	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
	""" табл. части ""Начисления"": ";

	// Сотрудник
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не выбран сотрудник!", Отказ, Заголовок);
	КонецЕсли;
		
	// Вид расчета
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВидРасчета) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указано начисление!", Отказ, Заголовок);
	Иначе
		
		// Соответствие размера "основного" начисления штатному расписанию
		Если КонтрольРазмераСтавокШтатногоРасписания и Не ВыборкаПоСтрокамДокумента.РазмерСоответствуетШТР И
			НЕ ВыборкаПоСтрокамДокумента.ТребуетВводаТарифногоРазряда Тогда
			/////Вадим 28.10.2012 15:09:41
			///ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "размер основного начисления не соответствует штатному расписанию!", Отказ, Заголовок);
			// Снял запрет на проведение документа, если начисление не соответствует штатному расписанию. Заборенко. 26.03.2012
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "размер основного начисления не соответствует штатному расписанию!", , Заголовок);    
			////ВадимКонец
			
	
		КонецЕсли;
		
		// Двойные строки
		Если ВыборкаПоСтрокамДокумента.ДвойнаяСтрока <> NULL Тогда
			Если ВыборкаПоСтрокамДокумента.ОсновноеНачисление Тогда
				СтрокаСообщениеОбОшибке = "сотруднику не может быть назначено основное начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
			Иначе
				СтрокаСообщениеОбОшибке = "сотруднику не может быть назначено одно и тоже начисление дважды (см. строку " + ВыборкаПоСтрокамДокумента.ДвойнаяСтрока + ")!"; 
			КонецЕсли;
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
		КонецЕсли;
			
	КонецЕсли;
	
	ИспользуютсяНачисленияВВалюте = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
	
	ПроведениеРасчетовПереопределяемый.ПроверкаПоказателейВПлановыхНачислениях(ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Истина, Отказ, Заголовок, ИспользуютсяНачисленияВВалюте, СоответствиеВалютныеСпособыРасчета);
	
	// проверка на существование работника в табличной части "РаботникиОрганизации"
	Если ВыборкаПоСтрокамДокумента.Период = NULL Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "данный сотрудник не введен в приказ - по нему не могут быть введены начисления!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиНачисления()

// Проверяет возможность оформления работника на работу согласно указанному в шапке документа реквизиту "ВидЗанятости"
//
Процедура ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса, Отказ, Заголовок)
	
	// обходим строки запроса
	Пока ВыборкаСтрокЗапроса.Следующий() Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаСтрокЗапроса.НомерСтроки) +
		""" табл. части ""Сотрудники"": ";

		// Проверка сочетаний видов занятости работника в одной организации
		Если ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда

			// Для основного места работы недопустимо наличие внешнего совместительства
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда
				СтрокаСообщениеОбОшибке = "нельзя принять сотрудника на основное место работы до тех пор,
				|	пока он оформлен внешним совместителем!
				|	(См. приказ: " + ВыборкаСтрокЗапроса.КонфликтныйДокумент + ")"; 
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;

		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство  Тогда

			// Для внешнего совместительства недопустимо основное место работы
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы  Тогда
				СтрокаСообщениеОбОшибке = "нельзя оформить сотрудника на внешнее совместительство, 
				|	так как он уже оформлен в " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организацию") + " по основному месту работы! 
				|	(См. приказ: " + ВыборкаСтрокЗапроса.КонфликтныйДокумент + ")"; 
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;

		ИначеЕсли ВыборкаСтрокЗапроса.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство  Тогда

			// При оформлении на внутреннее совместительство должно быть основное место работы или внешнее совместительство
			Если ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы <> Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы И ВыборкаСтрокЗапроса.ВидЗанятостиПоДругомуМестуРаботы <> Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
				СтрокаСообщениеОбОшибке = "нельзя оформить сотрудника на внутреннее совместительство, 
				|	так как он не оформлен в " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организацию") + " или по основному месту работы или по внешнему совместительству!"; 
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщениеОбОшибке, Отказ, Заголовок);
			КонецЕсли;
	
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьВидыЗанятостиРаботникаВОрганизации()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                - выборка из результата запроса по шапке документа,
//  СтруктураПроведенияПоРегистрамСведений - структура, содержащая имена регистров 
//                                           сведений по которым надо проводить документ,
//  СтруктураПараметров                    - структура параметров проведения,
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, СтруктураПараметров = "")

	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Движения на дату приёма
		
		// Движения по регистру "РаботникиОрганизации"
		Движение = Движения.РаботникиОрганизаций.Добавить();
		
		// Свойства
		Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаПриема;
		
		// Измерения
		Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
        		///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Петрухин Андрей 23.06.2011 14:48 
		Движение.AVTШтатноеРасписание		= ВыборкаПоРаботникиОрганизации.AVTШтатноеРасписание;
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		// Ресурсы
		Движение.ЗанимаемыхСтавок			= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
		Движение.ГрафикРаботы				= ВыборкаПоРаботникиОрганизации.ГрафикРаботы;
		Движение.ПричинаИзмененияСостояния	= Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу;
		Движение.ОбособленноеПодразделение	= ВыборкаПоШапкеДокумента.Организация;
		
		// Реквизиты
		Движение.ПервичныйДокумент			= ВыборкаПоШапкеДокумента.Ссылка;
		
		// Движения на дату увольнения
		Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) Тогда
			Если Не ПриемНаРаботуВОрганизациюПереопределяемый.ВыполняетсяДополнительноеУсловиеИДействие("РаботникиОрганизаций", Движение, ВыборкаПоРаботникиОрганизации, ВыборкаПоШапкеДокумента) Тогда
				Движение = Движения.НамеченныеСобытияПоПерсоналу.Добавить();
				// Свойства
				Движение.Период						= ВыборкаПоРаботникиОрганизации.ДатаУвольнения + мДлинаСуток;
				// Измерения
				Движение.Сотрудник					= ВыборкаПоРаботникиОрганизации.Сотрудник;
				Движение.Организация				= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
				Движение.ДатаИзменения				= ВыборкаПоРаботникиОрганизации.ДатаУвольнения;
				Движение.ПланируемоеСобытие			= ?(ВыборкаПоРаботникиОрганизации.ИспытательныйСрок > 0,Перечисления.НамеченныеСобытияПоПерсоналу.РезультатИспытательногоСрока,Перечисления.НамеченныеСобытияПоПерсоналу.Увольнение);
				// Ресурсы
				Движение.ПодразделениеОрганизации	= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
				Движение.Должность					= ВыборкаПоРаботникиОрганизации.Должность;
				Движение.ЗанимаемыхСтавок			= 0;
				
				ПриемНаРаботуВОрганизациюПереопределяемый.ДвиженияНаДатуУвольненияДополнительно(Движение);
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
			Движение = Движения.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.Добавить();
			
			// Измерения
			Движение.Физлицо			= ВыборкаПоРаботникиОрганизации.Физлицо;
			Движение.ДатаНачала			= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) Тогда
				ПриемНаРаботуВОрганизациюПереопределяемый.ВыполняетсяДополнительноеУсловиеИДействие("ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы", Движение, ВыборкаПоРаботникиОрганизации, ВыборкаПоШапкеДокумента)
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоРаботникиОрганизации.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство Тогда
			Движение = Движения.ПериодыРаботыРаботниковОрганизацийПоСовместительству.Добавить();
			
			// Измерения
			Движение.Физлицо			= ВыборкаПоРаботникиОрганизации.Физлицо;
			Движение.Организация		= ВыборкаПоШапкеДокумента.ГоловнаяОрганизация;
			Движение.ДатаНачала			= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаУвольнения) Тогда
				ПриемНаРаботуВОрганизациюПереопределяемый.ВыполняетсяДополнительноеУсловиеИДействие("ПериодыРаботыРаботниковОрганизацийПоСовместительству", Движение, ВыборкаПоРаботникиОрганизации, ВыборкаПоШапкеДокумента) 
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПриемНаРаботуВОрганизациюПереопределяемый.ВыполнятьДвижениеПоСостояниеРаботниковНаИспытательномСроке(ВыборкаПоРаботникиОрганизации) Тогда
			Движение = Движения.СостояниеРаботниковНаИспытательномСроке.Добавить();
			// Свойства
			Движение.Период				= ВыборкаПоРаботникиОрганизации.ДатаПриема;
			// Измерения
			Движение.ФизЛицо			= ВыборкаПоРаботникиОрганизации.ФизЛицо;
			// Ресурсы
			Если ВыборкаПоРаботникиОрганизации.ИспытательныйСрок > 0 Тогда
				Движение.Состояние		= Перечисления.СостоянияРаботникаНаИспытательномСроке.ПринятНаИспытательныйСрок;
			Иначе
				Движение.Состояние		= Перечисления.СостоянияРаботникаНаИспытательномСроке.ПринятНаРаботу;
			КонецЕсли;
			ПриемНаРаботуВОрганизациюПереопределяемый.ДополнитьДвиженияПоСостояниюРаботниковНаИспытательномСроке(Движение, ВыборкаПоРаботникиОрганизации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамСведений()

Процедура ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса)
	
	// Движения по регистру "ПлановыеНачисленияРаботниковОрганизаций"
	ПроцедурыУправленияПерсоналом.СформироватьДвижениеПоПлановымНачислениям(Движения.ПлановыеНачисленияРаботниковОрганизаций.Добавить(), ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоНачислениям()

// По строке выборки результата запроса по документу формируем движения по регистрам
//
// Параметры: 
//  ВыборкаПоШапкеДокумента                  - выборка из результата запроса по шапке документа
//
// Возвращаемое значение:
//  Нет.
//
Процедура ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Движения на дату приема
		
		// ЗанятыеШтатныеЕдиницыОрганизаций";
		Движение = Движения.ЗанятыеШтатныеЕдиницыОрганизаций.Добавить();
		
		// Свойства
		Движение.Период							= ВыборкаПоРаботникиОрганизации.ДатаПриема;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ПодразделениеОрганизации		= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность						= ВыборкаПоРаботникиОрганизации.Должность;
		// ИЗМЕНЕНИЕ: Петрухин Андрей 23.06.2011 00:38  
		Движение.AVTШтатноеРасписание			= ВыборкаПоРаботникиОрганизации.AVTШтатноерасписание;
		// Ресурсы
		Движение.КоличествоСтавок				= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		
		// Реквизиты
		Движение.Сотрудник						= ВыборкаПоРаботникиОрганизации.Сотрудник;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВДвиженияПоРегистрамНакопления()

//Blik 67118 070717 н
 Процедура ДобавитьСтрокуВДвиженияПоРегиструНакопленияВременноеЗамещение(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации)

	Если ВыборкаПоРаботникиОрганизации.ВидСтрокиЗапроса = "ДанныеДляДвижений" Тогда
		
		// Движения на дату приема
		
		// ЗанятыеШтатныеЕдиницыОрганизаций";
		Движение = Движения.ПРГ_ЗамещениеСотрудников.Добавить();
		
		// Свойства
		Движение.Период							= ВыборкаПоРаботникиОрганизации.ДатаПриема;
		Движение.ВидДвижения					= ВидДвиженияНакопления.Приход;
		
		// Измерения
		Движение.ПодразделениеОрганизации		= ВыборкаПоРаботникиОрганизации.ПодразделениеОрганизации;
		Движение.Должность						= ВыборкаПоРаботникиОрганизации.Должность; 
		Движение.AVTШтатноеРасписание			= ВыборкаПоРаботникиОрганизации.AVTШтатноерасписание;
		
		// Ресурсы
		Движение.КоличествоСтавок				= ВыборкаПоРаботникиОрганизации.ЗанимаемыхСтавок;
		
		// Реквизиты
		Движение.Сотрудник						= ВыборкаПоРаботникиОрганизации.Сотрудник;
		Движение.ТекстЗамещения					= ВыборкаПоРаботникиОрганизации.ТекстЗамещения;
	
	КонецЕсли;
	
КонецПроцедуры
//Blik 67118 070717 к

Процедура СформироватьЗаписиПоВременноПребывающимИностранцам(ВыборкаПоШапкеДокумента)

	Запрос = Новый Запрос;
    Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",	Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ВидыТрудовыхДоговоров",	ПриемНаРаботуВОрганизациюПереопределяемый.ВидыТрудовыхДоговоров());
	Запрос.УстановитьПараметр("ДатаСтрахованияВсехВременноПребывающих",	РасчетСтраховыхВзносов.ДатаСтрахованияВсехВременноПребывающих());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема, МЕСЯЦ) КАК ДатаПриема,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения,
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.НомерСтроки
	|ПОМЕСТИТЬ ВТПринятыеПоДолгосрочнымДоговорам
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|ГДЕ
	|	ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &ДокументСсылка
	|	И ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.ВидДоговора В(&ВидыТрудовыхДоговоров)
	|	И (ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема, МЕСЯЦ, 6), ДЕНЬ, -1) <= ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаУвольнения)
	|	И ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема < &ДатаСтрахованияВсехВременноПребывающих";
	
	Если Запрос.Выполнить().Выгрузить()[0].Количество = 0 Тогда // нет подходящих строк
		Возврат	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Периоды.Период,
	|	Периоды.Физлицо КАК Физлицо,
	|	ЕСТЬNULL(ГражданствоФизЛиц.ВидЗастрахованногоЛица, ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ)) КАК ВидЗастрахованногоЛица
	|ПОМЕСТИТЬ ВТДанныеОГражданстве
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.ДатаПриема КАК Период,
	|		Периоды.ФизЛицо КАК Физлицо,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПринятыеПоДолгосрочнымДоговорам КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО Периоды.ДатаПриема >= ГражданствоФизЛиц.Период
	|				И Периоды.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.ДатаПриема) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО Периоды.ПериодРегистра = ГражданствоФизЛиц.Период
	|			И Периоды.Физлицо = ГражданствоФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период,
	|	Периоды.Физлицо КАК Физлицо,
	|	ЕСТЬNULL(СтатусыФизЛиц.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) КАК СтатусПоНДФЛ
	|ПОМЕСТИТЬ ВТДанныеОВысококвалифицированных
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.ДатаПриема КАК Период,
	|		Периоды.ФизЛицо КАК Физлицо,
	|		МАКСИМУМ(СтатусыФизЛиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПринятыеПоДолгосрочнымДоговорам КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусыФизЛиц
	|			ПО Периоды.ДатаПриема >= СтатусыФизЛиц.Период
	|				И Периоды.ФизЛицо = СтатусыФизЛиц.ФизЛицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.ДатаПриема) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусыФизЛиц
	|		ПО Периоды.ПериодРегистра = СтатусыФизЛиц.Период
	|			И Периоды.Физлицо = СтатусыФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПринятыеПоДолгосрочнымДоговорам.ДатаПриема КАК Период,
	|	ПринятыеПоДолгосрочнымДоговорам.ФизЛицо,
	|	&ГоловнаяОрганизация КАК Организация,
	|	ИСТИНА КАК ПринятПоДолгосрочномуДоговору,
	|	ПринятыеПоДолгосрочнымДоговорам.ДатаУвольнения КАК ПериодЗавершения,
	|	ПринятыеПоДолгосрочнымДоговорам.Ссылка КАК Документ,
	|	ПринятыеПоДолгосрочнымДоговорам.НомерСтроки
	|ПОМЕСТИТЬ ВТДанныеДляЗаписи
	|ИЗ
	|	ВТПринятыеПоДолгосрочнымДоговорам КАК ПринятыеПоДолгосрочнымДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОГражданстве КАК ДанныеОГражданстве
	|		ПО ПринятыеПоДолгосрочнымДоговорам.ФизЛицо = ДанныеОГражданстве.Физлицо
	|			И ПринятыеПоДолгосрочнымДоговорам.ДатаПриема = ДанныеОГражданстве.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВысококвалифицированных КАК ДанныеОВысококвалифицированных
	|		ПО ПринятыеПоДолгосрочнымДоговорам.ФизЛицо = ДанныеОВысококвалифицированных.Физлицо
	|			И ПринятыеПоДолгосрочнымДоговорам.ДатаПриема = ДанныеОВысококвалифицированных.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам КАК ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам
	|		ПО ПринятыеПоДолгосрочнымДоговорам.ФизЛицо = ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.ФизЛицо
	|			И (ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.Организация = &ГоловнаяОрганизация)
	|			И ПринятыеПоДолгосрочнымДоговорам.ДатаПриема = ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.Период
	|ГДЕ
	|	(ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.ФизЛицо ЕСТЬ NULL 
	|			ИЛИ ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.Документ = &ДокументСсылка)
	|	И (ДанныеОГражданстве.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы)
	|			ИЛИ ДанныеОГражданстве.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами))
	|	И ДанныеОВысококвалифицированных.СтатусПоНДФЛ <> ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПринятыеПоДолгосрочнымДоговорам.Период,
	|	ПринятыеПоДолгосрочнымДоговорам.ФизЛицо,
	|	ПринятыеПоДолгосрочнымДоговорам.Организация,
	|	ПринятыеПоДолгосрочнымДоговорам.ПринятПоДолгосрочномуДоговору,
	|	ПринятыеПоДолгосрочнымДоговорам.ПериодЗавершения,
	|	ПринятыеПоДолгосрочнымДоговорам.Документ,
	|	ПринятыеПоДолгосрочнымДоговорам.НомерСтроки КАК НомерСтроки,
	|	ЛОЖЬ КАК УдалитьЗапись
	|ИЗ
	|	ВТДанныеДляЗаписи КАК ПринятыеПоДолгосрочнымДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам КАК ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам
	|		ПО ПринятыеПоДолгосрочнымДоговорам.ФизЛицо = ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.ФизЛицо
	|			И ПринятыеПоДолгосрочнымДоговорам.Организация = ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.Организация
	|			И ПринятыеПоДолгосрочнымДоговорам.Период = ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.Период
	|			И ПринятыеПоДолгосрочнымДоговорам.ПринятПоДолгосрочномуДоговору = ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.ПринятПоДолгосрочномуДоговору
	|			И ПринятыеПоДолгосрочнымДоговорам.ПериодЗавершения = ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.ПериодЗавершения
	|ГДЕ
	|	ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.ФизЛицо ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.ФизЛицо,
	|	ДанныеРегистра.Организация,
	|	NULL,
	|	NULL,
	|	NULL,
	|	0,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДляЗаписи КАК ДанныеДляЗаписи
	|		ПО ДанныеРегистра.Период = ДанныеДляЗаписи.Период
	|			И ДанныеРегистра.ФизЛицо = ДанныеДляЗаписи.ФизЛицо
	|			И ДанныеРегистра.Организация = ДанныеДляЗаписи.Организация
	|ГДЕ
	|	ДанныеРегистра.Документ = &ДокументСсылка
	|	И ДанныеДляЗаписи.Период ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	УдалитьЗапись УБЫВ,
	|	НомерСтроки";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		НаборЗаписей = РегистрыСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Использование = Истина;
		НаборЗаписей.Отбор.Физлицо.Использование = Истина;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Период.Значение = Выборка.Период;
			НаборЗаписей.Отбор.Физлицо.Значение = Выборка.Физлицо;
			НаборЗаписей.Отбор.Организация.Значение = Выборка.Организация;
			Если Не Выборка.УдалитьЗапись Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЕсли;
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗаписиПоВременноПребывающимИностранцам()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.Период,
	|	ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.ФизЛицо,
	|	ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.Организация
	|ИЗ
	|	РегистрСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам КАК ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам
	|ГДЕ
	|	ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		НаборЗаписей = РегистрыСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Использование = Истина;
		НаборЗаписей.Отбор.Физлицо.Использование = Истина;
		НаборЗаписей.Отбор.Организация.Использование = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Период.Значение = Выборка.Период;
			НаборЗаписей.Отбор.Физлицо.Значение = Выборка.Физлицо;
			НаборЗаписей.Отбор.Организация.Значение = Выборка.Организация;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Если документ перенесен - движения не делаем
	Если ДанныеПрошлойВерсии Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке(Режим).Выбрать();
	
	Если ВыборкаПоШапкеДокумента.Следующий() Тогда
	
		// данные учетной политики
		УчетнаяПолитикаПоПерсоналуОрганизации	= глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
		КонтрольКоличестваСтавокШтатногоРасписания	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "КонтрольКоличестваСтавокШтатногоРасписания");
		КонтрольРазмераСтавокШтатногоРасписания		= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "КонтрольРазмераСтавокШтатногоРасписания");
		
		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

		// Движения стоит добавлять, если в проведении еще не отказано (отказ =ложь)
		Если НЕ Отказ Тогда

			// получим соответствие для проверок
			СоответствиеВалютныеСпособыРасчета = ПроведениеРасчетов.ПолучитьСоответствиеСпособовРасчетаТребующихВалюту();
			
			// выполним выборку по табличной части документа
			ВыборкаСтрокЗапроса = СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента, КонтрольКоличестваСтавокШтатногоРасписания).Выбрать();
			
			// для проверки числа ставок
			// обходим строки запроса, проверяем данные и формируем движения
			Пока ВыборкаСтрокЗапроса.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса , Отказ, Заголовок,  КонтрольКоличестваСтавокШтатногоРасписания);
				Если НЕ Отказ Тогда
					ДобавитьСтрокуВДвиженияПоРегистрамНакопления(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
					ДобавитьСтрокуВДвиженияПоРегистрамСведений(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
					//Blik 67118 070717 н
					Если ВыборкаСтрокЗапроса.ВременноеЗамещение Тогда
						 ДобавитьСтрокуВДвиженияПоРегиструНакопленияВременноеЗамещение(ВыборкаПоШапкеДокумента, ВыборкаСтрокЗапроса);
					КонецЕсли;
					//Blik 67118 070717 к
				КонецЕсли;
			КонецЦикла;
			
			// проверим виды занятости работника в организации
			ВыборкаПоСтрокамДокумента = СформироватьЗапросПоПрежнимМестам(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьВидыЗанятостиРаботникаВОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента.Выбрать(), Отказ, Заголовок);
			КонецЦикла;
			
			// выполним выборку по табличной части основных начислений
			ВыборкаПоСтрокамДокумента = ПриемНаРаботуВОрганизациюПереопределяемый.СформироватьЗапросПоНачисления(КонтрольРазмераСтавокШтатногоРасписания, ЭтотОбъект).Выбрать();

			// обходим строки документа
			Пока ВыборкаПоСтрокамДокумента.Следующий() Цикл
				ПроверитьЗаполнениеСтрокиНачисления(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Отказ, Заголовок, КонтрольРазмераСтавокШтатногоРасписания);
				Если Не Отказ Тогда
					ДобавитьСтрокуВДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента);
				КонецЕсли;
			КонецЦикла;
			
			Если Не Отказ Тогда
				СформироватьЗаписиПоВременноПребывающимИностранцам(ВыборкаПоШапкеДокумента)
			КонецЕсли;
			
		КонецЕсли;
		
		ПриемНаРаботуВОрганизациюПереопределяемый.ДобавитьДополнительныеДвижения(ЭтотОбъект, Отказ, Заголовок);
		
		ОбработкаКомментариев.ПоказатьСообщения();

	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УдалитьЗаписиПоВременноПребывающимИностранцам();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если Основание.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		Если Основание.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда
			ИЛИ Основание.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",	Основание);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СотрудникиОрганизаций.ОбособленноеПодразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА СотрудникиОрганизаций.Организация
		|		ИНАЧЕ СотрудникиОрганизаций.ОбособленноеПодразделение
		|	КОНЕЦ КАК Организация,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
		|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
		|	СотрудникиОрганизаций.Должность КАК Должность,
		|	СотрудникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	СотрудникиОрганизаций.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
		|	СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
		|	СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
		|	СотрудникиОрганизаций.ИспытательныйСрок КАК ИспытательныйСрок,
			///////////////////////////////////////////////////////////////{ООО "Автоматизация-Л" ДОРАБОТКА
		// Измайлова Полина 27.07.2011 14:30 
		|	СотрудникиОрганизаций.AVTШтатноеРасписание КАК AVTШтатноеРасписание,
		////////////////////////////////////////////////////////////////ООО "Автоматизация-Л" ДОРАБОТКА}
		|	СотрудникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "Организация");
		
		СтрокаТабличнойЧастиРаботники = ЭтотОбъект.РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиРаботники, Выборка);
		ПриемНаРаботуВОрганизациюПереопределяемый.ДозаполнитьСтрокуТаблицыРаботникиОрганизации(СтрокаТабличнойЧастиРаботники);
		
		ДобавитьНачисленияПоСтроке(СтрокаТабличнойЧастиРаботники);
		
	Иначе
		
		ПриемНаРаботуВОрганизациюПереопределяемый.ЗаполнитьПоОснованию(Основание, ЭтотОбъект);
		
	КонецЕсли;
		
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначенияЗК.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	ОбщегоНазначенияЗК.ДобавитьПрефиксУзла(Префикс);
	
	// получить новый номер документа по совокупности кадровых документов
	ПроцедурыУправленияПерсоналом.ПриУстановкеНовогоНомераКадровогоДокумента(СтандартнаяОбработка, ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Префикс, Дата);
	
КонецПроцедуры // ПриУстановкеНовогоНомера()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);
	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
	Движения.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы.РежимЗаписиРегистратора	= РежимЗаписи;
	Движения.ПериодыРаботыРаботниковОрганизацийПоСовместительству.РежимЗаписиРегистратора		= РежимЗаписи;
	
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПередЗаписью(Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// проверим уникальность номера с точки зрения кадровой нумерации
	ПроцедурыУправленияПерсоналом.ПроверкаУникальностиНомераКадровогоДокумента(ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ЕдиныйНумераторКадровыхДокументов"), Номер, Дата, Ссылка);
	
	ПроведениеРасчетов.ИсправлениеКадровогоДокументаПриЗаписи(Отказ, мВосстанавливатьДвижения, мИсправляемыйДокумент, мСоответствиеДвижений);
	
КонецПроцедуры // ПриЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

мВосстанавливатьДвижения = Ложь;

