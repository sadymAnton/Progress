//++ Spl_Апроф 15.09.2014 (k.russkih@a-prof.ru) Добавил реквизит склад вынес на форму элемента
//++ Spl_Апроф 24.09.2014 (k.russkih@a-prof.ru) Добавил реквизиты "Котрагент" и "Грузополучатель" и "АдресДоставки", ДополнениеКАдресуДоставки для работы типового механизма выбора адреса поставки

//m.ionov@a-prof.ru 14.11.2014
Перем ТаблицаРезервов Экспорт;
//----m.ionov@a-prof.ru---

Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами (без учета корректировок)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказа(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Заказчик    КАК Заказчик,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	Исполнитель КАК Исполнитель,
	|	ПодразделениеИсполнитель КАК ПодразделениеИсполнитель
	|ИЗ
	|	Документ.ВнутреннийЗаказ КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВнутреннийЗаказ_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК Характеристика,
	|	NULL КАК Серия,
	|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
	|	ВложенныйЗапрос.НомерТЧ КАК НомерТЧ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура КАК Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗаказПокупателя.Количество КАК Количество,
	|		1 КАК НомерТЧ,
	|		ЗаказПокупателя.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.ВнутреннийЗаказ.Товары КАК ЗаказПокупателя
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
	|		NULL,
	|		ЗаказПокупателя.Количество,
	|		2,
	|		ЗаказПокупателя.НомерСтроки
	|	ИЗ
	|		Документ.ВнутреннийЗаказ.ВозвратнаяТара КАК ЗаказПокупателя
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.Номенклатура.Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление,
	|	ВложенныйЗапрос.НомерТЧ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Внутренний заказ");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заказчик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеЗаказчика = СокрЛП(Шапка.Заказчик.Наименование);
	ТабДокумент.Вывести(ОбластьМакета);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ВыборкаСтрокТовары.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ЗапросТовары.Количество();
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ФИОИсполнитель = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.Исполнитель);
	ОбластьМакета.Параметры.ФИОИсполнителя = ПодразделениеИсполнитель.Наименование+?(ЗначениеЗаполнено(ПодразделениеИсполнитель) И ЗначениеЗаполнено(ФИОИсполнитель),"; ","")+ФИОИсполнитель;

	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказаКорректировки()

// Функция формирует табличный документ с печатной формой заказа или счета,
// разработанного методистами (с учетом внесенных корректировок)
//
// Возвращаемое значение:
//  Табличный документ - сформированная печатная форма
//
Функция ПечатьСчетаЗаказаКорректировки(Тип)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Заказчик    КАК Заказчик,
	|	Организация КАК Руководители,
	|	Организация КАК Поставщик,
	|	Исполнитель КАК Исполнитель,
	|	ПодразделениеИсполнитель КАК ПодразделениеИсполнитель
	|ИЗ
	|	Документ.ВнутреннийЗаказ КАК ЗаказПокупателя
	|
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВнутреннийЗаказ_СчетЗаказ";

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК Характеристика,
	|	NULL КАК Серия,
	|	ВложенныйЗапрос.НомерТЧ КАК НомерТЧ,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеПолное
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура КАК Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ЗаказПокупателя.Количество КАК Количество,
	|		ЗаказПокупателя.НомерСтроки КАК НомерСтроки,
	|		1 КАК НомерТЧ
	|	ИЗ
	|		Документ.ВнутреннийЗаказ.Товары КАК ЗаказПокупателя
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.ЕдиницаИзмерения,
	|		ЗаказПокупателя.ХарактеристикаНоменклатуры,
	|		ЗаказПокупателя.Количество,
	|		NULL,
	|		1
	|	ИЗ
	|		Документ.КорректировкаВнутреннегоЗаказа.Товары КАК ЗаказПокупателя
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка.ВнутреннийЗаказ = &ТекущийДокумент
	|		И ЗаказПокупателя.Ссылка.Проведен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
	|		NULL,
	|		ЗаказПокупателя.Количество,
	|		ЗаказПокупателя.НомерСтроки,
	|		2
	|	ИЗ
	|		Документ.ВнутреннийЗаказ.ВозвратнаяТара КАК ЗаказПокупателя
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка = &ТекущийДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПокупателя.Номенклатура,
	|		ЗаказПокупателя.Номенклатура.ЕдиницаХраненияОстатков,
	|		NULL,
	|		ЗаказПокупателя.Количество,
	|		NULL,
	|		2
	|	ИЗ
	|		Документ.КорректировкаВнутреннегоЗаказа.ВозвратнаяТара КАК ЗаказПокупателя
	|	ГДЕ
	|		ЗаказПокупателя.Ссылка.ВнутреннийЗаказ = &ТекущийДокумент
	|		И ЗаказПокупателя.Ссылка.Проведен) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|	ВложенныйЗапрос.НомерТЧ,
	|	ВложенныйЗапрос.Номенклатура.Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Макет = ПолучитьМакет("СчетЗаказ");

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата);
	Если Тип = "Счет" Тогда
		ОбластьМакета       = Макет.ПолучитьОбласть("ЗаголовокСчета");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли; 

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Внутренний заказ");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заказчик");
	ОбластьМакета.Параметры.ПредставлениеЗаказчика = Шапка.Заказчик;
	ТабДокумент.Вывести(ОбластьМакета);

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	НумераторСтрок = 0;

	Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

		Если ВыборкаСтрокТовары.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		НумераторСтрок = НумераторСтрок + 1;
		ОбластьНомера.Параметры.НомерСтроки = НумераторСтрок;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.НаименованиеПолное) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");

	ОбластьМакета.Параметры.Заполнить(Шапка);
	ФИОИсполнитель = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.Исполнитель);
	ОбластьМакета.Параметры.ФИОИсполнителя = ПодразделениеИсполнитель.Наименование+?(ЗначениеЗаполнено(ПодразделениеИсполнитель) И ЗначениеЗаполнено(ФИОИсполнитель),"; ","")+ФИОИсполнитель;
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьСчетаЗаказаКорректировки()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "Заказ" тогда
		ТабДокумент = ПечатьСчетаЗаказа(ИмяМакета);
	ИначеЕсли ИмяМакета = "ЗаказКорректировка" тогда
		ТабДокумент = ПечатьСчетаЗаказаКорректировки(ИмяМакета);
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ""), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("Заказ, ЗаказКорректировка","Внутренний заказ", "Внутренний заказ (с учетом корректировок)");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

#Если Клиент Тогда

// Заполняет табличную часть при оперативном проведении, когда включены флаги авторазмещения и/или авторезервирования
//
// Параметры:
//  Кнопка - кнопка подменю "Заполнить и провести".
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведениемУпр(Параметры) Экспорт
	Параметры.Вставить("Заказ",ЭтотОбъект);
    Параметры.Вставить("РезервироватьПоСериям",ложь);
    УправлениеЗаказами.Заказ_ЗаполнитьТабличныеЧастиВозможнымРазмещением(Параметры, Товары, ВозвратнаяТара);
КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведениемУпр()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// По виду операции определяет статус партии товаров (не возвратная тара!)
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Значение перечисления "Статусы партии товаров".
//
Функция ОпределитьСтатусПартии() 

	Статус = Перечисления.СтатусыПартийТоваров.Купленный; 
	
	Возврат Статус;

КонецФункции // ОпределитьСтатусПартииПрихода()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	Возврат РезультатЗапросаПоТоварам.Выгрузить();

КонецФункции // ПодготовитьТаблицуТоваров()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента)

	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();

	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));

	Возврат ТаблицаТары;

КонецФункции // ПодготовитьТаблицуТары()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация");
					
	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	Если Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Заказчик");
	КонецЕсли;
	
	//m.ionov@a-prof.ru 15.10.2014
	Если ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_ЗаявкаНаПеремещение
		ИЛИ ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_ПередачаPOSM
		Тогда
		СтруктураОбязательныхПолей.Вставить("КП_Отделение");	
		СтруктураОбязательныхПолей.Вставить("КП_УсловиеПоставки");
		СтруктураОбязательныхПолей.Вставить("СП_Склад");	
		СтруктураОбязательныхПолей.Вставить("КП_ДатаДоставки");
		
		СтруктураОбязательныхПолей.Вставить("СП_СкладТранзит");
		СтруктураОбязательныхПолей.Вставить("СП_СкладПретензий");
		
		//m.ionov@a-prof.ru 31.01.2015
		Если КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоТЭК Тогда
			СтруктураОбязательныхПолей.Вставить("КП_ТЭК");
			СтруктураОбязательныхПолей.Вставить("КП_АдресДоставкиТЭК");
			СтруктураОбязательныхПолей.Вставить("КП_ДатаДоставкиТЭК");
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		//m.ionov@a-prof.ru 25.02.2015
		Если ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_ПередачаPOSM Тогда
			СтруктураОбязательныхПолей.Вставить("Контрагент");	
		КонецЕсли;
		
		Если НЕ КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз Тогда
			СтруктураОбязательныхПолей.Вставить("Грузополучатель");
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
	КонецЕсли;
	//----m.ionov@a-prof.ru---

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//m.ionov@a-prof.ru 15.10.2014
	Если Не Отказ и (ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_ЗаявкаНаПеремещение
		ИЛИ ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_ПередачаPOSM) Тогда
		Если Не ТипЗнч(Заказчик) = Тип("СправочникСсылка.Склады") Тогда	
			ОбщегоНазначения.СообщитьОбОшибке("Выбран не верный заказчик!", Отказ, Заголовок);	
		КонецЕсли;
		Если Не СП_Склад.НСИ_ДоступенДляРезервирования Тогда	
			ОбщегоНазначения.СообщитьОбОшибке("Выбран склад отгрузки не доступный для резервирования!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
	//начало изменений Ожиганов 21.04.2015 37907 
	Если  Не Отказ 
		и (СтруктураШапкиДокумента.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_ЗаявкаНаПеремещение)
	Тогда	
		Если СтруктураШапкиДокумента.КП_Отделение <> СтруктураШапкиДокумента.ОтделениеСклада Тогда
				ОбщегоНазначения.СообщитьОбОшибке("не совпадает отделение склада и отделение заказа
					|отделение склада "+СокрЛп(СтруктураШапкиДокумента.ОтделениеСклада)+"
					|отделение заказа "+СокрЛп(СтруктураШапкиДокумента.КП_Отделение),Отказ);
		КонецЕслИ;	
	КонецЕсли;	
	

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ИмяТабличнойЧасти = "Товары";

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество");
	
	//m.ionov@a-prof.ru 30.09.2014
	Если ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_ЗаявкаНаПеремещение
		ИЛИ ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_ПередачаPOSM Тогда
		СтруктураОбязательныхПолей.Вставить("ЕдиницаИзмеренияМест");
	КонецЕсли;
	//----m.ionov@a-prof.ru---

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов-комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);


	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	Для Каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
		Если ТипЗнч(СтрокаТЧ.Размещение) = Тип("СправочникСсылка.Склады")
			И ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			Если СтрокаТЧ.Размещение = Заказчик Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " табличной части ""Товары"" выбран склад, совпадающий со складом-заказчиком внутреннего заказа. " + Символы.ПС + "Нельзя зарезервировать товар на складе-заказчике.", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	//{09.09.2015 Островерхий заявка №43562 
	Если ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_СписаниеPOSM
		ИЛИ ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_ПередачаPOSM Тогда
		ПроверитьЧтоНоменклатураСоответствуетВидуОперации(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли; 
	//09.09.2015 Островерхий} 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЧтоНоменклатураСоответствуетВидуОперации(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений = Неопределено, 
                                                    Отказ, Заголовок)
													
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ПОМЕСТИТЬ втДоступнаяНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				Номенклатура.Ссылка
		|			ИЗ
		|				Справочник.Номенклатура КАК Номенклатура
		|			ГДЕ
		|				ВЫБОР
		|					КОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_СписаниеPOSM)
		|						ТОГДА Номенклатура.ВидНоменклатуры.Наименование = ""10.14.5 Временные POS - материалы""
		|					ИНАЧЕ Номенклатура.ВидНоменклатуры В
		|							(ВЫБРАТЬ
		|								ВидыНоменклатуры.Ссылка КАК Ссылка
		|							ИЗ
		|								Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|							ГДЕ
		|								ВидыНоменклатуры.Наименование = ""10.14.3 Постоянные POS - материалы на складе""
		|		
		|							ОБЪЕДИНИТЬ ВСЕ
		|		
		|							ВЫБРАТЬ
		|								ВидыНоменклатуры.Ссылка
		|							ИЗ
		|								Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|							ГДЕ
		|								ВидыНоменклатуры.Наименование = ""10.14.2 Рекламные материалы свыше 100 руб с НДС""
		|		
		|							ОБЪЕДИНИТЬ ВСЕ
		|		
		|							ВЫБРАТЬ
		|								ВидыНоменклатуры.Ссылка
		|							ИЗ
		|								Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|							ГДЕ
		|								ВидыНоменклатуры.Наименование = ""10.14.1 Рекламные материалы стоимостью до 100 руб.с НДС"")
		|				КОНЕЦ
		|				И Номенклатура.ЭтоГруппа = ИСТИНА)
		|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнутреннийЗаказТовары.НомерСтроки,
		|	ВнутреннийЗаказТовары.Номенклатура
		|ИЗ
		|	Документ.ВнутреннийЗаказ.Товары КАК ВнутреннийЗаказТовары
		|ГДЕ
		|	ВнутреннийЗаказТовары.Ссылка = &ЗаказСсылка
		|	И НЕ ВнутреннийЗаказТовары.Номенклатура В
		|				(ВЫБРАТЬ
		|					втДоступнаяНоменклатура.Ссылка КАК Ссылка
		|				ИЗ
		|					втДоступнаяНоменклатура КАК втДоступнаяНоменклатура)";

	Запрос.УстановитьПараметр("ЗаказСсылка", ДокументОбъект.Ссылка);
    Запрос.УстановитьПараметр("ВидОперации", ДокументОбъект.ПРГ_ВидОперации);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'В строке номер ""%НомерСтроки%"" табличной части ""%ПредставлениеТабличнойЧасти%"": содержится номенклатура, не соответствующая виду операции "+ДокументОбъект.ПРГ_ВидОперации+".'");
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ВыборкаДетальныеЗаписи.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		
		ТекстПоля = ОбщегоНазначенияКлиентСервер.ПолучитьТекстДляВыдачиСообщенийПоСтрокеТЧ(ИмяТабличнойЧасти, ВыборкаДетальныеЗаписи.НомерСтроки, "Номенклатура");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект, ТекстПоля,, Отказ);
		
	КонецЦикла;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	                                                      Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// Здесь не должно быть размещений по НТТ
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);

	Для Каждого СтрокаТЧ Из ТаблицаПоТаре Цикл
		Если ТипЗнч(СтрокаТЧ.Размещение) = Тип("СправочникСсылка.Склады")
			И ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
			Если СтрокаТЧ.Размещение = Заказчик Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В строке № " + СтрокаТЧ.НомерСтроки + " табличной части ""Тара"" выбран склад, совпадающий со складом-заказчиком внутреннего заказа. " + Символы.ПС + "Нельзя зарезервировать товар на складе-заказчике.", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// Функция удаляет из исходной таблицы строки не требующие размещения
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам)

	ТаблицаПоТоварамРазмещение = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или (ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("ДокументСсылка.ЗаказПоставщику")
		 	И ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("ДокументСсылка.ЗаказНаПроизводство")
			И ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("ДокументСсылка.ВнутреннийЗаказ"))Тогда
			 ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРазмещение.Колонки.Размещение.Имя = "ЗаказПоставщику";
	
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // СоздатьТаблицуРазмещенияЗаказов()

// Функция удаляет из исходной таблицы строки не требующие резервирования
// Возвращается КОПИЯ исходной таблицы
//
Функция СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТоварам)

	ТаблицаПоТоварамРезервирование = ТаблицаПоТоварам.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Размещение) 
		 или ТипЗнч(СтрокаТаблицы.Размещение) <> Тип("СправочникСсылка.Склады") Тогда
			 ТаблицаПоТоварамРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаПоТоварамРезервирование.Колонки.Размещение.Имя = "Склад";
	
	Возврат ТаблицаПоТоварамРезервирование;
		
КонецФункции // СоздатьТаблицуРезервированияПодЗаказ()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
							ТаблицаПоТаре, Отказ, Заголовок);
							  
КонецПроцедуры // ДвиженияПоРегистрам()

// Формируем движения по упр. регистрам.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоТаре,
	                          Отказ, Заголовок);

	Если Не Отказ Тогда
	
		НаборДвижений = Движения.ВнутренниеЗаказы;
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
					
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
				
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ВнутреннийЗаказ", Ссылка);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Заказчик",        Заказчик);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",    ОпределитьСтатусПартии(),                         "ТаблицаПоТоварам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",    Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		ТаблицаПоТоварамРазмещение = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТоварам);
		ТаблицаПоТареРазмещение    = СоздатьТаблицуРазмещенияЗаказов(ТаблицаПоТаре);
		Если ТаблицаПоТоварамРазмещение.Количество() > 0 ИЛИ ТаблицаПоТареРазмещение.Количество() > 0 Тогда
			
			// По регистру РазмещениеЗаказовПокупателей
			НаборДвижений = Движения.РазмещениеЗаказовПокупателей;
			
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			НаборДвижений.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			
			Если Не Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРазмещение);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРазмещение);
							
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара",       Перечисления.ТоварТара.Тара,  "ТаблицаПоТаре");
					
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
			КонецЕсли;
		
		КонецЕсли;
		
		ТаблицаПоТоварамРезервирование = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТоварам);
		ТаблицаПоТареРезервирование    = СоздатьТаблицуРезервированияПодЗаказ(ТаблицаПоТаре);
		Если ТаблицаПоТоварамРезервирование.Количество() > 0 ИЛИ ТаблицаПоТареРезервирование.Количество() > 0 Тогда
			
			НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
			
			// Контроль остатков товара
			Если Товары.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли; 
			Если ВозвратнаяТара.Количество() <> 0 Тогда
				ПроцедурыКонтроляОстатков.ТоварыВРезервеНаСкладахКонтрольОстатков("ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
			КонецЕсли; 
			
			Если НЕ Отказ Тогда
			
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварамРезервирование);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТареРезервирование);
							
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
						
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументРезерва", Ссылка);
					
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Событие") Тогда

		// Заполнение шапки
		ВремяНапоминания  = Основание.ВремяНапоминания;
		Комментарий       = Основание.Комментарий;
		НапомнитьОСобытии = Основание.НапомнитьОСобытии;
		Ответственный     = Основание.Ответственный;
		ДокументОснование = Основание;
        Организация 	  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");

	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	ПРГПростоЗаписать = Ложь;
	Если ДополнительныеСвойства.Свойство("ПРГПростоЗаписать",ПРГПростоЗаписать) Тогда
		Если ПРГПростоЗаписать Тогда
			возврат;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 
	
	//начало изменений Ожиганов 05.06.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 	
	
    Если ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение И ВозвратнаяТара.Количество()>0 Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;
	
	/// Кунов О.В., 13.10.2016 - 55807
	ЭтоЗаявкаНаСИМ = (ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ЗаявканаСИМ);
	///
	
	//++ Spl_Апроф 25.12.2014 (k.russkih@a-prof.ru)
	//Если Товары.Количество() > 1 И НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
	//m.ionov@a-prof.ru 16.02.2015
	//Делаем проверку только при проведении
	//Если Товары.Количество() > 1 И НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
	Если НЕ Отказ И Товары.Количество() > 1 И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		//л_Метаданные = "Документ.ЗаказПокупателя.Товары"; //указываем Таблицу, синтаксис как в запросе
		//л_МассивРеквизитовТЧ = Новый Массив;
		//л_МассивРеквизитовТЧ.Добавить("Номенклатура");
		//л_МассивРеквизитовТЧ.Добавить("ХарактеристикаНоменклатуры");
		//Отказ = АП_ОбщегоНазначенияКлиент.АП_ПроверкаДубликатовСтрок(л_Метаданные, л_МассивРеквизитовТЧ, Ссылка);
		
		
		/// Кунов О.В., 13.10.2016 - 55807
		Если ЭтоЗаявкаНаСИМ Тогда
			мТаблицаПроверки = Товары.Выгрузить(, "Номенклатура, ХарактеристикаНоменклатуры, НомерСтроки, КлючПродукции");
		Иначе
			мТаблицаПроверки = Товары.Выгрузить(, "Номенклатура, ХарактеристикаНоменклатуры, НомерСтроки");
		КонецЕсли;
		///
		
		мТаблицаПроверки.Очистить();
		мОтказ = Ложь;
		
		Для каждого мСтрока Из Товары Цикл
			
			//m.ionov@a-prof.ru 20.02.2015
			
			/// Кунов О.В., 13.10.2016 - 55807
			Если Не ЭтоЗаявкаНаСИМ Тогда
				АП_ОбщегоНазначенияКлиент.ПроверитьНаКратностьВВода(мСтрока, Ложь, Истина);		
			КонецЕсли;
			///
			
			//----m.ionov@a-prof.ru---
			//начало изменений Ожиганов 05.06.2015 немножко оптимизируем 
			 мСтрока.Размещение = Неопределено;
			//конец изменений 
		
			/// Кунов О.В., 13.10.2016 - 55807
			Если ЭтоЗаявкаНаСИМ Тогда
				НайтиСтроки = мТаблицаПроверки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, КлючПродукции", мСтрока.Номенклатура, мСтрока.ХарактеристикаНоменклатуры, мСтрока.КлючПродукции));
			Иначе
				НайтиСтроки = мТаблицаПроверки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", мСтрока.Номенклатура, мСтрока.ХарактеристикаНоменклатуры));
			КонецЕсли;
			///
			
			Если НайтиСтроки.Количество() = 0 Тогда
				
				НоваяСтрока = мТаблицаПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, мСтрока);				
			Иначе
				
				ОбщегоНазначения.СообщитьОбОшибке("В табличной части ""Товары"" имеются дубликаты строк: ");
				ОбщегоНазначения.СообщитьОбОшибке("Строка: " 
				+ СокрЛП(мСтрока.НомерСтроки) + Символы.ПС + Символы.Таб
				+ "Номенклатура: """ + СокрЛП(мСтрока.Номенклатура) + """" 
				+ ", Характеристика номенклатуры: """ + СокрЛП(мСтрока.ХарактеристикаНоменклатуры) + """");
				
				мОтказ = Истина;
				
			КонецЕсли; 
		
		КонецЦикла; 
		
		Отказ = мОтказ;
	КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	//m.ionov@a-prof.ru 15.10.2014
	//ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	//----m.ionov@a-prof.ru---
	//начало изменений Ожиганов 05.06.2015 немножко оптимизируем 
	Для каждого мСтрока Из ВозвратнаяТара Цикл
			 мСтрока.Размещение = Неопределено;
	КонецЦикла; 
	//конец изменений 
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//m.ionov@a-prof.ru 31.01.2015
	ТабВеса = Товары.Выгрузить(,"Номенклатура,Количество,КоличествоМест,ЕдиницаИзмерения,ЕдиницаИзмеренияМест");
	
	СтуктураВесов = АП_ОбщегоНазначенияКлиент.ПолучитьИтоговыйВес(ТабВеса);
		
	КП_ИтогоВес = СтуктураВесов.ВесБрутто;
	//----m.ionov@a-prof.ru---
	
	//m.ionov@a-prof.ru 15.10.2014
	Если Не ЭтоНовый() Тогда
		РазрешитьЗапись = Ложь;
		Если ДополнительныеСвойства.Свойство("РазрешитьЗапись", РазрешитьЗапись) = Ложь Тогда
			РазрешитьЗапись = Ложь;
		КонецЕсли;
		
		Если Не РазрешитьЗапись Тогда
			Отказ = Не АП_ОбщегоНазначенияСервер.МожноМенятьЗаказ(Ссылка);
			
			Если Отказ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Заказ " + СокрЛП(Ссылка) + " запрещено менять, так как есть введенные документы на основании", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		МенятьСтатус = Истина;
		Если ДополнительныеСвойства.Свойство("МенятьСтатус", МенятьСтатус) = Ложь Тогда
			МенятьСтатус = Истина;
		КонецЕсли;
		Если МенятьСтатус Тогда
			АП_СтатусЗаказа = АП_ОбщегоНазначенияСервер.ВернутьСтатусЗаказа(Ссылка, ПометкаУдаления);
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	//начало изменений Ожиганов 21.04.2015 37907 
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "СП_Склад", "НСИ_Отделение", "ОтделениеСклада");
	//конец изменений 
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);

	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Размещение"                , "Размещение");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"       , "Размещение.ВидСклада");

	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей);

	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента);

	// Проверить заполнение ТЧ "Товары" и "Возвратная тара".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//начало изменений БП 04 
	Если ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ЗаявканаСИМ Тогда
		возврат;
	КонецЕсли;	
	//конец изменений БП 04	 
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам,
							ТаблицаПоТаре, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	ПРГПростоЗаписать = Ложь;
	Если ДополнительныеСвойства.Свойство("ПРГПростоЗаписать",ПРГПростоЗаписать) Тогда
		Если ПРГПростоЗаписать Тогда
			возврат;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 
	
	
	//m.ionov@a-prof.ru 23.09.2014
	Если Не Отказ Тогда
		МенятьСтатус = Истина;
		Если ДополнительныеСвойства.Свойство("МенятьСтатус", МенятьСтатус) = Ложь Тогда
			МенятьСтатус = Истина;
		КонецЕсли;
		Если МенятьСтатус Тогда
			//Запишем изменение статуса
			ЗаписатьИзменениеСтатусов(Отказ);
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
		
КонецПроцедуры

//m.ionov@a-prof.ru 10.10.2014
Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	//начало изменений б/н исправление ошибки вставка неуникальных значений  07.09.2016 
	//Движения по регистру накопления "АП_СтатусыДокументов"
	//ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	ТекДата = ТекущаяДата();
	КонДня = КонецДня(ТекущаяДата());
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(КонДня, Новый Структура("Документ", Ссылка));
	//конец изменений 
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		//начало изменений б/н исправление ошибки вставка неуникальных значений  07.09.2016 
		//СформируемЗаписьПоРегиструСтатусы(Отказ);
		СформируемЗаписьПоРегиструСтатусы(Отказ,ТекДата);
		//конец изменений 
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = АП_СтатусЗаказа Тогда
		//начало изменений б/н исправление ошибки вставка неуникальных значений  07.09.2016 
		//СформируемЗаписьПоРегиструСтатусы(Отказ);
		СформируемЗаписьПоРегиструСтатусы(Отказ,Макс(ДанныеПоСтатусу[0].Период,ТекДата));
	    //СформируемЗаписьПоРегиструСтатусы(Отказ);
		//конец изменений 
	КонецЕсли;
	
КонецПроцедуры

//начало изменений б/н исправление ошибки вставка неуникальных значений  07.09.2016 
//Процедура СформируемЗаписьПоРегиструСтатусы(Отказ)
Процедура СформируемЗаписьПоРегиструСтатусы(Отказ,ТекДата)
//конец изменений 	

	//начало изменений б/н исправление ошибки вставка неуникальных значений  07.09.2016 
	//мДатаЗаписи = ТекущаяДата();
	мДатаЗаписи = ТекДата;
	//конец изменений 
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	//начало изменений б/н исправление ошибки вставка неуникальных значений  07.09.2016 
	НаборЗаписей.Прочитать();
	
	Пока НаборЗаписей.Количество() > 0 Цикл
	
		мДатаЗаписи  = мДатаЗаписи + 1;
		
		НаборЗаписей.Очистить();
		
		
		//НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
		
		НаборЗаписей.Прочитать();
	КонецЦикла;
	
	//конец изменений 
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = АП_СтатусЗаказа;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры

Процедура ВвестиЗаданиеНаПодбор(ФормаЗаказа) Экспорт
	
	Если ЭтоНовый() Или Не Проведен Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Ввести задание на подбор можно только после проведения документа!");
		
		Возврат;
	КонецЕсли;
	
	ЗаданиеНаПодбор = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(Ссылка);
	Если Не ЗначениеЗаполнено(ЗаданиеНаПодбор) Тогда

		#Если Клиент Тогда
		Если Не ФормаЗаказа = Неопределено И ФормаЗаказа.Модифицированность() Тогда
			Предупреждение("Необходимо записать заказ, перед вводом задания",60);
			Возврат;
		КонецЕсли;
		#КонецЕсли
		ЗаданиеНаПодбор = Документы.СП_ЗаданиеНаПодбор.СоздатьДокумент();
		ЗаданиеНаПодбор.Заполнить(Ссылка);
	КонецЕсли;
	
	ЗаданиеНаПодбор.ПолучитьФорму(,ФормаЗаказа).Открыть();	
	
КонецПроцедуры

Процедура ВвестиЗаданиеНаПеревозку(ФормаЗаказа) Экспорт
	
	Если Не АП_ОбщегоНазначенияКлиент.ТребуетсяЗаданиеНаПеревозку(ЭтотОбъект) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По внутреннему заказу с самовывозом не вводится задание на перевозку!");
		
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Или Не Проведен Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Ввести задание на перевозку можно только после проведения документа!");
		
		Возврат;
	КонецЕсли;
	
	ЗаданиеНаПеревозку = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПеревозкуПоЗаказу(Ссылка);
	Если Не ЗначениеЗаполнено(ЗаданиеНаПеревозку) Тогда

		#Если Клиент Тогда
		Если Не ФормаЗаказа = Неопределено И ФормаЗаказа.Модифицированность() Тогда
			Предупреждение("Необходимо записать заказ, перед вводом задания",60);
			Возврат;
		КонецЕсли;
		#КонецЕсли
		
		ЗаданиеНаПеревозку = Документы.ПТЛ_ЗаданиеНаПеревозку.СоздатьДокумент();
		ЗаданиеНаПеревозку.Заполнить(Ссылка);
	КонецЕсли;
	
	ЗаданиеНаПеревозку.ПолучитьФорму(,ФормаЗаказа).Открыть();	
	
КонецПроцедуры

Процедура ПриИзмененииЗаказчика(Загрузка = Ложь) Экспорт
	Если ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_ПередачаPOSM Тогда
		Грузополучатель = Контрагент.НСИ_АП;
		ПриИзмененииАдресаПоставки(Загрузка = Ложь);
		ПриИзменииДатыДоставки();
	Иначе
		//Blik 150817 65458 н
		Если ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера  
			//или ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру 
			Тогда
			Если ТипЗнч(Заказчик) = Тип("СправочникСсылка.Склады") Тогда
				Грузополучатель = Заказчик.НСИ_АП;
				ПриИзмененииАдресаПоставки(Загрузка = Ложь);
				ПриИзменииДатыДоставки();
			Иначе
				Грузополучатель = Справочники.АдресаПоставки.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру Тогда
			 Грузополучатель = Справочники.АдресаПоставки.ПустаяСсылка();
			//Blik 150817 65458 к
		Иначе
			Если ТипЗнч(Заказчик) = Тип("СправочникСсылка.Склады") Тогда
				Грузополучатель = Заказчик.НСИ_АП;
				ПриИзмененииАдресаПоставки(Загрузка = Ложь);
				ПриИзменииДатыДоставки();
			Иначе
				Грузополучатель = Справочники.АдресаПоставки.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	//{14.09.2015 Островерхий заявка №43562 
	Подразделение = Заказчик.Подразделение; 
	//14.09.2015 Островерхий} 
	
КонецПроцедуры

Процедура ПриИзменииДатыДоставки() Экспорт
	Если КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоТЭК Тогда
		ДатаОтгрузки = АП_ОбщегоНазначенияСервер.РассчитатьДатуОтгрузки(КП_ДатаДоставкиТЭК, КП_Отделение, КП_УсловиеПоставки, КП_АдресДоставкиТЭК.НСИ_Город, КП_АдресДоставкиТЭК);
		//Blik 150817 65458 н
	ИначеЕсли ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру  Тогда
		ДатаОтгрузки = АП_ОбщегоНазначенияСервер.РассчитатьДатуОтгрузки(КП_ДатаДоставки, КП_Отделение, КП_УсловиеПоставки, КП_ГородДоставки, Грузополучатель);	
	ИначеЕсли ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера Тогда
		ДатаОтгрузки = АП_ОбщегоНазначенияСервер.РассчитатьДатуОтгрузки(КП_ДатаДоставки, КП_Отделение, КП_УсловиеПоставки, АдресОтгрузки.НСИ_Город, АдресОтгрузки);
		//Blik 150817 65458 к
	Иначе
		ДатаОтгрузки = АП_ОбщегоНазначенияСервер.РассчитатьДатуОтгрузки(КП_ДатаДоставки, КП_Отделение, КП_УсловиеПоставки, КП_ГородДоставки, Грузополучатель);
	КонецЕсли;

	//ДатаОтгрузки = АП_ОбщегоНазначенияСервер.РассчитатьДатуОтгрузки(КП_ДатаДоставки, КП_Отделение, КП_УсловиеПоставки, КП_ГородДоставки, Грузополучатель);

КонецПроцедуры
 
Процедура ПриИзменииДатыОтгрузки() Экспорт

	КП_ДатаДоставки = АП_ОбщегоНазначенияСервер.РассчитатьДатуПоставки(ДатаОтгрузки, КП_Отделение, КП_УсловиеПоставки, КП_ГородДоставки, Грузополучатель);

КонецПроцедуры


Процедура ОбработкаУдаленияПроведения(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если АП_ОбщегоНазначенияСервер.ЕстьРезервПоЗаказу(Ссылка) Тогда
		Если РольДоступна("АП_Администратор") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение внутреннего заказа. По заказу есть резервы!", Ложь, "Отмена проведения внутреннего заказа");
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение внутреннего заказа. По заказу есть резервы!", Отказ, "Отмена проведения внутреннего заказа");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(Ссылка)) Или ЗначениеЗаполнено(АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПеревозкуПоЗаказу(Ссылка)) Тогда
		Если РольДоступна("АП_Администратор") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение внутреннего заказа. По заказу сформированные документы!", Ложь, "Отмена проведения внутреннего заказа");
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение внутреннего заказа. По заказу сформированные документы!", Отказ, "Отмена проведения внутреннего заказа");
		КонецЕсли;				
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	АП_СтатусЗаказа = Перечисления.АП_СтатусыЗаказов.Сформирован;
	АП_СтатусЗаданияНаПодбор = Перечисления.СП_СтатусыЗаданияНаПодбор.ПустаяСсылка();
	АП_СтатусЗаданияНаПеревозку = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.ПустаяСсылка();
КонецПроцедуры       

Процедура ОбновитьЗадания(Отказ, ВыводитьСообщение = Истина) Экспорт
	
	Если ЭтоНовый() Или Не Проведен Тогда
		Возврат;
	КонецЕсли;
	
	//Задание на подбор
	Задание = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(Ссылка);
	Если ЗначениеЗаполнено(Задание) Тогда
		ОбъектЗадание = Задание.ПолучитьОбъект();
		ОбъектЗадание.Заполнить(Ссылка);
		
		Если ОбъектЗадание.Дата < Дата Тогда
			ОбъектЗадание.Дата = Дата + 1;
		КонецЕсли;
	
		Попытка
		
			Если ОбъектЗадание.Проведен Тогда
				ОбъектЗадание.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
			Иначе
				ОбъектЗадание.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Если ВыводитьСообщение Тогда
				ОбщегоНазначения.Сообщение("Обновлено задание " + СокрЛП(Задание), СтатусСообщения.Информация);
			КонецЕсли;
		Исключение
	    	ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
		КонецПопытки;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Задание на перевозку
    Задание = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПеревозкуПоЗаказу(Ссылка);
	
	Если ЗначениеЗаполнено(Задание) Тогда
		ОбъектЗадание = Задание.ПолучитьОбъект();
		ОбъектЗадание.Заполнить(Ссылка);
		
		Если ОбъектЗадание.Дата < Дата Тогда
			ОбъектЗадание.Дата = Дата + 1;
		КонецЕсли;
	
		Попытка
		
			Если ОбъектЗадание.Проведен Тогда
				ОбъектЗадание.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);	
			Иначе
				ОбъектЗадание.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Если ВыводитьСообщение Тогда
				ОбщегоНазначения.Сообщение("Обновлено задание " + СокрЛП(Задание), СтатусСообщения.Информация);
			КонецЕсли;
		Исключение
	    	ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииАдресаПоставки(Загрузка = Ложь) Экспорт
	Если Грузополучатель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресДоставки = АП_ОбщегоНазначенияСервер.ПолучитьАдресДоставкиСтрокой(Грузополучатель, ДополнениеКАдресуДоставки);	
	
	Если ТипЗнч(Грузополучатель) = Тип("СправочникСсылка.АдресаПоставки") Тогда
		Если ПустаяСтрока(АдресДоставки) Тогда
			АдресДоставки = СокрЛП(Грузополучатель);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_УсловияПоставки) Тогда
			//Blik 220817 65458 н
			//КП_УсловиеПоставки = Грузополучатель.НСИ_УсловияПоставки;
			Если ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера Тогда
				 КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаОтКопекера;
			ИначеЕсли ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру Тогда
				 КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоКопекера;	
			Иначе
				КП_УсловиеПоставки = Грузополучатель.НСИ_УсловияПоставки;
			КонецЕсли;
			//Blik 220817 65458 к
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Отделение) И Не ЗначениеЗаполнено(КП_Отделение) Тогда
			КП_Отделение = Грузополучатель.НСИ_Отделение;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Склад) И Не ЗначениеЗаполнено(СП_Склад) Тогда
			СП_Склад = Грузополучатель.НСИ_Склад;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.ПТЛ_Маршрут) Тогда
			КП_Маршрут = Грузополучатель.ПТЛ_Маршрут;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Город) Тогда
			КП_ГородДоставки = Грузополучатель.НСИ_Город;
		КонецЕсли;
        Если ЗначениеЗаполнено(Грузополучатель.НСИ_ЖДСтанция) Тогда
			КП_ЖДСтанция = Грузополучатель.НСИ_ЖДСтанция;
		КонецЕсли; 
		Если ЗначениеЗаполнено(Грузополучатель.ПТЛ_ТЭК) И КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоТЭК Тогда
			КП_ТЭК = Грузополучатель.ПТЛ_ТЭК;
			КП_АдресДоставкиТЭК = Грузополучатель.КП_АдресДоставкиТЭК;
			КомментарийАдреса = "";
			КП_АдресТЭК = АП_ОбщегоНазначенияСервер.ПолучитьАдресДоставкиСтрокой(КП_АдресДоставкиТЭК, КомментарийАдреса);
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.ПТЛ_КомментарийДиспетчеру) Тогда
			КП_КомментарийКДоставке = Грузополучатель.ПТЛ_КомментарийДиспетчеру;
		КонецЕсли;   
	Иначе
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_УсловияПоставки) Тогда
			КП_УсловиеПоставки = Грузополучатель.НСИ_УсловияПоставки;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Отделение) И Не ЗначениеЗаполнено(КП_Отделение) Тогда
			КП_Отделение = Грузополучатель.НСИ_Отделение;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Склад) И Не ЗначениеЗаполнено(СП_Склад) Тогда
			СП_Склад = Грузополучатель.НСИ_Склад;
		КонецЕсли;
		Если ЗначениеЗаполнено(Грузополучатель.НСИ_Город) Тогда
			КП_ГородДоставки = Грузополучатель.НСИ_Город;
		КонецЕсли;
	КонецЕсли;
	
	//ДатаОтгрузки = АП_ОбщегоНазначенияСервер.РассчитатьДатуОтгрузки(КП_ДатаДоставки, КП_Отделение, КП_УсловиеПоставки, КП_ГородДоставки, Грузополучатель);
	ПриИзменииДатыДоставки();
КонецПроцедуры

//Производит расчет резервов по заказу для отображения
Процедура ПолучитьТаблицуРезервов() Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТоварыВРезервеНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |		ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
				   |		ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток КАК Количество
	               |	ИЗ
	               |		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &Заказ) КАК ТоварыВРезервеНаСкладахОстатки) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры";
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТаблицаРезервов = Новый ТаблицаЗначений;
	ТаблицаРезервов.Колонки.Добавить("КлючСтроки");
	ТаблицаРезервов.Колонки.Добавить("Количество");
	
	Для Каждого ТекСтрока Из Товары Цикл
		Количество = ТекСтрока.Количество*ТекСтрока.Коэффициент;
		Если ТекСтрока.КлючСтроки = 0 Тогда
			ТекСтрока.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		КонецЕсли;
		МассивСтрок = ТЗ.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", ТекСтрока.Номенклатура, ТекСтрока.ХарактеристикаНоменклатуры));
		
		Для Каждого ТабСтрока Из МассивСтрок Цикл
			//Кво = МИН(ТабСтрока.Количество, Количество);
			Кво = ТабСтрока.Количество;
			Если Кво > 0 Тогда
				НовСтрока = ТаблицаРезервов.Добавить();
				НовСтрока.КлючСтроки = ТекСтрока.КлючСтроки;
				НовСтрока.Количество = Кво;
				ТабСтрока.Количество = ТабСтрока.Количество - Кво;
				Количество = Количество - Кво;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТаблицаРезервов.Свернуть("КлючСтроки", "Количество");
		
КонецПроцедуры


//----m.ionov@a-prof.ru---

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");