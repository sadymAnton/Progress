Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем АвтоЗначенияРеквизитов Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

//Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

//Определение периода движений документа
Перем ДатаДвижений;

Перем РасчетыВозврат;

Перем мСтруктураПараметровДенежныхСредств;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Формирует печатную форму 
// платежного поручения
//
// Параметры:
//  ТабДок - табличный документ
//
Функция ПечатьПлатежногоПоручения() Экспорт

	Если Организация.Пустая() Тогда
		Сообщить("Не указана организация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Если Контрагент.Пустая() И Не ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		Сообщить("Не указан контрагент.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерПечать=ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	
	Если Прав(НомерПечать,3)="000" И Дата < '20120709' Тогда
		Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПлатежноеПоручение_ПлатежноеПоручение";
	
	Макет = ПолучитьОбщийМакет("ПлатежноеПоручение");
	Обл   = Макет.ПолучитьОбласть("ЗаголовокТаблицы");

	МесяцПрописью   = СчетОрганизации.МесяцПрописью;
	СуммаБезКопеек  = СчетОрганизации.СуммаБезКопеек;
	ФорматДаты      = "ДФ=" + ?(МесяцПрописью = 1,"'дд ММММ гггг'","'дд.ММ.гггг'");
	БанкОрганизации = ?(НЕ ЗначениеЗаполнено(СчетОрганизации.БанкДляРасчетов), СчетОрганизации.Банк, СчетОрганизации.БанкДляРасчетов);
	БанкКонтрагента = ?(НЕ ЗначениеЗаполнено(СчетКонтрагента.БанкДляРасчетов), СчетКонтрагента.Банк, СчетКонтрагента.БанкДляРасчетов);

	Обл.Параметры.НаименованиеНомер       = "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ № " + НомерПечать;
	Обл.Параметры.ДатаДокумента           = Формат(Дата,ФорматДаты);
	Обл.Параметры.ВидПлатежа              = ВидПлатежа;
	Обл.Параметры.СуммаЧислом             = ФорматироватьСумму(СуммаДокумента,СуммаБезКопеек);
	Обл.Параметры.СуммаПрописью           = ФорматироватьСуммуПрописи(СуммаДокумента,СуммаБезКопеек);

	Обл.Параметры.ПлательщикИНН           = "ИНН " + ?(ПустаяСтрока(ИННПлательщика), Организация.ИНН, СокрЛП(ИННПлательщика));
	Обл.Параметры.ПлательщикКПП           = "КПП " + ?(ПустаяСтрока(КППплательщика),?(ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога,"0",""),СокрЛП(КППплательщика));	
	
	Если СчетОрганизации.БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондент="";
	Иначе	
		СтрКорреспондент= " р/с " + СчетОрганизации.НомерСчета+ " в " + СчетОрганизации.Банк + " " + СчетОрганизации.Банк.Город;	
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		ТекстПлательщикПечать=?(ПустаяСтрока(Организация.НаименованиеПлательщикаПриПеречисленииНалогов),
								?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика)),Организация.НаименованиеПлательщикаПриПеречисленииНалогов+СтрКорреспондент);
	Иначе
        ТекстПлательщикПечать=?(ПустаяСтрока(ТекстПлательщика),Организация.НаименованиеПолное,СокрЛП(ТекстПлательщика));
		
	КонецЕсли;
	
	Обл.Параметры.Плательщик              = ТекстПлательщикПечать;
	Обл.Параметры.БанкПлательщика         = "" + БанкОрганизации + " " + БанкОрганизации.Город;

	Обл.Параметры.НомерСчетаПлательщика   = ВернутьРасчетныйСчет(СчетОрганизации);

	Обл.Параметры.БикБанкаПлательщика     = БанкОрганизации.Код;
	Обл.Параметры.СчетБанкаПлательщика    = БанкОрганизации.КоррСчет;
	
	Если НЕ ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Контрагент.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(КПППолучателя),"",СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Контрагент.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		
	Иначе
		
		Обл.Параметры.ПолучательИНН           = "ИНН " + ?(ПустаяСтрока(ИННПолучателя), Организация.ИНН, СокрЛП(ИННПолучателя));
		Обл.Параметры.ПолучательКПП           = "КПП " + ?(ПустаяСтрока(КПППолучателя),"",СокрЛП(КПППолучателя));
		Обл.Параметры.Получатель              = ?(ПустаяСтрока(ТекстПолучателя),Организация.НаименованиеПолное,СокрЛП(ТекстПолучателя));
		
	КонецЕсли;
		
	Обл.Параметры.БанкПолучателя          = "" + БанкКонтрагента + " " + БанкКонтрагента.Город;
	Обл.Параметры.БикБанкаПолучателя      = БанкКонтрагента.Код;
	Обл.Параметры.СчетБанкаПолучателя     = БанкКонтрагента.КоррСчет;

	Обл.Параметры.НомерСчетаПолучателя    = ВернутьРасчетныйСчет(СчетКонтрагента);

	Обл.Параметры.НазначениеПлатежа       = СокрЛП(НазначениеПлатежа);
	Обл.Параметры.Очередность             = ОчередностьПлатежа;
	Обл.Параметры.СрокПлатежа             = "";

	// Реквизиты для перечисления в бюджет
	Если ПеречислениеВБюджет Тогда
		
		// Подготовим унифицированные данные
		РеквизитыПлатежаВБюджет = Документы.ПлатежноеПоручениеИсходящее.РеквизитыПлатежаВБюджет(ЭтотОбъект);
		
		// В незаполненных полях проставим "0"
		ПлатежиВБюджетКлиентСервер.ОтметитьНезаполненныеЗначения(РеквизитыПлатежаВБюджет);
		
		// Проверим правильность оформления
		РезультатПроверки = ПлатежиВБюджетКлиентСервер.ПроверитьЗаполнение(РеквизитыПлатежаВБюджет, 
				Документы.ПлатежноеПоручениеИсходящее.КонтекстПлатежногоДокумента(ЭтотОбъект));
		
		Для Каждого Ошибка Из РезультатПроверки.Ошибки Цикл
			Сообщить(Ошибка.Описание, СтатусСообщения.Важное);
		КонецЦикла;
		
		// Напечатаем
		ДанныеДляПечати = Новый Структура;
		Документы.ПлатежноеПоручениеИсходящее.УстановитьЗначенияРеквизитовПлатежаВБюджет(
			ДанныеДляПечати,         // Кладем сюда с именами из макета
			РеквизитыПлатежаВБюджет, // Берем отсюда, здесь имена из модуля ПлатежиВБюджетКлиентСервер
			Истина); // Добавляем новые свойства в ДанныеДляПечати
		Обл.Параметры.Заполнить(ДанныеДляПечати);
		
	КонецЕсли;

	ТабДокумент.Вывести(Обл);

	Возврат ТабДокумент;

КонецФункции // ПечатьПлатежногоПоручения()

// Формирует печатную форму 
// заявки
//
Функция ПечатьПеречисленияЗарплаты()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ИтоговаяСумма = 0;
	
	Макет = ПолучитьМакет("ВедомостьПоПеречислениеЗПНаПК");
	Обл   = Макет.ПолучитьОбласть("Заголовок");
	
	Обл.Параметры.ДатаФормирования= Дата;
	Обл.Параметры.НаименованиеОрганизации= "" + Организация;
	
	ЗапросПоНС = Новый Запрос("ВЫБРАТЬ
	                          |	БанковскиеСчета.Ссылка,
	                          |	БанковскиеСчета.НомерСчета
	                          |ИЗ
	                          |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	                          |ГДЕ
	                          |	БанковскиеСчета.Ссылка = &Ссылка");
	
	ЗапросПоНС.УстановитьПараметр("Ссылка", СчетКонтрагента);
	Выборка = ЗапросПоНС.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Обл.Параметры.РасчетныйСчетОрганизации= "Р/С №" + Выборка.НомерСчета;
	
	ТабДокумент.Вывести(Обл);
	
	Для каждого СтрокаПлатежа ИЗ ПеречислениеЗаработнойПлаты Цикл
		
		ЗапросПоВедомости = Новый Запрос("ВЫБРАТЬ
		                                 |	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
		                                 |	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма,
		                                 |	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
		                                 |ИЗ
		                                 |	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		                                 |ГДЕ
		                                 |	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка");
		
		
		ЗапросПоВедомости.УстановитьПараметр("Ссылка", СтрокаПлатежа.Ведомость);
		
		ВыборкаФизЛиц = ЗапросПоВедомости.Выполнить().Выбрать();
		
		Пока ВыборкаФизЛиц.Следующий() Цикл
		
		ЗапросПоФизЛицу = Новый Запрос("ВЫБРАТЬ
		                               |	ФизическиеЛица.Наименование
		                               |ИЗ
		                               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		                               |ГДЕ
		                               |	ФизическиеЛица.Ссылка = &Ссылка");
		
		ЗапросПоФизЛицу.УстановитьПараметр("Ссылка", ВыборкаФизЛиц.ФизЛицо);
		
		
		Обл   = Макет.ПолучитьОбласть("СтрокаВыплаты");
		
		Выборка = ЗапросПоФизЛицу.выполнить().Выбрать();
		Выборка.Следующий();
		
		// заполняем данные физ лица
		Обл.Параметры.ФИОСотрудника = Выборка.Наименование;
		
		Обл.Параметры.Сумма = ВыборкаФизЛиц.Сумма;
		ИтоговаяСумма = ИтоговаяСумма + ВыборкаФизЛиц.Сумма;
		
		// заполняем лицевой счет
		
		ЗапросПоЛС = Новый Запрос(
		"ВЫБРАТЬ
		|	ЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета
		|ИЗ
		|	РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
		|ГДЕ
		|	ЛицевыеСчетаРаботниковОрганизации.ФизЛицо = &ФизЛицо
		|	И ЛицевыеСчетаРаботниковОрганизации.Организация = &Организация
		|	И ЛицевыеСчетаРаботниковОрганизации.Банк = &Банк");
		
		ЗапросПоЛС.УстановитьПараметр("ФизЛицо", ВыборкаФизЛиц.ФизЛицо);
		ЗапросПоЛС.УстановитьПараметр("Организация", Организация);
		ЗапросПоЛС.УстановитьПараметр("Банк", Контрагент);
		
		ВыборкаЛС = ЗапросПоЛС.Выполнить().Выбрать();
		
		Если ВыборкаЛС.Следующий() Тогда
			Обл.Параметры.ЛицевойСчет = ВыборкаЛС.НомерЛицевогоСчета;
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);
		
	КонецЦикла;
		
	КонецЦикла;
	
	
	Обл=Макет.ПолучитьОбласть("Подвал");
	Обл.Параметры.СуммаИтого = ИтоговаяСумма;
	ТабДокумент.Вывести(Обл);
	
	// Первую колонку не печатаем
	ТабДокумент.ОбластьПечати = ТабДокумент.Область(1,1,ТабДокумент.ВысотаТаблицы,ТабДокумент.ШиринаТаблицы);
	
	Возврат ТабДокумент;
	
КонецФункции

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПлатежноеПоручение" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПлатежногоПоручения();
		
	ИначеЕсли ИмяМакета = "ПечатьПеречисленияЗарплаты" тогда

		// Управленческая печатная форма документа
		ТабДокумент = ПечатьПеречисленияЗарплаты();
		
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПлатежноеПоручение,ПечатьПеречисленияЗарплаты","Платежное поручение", "Ведомость для перечисления зарплаты");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Определяет номер расчетного счета по
// переданному банковскому счету
//
// Параметры:
//  СчетКонтра - справочник.БанковскиеСчета
//
// Возвращаемое значение
//  Номер расчетного счета
//
Функция ВернутьРасчетныйСчет(СчетКонтрагента)
	
	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;
	
КонецФункции // ВернутьРасчетныйСчет()

// Форматирует сумму прописью документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо представить прописью 
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСуммуПрописи(СуммаДок,СуммаБезКопеек)
	
	Результат     = СуммаДок;
	ЦелаяЧасть    = Цел(СуммаДок);
	ФорматСтрока  = "Л=ru_RU; ДП=Ложь";
	ПарамПредмета = СчетОрганизации.ВалютаДенежныхСредств.ПараметрыПрописиНаРусском;
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
			Результат = Лев(Результат,Найти(Результат,"0")-1);
		Иначе
			Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
		КонецЕсли;
	Иначе
		Результат = ЧислоПрописью(Результат,ФорматСтрока,ПарамПредмета);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСуммуПрописи()

// Форматирует сумму  документа
//
// Параметры:
//  СуммаДок - число - реквизит, который надо отформатировать
//  СуммаБезКопеек - булево - флаг представления суммы без копеек
//
// Возвращаемое значение
//  Отформатированную строку
//
Функция ФорматироватьСумму(СуммаДок,СуммаБезКопеек)
	
	Результат  = СуммаДок;
	ЦелаяЧасть = Цел(СуммаДок);
	
	Если (Результат - ЦелаяЧасть) = 0 Тогда
		Если СуммаБезКопеек Тогда
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат,Найти(Результат,"="));
		Иначе
			Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
		КонецЕсли;
	Иначе
		Результат = Формат(Результат,"ЧДЦ=2; ЧРД='-'; ЧГ=0");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ФорматироватьСумму()

// Процедура выполняет заполнение суммы документа,
// по регистру "СуммыЗаказов".
//
// Параметры:
//  ДокументОснование  - документ ссылка (Заказ покупателя, Заказ поставщику).
//  ВалютаДокумента    - валюта документа (валюта регламентированного учета организаций)
//  КурсВзаиморасчетов - курс взаиморасчетов по договору
//  КратностьВзаиморасчетов - кратность взаиморасчетов по договору
//
Процедура ЗаполнитьПоЗаказуУпр(ДокументОснование, СтрокаПлатеж)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ДокументОснование);
	
	Запрос.Текст ="ВЫБРАТЬ
	|	РасчетыСКонтрагентамиОстатки.Сделка Как Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентами.Остатки(, Сделка = &Заказ) КАК РасчетыСКонтрагентамиОстатки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Сделка = Выборка.Сделка;
		Если Выборка.Сумма < 0 Тогда
			СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.Сумма*(-1);
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма*(-1),
			СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, 
			ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоЗаказуУпр()

// Заполняет сумму документа и сумму взаиморасчетов на основании остатка
// по заявке в регистре "ЗаявкиНаРасходованиеСредств"
//
Процедура ЗаполнитьПоЗаявкеППУпр() Экспорт
	
	// Проверяем соответствие суммы взаиморасчетов документа сумме взаиморасчетов заявки
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаПлатежа,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Контрагент КАК Контрагент,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДоговорКонтрагента.Владелец.ОсновнойБанковскийСчет КАК СчетКонтрагента,
	|	ЗаявкиНаРасходованиеСредствОстатки.Сделка КАК Сделка,
	|	ЗаявкиНаРасходованиеСредствОстатки.ДокументРасчетовСКонтрагентом,
	|	ЗаявкиНаРасходованиеСредствОстатки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ЗаявкиНаРасходованиеСредствОстатки.Проект КАК Проект,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.ВалютаВзаиморасчетовПодотчетника КАК ВалютаВзаиморасчетовРаботника,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Ссылка КАК ЗаявкаНаРасходование,
	|	ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование.Получатель КАК Получатель
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаРасходованиеСредств.Остатки(, ЗаявкаНаРасходование = &ДокументЗаявка) КАК ЗаявкиНаРасходованиеСредствОстатки";
	
	Запрос.УстановитьПараметр("ДокументЗаявка",ДокументОснование);
	
	СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
	
	РезультатЗапроса=Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			
			СтрокаПлатеж				 = РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа	 = Выборка.СуммаПлатежа;
			Контрагент					 = Выборка.Контрагент;
			СтрокаПлатеж.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику
			ИЛИ ВидОперации=Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками Тогда
			
			СтрокаПлатеж   = РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетовРаботника Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				СтруктураКурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетовРаботника,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			ФизЛицо	                      = Выборка.Получатель;
			ВалютаВзаиморасчетовРаботника = Выборка.ВалютаВзаиморасчетовРаботника;
			
		Иначе
			
			Контрагент = Выборка.Контрагент;
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				СчетКонтрагента = Выборка.СчетКонтрагента;
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.СуммаВзаиморасчетов=Выборка.СуммаВзаиморасчетов;
			СтрокаПлатеж.СуммаПлатежа = Выборка.СуммаПлатежа;
			
			Если ВалютаДокумента = Выборка.ВалютаВзаиморасчетов Тогда
				СтрокаПлатеж.КурсВзаиморасчетов      = КурсДокумента;
				СтрокаПлатеж.КратностьВзаиморасчетов = КратностьДокумента;
			Иначе
				
				СтруктураКурсВзаиморасчетов=МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов,);
				СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсВзаиморасчетов.Кратность;
				
				Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
					СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
					/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаПлатеж.СтавкаНДС						 = СтавкаНДС;
			СтрокаПлатеж.Сделка							 = Выборка.Сделка;
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом	 = Выборка.ДокументРасчетовСКонтрагентом;
			СтрокаПлатеж.ДоговорКонтрагента				 = Выборка.ДоговорКонтрагента;
			
			УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
			
		КонецЕсли;
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств	 = Выборка.СтатьяДвиженияДенежныхСредств;
		СтрокаПлатеж.Проект							 = Выборка.Проект;
		СтрокаПлатеж.ДокументПланированияПлатежа	 = Выборка.ЗаявкаНаРасходование;
		СтрокаПлатеж.СуммаПлатежаПлан				 = СтрокаПлатеж.СуммаПлатежа;
		СтрокаПлатеж.КурсВзаиморасчетовПлан			 = СтрокаПлатеж.КурсВзаиморасчетов;
		
	КонецЦикла;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры // ЗаполнитьПоЗаявкеППУпр()

// Возвращает таблицу, аналогичную таблице "Расшифровка платежа" с добавленной колонкой "СуммаУпр"
//
Процедура ПолучитьТаблицуПлатежейППУпр()
	
	Запрос = Новый Запрос;
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
		ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(Дата, ВалютаДокумента, Ссылка, "ПлатежноеПоручениеИсходящее")

	Иначе
		
		Если ПеречислениеЗаработнойПлаты.Количество() > 0 Тогда
		
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
			|	НЕОПРЕДЕЛЕНО КАК Сделка,
			|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетовСКонтрагентом,
			|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
			|	НЕОПРЕДЕЛЕНО КАК ВедениеВзаиморасчетов,
			|	ПеречислениеЗаработнойПлатыДок.СуммаПлатежа КАК СуммаПлатежа,
			|	ПеречислениеЗаработнойПлатыДок.СуммаПлатежа КАК СуммаВзаиморасчетов,
			|	ПеречислениеЗаработнойПлатыДок.СуммаПлатежа КАК СуммаПлатежаПлан,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &ВалютаДокумента = &ВалютаУпрУчета
			|				ТОГДА ПеречислениеЗаработнойПлатыДок.СуммаПлатежа
			|			КОГДА &ВалютаДокумента <> &ВалютаУпрУчета
			|					И КурсыДокумента.Курс <> 0
			|					И КурсыУпрУчета.Курс <> 0
			|				ТОГДА ПеречислениеЗаработнойПлатыДок.СуммаПлатежа * КурсыДокумента.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &ВалютаДокумента = &ВалютаРеглУчета
			|				ТОГДА ПеречислениеЗаработнойПлатыДок.СуммаПлатежа
			|			КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
			|					ИЛИ КурсыДокумента.Курс ЕСТЬ NULL 
			|				ТОГДА 0
			|			КОГДА &ВалютаДокумента <> &ВалютаРеглУчета
			|					И КурсыДокумента.Курс <> 0
			|				ТОГДА ПеречислениеЗаработнойПлатыДок.СуммаПлатежа * КурсыДокумента.Курс / КурсыДокумента.Кратность
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
			|	ПеречислениеЗаработнойПлатыДок.СтатьяДвиженияДенежныхСредств,
			|	ПеречислениеЗаработнойПлатыДок.ДокументПланированияПлатежа,
			|	ПеречислениеЗаработнойПлатыДок.ДокументПланированияПлатежа.ВключатьВПлатежныйКалендарь КАК ВключатьВПлатежныйКалендарь,
			|	ПеречислениеЗаработнойПлатыДок.Проект,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Курс
			|	КОНЕЦ КАК КурсДокумента,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Кратность
			|	КОНЕЦ КАК КратностьДокумента,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Курс
			|	КОНЕЦ КАК КурсУпрУчета,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Кратность
			|	КОНЕЦ КАК КратностьУпрУчета
			|ИЗ
			|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПеречислениеЗаработнойПлатыДок
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсыДокумента
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ПеречислениеЗаработнойПлатыДок.Ссылка = &Ссылка";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
			|	НЕОПРЕДЕЛЕНО КАК Сделка,
			|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетовСКонтрагентом,
			|	ЛОЖЬ КАК ВестиПоДокументамРасчетовСКонтрагентом,
			|	НЕОПРЕДЕЛЕНО КАК ВедениеВзаиморасчетов,
			|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаПлатежа,
			|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаВзаиморасчетов,
			|	ВыплатаЗаработнойПлатыДок.СуммаДокумента КАК СуммаПлатежаПлан,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &ВалютаДокумента = &ВалютаУпрУчета
			|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента
			|			КОГДА &ВалютаДокумента <> &ВалютаУпрУчета
			|					И КурсыДокумента.Курс <> 0
			|					И КурсыУпрУчета.Курс <> 0
			|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента * КурсыДокумента.Курс * КурсыУпрУчета.Кратность / (КурсыУпрУчета.Курс * КурсыДокумента.Кратность)
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
			|	ВЫРАЗИТЬ(ВЫБОР
			|			КОГДА &ВалютаДокумента = &ВалютаРеглУчета
			|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента
			|			КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
			|					ИЛИ КурсыДокумента.Курс ЕСТЬ NULL 
			|				ТОГДА 0
			|			КОГДА &ВалютаДокумента <> &ВалютаРеглУчета
			|					И КурсыДокумента.Курс <> 0
			|				ТОГДА ВыплатаЗаработнойПлатыДок.СуммаДокумента * КурсыДокумента.Курс / КурсыДокумента.Кратность
			|			ИНАЧЕ 0
			|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
			|	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка) КАК СтатьяДвиженияДенежныхСредств,
			|	ЗНАЧЕНИЕ(Документ.ЗаявкаНаРасходованиеСредств.ПустаяСсылка) КАК ДокументПланированияПлатежа,
			|	ЛОЖЬ КАК ВключатьВПлатежныйКалендарь,
			|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Курс ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Курс
			|	КОНЕЦ КАК КурсДокумента,
			|	ВЫБОР
			|		КОГДА КурсыДокумента.Кратность ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыДокумента.Кратность
			|	КОНЕЦ КАК КратностьДокумента,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Курс ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Курс
			|	КОНЕЦ КАК КурсУпрУчета,
			|	ВЫБОР
			|		КОГДА КурсыУпрУчета.Кратность ЕСТЬ NULL 
			|			ТОГДА 0
			|		ИНАЧЕ КурсыУпрУчета.Кратность
			|	КОНЕЦ КАК КратностьУпрУчета
			|ИЗ
			|	Документ.ПлатежноеПоручениеИсходящее КАК ВыплатаЗаработнойПлатыДок
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаУпрУчета) КАК КурсыУпрУчета
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &ВалютаДокумента) КАК КурсыДокумента
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ВыплатаЗаработнойПлатыДок.Ссылка = &Ссылка";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаДокумента",   ДатаДвижений);
		Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
		Запрос.УстановитьПараметр("ВалютаУпрУчета",  глЗначениеПеременной("ВалютаУправленческогоУчета"));
		Запрос.УстановитьПараметр("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
		Запрос.УстановитьПараметр("Ссылка",          Ссылка);
		
		ТаблицаПлатежейУпр = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьТаблицуПлатежейППУпр()

Процедура ЗаполнитьНастройкуКнигиУСН() Экспорт

	#Если Клиент Тогда
	Если РучнаяНастройка_УСН Тогда
		ТекстВороса = 
		"Отражение платежа в Книге учета доходов и расходов настроено вручную.
		|Перезаполнить показатели Книги учета доходов и расходов?";
		Если Вопрос(ТекстВороса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			РучнаяНастройка_УСН = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли

	СуммаДляКУДиР = СуммаДокумента;

	Если НЕ ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		КурсВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СуммаДляКУДиР = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР, ВалютаДокумента, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
	КонецЕсли;

	Если НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата) Тогда

		Графа4_УСН      = СуммаДляКУДиР;
		Графа5_УСН      = СуммаДляКУДиР;
		Графа6_УСН      = 0;
		Графа7_УСН      = 0;
		НДС_УСН         = 0;
		ДоходыЕНВД_УСН  = Ложь;
		РасходыЕНВД_УСН = Ложь;
		Содержание_УСН  = "" + ВидОперации + ".";

		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю Тогда
			Содержание_УСН = "Возврат денежных средств покупателю";
			Графа4_УСН      = 0;
			Графа5_УСН      = 0;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьНастройкуКнигиУСН()
 
// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплата()

	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("ДатаОплаты","Не указана дата оплаты документа банком!");
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента","Не указан банковский счет, на который производится перевод!");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчеты()

	СтруктураПолей = Новый Структура("Организация,СуммаДокумента, Ответственный");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками Тогда

		СтруктураПолей.Вставить("ФизЛицо","Не указан работник");
		СтруктураПолей.Вставить("ДоговорЗайма","Не указан договор займа с работником");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда

		СтруктураПолей.Вставить("ФизЛицо","Не указано подотчетное лицо");
		СтруктураПолей.Вставить("ВалютаВзаиморасчетовРаботника","Не указана валюта взаиморасчетов с подотчетным лицом");

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СтруктураПолей.Вставить("СчетКонтрагента", "Не указан банковский счет, на который производится перевод!");
	Иначе
		СтруктураПолей.Вставить("Контрагент");
	КонецЕсли;

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплата()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)

	Если НЕ ЗначениеЗаполнено(Значение) Тогда 

		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		//начало изменений
		Если Дата > '20140101' Тогда
			ПроверитьЗначение(Платеж.СтатьяДвиженияДенежныхСредств,Отказ, Заголовок,"Статья движения денежных средств");
		КонецЕсли;
		//конец изменений 
		

		Если Не Отказ Тогда

			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;

			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)

	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли; 

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)
	
	мСтруктураПараметровДенежныхСредств.Вставить("РасчетыВозврат",            РасчетыВозврат);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",     ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",       СчетОрганизации);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",              ДатаДвижений);
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКассаПолучатель", СчетКонтрагента);
		мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредствПолучатель",  Перечисления.ВидыДенежныхСредств.Безналичные);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		мСтруктураПараметровДенежныхСредств.Вставить("ФизЛицо",                    ФизЛицо);
		мСтруктураПараметровДенежныхСредств.Вставить("РасчетныйДокументРаботника", РасчетныйДокументРаботника);
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.ПровестиСписаниеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	Иначе
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРазницам(Отказ, ПроводкиНУ, СуммаПроводки)
	
	УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
	Если НЕ УчетнаяПолитикаБух.ПоддержкаПБУ18 Тогда
		Возврат;
	КонецЕсли;              
	
	мКэшСчетов = Новый Соответствие;
	
		
		СуммаВПроводку = СуммаПроводки;
		
		Если ТипЗнч(СубконтоНУДт1)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СубконтоНУДт1.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СубконтоНУДт2)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СубконтоНУДт2.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СубконтоНУДт3)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СубконтоНУДт3.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СубконтоНУДт1)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СубконтоНУДт1.ВидПрочихДоходовИРасходов;
		ИначеЕсли ТипЗнч(СубконтоНУДт2)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СубконтоНУДт2.ВидПрочихДоходовИРасходов;
		ИначеЕсли ТипЗнч(СубконтоНУДт3)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СубконтоНУДт3.ВидПрочихДоходовИРасходов;
		Иначе
			ВидЗатрат = "";
		КонецЕсли;
		
		Если ВидЗатрат = "" Тогда
			
			СтруктураСчетаВКэше = мКэшСчетов[СчетУчетаРасчетовСКонтрагентом];
			Если СтруктураСчетаВКэше = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), Ложь, Дата);
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом] = Новый Соответствие;
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом].Вставить("", СчетНУСоответствующийСчетуБУ);
			Иначе
				СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[""];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), Ложь, Дата);
					СтруктураСчетаВКэше.Вставить("", СчетНУСоответствующийСчетуБУ);
				КонецЕсли;								
			КонецЕсли;
			
			Если СчетНУСоответствующийСчетуБУ = СчетУчетаРасчетовСКонтрагентомНУ	Тогда
				Возврат;
			КонецЕсли;
		Иначе
			
			СтруктураСчетаВКэше = мКэшСчетов[СчетУчетаРасчетовСКонтрагентом];
			Если СтруктураСчетаВКэше = Неопределено Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СчетУчетаРасчетовСКонтрагентом, ВидЗатрат), Ложь, Дата);
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом] = Новый Соответствие;
				мКэшСчетов[СчетУчетаРасчетовСКонтрагентом].Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
			Иначе
				СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[ВидЗатрат];
				Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СчетУчетаРасчетовСКонтрагентом, ВидЗатрат), Ложь, Дата);
					СтруктураСчетаВКэше.Вставить(ВидЗатрат, СчетНУСоответствующийСчетуБУ);
				КонецЕсли;								
			КонецЕсли;
			
			Если СчетНУСоответствующийСчетуБУ = СчетУчетаРасчетовСКонтрагентомНУ	Тогда
				Возврат;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ)	Тогда
				
				СтруктураСчетаВКэше = мКэшСчетов[СчетУчетаРасчетовСКонтрагентом];
				Если СтруктураСчетаВКэше = Неопределено Тогда
					СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), Ложь, Дата);
					мКэшСчетов[СчетУчетаРасчетовСКонтрагентом] = Новый Соответствие;
					мКэшСчетов[СчетУчетаРасчетовСКонтрагентом].Вставить("", СчетНУСоответствующийСчетуБУ);
				Иначе
					СчетНУСоответствующийСчетуБУ = СтруктураСчетаВКэше[""];
					Если СчетНУСоответствующийСчетуБУ = Неопределено Тогда
						СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СчетУчетаРасчетовСКонтрагентом), Ложь, Дата);
						СтруктураСчетаВКэше.Вставить("", СчетНУСоответствующийСчетуБУ);
					КонецЕсли;								
				КонецЕсли;
				
				Если СчетНУСоответствующийСчетуБУ = СчетУчетаРасчетовСКонтрагентомНУ	Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ) Тогда
			Сообщить("Не найдено соответствие для счета БУ " +  СчетУчетаРасчетовСКонтрагентом + ", разницы между БУ и НУ не рассчитаны");
			Возврат;
		КонецЕсли;
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "" + ВидОперации;
		
		Проводка.СчетДт      = СчетНУСоответствующийСчетуБУ;
		
		Если СчетНУСоответствующийСчетуБУ = ПланыСчетов.Налоговый.РасходыБудущихПериодовНаДобровольноеСтрахованиеРаботников Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СубконтоДт3);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СубконтоДт3);
		КонецЕсли;
		
		Проводка.Сумма = СуммаПроводки;
		Если ТипЗнч(СубконтоНУДт1) = Тип("СправочникСсылка.СтатьиЗатрат") И СубконтоНУДт1.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СубконтоНУДт1.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт2) = Тип("СправочникСсылка.СтатьиЗатрат") И СубконтоНУДт2.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт2) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СубконтоНУДт2.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт3) = Тип("СправочникСсылка.СтатьиЗатрат") И СубконтоНУДт3.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ИначеЕсли ТипЗнч(СубконтоНУДт3) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") И  НЕ СубконтоНУДт3.ПринятиеКналоговомуУчету Тогда
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР;
		Иначе
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР;
		КонецЕсли;
		Проводка.ВидУчетаДт = ВидУчета;
		
		Проводка = ПроводкиНУ.Добавить();
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "" + ВидОперации;
		Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентомНУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СубконтоНУДт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СубконтоНУДт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СубконтоНУДт3);
		Проводка.Сумма = - СуммаПроводки;
		
		Проводка.ВидУчетаДт = ВидУчета;
		
КонецПроцедуры

// Формирует запрос по табличной части документа
//
// Параметры:
//  нет
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоДокПлатежноеПоручение()

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументПеречислениеЗаработнойПлаты.Ссылка.ДатаОплаты КАК Период,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка КАК Ведомость,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо КАК ФизЛицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодРегистрации КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты,
	|	&СпособВыплаты КАК СпособВыплаты,
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ДокументПеречислениеЗаработнойПлаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацииЗарплата
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	|			ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
	|				И ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
	|				И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
	|		ПО ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка = ДокументПеречислениеЗаработнойПлаты.Ведомость
	|ГДЕ
	|	ДокументПеречислениеЗаработнойПлаты.Ссылка = &Ссылка
	|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументПеречислениеЗаработнойПлаты.Ссылка.ДатаОплаты,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ПериодРегистрации,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.Организация,
	|	ЗарплатаКВыплатеОрганизацииЗарплата.Ссылка.ХарактерВыплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплатеОрганизацииЗарплата.Сумма) <> 0";
	
	Запрос.УстановитьПараметр("Ссылка",			Ссылка);
	Запрос.УстановитьПараметр("СпособВыплаты",	Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапросПоДокПлатежноеПоручение

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента)
	
	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете И СтруктураШапкиДокумента.Оплачено) Тогда
		Возврат;
	КонецЕсли; 
	
	// Бухгалтерские проводки документа
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	ДатаДока   = ДатаДвижений;
	
	РасчетыВВалюте = Ложь;
	СчетКт = УправлениеДенежнымиСредствами.ОпределитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетОрганизации, мВалютаРегламентированногоУчета, РасчетыВВалюте);
	
	//начало изменений
	РасчетыПоВалютеДоговора = Ложь;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		Если РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
			РасчетыПоВалютеДоговора = Истина;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений
	
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
		мУпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
		
		Если НЕ мУпрощенныйУчетВзаиморасчетов Тогда
			
			Если Оплачено И ОтраженоВОперУчете Тогда
				
				ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
				// По регистру регламентированных расчетов с работниками
				
				Выборка = СформироватьЗапросПоДокПлатежноеПоручение().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					СтрокаДвижения = Движения.ВзаиморасчетыСРаботникамиОрганизаций.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДвижения,Выборка);
					СтрокаДвижения.ВидДвижения = ВидДвиженияНакопления.Расход;
				КонецЦикла;
				
				// По регистру расчетов с бюджетом по НДФЛ
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Ссылка",Ссылка);
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА ПлДок.Ссылка.Дата > КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
				|			ТОГДА ПлДок.Ссылка.Дата
				|		ИНАЧЕ КОНЕЦПЕРИОДА(МАКСИМУМ(ПлДок.Ведомость.ПериодРегистрации), МЕСЯЦ)
				|	КОНЕЦ КАК ДатаНДФЛ
				|ИЗ
				|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлДок
				|ГДЕ
				|	ПлДок.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ПлДок.Ссылка.Дата";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				ДатаНДФЛ = Выборка.ДатаНДФЛ;
				
				СтруктураДокумента = Новый Структура("ДатаНДФЛ,Ссылка,Период,ОбособленноеПодразделение,Организация",ДатаНДФЛ,Ссылка,Дата,Организация,ГоловнаяОрганизация);
				
				ТекстТаблицыВыплаты = 
				"ВЫБРАТЬ
				|	ЗарплатаКВыплате.Физлицо КАК ФизЛицо,
				|	СУММА(ЗарплатаКВыплате.Сумма) КАК Сумма
				|ПОМЕСТИТЬ ВТВыплатыФизлицам
				|ИЗ
				|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлДок
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
				|			ПО ЗарплатаКВыплате.Ссылка = РанееВыплаченныеСуммы.Ведомость
				|				И ЗарплатаКВыплате.Физлицо = РанееВыплаченныеСуммы.Физлицо
				|				И (РанееВыплаченныеСуммы.Регистратор <> &ДокументСсылка)
				|		ПО ПлДок.Ведомость = ЗарплатаКВыплате.Ссылка
				|ГДЕ
				|	ПлДок.Ссылка = &ДокументСсылка
				|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗарплатаКВыплате.Физлицо
				|
				|ИМЕЮЩИЕ
				|	СУММА(ЗарплатаКВыплате.Сумма) <> 0
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ФизЛицо";
				
				ПроведениеРасчетовПереопределяемый.СформироватьРасчетыПоНДФЛПриВыплате(СтруктураДокумента, ТекстТаблицыВыплаты, Движения.НДФЛРасчетыСБюджетом, Движения.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ);
				
			КонецЕсли;
			
		КонецЕсли; 
		
		// Определим способ ведения учета расчетов с персоналом - сводно/подробно
		ВестиРеглУчетРасчетовСПерсоналомПодробно = Не глЗначениеПеременной("ВестиРеглУчетРасчетовСПерсоналомСводно");
		
		Для каждого СтрокаВыплат Из ПеречислениеЗаработнойПлаты Цикл
			
			ДокументВыплаты = СтрокаВыплат.Ведомость;
			
			ТабЧасть        = ДокументВыплаты.Зарплата;
			НомерВедомости  = ДокументВыплаты.Номер;
			ДатаВедомости   = ДокументВыплаты.Дата;
			
			Для Каждого СтрокаТЧ из ТабЧасть Цикл
				
				Если СтрокаТЧ.Сумма > 0 Тогда
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период      = ДатаДока;
					Проводка.Организация = Организация;
					Проводка.Содержание  = "Перечисление зарплаты в банк по ведомости №" + 
					НомерВедомости + " от " + ДатаВедомости;
					Проводка.Сумма       = СтрокаТЧ.Сумма;
					
					
					/////Вадим 29.01.2014 15:04:13  бп  заменяем типовой счет 70 на 70.01
	                //Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	 				Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70.01");
	 				////ВадимКонец
	 
					Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.ФизЛицо);
					КонецЕсли;
					
					Проводка.СчетКт      = СчетКт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаВыплат.СтатьяДвиженияДенежныхСредств);
					
				КонецЕсли;
				
				Если СтрокаТЧ.КомпенсацияЗаЗадержкуЗарплаты > 0 Тогда
					
					Если НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Не заполнен счет учета(БУ) для компенсации за задержку зарплаты!",Отказ, Заголовок);
						Прервать;
					КонецЕсли;
					
					Проводка = ПроводкиБУ.Добавить();
					
					Проводка.Период			= СтруктураШапкиДокумента.Дата;
					Проводка.Активность		= Истина;
					Проводка.Организация	= Организация;
					Проводка.Сумма			= СтрокаТЧ.КомпенсацияЗаЗадержкуЗарплаты;
					
					Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
					Если СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоПрочимОперациям) Тогда
						
						Если ВестиРеглУчетРасчетовСПерсоналомПодробно Тогда
							БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТЧ.ФизЛицо);
							//Проводка.СубконтоДт.РаботникиОрганизации = СтрокаТЧ.ФизЛицо;
						КонецЕсли;
						
					Иначе
						
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
						
					КонецЕсли; 
					
					Проводка.Содержание		= "Компенсация за задержку выплаты зарплаты по ведомости №" + ДокументВыплаты.Номер + " от " + ДокументВыплаты.Дата;
					Проводка.СчетКт			= СчетКт;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
					
					Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
						
						Проводка = ПроводкиНУ.Добавить();
						
						Проводка.Период			= СтруктураШапкиДокумента.Дата;
						Проводка.Активность		= Истина;
						Проводка.Организация	= Организация;
						Проводка.Сумма			= СтрокаТЧ.КомпенсацияЗаЗадержкуЗарплаты;
						
						Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентомНУ;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоНУДт1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоНУДт2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоНУДт3);
						
						Проводка.Содержание		= "Компенсация за задержку выплаты зарплаты по ведомости №" + ДокументВыплаты.Номер + " от " + ДокументВыплаты.Дата;
						Проводка.СчетКт			= ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.Другие);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами Тогда
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок,СчетКт);
		Если Не (СтруктураПараметровДДС = Ложь) тогда
			
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям);
			
		Иначе
			БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенегПрочийРасход(ЭтотОбъект, РасчетыВВалюте, СчетКт, СтруктураШапкиДокумента,Отказ,Заголовок);
		Конецесли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Расчеты по кредитам и займам";
			
			Проводка.СчетДт      = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].ДоговорКонтрагента);
			
			Проводка.СчетКт      = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
			
			Если РасчетыВВалюте Тогда
				
				Если Проводка.СчетДт.Валютный Тогда
                    Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
				КонецЕсли;
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
				КонецЕсли;
				
				
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента,
					СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсДокумента, 1, 
					СтруктураШапкиДокумента.КратностьДокумента, 1);
			Иначе
				
				//начало изменений
				Если РасчетыПоВалютеДоговора Тогда
						Если Проводка.СчетДт.Валютный Тогда
							Проводка.ВалютаДт        = РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаДт = РасшифровкаПлатежа[0].СуммаВзаиморасчетов;
						КонецЕсли;
						
						Если Проводка.СчетКт.Валютный Тогда
							Проводка.ВалютаКт        = РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаКт = РасшифровкаПлатежа[0].СуммаВзаиморасчетов;
						КонецЕсли;
				КонецЕсли;	
			//конец изменений				
					
					
				Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
	//начало изменений
		ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
	     Для Каждого ТекСтрока Из РасшифровкаПлатежа Цикл
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Перечисление средств подотчетнику";
			
			Если РасчетыВВалюте Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизации", СтруктураШапкиДокумента.ФизЛицо);	
			
			Проводка.СчетКт      = СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ТекСтрока.СтатьяДвиженияДенежныхСредств);
			
			Если РасчетыВВалюте Тогда
				
				Если Проводка.СчетДт.Валютный Тогда
                    Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
					//начало изменений 
					//Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
					Проводка.ВалютнаяСуммаДт = ТекСтрока.СуммаПлатежа;
					//конец изменений БП 04 
				КонецЕсли;
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
					//начало изменений БП 04 
					//Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
					Проводка.ВалютнаяСуммаКт = ТекСтрока.СуммаПлатежа;
					//конец изменений БП 04 
				КонецЕсли;
				
				//начало изменений 
				//Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента,
				//	СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				//	СтруктураШапкиДокумента.КурсДокумента, 1, 
				//	СтруктураШапкиДокумента.КратностьДокумента, 1);
				Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаПлатежа,
					СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсДокумента, 1, 
					СтруктураШапкиДокумента.КратностьДокумента, 1);				
				//конец изменений БП 04 	
			Иначе
				//начало изменений 
				//Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
				Проводка.Сумма = ТекСтрока.СуммаПлатежа;
				//конец изменений
			КонецЕсли;
		КонецЦикла
		//конец изменений 	
	//конец изменений
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками
		Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДвижений;
		Проводка.Организация = Организация;
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога тогда
			Проводка.Содержание  = "Перечисление налога";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками тогда
			Проводка.Содержание  = "Расчеты по кредитам и займам с работниками";
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			Проводка.Содержание = "Перечисление средств подотчетнику";
		Иначе
			Проводка.Содержание  = "Прочее списание денежных средств";
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками тогда
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.ФизЛицо);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			Если РасчетыВВалюте Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
			Иначе
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
			КонецЕсли;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизации", СтруктураШапкиДокумента.ФизЛицо);	
		Иначе
			Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоДт3);
		КонецЕсли;
		
		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			СуммаПроводки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				КурсДокумента, 1, 
				КратностьДокумента, 1);
		Иначе
			СуммаПроводки = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		Проводка.Сумма = СуммаПроводки;
		
		// Сформируем проводку по НУ
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
			И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ)
			И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
			
			Проводка.Сумма = СуммаПроводки;
			
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Прочее списание денежных средств";
			
			Проводка.СчетДт = СчетУчетаРасчетовСКонтрагентомНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СубконтоНУДт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СубконтоНУДт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СубконтоНУДт3);
			
			Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ДоговорКонтрагента);
			
			Проводка.Сумма = СуммаПроводки;
			
			ДвиженияПоРазницам(Отказ, ПроводкиНУ, СуммаПроводки);
			
		КонецЕсли;
		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		ВидСчетаОрг = СтруктураШапкиДокумента.СчетКонтрагента.ВидСчета;
		ВалютаСчета = СтруктураШапкиДокумента.СчетКонтрагента.ВалютаДенежныхСредств;
		
		РасчетыВВалюте = Ложь;
		СчетДт = УправлениеДенежнымиСредствами.ОпределитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетКонтрагента, мВалютаРегламентированногоУчета, РасчетыВВалюте);
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Перевод средств на другой счет организации";
		
		Проводка.СчетДт      = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Проводка.СчетКт      = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, 
				СтруктураШапкиДокумента.ВалютаДокумента, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсДокумента, 1, 
				СтруктураШапкиДокумента.КратностьДокумента, 1);
		Иначе
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		НалоговыйУчетУСН.ПрочееДДС(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок)

	Если ОтраженоВОперУчете И (НЕ Оплачено) И (Режим = РежимПроведенияДокумента.Оперативный)
		И (НЕ ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет) Тогда

		ЕстьРазрешение=УправлениеДопПравамиПользователей.ПравоРазрешитьПроведениеПлатежаБезЗаявки();
		
		УправлениеДенежнымиСредствами.ПроверитьОстаткиПоЗаявке(Дата,Отказ,Заголовок,
			СчетОрганизации,СуммаДокумента,ТаблицаПлатежейУпр, ЕстьРазрешение);
					
		// Проверяем остаток доступных денежных средств
		СвободныйОстаток = УправлениеДенежнымиСредствами.ПолучитьСвободныйОстатокДС(СчетОрганизации,Дата,ТаблицаПлатежейУпр.ВыгрузитьКолонку("ДокументПланированияПлатежа"));
		Если СвободныйОстаток < СуммаДокумента Тогда

			Сообщить(Заголовок+"
			|Сумма документа превышает возможный к использованию остаток денежных средств
			|по "+СчетОрганизации.Наименование+".
			|Возможный к использованию остаток: "+Формат(СвободныйОстаток,"ЧЦ=15; ЧДЦ=2; ЧН=0")+" "+ВалютаДокумента+"
			|Сумма документа = "+Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2")+" "+ВалютаДокумента);

			Если НЕ УправлениеДопПравамиПользователей.ПравоРазрешитьПревышениеСвободногоОстаткаДС() Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И (ОтраженоВОперУчете ИЛИ (ОтражатьВБухгалтерскомУчете И Оплачено)) Тогда

		ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
		
		Если (Не Отказ) И (Режим = РежимПроведенияДокумента.Оперативный) Тогда
			УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(Дата, ТаблицаПлатежейУпр, Отказ, Заголовок,РасчетыВозврат);
		КонецЕсли;
	//начало изменений
	ИначеЕсли ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП  Тогда
	          ПроверитьЗначение(РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств,Отказ, Заголовок,"Статья движения денежных средств");
	//конец изменений     
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП И НЕ ПеречислениеЗаработнойПлаты.Количество()=0 Тогда
		
		//Проверка на соответствие суммы по ведомостям сумме документа
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СУММА(ЗарплатаКВыплате.Сумма + ЗарплатаКВыплате.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаВыплачено
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплате
		|		ПО ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = ЗарплатаКВыплате.Ссылка
		|
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если НЕ (Результат.Следующий() И Результат.СуммаВыплачено=СуммаДокумента) Тогда
			Сообщить("Не совпадает сумма документа и суммы по ведомостям на выплату заработной платы.");
			Отказ=Истина;
		КонецЕсли;
		
		//начало изменений
		Для Каждого ТекСтрока  Из ПеречислениеЗаработнойПлаты Цикл
			Если Дата > '20140101' Тогда
				ПроверитьЗначение(ТекСтрока.СтатьяДвиженияДенежныхСредств,Отказ, Заголовок,"Статья движения денежных средств");
			КонецЕсли;
		Конеццикла;	
		//конец изменений 
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Режим, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда

		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");

		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога
		 ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда

			ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);

		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			
			УправлениеДенежнымиСредствами.ПроверитьСоответствиеРаботникаОрганизации(ФизЛицо, Организация, Дата, Отказ, Заголовок);
			
		ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда

			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);

		КонецЕсли;
		

	КонецЕсли;

КонецПроцедуры

Функция СформироватьСтруктуруКурсыВалютУпр()

	СтруктураГруппаВалют = Новый Структура;
	СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",  глЗначениеПеременной("ВалютаУправленческогоУчета").Код);
	СтруктураГруппаВалют.Вставить("ВалютаДокумента", ВалютаДокумента.Код);

	СтруктураКурсыВалют = УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,?(ДатаОплаты = '00010101', Дата, КонецДня(ДатаОплаты)));

	Возврат СтруктураКурсыВалют;

КонецФункции

Процедура ЗаполнитьДокументПоОснованиюУпр(Основание)

	Если НЕ (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеСредств")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Основание.ФормаОплаты = Перечисления.ВидыДенежныхСредств.Наличные Тогда
		Сообщить("Заявка оформлена на расходование наличных денежных средств.");
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	УправлениеДенежнымиСредствами.ПроверитьСогласованиеЗаявок(Основание, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперацииЗаявка = Основание.ВидОперации;

	УправлениеДенежнымиСредствами.ОпределитьОперациюПоОснованиюУпр(ВидОперации,ВидОперацииЗаявка);

	Организация = Основание.Организация;
	ВалютаДокумента = Основание.ВалютаДокумента;

	Если ЗначениеЗаполнено(Основание.БанковскийСчетКасса) Тогда
		СчетОрганизации = Основание.БанковскийСчетКасса;
	ИначеЕсли Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=ВалютаДокумента Тогда
		СчетОрганизации= Организация.ОсновнойБанковскийСчет;
	КонецЕсли;

	Ответственный     = Основание.Ответственный;
	ДокументОснование = Основание.Ссылка;
	
	Подразделение     = Основание.ЦФО;
	
	Если ВалютаДокумента.Пустая() Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	КонецЕсли;

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ЗаполнитьПоЗаявкеППУпр();
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОснованиюРегл(Основание)
	
	ВидОперации       = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП;
	ВалютаДокумента   = мВалютаРегламентированногоУчета;
	КурсДокумента     = 1;
	КратностьДокумента= 1;
	
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	
	ТаблицаВыплат = ЗарплатаКВыплатеОрганизацийДополнительный.ПолучитьДанныеДляВыплаты(Основание.Ссылка);
	
	Если ТаблицаВыплат.Количество() = 0 Тогда
		ВызватьИсключение "По текущей ведомости нет сумм к выплате!";
	Иначе	
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Основание,,"Проведен, ПометкаУдаления");

		ТаблицаВыплат.Свернуть("Ведомость", "СуммаКВыплате");
		
		СтрокаВедомость = ПеречислениеЗаработнойПлаты.Добавить();
		СтрокаВедомость.Ведомость		= ТаблицаВыплат[0].Ведомость;
		СтрокаВедомость.СуммаПлатежа	= ТаблицаВыплат[0].СуммаКВыплате;
		СуммаДокумента					= ТаблицаВыплат[0].СуммаКВыплате;
		СтрокаПлатеж.СуммаПлатежа		= СуммаДокумента;
		Организация						= Основание.Организация;
		
		Если Организация.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ВалютаДокумента Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж)

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура выполняет заполнение суммы документа и суммы взаиморасчетов по регистру расчетов с подотчетными лицами
//
Процедура ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("ФизЛицо",              ФизЛицо);
	Запрос.УстановитьПараметр("РасчетныйДокумент",    РасчетныйДокументРаботника);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетовРаботника);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаДолга
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			,
	|			Организация = &Организация
	|				И ФизЛицо = &ФизЛицо
	|				И РасчетныйДокумент = &РасчетныйДокумент
	|				И Валюта = &ВалютаВзаиморасчетов) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток < 0";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = - Выборка.СуммаДолга;
		
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов, 
		    ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
		    СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		    СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;							
									
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр()

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       			, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                       			, "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьДенежныеСредстваКомитента"       , "КонтролироватьДенежныеСредстваКомитента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;

	Иначе	
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("КурсДокумента", КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента", КратностьДокумента);

	ДатаДвижений=?(Оплачено,УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата,ДатаОплаты),Дата);
	СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаДвижений);
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если (Основание <> Неопределено) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание))) Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ДокументОснование  = Основание.Ссылка;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
	КонецЕсли;

	СпособЗаполнения = "Не заполнять";
	ВалютаДокумента  = мВалютаРегламентированногоУчета;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();

		ВидОперации  = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;

		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		Если (ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику"))
			И (СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам) Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И СтрокаПлатеж.ДоговорКонтрагента.ВедениеВзаиморасчетов=Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СтрокаПлатеж.Сделка=Основание;
			
		КонецЕсли;

		Если ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если ЗначениеЗаполнено(Основание.СтруктурнаяЕдиница) Тогда
			СчетОрганизации = Основание.СтруктурнаяЕдиница;
		Иначе
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") И Основание.Проведен  Тогда
			СпособЗаполнения = "По заказу";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		Если НЕ СчетОрганизации.Пустая() Тогда
			ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;	
		СтрокаПлатеж.СтавкаНДС  =УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеДопРасходов")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")) 
			или (ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда

		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		КонецЕсли;

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		Контрагент   = Основание.Контрагент;

		СтрокаПлатеж.ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СтрокаПлатеж.Сделка = Основание.Сделка;
		
		Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
			
			СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Основание;
			
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			СпособЗаполнения = "По взаиморасчетам";
		Иначе
			СпособЗаполнения = "По сумме документа";
		КонецЕсли;

		СчетОрганизации  = Организация.ОсновнойБанковскийСчет;

		Если ЗначениеЗаполнено(Контрагент.ОсновнойБанковскийСчет) И Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств=СчетОрганизации.ВалютаДенежныхСредств Тогда
			СчетКонтрагента = Контрагент.ОсновнойБанковскийСчет;
		КонецЕсли;

		Если НЕ СчетОрганизации.Пустая() Тогда
			ВалютаДокумента = СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		КонецЕсли;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;	

		СтрокаПлатеж.СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		
		//начало изменений 
		//УправлениеПроектами.ЗаполнитьПроект(СтрокаПлатеж, Основание);
		//конец изменений 
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		
		ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику;
		ФизЛицо                       = Основание.ФизЛицо;
		РасчетныйДокументРаботника    = Основание;
		ВалютаВзаиморасчетовРаботника = Основание.ВалютаДокумента;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, ТекущаяДата());
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;	
		
		СпособЗаполнения = "По взаиморасчетам с подотчетным лицом";
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.БюджетнаяОперация") Тогда

		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();

		ВидОперации  = Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику;
		Контрагент   = Основание.Контрагент;
		#Если Клиент Тогда
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа);
		#КонецЕсли
		СтрокаПлатеж = РасшифровкаПлатежа[0];

		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = ВалютаДокумента;
		Иначе
			ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;

		// Получаем курсы валют
		СтруктураГруппаВалют = Новый Структура;
		СтруктураГруппаВалют.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов.Код);
		СтруктураГруппаВалют.Вставить("ВалютаДокумента",      ВалютаДокумента.Код);
		СтруктураГруппаВалют.Вставить("ВалютаОперации",       Основание.ВалютаДокумента.Код);

		СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,Дата);

		КурсДокумента      = СтруктураКурсыВалют.ВалютаДокументаКурс;
		КратностьДокумента = СтруктураКурсыВалют.ВалютаДокументаКратность;

		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсыВалют.ВалютаВзаиморасчетовКурс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсыВалют.ВалютаВзаиморасчетовКратность;
		
		СтрокаПлатеж.Проект=Основание.Проект;		
		Подразделение=Основание.ЦФО;

		КурсОперации      = СтруктураКурсыВалют.ВалютаОперацииКурс;
		КратностьОперации = СтруктураКурсыВалют.ВалютаОперацииКратность;

		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Основание.Сумма,
		                            Основание.ВалютаДокумента, 
		                            ВалютаДокумента,
		                            КурсОперации, КурсДокумента,
		                            КратностьОперации, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента,
		                            ВалютаДокумента, 
		                            ВалютаВзаиморасчетов,
		                            КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                            КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);

		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником") Тогда

		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		ВидОперации  = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками;

		ФизЛицо                          = Основание.ФизЛицо;
		ДоговорЗайма                     = Основание;
		ВалютаВзаиморасчетовРаботника    = Основание.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = Основание.СуммаЗайма;
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
		                            ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
		                            СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
		                            СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

	КонецЕсли;
	
	ЗаполнитьДокументПоОснованиюУпр(Основание);
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
		
		ШапкаОснования = ЗарплатаКВыплатеОрганизацийДополнительный.ПолучитьДанныеДокумента(Основание);
		
		Если НЕ ШапкаОснования.Проведен Тогда
			ВызватьИсключение "Платежная ведомость не проведена! Заполнение не выполнялось.";
		КонецЕсли;
		
		Если ШапкаОснования.СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу Тогда
			ВызватьИсключение "Платежная ведомость оформлена на выплату через кассу! Заполнение не выполнялось.";
		КонецЕсли;
		
		ЗаполнитьДокументПоОснованиюРегл(ШапкаОснования);
		
	КонецЕсли;

	Если СпособЗаполнения = "По заказу" Тогда

		ЗаполнитьПоЗаказуУпр(Основание, СтрокаПлатеж);
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам" Тогда
		
		УправлениеДенежнымиСредствами.ЗаполнитьПоВзаиморасчетамУпр(ВалютаДокумента,КурсДокумента,КратностьДокумента,СтрокаПлатеж,-1);
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	ИначеЕсли СпособЗаполнения = "По взаиморасчетам с подотчетным лицом" Тогда
		
		ПроверкаКурсовВалют(СтрокаПлатеж);
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
		
	ИначеЕсли СпособЗаполнения = "По сумме документа" Тогда

		// Если основание - отчет комитенту, то надо вычесть вознаграждение
		ОснованиеСуммаДокумента = Основание.СуммаДокумента;
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			ОснованиеСуммаДокумента = Основание.СуммаДокумента - Основание.СуммаВознаграждения;
		КонецЕсли;

		СтруктураКурсаОснования = МодульВалютногоУчета.ПолучитьКурсВалюты(Основание.ВалютаДокумента, Основание.Дата);
		КурсОснования           = СтруктураКурсаОснования.Курс;
		КратностьОснования      = СтруктураКурсаОснования.Кратность;

		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОснованиеСуммаДокумента, Основание.ВалютаДокумента, Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		                                 КурсОснования, Основание.КурсВзаиморасчетов, КратностьОснования, Основание.КратностьВзаиморасчетов);
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		                                 КурсДокумента, СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);

		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;

		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

	КонецЕсли;

	Если (Основание <> Неопределено) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)))
		И Основание.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда

		Если Основание.ОтражатьВБухгалтерскомУчете Тогда

			Если Основание.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = Основание.СчетУчетаРасчетовСКонтрагентом;
				СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = Основание.СчетУчетаРасчетовПоАвансам;
			КонецЕсли;

			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
				УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), Истина);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Ответственный      = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	ОтраженоВОперУчете = Истина;
	
	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, Режим);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
		
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	РасчетыВозврат=УправлениеДенежнымиСредствами.НаправленияДвиженияДляДокументаДвиженияДенежныхСредствУпр(ВидОперации);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НЕ ОтраженоВОперУчете И НЕ Оплачено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")",Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не совпадают сумма документа и ее расшифровка.",Отказ, Заголовок);
	КонецЕсли;
	
	Если Оплачено Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплата(), Отказ, Заголовок);
	КонецЕсли;
	
	Если ОтраженоВОперУчете Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчеты(), Отказ, Заголовок);
	КонецЕсли;
	
	ПолучитьТаблицуПлатежейППУпр();
	
	Если СтрДлина(НазначениеПлатежа) > 209 Тогда 
		//начало изменений 
		Если Не РольДоступна("ПолныеПрава") Тогда
			Отказ = Истина;
		КонецЕсли;	
		//конец изменений 
		Сообщить("Поле ""Назначение платежа"" содержит больше 210 символов, проведение невозможно");
	КонецЕсли;
		
	Если НЕ Отказ Тогда
		ПроверитьЗаполнениеДокументаУпр(Отказ, Режим, Заголовок);
	КонецЕсли;
	
	ПроверитьЗаполнениеДокументаРегл(Отказ, Режим, Заголовок);

	СтруктураКурсыВалют = СформироватьСтруктуруКурсыВалютУпр();
	//начало изменений отключаем проверку по кредитам из займам
	РасчетыВУЕ = Неопределено;
	Если  ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда
		      РасчетыВУЕ = истина;
	КонецЕсли;	
	//конец изменений 
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете тогда
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
					СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
					мВалютаРегламентированногоУчета, Истина,Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ",,РасчетыВУЕ);
		КонецЦикла;
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураКурсыВалют, СтруктураШапкиДокумента);
		//ФормированиеПроводокПоПретензиям(); // Шевченков
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	
	НомерПечать=ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	
	Если Прав(НомерПечать,3)="000" И Дата < '20120709' Тогда
		Сообщить("Номер платежного поручения не может оканчиваться на ""000""!", СтатусСообщения.Важное);
		Отказ=Истина;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЧастичнаяОплата Тогда
		Сообщить("По документу "+ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка)+" уже прошла частичная оплата.
		|Перед отменой проведения документа необходимо отменить проведение платежных ордеров.");
		Отказ=Истина;
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	ЧастичнаяОплата   = Ложь;

КонецПроцедуры

// <- Шевченков
Процедура ЗаполнитьРасшифровкуВыдачиПодотчетникуНаОснованииРасшифровкиПлатежа(ЭтаФорма) Экспорт
	
	Если РасшифровкаПлатежа.Количество()>0 Тогда
				
		ЭтаФорма.ЭлементыФормы.РасшифрокаВыдачиПодотчетнику.Значение.Очистить();
				
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
					
			ЗаполнитьЗначенияСвойств(ЭтаФорма.ЭлементыФормы.РасшифрокаВыдачиПодотчетнику.Значение.Добавить(), СтрокаРасшифровки);
					
		КонецЦикла; 				
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПеречисленияНалоговНаОснованииРасшифровкиПлатежа(ЭтаФорма) Экспорт
	
	Если РасшифровкаПлатежа.Количество()>0 Тогда
				
		ЭтаФорма.ЭлементыФормы.РасшифрокаПеречисленияНалога.Значение.Очистить();
				
		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
					
			ЗаполнитьЗначенияСвойств(ЭтаФорма.ЭлементыФормы.РасшифрокаПеречисленияНалога.Значение.Добавить(), СтрокаРасшифровки);
					
		КонецЦикла; 				
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормированиеПроводокПоПретензиям()
	
	Если ЗначениеЗаполнено(ПРГ_Претензия) Тогда
		
		ПроводкиБУ = Движения.Хозрасчетный;
		
		Для Каждого СтрокаТЧ Из ЭтотОбъект.РасшифровкаПлатежа Цикл
			
			Если СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.02.3") Тогда Продолжить КонецЕсли;
				
			Проводка = ПроводкиБУ.Добавить();
		
			Проводка.Период      = ДатаДвижений;
			Проводка.Организация = Организация;			
			Проводка.СчетДт      = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.02.3");
						
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТЧ.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПРГ_Претензия);
		                  		
			Проводка.СчетКт      = ПланыСчетов.Хозрасчетный.НайтиПоКоду("51");
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТЧ.СтатьяДвиженияДенежныхСредств);

			Проводка.Сумма       = СтрокаТЧ.СуммаВзаиморасчетов * СтрокаТЧ.КурсВзаиморасчетов * СтрокаТЧ.КратностьВзаиморасчетов;
			
		КонецЦикла;
				
	КонецЕсли;
		
КонецПроцедуры
 //->

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные);
