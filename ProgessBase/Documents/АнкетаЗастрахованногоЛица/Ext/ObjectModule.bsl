////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "ПечатьФайла" Тогда
		
		ЕстьОшибки = Ложь;
		ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ЭтотОбъект,ЕстьОшибки);
		Если ЕстьОшибки Тогда
			Возврат Неопределено;
		КонецЕсли;	 
		
		Макет = ПолучитьМакет("ФормаАДВ_1");
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнкетаЗастрахованногоЛица_ФормаАДВ_1";
		
		//Обработка документов файла
		ОбластьАнкета = Макет.ПолучитьОбласть("Анкета");
		
		Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
			// формируем отчет по версии файла 04.00	
			
			//Получаем таблицу формата записи
			ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
			ТаблицаФорматаЗаписи = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("АНКТ",ДокументФорматЗаписей);
			ТаблицаФорматаЗаписи.Индексы.Добавить("ИмяПоля");
			СтрокаТЗ = ТаблицаФорматаЗаписи.Найти("ДокументНомер","ИмяПоля");
			Если СтрокаТЗ <> Неопределено Тогда
				СтрокаТЗ.ТипПоля = "СТРОКА";
			КонецЕсли;
			
			//Обработка заголовка файла
			ИнформацияОПачке = Новый Структура;
			Если ПроцедурыПерсонифицированногоУчета.РазобратьЗаголовокФайла(ТекстФайла,ИнформацияОПачке)=0 Тогда
				Возврат Неопределено;
			КонецЕсли;	
			ИнформацияОПачке.Вставить("ИнформацияОРаботодателе", Организация);
			
			Для Н=5 по СтрЧислоСтрок(ТекстФайла) цикл
				//Прочитаем запись из файла
				СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
				Запись = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ТаблицаФорматаЗаписи);
				СтрОшибка = "";
				Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла,"АНКТ",ТаблицаФорматаЗаписи,Запись,СтрОшибка) Тогда
					Сообщить("Ошибка в строке файла № "+Н+": "+СтрОшибка);
					Возврат Неопределено;
				КонецЕсли;	
				
				ОбластьАнкета.Параметры.ДатаЗаполнения					= 	"Дата заполнения " + Символы.ПС + ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(Запись.ДатаЗаполнения);
				ОбластьАнкета.Параметры.Фамилия 						= Запись.Фамилия; 
				ОбластьАнкета.Параметры.Имя 							= Запись.Имя; 
				ОбластьАнкета.Параметры.Отчество 						= Запись.Отчество; 
				ОбластьАнкета.Параметры.Пол 							= Запись.Пол+"     (м/ж)"; 
				ОбластьАнкета.Параметры.ДатаРождения 					= ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(Запись.СтандартнаяДатаРождения); 
				
				//Место рождения
				ОбластьАнкета.Параметры.МестоРожденияТип 				= 	?(Запись.ТипМестаРождения = "ОСОБОЕ", "особое", "");
				ОбластьАнкета.Параметры.МестоРожденияГород 				= 	Запись.МестоРожденияНаселенныйПункт;
				ОбластьАнкета.Параметры.МестоРожденияРайон 				= 	Запись.МестоРожденияРайон;
				ОбластьАнкета.Параметры.МестоРожденияОбласть			= 	Запись.МестоРожденияОбласть;
				ОбластьАнкета.Параметры.МестоРожденияСтрана			 	= 	Запись.МестоРожденияСтрана;
				
				ОбластьАнкета.Параметры.Гражданство 					= 	Запись.Гражданство;
				
				//Паспортные данные
				НаименованиеДокумента 									= 	Запись.ДокументНаименование;
				Серия1 													= 	Запись.ДокументСерияРимскиеЦифры;
				Серия2 													= 	Запись.ДокументСерияРусскиеБуквы;
				
				СерияНомер = Серия1 +?(Запись.ДокументВид = "ПАСПОРТ РОССИИ", " ", ?(Запись.ДокументВид = "ПАСПОРТ", "-", "") ) + Серия2 +",  " + Запись.ДокументНомер;
				
				ОбластьАнкета.Параметры.НаименованиеДокумента		= 	НаименованиеДокумента;
				ОбластьАнкета.Параметры.СерияНомер			 		= 	СерияНомер;
				ОбластьАнкета.Параметры.ДатаВыдачи 					= 	ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(Запись.ДокументДатаВыдачи);
				ОбластьАнкета.Параметры.КемВыдан 					= 	Запись.ДокументКемВыдан;
				
				//Адреса
				ОбластьАнкета.Параметры.АдресРегистрации 			=	ВРег(РегламентированнаяОтчетность.ПредставлениеАдреса(НРег(Запись.АдресРегистрации),0,""));
				ОбластьАнкета.Параметры.АдресФактический 			= 	ВРег(РегламентированнаяОтчетность.ПредставлениеАдреса(НРег(Запись.АдресФактический),0,""));
				ОбластьАнкета.Параметры.Телефоны 					= 	Запись.Телефоны;
				
				ДокументРезультат.Вывести(ОбластьАнкета);
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЦикла;	
			
			УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат,1,Ложь,"Анкета застрахованного лица АДВ-1");
			
			//Печать описи документов
			ДокументОписи = Новый ТабличныйДокумент;
			ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнкетаЗастрахованногоЛица_АДВ_6";
			ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация,Дата,Ответственный.ФизЛицо);
			ПроцедурыПерсонифицированногоУчета.ВывестиОписьАДВ6(ДокументОписи,ИнформацияОПачке,ОтветственныеЛица);
			Возврат УниверсальныеМеханизмы.НапечататьДокумент(ДокументОписи,1,Ложь,"Опись документов АДВ-6");
			
		ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда
			// формируем отчет по версии файла 07.00
			
			ДеревоПФР = ПроцедурыПерсонифицированногоУчета.ПреобразоватьВДеревоXML(ТекстФайла);
			
			Если ДеревоПФР = Неопределено Тогда
				Отказ = Ложь;
				ОбщегоНазначенияЗК.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка));
				Возврат Неопределено 
			КонецЕсли;
			ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
			Если ДеревоПФР = Неопределено Тогда
				Отказ = Ложь;
				ОбщегоНазначенияЗК.СообщитьОбОшибке("Не удалось разобрать файл с данными!",Отказ, ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка));
				Возврат Неопределено 
			КонецЕсли;
			СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
			Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
				Для Каждого СтрокаДереваАнкетаЗЛ Из СтрокаДереваПачкаВходящихДокументов.Строки Цикл
					Если СтрокаДереваАнкетаЗЛ.Имя = "АНКЕТА_ЗЛ" Тогда
						
						ОбластьАнкета.Параметры.ДатаЗаполнения = "Дата заполнения " + Символы.ПС + ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАнкетаЗЛ, "ДатаЗаполнения"));
						СтрокаДереваАнкетныеДанные = СтрокаДереваАнкетаЗЛ.Строки.Найти("АнкетныеДанные");
						Если СтрокаДереваАнкетныеДанные <> Неопределено Тогда
							СтрокаДереваФИО = СтрокаДереваАнкетныеДанные.Строки.Найти("ФИО");
							Если СтрокаДереваФИО <> Неопределено Тогда
								ОбластьАнкета.Параметры.Фамилия = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Фамилия"); 
								ОбластьАнкета.Параметры.Имя 	= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Имя"); 
								ОбластьАнкета.Параметры.Отчество= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Отчество"); 
							КонецЕсли;
							Пол = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАнкетныеДанные, "Пол");
							Если Пол = "МУЖСКОЙ" Тогда
								ОбластьАнкета.Параметры.Пол 		= "М     (м/ж)"; 
							ИначеЕсли Пол = "ЖЕНСКИЙ" Тогда
								ОбластьАнкета.Параметры.Пол 		= "Ж     (м/ж)"; 
							КонецЕсли;
							
							СтрокаДереваДатаРожденияОсобая = СтрокаДереваАнкетныеДанные.Строки.Найти("ДатаРожденияОсобая");
							Если СтрокаДереваДатаРожденияОсобая = Неопределено Тогда
								ОбластьАнкета.Параметры.ДатаРождения= ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАнкетныеДанные, "ДатаРождения")); 
							Иначе
								ОбластьАнкета.Параметры.ДатаРождения= 
								ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(Дата(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваДатаРожденияОсобая,"Год"),
								ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваДатаРожденияОсобая,"Месяц"),
								ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваДатаРожденияОсобая,"День"))); 
							КонецЕсли;
							
							//Место рождения
							СтрокаДереваМестоРождения = СтрокаДереваАнкетныеДанные.Строки.Найти("МестоРождения");
							Если СтрокаДереваМестоРождения <> Неопределено Тогда
								ТипМестаРождения = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваМестоРождения, "ТипМестаРождения");
								Если ТипМестаРождения = "ОСОБОЕ" Тогда
									ОбластьАнкета.Параметры.МестоРожденияТип = "особое";
								Иначе
									ОбластьАнкета.Параметры.МестоРожденияТип = "";
								КонецЕсли;
								ОбластьАнкета.Параметры.МестоРожденияГород = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваМестоРождения, "ГородРождения");
								ОбластьАнкета.Параметры.МестоРожденияРайон = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваМестоРождения, "РайонРождения");
								ОбластьАнкета.Параметры.МестоРожденияОбласть = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваМестоРождения, "РегионРождения");
								ОбластьАнкета.Параметры.МестоРожденияСтрана = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваМестоРождения, "СтранаРождения");
							Иначе
								ОбластьАнкета.Параметры.МестоРожденияГород = "";
								ОбластьАнкета.Параметры.МестоРожденияРайон = "";
								ОбластьАнкета.Параметры.МестоРожденияОбласть = "";
								ОбластьАнкета.Параметры.МестоРожденияСтрана = "";
							КонецЕсли;
							
							ОбластьАнкета.Параметры.Гражданство = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАнкетныеДанные, "Гражданство");
							
							//Адреса
						    СтрокаДереваАдресРегистрации = СтрокаДереваАнкетныеДанные.Строки.Найти("АдресРегистрации");
							Если СтрокаДереваАдресРегистрации <> Неопределено Тогда
								ОбластьАнкета.Параметры.АдресРегистрации = ПроцедурыПерсонифицированногоУчета.ПредставлениеАдресадляПФР(СтрокаДереваАдресРегистрации);
							Иначе 
								ОбластьАнкета.Параметры.АдресРегистрации = "";
							КонецЕсли;
								
							СтрокаДереваАдресФактический = СтрокаДереваАнкетныеДанные.Строки.Найти("АдресФактический");
                            Если СтрокаДереваАдресФактический <> Неопределено Тогда
								ОбластьАнкета.Параметры.АдресФактический = ПроцедурыПерсонифицированногоУчета.ПредставлениеАдресадляПФР(СтрокаДереваАдресФактический);
							Иначе
								ОбластьАнкета.Параметры.АдресФактический = "";
							КонецЕсли;
							
							ОбластьАнкета.Параметры.Телефоны = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваАнкетныеДанные, "Телефон");
				
						КонецЕсли;
						
						
						//Паспортные данные
						ОбластьАнкета.Параметры.НаименованиеДокумента = "";
						ОбластьАнкета.Параметры.СерияНомер = "";
						ОбластьАнкета.Параметры.ДатаВыдачи = "";
						ОбластьАнкета.Параметры.КемВыдан = "";
						СтрокаДереваУдостоверяющийДокумент = СтрокаДереваАнкетаЗЛ.Строки.Найти("УдостоверяющийДокумент");
						Если СтрокаДереваУдостоверяющийДокумент <> Неопределено Тогда
							ТипУдостоверяющего = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваУдостоверяющийДокумент, "ТипУдостоверяющего");
							
							СтрокаДереваДокумент = СтрокаДереваУдостоверяющийДокумент.Строки.Найти("Документ");
							Если СтрокаДереваДокумент <> Неопределено Тогда
								
								НаименованиеДокумента = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваДокумент, "НаименованиеУдостоверяющего");
								Серия1 = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваДокумент, "СерияРимскиеЦифры");
								Серия2 = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваДокумент, "СерияРусскиеБуквы");
								СерияНомер = Серия1 +?(ТипУдостоверяющего = "ПАСПОРТ РОССИИ", " ", ?(ТипУдостоверяющего = "ПАСПОРТ", "-", "") ) + Серия2 +",  " + ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваДокумент, "НомерУдостоверяющего");
								ОбластьАнкета.Параметры.НаименованиеДокумента = НаименованиеДокумента;
								ОбластьАнкета.Параметры.СерияНомер = СерияНомер;
								ОбластьАнкета.Параметры.ДатаВыдачи = ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваДокумент, "ДатаВыдачи"));
								ОбластьАнкета.Параметры.КемВыдан = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваДокумент, "КемВыдан");
				
							КонецЕсли;
							
						КонецЕсли;
						       		
				        ДокументРезультат.Вывести(ОбластьАнкета);
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						
					КонецЕсли;
				КонецЦикла;
				
				УниверсальныеМеханизмы.НапечататьДокумент(ДокументРезультат,1,Ложь,"Анкета застрахованного лица АДВ-1");
				
				СтрокаДереваОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ");
				Если СтрокаДереваОпись <> Неопределено Тогда
					//Печать описи документов
					ДокументОписи = Новый ТабличныйДокумент;
					ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АнкетаЗастрахованногоЛица_АДВ_6";
					ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация,Дата,Ответственный.ФизЛицо);
					ИнформацияОПачке = Новый Структура;
					ИнформацияОПачке.Вставить("ИнформацияОРаботодателе", Организация);
					ИнформацияОПачке.Вставить("ТипДокумента", "АНКТ");
					СтрокаДереваСоставДокументов = СтрокаДереваОпись.Строки.Найти("СоставДокументов");
					Если СтрокаДереваСоставДокументов <> Неопределено Тогда
						СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов");
						Если СтрокаДереваНаличиеДокументов <> Неопределено Тогда
							ИнформацияОПачке.Вставить("ДокументовВПачке",ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
						КонецЕсли;
					КонецЕсли;
					
					СтрокаДереваНомерПачки = СтрокаДереваОпись.Строки.Найти("НомерПачки");
					Если СтрокаДереваНомерПачки  <> Неопределено Тогда
						СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной");
						Если СтрокаДереваОсновной <> Неопределено Тогда
							ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной"));
						Иначе
							ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваНомерПачки, "ПоПодразделению"));
						КонецЕсли;
					КонецЕсли;
					ИнформацияОПачке.Вставить("ДатаСоставленияОписи",ПроцедурыПерсонифицированногоУчета.ДатаXMLВОтчет(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОпись, "ДатаСоставления"),Ложь));
					
					ПроцедурыПерсонифицированногоУчета.ВывестиОписьАДВ6(ДокументОписи, ИнформацияОПачке, ОтветственныеЛица, ЗаменятьБуквуЕ, "ФормаАДВ_6_1_2017");
					Возврат УниверсальныеМеханизмы.НапечататьДокумент(ДокументОписи, 1, Ложь, "Опись документов АДВ-6");
				
				КонецЕсли;
				
				Возврат ДокументРезультат
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // Печать

#КонецЕсли

// Выполняет автоматическое заполнение документа по данным документа и переданным параметрам
// 
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Логическое - удалось ли выполнить автоматическое заполнение документа
//
Процедура Автозаполнение() Экспорт

	СписокПустыхНомеровПФР = Новый СписокЗначений;
	СписокПустыхНомеровПФР.Добавить("");
	СписокПустыхНомеровПФР.Добавить("   -   -      ");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Организация",			Организация);
	Запрос.УстановитьПараметр("Ссылка",					Ссылка);
	Запрос.УстановитьПараметр("СписокПустыхНомеровПФР",	СписокПустыхНомеровПФР);
	Запрос.УстановитьПараметр("ДатаАктуальности" ,		Дата);
	Запрос.УстановитьПараметр("НеИсключатьРаботающихВСтудотряде", Дата < ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования() Или Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудРаботающихВСтудотряде"));

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо
	|ПОМЕСТИТЬ ВТСписокФизлиц
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			АнкетаЗастрахованногоЛицаРаботникиОрганизации.ФизЛицо КАК ФизЛицо
	|		ИЗ
	|			Документ.АнкетаЗастрахованногоЛица.РаботникиОрганизации КАК АнкетаЗастрахованногоЛицаРаботникиОрганизации
	|		ГДЕ
	|			АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка <> &Ссылка
	|			И АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка.Проведен
	|			И АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка.Организация = &Организация) КАК УжеПроанкетированные
	|		ПО ФизическиеЛица.Ссылка = УжеПроанкетированные.ФизЛицо
	|ГДЕ
	|	УжеПроанкетированные.ФизЛицо ЕСТЬ NULL 
	|	И ФизическиеЛица.СтраховойНомерПФР В(&СписокПустыхНомеровПФР)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат[0].Количество = 0 Тогда
		Возврат
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	|	"","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9 + "","" + ВЫБОР
	|		КОГДА АдресаРегистрации.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
	|			ТОГДА ""дом""
	|		ИНАЧЕ ""владение""
	|	КОНЕЦ + "","" + ВЫБОР
	|		КОГДА АдресаРегистрации.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
	|			ТОГДА ""корпус""
	|		ИНАЧЕ ""строение""
	|	КОНЕЦ + "","" + ВЫБОР
	|		КОГДА АдресаРегистрации.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
	|			ТОГДА ""кв.""
	|		ИНАЧЕ ""оф.""
	|	КОНЕЦ КАК АдресРегистрации,
	|	"","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9 + "","" + ВЫБОР
	|		КОГДА АдресаФактические.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
	|			ТОГДА ""дом""
	|		ИНАЧЕ ""владение""
	|	КОНЕЦ + "","" + ВЫБОР
	|		КОГДА АдресаФактические.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
	|			ТОГДА ""корпус""
	|		ИНАЧЕ ""строение""
	|	КОНЕЦ + "","" + ВЫБОР
	|		КОГДА АдресаФактические.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
	|			ТОГДА ""кв.""
	|		ИНАЧЕ ""оф.""
	|	КОНЕЦ КАК АдресФактический,
	|	ДомашниеТелефоны.Поле3 КАК Телефоны,
	|	СписокФизлиц.ФизЛицо,
	|	СписокФизлиц.ФизЛицо.Пол КАК Пол,
	|	СписокФизлиц.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	СписокФизлиц.ФизЛицо.МестоРождения КАК МестоРождения,
	|	ГражданствоФизЛиц.Страна КАК Гражданство
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		СостояниеРаботниковОрганизацииСрезПоследних.Сотрудник.Физлицо КАК ФизЛицо
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаАктуальности,
	|				Организация = &ГоловнаяОрганизация
	|					И (&НеИсключатьРаботающихВСтудотряде
	|						ИЛИ (НЕ Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде))
	|					И Сотрудник.ФизЛицо В
	|						(ВЫБРАТЬ
	|							СписокФизЛицБезНомеров.ФизЛицо
	|						ИЗ
	|							ВТСписокФизлиц КАК СписокФизЛицБезНомеров)) КАК СостояниеРаботниковОрганизацииСрезПоследних
	|	ГДЕ
	|		ВЫБОР
	|				КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|						И СостояниеРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|				ИНАЧЕ СостояниеРаботниковОрганизацииСрезПоследних.ПричинаИзмененияСостояния
	|			КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		И ВЫБОР
	|				КОГДА СостояниеРаботниковОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|						И СостояниеРаботниковОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ТОГДА СостояниеРаботниковОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|				ИНАЧЕ СостояниеРаботниковОрганизацииСрезПоследних.ОбособленноеПодразделение
	|			КОНЕЦ = &Организация
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
	|	ИЗ
	|		Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|	ГДЕ
	|		ДоговорНаВыполнениеРаботСФизЛицом.ФизЛицо В
	|				(ВЫБРАТЬ
	|					СписокФизЛицБезНомеров.ФизЛицо
	|				ИЗ
	|					ВТСписокФизлиц КАК СписокФизЛицБезНомеров)
	|		И (&НеИсключатьРаботающихВСтудотряде
	|				ИЛИ (НЕ ДоговорНаВыполнениеРаботСФизЛицом.ЗаключенСоСтудентомРаботающимВСтудотряде))
	|		И ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &ДатаАктуальности
	|		И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &ДатаАктуальности
	|		И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|		И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация) КАК СписокФизлиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&ДатаАктуальности,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						СписокФизЛицБезНомеров.ФизЛицо
	|					ИЗ
	|						ВТСписокФизлиц КАК СписокФизЛицБезНомеров)) КАК ФИОФизЛицСрезПоследних
	|		ПО СписокФизлиц.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ДомашниеТелефоны
	|		ПО СписокФизлиц.ФизЛицо = ДомашниеТелефоны.Объект
	|			И (ДомашниеТелефоны.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица))
	|			И (ДомашниеТелефоны.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаФактические
	|		ПО СписокФизлиц.ФизЛицо = АдресаФактические.Объект
	|			И (АдресаФактические.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|			И (АдресаФактические.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
	|		ПО СписокФизлиц.ФизЛицо = АдресаРегистрации.Объект
	|			И (АдресаРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|			И (АдресаРегистрации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
	|				&ДатаАктуальности,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						СписокФизЛицБезНомеров.ФизЛицо
	|					ИЗ
	|						ВТСписокФизлиц КАК СписокФизЛицБезНомеров)) КАК ГражданствоФизЛиц
	|		ПО СписокФизлиц.ФизЛицо = ГражданствоФизЛиц.ФизЛицо";

	РаботникиОрганизации.Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

// заполняет данные по физлицу
//
Процедура ЗаполнитьДанныеПоФизЛицу(ФизЛицо, СтрокаТабличнойЧасти) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо",				ФизЛицо);
	Запрос.УстановитьПараметр("ДатаАктуальности" , 		Дата);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	|	ФизическиеЛица.Пол,
	|	ФизическиеЛица.ДатаРождения,
	|	ФизическиеЛица.МестоРождения,
	|	"","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9 + "","" + ВЫБОР
	|		КОГДА АдресаРегистрации.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
	|			ТОГДА ""дом""
	|		ИНАЧЕ ""владение""
	|	КОНЕЦ + "","" + ВЫБОР
	|		КОГДА АдресаРегистрации.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
	|			ТОГДА ""корпус""
	|		ИНАЧЕ ""строение""
	|	КОНЕЦ + "","" + ВЫБОР
	|		КОГДА АдресаРегистрации.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
	|			ТОГДА ""кв.""
	|		ИНАЧЕ ""оф.""
	|	КОНЕЦ КАК АдресРегистрации,
	|	"","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9 + "","" + ВЫБОР
	|		КОГДА АдресаФактические.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
	|			ТОГДА ""дом""
	|		ИНАЧЕ ""владение""
	|	КОНЕЦ + "","" + ВЫБОР
	|		КОГДА АдресаФактические.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
	|			ТОГДА ""корпус""
	|		ИНАЧЕ ""строение""
	|	КОНЕЦ + "","" + ВЫБОР
	|		КОГДА АдресаФактические.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
	|			ТОГДА ""кв.""
	|		ИНАЧЕ ""оф.""
	|	КОНЕЦ КАК АдресФактический,
	|	ДомашниеТелефоны.Поле3 КАК Телефоны,
	|	ГражданствоФизЛиц.Страна КАК Гражданство
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФизическиеЛица.Ссылка КАК Ссылка,
	|		ФизическиеЛица.ДатаРождения КАК ДатаРождения,
	|		ФизическиеЛица.Пол КАК Пол,
	|		ФизическиеЛица.МестоРождения КАК МестоРождения
	|	ИЗ
	|		Справочник.ФизическиеЛица КАК ФизическиеЛица
	|	ГДЕ
	|		ФизическиеЛица.Ссылка = &ФизЛицо) КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК ДомашниеТелефоны
	|		ПО ФизическиеЛица.Ссылка = ДомашниеТелефоны.Объект
	|			И (ДомашниеТелефоны.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица))
	|			И (ДомашниеТелефоны.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаФактические
	|		ПО ФизическиеЛица.Ссылка = АдресаФактические.Объект
	|			И (АдресаФактические.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|			И (АдресаФактические.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
	|		ПО ФизическиеЛица.Ссылка = АдресаРегистрации.Объект
	|			И (АдресаРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|			И (АдресаРегистрации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо = &ФизЛицо) КАК ГражданствоФизЛиц
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО (ИСТИНА)";
				   
	
	ВыборкаПоРаботнику = Запрос.Выполнить().Выбрать();

	Если ВыборкаПоРаботнику.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,ВыборкаПоРаботнику);
	КонецЕсли;

КонецПроцедуры

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ПечатьФайла","АДВ-1");

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Формирует файл, который можно будет записать на дискетку
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Строка - содержимое файла
//
Функция СформироватьВыходнойФайл(Отказ) Экспорт

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);

	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();
	Если Не ВыборкаПоШапкеДокумента.Следующий() Тогда
		Отказ = Истина;
		Возврат "";
	КонецЕсли;

	ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;

	ВыборкаПоРаботникиОрганизации =	СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента).Выбрать(ОбходРезультатаЗапроса.Прямой);

	Если ВыборкаПоРаботникиОрганизации.Количество() > 200 Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("В документе должно быть не более 200 анкет (сотрудников)!", Отказ, Заголовок);
	КонецЕсли;

	СписокОбработанныхАнкет = Новый Соответствие;
	
	ТекстФайла	=	"";
	НомерДокументаВПачке = 0;

	ДатаЗаполнения 			= ВыборкаПоШапкеДокумента.Дата;
	КоличествоДокументов 	= ВыборкаПоРаботникиОрганизации.Количество();

	Если ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
		
		// Формирование файла версии 04.00
		
		//Формируем заголовок выходного файла
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьЗаголовок();
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОРаботодателе(ВыборкаПоШапкеДокумента.Организация, ВыборкаПоШапкеДокумента.Дата, Отказ);
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОПачке(НомерПачки, ДатаЗаполнения,"","");
		ТекстФайла	=	ТекстФайла + ПроцедурыПерсонифицированногоУчета.ПолучитьЗаписьОТипеДокумента("АНКТ",КоличествоДокументов);
		Если Отказ Тогда
			Возврат "";
		КонецЕсли;
		
		//Получаем таблицу формата записи
		ДокументФорматЗаписей = ПолучитьМакет("ФорматЗаписей");
		ТаблицаФорматаЗаписи = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("АНКТ",ДокументФорматЗаписей);
		
		Пока ВыборкаПоРаботникиОрганизации.Следующий()	Цикл
			
			//Контроль дубля строк
			Если СписокОбработанныхАнкет.Получить(ВыборкаПоРаботникиОрганизации.ФизЛицо) = Неопределено Тогда
				СписокОбработанныхАнкет.Вставить(ВыборкаПоРаботникиОрганизации.ФизЛицо, Истина);
			Иначе
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Строка №" + ВыборкаПоРаботникиОрганизации.НомерСтроки + ": Сотрудник " + ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " указан(а) в документе дважды!", Отказ);
			КонецЕсли;
			
			//Инициалы должны быть указаны
			Фамилия = ВыборкаПоРаботникиОрганизации.Фамилия;
			Имя = ВыборкаПоРаботникиОрганизации.Имя;
			Отчество = ВыборкаПоРаботникиОрганизации.Отчество;
			Если "" + Фамилия + Имя + Отчество = ""  Тогда
				ОбщегоНазначенияЗК.ФамилияИнициалыФизЛица(ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование,Фамилия,Имя,Отчество);
			КонецЕсли;
			
			ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Фамилия, Имя, Отказ ,Заголовок);
			
			Если Отказ Тогда
				Продолжить;
			КонецЕсли;
			
			НомерДокументаВПачке = НомерДокументаВПачке + 1;
			
			//Берем запись с пустыми полями
			Запись = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ТаблицаФорматаЗаписи);
			
			Запись.ТипЗаписи = "АНКТ";
			Запись.НомерДокументаВПачке = НомерДокументаВПачке;
			Запись.ДатаЗаполнения = ДатаЗаполнения;
			
			Запись.Фамилия = Фамилия;
			Запись.Имя = Имя;
			Запись.Отчество = Отчество;
			Запись.Пол = ?(ВыборкаПоРаботникиОрганизации.Пол = Перечисления.ПолФизическихЛиц.Мужской, "М", "Ж");
			
			Запись.ТипДатыРождения = "СТАНДАРТ";
			Запись.СтандартнаяДатаРождения = ВыборкаПоРаботникиОрганизации.ДатаРождения;
			
			//Место рождения
			ПроцедурыПерсонифицированногоУчета.ВписатьВЗаписьМестоРождения(Запись, ВыборкаПоРаботникиОрганизации.МестоРождения);
			
			Запись.Гражданство = СокрЛП(ВыборкаПоРаботникиОрганизации.Страна);
			
			ПроцедурыПерсонифицированногоУчета.ВписатьВЗаписьДокумент(Запись,ВыборкаПоРаботникиОрганизации);
			
			//Адреса
			Запись.АдресРегистрации = ВыборкаПоРаботникиОрганизации.АдресРегистрации;				
			АдресФактический = "";
			Если ВыборкаПоРаботникиОрганизации.АдресФактический <> ВыборкаПоРаботникиОрганизации.АдресРегистрации Тогда
				АдресФактический = ВыборкаПоРаботникиОрганизации.АдресФактический;
			КонецЕсли;
			Запись.АдресФактический = АдресФактический;
			Запись.Телефоны = ВыборкаПоРаботникиОрганизации.Телефоны;
			
			//Добавляем запись в файл
			СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(Запись,ТаблицаФорматаЗаписи);
			ТекстФайла	=	ТекстФайла	+	ВРег(СтрокавФайл) + Символы.ПС;
		КонецЦикла;
		
	ИначеЕсли ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда 
		
		// Формирование файла версии 07.00
		
		// Список стран
		СписокСтран = Новый Соответствие;
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КлассификаторСтранМира.Наименование,
		|	КлассификаторСтранМира.Код
		|ИЗ
		|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокСтран.Вставить(СокрЛП(Выборка.Наименование), Строка(Выборка.Код));
		КонецЦикла;
		
		НомерДокументаВПачке = 1;
		// Загружаем формат файла сведений
		МакетФормата = ПолучитьОбщийМакет("ФорматПФР70");
		
		// Создаем начальное дерево
		ДеревоВыгрузки = ПроцедурыПерсонифицированногоУчета.СоздатьДеревоXML();
		
		Атрибуты = Новый Соответствие;
		Атрибуты.Вставить("xmlns", "http://schema.pfr.ru");
		УзелПФР = ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", Атрибуты);
		
		ПроцедурыПерсонифицированногоУчета.ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Ссылка, Год(ДатаЗаполнения), ВыборкаПоШапкеДокумента));
		
		// Добавляем реквизит ПачкаВходящихДокументов
		УзелПачкаВходящихДокументов = ПроцедурыПерсонифицированногоУчета.ЗаполнитьНаборЗаписейВходящаяОпись(УзелПФР, МакетФормата, "АНКЕТА_ЗЛ", ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке,,,,ЗаменятьБуквуЕ);
		
		Сокращение = "";
		ФорматАнкетаЗЛ = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АНКЕТА_ЗЛ");
		ФорматИностранныйАдрес = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 3);
		ФорматНеструктурированныйАдрес = ПроцедурыПерсонифицированногоУчета.ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 2);
		
		Пока ВыборкаПоРаботникиОрганизации.Следующий()	Цикл
		
			//Контроль дубля строк
			Если СписокОбработанныхАнкет.Получить(ВыборкаПоРаботникиОрганизации.ФизЛицо) = Неопределено Тогда
				СписокОбработанныхАнкет.Вставить(ВыборкаПоРаботникиОрганизации.ФизЛицо, Истина);
			Иначе
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Строка №" + ВыборкаПоРаботникиОрганизации.НомерСтроки + ": Сотрудник " + ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " указан(а) в документе дважды!", Отказ);
			КонецЕсли;
		
			//Инициалы должны быть указаны
			Фамилия = СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия);
			Имя = СокрЛП(ВыборкаПоРаботникиОрганизации.Имя);
			Отчество = СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество);
			Если "" + Фамилия + Имя + Отчество = ""  Тогда
				ОбщегоНазначенияЗК.ФамилияИнициалыФизЛица(ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование,Фамилия,Имя,Отчество);
			КонецЕсли;
		
			ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, Фамилия, Имя, Отказ ,Заголовок);

			Если Отказ Тогда
				Продолжить;
			КонецЕсли;

			НомерДокументаВПачке = 	НомерДокументаВПачке + 1;
		
			НаборЗаписейАнкетаЗЛ = ПроцедурыПерсонифицированногоУчета.СкопироватьСтруктуруДанных(ФорматАнкетаЗЛ);
		
			НаборЗаписейАнкетаЗЛ.НомерВпачке.Значение = НомерДокументаВПачке;
		
			НаборЗаписейАнкетныеДанные = НаборЗаписейАнкетаЗЛ.АнкетныеДанные.Значение;
			НаборЗаписейФИО = НаборЗаписейАнкетныеДанные.ФИО.Значение;
			НаборЗаписейФИО.Фамилия = ВРег(ВыборкаПоРаботникиОрганизации.Фамилия);
			НаборЗаписейФИО.Имя = ВРег(ВыборкаПоРаботникиОрганизации.Имя);
			НаборЗаписейФИО.Отчество = ВРег(ВыборкаПоРаботникиОрганизации.Отчество);

			Если ЗаменятьБуквуЕ Тогда
				ПроцедурыПерсонифицированногоУчета.ЗаменитьБуквуЁ(НаборЗаписейФИО.Фамилия, "Фамилия");
	            ПроцедурыПерсонифицированногоУчета.ЗаменитьБуквуЁ(НаборЗаписейФИО.Имя, "Имя");
				ПроцедурыПерсонифицированногоУчета.ЗаменитьБуквуЁ(НаборЗаписейФИО.Отчество, "Отчество");
			КонецЕсли;	
			
			Если ПустаяСтрока(ВыборкаПоРаботникиОрганизации.АдресРегистрации) Тогда
				НаборЗаписейАнкетныеДанные.Удалить("АдресРегистрации");
			Иначе
				ТекстОшибки  ="";
				НаборЗаписейАдресРегистрации = НаборЗаписейАнкетныеДанные.АдресРегистрации.Значение;
				ПроцедурыПерсонифицированногоУчета.ЗаполнитьАдрес(НаборЗаписейАдресРегистрации, ВыборкаПоРаботникиОрганизации.АдресРегистрации, 
					СписокСтран,ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ТекстОшибки);
				НаборЗаписейАнкетныеДанные.АдресРегистрации.Значение = НаборЗаписейАдресРегистрации;
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Предупреждение: Строка №" + ВыборкаПоРаботникиОрганизации.НомерСтроки + ": Сотрудник " + ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " Адрес регистрации" + ТекстОшибки, Ложь);
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(ВыборкаПоРаботникиОрганизации.АдресФактический) Тогда
				НаборЗаписейАнкетныеДанные.Удалить("АдресФактический");
			Иначе
				ТекстОшибки = "";
				НаборЗаписейАдресФактический = НаборЗаписейАнкетныеДанные.АдресФактический.Значение;
				ПроцедурыПерсонифицированногоУчета.ЗаполнитьАдрес(НаборЗаписейАдресФактический, ВыборкаПоРаботникиОрганизации.АдресФактический, 
					СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ТекстОшибки);
				НаборЗаписейАнкетныеДанные.АдресФактический.Значение = НаборЗаписейАдресФактический;
				Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Предупреждение: Строка №" + ВыборкаПоРаботникиОрганизации.НомерСтроки + ": Сотрудник "+ ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " Адрес фактический" + ТекстОшибки, Ложь);
				КонецЕсли;
			КонецЕсли;
			
			НаборЗаписейМестоРождения = НаборЗаписейАнкетныеДанные.МестоРождения.Значение;
			МестоРождения = РегламентированнаяОтчетность.РазложитьМестоРождения(ВыборкаПоРаботникиОрганизации.МестоРождения);
			НаборЗаписейМестоРождения.ТипМестаРождения = ?(МестоРождения.Особое = 1, "ОСОБОЕ", "СТАНДАРТНОЕ");
			
			НаборЗаписейМестоРождения.ГородРождения = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(МестоРождения.НаселенныйПункт,Сокращение);
			НаборЗаписейМестоРождения.РайонРождения = УправлениеКонтактнойИнформацией.ПолучитьИмяИАдресноеСокращение(МестоРождения.Район, Сокращение);
			НаборЗаписейМестоРождения.РегионРождения = МестоРождения.Область;
			НаборЗаписейМестоРождения.СтранаРождения = МестоРождения.Страна;
			
			Если ЗаменятьБуквуЕ Тогда
				ПроцедурыПерсонифицированногоУчета.ЗаменитьБуквуЁ(НаборЗаписейМестоРождения.ГородРождения, "Город рождения");
				ПроцедурыПерсонифицированногоУчета.ЗаменитьБуквуЁ(НаборЗаписейМестоРождения.РайонРождения, "Район рождения");
			    ПроцедурыПерсонифицированногоУчета.ЗаменитьБуквуЁ(НаборЗаписейМестоРождения.РегионРождения, "Регион рождения");
				ПроцедурыПерсонифицированногоУчета.ЗаменитьБуквуЁ(НаборЗаписейМестоРождения.СтранаРождения, "Страна рождения");
			КонецЕсли;	
			
			НаборЗаписейАнкетныеДанные.Телефон.Значение = ВыборкаПоРаботникиОрганизации.Телефоны;
			НаборЗаписейАнкетныеДанные.ДатаРождения.Значение = ВыборкаПоРаботникиОрганизации.ДатаРождения;
			НаборЗаписейАнкетныеДанные.Пол.Значение = ВРег(ВыборкаПоРаботникиОрганизации.Пол);
			НаборЗаписейАнкетныеДанные.Гражданство.Значение = СокрЛП(ВРег(ВыборкаПоРаботникиОрганизации.Страна));
						
			Если ЗаменятьБуквуЕ Тогда
				ПроцедурыПерсонифицированногоУчета.ЗаменитьБуквуЁ(НаборЗаписейАнкетныеДанные.Гражданство.Значение, "Гражданство");
			КонецЕсли;
			
			// Заполняем Удостоверяющий документ
			НаборЗаписейУдостоверяющийДокумент = НаборЗаписейАнкетаЗЛ.УдостоверяющийДокумент.Значение;
			НаборЗаписейДокумент = НаборЗаписейУдостоверяющийДокумент.Документ.Значение;
			Если ВыборкаПоРаботникиОрганизации.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС23 
				ИЛИ ВыборкаПоРаботникиОрганизации.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС15
				ИЛИ  ВыборкаПоРаботникиОрганизации.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС91 Тогда
				ЭлементИМНС91 = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС91;
				НаборЗаписейУдостоверяющийДокумент.ТипУдостоверяющего.Значение = ЭлементИМНС91.КодПФР;
				НаборЗаписейДокумент.НаименованиеУдостоверяющего = ВРег(СокрЛП(ЭлементИМНС91.Наименование)); 	
			Иначе
				НаборЗаписейУдостоверяющийДокумент.ТипУдостоверяющего.Значение = СокрЛП(ВыборкаПоРаботникиОрганизации.ДокументВидКодПФР);
				НаборЗаписейДокумент.НаименованиеУдостоверяющего = СокрЛП(ВыборкаПоРаботникиОрганизации.ДокументВидКодПФР);
			КонецЕсли;
			
			СерииДокумента = РегламентированнаяОтчетность.РазложитьСериюДокумента(ВыборкаПоРаботникиОрганизации.ДокументВид,ВыборкаПоРаботникиОрганизации.ДокументСерия);
			НаборЗаписейДокумент.СерияРимскиеЦифры = СерииДокумента.Часть1;
			НаборЗаписейДокумент.СерияРусскиеБуквы = СерииДокумента.Часть2;
			НаборЗаписейДокумент.НомерУдостоверяющего = ВыборкаПоРаботникиОрганизации.ДокументНомер;
			НаборЗаписейДокумент.ДатаВыдачи = ВыборкаПоРаботникиОрганизации.ДокументДатаВыдачи;
			НаборЗаписейДокумент.КемВыдан = СокрЛП(ВРег(ВыборкаПоРаботникиОрганизации.ДокументКемВыдан));
			
			Если ЗаменятьБуквуЕ Тогда
				ПроцедурыПерсонифицированногоУчета.ЗаменитьБуквуЁ(НаборЗаписейДокумент.КемВыдан, "Кем выдан");
			КонецЕсли;	
		
			НаборЗаписейАнкетаЗЛ.ДатаЗаполнения.Значение = ДатаЗаполнения;
		
			ПроцедурыПерсонифицированногоУчета.ДобавитьИнформациюВДерево(ПроцедурыПерсонифицированногоУчета.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "АНКЕТА_ЗЛ",""), НаборЗаписейАнкетаЗЛ);
			
		КонецЦикла;

		// Преобразуем дерево в строковое описание XML
		ТекстФайла = ПроцедурыПерсонифицированногоУчета.ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
	КонецЕсли;
	
	Возврат ТекстФайла;
	
КонецФункции // СформироватьВыходнойФайл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Формирует запрос по шапке документа
//
// Параметры: 
//  Режим - режим проведения
//
// Возвращаемое значение:
//  Результат запроса
//
Функция СформироватьЗапросПоШапке()

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка" , Ссылка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АнкетаЗастрахованногоЛица.Дата,
	|	АнкетаЗастрахованногоЛица.Номер,
	|	АнкетаЗастрахованногоЛица.Организация,
	|	ВЫБОР
	|		КОГДА АнкетаЗастрахованногоЛица.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА АнкетаЗастрахованногоЛица.Организация
	|		ИНАЧЕ АнкетаЗастрахованногоЛица.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	АнкетаЗастрахованногоЛица.Организация.Код,
	|	АнкетаЗастрахованногоЛица.Организация.Наименование,
	|	АнкетаЗастрахованногоЛица.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	АнкетаЗастрахованногоЛица.Организация.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
	|	АнкетаЗастрахованногоЛица.Организация.РегистрационныйНомерПФР,
	|	АнкетаЗастрахованногоЛица.Организация.ИНН,
	|	АнкетаЗастрахованногоЛица.Организация.КПП,
	|	АнкетаЗастрахованногоЛица.Организация.ЮрФизЛицо,
	|	АнкетаЗастрахованногоЛица.Организация.ОГРН,
	|	АнкетаЗастрахованногоЛица.Организация.НаименованиеОКОПФ,
	|	АнкетаЗастрахованногоЛица.Ответственный,
	|	АнкетаЗастрахованногоЛица.ФорматФайла,
	|	АнкетаЗастрахованногоЛица.Ссылка,
	|	АнкетаЗастрахованногоЛица.НомерПачки
	|ИЗ
	|	Документ.АнкетаЗастрахованногоЛица КАК АнкетаЗастрахованногоЛица
	|ГДЕ
	|	АнкетаЗастрахованногоЛица.Ссылка = &ДокументСсылка";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоШапке()

// Выбирает данные, необходимые для заполнения утвержденных форм как из спр-ка
//  физлиц, так и из соотв. регистров сведений
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Результат запроса к данным работников документа.
//
Функция СформироватьЗапросПоРаботникиОрганизации(ВыборкаПоШапкеДокумента)
	
	Запрос = Новый Запрос;
 	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности",	Дата);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка КАК Ссылка,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.НомерСтроки КАК НомерСтроки,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.АдресРегистрации КАК АдресРегистрации,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.АдресФактический КАК АдресФактический,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.Телефоны КАК Телефоны,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.Фамилия КАК Фамилия,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.Имя КАК Имя,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.Отчество КАК Отчество,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.Пол КАК Пол,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.ДатаРождения КАК ДатаРождения,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.МестоРождения КАК МестоРождения,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.Гражданство КАК Гражданство,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.ФизЛицо.Наименование КАК ФизЛицоНаименование,
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	ЕСТЬNULL(АнкетаЗастрахованногоЛицаРаботникиОрганизации.Гражданство.Наименование, """") КАК ГражданствоНаименование
	|ПОМЕСТИТЬ ВТСписокФизлиц
	|ИЗ
	|	Документ.АнкетаЗастрахованногоЛица.РаботникиОрганизации КАК АнкетаЗастрахованногоЛицаРаботникиОрганизации
	|ГДЕ
	|	АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка = &ДокументСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТСотрудникиОрганизаций
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо В
	|			(ВЫБРАТЬ
	|				СписокФизЛиц.ФизЛицо
	|			ИЗ
	|				ВТСписокФизлиц КАК СписокФизЛиц)
	|	И СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
	|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТРаботникиОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&ДатаАктуальности,
	|			Организация = &ГоловнаяОрганизация
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						СписокФизЛиц.Ссылка
	|					ИЗ
	|						ВТСотрудникиОрганизаций КАК СписокФизЛиц)) КАК РаботникиОрганизации
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаАктуальности
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаАктуальности
	|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &ДатаАктуальности
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &ДатаАктуальности
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник В
	|			(ВЫБРАТЬ
	|				СписокФизЛиц.Ссылка
	|			ИЗ
	|				ВТСотрудникиОрганизаций КАК СписокФизЛиц)
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АнкетаЗастрахованногоЛицаРаботники.НомерСтроки КАК НомерСтроки,
	|	АнкетаЗастрахованногоЛицаРаботники.ФизЛицо КАК ФизЛицо,
	|	АнкетаЗастрахованногоЛицаРаботники.ФизЛицоНаименование КАК ФизЛицоНаименование,
	|	АнкетаЗастрахованногоЛицаРаботники.СтраховойНомерПФР КАК СтраховойНомерПФР,
	|	АнкетаЗастрахованногоЛицаРаботники.АдресРегистрации,
	|	АнкетаЗастрахованногоЛицаРаботники.АдресФактический,
	|	АнкетаЗастрахованногоЛицаРаботники.Телефоны,
	|	АнкетаЗастрахованногоЛицаРаботники.Фамилия,
	|	АнкетаЗастрахованногоЛицаРаботники.Имя,
	|	АнкетаЗастрахованногоЛицаРаботники.Отчество,
	|	АнкетаЗастрахованногоЛицаРаботники.Пол,
	|	АнкетаЗастрахованногоЛицаРаботники.ДатаРождения,
	|	АнкетаЗастрахованногоЛицаРаботники.МестоРождения,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА АнкетаЗастрахованногоЛицаРаботники.Гражданство = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Россия)
	|				ТОГДА ""РОССИЯ""
	|			ИНАЧЕ АнкетаЗастрахованногоЛицаРаботники.ГражданствоНаименование
	|		КОНЕЦ, """") КАК Страна,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид КАК ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.КодИМНС КАК КодИМНС,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.КодПФР, """") КАК ДокументВидКодПФР,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия КАК ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер КАК ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
	|	ВЫРАЗИТЬ(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК СТРОКА(300)) КАК ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ФизЛицо ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
	|ИЗ
	|	ВТСписокФизлиц КАК АнкетаЗастрахованногоЛицаРаботники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|				&ДатаАктуальности,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						СписокФизЛиц.ФизЛицо
	|					ИЗ
	|						ВТСписокФизлиц КАК СписокФизЛиц)) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО АнкетаЗастрахованногоЛицаРаботники.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботникиОрганизации КАК РаботникиОрганизации
	|		ПО АнкетаЗастрахованногоЛицаРаботники.ФизЛицо = РаботникиОрганизации.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
// все проверяемые реквизиты должны быть включены в выборку по шапке.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента	- выборка из результата запроса по шапке документа,
//  Отказ 					- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не указана организация, которая подает сведения!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Ответственный) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указано ответственное лицо!", Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФорматФайла) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке("Не указан формат файла!", Отказ, Заголовок);
		
	ИначеЕсли ВыборкаПоШапкеДокумента.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда
		Если НЕ ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Предупреждение: Не указано наименование ОКОПФ организации"),,Заголовок);
			
		ИначеЕсли СтрДлина(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ) > 40 Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Предупреждение: Наименование ОКОПФ организации обрезано до 40 символов."),,Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения реквизитов в строке ТЧ "РаботникиОрганизации" документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по строке ТЧ документа,
// все проверяемые реквизиты должны быть включены в выборку.
//
// Параметры: 
//  ВыборкаПоШапкеДокумента		- выборка из результата запроса по шапке документа,
//  ВыборкаПоСтрокамДокумента	- спозиционированная на определеной строке выборка 
//  							  из результата запроса по работникам, 
//  Отказ 						- флаг отказа в проведении.
//	Заголовок				- Заголовок для сообщений об ошибках проведения
//
Процедура ПроверитьЗаполнениеСтрокиРаботникаОрганизации(ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента, Фамилия, Имя, Отказ ,Заголовок)
	
	СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоСтрокамДокумента.НомерСтроки) +
									ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса(""" табл. части ""Сотрудники организации"": ");
	// ФизЛицо
	Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ФизЛицо) Тогда
		ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не выбран сотрудник!", Отказ ,Заголовок);
	Иначе	
		СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + ВыборкаПоСтрокамДокумента.ФизЛицоНаименование + " ";
		
		Если НЕ ВыборкаПоСтрокамДокумента.ФизЛицоРаботаетВОрганизации Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- " + ОбщегоНазначенияЗК.ПреобразоватьСтрокуИнтерфейса("Не работает в организации") + " " + ВыборкаПоШапкеДокумента.ОрганизацияНаименование + "!", Отказ ,Заголовок);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрЗаменить(ВыборкаПоСтрокамДокумента.СтраховойНомерПФР,"-","")) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Уже имеет страховой номер!", Отказ ,Заголовок);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Фамилия + Имя) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не заданы фамилия и имя!", Отказ ,Заголовок);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Пол) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан пол!", Отказ ,Заголовок);
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаРождения) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана дата рождения!", Отказ ,Заголовок);
		Иначе
			Если ВыборкаПоСтрокамДокумента.ДатаРождения > Дата Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Дата рождения не может быть больше даты подачи сведений!", Отказ ,Заголовок);
			КонецЕсли;	 
		КонецЕсли;	
		
		Если СокрЛП(СтрЗаменить(ВыборкаПоСтрокамДокумента.МестоРождения,",","")) = "" 
			или СокрЛП(СтрЗаменить(ВыборкаПоСтрокамДокумента.МестоРождения,",","")) = "0" Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- (предупреждение) Не указано место рождения!", ,Заголовок);
		КонецЕсли; 
		
		//Паспортные данные
		Если ВыборкаПоСтрокамДокумента.ДокументВид = NULL Тогда
			
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не указаны паспортные данные!", Отказ ,Заголовок);
			
		Иначе
			
			УказанВидДокумента = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументВид);
			СообщениеОбОшибке =  "";
			
			//Проверка реквизитов паспортных данных
			Если Не УказанВидДокумента Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан вид документа, удостоверяющего личность!", Отказ ,Заголовок);
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументДатаВыдачи) Тогда
				ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана дата выдачи документа, удостоверяющего личность!", Отказ ,Заголовок);
			Иначе
				Если (ВыборкаПоСтрокамДокумента.ДатаРождения > ВыборкаПоСтрокамДокумента.ДокументДатаВыдачи) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Дата рождения не должна превышать дату выдачи документа, удостоверяющего личность!", Отказ ,Заголовок);
				КонецЕсли;
			КонецЕсли;	
			Если ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС05
				И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС10
				И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС11
				И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС12
				И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС13
				И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС14
				И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС15 // Документы, серию и номер которых не нужно проверять
				И ВыборкаПоСтрокамДокумента.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ИМНС91  Тогда
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументСерия) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задана серия документа, удостоверяющего личность!", Отказ ,Заголовок);
				ИначеЕсли УказанВидДокумента 
					И НЕ ПроцедурыПерсонифицированногоУчета.ПроверитьСериюУдостоверенияЛичности(ВыборкаПоСтрокамДокумента.ДокументВид,ВыборкаПоСтрокамДокумента.ДокументСерия, СообщениеОбОшибке) Тогда 
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Ошибка в серии удостоверения личности. "+ СообщениеОбОшибке, Отказ, Заголовок);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДокументНомер) Тогда
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Не задан номер документа, удостоверяющего личность!", Отказ ,Заголовок);
				ИначеЕсли УказанВидДокумента
					И НЕ ПроцедурыПерсонифицированногоУчета.ПроверитьНомерУдостоверенияЛичности(ВыборкаПоСтрокамДокумента.ДокументВид,ВыборкаПоСтрокамДокумента.ДокументНомер, СообщениеОбОшибке) Тогда 
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Ошибка в номере удостоверения личности. "+ СообщениеОбОшибке, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
		// Проверка адреса регистрации и проживания
		Если НЕ ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.АдресРегистрации) Тогда
			ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- (предупреждение) Не задан адрес регистрации!", ,Заголовок);
			
		Иначе
			
			АдресРегистрацииСписком = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВыборкаПоСтрокамДокумента.АдресРегистрации);
			ЗаПределамиРФ = Ложь;
			АдресРегистрацииСписком.Свойство("ЗаПределамиРФ", ЗаПределамиРФ);
			// значение переменной ЗаПределамиРФ может быть Неопределено
			Если ЗаПределамиРФ <> Истина Тогда
				Если  РегламентированнаяОтчетность.АдресСоответствуетТребованиям(АдресРегистрацииСписком) Тогда
					ТекстОшибки = ПроцедурыПерсонифицированногоУчета.ПроверитьАдресПоКЛАДР(АдресРегистрацииСписком);
					Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- (предупреждение) Адрес регистрации не соответствует адресному классификатору: в классификаторе не найден" + ТекстОшибки + "!", , Заголовок);
					КонецЕсли;
				Иначе
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Адрес регистрации заполнен не полностью или неверно или присутствуют латинские или недопустимые символы!", Отказ ,Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.АдресФактический) Тогда
			
			АдресФактическийСписком = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВыборкаПоСтрокамДокумента.АдресФактический);
			ЗаПределамиРФ = Ложь;
			АдресФактическийСписком.Свойство("ЗаПределамиРФ", ЗаПределамиРФ);
			Если ЗаПределамиРФ <> Истина Тогда
				Если РегламентированнаяОтчетность.АдресСоответствуетТребованиям(АдресФактическийСписком) Тогда
					ТекстОшибки = ПроцедурыПерсонифицированногоУчета.ПроверитьАдресПоКЛАДР(АдресФактическийСписком);
					Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
						ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- (предупреждение) Фактический адрес проживания не соответствует адресному классификатору: в классификаторе не найден" + ТекстОшибки + "!", , Заголовок);
					КонецЕсли;
				Иначе
					ОбщегоНазначенияЗК.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Фактический адрес проживания заполнен не полностью или неверно или присутствуют латинские или недопустимые символы!", Отказ ,Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеСтрокиРаботникаОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, Режим)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначенияЗК.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Получим реквизиты шапки из запроса
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапке().Выбрать();

	Если ВыборкаПоШапкеДокумента.Следующий() Тогда

		//Надо позвать проверку заполнения реквизитов шапки
		ПроверитьЗаполнениеШапки(ВыборкаПоШапкеДокумента, Отказ, Заголовок);

	КонецЕсли;
	
	//При проведении файл формируем заново 
	Если Не Отказ Тогда
		ТекстФайла = СформироватьВыходнойФайл(Отказ);
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	//Сохраним сформированный файл сведений в регистре сведений
	Запись = Движения.АрхивДанныхРегламентированнойОтчетности.Добавить();
	Запись.Объект = Ссылка;
	Запись.ОписаниеДанных = "Файл-пачка форм АДВ-1";
	Запись.Данные = ТекстФайла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыПерсонифицированногоУчета.ПроставитьНомерПачки(ЭтотОбъект);
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ, "Физлицо");
	
КонецПроцедуры



