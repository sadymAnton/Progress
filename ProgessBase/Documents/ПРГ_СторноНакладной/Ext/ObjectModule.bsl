Перем мУдалятьДвижения Экспорт;
// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст ошибки)
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в которой был выведен объект)
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	#Если Клиент Тогда
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;
	#конецЕсли

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);

		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// // В функции описано, какие данные следует сохранять в шаблоне
Функция СтруктураДополнительныхДанныхФормы() Экспорт
	
	Возврат Новый Структура();
	
КонецФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
	 или 	ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.КорректировкаРеализации")
	 или 	ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПР_Претензия")
	 Тогда
		ЗаполнитьПоДокОснованию(ДанныеЗаполнения);
		Комментарий = ДанныеЗаполнения.Комментарий; // Шевченков 37895		
	КонецЕсли;	
КонецПроцедуры

Процедура ЗаполнитьПоДокОснованию(ДокОснование) Экспорт 
	
	СтрутЗаполнения = Неопределено;
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
	 или 	ТипЗнч(ДокОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
	    ТипДока = ?(ТипЗнч(ДокОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг"),"РеализацияТоваровУслуг","КорректировкаРеализации");
	 	Запрос  = Новый Запрос("ВЫБРАТЬ
	 	                       |	Документ.Сделка,
	 	                       |	Документ.Склад,
	 	                       |	Документ.ВалютаДокумента,
	 	                       |	Документ.Контрагент,
	 	                       |	Документ.СуммаДокумента,
	 	                       |	Документ.Организация,
	 	                       |	&ДокументОснование,
	 	                       |	ЗНАЧЕНИЕ(Документ.ПР_Претензия.ПустаяСсылка) КАК Претензия
	 	                       |ИЗ
	 	                       |	Документ."+ТипДока+" КАК Документ
	 	                       |ГДЕ
	 	                       |	Документ.Ссылка = &ДокументОснование");
							   
		Запрос.УстановитьПараметр("ДокументОснование",ДокОснование);						   
		СтрутЗаполнения = Запрос.Выполнить().Выгрузить();
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.ПР_Претензия")  Тогда
		Накладная = ДокОснование.Накладная;
	    ТипДока = ?(ТипЗнч(Накладная) = Тип("ДокументСсылка.РеализацияТоваровУслуг"),"РеализацияТоваровУслуг","КорректировкаРеализации");
	 	Запрос  = Новый Запрос("ВЫБРАТЬ
	 	                       |	Документ.Сделка,
	 	                       |	&Склад Как Склад,
	 	                       |	Документ.ВалютаДокумента,
	 	                       |	Документ.Контрагент,
	 	                       |	Документ.СуммаДокумента,
	 	                       |	Документ.Организация,
	 	                       |	&ДокументОснование,
	 	                       |	&Претензия КАК Претензия
	 	                       |ИЗ
	 	                       |	Документ."+ТипДока+" КАК Документ
	 	                       |ГДЕ
	 	                       |	Документ.Ссылка = &ДокументОснование");
							   
		Запрос.УстановитьПараметр("ДокументОснование",Накладная);
		Запрос.УстановитьПараметр("Претензия",ДокОснование);
		Запрос.УстановитьПараметр("Склад",ДокОснование.СкладПретензии);
		СтрутЗаполнения = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;	
		
	Если СтрутЗаполнения <> Неопределено Тогда
		Если СтрутЗаполнения.Количество() > 0 Тогда
			СкладВОбъекте = ЭтотОбъект.Склад;
			ЗаполнитьЗначенияСвойств(ЭтотОбъект,СтрутЗаполнения[0]);
			Если ЗначениеЗаполнено(СкладВОбъекте) Тогда
				ЭтотОбъект.Склад = СкладВОбъекте;
			КонецЕсли;
		Иначе
			Сообщить("Не удалось найти накладную !!!");
		КонецЕслИ;	
	Иначе
		Сообщить("Неизвестный документ основания !!!");
	КонецЕсли;	
	
	//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	ОпределитьДатуОплаты();
	//конец изменений 
	
КонецПроцедуры	

Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	СтруктураОбязательныхПолей = Новый Структура("Склад,ДокументОснование,Контрагент,Организация");
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	
	// проверим есть ли еще один документ
	Если Не Отказ Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПРГ_СторноНакладной.Ссылка
		                      |ИЗ
		                      |	Документ.ПРГ_СторноНакладной КАК ПРГ_СторноНакладной
		                      |ГДЕ
		                      |	ПРГ_СторноНакладной.Ссылка <> &Ссылка
		                      |	И ПРГ_СторноНакладной.ДокументОснование = &ДокументОснование
		                      |	И ПРГ_СторноНакладной.Проведен");
							  
		Запрос.УстановитьПараметр("Ссылка",Ссылка);					  
		Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);					  
		
		Выборка  = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Отказ = Истина;
			Сообщить("Уже есть введенный документ сторно "+Выборка.Ссылка+" по накладной "+ДокументОснование);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры


//>>280915 Степанов №44403 
Процедура ЗаполнитьДвижениеСторноРС(Движение, Строка, МетаданныеОбъект,ПРСклад,ПРДокументОснование,МассивРесурсов,РегистрОстаков,ЗаменятьСклад)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");
	
	//++ Spl_Апроф 09.11.2014 (k.russkih@a-prof.ru) Правки если документ основание "ПР_Претензия"
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") И ЗначениеЗаполнено(ПРДокументОснование) Тогда	
		//Если МетаданныеОбъект.Имя = "СвободныеОстатки" ИЛИ МетаданныеОбъект.Имя = "ТоварыНаСкладах" Тогда		
		Если ЗаменятьСклад Тогда
			 Движение.Склад = ПРСклад;		
		КонецЕсли; 			
		//КонецЕсли; 			
	//КонецЕсли; 	
	//-- Spl_Апроф	
	
	Движение.Количество = - Движение.Количество;

КонецПроцедуры // ЗаполнитьДвижениеСторно
//<<


// Копирует значения движения в строку сторно нового движения
// для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвижениеСторно(Движение, Строка, МетаданныеОбъект,ПРСклад,ПРДокументОснование,МассивРесурсов,РегистрОстаков,ЗаменятьСклад)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор,ВидДвижения");
	
	//++ Spl_Апроф 09.11.2014 (k.russkih@a-prof.ru) Правки если документ основание "ПР_Претензия"
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") И ЗначениеЗаполнено(ПРДокументОснование) Тогда	
		//Если МетаданныеОбъект.Имя = "СвободныеОстатки" ИЛИ МетаданныеОбъект.Имя = "ТоварыНаСкладах" Тогда		
		Если ЗаменятьСклад Тогда
			 Движение.Склад = ПРСклад;		
		КонецЕсли; 			
		//КонецЕсли; 			
	//КонецЕсли; 	
	//-- Spl_Апроф	
	
	// вид движения
	//Если МетаданныеОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
	Если РегистрОстаков Тогда
		Движение.ВидДвижения = Строка.ВидДвижения;
	КонецЕсли;
	
	// ресурсы
	//Для Каждого МДОбъект из МетаданныеОбъект.Ресурсы Цикл
	//	Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
	Для Каждого ИмяРесурса Из МассивРесурсов Цикл
			Движение[ИмяРесурса] = - Строка[ИмяРесурса];
	КонецЦикла;		
	//КонецЦикла;

КонецПроцедуры // ЗаполнитьДвижениеСторно

// Копирует значения движения по регистру бухгалтерии в строку сторно я
// нового движени для измерений и реквизитов. Ресурсы инвертируются
//
Процедура ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(Движение, Строка, МетаданныеОбъект,ПРГСклад,ПРДокументОснование,МассивРесурсов,ПВХСклады)

	ЗаполнитьЗначенияСвойств(Движение, Строка,,"Период,Регистратор");
	
	// субконто
	Если МетаданныеОбъект.Корреспонденция Тогда

		Для каждого Субконто Из Строка.СубконтоДт Цикл
			Движение.СубконтоДт[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

		Для каждого Субконто Из Строка.СубконтоКт Цикл
			Движение.СубконтоКт[Субконто.Ключ] = Субконто.Значение;
			
			//++ Spl_Апроф 09.11.2014 (k.russkih@a-prof.ru) Правки если документ основание "ПР_Претензия"
			//Если ТипЗнч(ПРДокументОснование) = Тип("ДокументСсылка.ПР_Претензия") И ЗначениеЗаполнено(ПРДокументОснование) Тогда				
				Если Субконто.Ключ = ПВХСклады Тогда					
					Движение.СубконтоКт[Субконто.Ключ] = ПРГСклад;					
				КонецЕсли;
			//КонецЕсли; 	
			//-- Spl_Апроф
			
		КонецЦикла;

	Иначе

		Для каждого Субконто Из Строка.Субконто Цикл
			Движение.Субконто[Субконто.Ключ] = Субконто.Значение;
		КонецЦикла;

	КонецЕсли;
	
	Для Каждого ИмяРесурса из МассивРесурсов Цикл
		Если ЗначениеЗаполнено(Строка[ИмяРесурса]) Тогда
			Движение[ИмяРесурса] = - Строка[ИмяРесурса];
		КонецЕсли;	
	КонецЦикла;	
	


	
КонецПроцедуры // ЗаполнитьДвиженияСторноПоРегиструБухгалтерии()

Процедура СторнироватьДокумент(СтруктураШапкиДокумента,Отказ, РежимПроведения) Экспорт
	
	СторнируемыйДокумент =  СтруктураШапкиДокумента.ДокументОснование;
	Если НЕ ЗначениеЗаполнено(СторнируемыйДокумент) Тогда
		Сообщить("Не выбран сторнируемый документ.");
		ДействиеНеВыполнено = Истина;
		Возврат;
	КонецЕсли;
	
	
	
	МетаданныеДокумент	= СтруктураШапкиДокумента.ДокументОснование.Метаданные();
	МетаданныеДвиженияКорректировкаЗаписейРегистров = ЭтотОбъект.Метаданные().Движения;
	
	ТаблДвиж =  Новый ТаблицаЗначений;
	ТаблДвиж.Колонки.Добавить("Мета");
	ТаблДвиж.Индексы.Добавить("Мета");
	Для каждого ТекДвиж Из МетаданныеДвиженияКорректировкаЗаписейРегистров Цикл
		НС = ТаблДвиж.Добавить();
		НС.Мета = ТекДвиж;
	КонецЦикла;	
	
	//Дата 				 =  СтруктураШапкиДокумента.Дата;
	//Движения 			 = Движения;
	ПВХСклады = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	
	МассивРесурсов		 = Новый Массив;
	
	МассивИсклРег = Новый Массив;
	Если Не ОтражатьВБухгалтерскомУчете Тогда
		МассивИсклРег.Добавить(Метаданные.РегистрыНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации);
		МассивИсклРег.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок);
		МассивИсклРег.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж);
		МассивИсклРег.Добавить(Метаданные.РегистрыНакопления.НДСНачисленный);
		МассивИсклРег.Добавить(Метаданные.РегистрыНакопления.НДСПартииТоваров);
		МассивИсклРег.Добавить(Метаданные.РегистрыНакопления.НДСПредъявленныйРеализация0);
		МассивИсклРег.Добавить(Метаданные.РегистрыНакопления.НДСРеализация0);
		МассивИсклРег.Добавить(Метаданные.РегистрыНакопления.НДСПредъявленный);
		МассивИсклРег.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет);
		МассивИсклРег.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет); 
		
		МассивИсклРег.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный); 
		МассивИсклРег.Добавить(Метаданные.РегистрыБухгалтерии.Налоговый); 
	КонецЕсли;	
	
	//начало изменений Ожиганов 30.06.2016 исключим сторнирование резервов по накладным, чтобы не возникало зависших резервов
	ИсключатьДвижПоРезервам = (Дата >='20160101') и ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	//конец изменений 

	Для Каждого МетаданныеРегистр Из МетаданныеДокумент.Движения Цикл

		//>>180416 Степанов: сторно накладной не сторнирует ПЦ_ОграничениеПоПредоставленнымСкидкам накладной, а в обработке проведения сторнирует все движения этого регистра по заказу покупателя 
		Если МетаданныеРегистр.Имя = "ПЦ_ОграничениеПоПредоставленнымСкидкам" тогда
			Продолжить;
		КонецЕсли;	
		//начало изменений Ожиганов 30.06.2016 исключим сторнирование резервов по накладным, чтобы не возникало зависших резервов
		Если ИсключатьДвижПоРезервам  и  МетаданныеРегистр.Имя  = "ТоварыВРезервеНаСкладах" Тогда
			продолжить;
		КонецЕсли;	
		//конец изменений 
		
		// если документ "Корректировка записей регистров" не может иметь таких движений,
		// то это не сторнируемый регистр
		Если ТаблДвиж.Найти(МетаданныеРегистр) = Неопределено Тогда
			 продолжить;
		КонецЕсли;	
		Если Не ОтражатьВБухгалтерскомУчете Тогда
			Если МассивИсклРег.Найти(МетаданныеРегистр) <> Неопределено Тогда
				продолжить;
			КонецЕсли;	
		КонецЕсли;	
		//Если НЕ МетаданныеДвиженияКорректировкаЗаписейРегистров.Содержит(МетаданныеРегистр) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		НаборДвижений = Движения[МетаданныеРегистр.Имя];
		
		МассивРесурсов.Очистить();
		
		ЗаменятьСклад = Ложь;
		
		ЭтоРегистрБухгалтерии = Ложь;
		//>>280915 Степанов №44403
		ЭтоРегистрСведений = Ложь;
        //<<
		Если Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистр) Тогда
			
			СторнируемыйНаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			ЭтоРегистрБухгалтерии = Истина;
			
			// ресурсы
			Для Каждого МДОбъект из МетаданныеРегистр.Ресурсы Цикл

				Если МДОбъект.ПризнакУчета = Неопределено Тогда
					//Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
					МассивРесурсов.Добавить(МДОбъект.Имя);
				Иначе
					МассивРесурсов.Добавить(МДОбъект.Имя + "Дт");
					МассивРесурсов.Добавить(МДОбъект.Имя + "Кт");
				КонецЕсли;

			КонецЦикла;
			
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистр) Тогда
		   
			СторнируемыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			РегистрОстаков 	= МетаданныеРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
			
			Для Каждого МДОбъект из МетаданныеРегистр.Ресурсы Цикл
				//Движение[МДОбъект.Имя] = - Строка[МДОбъект.Имя];
				МассивРесурсов.Добавить(МДОбъект.Имя);
			КонецЦикла;
			ЗаменятьСклад = МетаданныеРегистр.Имя = "СвободныеОстатки" ИЛИ МетаданныеРегистр.Имя = "ТоварыНаСкладах";
		//>>280915 Степанов №44403	
		ИначеЕсли МетаданныеРегистр.Имя = "СписанныеТовары" тогда
			СторнируемыйНаборЗаписей = РегистрыСведений[МетаданныеРегистр.Имя].СоздатьНаборЗаписей();
			ЭтоРегистрСведений = Истина;
			//<<
		Иначе
			Продолжить;
		КонецЕсли;
		
		СторнируемыйНаборЗаписей.Отбор.Регистратор.Значение = СторнируемыйДокумент;
		СторнируемыйНаборЗаписей.Прочитать();
		
		Для Каждого ДвижениеСторнируемое Из СторнируемыйНаборЗаписей Цикл

			ДвижениеСторно = НаборДвижений.Добавить();
			
			// реквизиты
			Если ЭтоРегистрБухгалтерии Тогда
				ЗаполнитьДвиженияСторноПоРегиструБухгалтерии(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр,СтруктураШапкиДокумента.Склад,СторнируемыйДокумент,МассивРесурсов,ПВХСклады);
			//>>280915 Степанов №44403
			ИначеЕсли ЭтоРегистрСведений тогда
				ЗаполнитьДвижениеСторноРС(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр,СтруктураШапкиДокумента.Склад,СторнируемыйДокумент,МассивРесурсов,РегистрОстаков,ЗаменятьСклад);
			//<<	
			Иначе
				ЗаполнитьДвижениеСторно(ДвижениеСторно, ДвижениеСторнируемое, МетаданныеРегистр,СтруктураШапкиДокумента.Склад,СторнируемыйДокумент,МассивРесурсов,РегистрОстаков,ЗаменятьСклад);
			КонецЕсли;
			
			ДвижениеСторно.Период = СтруктураШапкиДокумента.Дата;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры 	

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Вставить содержимое обработчика.
	//Blik 200315 37993 н
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, Неопределено);
	КонецЕсли;
	//Blik 200315 37993 к

КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	Если  Не ОтражатьВБухгалтерскомУчете 
		и Не ОтражатьВНалоговомУчете
		и Не ОтражатьВУправленческомУчете Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран вид учета !!!",Отказ);
	КонецЕсли;	
	

КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()


Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Перем Заголовок, СтруктураШапкиДокумента;
	// Вставить содержимое обработчика.
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	СторнироватьДокумент(СтруктураШапкиДокумента,Отказ, РежимПроведения);
	
	//>>180416 Степанов Движения по регистру ПЦ_ОграничениеПоПредоставленнымСкидкам выполняются, когда документ создан не на основании Претензии
	ДелатьДвиженияПоПЦ_ОграниченияПредоставленныхСкидок=Ложь;
	Если ЗначениеЗаполнено(Претензия) тогда
		ПРГ_УчитыватьСкидки = ПРГ_ДопФункцииКлиентСервер.ПолучитьРеквизитыОбъекта(Претензия,"ПРГ_УчитыватьСкидки");
		Если ПРГ_УчитыватьСкидки=Ложь тогда
			ДелатьДвиженияПоПЦ_ОграниченияПредоставленныхСкидок=Истина;
		КонецЕсли;
	Иначе
		ДелатьДвиженияПоПЦ_ОграниченияПредоставленныхСкидок=Истина;
	КонецЕсли;		
			
	Если ДелатьДвиженияПоПЦ_ОграниченияПредоставленныхСкидок тогда
		//>>231015 Степанов 45046
		ТабПредоставленныхСкидок = Движения.ПредоставленныеСкидки.Выгрузить();
		ФормироватьДвиженияСторноПоОграничениямСкидок = Ложь;
		ТабТипов = ТабПредоставленныхСкидок.Скопировать(,"ПЦ_ОграниченияСкидки");
		ТабТипов.Свернуть("ПЦ_ОграниченияСкидки");
		Для Каждого СтрокаТабТипов из ТабТипов цикл
			Если (СтрокаТабТипов.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.АктНачисленияБонусовУслуг)
				или (СтрокаТабТипов.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.СуммаПредоставленнойСкидки)
				//>>180416 Степанов сторнировать ПроданныйОбъем тоже нужно 
				или (СтрокаТабТипов.ПЦ_ОграниченияСкидки = Перечисления.ПЦ_ОграниченияПредоставленныхСкидок.ПроданныйОбъем)
				//<<
				тогда
				ФормироватьДвиженияСторноПоОграничениямСкидок = Истина;
			КонецЕсли;	
		КонецЦикла;
		Если ФормироватьДвиженияСторноПоОграничениямСкидок тогда
			//получить таблицу набора записей из соответствующего заказа и записать ее с обратным знаком
			ЗапросЗаказ = Новый Запрос;
			ЗапросЗаказ.Текст = 
						"ВЫБРАТЬ
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ПолучательСкидки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Дивизион,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.АдресПоставки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ОбъектСкидки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
						|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.Количество) КАК Количество,
						|	СУММА(ПЦ_ОграничениеПоПредоставленнымСкидкам.СуммаСкидки) КАК СуммаСкидки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения
						|ИЗ
						|	РегистрНакопления.ПЦ_ОграничениеПоПредоставленнымСкидкам КАК ПЦ_ОграничениеПоПредоставленнымСкидкам
						|ГДЕ
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ЗаказПокупателя = &ЗаказПокупателя
						|	И ПЦ_ОграничениеПоПредоставленнымСкидкам.Активность
						|	И НЕ ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.ПР_Претензия
						|	И НЕ ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.ПРГ_СторноНакладной
						|	И НЕ ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.КорректировкаРеализации
						|	И НЕ ПЦ_ОграничениеПоПредоставленнымСкидкам.Регистратор ССЫЛКА Документ.УстановкаСкидокНоменклатуры
						|
						|СГРУППИРОВАТЬ ПО
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ДоговорКонтрагента,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Дивизион,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.АдресПоставки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ОбъектСкидки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Номенклатура,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ХарактеристикаНоменклатуры,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ТоварнаяКатегория,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Брендообъем,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.УстановкаСкидокНоменклатуры,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ВидДвижения,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.ПолучательСкидки,
						|	ПЦ_ОграничениеПоПредоставленнымСкидкам.Контрагент";
			ТабПредоставленныхСкидок.Свернуть("ЗаказПокупателя");
			ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
			Для Каждого СтрокаТабПредоставленныхСкидок из ТабПредоставленныхСкидок цикл
				Если СтрокаТабПредоставленныхСкидок.ЗаказПокупателя<>Документы.ЗаказПокупателя.ПустаяСсылка() тогда
					ЗаказПокупателя = СтрокаТабПредоставленныхСкидок.ЗаказПокупателя;
				КонецЕсли;	
			КонецЦикла;	
			Если ЗаказПокупателя<>Документы.ЗаказПокупателя.ПустаяСсылка() тогда
				//получаем движения заказа по ограничениям скидок и сторнируем их
				ЗапросЗаказ.УстановитьПараметр("ЗаказПокупателя",ЗаказПокупателя);
				РезЗаказ = ЗапросЗаказ.Выполнить().Выбрать();
				Пока РезЗаказ.Следующий() цикл
					Если (РезЗаказ.Количество<>0) или (РезЗаказ.СуммаСкидки) тогда
						НовоеДвижение = Движения.ПЦ_ОграничениеПоПредоставленнымСкидкам.Добавить();
						НовоеДвижение.Период                        = Дата;
						НовоеДвижение.ВидДвижения                   = РезЗаказ.ВидДвижения;
						НовоеДвижение.Контрагент                    = РезЗаказ.Контрагент;
						НовоеДвижение.ДоговорКонтрагента            = РезЗаказ.ДоговорКонтрагента;
						НовоеДвижение.Номенклатура                  = РезЗаказ.Номенклатура;
						НовоеДвижение.ХарактеристикаНоменклатуры    = РезЗаказ.ХарактеристикаНоменклатуры;
						НовоеДвижение.ТоварнаяКатегория             = РезЗаказ.ТоварнаяКатегория;
						НовоеДвижение.Брендообъем                   = РезЗаказ.Брендообъем;
						НовоеДвижение.УстановкаСкидокНоменклатуры   = РезЗаказ.УстановкаСкидокНоменклатуры;
						НовоеДвижение.ЗаказПокупателя               = ЗаказПокупателя;
						НовоеДвижение.Количество                    = -РезЗаказ.Количество;
						НовоеДвижение.СуммаСкидки                   = -РезЗаказ.СуммаСкидки;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;
		//<<231015 Степанов 45046
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// Вставить содержимое обработчика.
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
			
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 	
	
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;
	
	Если ЗначениеЗаполнено(Претензия) Тогда
		 ЗаполнитьПоДокОснованию(Претензия);
	ИначеЕсли ЗначениеЗаполнено(ДокументОснование) Тогда
		 ЗаполнитьПоДокОснованию(ДокументОснование);
	 КонецЕсли;	
	 
	 //начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	 Если  Началодня(Дата) > НачалоДня(АП_ДатаОплаты) Тогда
		  ОпределитьДатуОплаты();
	 КонецЕсли; 
	 //конец изменений 
	
 КонецПроцедуры
 
//начало изменений Ожиганов 24.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
Процедура ОпределитьДатуОплаты() Экспорт 
	  Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		 возврат;
	 КонецЕсли; 
	 
	 АП_ДатаОплаты = '00010101';
	 Если ЗначениеЗаполнено(ДокументОснование) и ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		  ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДоговорКонтрагента",Неопределено,ДокументОснование.ДоговорКонтрагента,ДокументОснование.Грузополучатель);
	 ИначеЕсли ЗначениеЗаполнено(ДокументОснование) и ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		  Грузополучатель = ДокументОснование.Грузополучатель;
		  Если Не ЗначениеЗаполнено(Грузополучатель) Тогда
			  ТекРеал 		  = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументОснование,Истина);
			  Грузополучатель = ТекРеал.Грузополучатель; 
		  КонецЕсли;	  
		  ПКК_КредитныйКонтроль.УстановитьДатуОплатыПоДоговору(ЭтотОбъект,"ДоговорКонтрагента",Неопределено,ДокументОснование.ДоговорКонтрагента,Грузополучатель);
	 КонецЕсли;	 
		 
 КонецПроцедуры
  //конец изменений 
