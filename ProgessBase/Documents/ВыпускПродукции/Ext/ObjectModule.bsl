Перем мУдалятьДвижения;
//начало изменений БП 14
Перем мУчетнаяПолитика Экспорт;         // (Общ)
Перем мУчетнаяПолитикаБух Экспорт;      // (Регл)
Перем мУчетнаяПолитикаНал Экспорт;		// (Нал)
//конец изменений БП 14 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА, ИСПОЛЬЗУЕМЫЕ ДЛЯ ОБЫЧНОГО ПРИЛОЖЕНИЯ

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	Иначе
		ПараметрКоманды = Новый Массив;
		ПараметрКоманды.Добавить(Ссылка);
		
		Если НаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.ВыпускПродукции", ИмяМакета, 
										ПараметрКоманды, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВыпускПродукции", ИмяМакета, 
										ПараметрКоманды, Неопределено, Неопределено);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура();
	СтруктураМакетов.Вставить("Накладная",  "Накладная на оприходование продукции");
	СтруктураМакетов.Вставить("МХ18",  		"МХ-18 (Накладная на передачу готовой продукции)");
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
//Заполнение счетов

// Процедура заполняет счета учета по бухгалтерскому и налоговому учету.
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

//Заполняет счета учета номенклатуры и затрат в шапке документа
Процедура ЗаполнитьСчетаУчетаВШапке() Экспорт
	//Передаются параметры ЗаполнятьСчетаЗатрат=Истина, ЗаполнятьСчетаНоменклатуры=Ложь
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаШапки(ЭтотОбъект, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Истина, Ложь);
КонецПроцедуры

// Процедура проверяет правильность заполнения реквизитов документа
// в обычном режиме
Процедура ПроверкаРеквизитов(СтруктураШапкиДокумента, Заголовок, Отказ) 
	
	УправлениеЗапасами.ПроверитьЧтоСкладВШапкеОптовый(СтруктураШапкиДокумента, Отказ, Заголовок);
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);
	УправлениеПроизводством.ПроверитьПроизводственныеПодразделения(СтруктураШапкиДокумента, Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Продукция", , Отказ, Заголовок);
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Продукция",, Отказ, Заголовок);
	
	//начало изменений БП 14 
	//МояОбработка = ВнешниеОбработки.Создать("C:\Documents and Settings\aozhiganov\My Documents\1С\Проект УПП\ВыпускПродукции.epf");
	//СтруктураШапкиДокумента.Вставить("ДокОбъект",ЭтотОбъект);
	//МояОбработка . ВыполнитьДопПроверку(СтруктураШапкиДокумента, Отказ, Заголовок);
	//МояОбработка = Неопределено;
	//СтруктураШапкиДокумента.Удалить("ДокОбъект");
	ВыполнитьДопПроверку(СтруктураШапкиДокумента, Отказ, Заголовок);
	//конец изменений БП 14 
	
КонецПроцедуры // ПроверкаРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

//Процедура выполняет формирование движений по регистру ТоварыОрганизаций
//
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.

	НаборДвижений = Движения.ТоварыОрганизаций;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПродукции, ТаблицаДвижений);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");

	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Склад, "Склад");
	КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры

// Формирование движений по регистрам по управленческому учету.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	//ТОВАРЫ НА СКЛАДАХ
	НаборДвижений = Движения.ТоварыНаСкладах;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПродукции, ТаблицаДвижений);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		НаборДвижений.ВыполнитьПриход();
	КонецЕсли;
	
	//ТОВАРЫ В РЕЗЕРВЕ НА СКЛАДАХ
	ТаблицаПоПродукцииРезервирование = ТаблицаПоПродукции.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоПродукцииРезервирование.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоПродукцииРезервирование.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДокументРезерва) Тогда
			 ТаблицаПоПродукцииРезервирование.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	Если ТаблицаПоПродукцииРезервирование.Количество() > 0 Тогда
		НаборДвижений = Движения.ТоварыВРезервеНаСкладах;
		
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
	
		// Заполним таблицу движений.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПродукцииРезервирование, ТаблицаДвижений);
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			НаборДвижений.ВыполнитьПриход();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру НДСПартииТоваров
// Вызывается из обработки ПроведениеДокументовПоРегистрамНДС
Процедура ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоПродукции, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаПоПродукции.Скопировать(), , Отказ);
			
КонецПроцедуры // ДвиженияРегистровПодсистемыНДС()


// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоПродукции        - таблица значений, содержащая данные для проведения и проверки ТЧ Продукция
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции, Отказ, Заголовок)
	//начало изменений БП 14
	// Формирование движений по регистрам "Выпуск продукции" и направлениям выпуска.
	УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска(
			СтруктураШапкиДокумента, 
			"ВыпускПродукции",
			мУчетнаяПолитика, 
			мУчетнаяПолитикаБух,
			мУчетнаяПолитикаНал
			);
			
	ДвижениеПоЗаданиюНапроизводство(СтруктураШапкиДокумента, ТаблицаПоПродукции, Отказ, Заголовок);		
	
	ДвижениеПоЗаданиюНаСмену(СтруктураШапкиДокумента, ТаблицаПоПродукции, Отказ, Заголовок); // bolshevykh@a-prof.ru 24.10.2014
	
	//движения по регистрам ниже выполняется в процедуре УправлениеПроизводствомДвиженияПоРегистрам.СформироватьДвиженияПоВыпускуПродукцииИНаправлениямВыпуска
	//ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции, Отказ, Заголовок);
	//ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции, Отказ, Заголовок);
	//ДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, ТаблицаПоПродукции, Отказ);
	//конец изменений БП 14 
КонецПроцедуры // ДвиженияПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДГОТОВКИ ДАННЫХ ДЛЯ ПРОВЕДЕНИЯ

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	//начало изменений БП 14 
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад", "ВидСклада", "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "СписыватьПартииПриПроведенииДокументов", "СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиПартионныйУчетПоСкладам",           "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов",  "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация", "ОтражатьВРегламентированномУчете", "ОтражатьВРегламентированномУчете");
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	
	
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	
	СтруктураШапкиДокумента.Вставить("ВидВоспроизводства", Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
	СтруктураШапкиДокумента.Вставить("ИспользоватьРасширеннуюАналитику", УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата));
	//конец изменений БП 14 

	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуруШапкиПодразделениемОрганизации(Заголовок, СтруктураШапкиДокумента, Отказ);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПродукции) Экспорт
	
	// Подготовим таблицу продукции для проведения.
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        				, "Номенклатура");
	СтруктураПолей.Вставить("Услуга"              				, "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               				, "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"          				, "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	
	СтруктураПолей.Вставить("Склад"        						, "Ссылка.Склад");
	СтруктураПолей.Вставить("Подразделение"        				, "Ссылка.Подразделение");
	
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"		, "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         		, "СерияНоменклатуры");
	
	СтруктураПолей.Вставить("Спецификация"						, "Спецификация");
	
	СтруктураПолей.Вставить("ЗаказПокупателя"					, "Заказ");
	СтруктураПолей.Вставить("ДокументРезерва"				    , "ЗаказРезерв");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"				, "НоменклатурнаяГруппа");
	
	СтруктураПолей.Вставить("Качество"         					, "Качество");
	
	СтруктураПолей.Вставить("ВестиУчетПоСериямВНЗП"				, "Номенклатура.ВестиУчетПоСериямВНЗП");
	
	СтруктураПолей.Вставить("СчетУчетаБУ"   					, "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"   					, "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетЗатрат"   						, "Ссылка.СчетЗатрат");
	СтруктураПолей.Вставить("СчетЗатратНУ"   					, "Ссылка.СчетЗатратНУ");
	
	//m_ionov@mail.ru 01.09.2016
	СтруктураПолей.Вставить("УП_МДЖ"   					, "УП_МДЖ");
	СтруктураПолей.Вставить("УП_МДБ"   					, "УП_МДБ");
	СтруктураПолей.Вставить("УП_МДСВ"   				, "УП_МДСВ");
	//------- m_ionov@mail.ru -------
	
	СтруктураОбрабатываемыхКолонок = Новый Структура();
	ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок);

	РезультатЗапросаПоПродукции = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Продукция", СтруктураПолей);
	
	ТаблицаПоПродукции = РезультатЗапросаПоПродукции.Выгрузить();
	//Заполнение незаполненной НоменклатурнойГруппы по Номенклатуре в Таблице продукции
	ОбщегоНазначенияКлиентСервер.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВТаблицеДокумента(ТаблицаПоПродукции, СтруктураОбрабатываемыхКолонок);
КонецПроцедуры // ПодготовитьТаблицыДокумента()

//Процедура добавляет в структуру полей сведения о НоменклатурнойГруппе из Номенклатуры
//	Эти сведения впоследствии могут пригодиться для заполнения незаполненной НоменклатурнойГруппы
//	Также процедура готовит структуру, сопоставляющую поля из табличной части документа и поля из номенклатуры
Процедура ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок)
	СтруктураПолей.Вставить("НоменклатурнаяГруппаНоменклатуры"	, "Номенклатура.НоменклатурнаяГруппа");
	СтруктураОбрабатываемыхКолонок = Новый Структура("НоменклатурнаяГруппа", "НоменклатурнаяГруппаНоменклатуры");
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// Заполним новый документ значениями по умолчанию
	Дата = ТекущаяДата();
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	
	// Заполнение по настройке
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.НастройкиЗаполненияФорм") Тогда
		
		ХранилищаНастроек.ДанныеФорм.ЗаполнитьОбъектПоНастройке(ЭтотОбъект, ДанныеЗаполнения, Документы.ВыпускПродукции.СтруктураДополнительныхДанныхФормы());
	//начало изменений БП 04 	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаданиеНаПроизводство") Тогда
		ОбъектЗап = ДанныеЗаполнения.ПолучитьОбъект();
		
		Подразделение 			 = ОбъектЗап.Подразделение;
		ЗаданиеНаПроизводство	= ОбъектЗап.Ссылка;
		РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(Истина,
																  ПодразделениеОрганизации,
																  Подразделение,
																  Организация);
		
		ЗаданиеНаПроизводство =  ДанныеЗаполнения;
		Для Каждого ТекСтрока Из ОбъектЗап.ВыпускТехПроцесс Цикл
			НоваяСтрока = Продукция.Добавить();
			НоваяСтрока.Номенклатура  			       = ТекСтрока.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры     = ТекСтрока.ХарактеристикаНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения               = ТекСтрока.ЕдиницаИзмерения;
		    НоваяСтрока.Коэффициент                    = ТекСтрока.Коэффициент;
		    НоваяСтрока.Количество					   = ТекСтрока.Количество;
		    НоваяСтрока.Спецификация				   = ТекСтрока.Спецификация;
		    НоваяСтрока.Заказ						   = ТекСтрока.Заказ;
			НоваяСтрока.НоменклатурнаяГруппа		   = ТекСтрока.Номенклатура;	
			НоваяСтрока.Качество					   = Справочники.Качество.Новый;
		КонецЦикла;	
		ЗаполнитьСчетаУчетаВТабЧасти(Продукция, "Продукция", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВШапке();
	// bolshevykh@a-prof.ru 24.10.2014 07:06
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СП_ЗаданиеНаСмену") Тогда
		
		ОбъектЗап = ДанныеЗаполнения.ПолучитьОбъект();
		СП_ЗаданиеНаСмену 		 = ОбъектЗап.Ссылка;
		Подразделение 			 = ОбъектЗап.Подразделение;
		ЗаданиеНаПроизводство	 = ОбъектЗап.Ссылка.ЗаданиеНаПроизводство;
		РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(Истина,
																  ПодразделениеОрганизации,
																  Подразделение,
																  Организация);
																  
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СП_ПривязкаСкладовКОтделениям.СкладПроизводства
			|ИЗ
			|	РегистрСведений.СП_ПривязкаСкладовКОтделениям КАК СП_ПривязкаСкладовКОтделениям
			|ГДЕ
			|	СП_ПривязкаСкладовКОтделениям.Отделение = &Отделение";

		Запрос.УстановитьПараметр("Отделение", СП_ЗаданиеНаСмену.Отделение);

		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда												  
			Склад = Результат.СкладПроизводства;
		КонецЕсли;
		
		Если ОбъектЗап.КоличествоФакт <> 0 тогда
			НоваяСтрока = Продукция.Добавить();
			НоваяСтрока.Номенклатура  			       = ОбъектЗап.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры     = ОбъектЗап.ХарактеристикаНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения               = ОбъектЗап.ЕдиницаИзмерения;
			НоваяСтрока.Коэффициент                    = ОбъектЗап.Коэффициент;
			НоваяСтрока.Количество					   = ОбъектЗап.КоличествоФакт;
			НоваяСтрока.Спецификация				   = ОбъектЗап.Спецификация;
			НоваяСтрока.НоменклатурнаяГруппа		   = ОбъектЗап.Номенклатура;	
			НоваяСтрока.Качество					   = Справочники.Качество.Новый;
		КонецЕсли;
		ЗаполнитьСчетаУчетаВТабЧасти(Продукция, "Продукция", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВШапке();
	КонецЕсли;
		//конец изменений БП 04 	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	Если НЕ ОтражатьВУправленческомУчете Тогда
		//Заполнение подразделения проверять не требуется
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти("Подразделение");
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	// Проверим, что 
	// а) не пытаемся зарезервировать бракованную продукцию
	// б) заполнена единица измерения мест, если указано количество мест
	ОбразецСообщения = Нстр("ru = 'В строке &НомерСтроки указан документ резерва для бракованной продукции. Бракованная продукция не может быть зарезервирована.'");
	Для Каждого СтрокаТабличнойЧасти Из Продукция Цикл
		
		Если СтрокаТабличнойЧасти.Качество <> Справочники.Качество.Новый И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказРезерв) Тогда
			
			СтрокаСообщения = СтрЗаменить(ОбразецСообщения, "&НомерСтроки", "" + СтрокаТабличнойЧасти.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрокаСообщения,
				ЭтотОбъект,
				"Продукция["+ Продукция.Индекс(СтрокаТабличнойЧасти) +"].ЗаказРезерв",,
				Отказ);
			
		КонецЕсли;
		
		ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(СтрокаТабличнойЧасти, ЭтотОбъект, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	//начало изменений Ожиганов 28.05.2015 немножко оптимизируем 
	ПРГ_ДопФункцииКлиентСервер.ДобавитьВОбъектСвойстваДляУдаленияДвижения(ЭтотОбъект,РежимЗаписи);
	//конец изменений 
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	ДатаЗапускаМолочногоПроизводства = НачалоДня(Константы.МЗ_ДатаЗапускаМолочногоПроизводства.Получить());
	//m_ionov@mail.ru 09.02.2017
	НужноПроверитьСерии = Ложь;
	Если Дата > ДатаЗапускаМолочногоПроизводства
		И РежимЗаписи = РежимЗаписиДокумента.Проведение
		И Не ПараметрыСеанса.ПроведениеДокументов 
//начало изменений Ожиганов А. 10.02.2017 проверка по сериям 						
		И Не РольДоступна("ПолныеПрава")
//конец изменений 		
		Тогда

		НужноПроверитьСерии = Истина;
	КонецЕсли;
	//------- m_ionov@mail.ru -------
	
	/// Кунов О.В., 14.11.2017 - 72744
	СобственныйКонтрагент = Справочники.ПРГ_Служебный.СобственныйКонтрагент.Объект;
	///
	
	// Заполним "качество" значением по умолчанию
	Для Каждого СтрокаТабличнойЧасти Из Продукция Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Качество) Тогда
			СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
		КонецЕсли;
		/// Кунов О.В., 15.08.2014 - 31111
		//начало изменений Ожиганов А. 10.02.2017 проверка по сериям 
		//Если Найти(ВРег(СтрокаТабличнойЧасти.Номенклатура.ВидНоменклатуры.Наименование), "ПОЛУФАБРИКАТЫ") > 0 И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СерияНоменклатуры) Тогда
		Если СтрокаТабличнойЧасти.Номенклатура.ВестиУчетПоСериям И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СерияНоменклатуры) Тогда
	    //конец изменений 		
			СтрокаТабличнойЧасти.СерияНоменклатуры = ПРГ_ДопФункцииКлиентСервер.СоздатьСериюНоменклатуры(СтрокаТабличнойЧасти, ЭтотОбъект);
			Цифры = "0123456789";
			ПромежуточныйКод = СтрокаТабличнойЧасти.СерияНоменклатуры.Код;
			
			Пока Лев(ПромежуточныйКод, 1) = "0" Или Найти(Цифры, Лев(ПромежуточныйКод, 1)) = 0 Цикл
				ПромежуточныйКод = Сред(ПромежуточныйКод, 2);
			КонецЦикла;
			КонечныйКод = "";
			Для Н=1 По СтрДлина(ПромежуточныйКод) Цикл
				ОчереднойСимвол = Сред(ПромежуточныйКод, Н, 1);
				Если Найти(Цифры, ОчереднойСимвол) > 0 Тогда
					КонечныйКод = КонечныйКод + ОчереднойСимвол;
				КонецЕсли;
			КонецЦикла;
			СерияОбъект = СтрокаТабличнойЧасти.СерияНоменклатуры.ПолучитьОбъект();
			СерияОбъект.Наименование = КонечныйКод;
			/// Кунов О.В., 14.11.2017 - 72744
			Если ЗначениеЗаполнено(СобственныйКонтрагент) Тогда
				СерияОбъект.УЗ_Производитель = СобственныйКонтрагент;
			КонецЕсли;
			///
			СерияОбъект.Записать();
		КонецЕсли; 
		///		
		//m_ionov@mail.ru 09.02.2017
		//Добавили проверку на заполненность серии номенклатуры
		Если НужноПроверитьСерии Тогда
			Если СтрокаТабличнойЧасти.Номенклатура.ВестиУчетПоСериям
				И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.СерияНоменклатуры) Тогда
				Если РольДоступна("ПолныеПрава") Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В строке №" + СокрЛП(Продукция.Индекс(СтрокаТабличнойЧасти) + 1) +" табличной части Продукция не заполнена серия номенклатуры", Ложь, "Проведение документа " + СокрЛП(ЭтотОбъект));
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("В строке №" + СокрЛП(Продукция.Индекс(СтрокаТабличнойЧасти) + 1) +" табличной части Продукция не заполнена серия номенклатуры", Отказ, "Проведение документа " + СокрЛП(ЭтотОбъект));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//------- m_ionov@mail.ru -------
		//m_ionov@mail.ru 01.09.2016
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СерияНоменклатуры) Тогда
			//ИЛИ Дата < ДатаЗапускаМолочногоПроизводства ИЛИ ДатаЗапускаМолочногоПроизводства = Дата(1,1,1) Тогда //Чтобы избежать вероятность потери данных, оставим проверку только по серии номенклатуры
			//Если серия указана, но показатели МДЖ, МДБ, МДСВ - должны быть в серии номенклатуры
			СтрокаТабличнойЧасти.УП_МДБ = 0;
			СтрокаТабличнойЧасти.УП_МДЖ = 0;
			СтрокаТабличнойЧасти.УП_МДСВ = 0;
		КонецЕсли;
		//------- m_ionov@mail.ru -------
	КонецЦикла;
	
	//начало изменений БП 14 
	//МояОбработка = ВнешниеОбработки.Создать("C:\Documents and Settings\aozhiganov\My Documents\1С\Проект УПП\ВыпускПродукции.epf");
	//МояОбработка . ВыполнитьДопДействияПриЗаписи(ЭтотОбъект,Отказ, РежимЗаписи, РежимПроведения);
	//МояОбработка = Неопределено;
	//конец изменений БП 14 
		
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоПродукции;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоПродукции);
	//начало изменений БП 14
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	//конец изменений БП 14 
	
	ПроверкаРеквизитов(СтруктураШапкиДокумента, Заголовок, Отказ);
	
	// Проверим заполнение счетов учета.
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаТабличнойЧасти("Продукция", ТаблицаПоПродукции, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу.
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПродукции, Отказ, Заголовок);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоПродукции", ТаблицаПоПродукции));
	
КонецПроцедуры	// ОбработкаПроведения()

Процедура ПриКопировании(ОбъектКопирования)
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,,ОбъектКопирования.Ссылка);
КонецПроцедуры

//начало изменений БП 14
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента)

	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		мУчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			мУчетнаяПолитикаНал = мУчетнаяПолитикаБух;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

Процедура ДвижениеПоЗаданиюНапроизводство(СтруктураШапкиДокумента, ТаблицаПоПродукции, Отказ, Заголовок)
	
//начало изменений БП 14
возврат;
	
	Если Не ЗначениеЗаполнено(ЗаданиеНаПроизводство) Тогда
		возврат;
	КонецЕсли;
	
	НаборДвиженийЗаданияНаВыпуск   = Движения.ЗаданияНаВыпуск;
	ТаблицаДвиженийЗаданияНаВыпуск = НаборДвиженийЗаданияНаВыпуск.Выгрузить();
	
	ПустаяНоменклатура 			   = Справочники.Номенклатура.ПустаяСсылка();
	
	Для Каждого Строка Из ТаблицаПоПродукции Цикл
			
			НоваяСтрокаЗаданияНаВыпуск = ТаблицаДвиженийЗаданияНаВыпуск.Добавить();
			НоваяСтрокаЗаданияНаВыпуск.ЗаданиеНаПроизводство      = ЗаданиеНаПроизводство;
			НоваяСтрокаЗаданияНаВыпуск.Номенклатура               = Строка.Номенклатура;
			НоваяСтрокаЗаданияНаВыпуск.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			НоваяСтрокаЗаданияНаВыпуск.Заказ                      = Строка.ЗаказПокупателя;
			НоваяСтрокаЗаданияНаВыпуск.КонечнаяПродукция          = ПустаяНоменклатура;
			НоваяСтрокаЗаданияНаВыпуск.Количество                 = Строка.Количество;
			
	КонецЦикла;
		
	НаборДвиженийЗаданияНаВыпуск.мПериод = Дата;
	НаборДвиженийЗаданияНаВыпуск.мТаблицаДвижений = ТаблицаДвиженийЗаданияНаВыпуск;
	НаборДвиженийЗаданияНаВыпуск.ВыполнитьРасход();
//конец изменений БП 14
	
КонецПроцедуры	

Процедура ВыполнитьДопПроверку(СтруктураШапкиДокумента, Отказ, Заголовок) Экспорт
	
	
	Если Отказ Тогда
		возврат;
	КонецЕсли;	
	
	ВидНоменклатурыГПИзДавальческогосырья   = Константы.ПРГ_ВидНоменклатурыПродукцияИЗДавальческогоСырья.Получить();
	
	ПроверятьНоменклатурнуюГруппу = Не РольДоступна("ПолныеПрава");
	
	ДокОбъект  =  ЭтотОбъект;
	
	//жестко чтобы не забыть про воду
	
	//{28.01.2015 Островерхий заявка №35879 
	//Если Не ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУПользователя("РазрешитьПроводитьВыпускиБезЗаданияНаПроизводство") Тогда 
	Если СтруктураШапкиДокумента.Дата > '20150202' И Не ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУПользователя("РазрешитьПроводитьВыпускиБезЗаданияНаПроизводство") Тогда
	//28.01.2015 Островерхий} 
		Если Не ЗначениеЗаполнено(ДокОбъект.ЗаданиеНаПроизводство) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не выбран документ задание на производство",Отказ,Заголовок);
			возврат;
		КонецЕсли;	
	КонецЕслИ;	
	
	ПроверитьСпецификацию = Не ПРГ_ДопФункцииКлиентСервер.ЕстьПравоУПользователя("РазрешитьПроводитьДокументыБезСпецификаций");	
	//добавим проверку на подразделения организаций
	Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.ПодразделениеОрганизации) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В шапке документа должно быть указано подразделение организации", Отказ, Заголовок);
		возврат;
	КонецЕсли;	
	
	// табличная часть продукция
	
	Если ДокОбъект.Продукция.Количество() > 0 Тогда
		
		ЗначениеЗаполненоГПИзДавСырья   		= ЗначениеЗаполнено(ВидНоменклатурыГПИзДавальческогосырья);
		СчетБУПроизводствоИзДавальческогоСырья = ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья;
		
	    СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("НоменклатурнаяГруппа","НоменклатурнаяГруппа");
	 	СтруктураПолей.Вставить("НомерСтрокиДокумента" , "НомерСтроки");
	 	СтруктураПолей.Вставить("Номенклатура" , "Номенклатура");
	 	СтруктураПолей.Вставить("ВидНоменклатуры", "Номенклатура.ВидНоменклатуры");
		СтруктураПолей.Вставить("СчетУчетаБУ","СчетУчетаБУ");
	 	СтруктураПолей.Вставить("Заказ","Заказ");
	 	СтруктураПолей.Вставить("ЗаказВидОперации","Заказ.ВидОперации");
		СтруктураПолей.Вставить("ЗаказРезерв","ЗаказРезерв.ВидОперации");
		СтруктураПолей.Вставить("ЗаказРезервВидОперации","ЗаказРезерв.ВидОперации");
	 	СтруктураПолей.Вставить("Спецификация","Спецификация");
		                                                                 
	    
		РезультатЗапросаПоПродукции = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ДокОбъект,"Продукция",СтруктураПолей);
		
		Выборка =  РезультатЗапросаПоПродукции.Выбрать();
		Пока Выборка .Следующий() Цикл
			// воду не проверяем на счета учета
			Если (ПроверятьНоменклатурнуюГруппу) Тогда
				Если Не ЗначениеЗаполнено(Выборка.НоменклатурнаяГруппа) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части Продукция строка " + Выборка .НомерСтрокиДокумента+" не заполнена номенклатурная группа",Отказ,Заголовок);
				КонецЕслИ;	
			КонецЕсли;	
			
			Если ПроверитьСпецификацию Тогда
				Если Не ЗначениеЗаполнено(Выборка.Спецификация) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части Продукция строка " + Выборка .НомерСтрокиДокумента+" не заполнена спецификация",Отказ,Заголовок);
				КонецЕсли;	
			КонецЕсли;	
			
			ПроверятьЗаказы = Ложь;
			Если ЗначениеЗаполненоГПИзДавСырья Тогда
				ПроверятьЗаказы = ЗначениеЗаполненоГПИзДавСырья и (Выборка.ВидНоменклатуры = ВидНоменклатурыГПИзДавальческогосырья);
			КонецЕсли;	
			Если Не ПроверятьЗаказы и СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете тогда
				 ПроверятьЗаказы =  Выборка.СчетУчетаБУ = СчетБУПроизводствоИзДавальческогоСырья;
			КонецЕсли;	                                            
			
			Если ПроверятьЗаказы Тогда
				
				Если Не ЗначениеЗаполнено(Выборка.Заказ) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части Продукция строка " + Выборка .НомерСтрокиДокумента+" не заполнен заказ",Отказ,Заголовок);
				КонецЕсли;	
				
				Если Выборка.ЗаказВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части Продукция строка " + Выборка .НомерСтрокиДокумента+" должен быть выбран заказ покупателя с видом операции ""Переработка""",Отказ,Заголовок);
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(Выборка.ЗаказРезерв) Тогда
					 ОбщегоНазначения.СообщитьОбОшибке("В табличной части Продукция строка " + Выборка .НомерСтрокиДокумента+" не заполнен заказ резерв",Отказ,Заголовок);
				КонецЕсли;	
				
				Если Выборка.ЗаказРезервВидОперации <> Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В табличной части Продукция строка " + Выборка .НомерСтрокиДокумента+" должен быть выбран зака резерв з покупателя с видом операции ""Переработка""",Отказ,Заголовок);
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;	
	
	// bolshevykh@a-prof.ru 24.10.2014
	//добавим проверку на существование документа с такимже заданием на смену
	//{28.01.2015 Островерхий заявка №35879 
	//Если Не ЗначениеЗаполнено(СП_ЗаданиеНаСмену) Тогда
	Если ЗначениеЗаполнено(СП_ЗаданиеНаСмену) Тогда
	//28.01.2015 Островерхий} 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВыпускПродукции.Ссылка
			|ИЗ
			|	Документ.ВыпускПродукции КАК ВыпускПродукции
			|ГДЕ
			|	ВыпускПродукции.СП_ЗаданиеНаСмену = &СП_ЗаданиеНаСмену
			|	И ВыпускПродукции.Проведен = &Проведен
			|	И ВыпускПродукции.ПометкаУдаления = &ПометкаУдаления
			|	И НЕ ВыпускПродукции.Ссылка = &Ссылка";

		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("Проведен", Истина);
		Запрос.УстановитьПараметр("СП_ЗаданиеНаСмену", СП_ЗаданиеНаСмену);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Если ВыборкаДетальныеЗаписи.Следующий() тогда
			ОбщегоНазначения.СообщитьОбОшибке("Уже существует документ: "+СокрЛП(ВыборкаДетальныеЗаписи.Ссылка)+" с таким же заданием на смену!", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;	

		
Конецпроцедуры


//конец изменений БП 14 

// bolshevykh@a-prof.ru 24.10.2014
Процедура ДвижениеПоЗаданиюНаСмену(СтруктураШапкиДокумента, ТаблицаПоПродукции, Отказ, Заголовок)
	
	Если Не ЗначениеЗаполнено(СП_ЗаданиеНаСмену) Тогда
		возврат;
	КонецЕсли;
	
	НаборДвиженийЗаданияНаСмену   = Движения.ТоварыКПолучениюНаСклады;
	ТаблицаДвиженийЗаданияНаСмену = НаборДвиженийЗаданияНаСмену.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыКПолучениюНаСкладыОстатки.Склад,
		|	ТоварыКПолучениюНаСкладыОстатки.ДокументПолучения,
		|	ТоварыКПолучениюНаСкладыОстатки.Номенклатура,
		|	ТоварыКПолучениюНаСкладыОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыКПолучениюНаСкладыОстатки.СерияНоменклатуры,
		|	ТоварыКПолучениюНаСкладыОстатки.Качество,
		|	ТоварыКПолучениюНаСкладыОстатки.ДокументРезерва,
		|	ТоварыКПолучениюНаСкладыОстатки.СтатусПартии,
		|	ТоварыКПолучениюНаСкладыОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКПолучениюНаСклады.Остатки(, ДокументПолучения = &ЗаданиеНаСмену) КАК ТоварыКПолучениюНаСкладыОстатки";

	Запрос.УстановитьПараметр("ЗаданиеНаСмену", СП_ЗаданиеНаСмену);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НоваяСтрокаЗаданияНаСмену = ТаблицаДвиженийЗаданияНаСмену.Добавить();
		НоваяСтрокаЗаданияНаСмену.Склад 						= ВыборкаДетальныеЗаписи.Склад;
		НоваяСтрокаЗаданияНаСмену.ДокументПолучения 			= ВыборкаДетальныеЗаписи.ДокументПолучения;
		НоваяСтрокаЗаданияНаСмену.Номенклатура 				= ВыборкаДетальныеЗаписи.Номенклатура;
		НоваяСтрокаЗаданияНаСмену.ХарактеристикаНоменклатуры 	= ВыборкаДетальныеЗаписи.ХарактеристикаНоменклатуры;
		НоваяСтрокаЗаданияНаСмену.СерияНоменклатуры 			= ВыборкаДетальныеЗаписи.СерияНоменклатуры;
		НоваяСтрокаЗаданияНаСмену.Качество 					= ВыборкаДетальныеЗаписи.Качество;
		НоваяСтрокаЗаданияНаСмену.ДокументРезерва 			= ВыборкаДетальныеЗаписи.ДокументРезерва;
		НоваяСтрокаЗаданияНаСмену.СтатусПартии 				= ВыборкаДетальныеЗаписи.СтатусПартии;
		НоваяСтрокаЗаданияНаСмену.Количество 					= ВыборкаДетальныеЗаписи.Количество;
	КонецЦикла;
	НаборДвиженийЗаданияНаСмену.мПериод = Дата;
	НаборДвиженийЗаданияНаСмену.мТаблицаДвижений = ТаблицаДвиженийЗаданияНаСмену;
	НаборДвиженийЗаданияНаСмену.ВыполнитьРасход();
	
	//Сообщим если Продукция не такая как в регистре
	Для каждого стр_продукция из Продукция цикл
		Если  стр_продукция.Номенклатура <> СП_ЗаданиеНаСмену.Номенклатура тогда
			 ОбщегоНазначения.СообщитьИнформациюПользователю("Номенклатуры "+СокрЛП(стр_продукция.Номенклатура)+" нет в документе"+СокрЛП(СП_ЗаданиеНаСмену));
		КонецЕсли;
	КонецЦикла;

	
	
КонецПроцедуры	
