Перем мУдалятьДвижения;

Перем мИспользоватьПланыПроизводства Экспорт;

Перем мИспользоватьРазузлование Экспорт;

//m_ionov@mail.ru 21.09.2016
Перем ПРГ_ИсппользуетсяБлокМолочногоПроизводства Экспорт;
//------- m_ionov@mail.ru -------

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВыполнитьВыборкуДанных() Экспорт
	
	Перем НовыеПотребности, ТекущиеПотребности;
	
	// Новые потребности
	ЗапросНовыеПотребности = Новый Запрос;
	ЗапросНовыеПотребности.УстановитьПараметр("ДатаДокумента", Дата);
	
	//m.ionov@a-prof.ru 28.04.2014
	//Вернулись к логическому и типовому решению - что потребность нужно фиксировать в разрезе готовой продукции.
	//Но для отчетов так же сделаем чтобы фиксировалось под какую спецификацию
	//----m.ionov@a-prof.ru---
	
	// Планы производства
			
	Если мИспользоватьПланыПроизводства Тогда
		
		//{25.11.2015 Островерхий заявка №46389 
		//Индекс = 0;
		//
		//Для каждого Строка из ПланыПроизводства Цикл
		//	
		//	Если НЕ ЗначениеЗаполнено(Сценарий.Периодичность) Тогда
		//		
		//		ОбщегоНазначения.СообщитьОбОшибке("Для сценария """ + СокрЛП(Строка(Сценарий.Наименование)) + """ не указана периодичность.");
		//		Продолжить;
		//		
		//	КонецЕсли;
		//	
		//	ДатаНач = Строка.ДатаНач;
		//	ДатаКон = Строка.ДатаКон;
		//	
		//	//УправлениеПланированием.ВыровнятьПериод(ДатаНач, ДатаКон, Сценарий.Периодичность);
		//	
		//	ЗапросНовыеПотребности.УстановитьПараметр("ПланыПроизводстваДатаНач" + Формат(Индекс, "ЧГ=0"), ДатаНач);
		//	ЗапросНовыеПотребности.УстановитьПараметр("ПланыПроизводстваДатаКон" + Формат(Индекс, "ЧГ=0"), ДатаКон);
		//	
		//	Если Индекс > 0 Тогда
		//		ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + "
		//		|ОБЪЕДИНИТЬ ВСЕ
		//		|";
		//	КонецЕсли;
		//	
		//	ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + "
		//	|ВЫБРАТЬ
		//	|	&ДатаДокумента КАК Период,
		//	|	ПланыПроизводстваОбороты.Номенклатура КАК Номенклатура,
		//	|	ПланыПроизводстваОбороты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		//	|	ПланыПроизводстваОбороты.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		//	|	ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар) КАК ТоварТара,
		//	|	Ложь КАК Тара,
		//	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПланыПроизводстваОбороты.Период, ДЕНЬ, 0), ДЕНЬ) КАК ДатаПотребности,
		//	|	ПланыПроизводстваОбороты.Заказ КАК Заказ,
		//	|	ПланыПроизводстваОбороты.Проект КАК Проект,
		//	|	ПланыПроизводстваОбороты.Сценарий КАК Сценарий," +
		//	?(мИспользоватьРазузлование, "
		//	|	ПланыПроизводстваОбороты.Номенклатура КАК КонечнаяПродукция,
		//	|	ПланыПроизводстваОбороты.Спецификация КАК Спецификация,
		//	|	ПланыПроизводстваОбороты.Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,", "") + "
		//	|	ПланыПроизводстваОбороты.КоличествоОборот КАК Количество
		//	|ИЗ
		//	|	РегистрНакопления.ПланыПроизводства.Обороты(&ПланыПроизводстваДатаНач" + Формат(Индекс, "ЧГ=0") + ", &ПланыПроизводстваДатаКон" + Формат(Индекс, "ЧГ=0") + ", ДЕНЬ, ";
		//	
		//	ЗапросНовыеПотребности.УстановитьПараметр("ДокументПланирования" + Формат(Индекс, "ЧГ=0"), Строка.ПланПроизводства);
		//	ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + "ДокументПланирования = &ДокументПланирования" + Формат(Индекс, "ЧГ=0") + " И ВЫБОР КОГДА Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА Номенклатура.Услуга = Ложь ИНАЧЕ Истина КОНЕЦ";
		//	
		//	//Если ЗначениеЗаполнено(Строка.Подразделение) Тогда
		//	//	
		//	//	ЗапросНовыеПотребности.УстановитьПараметр("Подразделение" + Формат(Индекс, "ЧГ=0"), Строка.Подразделение);
		//	//	ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст + " И Подразделение = &Подразделение" + Формат(Индекс, "ЧГ=0");
		//	//	
		//	//КонецЕсли;
		//	
		//	ЗапросНовыеПотребности.Текст = ЗапросНовыеПотребности.Текст +
		//	") КАК ПланыПроизводстваОбороты
		//	|";
		//	
		//	Индекс = Индекс + 1;
		//	
		//КонецЦикла; 
		
		ЗапросНовыеПотребности.Текст = "ВЫБРАТЬ
		                               |	ПланыПроизводства.Период КАК Период,
		                               |	ПланыПроизводства.Номенклатура КАК Номенклатура,
		                               |	ПланыПроизводства.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		                               |	ПланыПроизводства.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		                               |	ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар) КАК ТоварТара,
		                               |	ЛОЖЬ КАК Тара,
		                               |	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПланыПроизводства.Период, ДЕНЬ, 0), ДЕНЬ) КАК ДатаПотребности,
		                               |	ПланыПроизводства.Заказ КАК Заказ,
		                               |	ПланыПроизводства.Проект КАК Проект,
		                               |	ПланыПроизводства.Сценарий КАК Сценарий,
		                               |	ПланыПроизводства.Номенклатура КАК КонечнаяПродукция,
		                               |	ПланыПроизводства.Спецификация КАК Спецификация,
		                               |	ПланыПроизводства.Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,
		                               |	СУММА(ПланыПроизводства.Количество) КАК Количество,
		                               |	ЕСТЬNULL(ПланПроизводстваСоставПлана.Линия.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение
		                               |ИЗ
		                               |	РегистрНакопления.ПланыПроизводства КАК ПланыПроизводства
		                               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПроизводства.СоставПлана КАК ПланПроизводстваСоставПлана
		                               |		ПО ПланыПроизводства.Регистратор = ПланПроизводстваСоставПлана.Ссылка
		                               |			И ПланыПроизводства.НомерСтроки = ПланПроизводстваСоставПлана.НомерСтроки
		                               |			И (ПланыПроизводства.Регистратор В (&ДокументыПланирования))
		                               |			И (ПланыПроизводства.Активность)
		                               |			И (ВЫБОР
		                               |				КОГДА ПланыПроизводства.Номенклатура ССЫЛКА Справочник.Номенклатура
		                               |					ТОГДА ПланыПроизводства.Номенклатура.Услуга = ЛОЖЬ
		                               |				ИНАЧЕ ИСТИНА
		                               |			КОНЕЦ)
		                               |
		                               |СГРУППИРОВАТЬ ПО
		                               |	ПланыПроизводства.ХарактеристикаНоменклатуры,
		                               |	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ПланыПроизводства.Период, ДЕНЬ, 0), ДЕНЬ),
		                               |	ПланыПроизводства.Заказ,
		                               |	ПланыПроизводства.Проект,
		                               |	ПланыПроизводства.Сценарий,
		                               |	ПланыПроизводства.Спецификация,
		                               |	ПланыПроизводства.Период,
		                               |	ПланыПроизводства.Номенклатура,
		                               |	ПланыПроизводства.Номенклатура.ЕдиницаХраненияОстатков,
		                               |	ПланыПроизводства.Номенклатура.ВидВоспроизводства,
		                               |	ПланПроизводстваСоставПлана.Линия,
		                               |	ЕСТЬNULL(ПланПроизводстваСоставПлана.Линия.Подразделение, НЕОПРЕДЕЛЕНО),
		                               |	ПланыПроизводства.Номенклатура";
		
		ЗапросНовыеПотребности.УстановитьПараметр("ДокументыПланирования", ПланыПроизводства.ВыгрузитьКолонку("ПланПроизводства"));
		//25.11.2015 Островерхий} 
		
	КонецЕсли;
				
	Если ЗапросНовыеПотребности.Текст <> "" Тогда
		
		//ЗапросНовыеПотребности.Текст = Сред(ЗапросНовыеПотребности.Текст, 16);
		Результат = ЗапросНовыеПотребности.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		РаспределитьПоНоменклатуре(НовыеПотребности, Результат);
		
	КонецЕсли;
	
	//{01.04.2015 Островерхий заявка №36501 
	Если ЗаказыКопекеров.Количество() > 0 Тогда
		
		МассивДокументов = Новый Массив;
		
		Для каждого ТекЗаказ Из ЗаказыКопекеров Цикл
			
			МассивДокументов.Добавить(ТекЗаказ.Заказ); 	
			
		КонецЦикла;
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателяТовары.Ссылка.ДатаОтгрузки КАК Период,
		|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказПокупателяТовары.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ЗНАЧЕНИЕ(Перечисление.ТоварТара.Товар) КАК ТоварТара,
		|	ЛОЖЬ КАК Тара,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК КонечнаяПродукция,
		|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) КАК Проект,
		|	ЗаказПокупателяТовары.Спецификация КАК Спецификация,
		|	ЗаказПокупателяТовары.Номенклатура.ВидВоспроизводства КАК ВидВоспроизводства,
		|	ЗаказПокупателяТовары.Ссылка.ДатаОтгрузки КАК ДатаПотребности,
		|	ЗаказПокупателяТовары.Ссылка КАК Заказ,
		|	ЗаказПокупателяТовары.Количество,
		|	НЕОПРЕДЕЛЕНО КАК Подразделение
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
		|ГДЕ
		|	ЗаказПокупателяТовары.Ссылка В(&МассивДокументов)";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		
		тПотребностиКопекеров = Запрос.Выполнить().Выгрузить();
		РаспределитьПоНоменклатуре(НовыеПотребности, тПотребностиКопекеров);
	
	КонецЕсли; 
	//01.04.2015 Островерхий} 
	
	Если ТипЗнч(НовыеПотребности) = Тип("ТаблицаЗначений") Тогда
		
		НовыеПотребности.Колонки.Добавить("КодКупажа", Новый ОписаниеТипов("Строка")); // Шевченков 20150807 №42531
		
		// Разузлование
		Если мИспользоватьРазузлование Тогда
			
			Для каждого Строка из НовыеПотребности Цикл
				
				ТекСпецификация = Справочники.СпецификацииНоменклатуры.ПустаяСсылка();
				
				Если Строка.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство Тогда
					
					ИсхПараметры = Новый Структура;
					ИсхПараметры.Вставить("Номенклатура", Строка.Номенклатура);
					ИсхПараметры.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаНоменклатуры);
					ИсхПараметры.Вставить("Количество", Строка.Количество);
					//{25.08.2015 Островерхий заявка №42944 
					//ИсхПараметры.Вставить("Спецификация", Строка.Спецификация);
					//{02.12.2015 Островерхий заявка №б/н 
					//ИсхПараметры.Вставить("Спецификация", Справочники.СпецификацииНоменклатуры.ПустаяСсылка());
					//ИсхПараметры.Вставить("ТочкаМаршрута", Новый Структура("Подразделение",Строка.Подразделение)); 
					Если НЕ ЗначениеЗаполнено(Строка.Подразделение) Тогда
						ТекСпецификация = ОпределитьСпецификациюПоУмолчанию(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, КонецМесяца(Строка.ДатаПотребности), Неопределено);
					Иначе
						ТекСпецификация = ПРГ_ДопФункцииКлиентСервер.ОпределитьСпецификацию(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, КонецМесяца(Строка.ДатаПотребности), Строка.Подразделение);
					КонецЕсли;
					ИсхПараметры.Вставить("Спецификация", ТекСпецификация);
					//02.12.2015 Островерхий} 
					//25.08.2015 Островерхий}

					Результат = Новый Структура;
					Результат.Вставить("ИсходныеКомплектующие");
					//m_ionov@mail.ru 11.10.2016
					Если ПРГ_ИсппользуетсяБлокМолочногоПроизводства Тогда
						Результат.Вставить("СопутствующиеИзделия");
					КонецЕсли;
					//------- m_ionov@mail.ru -------
							
					МассивВидовВоспроизводства = Новый Массив;
					МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Закупка);
					МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка);
					//m_ionov@mail.ru 21.09.2016
					Если ПРГ_ИсппользуетсяБлокМолочногоПроизводства Тогда
						МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Производство);
					КонецЕсли;
					//------- m_ionov@mail.ru -------
					
					Параметры = Новый Структура;
					//{25.08.2015 Островерхий заявка №42944 
					//Параметры.Вставить("ДатаСпецификации", Строка.ДатаПотребности); 
					Параметры.Вставить("ДатаСпецификации", КонецМесяца(Строка.ДатаПотребности));
					//25.08.2015 Островерхий} 
					Параметры.Вставить("Отбор", Новый Структура("ВидВоспроизводства", МассивВидовВоспроизводства));
					
					//начало изменений БП 04 вставим переменную для расчета потребности т.к. расчет  потребности отличается
					//РазузловатьНоменклатуру(Источник,     Результат, Параметры = Неопределено,РазузловыватьНоменклатуруСоСпецификацией = Ложь,РассчитыватьПотребность=Ложь) Экспорт
					МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(ИсхПараметры, Результат, Параметры, Ложь, Истина);
					//конец изменений БП 04
					
					Если МассивОшибок.Количество() > 0 Тогда
						
						Для каждого Ошибка из МассивОшибок Цикл
							
							Сообщить("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
							Сообщить(" Спецификация: " + Ошибка.Спецификация);
							Сообщить(" Номер строки: " + Ошибка.НомерСтроки);
							Сообщить(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
						
						КонецЦикла;
						
					КонецЕсли;
							
					Если Результат <> Неопределено Тогда
						
						Для каждого СтрокаРазузлования из Результат.ИсходныеКомплектующие Цикл
							
							ДополнитьТаблицу(ТекущиеПотребности, НовыеПотребности,, НовыеПотребности.Индекс(Строка));
							ИндексСтроки = ТекущиеПотребности.Количество() - 1;
							ТекущиеПотребности[ИндексСтроки].Номенклатура = СтрокаРазузлования.Номенклатура;
							ТекущиеПотребности[ИндексСтроки].ХарактеристикаНоменклатуры = СтрокаРазузлования.ХарактеристикаНоменклатуры;
							ТекущиеПотребности[ИндексСтроки].ЕдиницаИзмерения = СтрокаРазузлования.Номенклатура.ЕдиницаХраненияОстатков;
							ТекущиеПотребности[ИндексСтроки].Количество = СтрокаРазузлования.Количество * СтрокаРазузлования.ЕдиницаИзмерения.Коэффициент / СтрокаРазузлования.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
							ТекущиеПотребности[ИндексСтроки].КонечнаяПродукция = Строка.Номенклатура;
							//{25.08.2015 Островерхий заявка №б/н 
							ТекущиеПотребности[ИндексСтроки].Спецификация = ТекСпецификация; 
							//ТекущиеПотребности[ИндексСтроки].Спецификация = ПРГ_ДопФункцииКлиентСервер.ОпределитьСпецификацию(Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, КонецМесяца(Строка.ДатаПотребности),Неопределено);
							//25.08.2015 Островерхий} 
							ТекущиеПотребности[ИндексСтроки].КодКупажа = СтрокаРазузлования.КодКупажа;
														
						КонецЦикла;
						
						//m_ionov@mail.ru 11.10.2016
						Если ПРГ_ИсппользуетсяБлокМолочногоПроизводства Тогда
							Для каждого СтрокаРазузлования из Результат.СопутствующиеИзделия Цикл
								
								Если Не СтрокаРазузлования.СопутствующееИзделие Тогда
									Продолжить;
								КонецЕсли;
								
								ДополнитьТаблицу(ТекущиеПотребности, НовыеПотребности,, НовыеПотребности.Индекс(Строка));
								ИндексСтроки = ТекущиеПотребности.Количество() - 1;
								
								ТекущиеПотребности[ИндексСтроки].Номенклатура = СтрокаРазузлования.Номенклатура;
								ТекущиеПотребности[ИндексСтроки].ХарактеристикаНоменклатуры = СтрокаРазузлования.ХарактеристикаНоменклатуры;
								ТекущиеПотребности[ИндексСтроки].ЕдиницаИзмерения = СтрокаРазузлования.Номенклатура.ЕдиницаХраненияОстатков;
								ТекущиеПотребности[ИндексСтроки].Количество = СтрокаРазузлования.Количество * СтрокаРазузлования.ЕдиницаИзмерения.Коэффициент / СтрокаРазузлования.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
								ТекущиеПотребности[ИндексСтроки].КонечнаяПродукция = Строка.Номенклатура;
								ТекущиеПотребности[ИндексСтроки].Спецификация = ТекСпецификация; 
								
								
							КонецЦикла;
							
						КонецЕсли;
						//------- m_ionov@mail.ru -------
						
					КонецЕсли;
					
				Иначе
					
					ДополнитьТаблицу(ТекущиеПотребности, НовыеПотребности,, НовыеПотребности.Индекс(Строка));
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ДополнитьТаблицу(ТекущиеПотребности, НовыеПотребности);
			
		КонецЕсли;
						
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеПотребности) = Тип("ТаблицаЗначений") Тогда
		
		ТекущиеПотребности.Колонки.Добавить("НеобходимоеКоличество");
		ТекущиеПотребности.Колонки.Добавить("ОстатокНаСкладе");
		ТекущиеПотребности.Колонки.Добавить("НормативныйОстаток");
		ТекущиеПотребности.Колонки.Добавить("ЗначениеТочкиЗаказа");
		
		ТекущиеПотребности.Колонки.Удалить("Период");
		ТекущиеПотребности.Колонки.Добавить("Период");
		
		Для каждого Строка из ТекущиеПотребности Цикл
			
			Строка.ДатаПотребности = НачалоДня(Строка.ДатаПотребности);
			//Привед дату потребности с учетом указанной периодичности
			
			Если ПериодичностьДетализации = Перечисления.Периодичность.День Тогда
				//m_ionov@mail.ru 09.02.2017
				//Строка.ДатаПотребности  = Строка.ДатаПотребности;
				Если Строка.Номенклатура.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство Тогда
					//m_ionov@mail.ru 13.02.2017
					//Для полуфабриката - дата потребности - это плановая дата выпуска, поэтому дату не меняем
					Строка.ДатаПотребности  = НачалоДня(Строка.ДатаПотребности);
				Иначе
					Строка.ДатаПотребности  = НачалоДня(Строка.ДатаПотребности) - 60*60*24*Строка.КонечнаяПродукция.НСИ_ПоставкаДоДатыПроизводстваДней;
				КонецЕсли;
				//------- m_ionov@mail.ru -------
			Иначе
				Период = Строка.ДатаПотребности;
				УправлениеПланированием.ВыровнятьПериод(Период, , ПериодичностьДетализации);
				Строка.ДатаПотребности = Период; 
			КонецЕсли;
			
			Строка.НеобходимоеКоличество = Строка.Количество;
			Строка.ОстатокНаСкладе = 0;
			Строка.НормативныйОстаток = 0;
			Строка.ЗначениеТочкиЗаказа = 0;
			
			УстановитьПериодВПотребностях(Строка);
			
		КонецЦикла;
		
		//Если мИспользоватьРазузлование Тогда

		//	ТекущиеПотребности.Свернуть("Период, Номенклатура, ХарактеристикаНоменклатуры, ТоварТара, ДатаПотребности, Заказ, КонечнаяПродукция, Проект", "Количество,НеобходимоеКоличество");
		//	
		//Иначе
			
			//{01.04.2015 Островерхий заявка №36501 
			//ТекущиеПотребности.Свернуть("Период, Номенклатура, ХарактеристикаНоменклатуры, ТоварТара, ДатаПотребности, Проект, КонечнаяПродукция, Спецификация", "Количество,НеобходимоеКоличество,ОстатокНаСкладе,НормативныйОстаток,ЗначениеТочкиЗаказа");
			//ТекущиеПотребности.Свернуть("Период, Номенклатура, ХарактеристикаНоменклатуры, ТоварТара, ДатаПотребности, Проект, КонечнаяПродукция, Спецификация, Заказ, ", "Количество,НеобходимоеКоличество,ОстатокНаСкладе,НормативныйОстаток,ЗначениеТочкиЗаказа"); // добавлю ", КодКупажа" в поля для свертки
			ТекущиеПотребности.Свернуть("Период, Номенклатура, ХарактеристикаНоменклатуры, ТоварТара, ДатаПотребности, Проект, КонечнаяПродукция, Спецификация, Заказ, КодКупажа", "Количество,НеобходимоеКоличество,ОстатокНаСкладе,НормативныйОстаток,ЗначениеТочкиЗаказа"); // // Шевченков 20150807 №42531 выше строка закомментил  
			//01.04.2015 Островерхий} 
			
			//КонецЕсли;
		
		СкорректироватьПотребности(ТекущиеПотребности);
				
		Возврат ТекущиеПотребности;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ВыполнитьВыборкуДанных()

Функция СкорректироватьПотребности(ТаблицаПотребности)
      	  	
	// Скорректируем план потребности с учетом остатков на складе и нормативным остатком
	СписокСкладов = Склады.ВыгрузитьКолонку("Склад");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	               |	СУММА(ВложенныйЗапрос.КоличествоОстаток) КАК КоличествоОстаток,
	               |	СУММА(ВложенныйЗапрос.МинимальныйСтраховойЗапас) КАК МинимальныйСтраховойЗапас,
				   |	СУММА(ВложенныйЗапрос.ЗначениеТочкиЗаказа) КАК ЗначениеТочкиЗаказа
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	               |		ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |		ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |		0 КАК МинимальныйСтраховойЗапас,
				   |		0 КАК ЗначениеТочкиЗаказа
	               |	ИЗ
	               |		РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, " + ?(СписокСкладов.Количество() = 0,"","Склад В (&СписокСкладов)") + ") КАК ТоварыНаСкладахОстатки
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЗначенияТочкиЗаказаСрезПоследних.Номенклатура,
	               |		ЗначенияТочкиЗаказаСрезПоследних.ХарактеристикаНоменклатуры,
	               |		0,
	               |		ЗначенияТочкиЗаказаСрезПоследних.МинимальныйСтраховойЗапас,
				   |		ЗначенияТочкиЗаказаСрезПоследних.ЗначениеТочкиЗаказа
	               |	ИЗ
	               |		РегистрСведений.ЗначенияТочкиЗаказа.СрезПоследних(&ДатаОстатков, " + ?(СписокСкладов.Количество() = 0,"","Склад В (&СписокСкладов) ИЛИ Склад = Значение(Справочник.Склады.ПустаяСсылка)") + ") КАК ЗначенияТочкиЗаказаСрезПоследних) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.Номенклатура,
	               |	ВложенныйЗапрос.ХарактеристикаНоменклатуры";
				   
				   
	Запрос.УстановитьПараметр("ДатаОстатков",КонецДня(ДатаПланирования));	
	Запрос.УстановитьПараметр("СписокСкладов",СписокСкладов);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПотребности.Сортировать("ДатаПотребности ВОЗР");
	
	Для каждого СтрокаТаблицыОстатков Из ТаблицаОстатков Цикл
		
		СтрокиПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", СтрокаТаблицыОстатков.Номенклатура, СтрокаТаблицыОстатков.ХарактеристикаНоменклатуры));
		
		Инд = 1;
		
		Для каждого СтрокаПотребности Из СтрокиПотребности Цикл
									
			Если СтрокаТаблицыОстатков.КоличествоОстаток = 0 Тогда
				
				//Если остаток закончился то добавим нормативный остаток (нормативный остаток вешаем на последнюю строчку)
				СтрокаПотребности.НормативныйОстаток = СтрокаТаблицыОстатков.МинимальныйСтраховойЗапас;
				СтрокаПотребности.ЗначениеТочкиЗаказа = СтрокаТаблицыОстатков.ЗначениеТочкиЗаказа;
				////m.ionov@a-prof.ru 28.04.2014
				////Потребности не корректируем с учетом остатка
				СтрокаПотребности.Количество = СтрокаПотребности.Количество + СтрокаПотребности.НормативныйОстаток;
				//----m.ionov@a-prof.ru---
				
				Прервать;
				
			КонецЕсли;
									
			Если Инд = СтрокиПотребности.Количество() Тогда
				//В последнюю сроку добавляем весь остаток и нормативный остаток
				СтрокаПотребности.НормативныйОстаток = СтрокаТаблицыОстатков.МинимальныйСтраховойЗапас;
				СтрокаПотребности.ЗначениеТочкиЗаказа = СтрокаТаблицыОстатков.ЗначениеТочкиЗаказа;
				СтрокаПотребности.ОстатокНаСкладе = СтрокаТаблицыОстатков.КоличествоОстаток;
				
				////m.ionov@a-prof.ru 28.04.2014
				////Потребности не корректируем с учетом остатка
				СтрокаПотребности.Количество = СтрокаПотребности.Количество + СтрокаПотребности.НормативныйОстаток - СтрокаТаблицыОстатков.КоличествоОстаток;	
				Если СтрокаПотребности.Количество < 0 Тогда
					СтрокаПотребности.Количество = 0;
				КонецЕсли;
				//----m.ionov@a-prof.ru---
			Иначе
				Если СтрокаПотребности.Количество = 0 Тогда
					Инд = Инд + 1;
					Продолжить;
				КонецЕсли;
				
				КолВоКСписанию = Мин(СтрокаПотребности.Количество,СтрокаТаблицыОстатков.КоличествоОстаток);
				////m.ionov@a-prof.ru 28.04.2014
				////Потребности не корректируем с учетом остатка
				СтрокаПотребности.Количество = СтрокаПотребности.Количество - КолВоКСписанию;
				//----m.ionov@a-prof.ru---
				СтрокаПотребности.ОстатокНаСкладе = КолВоКСписанию;
				СтрокаТаблицыОстатков.КоличествоОстаток = СтрокаТаблицыОстатков.КоличествоОстаток - КолВоКСписанию;
			КонецЕсли;
			
			Инд = Инд + 1;
			
		КонецЦикла;
		
	КонецЦикла;
			
	Возврат ТаблицаПотребности;
	
КонецФункции // СкорректироватьПотребностиВНоменклутуре()

Процедура РаспределитьПоНоменклатуре(ТаблицаПриемник, ТаблицаИсточник)

	ИндексСтроки = 0;

	Пока ИндексСтроки < ТаблицаИсточник.Количество() Цикл
		
		Если ТипЗнч(ТаблицаИсточник[ИндексСтроки].Номенклатура) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда

			ТаблицаРезультатРаспределения = Новый ТаблицаЗначений;

			Коэффициенты = Новый Массив();
			Значения     = Новый Соответствие();

			Значения.Вставить("Количество", ТаблицаИсточник[ИндексСтроки].Количество * ТаблицаИсточник[ИндексСтроки].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент);

			Номенклатура = Справочники.Номенклатура.Выбрать(,, Новый Структура("НоменклатурнаяГруппа", ТаблицаИсточник[ИндексСтроки].Номенклатура));
			
			Пока Номенклатура.Следующий() Цикл
				
				Если Номенклатура.ВесовойКоэффициентВхождения > 0 Тогда
					
					ДополнитьТаблицу(ТаблицаРезультатРаспределения, ТаблицаИсточник, , ИндексСтроки);
					ТаблицаРезультатРаспределения[ТаблицаРезультатРаспределения.Количество() - 1].Номенклатура = Номенклатура.Ссылка;
					ТаблицаРезультатРаспределения[ТаблицаРезультатРаспределения.Количество() - 1].ВидВоспроизводства = Номенклатура.Ссылка.ВидВоспроизводства;
					Коэффициенты.Добавить(Номенклатура.ВесовойКоэффициентВхождения);
					
				КонецЕсли;
				
			КонецЦикла;

			ТаблицаИсточник.Удалить(ТаблицаИсточник[ИндексСтроки]);
			
			Строки = Новый Массив();
			Для каждого Строка из ТаблицаРезультатРаспределения Цикл
				
				Строки.Добавить(Строка);
				
			КонецЦикла;
			
			Распределить(Строки, Коэффициенты, Значения);
			
			Индекс = 0;
			
			Пока Индекс < ТаблицаРезультатРаспределения.Количество() Цикл
				
				Если ТаблицаРезультатРаспределения[Индекс].Количество <= 0 Тогда
					
					ТаблицаРезультатРаспределения.Удалить(Индекс);
					
				Иначе
					
					ТаблицаРезультатРаспределения[Индекс].Количество = ТаблицаРезультатРаспределения[Индекс].Количество / ТаблицаРезультатРаспределения[Индекс].Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
					Индекс = Индекс + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДополнитьТаблицу(ТаблицаПриемник, ТаблицаРезультатРаспределения);
			
		Иначе
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЕсли;
		
	КонецЦикла;

	ДополнитьТаблицу(ТаблицаПриемник, ТаблицаИсточник);
	
КонецПроцедуры // РаспределитьПоНоменклатуре()

Процедура Распределить(Строки, Коэффициенты, Значения, ДополнятьЗначения = Ложь)

	СуммаКоэффициентов = 0;
	
	Для каждого Коэффициент из Коэффициенты Цикл
		
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
		
	КонецЦикла;
	
	Для Индекс = 0 по Строки.Количество() - 1 Цикл
		
		Для каждого Значение из Значения Цикл
			
			Если СуммаКоэффициентов = 0 Тогда
				
				Строки[Индекс][Значение.Ключ] = 0;
				
			Иначе
				
				Если Индекс = Строки.Количество() - 1 Тогда
					
					Строки[Индекс][Значение.Ключ] = ?(ДополнятьЗначения, Строки[Индекс][Значение.Ключ], 0) + Значение.Значение;
					Значения.Вставить(Значение.Ключ, 0);
					
				Иначе
					
					Строки[Индекс][Значение.Ключ] = ?(ДополнятьЗначения, Строки[Индекс][Значение.Ключ], 0) + Окр(Значение.Значение * Коэффициенты[Индекс] / СуммаКоэффициентов, 2);
					
					Если Значение.Значение > 0 Тогда
						
						Значения.Вставить(Значение.Ключ, Значение.Значение - Строки[Индекс][Значение.Ключ]);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СуммаКоэффициентов = СуммаКоэффициентов - Коэффициенты[Индекс];
		
	КонецЦикла;

КонецПроцедуры // Распределить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

Процедура ПроверкаРеквизитов(Отказ, Заголовок)
	
	РеквизитыТабПотребности = "ДатаПотребности, Номенклатура, ЕдиницаИзмерения";
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Потребности", Новый Структура(РеквизитыТабПотребности), Отказ, Заголовок);

КонецПроцедуры // ПроверкаРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если мУдалятьДвижения Тогда
		
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
		
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ПроверкаРеквизитов(Отказ, Заголовок);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат = Потребности.Выгрузить();
	Результат.Колонки.Удалить("Период");
	Результат.Очистить();
	
	Для каждого Строка из Потребности Цикл
		
		Если Строка.НеобходимоеКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
				
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Количество = НоваяСтрока.НеобходимоеКоличество * НоваяСтрока.ЕдиницаИзмерения.Коэффициент / НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		
	КонецЦикла;
	
	//СрезПоследних = РегистрыСведений.КалендарныеПотребностиВНоменклатуре.СрезПоследних(Дата);
	//
	//СрезПоследних.Колонки.Удалить(СрезПоследних.Колонки["Регистратор"]);
	//СрезПоследних.Колонки.Удалить(СрезПоследних.Колонки["НомерСтроки"]);
	//СрезПоследних.Колонки.Удалить(СрезПоследних.Колонки["Активность"]);
	//
	//Индекс = 0;
	//
	//Пока Индекс < СрезПоследних.Количество() Цикл
	//	
	//	Если СрезПоследних[Индекс].Период < Дата И СрезПоследних[Индекс].Количество = 0 Тогда
	//		
	//		СрезПоследних.Удалить(Индекс);
	//		
	//	Иначе
	//		
	//		Индекс = Индекс + 1;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//СрезПоследних.ЗаполнитьЗначения(0, "Количество");
	
	Результат.Колонки.Добавить("Период");
	Результат.Колонки.Добавить("Сценарий");
	
	//УправлениеПланированием.ДополнитьТаблицу(Результат, СрезПоследних);

	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		
		Результат.ЗаполнитьЗначения(Дата, "Период");
		Результат.ЗаполнитьЗначения(Сценарий, "Сценарий");
		//{01.04.2015 Островерхий заявка №36501 
		//Результат.Свернуть("Сценарий, Период, ДатаПотребности, Проект, Номенклатура, ХарактеристикаНоменклатуры, ТоварТара, КонечнаяПродукция, Спецификация", "Количество");
		Результат.Свернуть("Сценарий, Период, ДатаПотребности, Проект, Номенклатура, ХарактеристикаНоменклатуры, ТоварТара, КонечнаяПродукция, Спецификация, Заказ", "Количество");
		//01.04.2015 Островерхий} 
		
		//++ Spl_Апроф 05.06.2014 (k.russkih@a-prof.ru)
		Если Результат.Количество() > 0 Тогда
			Результат.Сортировать("ДатаПотребности Возр");
			СторноТаблица = СформируемСторноТаблицу(Результат[0].ДатаПотребности, Результат[Результат.Количество()-1].ДатаПотребности);
			ДополнитьТаблицу(Результат, СторноТаблица);
		КонецЕсли;
		//-- Spl_Апроф
		
		Движения.КалендарныеПотребностиВНоменклатуре.Загрузить(Результат);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		
		Возврат;
		
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

Процедура СформироватьПланыЗакупок() Экспорт
	ВремТаб = Потребности.Выгрузить();
	
	ВремТаб.Свернуть("ДатаПотребности, Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, Коэффициент, ТоварТара, Проект", "НеобходимоеКоличество");
	ВремТаб.Колонки.НеобходимоеКоличество.Имя = "Количество";
	
	ВремТаб.Колонки.Добавить("ОтветственныйМенеджерЗаПокупки");
	
	Для Каждого СтрокаПотребности Из ВремТаб Цикл
		СтрокаПотребности.ОтветственныйМенеджерЗаПокупки = СтрокаПотребности.Номенклатура.ОтветственныйМенеджерЗаПокупки;	
	КонецЦикла;	
	
	ВремТаб.Сортировать("ОтветственныйМенеджерЗаПокупки, ДатаПотребности, Номенклатура, ХарактеристикаНоменклатуры");
	
	ТекМенеджер = Неопределено;
	ТекПланЗакупок = Неопределено;
	
	Инд = 0;
	Для Каждого СтрокаПотребности Из ВремТаб Цикл
		
		ОбработкаПрерыванияПользователя();
		Инд = Инд + 1;
		Состояние("Обрабатывается строка " + СокрЛП(Инд) + " / " + СокрЛП(ВремТаб.Количество()));
		
		Если СтрокаПотребности.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПотребности.ОтветственныйМенеджерЗаПокупки) Тогда
			Сообщить("Потребность " + СокрЛП(СтрокаПотребности.Номенклатура) + " не распределена. Не назначен менеджер по закупкам в справочнике ""Номенклатура"" ", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если Не ТекМенеджер = СтрокаПотребности.ОтветственныйМенеджерЗаПокупки Тогда
			
			Если Не ТекПланЗакупок = Неопределено Тогда
				ТекПланЗакупок.Записать();
				СтрокаПланов = ПланыЗакупок.Добавить();
				СтрокаПланов.ПланЗакупок = ТекПланЗакупок.Ссылка;
				СтрокаПланов.Пометка = Истина;
			КонецЕсли;
			
			ТекМенеджер = СтрокаПотребности.ОтветственныйМенеджерЗаПокупки;
			
			ТекПланЗакупок = Документы.ПланЗакупок.СоздатьДокумент();
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ТекПланЗакупок, "Покупка");
			
			ТекПланЗакупок.Дата = ТекущаяДата();
			
			ТекПланЗакупок.ВалютаДокумента = глЗначениеПеременной("ВалютаУправленческогоУчета");
			
			ТекПланЗакупок.Сценарий = Сценарий;
			ТекПланЗакупок.ПериодичностьДетализации = ПериодичностьДетализации;
			ТекПланЗакупок.ДатаПланирования = ДатаПланирования;
			
			ТекПланЗакупок.ОтветственныйМенеджерЗаПокупки = ТекМенеджер;
			
		КонецЕсли;
		
		СтрокаДокумента = ТекПланЗакупок.СоставПлана.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокумента,СтрокаПотребности);
		СтрокаДокумента.Период = СтрокаПотребности.ДатаПотребности; 
		
		СтрокаДокумента.СтавкаНДС = СтрокаДокумента.Номенклатура.СтавкаНДС;
		
	КонецЦикла;
	
	Если Не ТекПланЗакупок = Неопределено Тогда
		ТекПланЗакупок.Записать();
		СтрокаПланов = ПланыЗакупок.Добавить();
		СтрокаПланов.ПланЗакупок = ТекПланЗакупок.Ссылка;
		СтрокаПланов.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПериодВПотребностях(СтрокаПотребности) Экспорт
	Если ПериодичностьДетализации = Перечисления.Периодичность.День Тогда
		СтрокаПотребности.Период = Формат(СтрокаПотребности.ДатаПотребности,"ДФ=dd.MM.yyyy");
	ИначеЕсли ПериодичностьДетализации = Перечисления.Периодичность.Год Тогда
		СтрокаПотребности.Период = Формат(СтрокаПотребности.ДатаПотребности,"ДФ=yyyy");
	ИначеЕсли ПериодичностьДетализации = Перечисления.Периодичность.Месяц Тогда
		СтрокаПотребности.Период = Месяц(СтрокаПотребности.ДатаПотребности);
	ИначеЕсли ПериодичностьДетализации = Перечисления.Периодичность.Полугодие Тогда
		СтрокаПотребности.Период = ?(ДеньГода(СтрокаПотребности.ДатаПотребности) > 182,"2","1");
	ИначеЕсли ПериодичностьДетализации = Перечисления.Периодичность.Квартал Тогда
		СтрокаПотребности.Период = Формат(НачалоКвартала(СтрокаПотребности.ДатаПотребности),"ДФ=dd.MM.yyyy"); 
	ИначеЕсли ПериодичностьДетализации = Перечисления.Периодичность.Месяц Тогда
		СтрокаПотребности.Период = Месяц(СтрокаПотребности.ДатаПотребности);	
	ИначеЕсли ПериодичностьДетализации = Перечисления.Периодичность.Декада Тогда
		Период = СтрокаПотребности.ДатаПотребности;
		УправлениеПланированием.ВыровнятьПериод(Период, , ПериодичностьДетализации);
		СтрокаПотребности.Период = Формат(Период,"ДФ=dd.MM.yyyy");
	ИначеЕсли ПериодичностьДетализации = Перечисления.Периодичность.Неделя Тогда
		СтрокаПотребности.Период = НеделяГода(СтрокаПотребности.ДатаПотребности);	
	КонецЕсли;
КонецПроцедуры

// Данная процедура пополняет состав одной таблицы значений данными из другой.
//
// Аргументы:
//	ТаблицаПриемник		- пополняемая таблица
//	ТаблицаИсточник 	- таблица-источник данных. Если не указана - создается новая. 
//						Если не содержит колонок - создаются колонки как в источнике.
//	СПозиции 			- номер строки пополняемой таблицы, с которой производится добавление
//	НомерСтрокиИсточника - если указан номер строки таблимцы-источника
//						- добавляется данные только из нее
//
//
Процедура ДополнитьТаблицу(ТаблицаПриемник, ТаблицаИсточник, СПозиции = -1, НомерСтрокиИсточника = -1) Экспорт

	Если ТипЗнч(ТаблицаПриемник) <> Тип("ТаблицаЗначений") И ТипЗнч(ТаблицаПриемник) <> Тип("КоллекцияСтрокДереваЗначений") Тогда
		
		ТаблицаПриемник = Новый ТаблицаЗначений;
		
	КонецЕсли;
		
	Если ТипЗнч(ТаблицаПриемник) = Тип("ТаблицаЗначений") Тогда
		
		Если ТаблицаПриемник.Колонки.Количество() = 0 Тогда
			
			Для каждого Колонка из ТаблицаИсточник.Колонки Цикл
				
				Если Колонка.Имя = "Количество" Тогда
					ТаблицаПриемник.Колонки.Добавить(Колонка.Имя, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 8)));
				Иначе
					ТаблицаПриемник.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
				КонецЕсли;
					
			КонецЦикла;
						 			
		КонецЕсли;
						
	КонецЕсли;
	
	Если НомерСтрокиИсточника < 0 Тогда
		
		Для каждого СтрокаИсточник из ТаблицаИсточник Цикл
			
			// добавить (вставить) строку
			Если СПозиции < 0 Тогда
				
				НоваяСтрокаПриемник = ТаблицаПриемник.Добавить();
				
			Иначе
				
				НоваяСтрокаПриемник = ТаблицаПриемник.Вставить(СПозиции + ТаблицаИсточник.Индекс(СтрокаИсточник));
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, СтрокаИсточник);
			
		КонецЦикла;
			
	Иначе
		
		// добавить (вставить) строку
		Если СПозиции < 0 Тогда
			
			НоваяСтрокаПриемник = ТаблицаПриемник.Добавить();
			
		Иначе
			
			НоваяСтрокаПриемник = ТаблицаПриемник.Вставить(СПозиции);
			
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, ТаблицаИсточник[НомерСтрокиИсточника]);
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьТаблицу()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если мУдалятьДвижения Тогда
		
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
		
	КонецЕсли;

КонецПроцедуры

//++ Spl_Апроф 05.06.2014 (k.russkih@a-prof.ru)
Функция СформируемСторноТаблицу(ДатаНач, ДатаКон)

	Запрос = Новый Запрос;
	//ЗАпрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	УЗ_ПотребностиПроизводстваПотребности.Номенклатура,
	//			   |	УЗ_ПотребностиПроизводстваПотребности.ХарактеристикаНоменклатуры,
	//			   |	УЗ_ПотребностиПроизводстваПотребности.ДатаПотребности,
	//			   |	УЗ_ПотребностиПроизводстваПотребности.КонечнаяПродукция,
	//			   |	УЗ_ПотребностиПроизводстваПотребности.Проект,
	//			   |	УЗ_ПотребностиПроизводстваПотребности.ТоварТара,
	//			   |	УЗ_ПотребностиПроизводстваПотребности.Ссылка.Сценарий КАК Сценарий,
	//			   |	УЗ_ПотребностиПроизводстваПотребности.Спецификация,
	//			   |	УЗ_ПотребностиПроизводстваПотребности.Количество
	//			   |ПОМЕСТИТЬ Т_Потребности
	//			   |ИЗ
	//			   |	Документ.УЗ_ПотребностиПроизводства.Потребности КАК УЗ_ПотребностиПроизводстваПотребности
	//			   |ГДЕ
	//			   |	УЗ_ПотребностиПроизводстваПотребности.Ссылка = &Ссылка
	//			   |;
	//			   |
	//			   |////////////////////////////////////////////////////////////////////////////////
	//			   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//			   |	КалендарныеПотребностиВНоменклатуреСрезПоследних.Номенклатура,
	//			   |	КалендарныеПотребностиВНоменклатуреСрезПоследних.ХарактеристикаНоменклатуры,
	//			   |	КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности,
	//			   |	КалендарныеПотребностиВНоменклатуреСрезПоследних.КонечнаяПродукция,
	//			   |	КалендарныеПотребностиВНоменклатуреСрезПоследних.Проект,
	//			   |	КалендарныеПотребностиВНоменклатуреСрезПоследних.ТоварТара,
	//			   |	КалендарныеПотребностиВНоменклатуреСрезПоследних.Сценарий,
	//			   |	КалендарныеПотребностиВНоменклатуреСрезПоследних.Спецификация,
	//			   //m.ionov@a-prof.ru 15.06.2014
	//			   //|	-КалендарныеПотребностиВНоменклатуреСрезПоследних.Количество КАК Количество,
	//			   |	0 КАК Количество,
	//			   //----m.ionov@a-prof.ru---
	//			   |	&ДатаДвижения КАК Период
	//			   |ИЗ
	//			   |	РегистрСведений.КалендарныеПотребностиВНоменклатуре.СрезПоследних(
	//			   |			&Дата,
	//			   |			НЕ (Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности, Сценарий, Спецификация, КонечнаяПродукция, Проект, ТоварТара) В
	//			   |					(ВЫБРАТЬ
	//			   |						Т_ВТ.Номенклатура,
	//			   |						Т_ВТ.ХарактеристикаНоменклатуры,
	//			   |						Т_ВТ.ДатаПотребности,
	//			   |						Т_ВТ.Сценарий,
	//			   |						Т_ВТ.Спецификация,
	//			   |						Т_ВТ.КонечнаяПродукция,
	//			   |						Т_ВТ.Проект,
	//			   |						Т_ВТ.ТоварТара
	//			   |					ИЗ
	//			   |						Т_Потребности КАК Т_ВТ)) КАК КалендарныеПотребностиВНоменклатуреСрезПоследних
	//			   |ГДЕ
	//			   |	(КалендарныеПотребностиВНоменклатуреСрезПоследних.Номенклатура, КалендарныеПотребностиВНоменклатуреСрезПоследних.ХарактеристикаНоменклатуры, КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности, КалендарныеПотребностиВНоменклатуреСрезПоследних.Сценарий) В
	//			   |			(ВЫБРАТЬ
	//			   |				Т_ВТ.Номенклатура,
	//			   |				Т_ВТ.ХарактеристикаНоменклатуры,
	//			   |				Т_ВТ.ДатаПотребности,
	//			   |				Т_ВТ.Сценарий
	//			   |			ИЗ
	//			   |				Т_Потребности КАК Т_ВТ)";
				   
	ЗАпрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	УЗ_ПотребностиПроизводстваПотребности.Номенклатура,
	               |	УЗ_ПотребностиПроизводстваПотребности.ХарактеристикаНоменклатуры,
	               |	УЗ_ПотребностиПроизводстваПотребности.ДатаПотребности,
	               |	УЗ_ПотребностиПроизводстваПотребности.КонечнаяПродукция,
	               |	УЗ_ПотребностиПроизводстваПотребности.Проект,
	               |	УЗ_ПотребностиПроизводстваПотребности.ТоварТара,
	               |	УЗ_ПотребностиПроизводстваПотребности.Ссылка.Сценарий КАК Сценарий,
	               |	УЗ_ПотребностиПроизводстваПотребности.Спецификация,
	               |	УЗ_ПотребностиПроизводстваПотребности.Количество,
	               |	УЗ_ПотребностиПроизводстваПотребности.Заказ
	               |ПОМЕСТИТЬ Т_Потребности
	               |ИЗ
	               |	Документ.УЗ_ПотребностиПроизводства.Потребности КАК УЗ_ПотребностиПроизводстваПотребности
	               |ГДЕ
	               |	УЗ_ПотребностиПроизводстваПотребности.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КалендарныеПотребностиВНоменклатуреСрезПоследних.Номенклатура,
	               |	КалендарныеПотребностиВНоменклатуреСрезПоследних.ХарактеристикаНоменклатуры,
	               |	КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности,
	               |	КалендарныеПотребностиВНоменклатуреСрезПоследних.КонечнаяПродукция,
	               |	КалендарныеПотребностиВНоменклатуреСрезПоследних.Проект,
	               |	КалендарныеПотребностиВНоменклатуреСрезПоследних.ТоварТара,
	               |	КалендарныеПотребностиВНоменклатуреСрезПоследних.Сценарий,
	               |	КалендарныеПотребностиВНоменклатуреСрезПоследних.Спецификация,
	               |	0 КАК Количество,
	               |	&ДатаДвижения КАК Период,
	               |	КалендарныеПотребностиВНоменклатуреСрезПоследних.Заказ
	               |ИЗ
	               |	РегистрСведений.КалендарныеПотребностиВНоменклатуре.СрезПоследних(
	               |			&Дата,
	               |			НЕ (Номенклатура, ХарактеристикаНоменклатуры, ДатаПотребности, Сценарий, Спецификация, КонечнаяПродукция, Проект, ТоварТара, Заказ) В
	               |					(ВЫБРАТЬ
	               |						Т_ВТ.Номенклатура,
	               |						Т_ВТ.ХарактеристикаНоменклатуры,
	               |						Т_ВТ.ДатаПотребности,
	               |						Т_ВТ.Сценарий,
	               |						Т_ВТ.Спецификация,
	               |						Т_ВТ.КонечнаяПродукция,
	               |						Т_ВТ.Проект,
	               |						Т_ВТ.ТоварТара,
	               |						Т_ВТ.Заказ
	               |					ИЗ
	               |						Т_Потребности КАК Т_ВТ)) КАК КалендарныеПотребностиВНоменклатуреСрезПоследних
	               |ГДЕ
	               |	КалендарныеПотребностиВНоменклатуреСрезПоследних.Сценарий В
	               |			(ВЫБРАТЬ
	               |				Т_ВТ.Сценарий
	               |			ИЗ
	               |				Т_Потребности КАК Т_ВТ)
	               |	И КалендарныеПотребностиВНоменклатуреСрезПоследних.ДатаПотребности МЕЖДУ &ДатаНач И &ДатаКон";
				   
	Запрос.УстановитьПараметр("Дата", Новый Граница(Дата, ВидГраницы.Исключая));
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДвижения", Дата);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции // ()
 
//-- Spl_Апроф
 
// Функция определяет спецификацию по умолчанию для номенклатуры, характеристики и подразделения
// на указанную дату
//
// Параметры
//  Номенклатура               - СправочникСсылка.Номенклатура: номенклатура, спецификацию которой 
//                               требуется определить
//  ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры: характеристика номенклатуры,
//                               спецификацию которой требуется определить
//  Момент                     - Дата: момент времени, на который определяется спецификация
//  Подразделение              - СправочникСсылка.Подразделения: подразделение, для которого
//                  	         требуется определить спецификацию
//
// Возвращаемое значение:
//   Справочники.СпецификацииНоменклатуры - спецификация, определенная для указанного сочетания параметров как основная
//
Функция ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры = Неопределено, Момент, Подразделение = Неопределено) Экспорт

	Перем Спецификация;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОсновныеСпецификацииНоменклатуры.СпецификацияНоменклатуры КАК СпецификацияНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры КАК СпецификацияНоменклатуры,
	|		0 КАК Приоритет
	|	ИЗ
	|		РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура = &Номенклатура
	|					И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|					И НЕ Подразделение = &ПодразделениеПустаяСсылка) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		1
	|	ИЗ
	|		РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура = &Номенклатура
	|					И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|					И Подразделение = &Подразделение) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		2
	|	ИЗ
	|		РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура = &Номенклатура
	|					И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|					И Подразделение = &ПодразделениеПустаяСсылка) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		3
	|	ИЗ
	|		РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура = &Номенклатура
	|					И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		4
	|	ИЗ
	|		РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура = &Номенклатура
	|					И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатурыПустаяСсылка) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОсновныеСпецификацииНоменклатурыСрезПоследних.СпецификацияНоменклатуры,
	|		5
	|	ИЗ
	|		РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних) КАК ОсновныеСпецификацииНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновныеСпецификацииНоменклатуры.Приоритет");

	Запрос.УстановитьПараметр("Дата", ?(ТипЗнч(Момент) = Тип("Дата"), Момент, ТекущаяДата()));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", ?(ХарактеристикаНоменклатуры = Неопределено, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ХарактеристикаНоменклатуры));
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатурыПустаяСсылка", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("Подразделение", ?(Подразделение = Неопределено, Справочники.Подразделения.ПустаяСсылка(), Подразделение));
	Запрос.УстановитьПараметр("ПодразделениеПустаяСсылка", Справочники.Подразделения.ПустаяСсылка());

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Спецификация = Выборка.СпецификацияНоменклатуры;
		
	КонецЕсли;

	Возврат Спецификация;

КонецФункции // ОпределитьСпецификациюПоУмолчанию()

мИспользоватьПланыПроизводства = Метаданные.РегистрыНакопления.Найти("ПланыПроизводства") <> Неопределено;

мИспользоватьРазузлование = Метаданные.Справочники.Найти("СпецификацииНоменклатуры") <> Неопределено;

//m_ionov@mail.ru 21.09.2016
ПРГ_ИсппользуетсяБлокМолочногоПроизводства = ПРГ_ДопФункцииКлиентСервер.ПРГ_ИсппользуетсяБлокМолочногоПроизводства(Ссылка.Дата);
//------- m_ionov@mail.ru -------
