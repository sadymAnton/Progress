Перем мУдалятьДвижения Экспорт;

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Приказ" Тогда
		//ТабДокумент = ПечатьПриказа(); //breakpoint Островерхий, 15.11.2016 11:40:51  
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
	
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктПечатныхФорм = Новый Структура;
	
	Возврат СтруктПечатныхФорм;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	//{22.12.2016 Островерхий заявка №60480 
	Если Не Отказ Тогда
		ЗаписатьИзменениеСтатусов(Отказ);
	КонецЕсли; 
	//22.12.2016 Островерхий} 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеТабличнойЧасти("Условия", СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧасти("Исключения", СтруктураШапкиДокумента, Отказ, Заголовок);
	
	СтруктураТаблицДвижений = ПолучитьСтруктуруТаблицДвиженийРегистров(СтруктураШапкиДокумента);
	
	// Добавим дополнительные поля в структуру шапки документа.
	ПодготовитьСтруктуруШапкиДокумента(
		СтруктураШапкиДокумента,
		Отказ, 
		Заголовок
		);
		
	СформироватьТаблицыДвижений(СтруктураШапкиДокумента,СтруктураТаблицДвижений);	
	
	// Движения по документу
	Если Не Отказ 
		//{22.12.2016 Островерхий заявка №60480 
		И СтатусДокумента = Перечисления.ПЦ_СтатусыУстановкиДопУсловийИзмененияЦен.Согласовано Тогда
		//22.12.2016 Островерхий} 
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, СтруктураТаблицДвижений, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧасти(ИмяТабличнойЧасти, СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураОбязательныхПолей = Новый Структура();
	СтруктураОбязательныхПолей.Вставить("Условие");	
	
	Если ИмяТабличнойЧасти = "Условия" Тогда
	
	    СтруктураОбязательныхПолей.Вставить("ПроцентИзмененияЦены");
		
	КонецЕсли; 

	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
 	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Функция формирует структуру таблиц движений регистров.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//
// Возвращаемое значение:
//   Структура – Структура таблиц движений регистров
//
Функция ПолучитьСтруктуруТаблицДвиженийРегистров(
	СтруктураШапкиДокумента
	)
	
	ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены = Движения.ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены;
	ПЦ_УсловияДополнительногоИзмененияЦены	  		 = Движения.ПЦ_УсловияДополнительногоИзмененияЦены;
	
	//мТаблицаДвиженийИсключений = ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Выгрузить();
	//мТаблицаДвиженийУсловий 	 = ПЦ_УсловияДополнительногоИзмененияЦены.Выгрузить();
	
	СтруктураТаблицДвижений = Новый Структура;
	СтруктураТаблицДвижений.Вставить("ТаблицаДвиженийИсключений", ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Выгрузить());
	СтруктураТаблицДвижений.Вставить("ТаблицаДвиженийУсловий",    ПЦ_УсловияДополнительногоИзмененияЦены.Выгрузить());
	
	Возврат СтруктураТаблицДвижений;
	
КонецФункции // ПолучитьСтруктуруТаблицДвиженийРегистров()

Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, СтруктураТаблицДвижений, Отказ, Заголовок)

	ПЦ_УсловияДополнительногоИзмененияЦены(РежимПроведения, СтруктураШапкиДокумента, СтруктураТаблицДвижений, Отказ);	
    ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены(РежимПроведения, СтруктураШапкиДокумента, СтруктураТаблицДвижений, Отказ);
	
КонецПроцедуры

Процедура ПЦ_УсловияДополнительногоИзмененияЦены(РежимПроведения, СтруктураШапкиДокумента, СтруктураТаблицДвижений, Отказ)

	Если СтруктураТаблицДвижений.ТаблицаДвиженийУсловий.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		// регистр ПЦ_УсловияДополнительногоИзмененияЦены
		Движения.ПЦ_УсловияДополнительногоИзмененияЦены.Записывать = Истина;
		Движения.ПЦ_УсловияДополнительногоИзмененияЦены.Очистить();
		
		Для Каждого ТекСтрокаУсловия Из СтруктураТаблицДвижений.ТаблицаДвиженийУсловий Цикл
			Движение = Движения.ПЦ_УсловияДополнительногоИзмененияЦены.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,ТекСтрокаУсловия);
		КонецЦикла;
		
	КонецЕсли;	

КонецПроцедуры

Процедура ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены(РежимПроведения, СтруктураШапкиДокумента, СтруктураТаблицДвижений, Отказ)

	Если СтруктураТаблицДвижений.ТаблицаДвиженийИсключений.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		// регистр ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены
		Движения.ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Записывать = Истина;
		Движения.ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Очистить();
		
		Для Каждого ТекСтрокаИсключений Из СтруктураТаблицДвижений.ТаблицаДвиженийИсключений Цикл
			Движение = Движения.ПЦ_ИсключенияУсловииДополнительногоИзмененияЦены.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,ТекСтрокаИсключений);
		КонецЦикла;
		
	КонецЕсли;		

КонецПроцедуры
 
Процедура ПроверкаРеквизитов(Отказ, Заголовок, СтруктураШапкиДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.АдресПоставки,
		|	ВложенныйЗапрос.ПроектГП,
		|	ВложенныйЗапрос.ТоварнаяКатегория,
		|	ВложенныйЗапрос.Брендообъем,
		|	ВложенныйЗапрос.ПериодДействияС,
		|	ВложенныйЗапрос.ПериодДействияПо,
		|	ВложенныйЗапрос.Условие,
		|	ВложенныйЗапрос.Ссылка
		|ПОМЕСТИТЬ вт
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия.Ссылка КАК Ссылка,
		|		ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия.АдресПоставки КАК АдресПоставки,
		|		ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия.ПроектГП КАК ПроектГП,
		|		ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия.Брендообъем КАК Брендообъем,
		|		ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия.Условие КАК Условие,
		|		ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия.ПроцентИзмененияЦены КАК ПроцентИзмененияЦены,
		|		ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия.Комментарий КАК Комментарий,
		|		ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия.Ссылка.Контрагент КАК Контрагент,
		|		ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия.Ссылка.ПериодДействияС КАК ПериодДействияС,
		|		ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия.Ссылка.ПериодДействияПо КАК ПериодДействияПо
		|	ИЗ
		|		Документ.ПЦ_УстановкаУсловийДополнительногоИзмененияЦены.Условия КАК ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия
		|	ГДЕ
		|		ПЦ_УстановкаУсловийДополнительногоИзмененияЦеныУсловия.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПЦ_УсловияДополнительногоИзмененияЦены.Регистратор,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.НомерСтроки,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.Контрагент,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.АдресПоставки,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.ПроектГП,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.ТоварнаяКатегория,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.Брендообъем,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.ПериодДействияС,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.ПериодДействияПо,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.Условие
		|ИЗ
		|	вт КАК вт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПЦ_УсловияДополнительногоИзмененияЦены КАК ПЦ_УсловияДополнительногоИзмененияЦены
		|		ПО вт.Контрагент = ПЦ_УсловияДополнительногоИзмененияЦены.Контрагент
		|			И вт.АдресПоставки = ПЦ_УсловияДополнительногоИзмененияЦены.АдресПоставки
		|			И вт.ПроектГП = ПЦ_УсловияДополнительногоИзмененияЦены.ПроектГП
		|			И вт.ТоварнаяКатегория = ПЦ_УсловияДополнительногоИзмененияЦены.ТоварнаяКатегория
		|			И вт.Брендообъем = ПЦ_УсловияДополнительногоИзмененияЦены.Брендообъем
		|			И вт.Условие = ПЦ_УсловияДополнительногоИзмененияЦены.Условие
		|			И (НЕ ПЦ_УсловияДополнительногоИзмененияЦены.Регистратор = &Ссылка)
		|			И (вт.ПериодДействияС МЕЖДУ ПЦ_УсловияДополнительногоИзмененияЦены.ПериодДействияС И ПЦ_УсловияДополнительногоИзмененияЦены.ПериодДействияПо
		|				ИЛИ вт.ПериодДействияПо МЕЖДУ ПЦ_УсловияДополнительногоИзмененияЦены.ПериодДействияС И ПЦ_УсловияДополнительногоИзмененияЦены.ПериодДействияПо
		|				ИЛИ вт.ПериодДействияС < ПЦ_УсловияДополнительногоИзмененияЦены.ПериодДействияПо
		|					И вт.ПериодДействияПо > ПЦ_УсловияДополнительногоИзмененияЦены.ПериодДействияС)";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить().Выгрузить();

	Если Результат.Количество() > 0 Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке("Уж есть дублирующие документы установки условий дополнительного изменения цены:", Отказ, Заголовок);		
		Для каждого ТекСтрока Из Результат Цикл
			Сообщить(Строка(ТекСтрока.Регистратор)+" в строке "+Строка(ТекСтрока.НомерСтроки),СтатусСообщения.Информация);	
		КонецЦикла; 
		
	КонецЕсли; 
		
КонецПроцедуры // ПроверкаРеквизитов()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
// Параметры
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
//	Отказ - Булево - Признак отказа от проведения документа
//	Заголовок - Строка - Текст представления документа 
//
//
Процедура ПодготовитьСтруктуруШапкиДокумента(
	СтруктураШапкиДокумента, 
	Отказ, 
	Заголовок
	)  Экспорт
	
	СтруктураШапкиДокумента.ПериодДействияПо = КонецДня(СтруктураШапкиДокумента.ПериодДействияПо);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

Процедура СформироватьТаблицыДвижений(СтруктураШапкиДокумента, СтруктураТаблицДвижений)

	//Условия
	Для Каждого ТекСтрока Из Условия Цикл
		тНоваяСтрока = СтруктураТаблицДвижений.ТаблицаДвиженийУсловий.Добавить();
		ЗаполнитьЗначенияСвойств(тНоваяСтрока,ТекСтрока);
	КонецЦикла;
	
	СтруктураТаблицДвижений.ТаблицаДвиженийУсловий.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПериодДействияС, "ПериодДействияС"); 
	СтруктураТаблицДвижений.ТаблицаДвиженийУсловий.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПериодДействияПо, "ПериодДействияПо"); 
	СтруктураТаблицДвижений.ТаблицаДвиженийУсловий.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент"); 
	СтруктураТаблицДвижений.ТаблицаДвиженийУсловий.ЗаполнитьЗначения(Истина, "Активность");
	
	//Исключения
	Для Каждого ТекСтрока Из Исключения Цикл
		тНоваяСтрока = СтруктураТаблицДвижений.ТаблицаДвиженийИсключений.Добавить();
		ЗаполнитьЗначенияСвойств(тНоваяСтрока,ТекСтрока);
	КонецЦикла;

	СтруктураТаблицДвижений.ТаблицаДвиженийИсключений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПериодДействияС, "ПериодДействияС"); 
	СтруктураТаблицДвижений.ТаблицаДвиженийИсключений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПериодДействияПо, "ПериодДействияПо"); 
	СтруктураТаблицДвижений.ТаблицаДвиженийИсключений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Контрагент, "Контрагент");
	СтруктураТаблицДвижений.ТаблицаДвиженийИсключений.ЗаполнитьЗначения(Истина, "Активность");
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ПериодДействияС");
	ПроверяемыеРеквизиты.Добавить("ПериодДействияПо");
	ПроверяемыеРеквизиты.Добавить("Контрагент");

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Проведен
		|	И ЗаказПокупателя.Дата МЕЖДУ &ПериодДействияС И &ПериодДействияПо
		|	И ЗаказПокупателя.Контрагент = &Контрагент";

	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ПериодДействияПо", ПериодДействияПо);
	Запрос.УстановитьПараметр("ПериодДействияС", ПериодДействияС);

	РезультатПустой = Запрос.Выполнить().Пустой();

	Если НЕ РезультатПустой Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке("Есть оформленные заказы покупателей за период действия данного документа", ?(РольДоступна("ПолныеПрава"),Ложь,Отказ), Заголовок);	
	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьТаблицУсловий(ТЗ) Экспорт 

	Если ТЗ.Количество() > 0 Тогда
		Условия.Очистить();
	Иначе	
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.АдресПоставки,
		|	Таблица.ПроектГП,
		|	Таблица.ТоварнаяКатегория,
		|	Таблица.Брендообъем,
		|	Таблица.Условие,
		|	Таблица.ПроцентИзмененияЦены,
		|	Таблица.Комментарий
		|ПОМЕСТИТЬ втТаблица
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АдресаПоставки.Ссылка КАК АдресПоставки,
		|	ПРГ_ПроектыГП.Ссылка КАК ПроектГП,
		|	НСИ_ТоварныеКатегории.Ссылка КАК ТоварнаяКатегория,
		|	НСИ_Брендообъемы.Ссылка КАК Брендообъем,
		|	ПЦ_УсловияДополнительногоИзмененияЦены.Ссылка КАК Условие,
		|	втТаблица.ПроцентИзмененияЦены,
		|	втТаблица.Комментарий
		|ИЗ
		|	втТаблица КАК втТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НСИ_Брендообъемы КАК НСИ_Брендообъемы
		|		ПО (НЕ НСИ_Брендообъемы.ПометкаУдаления)
		|			И втТаблица.Брендообъем = НСИ_Брендообъемы.Код
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АдресаПоставки КАК АдресаПоставки
		|		ПО втТаблица.АдресПоставки = АдресаПоставки.КодАдреса
		|			И (АдресаПоставки.Владелец = &Ссылка)
		|			И (НЕ АдресаПоставки.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПРГ_ПроектыГП КАК ПРГ_ПроектыГП
		|		ПО втТаблица.ПроектГП = ПРГ_ПроектыГП.Код
		|			И (НЕ ПРГ_ПроектыГП.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НСИ_ТоварныеКатегории КАК НСИ_ТоварныеКатегории
		|		ПО втТаблица.ТоварнаяКатегория = НСИ_ТоварныеКатегории.Код
		|			И (НЕ НСИ_ТоварныеКатегории.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПЦ_УсловияДополнительногоИзмененияЦены КАК ПЦ_УсловияДополнительногоИзмененияЦены
		|		ПО втТаблица.Условие = ПЦ_УсловияДополнительногоИзмененияЦены.Код
		|			И (НЕ ПЦ_УсловияДополнительногоИзмененияЦены.ПометкаУдаления)";

	Запрос.УстановитьПараметр("Таблица",ТЗ);
	Запрос.УстановитьПараметр("Ссылка",Контрагент);

	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		тНоваяСтрока = Условия.Добавить();
		ЗаполнитьЗначенияСвойств(тНоваяСтрока,ВыборкаДетальныеЗаписи);
		
	КонецЦикла; 

КонецПроцедуры
 
Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	//Движения по регистру накопления "АП_СтатусыДокументов"
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструСтатусы(Отказ);
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = СтатусДокумента Тогда
	    СформируемЗаписьПоРегиструСтатусы(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусы(Отказ)

	мДатаЗаписи = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = СтатусДокумента;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры