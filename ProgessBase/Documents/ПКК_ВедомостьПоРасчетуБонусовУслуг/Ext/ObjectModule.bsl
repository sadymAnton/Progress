
Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Дивизион, ТипБонуса");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";

	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, Таблица) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "График".
	СтруктураПолейВедомость = Новый Структура();
	СтруктураПолейВедомость.Вставить("Контрагент"					, "Контрагент");
	СтруктураПолейВедомость.Вставить("ДоговорКонтрагента"        	, "ДоговорКонтрагента");
	СтруктураПолейВедомость.Вставить("МетодПредоставленияБонуса"	, "МетодПредоставленияБонуса");
	СтруктураПолейВедомость.Вставить("График"						, "График");
	СтруктураПолейВедомость.Вставить("Валюта"						, "Валюта");
	СтруктураПолейВедомость.Вставить("УИ" 							, "УИ");
	СтруктураПолейВедомость.Вставить("Исключено" 					, "Исключено");
	СтруктураПолейВедомость.Вставить("ИтогБазаБонуса" 				, "ИтогБазаБонуса");
	СтруктураПолейВедомость.Вставить("ИтогВесБруттоФакт" 			, "ИтогВесБруттоФакт");
	СтруктураПолейВедомость.Вставить("ПроцентШтрафа" 				, "ПроцентШтрафа");
	СтруктураПолейВедомость.Вставить("Курс" 						, "Курс");
	СтруктураПолейВедомость.Вставить("Кратность" 					, "Кратность");
	
	СтруктураПолейРасшифровка = Новый Структура();
    СтруктураПолейРасшифровка.Вставить("НачПериод" 					, "НачПериод");
    СтруктураПолейРасшифровка.Вставить("КонПериод" 					, "КонПериод");
	СтруктураПолейРасшифровка.Вставить("Бонус"						, "Бонус");
	СтруктураПолейРасшифровка.Вставить("СтатьяДДС"					, "СтатьяДДС");
	СтруктураПолейРасшифровка.Вставить("РасчПроцентВыполнения"		, "РасчПроцентВыполнения");
	СтруктураПолейРасшифровка.Вставить("ПроцентБонуса"				, "ПроцентБонуса");
	СтруктураПолейРасшифровка.Вставить("СуммаБонуса"				, "СуммаБонуса");
	СтруктураПолейРасшифровка.Вставить("ВесБруттоПлан"				, "ВесБруттоПлан");
	СтруктураПолейРасшифровка.Вставить("ВесБруттоФакт"				, "ВесБруттоФакт");
	СтруктураПолейРасшифровка.Вставить("Проект"          			, "Проект");
	СтруктураПолейРасшифровка.Вставить("ТоварнаяКатегория"			, "ТоварнаяКатегория");
	СтруктураПолейРасшифровка.Вставить("Брендообъем"				, "Брендообъем");
	СтруктураПолейРасшифровка.Вставить("УИ"							, "УИ");
	СтруктураПолейРасшифровка.Вставить("УИграфик"					, "УИграфик");
	СтруктураПолейРасшифровка.Вставить("Сумма"						, "СуммаБонуса");
	СтруктураПолейРасшифровка.Вставить("СуммаВзаиморасчетов"		, "СуммаБонуса");
	СтруктураПолейРасшифровка.Вставить("ВидРасчБазы"				, "ВидРасчБазы");
	СтруктураПолейРасшифровка.Вставить("ГарантируемыйОбъем"			, "ГарантируемыйОбъем");
	СтруктураПолейРасшифровка.Вставить("ГарантируемаяСумма"			, "ГарантируемаяСумма");
	СтруктураПолейРасшифровка.Вставить("БазаБонуса"					, "БазаБонуса");
	СтруктураПолейРасшифровка.Вставить("Бюджет"						, "Бюджет");
	СтруктураПолейРасшифровка.Вставить("СуммаШтрафа" 				, "СуммаШтрафа");
	СтруктураПолейРасшифровка.Вставить("СуммаБонусаБезШтрафа" 		, "СуммаБонусаБезШтрафа");
	СтруктураПолейРасшифровка.Вставить("ПериодВыплаты" 		        , "ПериодВыплаты");
	
	РезультатЗапросаВедомость = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Ведомость", СтруктураПолейВедомость);
	РезультатЗапросаРасшифровка = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Расшифровка", СтруктураПолейРасшифровка);
	
	// Подготовим таблицу заданий для проведения.
	ТаблицаВедомость = РезультатЗапросаВедомость.Выгрузить();
	ТаблицаРасшифровка = РезультатЗапросаРасшифровка.Выгрузить();
	
	Таблица = ТаблицаРасшифровка.Скопировать();
	Таблица.Колонки.Добавить("Контрагент");
	Таблица.Колонки.Добавить("ДоговорКонтрагента");
	Таблица.Колонки.Добавить("МетодПредоставленияБонуса");
	Таблица.Колонки.Добавить("График");
	Таблица.Колонки.Добавить("Валюта");
	Таблица.Колонки.Добавить("Исключено");
	Таблица.Колонки.Добавить("ИтогБазаБонуса");
	Таблица.Колонки.Добавить("ИтогВесБруттоФакт");
	Таблица.Колонки.Добавить("ПроцентШтрафа");
	Таблица.Колонки.Добавить("Курс");
	Таблица.Колонки.Добавить("Кратность");
	
	Для каждого стр из Таблица цикл
		 НайденыеСтроки = ТаблицаВедомость.НайтиСтроки(Новый Структура("УИ",стр.УИ));
		 Если НайденыеСтроки <> неопределено и НайденыеСтроки.Количество()>0 тогда
			ЗаполнитьЗначенияСвойств(стр,НайденыеСтроки[0]);
		КонецЕсли;
	 КонецЦикла;

КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, Таблица;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);
		
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, Таблица);
		
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Таблица, Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаНакладные          - таблица значений, содержащая данные для проведения и проверки ТЧ Накладные
//  ТаблицаПоручений          - таблица значений, содержащая данные для проведения и проверки ТЧ ДополнительныеПоручения,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, Таблица, Отказ, Заголовок)

	НаборДвижений = Движения.ПКК_ВедомостиБонусовУслуг;
	ТаблицаДвижений	= НаборДвижений.ВыгрузитьКолонки();
	ТаблицаДвижений.Очистить();
	
	Для каждого Строка Из Таблица Цикл
		Движение = ТаблицаДвижений.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
		ЗаполнитьЗначенияСвойств(Движение, Строка);
		//{16.09.2015 Островерхий заявка №б/н, возвращаем пересчет 
		//{25.05.2015 Островерхий заявка №39963 
		Если Движение.Валюта <> глЗначениеПеременной("ВалютаРегламентированногоУчета") тогда
			ПривестиКВалютеРегУчета(Движение,"Ведомость",Строка.Курс,Строка.Кратность);
		КонецЕсли; 
		//25.05.2015 Островерхий} 
		//16.09.2015 Островерхий} 
		 
		Движение.Регистратор = ЭтотОбъект.Ссылка;
	КонецЦикла;
	  	
	НаборДвижений.мТаблицаДвижений  = ТаблицаДвижений;
	НаборДвижений.мПериод			=  Дата;
	
	Движения.ПКК_ВедомостиБонусовУслуг.ВыполнитьДвижения();
	//НаборДвижений.Записать();
			
	НаборДвиженийБюджет = Движения.ПКК_РаспределенныйБюджетБонусовУслуг;
	ТаблицаДвиженийБюджет	= НаборДвиженийБюджет.ВыгрузитьКолонки();
	ТаблицаДвиженийБюджет.Очистить();
	
	Для каждого Строка Из Таблица Цикл
		Если Строка.Исключено Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = ТаблицаДвиженийБюджет.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Строка);
		ЗаполнитьЗначенияСвойств(Движение, СтруктураШапкиДокумента);
		Движение.Сумма = Строка.Бюджет;
		Если Движение.Валюта <> глЗначениеПеременной("ВалютаРегламентированногоУчета") тогда
			ПривестиКВалютеРегУчета(Движение,"Бюджет",Строка.Курс,Строка.Кратность);
		КонецЕсли;
		
		Движение.Дата = Строка.ПериодВыплаты;
		Движение.Период = Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Активность = Истина;
		
	КонецЦикла;
	
	НаборДвиженийБюджет.мТаблицаДвижений  = ТаблицаДвиженийБюджет;
	НаборДвиженийБюджет.мПериод			=  Дата; 
	
	Движения.ПКК_РаспределенныйБюджетБонусовУслуг.ВыполнитьДвижения();
	
	НаборДвиженийБюджет.Записать();
	
	//Получим остатки
	//Проверим а закрылся ли в ноль остаток
	СпГрафиков = Расшифровка.ВыгрузитьКолонку("УИграфик");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПКК_РаспределенныйБюджетБонусовУслугОстатки.УИграфик,
	               |	СУММА(ПКК_РаспределенныйБюджетБонусовУслугОстатки.СуммаОстаток) КАК СуммаОстаток,
	               |	ПКК_РаспределенныйБюджетБонусовУслугОстатки.Бонус
	               |ИЗ
	               |	РегистрНакопления.ПКК_РаспределенныйБюджетБонусовУслуг.Остатки(
	               |			,
	               |			УИграфик В (&УИГрафиков)) КАК ПКК_РаспределенныйБюджетБонусовУслугОстатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПКК_РаспределенныйБюджетБонусовУслугОстатки.УИграфик,
	               |	ПКК_РаспределенныйБюджетБонусовУслугОстатки.Бонус";
	Запрос.УстановитьПараметр("УИГрафиков", СпГрафиков);
	//Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(Новый МоментВремени(Дата,Ссылка),ВидГраницы.Исключая));
	
	ТаблицаОстатковБюджета = Запрос.Выполнить().Выгрузить();
	ВрТаблицаДвиженийБюджет = ТаблицаДвиженийБюджет.Скопировать();

	Для каждого Движение Из ВрТаблицаДвиженийБюджет Цикл
	
		СтрокиОстатка = ТаблицаОстатковБюджета.НайтиСтроки(Новый Структура("УИграфик,Бонус",Движение.УИграфик,Движение.Бонус));
		Если СтрокиОстатка.Количество() > 0 Тогда
			ОстатокБюджета = СтрокиОстатка[0].СуммаОстаток;
		Иначе
			ОстатокБюджета = 0;
		КонецЕсли;
				
		Если ОстатокБюджета > 0 Тогда //Высвобождаем бюджет
			ДвижениеПриход = ТаблицаДвиженийБюджет.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеПриход, Движение);
			
			ДвижениеПриход.Сумма = - ОстатокБюджета;
			
			ДвижениеПриход.Период = Дата;
			ДвижениеПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
			ДвижениеПриход.Активность = Истина;
		ИначеЕсли ОстатокБюджета < 0 Тогда //Выделяем бюджет
			ДвижениеПриход = ТаблицаДвиженийБюджет.Добавить();
			ЗаполнитьЗначенияСвойств(ДвижениеПриход, Движение);
			
			ДвижениеПриход.Сумма = - ОстатокБюджета;
			
			ДвижениеПриход.Период = Дата;
			ДвижениеПриход.ВидДвижения = ВидДвиженияНакопления.Приход;
			ДвижениеПриход.Активность = Истина;
		КонецЕсли;
	КонецЦикла;
	
	НаборДвиженийБюджет.мТаблицаДвижений  = ТаблицаДвиженийБюджет;
	НаборДвиженийБюджет.мПериод			=  Дата;
	
	Движения.ПКК_РаспределенныйБюджетБонусовУслуг.ВыполнитьДвижения();
	
	//{29.10.2015 Островерхий заявка №45338 
	НаборДвиженийБюджет = Движения.ПКК_БюджетБонусовУслуг;
	ТаблицаДвиженийПКК_БюджетБонусовУслуг	= НаборДвиженийБюджет.ВыгрузитьКолонки();
	ТаблицаДвиженийПКК_БюджетБонусовУслуг.Очистить(); 
	
	НайденныеСтроки = ТаблицаДвиженийБюджет.НайтиСтроки(Новый Структура("ВидДвижения", ВидДвиженияНакопления.Приход)); 
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		//{29.10.2015 Островерхий заявка №45338 
		//{28.06.2016 Островерхий заявка №53914 
		//Если НЕ Строка.Контрагент.Дивизион = Справочники.ПРГДивизионы.ФКК
		//	И НЕ Строка.Контрагент.НСИ_Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка() Тогда
		ЭтотГод = Год(ТекущаяДата());
		
		Если 
			(ЭтотГод < 2016 И НЕ Строка.Контрагент.Дивизион = Справочники.ПРГДивизионы.ФКК 
				И НЕ Строка.Контрагент.НСИ_Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка() )
			ИЛИ
			(ЭтотГод >= 2016 И НЕ Строка.Контрагент.НСИ_Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка()
				И НЕ Строка.Контрагент.Дивизион = Справочники.ПРГДивизионы.ФКК И НЕ Строка.Контрагент.НСИ_Вывеска.ТОПЛКК )
		Тогда
		//Если НЕ Строка.Контрагент.НСИ_Вывеска = Справочники.НСИ_Вывески.ПустаяСсылка()
		//	И (НЕ Строка.Контрагент.Дивизион = Справочники.ПРГДивизионы.ФКК 
		//		И НЕ Строка.Контрагент.НСИ_Вывеска.ТОПЛКК)Тогда
		//28.06.2016 Островерхий}
		
			Движение = ТаблицаДвиженийПКК_БюджетБонусовУслуг.Добавить();
			Движение.Дивизион  = Строка.Контрагент.Дивизион;
			Движение.Вывеска   = Справочники.НСИ_Вывески.ПустаяСсылка();
			Движение.СтатьяДДС = Строка.СтатьяДДС;
			Движение.Сумма     = - Строка.Сумма;	
			Движение.Период    = Строка.Дата;
			
			Движение = ТаблицаДвиженийПКК_БюджетБонусовУслуг.Добавить();
			Движение.Дивизион  = Строка.Контрагент.Дивизион;
			Движение.Вывеска   = Строка.Контрагент.НСИ_Вывеска;
			Движение.СтатьяДДС = Строка.СтатьяДДС;
			Движение.Сумма     = Строка.Сумма;	
			Движение.Период    = Строка.Дата;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//{06.11.2015 Островерхий заявка №45338 
	//Если Дата >= '20151106' Тогда  //breakpoint Островерхий, 11.11.2015 17:35:47  
		
		//{30.10.2015 Островерхий заявка №45338 
		НаборДвиженийБюджет.мТаблицаДвижений  = ТаблицаДвиженийПКК_БюджетБонусовУслуг;
		Движения.ПКК_БюджетБонусовУслуг.ВыполнитьДвижения();
		//30.10.2015 Островерхий} 	
		
	//КонецЕсли;  
	//06.11.2015 Островерхий}
	//29.10.2015 Островерхий}
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МожноИнтрактивноМенять() Тогда
		// <- Шевченков №50553 20160325
		МожноМенять = ИзмененСтатусБух();
		Отказ = Не МожноМенять;
		Если Отказ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Вам запрещено менять ведомость в статусе ""Согласовано""", Отказ);
		КонецЕсли;		
		// ->		
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаписатьИзменениеСтатусов(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПКК_АктНачисленияБонусовУслуг.Ссылка КАК Акт,
		|	ПКК_АктНачисленияБонусовУслуг.График,
		|	ПКК_АктНачисленияБонусовУслуг.Проведен,
		|	ПКК_АктНачисленияБонусовУслуг.Контрагент,
		|	ПКК_АктНачисленияБонусовУслуг.Контрагент.Код КАК КодКлиента,
		|	ПКК_АктНачисленияБонусовУслуг.СуммаДокумента КАК Сумма,
		|	ПКК_АктНачисленияБонусовУслуг.НачПериод,
		|	ПКК_АктНачисленияБонусовУслуг.КонПериод,
		|	ПКК_АктНачисленияБонусовУслуг.Валюта
		|ИЗ
		|	Документ.ПКК_АктНачисленияБонусовУслуг КАК ПКК_АктНачисленияБонусовУслуг
		|ГДЕ
		|	ПКК_АктНачисленияБонусовУслуг.Ведомость = &Ведомость
		|	И ПКК_АктНачисленияБонусовУслуг.Проведен = истина";

	Запрос.УстановитьПараметр("Ведомость", ЭтотОбъект.Ссылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Отказ = истина;
		ОбщегоНазначения.СообщитьОбОшибке("Для отмены проведения документа, сначал надо отменить проведение "+СокрЛП(ВыборкаДетальныеЗаписи.Акт));
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	//Движения по регистру накопления "АП_СтатусыДокументов"
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		СформируемЗаписьПоРегиструСтатусы(Отказ);
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = Статус Тогда
	    СформируемЗаписьПоРегиструСтатусы(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусы(Отказ)

	мДатаЗаписи = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		мДатаЗаписи  = мДатаЗаписи + 1;
		
		//НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
		
		НаборЗаписей.Прочитать();
	КонецЕсли;
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = Статус;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры

Функция МожноИнтрактивноМенять() Экспорт
	
	Если Статус = Перечисления.ПКК_СтатусВедомостиПоРасчетуБонусовУслуг.Согласован                                                                                 
		И Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.РуководительКредитногоКонтроля)
		И Не РольДоступна("АП_Администратор") Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	Акты.Очистить();
КонецПроцедуры

Процедура ПривестиКВалютеРегУчета(Движение,Регистр,Курс,Кратность)
	
	Если Регистр = "Бюджет" тогда
		Движение.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.Сумма, Движение.Валюта, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Курс, 1, Кратность );
		//Движение.Сумма = МодульВалютногоУчета.ПересчитатьВСуммуРегл(Движение.Сумма,глЗначениеПеременной("ВалютаРегламентированногоУчета"),Движение.Валюта,Дата);
	ИначеЕсли  Регистр = "Ведомость" тогда	
		Движение.БазаБонуса = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.БазаБонуса, Движение.Валюта, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Курс, 1, Кратность);	
		Движение.Бюджет = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.Бюджет, Движение.Валюта, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Курс, 1, Кратность);
		Движение.ГарантируемаяСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.ГарантируемаяСумма, Движение.Валюта, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Курс, 1, Кратность);
		Движение.СуммаБонуса = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.СуммаБонуса, Движение.Валюта, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Курс, 1, Кратность);
		Движение.СуммаБонусаБезШтрафа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.СуммаБонусаБезШтрафа, Движение.Валюта, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Курс, 1, Кратность);
		Движение.СуммаШтрафа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Движение.СуммаШтрафа, Движение.Валюта, глЗначениеПеременной("ВалютаРегламентированногоУчета"), Курс, 1, Кратность);
	КонецЕсли;
	
КонецПроцедуры


Функция ИзмененСтатусБух() Экспорт
	
	ЕстьИзменения = Ложь;
	
	ИзмененСтатусБух = Ложь;
	Для Каждого ТекРеквизит Из ЭтотОбъект.Метаданные().Реквизиты Цикл
		ТекРек = ТекРеквизит.Имя;
		Если ТекРек = "ПереданоВБух" Тогда
			Если Ссылка[ТекРек] <> ЭтотОбъект[ТекРек] Тогда
				ИзмененСтатусБух = Истина;
			КонецЕсли;				
			Продолжить
		КонецЕсли;
		Если Ссылка[ТекРек] <> ЭтотОбъект[ТекРек] Тогда			
			//Сообщить("Старый значение """ + Строка(ТекРек) + ": " + Ссылка[ТекРек] + """");
			//Сообщить("Новое значение  """ + Строка(ТекРек) + ": " + ЭтотОбъект[ТекРек] + """");
			ЕстьИзменения = Истина;
		КонецЕсли;		
	КонецЦикла;
	
	Для Каждого ТекРеквизит Из ЭтотОбъект.Метаданные().ТабличныеЧасти.Ведомость.Реквизиты Цикл
		ТекРек = ТекРеквизит.Имя;
		Для Каждого ТекСтрока Из Ведомость Цикл
			Если ТекСтрока[ТекРек] <> ЭтотОбъект.Ведомость[ТекСтрока.НомерСтроки-1][ТекРек] Тогда			
				//Сообщить("(" + Строка(ТекСтрока.НомерСтроки) + ") Ведомость. Старый значение """ + Строка(ТекРек) + ": " + Ссылка[ТекРек] + """");
				//Сообщить("(" + Строка(ТекСтрока.НомерСтроки) + ") Ведомость. Новое значение  """ + Строка(ТекРек) + ": " + ЭтотОбъект[ТекРек] + """");
				ЕстьИзменения = Истина;
			КонецЕсли;			
		КонецЦикла;		
	КонецЦикла;
	
	Для Каждого ТекРеквизит Из ЭтотОбъект.Метаданные().ТабличныеЧасти.Расшифровка.Реквизиты Цикл
		ТекРек = ТекРеквизит.Имя;
		Для Каждого ТекСтрока Из Расшифровка Цикл
			Если ТекСтрока[ТекРек] <> ЭтотОбъект.Расшифровка[ТекСтрока.НомерСтроки-1][ТекРек] Тогда			
				//Сообщить("(" + Строка(ТекСтрока.НомерСтроки) + ") Расшифровка. Старый значение """ + Строка(ТекРек) + ": " + Ссылка[ТекРек] + """");
				//Сообщить("(" + Строка(ТекСтрока.НомерСтроки) + ") Расшифровка. Новое значение  """ + Строка(ТекРек) + ": " + ЭтотОбъект[ТекРек] + """");
				ЕстьИзменения = Истина;
			КонецЕсли;			
		КонецЦикла;		
	КонецЦикла;
	
	Для Каждого ТекРеквизит Из ЭтотОбъект.Метаданные().ТабличныеЧасти.Акты.Реквизиты Цикл
		ТекРек = ТекРеквизит.Имя;
		Для Каждого ТекСтрока Из Акты Цикл
			Если ТекСтрока[ТекРек] <> ЭтотОбъект.Акты[ТекСтрока.НомерСтроки-1][ТекРек] Тогда			
				//Сообщить("(" + Строка(ТекСтрока.НомерСтроки) + ") Акты. Старый значение """ + Строка(ТекРек) + ": " + Ссылка[ТекРек] + """");
				//Сообщить("(" + Строка(ТекСтрока.НомерСтроки) + ") Акты. Новое значение  """ + Строка(ТекРек) + ": " + ЭтотОбъект[ТекРек] + """");
				ЕстьИзменения = Истина;
			КонецЕсли;			
		КонецЦикла;		
	КонецЦикла;
	
	Для Каждого ТекРеквизит Из ЭтотОбъект.Метаданные().ТабличныеЧасти.СтатусыГрафиков.Реквизиты Цикл
		ТекРек = ТекРеквизит.Имя;
		Для Каждого ТекСтрока Из СтатусыГрафиков Цикл
			Если ТекСтрока[ТекРек] <> ЭтотОбъект.СтатусыГрафиков[ТекСтрока.НомерСтроки-1][ТекРек] Тогда			
				//Сообщить("(" + Строка(ТекСтрока.НомерСтроки) + ") СтатусыГрафиков. Старый значение """ + Строка(ТекРек) + ": " + Ссылка[ТекРек] + """");
				//Сообщить("(" + Строка(ТекСтрока.НомерСтроки) + ") СтатусыГрафиков. Новое значение  """ + Строка(ТекРек) + ": " + ЭтотОбъект[ТекРек] + """");
				ЕстьИзменения = Истина;
			КонецЕсли;			
		КонецЦикла;		
	КонецЦикла;
	
	Возврат ?(Не ЕстьИзменения И ИзмененСтатусБух, Истина, Ложь);
	
КонецФункции
