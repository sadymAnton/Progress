Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;

Перем мУчетнаяПолитика;                 // (Общ)
Перем УчетнаяПолитикаБух;

Перем мСтруктураПараметровДляДокументовРасчетов Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

// Хранит список счетов-фактур, сформированных перед записью документа
Перем мМассивСформированныхСФ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОтчетаКомиссионера()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		КоличествоМест,
	|		Количество,
	|		ЕдиницаИзмеренияМест.Представление  КАК ЕдиницаИзмеренияМест,
	|		ЕдиницаИзмерения.Представление  КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма,
	|		СуммаВознаграждения КАК Вознаграждение,
	|		СуммаНДС,
	|		ХарактеристикаНоменклатуры КАК Характеристика,
	|		СерияНоменклатуры КАК Серия
	|	)
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ТекущийДокумент
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетКомиссионераОПродажах_Накладная";

	Макет = ПолучитьМакет("Накладная");

	// Выводим шапку накладной

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(Шапка, "Отчет комиссионера");
	ТабДокумент.Вывести(ОбластьМакета);

	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "ПолноеНаименование,");
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.Дата), "ПолноеНаименование,");

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеОрганизации;
	ОбластьМакета.Параметры.Поставщик = Шапка.Организация;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеКонтрагента;
	ОбластьМакета.Параметры.Получатель = Шапка.Контрагент;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	
	ТабДокумент.Вывести(ОбластьМакета);

	Сумма    = 0;
	СуммаНДС = 0;

	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	Пока ВыборкаСтрокТовары.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьСтроки.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтроки.Параметры.Товар = ВыборкаСтрокТовары.Товар + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Вывести(ОбластьСтроки);

		Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = ОбщегоНазначения.ФорматСумм(Шапка.СуммаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));
		ОбластьМакета.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, "В том числе НДС:", "Сумма НДС:");
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
	ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрокТовары.Количество()
	+ ", на сумму " + ОбщегоНазначения.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);

	МестВсего = Шапка.Товары.Выгрузить().Итог("КоличествоМест");
    Если МестВсего = 0 Тогда
		УниверсальныеМеханизмы.СкрытьКолонкиВТабличномДокументе(ТабДокумент, "Мест",5, "ШапкаТаблицы");
    КонецЕсли;

	
	Возврат ТабДокумент;

КонецФункции // ПечатьОтчетаКомиссионера()

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ИмяМакета = "Накладная" Тогда
		// Получить экземпляр документа на печать
		ТабДокумент = ПечатьОтчетаКомиссионера();	
		
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
	
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
	
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

#КонецЕсли

// Функция формирует значение нового ключа строки табличной части.
//
// Параметры:
//  ДокументОбъект – объект редактируемого документа,
//  ИмяТЧ          – имя табличной части объекта.
//
Функция ПолучитьНовыйКлючСтроки(ИмяТЧ = "Покупатели") Экспорт

	МаксКлюч = 0;
	Если ЭтотОбъект[ИмяТЧ].Количество() > 1 Тогда
		// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
		// рассчитывается от максимального существующего значения.
		СписокКлючей = Новый СписокЗначений;
		СписокКлючей.ЗагрузитьЗначения(ЭтотОбъект[ИмяТЧ].ВыгрузитьКолонку("КлючСтроки"));
		СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		МаксКлюч = СписокКлючей[0].Значение + 1;
	КонецЕсли;

	Возврат МаксКлюч;

КонецФункции // УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи()

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура("Накладная","Отчет комиссионера");
	СтруктураМакетов.Вставить("СерийныеНомера",      "Список серийных номеров");
	Возврат СтруктураМакетов;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура выполняет заполниение табличной части.
//
// Параметры:
//  ДокументПередачи - ссылка на документ основание.
//
Процедура ЗаполнитьТоварыУпр(ДокументПередачи = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("ДокументПередачи", ДокументПередачи);
	Запрос.УстановитьПараметр("СтатусПередачи",   Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);
	Запрос.УстановитьПараметр("ДатаОстатков",     ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Если ДокументПередачи = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.ХарактеристикаНоменклатуры,
		|	Остатки.СерияНоменклатуры,
		|	Остатки.КоличествоОстаток,
		|	Остатки.СуммаВзаиморасчетовОстаток КАК СтоимостьОтданнаяВалОстаток
		|ИЗ
		|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков,
		|												ДоговорКонтрагента   = &ДоговорКонтрагента
		|												И СтатусПередачи = &СтатусПередачи
		|" + ?(НЕ ЗначениеЗаполнено(Сделка), "", " И Сделка = &Сделка") + "
		|											) КАК Остатки
		|ГДЕ
		|	Остатки.КоличествоОстаток > 0
		|";
	Иначе
		ПараметрСделка = Сделка;
		УказаниеЗаказов = глЗначениеПеременной("УказаниеЗаказовВТабличнойЧастиДокументов");
		УказаниеЗаказовВТЧ = (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
						Или (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации);
		ВедениеВзаиморасчетов = ДокументПередачи.ДоговорКонтрагента.ВедениеВзаиморасчетов;
		ПолеЗаказ             = "";
		УсловиеЗаказ          = "";
		ПолеГруппировкиЗаказ  = "";
		Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ПолеЗаказ = ", Документ.Сделка КАК ЗаказПокупателя";
			ПолеГруппировкиЗаказ = ", Документ.Сделка";
		Иначе
			Если УказаниеЗаказовВТЧ Тогда
				ПараметрСделка = Неопределено;
			КонецЕсли;
			ПолеЗаказ = ",	ВЫБОР	КОГДА ДокТабличнаяЧасть.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
						|			ТОГДА Неопределено
						|			ИНАЧЕ ДокТабличнаяЧасть.ЗаказПокупателя
						|	КОНЕЦ КАК ЗаказПокупателя";
			ПолеГруппировкиЗаказ = "
						|,	ВЫБОР	КОГДА ДокТабличнаяЧасть.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
						|			ТОГДА Неопределено
						|			ИНАЧЕ ДокТабличнаяЧасть.ЗаказПокупателя
						|	КОНЕЦ";
			Если ЗначениеЗаполнено(ПараметрСделка) Тогда
				УсловиеЗаказ = "
						| И ДокТабличнаяЧасть.ЗаказПокупателя = &Сделка";
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр("Сделка", ПараметрСделка);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокТабличнаяЧасть.Номенклатура                КАК Номенклатура,
		|	ДокТабличнаяЧасть.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
		|	ДокТабличнаяЧасть.СерияНоменклатуры           КАК СерияНоменклатуры,
		|	ДокТабличнаяЧасть.СтавкаНДС                   КАК СтавкаНДС,
		|	МИНИМУМ(ДокТабличнаяЧасть.НомерСтроки)        КАК НомерСтроки,
		|	ДоговорыКонтрагентов.Ссылка                   КАК ДоговорКонтрагента,
		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов     КАК ВалютаВзаиморасчетов,
		|	СУММА(ДокТабличнаяЧасть.Количество)           КАК Количество
		|" + ПолеЗаказ + "
		|ПОМЕСТИТЬ ТабличнаяЧастьДок
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ДокТабличнаяЧасть
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Документ.РеализацияТоваровУслуг КАК Документ
		|ПО
		|	Документ.Ссылка = ДокТабличнаяЧасть.Ссылка
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ПО
		|	ДоговорыКонтрагентов.Ссылка = Документ.ДоговорКонтрагента
		|ГДЕ
		|	Документ.Ссылка = &ДокументПередачи
		|" + УсловиеЗаказ + "
		|СГРУППИРОВАТЬ ПО	Номенклатура,
		|					ХарактеристикаНоменклатуры,
		|					СерияНоменклатуры,
		|					СтавкаНДС,
		|					ДоговорыКонтрагентов.Ссылка,
		|					ДоговорыКонтрагентов.ВалютаВзаиморасчетов
		|" + ПолеГруппировкиЗаказ + "
		|ИНДЕКСИРОВАТЬ ПО	Номенклатура,
		|					ХарактеристикаНоменклатуры,
		|					СерияНоменклатуры,
		|					ЗаказПокупателя
		|";
		Запрос.Выполнить();

		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.ЗаказПокупателя КАК ЗаказПокупателя
		|ИЗ
		|	ТабличнаяЧастьДок КАК Док
		|УПОРЯДОЧИТЬ ПО ЗаказПокупателя
		|";

		ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();

		Если ТаблицаЗаказов.Количество() = 0 Тогда
			возврат;
		ИначеЕсли ТаблицаЗаказов.Количество() = 1 Тогда
			ПараметрСделка = ТаблицаЗаказов[0]["ЗаказПокупателя"];
		Иначе
			СписокСделок = Новый СписокЗначений();
			Для Каждого элементСделка Из ТаблицаЗаказов Цикл
				Если ЗначениеЗаполнено(элементСделка.ЗаказПокупателя) Тогда
					СписокСделок.Добавить(элементСделка.ЗаказПокупателя, Строка(элементСделка.ЗаказПокупателя));
				Иначе
					СписокСделок.Добавить(Документы.ЗаказПокупателя.ПустаяСсылка(), "Пустой заказ");
				КонецЕсли;
			КонецЦикла;
			СтруктПараметры = Новый Структура("СписокВыбора, ЗаполнитьСписокВыбора", СписокСделок, Ложь);
			ВыбранноеЗначение = УправлениеЗаказами.ВыбратьЗаказИзДокументаОснования(СтруктПараметры);
			Если ВыбранноеЗначение = Неопределено Тогда
				возврат;
			КонецЕсли;

			ПараметрСделка = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ВыбранноеЗначение, Неопределено);
		КонецЕсли;

		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабличнаяЧастьДок.Номенклатура                     КАК Номенклатура,
		|	ТабличнаяЧастьДок.ХарактеристикаНоменклатуры       КАК ХарактеристикаНоменклатуры,
		|	ТабличнаяЧастьДок.ДоговорКонтрагента               КАК ДоговорКонтрагента,
		|	ТабличнаяЧастьДок.ВалютаВзаиморасчетов             КАК ВалютаВзаиморасчетов,
		|	ТабличнаяЧастьДок.СтавкаНДС                        КАК СтавкаНДС,
		|	ТабличнаяЧастьДок.СерияНоменклатуры                КАК СерияНоменклатуры,
		|	ТабличнаяЧастьДок.Количество                       КАК КоличествоПоДокументу,
		|	ТабличнаяЧастьДок.НомерСтроки                      КАК НомерСтроки,
		|	ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00)          КАК КоличествоОстатокПереданных,
		|	ЕСТЬNULL(Остатки.СуммаВзаиморасчетовОстаток, 0.00) КАК СтоимостьОтданнаяВалОстаток
		|ИЗ
		// Временная таблица документа
		|	ТабличнаяЧастьДок КАК ТабличнаяЧастьДок
		//
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыПереданные.Остатки(,
		|												ДоговорКонтрагента = &ДоговорКонтрагента
		|												И СтатусПередачи = &СтатусПередачи
		|												И Сделка = &ПараметрСделка
		|												И Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ ТабличнаяЧастьДок)
		|											) КАК Остатки
		|ПО
		|	ТабличнаяЧастьДок.Номенклатура = Остатки.Номенклатура
		|	И ТабличнаяЧастьДок.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
		|	И ТабличнаяЧастьДок.СерияНоменклатуры = Остатки.СерияНоменклатуры
		|	И ТабличнаяЧастьДок.ЗаказПокупателя = Остатки.Сделка
		|ГДЕ
		|	ТабличнаяЧастьДок.ЗаказПокупателя = &ПараметрСделка
		|	И ЕСТЬNULL(Остатки.КоличествоОстаток, 0.00) > 0
		|УПОРЯДОЧИТЬ ПО
		|	ТабличнаяЧастьДок.НомерСтроки
		|
		|ИТОГИ МАКСИМУМ(КоличествоОстатокПереданных) ПО ТабличнаяЧастьДок.Номенклатура, ТабличнаяЧастьДок.ХарактеристикаНоменклатуры
		|";
		Запрос.УстановитьПараметр("ПараметрСделка", ПараметрСделка);

		Сделка = ПараметрСделка;

	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	

	Пока Выборка.Следующий() Цикл

		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			КолвоОстПереданных    = ?(Выборка.КоличествоОстатокПереданных = NULL, 0, Выборка.КоличествоОстатокПереданных);
			КолвоПереданных       = КолвоОстПереданных;
			Продолжить;
		КонецЕсли;
		
		// Определим покупателя
		СтруктураПоискаПокупателя = Новый Структура("Покупатель, ДатаСФ");
		СтруктураПоискаПокупателя.Покупатель = ?(ДокументПередачи = Неопределено, Контрагент, ДокументПередачи.Контрагент);
		СтруктураПоискаПокупателя.ДатаСФ = НачалоДня(?(ДокументПередачи = Неопределено, Дата, ДокументПередачи.Дата));
		
		РезультатПоиска = Покупатели.НайтиСтроки(СтруктураПоискаПокупателя);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			// Добавим новую строку в ТЧ "Покупатели"
			СтрокаПокупатели = Покупатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПокупатели, СтруктураПоискаПокупателя);
			СтрокаПокупатели.КлючСтроки = ПолучитьНовыйКлючСтроки();
		Иначе
			СтрокаПокупатели = РезультатПоиска[0];
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура	= Выборка.Номенклатура;
		СтрокаТабличнойЧасти.КлючСтроки		= СтрокаПокупатели.КлючСтроки;
		Если ДокументПередачи = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество       = Выборка.КоличествоОстаток;
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе
			СтрокаТабличнойЧасти.Количество = Мин(Выборка.КоличествоПоДокументу, КолвоОстПереданных);
			КолвоОстПереданных = КолвоОстПереданных - СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.СтавкаНДС         = Выборка.СтавкаНДС;
			СтрокаТабличнойЧасти.СерияНоменклатуры = Выборка.СерияНоменклатуры;
		КонецЕсли;

		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		Если ДокументПередачи = Неопределено Тогда
			Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / Выборка.КоличествоОстаток, 
			               ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			               КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		Иначе
			Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьОтданнаяВалОстаток * СтрокаТабличнойЧасти.Количество / КолвоПереданных, 
			               ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			               КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));
		КонецЕсли;

		СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
											  Истина, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
											  
		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ЦенаПередачи  = СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			                                    * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																		УчитыватьНДС, СуммаВключаетНДС,
																		УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыУпр()

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (ИнвентаризацияТоваровОтданныхНаКомиссию).
//
Процедура ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр(ДокументОснование) Экспорт

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента",    ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументОснование",     ДокументОснование);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Документы.ЗаказПокупателя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаОстатков",    	   ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	МАКСИМУМ(Остатки.КоличествоОстаток) - СУММА(Док.Количество) КАК Количество,
	|	(МАКСИМУМ(Остатки.КоличествоОстаток) - СУММА(Док.Количество)) * МАКСИМУМ(Остатки.СуммаВзаиморасчетовОстаток) / МАКСИМУМ(Остатки.КоличествоОстаток) КАК Стоимость
	|ИЗ
	|	Документ.ИнвентаризацияТоваровОтданныхНаКомиссию.Товары КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента) КАК Остатки
	|		ПО Док.Номенклатура = Остатки.Номенклатура
	|			И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|			И Док.СерияНоменклатуры = Остатки.СерияНоменклатуры
	|			И (Док.Ссылка.Сделка = Остатки.Сделка
	|				ИЛИ Док.Ссылка.Сделка = &ПустойЗаказПокупателя
	|					И Остатки.Сделка = НЕОПРЕДЕЛЕНО)
	|ГДЕ
	|	Остатки.КоличествоОстаток > 0
	|	И Док.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.ХарактеристикаНоменклатуры,
	|	Док.СерияНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Ложь;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Ложь;	
	
	
	Пока Выборка.Следующий() Цикл

		Если Выборка.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Определим покупателя
		СтруктураПоискаПокупателя = Новый Структура("Покупатель, ДатаСФ", ДокументОснование.Контрагент, ДокументОснование.Дата);
		РезультатПоиска = Покупатели.НайтиСтроки(СтруктураПоискаПокупателя);
		Если РезультатПоиска.Количество() = 0 Тогда
			// Добавим новую строку в ТЧ "Покупатели"
			СтрокаПокупатели = Покупатели.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПокупатели, СтруктураПоискаПокупателя);
			СтрокаПокупатели.КлючСтроки = ПолучитьНовыйКлючСтроки();
		Иначе
			СтрокаПокупатели = РезультатПоиска[0];
		КонецЕсли;

		СтрокаТабличнойЧасти = Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.КлючСтроки       = СтрокаПокупатели.КлючСтроки;
		СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Сумма            = Выборка.Стоимость;
		СтрокаТабличнойЧасти.СуммаПередачи    = Выборка.Стоимость;

		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти,  ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если СпособРасчетаКомиссионногоВознаграждения
			 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100
			                                         * СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
			                                              УчитыватьНДС, СуммаВключаетНДС,
			                                              УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр()


// Рассчитывает комиссионное вознаграждение в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти)

	Если СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
		                                       * СтрокаТабличнойЧасти.Сумма / 100;

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
		      * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;

	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
																	УчитыватьНДС, СуммаВключаетНДС,
																	УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

КонецПроцедуры // РассчитатьКомиссионноеВознаграждение()

// Заолняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям() Экспорт

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура"); 

	МассивНоменклатуры = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	
	ТаблицаСерий = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(ДоговорКонтрагента, Организация, МассивНоменклатуры, Контрагент);
	
	ТоварыТабличнойЧасти=Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура", ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество", Справочники.Качество.Новый);
		НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией = Неопределено;
		
		ЗаполненКлючСвязи = Ложь;

		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить<=0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			Если ОстатокВЕдиницахДокумента  >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить/ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока, , "КлючСвязи");
			НоваяСтрока.СерияНоменклатуры = Строка.СерияНоменклатуры;
			НоваяСтрока.Количество        = СписанноеКоличество; 
			НоваяСтрока.СуммаПередачи     = НоваяСтрока.ЦенаПередачи * НоваяСтрока.Количество;
			НоваяСтрока.КоличествоМест    = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
			
			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);
			
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток = Строка.Остаток - СписанноеКоличество;
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить>0 Тогда
			Если СтрокаСПустойСерией = Неопределено Тогда
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока, ,"КлючСвязи");
				НоваяСтрока.Количество      = КоличествоОсталосьПогасить;
				НоваяСтрока.СуммаПередачи   = НоваяСтрока.ЦенаПередачи * НоваяСтрока.Количество;
				НоваяСтрока.КоличествоМест  = НоваяСтрока.Количество / НоваяСтрока.Коэффициент;
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);
				
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				РассчитатьКомиссионноеВознаграждение(НоваяСтрока);
			Иначе
				СтрокаСПустойСерией.Количество    = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				СтрокаСПустойСерией.СуммаПередачи = СтрокаСПустойСерией.ЦенаПередачи * СтрокаСПустойСерией.Количество;
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				РассчитатьКомиссионноеВознаграждение(СтрокаСПустойСерией);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоСериям()

// Процедура проведения подчиненных документов счет-фактура.
// Выбирает все счета-фактуры в которых в качестве документа
// основания указан текущий документ и перепроводит их.
//
Процедура ОбработкаПодчиненныхДокументовСчетФактура(Провести = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	НЕ СчетФактураВыданный.Ссылка.ПометкаУдаления
	|	И СчетФактураВыданный.Ссылка.ДокументОснование = &ДокументОснование";
				   
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		Если Провести И НЕ ТекущийДокумент.ПроверитьЗаполнение() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Провести Тогда
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли НЕ Провести И ТекущийДокумент.Проведен Тогда
			ТекущийДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			ТекущийДокумент.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизацияПометкиНаУдалениеУПодчиненныхСчетовФактур(ПометитьНаУдаление = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	Запрос.УстановитьПараметр("ПризнакУдаления", НЕ ПометитьНаУдаление);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.ПометкаУдаления = &ПризнакУдаления
	|	И СчетФактураВыданный.Ссылка.ДокументОснование = &ДокументОснование";
				   
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		ТекущийДокумент = СтрокаРезультата.Ссылка.ПолучитьОбъект();
		Если ПометитьНаУдаление И НЕ ТекущийДокумент.ПометкаУдаления  Тогда
			ТекущийДокумент.УстановитьПометкуУдаления(Истина);
			ТекущийДокумент.Записать();
		ИначеЕсли ТекущийДокумент.ПометкаУдаления И НЕ ПометитьНаУдаление Тогда
			ТекущийДокумент.УстановитьПометкуУдаления(Ложь);
			ТекущийДокумент.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, РЕАЛИЗУЮЩИЕ ФУНКЦИИ СОЗДАНИЯ СЧЕТОВ-ФАКТУР

// Процедура вызывается сразу же после записи документа.
// Выполняется сопоставление строк документа и соответствующих им
// выданных счетов - факутр. Результаты данного сопоставления
// фиксируются в строках документа, в реквизите "СчетФакутра"
//
Процедура СформироватьСчетаФактурыВыданныеДляСтрокДокумента(ТабЧасть = "") Экспорт
	
	мМассивСформированныхСФ = Новый Массив;
	
	// В данной таблице содержится информация о том, какие счета-фактуры уже были
	// выписаны ранее на основании данных документов
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(Ссылка);
	Иначе
		ТаблицаСФ  = Новый ТаблицаЗначений();
		ТаблицаСФ.Колонки.Добавить("Ссылка",          Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
		ТаблицаСФ.Колонки.Добавить("ДатаСФ",          Новый ОписаниеТипов("Дата"));
		ТаблицаСФ.Колонки.Добавить("Покупатель",      Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаСФ.Колонки.Добавить("Проведен",        Новый ОписаниеТипов("Булево"));
		ТаблицаСФ.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ТаблицаСФ.Колонки.Добавить("Использован",         Новый ОписаниеТипов("Булево"));
	
	СписокТабЧастей = Новый СписокЗначений;
	Если ПустаяСтрока(ТабЧасть) Тогда
		СписокТабЧастей.Добавить("Покупатели");
	Иначе
		СписокТабЧастей.Добавить(ТабЧасть);
	КонецЕсли;  
	
	Если ЭтоНовый() ИЛИ Модифицированность() Тогда
		ТаблицаСуммДляСФ = Новый ТаблицаЗначений;
		ТаблицаСуммДляСФ.Колонки.Добавить("КлючСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
		ТаблицаСуммДляСФ.Колонки.Добавить("Сумма",      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаСуммДляСФ.Колонки.Добавить("СуммаНДС",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		СписокТабличныхЧастей = Новый СписокЗначений;
		СписокТабличныхЧастей.Добавить("Товары");
		
		Для каждого ТабличнаяЧасть Из СписокТабличныхЧастей Цикл
			Для каждого СтрокаДокумента Из ЭтотОбъект[ТабличнаяЧасть.Значение] Цикл
				СтрокаТаблицы = ТаблицаСуммДляСФ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДокумента);
			КонецЦикла;
		КонецЦикла;
		
		ТаблицаСуммДляСФ.Свернуть("КлючСтроки", "Сумма, СуммаНДС");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки,
		|	СУММА(ОтчетКомиссионераОПродажахТовары.Сумма) КАК Сумма,
		|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
		|ГДЕ
		|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетКомиссионераОПродажахТовары.КлючСтроки";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		ТаблицаСуммДляСФ = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ТаблицаСуммДляСФ.Индексы.Добавить("КлючСтроки");
	
	Для каждого ТабЧасть Из СписокТабЧастей Цикл
		ТаблицаДокумента = Новый ТаблицаЗначений;
		ТаблицаДокумента.Колонки.Добавить("Покупатель");
		ТаблицаДокумента.Колонки.Добавить("ДатаСФ");
		ТаблицаДокумента.Колонки.Добавить("СчетФактура");
		ТаблицаДокумента.Колонки.Добавить("СуммаБезНДС");
		ТаблицаДокумента.Колонки.Добавить("НДС");
		
		// подготовим таблицу документа
		Для каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			Если НЕ СтрокаДок.ВыставленСФ Тогда
				// СФ не выдан.
				Продолжить;
			КонецЕсли; 
			
			СтрокаСуммДляСФ = ТаблицаСуммДляСФ.Найти(СтрокаДок.КлючСтроки, "КлючСтроки");
			Если СтрокаСуммДляСФ = Неопределено ИЛИ СтрокаСуммДляСФ.Сумма = 0 И СтрокаСуммДляСФ.СуммаНДС = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаТаблицыДок = ТаблицаДокумента.Добавить();
			СтрокаТаблицыДок.Покупатель  = СтрокаДок.Покупатель;
			СтрокаТаблицыДок.ДатаСФ      = СтрокаДок.ДатаСФ;
			СтрокаТаблицыДок.СчетФактура = СтрокаДок.СчетФактура;
			
			СтрокаТаблицыДок.СуммаБезНДС = СтрокаСуммДляСФ.Сумма - ?(СуммаВключаетНДС, СтрокаСуммДляСФ.СуммаНДС, 0);
			СтрокаТаблицыДок.НДС         = СтрокаСуммДляСФ.СуммаНДС;
			
		КонецЦикла;
		
		// В данной таблице содержится информация о том, какие счета-фактуры необходимо выписать
		ТаблицаДокумента.Свернуть("Покупатель, ДатаСФ, СчетФактура", "СуммаБезНДС, НДС");
		
		Для каждого СтрокаТаблицыДок Из ТаблицаДокумента Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДок.Покупатель)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыДок.ДатаСФ) Тогда
			    // В строке документа не указаны параметры для создания счета-фактуры
				Продолжить;
			КонецЕсли;
			
			// Поиск существующего документа счет-фактура выданный
			ДокСФ = НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаТаблицыДок);
			
			Если ДокСФ = Неопределено Тогда
				// Если существующий счет-фактура не найден, нужно создать новый счет-фактуру
				ДокСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
				
				Если ЗначениеЗаполнено(Ссылка) Тогда
					Основания = ДокСФ.ДокументыОснования.Добавить();
					Основания.ДокументОснование = Ссылка;
					ДокСФ.ДокументОснование     = Ссылка;
				Иначе
					СсылкаНового = ПолучитьСсылкуНового();
					Если НЕ ЗначениеЗаполнено(СсылкаНового) Тогда
						СсылкаНового = Документы.ОтчетКомиссионераОПродажах.ПолучитьСсылку();
					КонецЕсли;
					
					Основания = ДокСФ.ДокументыОснования.Добавить();
					Основания.ДокументОснование = СсылкаНового;
					ДокСФ.ДокументОснование     = СсылкаНового;
					
					УстановитьСсылкуНового(СсылкаНового);
				КонецЕсли; 
				
				ДокСФ.Дата            = СтрокаТаблицыДок.ДатаСФ;
				ДокСФ.Организация     = Организация;
				ДокСФ.Контрагент      = СтрокаТаблицыДок.Покупатель;
				ДокСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
				
				ДокСФ.КодВидаОперации = "04";
				ДокСФ.КодСпособаВыставления = 1;
				
				ДокСФ.Выставлен = Истина;
				ДокСФ.ДатаВыставления = Дата;
				
				ДокСФ.ОпределениеПараметровСчетаФактуры();
				
				Если ДокСФ.ДатаНомерДокументовОплаты.Количество() = 0 Тогда
					ДокСФ.ДатаНомерДокументовОплаты.Добавить();
				КонецЕсли;
				
				ДокСФ.Записать();
				
				ТекстСообщения = "Сформирован документ «" + СокрЛП(ДокСФ.Ссылка)
								+ "» (покупатель «" + СокрЛП(СтрокаТаблицыДок.Покупатель)
								+ "», с.-ф. № " + СокрЛП(ДокСФ.Номер)
								+ " от " + Формат(ДокСФ.Дата, "ДФ=dd.MM.yyyy") + ").";
				Сообщить(ТекстСообщения); 
				
				мМассивСформированныхСФ.Добавить(ДокСФ.Ссылка);
				
				// Этот новый счет-фактуру нужно зафиксировать в таблице счетов-фактур
				СтрокаСФ = ТаблицаСФ.Добавить();
				СтрокаСФ.ДатаСФ      = СтрокаТаблицыДок.ДатаСФ;
				СтрокаСФ.Покупатель  = СтрокаТаблицыДок.Покупатель;
				СтрокаСФ.Ссылка      = ДокСФ.Ссылка;
				СтрокаСФ.Использован = Истина;
			Иначе
				// Информацию об этом счете-фактуре нужно обновить в таблице счетов-фактур
				СтрокаСФ = ТаблицаСФ.Найти(ДокСФ.Ссылка, "Ссылка");
				Если ЗначениеЗаполнено(Ссылка) 
					И ДокСФ.ДокументыОснования.Найти(Ссылка, "ДокументОснование") = Неопределено 
					Тогда
					Основания = ДокСФ.ДокументыОснования.Добавить();
					Основания.ДокументОснование = Ссылка;
				КонецЕсли;
				
				ДокСФ.ОпределениеПараметровСчетаФактуры();
			КонецЕсли;
			
			Если ДокСФ.ПометкаУдаления Тогда
				ДокСФ.ПометкаУдаления = Ложь;
				мМассивСформированныхСФ.Добавить(ДокСФ.Ссылка);
			КонецЕсли; 
			
			Если ДокСФ.Модифицированность() Тогда
				ДокСФ.Записать();
			КонецЕсли;
		КонецЦикла;
		
		// далее необходимо прописать ссылки на созданные счета-фактуры в строки документа
		Для каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			СтрокаСуммДляСФ = ТаблицаСуммДляСФ.Найти(СтрокаДок.КлючСтроки, "КлючСтроки");
			Если СтрокаСуммДляСФ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаСуммДляСФ <> Неопределено
				И НЕ СтрокаДок.ВыставленСФ ИЛИ СтрокаСуммДляСФ.Сумма = 0 И СтрокаСуммДляСФ.СуммаНДС = 0 Тогда
				
				// Для строки не нужен счет-фактура
				Если ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
					СтрокаДок.СчетФактура = Неопределено;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			ДокСФ = НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаДок, Ложь);	
			Если ДокСФ <> Неопределено Тогда
				// Если есть счет-фактура - регистрируем его в строке табличной части
				Если НЕ СтрокаДок.СчетФактура = ДокСФ.Ссылка Тогда
					Если ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
						Сообщить("Изменен счет-фактура по строке " + СтрокаДок.НомерСтроки + " """ + ТабЧасть.Значение + """.", СтатусСообщения.Информация); 
					КонецЕсли; 
					
					СтрокаДок.СчетФактура = ДокСФ.Ссылка;
				КонецЕсли; 
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаДок.Покупатель) Тогда
					Сообщить("В строке " + СтрокаДок.НомерСтроки + " """ + ТабЧасть.Значение + """ " +
						?(НЕ ЗначениеЗаполнено(СтрокаДок.Покупатель), "не указан покупатель, ", "") +
						" счет-фактура по строке не зарегистрирован!", СтатусСообщения.Важное);
				КонецЕсли;
				
				// Для строки не создан счет-фактура
				СтрокаДок.СчетФактура = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // СформироватьСчетаФактурыВыданныеДляСтрокДокумента()

// Формирует перечень документов счет-фактура выданный, введенных на 
// основании текущего документа.
//
Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Ссылка.Контрагент КАК Покупатель,
	|	СчетФактураВыданный.Ссылка.Дата КАК ДатаСФ,
	|	СчетФактураВыданный.Ссылка.Проведен,
	|	СчетФактураВыданный.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	|	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Ссылка.Дата,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";
	
	РезТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат РезТаблица;
	
КонецФункции // ПолучитьТаблицуПодчиненныхСчетовФактур()

// Процедура "просматривает" строки табличных частей документа.
// и для тех строк, в которых указан счет-фактура выданный,
// обновляет ссылку на текущий документ
// в этом счете-фактуре.
//
Процедура ОбновитьСсылкиСчетовФактур() Экспорт
	
	СписокТабЧастей = Новый СписокЗначений;
	СписокТабЧастей.Добавить("Покупатели");
	
	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(Ссылка);
	ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	Для каждого ТабЧасть Из СписокТабЧастей Цикл
		КоличествоСтрок = ЭтотОбъект[ТабЧасть.Значение].Количество();
		Для каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			Если СтрокаДок.ВыставленСФ И НЕ СтрокаДок.СчетФактура.Пустая() Тогда
				// Документ, сформирован по "старому", с/ф по нему не перезаписываем
				Если НЕ (КоличествоСтрок = 1 И СтрокаДок.Покупатель = Контрагент) Тогда
					ДокСФ = СтрокаДок.СчетФактура.ПолучитьОбъект();
					Если ДокСФ.ДокументыОснования.Найти(Ссылка, "ДокументОснование") = Неопределено Тогда
						// Необходимо модифицировать ссылку в счете-фактуре
						Основания = ДокСФ.ДокументыОснования.Добавить();
						Основания.ДокументОснование = Ссылка;
					КонецЕсли;
					
					ДокСФ.ОпределениеПараметровСчетаФактуры();
					
					Если мМассивСформированныхСФ.Найти(СтрокаДок.СчетФактура) <> Неопределено Тогда
						// счет-фактура только что сформирован, заполним данные платежно-расчетных документов
						ДокСФ.ДатаНомерДокументовОплаты.Очистить();
						ДокСФ.ДатаНомерДокументовОплаты.Добавить();
					КонецЕсли;
					
					Если ДокСФ.Модифицированность() Тогда
						ДокСФ.Записать();
					КонецЕсли;
				КонецЕсли;
				
				СтрокиСФ = ТаблицаСФ.НайтиСтроки(Новый Структура("Ссылка, Использован", СтрокаДок.СчетФактура, Ложь));
				Для каждого СтрокаТаблицыСФ Из СтрокиСФ  Цикл
					СтрокаТаблицыСФ.Использован = Истина;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// удаляем незадействованные счета-фактуры
	Для каждого СтрокаСчета Из ТаблицаСФ Цикл
		Если НЕ СтрокаСчета.Использован И СтрокаСчета.Ссылка.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			ТекСФ = СтрокаСчета.Ссылка.ПолучитьОбъект();
			//Проверим - только ли текущий документ зарегистрирован в счете-фактуре
			Если ТекСФ.ДокументыОснования.Количество() > 1 Тогда
				//Удалим строки, относящиеся к текущему счету-фактуре
				СтрокаДок = ТекСФ.ДокументыОснования.Найти(Ссылка, "ДокументОснование");
				Если НЕ СтрокаДок = Неопределено Тогда
					ТекСФ.ДокументыОснования.удалить(СтрокаДок);
					ТекСФ.Записать();
					Сообщить("Из документа «" + СокрЛП(ТекСФ.Ссылка) + "» удалена ссылка на текущий документ 
						|(контрагент «" + СокрЛП(СтрокаСчета.Контрагент) + "», с.-ф. № <" + СокрЛП(ТекСФ.Номер) + "> от " + Формат(ТекСФ.Дата, "ДФ=dd.MM.yyyy")+")"); 
				КонецЕсли; 
			Иначе
				Если ТекСФ.ПометкаУдаления = Ложь Тогда
					ТекСФ.УстановитьПометкуУдаления(Истина);
					ТекСФ.Записать();
					Сообщить("Документ «" + СокрЛП(ТекСФ.Ссылка) + "» 
						|(покупатель «" + СокрЛП(СтрокаСчета.Покупатель) + "», с.-ф. № <" + СокрЛП(ТекСФ.Номер) + "> от " + Формат(ТекСФ.Дата, "ДФ=dd.MM.yyyy") + ") не используется. 
						|Счет-фактура помечен на удаление."); 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСсылкиСчетовФактур()

// Процедура вызывается сразу перед записью документа.
// выполняется поиск существующего счета-фактуры  по заданным 
// параметрам.
Функция НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаДокумента, УстановитьПризнакИспользования = Истина)
	
	ДокСФ = Неопределено;
	Если ЗначениеЗаполнено(СтрокаДокумента.СчетФактура)
		И ТаблицаСФ.Найти(СтрокаДокумента.СчетФактура, "Ссылка") <> Неопределено Тогда
	    СтрокаСФ = ТаблицаСФ.Найти(СтрокаДокумента.СчетФактура, "Ссылка");
		
		Если НачалоДня(СтрокаСФ.ДатаСФ) = НачалоДня(СтрокаДокумента.ДатаСФ)
			И СтрокаСФ.Покупатель = СтрокаДокумента.Покупатель ИЛИ НЕ ЗначениеЗаполнено(СтрокаСФ.Покупатель) Тогда
			// найден подходящий счет-фактура
			ДокСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			Если ТаблицаСФ.Колонки.Найти("Использован") <> Неопределено И УстановитьПризнакИспользования Тогда
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
			
			Возврат ДокСФ;
		КонецЕсли;
	КонецЕсли; 
	
	Для каждого СтрокаСФ Из ТаблицаСФ Цикл
		// Поиск существующего счета-фактуры выполняется по контрагенту и договору.
		Если НачалоДня(СтрокаСФ.ДатаСФ) = НачалоДня(СтрокаДокумента.ДатаСФ)
			И СтрокаСФ.Покупатель = СтрокаДокумента.Покупатель ИЛИ НЕ ЗначениеЗаполнено(СтрокаСФ.Покупатель) Тогда
			// найден подходящий счет-фактура
			ДокСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			Если ТаблицаСФ.Колонки.Найти("Использован") <> Неопределено И УстановитьПризнакИспользования Тогда
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокСФ;
	
КонецФункции // НайтиСчетФактуруВСписке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)

	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();

	// Добавляем колонки, используемые при проведении.
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ВознаграждениеСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма + 
		                          ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.НДС, 0);

		СтрокаТаблицы.ВознаграждениеСНДС = СтрокаТаблицы.СуммаВознаграждения + 
		                          ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.СуммаНДСВознаграждения, 0);

	КонецЦикла;

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);

	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

Функция ПодготовитьТаблицуУслуг(СтруктураШапкиДокумента)
	
	ШапкаДокумента = Новый ТаблицаЗначений;
	ШапкаДокумента.Колонки.Добавить("СтавкаНДС"               , Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ШапкаДокумента.Колонки.Добавить("СчетЗатрат"              , Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ШапкаДокумента.Колонки.Добавить("СчетУчетаНДС"            , Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ШапкаДокумента.Колонки.Добавить("СчетЗатратНУ"            , Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ШапкаДокумента.Колонки.Добавить("СтатьяЗатрат"            , Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ШапкаДокумента.Колонки.Добавить("Подразделение"           , Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	ШапкаДокумента.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ШапкаДокумента.Колонки.Добавить("НоменклатурнаяГруппа"    , Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ШапкаДокумента.Колонки.Добавить("Сумма"                   , Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ШапкаДокумента.Колонки.Добавить("НДС"                     , Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ШапкаДокумента.Колонки.Добавить("Субконто1");
	ШапкаДокумента.Колонки.Добавить("Субконто2");
	ШапкаДокумента.Колонки.Добавить("Субконто3");
	ШапкаДокумента.Колонки.Добавить("СубконтоНУ1");
	ШапкаДокумента.Колонки.Добавить("СубконтоНУ2");
	ШапкаДокумента.Колонки.Добавить("СубконтоНУ3");
	
	СтрокаШапкиДокумента = ШапкаДокумента.Добавить();
	СтрокаШапкиДокумента.СтавкаНДС                = СтруктураШапкиДокумента.СтавкаНДСВознаграждения;
	СтрокаШапкиДокумента.СчетЗатрат               = СтруктураШапкиДокумента.СчетУчетаЗатрат;
	СтрокаШапкиДокумента.СчетУчетаНДС             = СтруктураШапкиДокумента.СчетУчетаНДС;
	СтрокаШапкиДокумента.СчетЗатратНУ             = СтруктураШапкиДокумента.СчетУчетаЗатратНУ;
	СтрокаШапкиДокумента.Субконто1                = СтруктураШапкиДокумента.Субконто1;
	СтрокаШапкиДокумента.Субконто2                = СтруктураШапкиДокумента.Субконто2;
	СтрокаШапкиДокумента.Субконто3                = СтруктураШапкиДокумента.Субконто3;
	СтрокаШапкиДокумента.СубконтоНУ1              = СтруктураШапкиДокумента.СубконтоНУ1;
	СтрокаШапкиДокумента.СубконтоНУ2              = СтруктураШапкиДокумента.СубконтоНУ2;
	СтрокаШапкиДокумента.СубконтоНУ3              = СтруктураШапкиДокумента.СубконтоНУ3;
	СтрокаШапкиДокумента.СтатьяЗатрат             = СтруктураШапкиДокумента.СтатьяЗатрат;
	СтрокаШапкиДокумента.Подразделение            = СтруктураШапкиДокумента.Подразделение;
	СтрокаШапкиДокумента.ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	СтрокаШапкиДокумента.НоменклатурнаяГруппа     = СтруктураШапкиДокумента.НоменклатурнаяГруппа;
	//Сумма должна быть без учета НДС если установлено что сумма не включает НДС (в реквизите шапки сумма всегда с НДС)
	СтрокаШапкиДокумента.Сумма                    = СтруктураШапкиДокумента.СуммаВознаграждения - ?(СтруктураШапкиДокумента.СуммаВключаетНДС,0,СтруктураШапкиДокумента.СуммаНДСВознаграждения);
	СтрокаШапкиДокумента.НДС                      = СтруктураШапкиДокумента.СуммаНДСВознаграждения;
	
	Возврат ШапкаДокумента;
КонецФункции // ПодготовитьТаблицуУслуг()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов"          , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"                     , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетовПередачи"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"                 , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСПередачи"            , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"                       , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаСНДСПередачи = СтрокаТаблицы.СуммаПередачи + 
	                                      ?(УчитыватьНДС И (Не СуммаВключаетНДС), СтрокаТаблицы.СуммаНДСПередачи, 0);

		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаСНДС,
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаСНДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.НДС, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		СтрокаТаблицы.СуммаВзаиморасчетовПередачи = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаСНДСПередачи,
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		СтрокаТаблицы.СтоимостьБезСкидок  = СтрокаТаблицы.СуммаУпр;
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);

	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)

	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",              Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС",           Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ВознаграждениеСНДСрегл",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВознагражденияРегл", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, Дата);

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		НДС   = СтрокаТаблицы.НДС;
		Сумма = СтрокаТаблицы.СуммаСНДС - СтрокаТаблицы.НДС;

		// Суммы пересчитаем в валюту регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
			СтрокаТаблицы.ВознаграждениеСНДСрегл     = СтрокаТаблицы.ВознаграждениеСНДС;
			СтрокаТаблицы.СуммаНДСВознагражденияРегл = СтрокаТаблицы.СуммаНДСВознаграждения;
		Иначе
			
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				Сумма, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
			
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				НДС, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, Данные.Кратность);
				
			СтрокаТаблицы.ВознаграждениеСНДСрегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.ВознаграждениеСНДС, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, Данные.Кратность);
				
			СтрокаТаблицы.СуммаНДСВознагражденияРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.СуммаНДСВознаграждения, 
				СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
				СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
				СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета, Данные.Кратность);
				
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоДенежнымСредствам - результат запроса по табличной части "ДенежныеСредства",
//  СтруктураШапкиДокумента             - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуДенежныхСредств(РезультатЗапросаПоДенежнымСредствам, СтруктураШапкиДокумента)

	ТаблицаДенежныеСредства = РезультатЗапросаПоДенежнымСредствам.Выгрузить();

	// Вызываем отдельные процедуры подготовки для упр. учета
	ПодготовитьТаблицуДенежныхСредствУпр(ТаблицаДенежныеСредства, СтруктураШапкиДокумента);

	Возврат ТаблицаДенежныеСредства;

КонецФункции // ПодготовитьТаблицуДенежныхСредств()

// Добавляет в таблицу колонки, необходимые для упр. проведения.
//
// Параметры: 
//  РезультатЗапросаПоДенежнымСредствам - результат запроса по табличной части "ДенежныеСредства",
//  СтруктураШапкиДокумента             - выборка по результату запроса по шапке документа.
//
Процедура ПодготовитьТаблицуДенежныхСредствУпр(ТаблицаДенежныхСредств, СтруктураШапкиДокумента)

	// Надо добавить колонки.
	ТаблицаДенежныхСредств.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДенежныхСредств.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаДенежныхСредств Цикл

		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма, 
			ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуДенежныхСредствУпр()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента)

	ТаблицаВзаиморасчетов = РезультатЗапросаПоДокументамРасчетовСКонтрагентами.Выгрузить();
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СуммаДокумента - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0), 
		ВалютаДокумента, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	// Если сумма взиморасчетов по документу превышает итог по таблице взаиморасчетов, то 
	// добавляем в таблицу новую строку со сылкой на проводимый документ
	СуммаВзаиморасчетовПоТекущемуДокументу = СуммаВзаиморасчетов - ТаблицаВзаиморасчетов.Итог("СуммаВзаиморасчетов");
	Если СуммаВзаиморасчетовПоТекущемуДокументу > 0 Тогда
		НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВзаиморасчетовПоТекущемуДокументу;
		НоваяСтрока.СуммаРегл   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СуммаВзаиморасчетовПоТекущемуДокументу, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
			КурсВзаиморасчетов, 1, 
			КратностьВзаиморасчетов, 1);
	КонецЕсли;

	ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя, ДокументСсылка.ЗаказПоставщику, 
		|ДокументСсылка.СчетНаОплатуПокупателю, ДокументСсылка.СчетНаОплатуПоставщика, Неопределено"), "Сделка");
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(Неопределено, "Сделка");
	Иначе
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(Сделка, "Сделка");
	КонецЕсли;
	
	ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции // ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Процедура ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента)

	// Создаем колонку "СуммаУпр"
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));

	Для каждого СтрокаТаблицы Из ТаблицаВзаиморасчетов Цикл
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.СуммаВзаиморасчетов, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентамиУпр()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Организация, ВалютаДокумента,Контрагент, ДоговорКонтрагента, СпособРасчетаКомиссионногоВознаграждения, КратностьВзаиморасчетов");

	Если НЕ СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается
	 ИЛИ Товары.Итог("СуммаВознаграждения") <> 0 Тогда
		СтруктураОбязательныхПолей.Вставить("СтатьяЗатрат");
		СтруктураОбязательныхПолей.Вставить("Подразделение");
	КонецЕсли;

	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка");
	КонецЕсли;

	Если СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли
	 ИЛИ СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДСВознаграждения");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверим соответствие подразделения и организации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизации(ЭтотОбъект, Отказ, Заголовок);

	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, СтавкаНДС");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	Для каждого СтрокаТабличнойЧасти из Товары цикл
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТабличнойЧасти.НомерСтроки) +
		""" табличной части ""Товары"" обнаружено отрицательное значение в реквизитах: ";
		Выводить = Ложь;

		Если СтрокаТабличнойЧасти.Количество < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Количество,";
		КонецЕсли;
		Если СтрокаТабличнойЧасти.КоличествоМест < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Количество мест,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.Сумма < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаВознаграждения < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма вознаграждения,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаНДС < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма НДС,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаНДСВознаграждения < 0 Тогда
			Отказ = истина;			
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма НДС вознаграждения,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаНДСПередачи < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма НДС передачи,";
		КонецЕсли;
        Если СтрокаТабличнойЧасти.СуммаПередачи < 0 Тогда
			Отказ = истина;
			Выводить = Истина;
			СтрокаНачалаСообщенияОбОшибке = СтрокаНачалаСообщенияОбОшибке + " Сумма передачи,";
		КонецЕсли;
		Если Выводить Тогда
			СтрокаНачалаСообщенияОбОшибке = Лев(СтрокаНачалаСообщенияОбОшибке, СтрДлина(СтрокаНачалаСообщенияОбОшибке)-1);
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + Символы.ПС +
				                   "Отрицательных значений здесь быть не должно!", Отказ, Заголовок);

		КонецЕсли;
		
	КонецЦикла;
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "ДенежныеСредства".
//
// Параметры:
// Параметры: 
//  ТаблицаПоДенежнымСредствам - таблица значений, содержащая данные для проведения и проверки ТЧ ДенежныеСредства
//  СтруктураШапкиДокумента    - выборка из результата запроса по шапке документа,
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента, Отказ, Заголовок)

	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(СтруктураШапкиДокумента.Дата);
	// Укажем, что надо проверить:
	Если ВерсияПостановления = 1 Тогда
		СтруктураОбязательныхПолей = Новый Структура("ВидОтчетаПоПлатежам, Сумма, СтавкаНДС");
	Иначе
		СтруктураОбязательныхПолей = Новый Структура("ВидОтчетаПоПлатежам, Покупатель, ДатаСобытия, Сумма, СтавкаНДС");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства()

// Проверяет правильность заполнения строк табличной части "Покупатели".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПокупатели(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из Покупатели Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
										""" табличной части ""Покупатели"": ";
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Покупатель) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Покупатель""!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ВыставленСФ И НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаСФ) Тогда
			СтрокаСообщения = "Не заполнено значение реквизита ""Дата счет-фактуры""!";
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиПокупатели()

// Проверяет правильность заполнения строк табличной части "Документы расчетов с контрагентом".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументРасчетовСКонтрагентом, СуммаВзаиморасчетов");

	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
														СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

	Если (СуммаВзаиморасчетов - ?(УдержатьКомиссионноеВознаграждение, СуммаВознаграждения, 0)) < ТаблицаПоДокументамРасчетовСКонтрагентом.Итог("СуммаВзаиморасчетов") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Сумма по таблице документов расчетов с контрагентами превышает сумму взаиморасчетов по документу!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиОбъектыСтроительства()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоДенежнымСредствам,
								ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)

	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоДокументамРасчетовСКонтрагентом,
	                                                    Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок);

	УправлениеЗапасами.ЗарегистрироватьДокументВПоследовательностяхПартионногоУчета(ЭтотОбъект, Дата, СтруктураШапкиДокумента.Организация,ОтражатьВУправленческомУчете,СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации);
	
	// Проводки формируются и в модуле документа, и при списании партий
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Если Движения.Хозрасчетный.Модифицированность() Тогда
			Движения.Хозрасчетный.Записать();
		КонецЕсли;
	КонецЕсли;
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Если Движения.Налоговый.Модифицированность() Тогда
			Движения.Налоговый.Записать();
		КонецЕсли;
	КонецЕсли;
	
	СписанныеТовары = Движения.СписанныеТовары.Выгрузить();
	УчетНДС.ДополнитьСписанныеТоварыДаннымиПоКомиссии(Ссылка, СписанныеТовары);
	
	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, СписанныеТовары);

	// Формирование движений документа для подсистемы НДС.
	ДвиженияРегистровПодсистемыНДСПоступление(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоДенежнымСредствам, Отказ);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок);

КонецПроцедуры // ДвиженияПоРегистрам()

// Формируем движения по регистру ТоварыОрганизаций
//
Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПоТоварам.Количество()=0 Тогда Возврат; КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	НаборДвижений = Движения.ТоварыОрганизаций;
	
	// Проверка остатков
	НаборДвижений.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок, РежимПроведения);
	
	Если Не Отказ Тогда
	
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);
					
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",    Справочники.Качество.Новый);
				
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

// По результату запроса по шапке документа формируем движения по упр. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам, ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок)

	Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда

		// Если комиссионное вознаграждение удерживается, то на него уменьшаем сумму долга.
		СуммаДолга = ?(СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение, СуммаДокумента - СуммаВознаграждения, СуммаДокумента);

		// По регистру ВзаиморасчетыСКонтрагентами.
		НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();

		Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом Тогда

			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДокументамРасчетовСКонтрагентом, ТаблицаДвижений);

			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
			ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
			ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),"Сделка");

		ИначеЕсли СуммаДолга<>0 Тогда

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента  = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		   = Контрагент;
			СтрокаДвижений.Организация  	   = Организация;

			СтрокаДвижений.Сделка              = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
			                                       СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
			                                       СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
			                                       СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
			                                       СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			                                       СтруктураШапкиДокумента.КурсДокумента, 
			                                       СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			                                       СтруктураШапкиДокумента.КратностьДокумента, 
			                                       СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

		КонецЕсли;

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
		КонецЕсли;

		// Долг комиссионера за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение и СуммаВознаграждения<>0 Тогда

			// По регистру ВзаиморасчетыСКонтрагентами.
			НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		  = Контрагент;
			СтрокаДвижений.Организация  	  = Организация;

			СтрокаДвижений.Сделка                = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		Если (НЕ ЗначениеЗаполнено(Сделка) 
		 Или ТипЗнч(Сделка) <> Тип("ДокументСсылка.ЗаказПокупателя")) и (СуммаДолга<>0) Тогда

			// По регистру РасчетыСКонтрагентами
			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента    = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		     = Контрагент;
			СтрокаДвижений.Организация  	     = Организация;

			СтрокаДвижений.Сделка                = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДолга, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
			КонецЕсли;
			
		КонецЕсли;

		// Долг перед комиссионером за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
		Если (Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение) и (СуммаВознаграждения<>0) Тогда

			НаборДвижений = Движения.РасчетыСКонтрагентами;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.РасчетыВозврат        = Перечисления.РасчетыВозврат.Расчеты;
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент  		  = Контрагент;
			СтрокаДвижений.Организация  	  = Организация;

			СтрокаДвижений.Сделка                = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента,, Истина);
			СтрокаДвижений.СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
													СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
													СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);

			СтрокаДвижений.СуммаУпр              = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
													
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.РасчетыСКонтрагентами.ВыполнитьРасход();
			КонецЕсли;

		КонецЕсли;

		Если  СуммаВознаграждения<>0 Тогда
			// По регистру Закупки.
			НаборДвижений = Движения.Закупки;

			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();

			// Заполним таблицу движений.
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.ДоговорКонтрагента = ДоговорКонтрагента;
			СтрокаДвижений.Контрагент 		  = Контрагент;
			СтрокаДвижений.Организация 		  = Организация;
			СтрокаДвижений.ДокументЗакупки    = Ссылка;
			СтрокаДвижений.Проект             = Проект;
			СтрокаДвижений.Подразделение      = Подразделение;
			СтрокаДвижений.СтатусПартии       = Перечисления.СтатусыПартийТоваров.Купленный;
			СтрокаДвижений.Номенклатура       = Неопределено;
			СтрокаДвижений.ХарактеристикаНоменклатуры = Неопределено;

			СтрокаДвижений.Количество         = 1;

			СтрокаДвижений.Стоимость          = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			СтрокаДвижений.НДС                = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаНДСВознаграждения,
													СтруктураШапкиДокумента.ВалютаДокумента,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
													СтруктураШапкиДокумента.КурсДокумента, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтруктураШапкиДокумента.КратностьДокумента, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);

			НаборДвижений.мПериод             = Дата;
			НаборДвижений.мТаблицаДвижений    = ТаблицаДвижений;

			Если Не Отказ Тогда
				Движения.Закупки.ВыполнитьДвижения();
			КонецЕсли;
		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ ТоварыПереданные.
		НаборДвижений = Движения.ТоварыПереданные;

		// Контроль остатков товара
		Если Товары.Количество() <> 0 Тогда
			ПроцедурыКонтроляОстатков.ТоварыПереданныеКонтрольОстатков("Товары", СтруктураШапкиДокумента, Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, Отказ, Заголовок, РежимПроведения);
		КонецЕсли;

		Если НЕ Отказ Тогда

			ТаблицаПереданные = ТаблицаПоТоварам.Скопировать();
			ТаблицаПереданные.Колонки.СуммаВзаиморасчетов.Имя = "СуммаВзаиморасчетовПродажи";
			ТаблицаПереданные.Колонки.СуммаВзаиморасчетовПередачи.Имя = "СуммаВзаиморасчетов";

			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПереданные);

			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(НаборДвижений, СтруктТаблицДокумента);

			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",             УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента, , Истина));

			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию);

			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(НаборДвижений, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);

		КонецЕсли;

		// ТОВАРЫ ПО РЕГИСТРУ Продажи

		НаборДвижений = Движения.Продажи;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаПродажи = ТаблицаПоТоварам.Скопировать();
		ТаблицаПродажи.Колонки.СуммаУпр.Имя = "Стоимость";
		ТаблицаПродажи.Колонки.НДС.Имя      = "НДСВрем";
		ТаблицаПродажи.Колонки.НДСУпр.Имя   = "НДС";
		
		Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
			
			УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПродажи,ТаблицаДвижений,Проект,Дата,"Продажи");
			
		Иначе
			
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродажи, ТаблицаДвижений);
			
		КонецЕсли;
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,   "ДокументПродажи");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,"Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация,"Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Сделка, "ЗаказПокупателя");
		ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");

		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.Продажи.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецЕсли;

	//ДЕНЕЖНЫЕ СРЕДСТВА КОМИССИОНЕРА
	// По денежным средствам у комиссионера проводим только если в договоре выставлен флаг.
	Если СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента Тогда
		
		НаборДвижений = Движения.ДенежныеСредстваКомиссионера;
		
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаДенежныеСредства = ТаблицаПоДенежнымСредствам.Скопировать();
		
		Сч = 0;
		// Зачеты аванса в движения не включаем.
		Пока Сч < ТаблицаДенежныеСредства.Количество() Цикл
			СтрокаТаблицы = ТаблицаДенежныеСредства.Получить(Сч);
			Если СтрокаТаблицы.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.ЗачетАванса Тогда 
				 ТаблицаДенежныеСредства.Удалить(СтрокаТаблицы);
			Иначе 
				Сч = Сч + 1;
			КонецЕсли; 
		КонецЦикла;
		
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДенежныеСредства, ТаблицаДвижений);
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент, "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента), "Сделка");
		
		НаборДвижений.мПериод            = Дата;
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

		Если Не Отказ Тогда
			Движения.ДенежныеСредстваКомиссионера.ВыполнитьПриход();
		КонецЕсли;
		
	КонецЕсли;

	// Движения по посредническим услугам.
	Если СуммаВознаграждения <> 0 Тогда

		ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
		
		Сумма = СуммаВознаграждения - ?(мУчетнаяПолитика.НеВключатьНДСВЗатраты, ТаблицаПоТоварам.Итог("СуммаНДСВознаграждения"), 0);
		
		НоваяСтрока = ТаблицаЗатрат.Добавить();
		НоваяСтрока.Подразделение = Подразделение;
		НоваяСтрока.СтатьяЗатрат = СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
		НоваяСтрока.Заказ = Сделка;
		НоваяСтрока.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма,
			СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
			
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			СтруктураШапкиДокумента, 
			ТаблицаЗатрат
		);
		
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
	// Долг перед комиссионером за комиссионное вознаграждение фиксируем только тогда, когда оно не удерживается.
	Если Не СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение 
		И СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом
		И СуммаВознаграждения <> 0 Тогда
	   
		ВидДвижения = ВидДвиженияНакопления.Расход;
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
		
		ТаблицаВознаграждения = ТаблицаПоВзаиморасчетам.СкопироватьКолонки();
		
		НоваяСтрока = ТаблицаВознаграждения.Добавить();
		НоваяСтрока.ДокументРасчетовСКонтрагентом = Ссылка;
		НоваяСтрока.Сделка                        = УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента);
		НоваяСтрока.СуммаВзаиморасчетов           = СуммаВознаграждения;
		НоваяСтрока.СуммаРегл   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СуммаВознаграждения, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
			КурсВзаиморасчетов, 1, 
			КратностьВзаиморасчетов, 1);
		
		УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаВознаграждения, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	   
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается из тела процедуры ДвиженияПоПриобретениюУслуг
// Формирует движения по регистрам подсистемы учета НДС.
//
Процедура ДвиженияРегистровПодсистемыНДСПоступление(СтруктураШапкиДокумента, ТабЧасть, ТаблицаПоДенежнымСредствам, Отказ) Экспорт

	Если НЕ УчетНДС.ПроводитьДокументДляЦелейНДС(СтруктураШапкиДокумента) Тогда
		// Движения по этому документу делать не нужно
		Возврат;
	КонецЕсли;

	Если НЕ ТабЧасть.Количество() = 0 Тогда 
	
		УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураШапкиДокумента, ТабЧасть, Отказ);
		
		Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
			УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ПоступлениеАгентскогоНДС(СтруктураШапкиДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияАвансыПоДоговорамКомиссии(СтруктураШапкиДокумента, ТаблицаПоДенежнымСредствам);
		
КонецПроцедуры // ДвиженияРегистровПодсистемыНДСПоступление()

// Заполняет колонки значениями, нужными для упр. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный,	"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция,	"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,	"ДопустимыйСтатус3");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,								"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,					"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, 								"ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 		"КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), "КратностьДокумента");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект, "Проект");
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаДвижений Цикл
		
		СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);
		
		Строка.СуммаЗадолженности = СтрокаТЧ.СуммаСНДСДок;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр() 

// Заполняет колонки значениями, нужными для регл. учета
//
Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)

	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, 				"ОтражатьВБухгалтерскомУчете");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,     				"ОтражатьВНалоговомУчете");

	// Кор.Счет для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
	ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, 									"КорСчетЗадолженностиБУ");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав, "КорСчетНУ");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату, 		"КорСубконтоНУ1");
	ТаблицаДвижений.ЗаполнитьЗначения(Контрагент,  														"КорСубконтоНУ2");
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, 												"КорСубконтоНУ3");

	Для Каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТоварам.Получить(Строка.НомерСтроки);

		Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
		Строка.КорСчетНУ      = СтрокаТЧ.СчетРасходовНУ;
		Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоБУ;
		Строка.КорСубконтоНУ2 = СтрокаТЧ.СубконтоНУ;
		Строка.ПринятыеСчетУчетаБУ = СтрокаТЧ.ПереданныеПринятыеБУ;
		Строка.ПринятыеСчетУчетаНУ = СтрокаТЧ.ПереданныеПринятыеНУ;
		
		// Доход от продажи может облагаться ЕНВД (что определяется по бух. счету учета)
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетДоходовБУ)
			И НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТЧ.СчетДоходовБУ) Тогда
			
			// в этом случае товар списывается на счет расходов по ЕНВД
			Строка.КорСчетНУ = ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			Строка.ОтражатьВНалоговомУчете = Истина;
			Строка.СчетУчетаНУ = СтрокаТЧ.СчетУчетаБУ;
			Строка.ПринятыеСчетУчетаНУ = СтрокаТЧ.ПереданныеПринятыеБУ;
		КонецЕсли;
		
		// Субконто кор.счета для начисления задолженности перед комитентом, если вдруг продадим комиссионный товар
		Строка.КорСубконтоЗадолженностиБУ1 = Контрагент;
		Строка.КорСубконтоЗадолженностиБУ2 = ДоговорКонтрагента;
		
		Строка.СчетДоходовБУ = СтрокаТЧ.СчетДоходовБУ;
		Строка.СчетДоходовНУ = СтрокаТЧ.СчетДоходовНУ;
		
		Строка.СуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДС+СтрокаТЧ.НДС;
		Строка.СуммаНДС = СтрокаТЧ.НДС;
		
		Если СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			
			Строка.КорВалютнаяСуммаЗадолженностиБУ = СтрокаТЧ.СуммаБезНДСВал+СтрокаТЧ.НДСВал;
			Строка.КорВалютаЗадолженностиБУ        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			
		КонецЕсли;
		
		Если Строка.СчетУчетаБУ.Забалансовый Тогда
			Строка.ПринятыеСчетУчетаБУ = Строка.СчетУчетаБУ;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл() 

// Формирование движений по регистру "Списанные товары".
//
Процедура ДвиженияПоРегиструСписанныеТовары(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, Отказ, Заголовок)

	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(
		УправлениеЗапасами.ПолучитьТаблицуСобственныхТоваров(СтруктураШапкиДокумента, ТаблицаПоТоварам),
		ТаблицаДвижений,
		Истина);

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыТабличныхЧастей.Товары,   	  			 "ВидТабличнойЧасти");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   		 "ВедениеУчетаПоПроектам");
	
	//Заполним общие поля для всех видов учета
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,														 "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,													 "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина,													 "Активность");

	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,										 "ДоговорКонтрагента");
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, 												 "Организация");
		
	// Заказ, на который списывается
	ТаблицаДвижений.ЗаполнитьЗначения(?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено),		 "ЗаказСписания");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия, "КодОперацииПартииТоваров");

	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	//Заполним поля специфичные для регл. учета
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	КонецЕсли;	
	
	ОбщегоНазначения.ПронумероватьСтрокиТаблицыЗначений(ТаблицаДвижений, "НомерСтрокиДокумента");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;

	Если НЕ Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Если Движения.СписанныеТовары.Модифицированность() Тогда
		Движения.СписанныеТовары.Записать(Истина);
	КонецЕсли;

КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Дополняет полями, нужными для упр. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	
КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокументаИПроверитьОтражениеВУчете(ЭтотОбъект, Отказ, Заголовок);
	
	СтруктураШапкиДокумента.Вставить("Комиссионер", Контрагент); // Для контроля по регистру "Остатки организаций"
	СтруктураШапкиДокумента.Вставить("КомиссияПоПокупателям", НЕ(Покупатели.Количество() = 1 И Покупатели[0].Покупатель = Контрагент));
	СтруктураШапкиДокумента.Вставить("Склад", Справочники.Склады.ПустаяССылка());

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета"             , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета"         , "КурсВалютыУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                  , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"               , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                   , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                            , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьДенежныеСредстваКомитента", "КонтролироватьДенежныеСредстваКомитента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "РасчетыВУсловныхЕдиницах"               , "РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВестиПоДокументамРасчетовСКонтрагентом" , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"		 , "ОтражатьВРегламентированномУчете"       , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                            , "СделкаВидОперации");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                 , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "УчетАгентскогоНДС"    					, "УчетАгентскогоНДС");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидАгентскогоДоговора"                  , "ВидАгентскогоДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "НалоговыйАгентПоОплате"                 , "НалоговыйАгентПоОплате");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                   			, "ВидДоговора");
 	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	СтруктураШапкиДокумента.Вставить("СписаниеПартий", Ложь);

	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам) Экспорт
	
	//Формируем отдельную таблицу для Комиссионного вознаграждения.
	// Подготовим таблицу услуг для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, СтруктураШапкиДокумента, СтруктураШапкиДокумента.НДСВключенВСтоимость);
		
	Если не ТаблицаПоУслугам.Колонки.Найти("ВидЦенности") = Неопределено Тогда
		ТаблицаПоУслугам.ЗаполнитьЗначения(Перечисления.ВидыЦенностей.ПосредническиеУслуги, "ВидЦенности");
	КонецЕсли; 
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Количество"                , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                  , "Сумма");
	СтруктураПолей.Вставить("СуммаПередачи"             , "СуммаПередачи");
	СтруктураПолей.Вставить("СтавкаНДС"                 , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                       , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                    , "СуммаНДС");
	СтруктураПолей.Вставить("СуммаНДСПередачи"          , "СуммаНДСПередачи");
	СтруктураПолей.Вставить("СуммаВознаграждения"       , "СуммаВознаграждения");
	СтруктураПолей.Вставить("СтавкаНДСВознаграждения"   , "Ссылка.СтавкаНДСВознаграждения");
	СтруктураПолей.Вставить("СуммаНДСВознаграждения" 	, "СуммаНДСВознаграждения");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры", "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"         , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПринадлежностьНоменклатуры", "ПринадлежностьНоменклатуры");

	// Дополним полями, нужными для упр. и регл. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей);
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;

	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);

	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	
	//Заполнение счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, 	СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, СтруктураШапкиДокумента, Истина);
		
	ТаблицаПоДенежнымСредствам = Новый ТаблицаЗначений();
	
	Если СтруктураШапкиДокумента.КонтролироватьДенежныеСредстваКомитента = Истина
		ИЛИ УчетНДС.ПолучитьВерсиюПостановления(СтруктураШапкиДокумента.Дата) = 2 Тогда // Получается запросом через точку и может быть равно NULL, если договор не заполнен

		СтруктураПолей = Новый Структура();
		СтруктураПолей.Вставить("ВидОтчетаПоПлатежам", "ВидОтчетаПоПлатежам");
		СтруктураПолей.Вставить("Сумма"              , "Сумма");
		СтруктураПолей.Вставить("СтавкаНДС"          , "СтавкаНДС");
		СтруктураПолей.Вставить("СуммаНДС"           , "СуммаНДС");
		СтруктураПолей.Вставить("СуммаСНДС"          , "Сумма" + ?(СтруктураШапкиДокумента.СуммаВключаетНДС, "", "+ СуммаНДС"));
		СтруктураПолей.Вставить("Покупатель"         , "Покупатель");
		СтруктураПолей.Вставить("ДатаСобытия"        , "ДатаСобытия");
		
		РезультатЗапросаПоДенежнымСредствам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДенежныеСредства", СтруктураПолей);

		// Подготовим таблицу денежных средств для проведения.
		ТаблицаПоДенежнымСредствам = ПодготовитьТаблицуДенежныхСредств(РезультатЗапросаПоДенежнымСредствам, СтруктураШапкиДокумента);
		
	КонецЕсли;

КонецПроцедуры // СформироватьТаблицыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	ТипОснования = ТипЗнч(Основание);
	Если ТипОснования <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И ТипОснования <> Тип("ДокументСсылка.ИнвентаризацияТоваровОтданныхНаКомиссию") Тогда
		возврат;
	КонецЕсли;

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Возврат;
		КонецЕсли;

		Если Основание.Проведен Тогда

			// Сделку заполняем только если взаиморасчеты ведутся не по договору в целом
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 

			 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				Сделка = Основание.Сделка;
			КонецЕсли;

			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			СтавкаНДСВознаграждения                  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

			ЗаполнитьТоварыУпр(Основание);
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		Если Основание.Проведен Тогда

			Сделка = Основание;

			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			СтавкаНДСВознаграждения                  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

			ЗаполнитьТоварыУпр();
		КонецЕсли;

	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ИнвентаризацияТоваровОтданныхНаКомиссию") Тогда

		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);

		// Заполним флаги учета налогов.
		УчитыватьНДС     = Истина;
		СуммаВключаетНДС = Истина;

		Сделка                  = Основание.Сделка;
		ВалютаДокумента         = Основание.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента           = СтруктураКурсаДокумента.Курс;
		КратностьДокумента      = СтруктураКурсаДокумента.Кратность;

		СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
		ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
		СтавкаНДСВознаграждения                  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

		ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр(Основание);

	КонецЕсли;

	ОтражатьВБухгалтерскомУчете = Истина;
	ОтражатьВНалоговомУчете     = Истина;
	ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;


	Если НЕ ЗначениеЗаполнено(Сделка) И Сделка <> Неопределено Тогда
		Сделка = Неопределено;
	КонецЕсли;

	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, ДенежныеСредства);

	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента      = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаНДСВознаграждения = Товары.Итог("СуммаНДСВознаграждения");
	СуммаВознаграждения = Товары.Итог("СуммаВознаграждения")+ 
	                      ?(УчитыватьНДС И (Не СуммаВключаетНДС), СуммаНДСВознаграждения, 0);
						  
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	
	// Проверим необходимость формирования счетов-фактур.
	НеобходимоСформироватьСчетаФактурыВыданныеДляСтрокДокумента = Ложь;
	Если ДополнительныеСвойства.Свойство("НеобходимоСформироватьСчетаФактурыВыданныеДляСтрокДокумента", НеобходимоСформироватьСчетаФактурыВыданныеДляСтрокДокумента) Тогда
		Если НеобходимоСформироватьСчетаФактурыВыданныеДляСтрокДокумента Тогда
			СформироватьСчетаФактурыВыданныеДляСтрокДокумента();
		КонецЕсли;
	КонецЕсли;
	
	УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
	СинхронизацияПометкиНаУдалениеУПодчиненныхСчетовФактур(ПометкаУдаления);
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект);
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	

	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	СчетаУчетаВДокументах.ЗаполнитьИПроверитьЗаполнениеСчетовУчетаШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаПоТоварам, ТаблицаПоДенежнымСредствам);
	
	Если СтруктураШапкиДокумента.ВестиПоДокументамРасчетовСКонтрагентом = Истина Тогда
		СтруктураПолей = Новый Структура;
		СтруктураПолей.Вставить("ДокументРасчетовСКонтрагентом", "ДокументРасчетовСКонтрагентом");
		СтруктураПолей.Вставить("ДатаОплаты"                   , "ДатаОплаты");
		СтруктураПолей.Вставить("СуммаВзаиморасчетов"          , "СуммаВзаиморасчетов");
		СтруктураПолей.Вставить("СуммаРегл"                    , "СуммаРегл");
	
		РезультатЗапросаПоДокументамРасчетовСКонтрагентами = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ДокументыРасчетовСКонтрагентом", СтруктураПолей);
		ТаблицаПоДокументамРасчетовСКонтрагентом = ПодготовитьТаблицуПоДокументамРасчетовСКонтрагентами(РезультатЗапросаПоДокументамРасчетовСКонтрагентами, СтруктураШапкиДокумента);
		ПроверитьЗаполнениеТабличнойЧастиДокументыРасчетовСКонтрагентом(ТаблицаПоДокументамРасчетовСКонтрагентом, СтруктураШапкиДокумента, Отказ, Заголовок);
	Иначе
		ТаблицаПоДокументамРасчетовСКонтрагентом = Неопределено;
	КонецЕсли;

	// Проверить заполнение ТЧ "Товары".
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "ДенежныеСредства"
	ПроверитьЗаполнениеТабличнойЧастиДенежныеСредства(ТаблицаПоДенежнымСредствам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверить заполнение ТЧ "Покупатели"
	ПроверитьЗаполнениеТабличнойЧастиПокупатели(СтруктураШапкиДокумента, Отказ, Заголовок);

	//Проверка заполнения счетов учета номенклатуры и затрат
	СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, 	СтруктураШапкиДокумента, Отказ, Заголовок);
	
	//Проверим на возможность проведения в БУ и НУ.
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
	 Или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, ВалютаДокумента,
		                                     СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, мВалютаРегламентированногоУчета, 
		                                     Ложь, Отказ, Заголовок, "", СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		                                     СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ОбработкаПодчиненныхДокументовСчетФактура();
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоДенежнымСредствам,
								ТаблицаПоДокументамРасчетовСКонтрагентом, Отказ, Заголовок);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварам));
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ОбработкаПодчиненныхДокументовСчетФактура(Ложь);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Для каждого СтрокаТЧ Из Покупатели Цикл
		СтрокаТЧ.ВыставленСФ = Ложь;
		СтрокаТЧ.СчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
	КонецЦикла;
	
КонецПроцедуры

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента,Отказ) 

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		УчетнаяПолитикаБух = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаБух) Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

//Выполняет заполнение счетов учета в переданной строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, ТабличнаяЧасть, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);

КонецПроцедуры

//Заполняет счета учета номенклатуры и затрат в шапке документа
Процедура ЗаполнитьСчетаУчетаВШапке(ЗаполнятьСчетУчетаНДС = Истина) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаШапки(ЭтотОбъект, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Истина, ЗаполнятьСчетУчетаНДС);
	
КонецПроцедуры

// Возвращает структуру со значениями по-умолчанию счетов учета шапки (кроме счетов учета номенклатуры и затрат).
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	//Счета учета затрат в этом документе с использованием этой функции не заполняются
	
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
	
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);

		СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",			СчетаУчета.СчетРасчетовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансамПолученным",	СчетаУчета.СчетАвансовПокупателя);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовЗаПосредническиеУслуги",	ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансамВыданным",		СчетаУчета.СчетАвансов);
		
	КонецЕсли;
	
	Возврат СтруктураСчетов;

КонецФункции

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансамПолученным");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовЗаПосредническиеУслуги");
		СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоАвансамВыданным");
		Если НЕ СтруктураШапкиДокумента.СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается
			ИЛИ Товары.Итог("СуммаВознаграждения") <> 0 Тогда
			СтруктураОбязательныхПолей.Вставить("ПодразделениеОрганизации");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметров, СтруктураШапкиДокумента, ТаблицаПоУслугам)
					
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;				
	
	ТаблицаДвижений = новый ТаблицаЗначений();				
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.ОбъектыСтроительства, СправочникСсылка.Номенклатура"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаЦенности"	, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНДС"			, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("НДС"					, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаДвижений.Колонки.Добавить("НоменклатурнаяГруппа"	, Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	ТаблицаДвижений.Колонки.Добавить("СтатьяЗатрат"			, Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	ТаблицаДвижений.Колонки.Добавить("Субконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("Субконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("Субконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("Сделка"				);
	
	УчетНДС.ПереименованиеКолонок(ТаблицаПоУслугам,новый Структура("СчетЗатратНУ","СчетУчетаНУ"));
	//УчетНДС.ПереименованиеКолонок(ТаблицаПоТоварам,новый Структура("СчетЗатратНУ","СчетУчетаНУ"));
	
	НаборТаблиц = Новый Массив;
	//НаборТаблиц.Добавить(ТаблицаПоТоварам);
	НаборТаблиц.Добавить(ТаблицаПоУслугам);
	
	Для каждого ТекущаяТаблица Из НаборТаблиц Цикл
		Для каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
			СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
			
			СтрокаНовойТаблицы.СуммаВзаиморасчетов	= СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			СтрокаНовойТаблицы.СуммаСНДС			= СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		КонецЦикла; 
	КонецЦикла; 
	
	СтруктураДляПереименованияКолонок = Новый Структура("НДС,СчетУчетаЦенности,СчетУчетаНДС,ПодразделениеОрганизации, СубконтоНУ1,СубконтоНУ2,СубконтоНУ3"
														,"СуммаНДС","КоррСчет","СчетНДС","Подразделение","СубконтоНУ1Базовое","СубконтоНУ2Базовое","СубконтоНУ3Базовое");
														
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений,СтруктураДляПереименованияКолонок);
	УчетНДС.ПереименованиеКолонок(ТаблицаПоУслугам,новый Структура("СчетУчетаНУ","СчетЗатратНУ"));
	//УчетНДС.ПереименованиеКолонок(ТаблицаПоТоварам,новый Структура("СчетУчетаНУ","СчетЗатратНУ"));
	
	ЧисловыеКолонкиСтрокой = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1",ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2",ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3",ОписаниеТипов_ВидыСубконтоХозрасчетные);
	КонецЕсли;
	Для Каждого Движение Из ТаблицаДвижений Цикл
		КоррСчет = Движение["КоррСчет"];
		Для каждого ВидСубконто из КоррСчет.ВидыСубконто Цикл
			ДопустимыеТипыСубконто = ВидСубконто.ВидСубконто.ТипЗначения;
			Если ЗначениеЗаполнено(Движение["СтатьяЗатрат"]) и не УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(Движение["СтатьяЗатрат"]) Тогда
				// Это услуги непроизводственного характера. При формировании проводок использовалась аналитика из ТЧ.  
				Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Субконто"+ВидСубконто.НомерСтроки])) Тогда
					Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["Субконто"+ВидСубконто.НомерСтроки];
                КонецЕсли;
			Иначе
				//Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Номенклатура"])) Тогда
				//	Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["Номенклатура"];
				//ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Склад"])) Тогда
				//	Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["Склад"];
				//Иначе
				Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["СтатьяЗатрат"])) Тогда
					Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["СтатьяЗатрат"];
				ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["НоменклатурнаяГруппа"])) Тогда
					Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["НоменклатурнаяГруппа"];
				ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Подразделение"])) Тогда
					Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["Подразделение"];
				//ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(Тип("ПеречислениеСсылка.СпособыСтроительства")) Тогда
				//	Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Перечисления.СпособыСтроительства.Подрядный;
				//ИначеЕсли ЗначениеЗаполнено(Движение["ОбъектСтроительства"]) 
				//	и ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["ОбъектСтроительства"])) Тогда
				//	Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["ОбъектСтроительства"];
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;	
		
		Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
			СчетУчетаНУ = Движение["СчетУчетаНУ"];
			Для каждого ВидСубконто из СчетУчетаНУ.ВидыСубконто Цикл
				ДопустимыеТипыСубконто = ВидСубконто.ВидСубконто.ТипЗначения;
				Если ЗначениеЗаполнено(Движение["СтатьяЗатрат"]) и не УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(Движение["СтатьяЗатрат"]) Тогда
					// Это услуги непроизводственного характера. При формировании проводок использовалась аналитика из ТЧ.  
					Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["СубконтоНУ"+ВидСубконто.НомерСтроки+"Базовое"])) Тогда
						Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["СубконтоНУ"+ВидСубконто.НомерСтроки+"Базовое"];
	                КонецЕсли;
				Иначе
					//Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Номенклатура"])) Тогда
					//	Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["Номенклатура"];
					//ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Склад"])) Тогда
					//	Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["Склад"];
					//Иначе
					Если ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["СтатьяЗатрат"])) Тогда
						Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["СтатьяЗатрат"];
					ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["НоменклатурнаяГруппа"])) Тогда
						Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["НоменклатурнаяГруппа"];
					ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["Подразделение"])) Тогда
						Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Движение["Подразделение"];
					//ИначеЕсли ДопустимыеТипыСубконто.СодержитТип(Тип("ПеречислениеСсылка.СпособыСтроительства")) Тогда
					//	Движение["СубконтоНУ"+ВидСубконто.НомерСтроки] = Перечисления.СпособыСтроительства.Подрядный;
					//ИначеЕсли ЗначениеЗаполнено(Движение["ОбъектСтроительства"]) 
					//	и ДопустимыеТипыСубконто.СодержитТип(ТипЗнч(Движение["ОбъектСтроительства"])) Тогда
					//	Движение["КоррСубконто"+ВидСубконто.НомерСтроки] = Движение["ОбъектСтроительства"];
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
	
	//ТаблицаДвижений.Колонки.ЗаказПоставщику.Имя = "Сделка";
	//
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	Иначе //.ПоСчетам или .ПоЗаказам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Сделка, "Сделка");
	КонецЕсли;
	
	//СтруктураПараметров.Вставить("Склад",СкладПроводок);
	Возврат ТаблицаДвижений;
КонецФункции

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметров, СтруктураШапкиДокумента,	ТаблицаПоТоварам)
	Перем Счет91, Счет90_03;
	
	Счет91 = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
	Счет90_03 = ПланыСчетов.Хозрасчетный.Продажи_НДС;
	
	ОписаниеТипов_ВидыСубконтоХозрасчетные = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;				
	ТаблицаДвижений = новый ТаблицаЗначений();				
	
	//ТаблицаДвижений.Колонки.Добавить("ТекущаяТаблица");
	
	ТаблицаДвижений.Колонки.Добавить("ЗаказПокупателя"		, Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	
	ТаблицаДвижений.Колонки.Добавить("ВидЦенности"			, Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));
	ТаблицаДвижений.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаДвижений.Колонки.Добавить("СтавкаНДС"			, Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСчет"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоБУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетУчетаНУ"			, Новый ОписаниеТипов("ПланСчетовСсылка.Налоговый"));
	ТаблицаДвижений.Колонки.Добавить("СубконтоНУ"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СчетНДС"				, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаСНДС"			, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаДвижений.Колонки.Добавить("СуммаНДС"				, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("СуммаВзаиморасчетов"	, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("КоррСубконто3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС1"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС2"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	ТаблицаДвижений.Колонки.Добавить("СубконтоНДС3"			, ОписаниеТипов_ВидыСубконтоХозрасчетные);
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
		
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ1", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ2", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		ТаблицаДвижений.Колонки.Добавить("СубконтоНУ3", ОписаниеТипов_ВидыСубконтоХозрасчетные);
		
	КонецЕсли;
	
	ПереименованиеКолонокРезультирующейТаблицы = Новый Структура();
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("КоррСчет", "СчетДоходовБУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СчетУчетаНУ", "СчетДоходовНУ");
	ПереименованиеКолонокРезультирующейТаблицы.Вставить("СуммаНДС", "НДС");
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы);
	
	НаборТаблиц = Новый Массив;
	//Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
	//	или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование
	//	Тогда
		НаборТаблиц.Добавить(ТаблицаПоТоварам);
	//	НаборТаблиц.Добавить(ТаблицаПоУслугам);
	//КонецЕсли;
	
	Для каждого ТекущаяТаблица Из НаборТаблиц Цикл
		
		Для каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
			СтрокаНовойТаблицы = ТаблицаДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовойТаблицы,СтрокаТаблицы);
			
			СтрокаНовойТаблицы.СчетНДС = ?(БухгалтерскийУчет.ЭтоСубсчет(СтрокаТаблицы.СчетРасходовБУ, Счет91),СтрокаТаблицы.СчетРасходовБУ, Счет90_03);
			
			СтрокаНовойТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			СтрокаНовойТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.НДСВал;
			
			Если СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение Тогда
				СтрокаНовойТаблицы.СуммаСНДС = СтрокаНовойТаблицы.СуммаСНДС - СтрокаТаблицы.ВознаграждениеСНДСрегл;
				СтрокаНовойТаблицы.СуммаВзаиморасчетов = СтрокаНовойТаблицы.СуммаВзаиморасчетов - СтрокаТаблицы.ВознаграждениеСНДС;
				СтрокаНовойТаблицы.НДС = СтрокаНовойТаблицы.НДС - СтрокаТаблицы.СуммаНДСВознагражденияРегл;
			КонецЕсли;
			
			КоррСчет = СтрокаНовойТаблицы.СчетДоходовБУ;
			
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) тогда
					СтрокаНовойТаблицы["КоррСубконто"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				Конецесли;
			КонецЦикла; 
			
			КоррСчет = СтрокаНовойТаблицы.СчетНДС;
			
			Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
				ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
				Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
				ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СтавкаНДС)) ТОгда
					СтрокаНовойТаблицы["СубконтоНДС"+НомерСубконто] = СтрокаНовойТаблицы.СтавкаНДС;
				Конецесли;
			КонецЦикла; 
			
			Если СтруктураПараметров.ОтражатьВНалоговомУчете тогда
				КоррСчет = СтрокаНовойТаблицы.СчетДоходовНУ;
				Для НомерСубконто =1 по КоррСчет.ВидыСубконто.Количество() Цикл
					ВидСубк = КоррСчет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
					Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.СубконтоБУ)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.СубконтоБУ;
					ИначеЕсли ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(СтрокаНовойТаблицы.Номенклатура)) Тогда
						СтрокаНовойТаблицы["СубконтоНУ"+НомерСубконто] = СтрокаНовойТаблицы.Номенклатура;
					Конецесли;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
	УчетНДС.ПереименованиеКолонок(ТаблицаДвижений, ПереименованиеКолонокРезультирующейТаблицы, Истина);
	
	ТаблицаДвижений.Колонки.ЗаказПокупателя.Имя = "Сделка";
	
	ЧисловыеКолонкиСтрокой = "СуммаВзаиморасчетов, СуммаСНДС, СуммаНДС";
	ЧисловыеКолонкиСтруктура = новый Структура(ЧисловыеКолонкиСтрокой);
	НеЧисловыеКолонкиСтрокой = "";
	Для каждого Колонка Из ТаблицаДвижений.Колонки Цикл
		Если Не ЧисловыеКолонкиСтруктура.Свойство(Колонка.Имя) Тогда
			НеЧисловыеКолонкиСтрокой = НеЧисловыеКолонкиСтрокой + ", " + Колонка.Имя;	
		КонецЕсли;  
	КонецЦикла;
	
	Если СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Сделка");
	ИначеЕсли СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам 
		ИЛИ СтруктураПараметров.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураПараметров.Сделка, "Сделка");
	КонецЕсли;
	
	НеЧисловыеКолонкиСтрокой = Прав(НеЧисловыеКолонкиСтрокой,СтрДлина(НеЧисловыеКолонкиСтрокой)-2);
	ТаблицаДвижений.Свернуть(НеЧисловыеКолонкиСтрокой, ЧисловыеКолонкиСтрокой);
	
	
	Возврат ТаблицаДвижений;
	
КонецФункции

//Формирует структуру параметров для передачи в процедуры зачета аванса по ссылке на документ
Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоУслугам(СтруктураШапкиДокумента, Заголовок = Неопределено, СуммаДокументаСНДС, ТаблицаПоВзаиморасчетам = Неопределено ) Экспорт
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("ВидДокумента,
										  |, Организация, ВалютаРегламентированногоУчета
	                                      |, ОрганизацияПрименяетУСН, ОтражатьВНалоговомУчете, ОтражатьВНалоговомУчетеУСН, ОтражатьВНалоговомУчетеУСНДоходы
										  |, НДСВключенВСтоимость
										  |, ВалютаДокумента, КурсДокумента, КратностьДокумента
										  |, Контрагент, Сделка
										  |, ДоговорКонтрагента, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС, ВедениеВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом
										  |, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов
										  |");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	                                                               
	СтруктураПараметров.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамВыданным);
	СтруктураПараметров.Вставить("ВидОперации", Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);	
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	
	СтруктураПараметров.Вставить("СуммаДокументаСНДС",СуммаДокументаСНДС);
	СтруктураПараметров.Вставить("Период",Дата);	
	СтруктураПараметров.Вставить("Дата",Дата);	
	СтруктураПараметров.Вставить("Ссылка",Ссылка);	
	
	//Определение вида операции
	СтруктураПараметров.Вставить("Направление", "Поступление");	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	СтруктураПараметров.Вставить("РасчетыВозврат",БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента,СтруктураПараметров.ВидОперации).РасчетыВозврат);
	
	Если СтруктураПараметров.РасчетыВозврат=Неопределено тогда
		//Другие операции не обрабатываются
		ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	//Будут заполнены в модуле зачета аванса
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	Возврат СтруктураПараметров;
КонецФункции

Функция ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоТоварам(СтруктураШапкиДокумента, Заголовок = Неопределено, СуммаДокументаСНДС, ТаблицаПоВзаиморасчетам = Неопределено ) Экспорт
	
	//Получение реквизитов шапки
	СтруктураПараметров = Новый Структура("ВидДокумента,
										  |, Организация, ВалютаРегламентированногоУчета
	                                      |, ОрганизацияПрименяетУСН, ОтражатьВНалоговомУчете, ОтражатьВНалоговомУчетеУСН, ОтражатьВНалоговомУчетеУСНДоходы
										  |, НДСВключенВСтоимость
										  |, ВалютаДокумента, КурсДокумента, КратностьДокумента
										  |, Контрагент, Сделка
										  |, ДоговорКонтрагента, РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС, ВедениеВзаиморасчетов, ВестиПоДокументамРасчетовСКонтрагентом
										  |, ВалютаВзаиморасчетов, КурсВзаиморасчетов, КратностьВзаиморасчетов
										  |");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтруктураШапкиДокумента);
	                                                               
	СтруктураПараметров.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
	СтруктураПараметров.Вставить("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансамПолученным);
	СтруктураПараметров.Вставить("ВидОперации", Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации);
	СтруктураПараметров.Вставить("Регистратор",Ссылка);	
	СтруктураПараметров.Вставить("Заголовок",Заголовок);	
	
	СтруктураПараметров.Вставить("СуммаДокументаСНДС",СуммаДокументаСНДС);
	СтруктураПараметров.Вставить("Период",Дата);	
	СтруктураПараметров.Вставить("Дата",Дата);	
	СтруктураПараметров.Вставить("Ссылка",Ссылка);	
	
	//Определение вида операции
	СтруктураПараметров.Вставить("Направление", "Выбытие");	
	ВидОперацииРасчет = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	СтруктураПараметров.Вставить("РасчетыВозврат",БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураПараметров.ВидДокумента,СтруктураПараметров.ВидОперации).РасчетыВозврат);
	
	Если СтруктураПараметров.РасчетыВозврат=Неопределено тогда
		//Другие операции не обрабатываются
		ОбщегоНазначения.СообщитьОбОшибке("Документ не обрабатывается в блоке расчета авансов.",Ложь,Заголовок);
		Возврат Ложь;                                  
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТаблицаПоВзаиморасчетам", ТаблицаПоВзаиморасчетам);
	
	//Будут заполнены в модуле зачета аванса
	СтруктураПараметров.Вставить("СуммаАвансаРег",0);
	СтруктураПараметров.Вставить("СуммаАвансаВал",0);

	Возврат СтруктураПараметров;
КонецФункции

// По результату запроса по шапке документа формируем движения по регл. регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, Отказ, Заголовок)
	
	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// Формирование движений по регистру "Учет продаж и себестоимости".
	РасширеннаяАналитикаУчета.СформироватьДвиженияПоПродажам(
		СтруктураШапкиДокумента,
		ТаблицаПоТоварам
	);
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	
	Если НЕ глЗначениеПеременной("ПараметрыПартионногоУчета").СписыватьПартииПриПроведенииДокументовБух Тогда
		
		ТаблицаВыручкиДляБУ = ТаблицаПоТоварам.Скопировать( Новый Структура("ПринадлежностьНоменклатуры", Перечисления.ПринадлежностьНоменклатуры.ПустаяСсылка()), "СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ, СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал");
		ТаблицаВыручкиДляБУ.Свернуть("СтавкаНДС, СчетДоходовБУ, СчетРасходовБУ, СубконтоБУ, СчетДоходовНУ, СубконтоНУ", "СуммаБезНДС, НДС, СуммаБезНДСВал, НДСВал");
		
		ДатаДока   = Дата;
		Счет91     = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы;
		
		// Проводки по выручке и НДС без списания партий
		Для каждого СтрокаТЧ из ТаблицаВыручкиДляБУ Цикл
			
			// Выручка
			Проводка = ПроводкиБУ.Добавить();
			Проводка.Период                 = ДатаДока;
			Проводка.Организация            = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание 			= "Реализация комиссионером";
			Проводка.СписаниеПартий         = Истина;
			Проводка.Сумма = СтрокаТЧ.СуммаБезНДС + СтрокаТЧ.НДС;
			
			Проводка.СчетДт                 = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт           = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт	= СтрокаТЧ.СуммаБезНДСВал + СтрокаТЧ.НДСВал;
			КонецЕсли; 
			
			Проводка.СчетКт                 = СтрокаТЧ.СчетДоходовБУ;
			Для каждого СубконтоСчета Из Проводка.СчетКт.ВидыСубконто Цикл
				Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУ)) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУ);
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
			
			// НДС
			Если СтруктураШапкиДокумента.УчитыватьНДС 
				И СтрокаТЧ.НДС <> 0 Тогда
				
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период               = ДатаДока;
				Проводка.Организация          = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание           = "Реализация комиссионером";
				Проводка.СписаниеПартий       = Истина;
				
				Проводка.СчетДт = ?( БухгалтерскийУчет.ЭтоСубсчет(СтрокаТЧ.СчетРасходовБУ, Счет91), СтрокаТЧ.СчетРасходовБУ, ПланыСчетов.Хозрасчетный.Продажи_НДС);
				Для каждого СубконтоСчета Из Проводка.СчетДт.ВидыСубконто Цикл
					Если СубконтоСчета.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаТЧ.СубконтоБУ)) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,СубконтоСчета.НомерСтроки, СтрокаТЧ.СубконтоБУ);
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтавкиНДС", СтрокаТЧ.СтавкаНДС);
				
				Если не СтруктураШапкиДокумента.Свойство("МоментОпределенияНалоговойБазыНДС") Тогда
					Если ЗначениеЗаполнено(УчетнаяПолитикаБух)
						И ЗначениеЗаполнено(УчетнаяПолитикаБух.МоментОпределенияНалоговойБазыНДС) 
						Тогда
						МоментОпределенияНалоговойБазыНДС = УчетнаяПолитикаБух.МоментОпределенияНалоговойБазыНДС;
					Иначе
						МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке;
					КонецЕсли; 
					СтруктураШапкиДокумента.Вставить("МоментОпределенияНалоговойБазыНДС",МоментОпределенияНалоговойБазыНДС);
				КонецЕсли; 
				
				Если СтруктураШапкиДокумента.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОплате Тогда
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"СФВыданные", Ссылка);
				Иначе
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
				КонецЕсли;
				
				Проводка.Сумма                = СтрокаТЧ.НДС;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ТаблицаПоУслугам.Итог("Сумма")=0 тогда 
		
		// Движения по посредническим услугам.
		Если СуммаВознаграждения <> 0 Тогда
			
			ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
			
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			НоваяСтрока.Подразделение 		 = ПодразделениеОрганизации;
			НоваяСтрока.СтатьяЗатрат 		 = СтатьяЗатрат;
			НоваяСтрока.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
			НоваяСтрока.Заказ 				 = Сделка;
			НоваяСтрока.СчетЗатрат 			 = СтруктураШапкиДокумента.СчетУчетаЗатрат;
			НоваяСтрока.СчетЗатратНУ 		 = СтруктураШапкиДокумента.СчетУчетаЗатратНУ;
			НоваяСтрока.СуммаБезНДС 		 = ТаблицаПоУслугам.Итог("СуммаБезНДС");
			НоваяСтрока.СуммаРегл	 		 = ТаблицаПоУслугам.Итог("СуммаБезНДС") + ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, ТаблицаПоУслугам.Итог("НДС"), 0);
			
			УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
				СтруктураШапкиДокумента, 
				ТаблицаЗатрат
			);
			
		КонецЕсли;
		
		ДатаДока   = Дата;
		
		
		//Подготовка структуры шапки для зачета аванса по комиссионному вознаграждению
		Если СтруктураШапкиДокумента.УдержатьКомиссионноеВознаграждение Тогда
			
			СуммаЗачетаВПределахДокументаРег = ТаблицаПоУслугам.Итог("СуммаБезНДС") + ?(СтруктураШапкиДокумента.УчетАгентскогоНДС, 0, ТаблицаПоУслугам.Итог("НДС"));
			СуммаЗачетаВПределахДокументаВал = ТаблицаПоУслугам.Итог("СуммаБезНДСВал") + ?(СтруктураШапкиДокумента.УчетАгентскогоНДС, 0, ТаблицаПоУслугам.Итог("НДСВал"));
				
			//Формирование таблицы для возврата сумм зачтенных авансов (по документам)
			ТаблицаАвансов = Новый ТаблицаЗначений();
			ТаблицаАвансов.Колонки.Добавить("ДокументРасчетовСКонтрагентом",Документы.ТипВсеСсылки());
			ТаблицаАвансов.Колонки.Добавить("Сделка",					Документы.ТипВсеСсылки());
			ТаблицаАвансов.Колонки.Добавить("СуммаРегл",				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			ТаблицаАвансов.Колонки.Добавить("СуммаВзаиморасчетов",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			ТаблицаАвансов.Колонки.Добавить("ДатаОплаты",				Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Вознаграждение комиссионера";
			Проводка.Сумма        = СуммаЗачетаВПределахДокументаРег;

			Проводка.СчетДт       = СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				
			Проводка.СчетКт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);

			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаДт = СуммаЗачетаВПределахДокументаВал;
			КонецЕсли;
				
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СуммаЗачетаВПределахДокументаВал;
			КонецЕсли;
				
			//Добавление записи в таблицу зачета авансов
			СтрокаЗачетаАванса = ТаблицаАвансов.Добавить();
			СтрокаЗачетаАванса.ДокументРасчетовСКонтрагентом	= СтруктураШапкиДокумента.Ссылка;
			СтрокаЗачетаАванса.Сделка							= СтруктураШапкиДокумента.Сделка;
			СтрокаЗачетаАванса.СуммаРегл						= СуммаЗачетаВПределахДокументаРег;
			СтрокаЗачетаАванса.СуммаВзаиморасчетов				= СуммаЗачетаВПределахДокументаВал;
		Иначе
			// Проводки по взаиморасчетам
			СуммаПоУслугам = ТаблицаПоУслугам.Итог("СуммаБезНДСВал") + ТаблицаПоУслугам.Итог("НДСВал");
			СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоУслугам(СтруктураШапкиДокумента, Заголовок,СуммаПоУслугам);
			
			Если СтруктураПараметровЗачетАванса = ложь тогда
			   //Отказ = Истина;
			   ТаблицаАвансов = 0;
			Иначе
				//Возвращает сумму аванса в валюте регламентированного учета
				ДвиженияДляРегистраРасчетовПоПриобретению = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоПриобретению(СтруктураПараметровЗачетАванса,
					СтруктураШапкиДокумента, ТаблицаПоУслугам);
				ТаблицаАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса,
					ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоПриобретению);
			КонецЕсли;

			Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
					СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
				Конецесли;
				БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса,
					мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ);
			Конецесли;
		КонецЕсли; 
	
		Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период       = Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Вознаграждение комиссионера";
			Проводка.Сумма        = СтрокаТаблицы.СуммаБезНДС + ?(СтруктураШапкиДокумента.НДСВключенВСтоимость,СтрокаТаблицы.НДС,0);

			Проводка.СчетДт       = СтрокаТаблицы.СчетЗатрат;
			ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтруктураШапкиДокумента.СчетУчетаЗатрат);
			Если ПроизводственныеРасходы Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизации);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтруктураШапкиДокумента.СтатьяЗатрат);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.Субконто3);
			КонецЕсли;

			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);

			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаБезНДСВал;
			КонецЕсли;

			// Проводки по НДС
			Если СтруктураШапкиДокумента.УчитыватьНДС И не СтрокаТаблицы.НДС = 0 Тогда

				НалоговыйАгентЗаСчетСобственныхСредств = УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(СтрокаТаблицы.ВидЦенности);
				
				Если НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость тогда
					
					Проводка = ПроводкиБУ.Добавить();

					Проводка.Период      = ДатаДока;

					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "Вознаграждение комиссионера";

					Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СФПолученные",    СтруктураШапкиДокумента.Ссылка,Истина, Заголовок);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент,Истина, Заголовок);

					Если Не НалоговыйАгентЗаСчетСобственныхСредств 
						Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
						
						Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
						Если Проводка.СчетКт.Валютный Тогда
							Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
							Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.НДСВал;
						КонецЕсли;
						
					Иначе
						
						Проводка.СчетКт =  ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
						
					КонецЕсли;
					
					Проводка.Сумма       = СтрокаТаблицы.НДС;
					
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.УчетАгентскогоНДС
					И (Не НалоговыйАгентЗаСчетСобственныхСредств 
					Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда

					// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
					Проводка2 = ПроводкиБУ.Добавить();

					Проводка2.Период          = ДатаДока;
					Проводка2.Организация     = СтруктураШапкиДокумента.Организация;
					Проводка2.Содержание      = "Начислен НДС в качестве налогового агента";

					Проводка2.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовЗаПосредническиеУслуги;
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					Если Проводка2.СчетДт.Валютный Тогда
						Проводка2.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка2.ВалютнаяСуммаДт = СтрокаТаблицы.НДСВал;
					КонецЕсли;
					
					Если Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
						Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.НДС;
						БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
					Иначе
						Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
						БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
						БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					КонецЕсли;	
					
					Проводка2.Сумма       = СтрокаТаблицы.НДС;

				КонецЕсли;
				
			КонецЕсли; // Проводки по НДС

			// Налоговый учет
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда

				Проводка = ПроводкиНУ.Добавить();

				Проводка.Период       = ДатаДока;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = "Вознаграждение комиссионера";
				Проводка.Сумма        = СтрокаТаблицы.СуммаБезНДС + ?(СтруктураШапкиДокумента.НДСВключенВСтоимость,СтрокаТаблицы.НДС,0);

				Проводка.СчетДт       = СтрокаТаблицы.СчетЗатратНУ;
				ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтруктураШапкиДокумента.СчетУчетаЗатратНУ, "Налоговый");
				Если ПроизводственныеРасходыНУ Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтруктураШапкиДокумента.СтатьяЗатрат);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоНУ1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоНУ2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоНУ3);
				КонецЕсли;

				Проводка.СчетКт       = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"УсловияПоступленияИВыбытия",Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
		
	//Отражение взаиморасчетов по реализации товаров
	// Проводки по взаиморасчетам
	СуммаПоТоварам = ТаблицаПоТоварам.Итог("СуммаБезНДСВал") + ТаблицаПоТоварам.Итог("НДСВал");
	СтруктураПараметровЗачетАванса = ПодготовкаСтруктурыПараметровДляЗачетаАвансаПоТоварам(СтруктураШапкиДокумента, Заголовок, СуммаПоТоварам, ТаблицаПоВзаиморасчетам);
	
	Если СтруктураПараметровЗачетАванса = Ложь тогда
		Отказ       = Истина;
		СуммаАванса = 0;
	Иначе
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураПараметровЗачетАванса, СтруктураШапкиДокумента, ТаблицаПоТоварам);
		СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, ПроводкиБУ, мВалютаРегламентированногоУчета, РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации);
	КонецЕсли;// Проводки по взаиморасчетам
	
	БухгалтерскийУчет.ЗаписатьДвижения(Движения);
	
	Если не ((СтруктураПараметровЗачетАванса = Ложь) или НЕ ЗначениеЗаполнено(СтруктураПараметровЗачетАванса)) тогда
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
		Конецесли;
		БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса, 
			мВалютаРегламентированногоУчета, РежимПроведения, ПроводкиБУ, ЭтотОбъект, Отказ, , Истина);
		БухгалтерскийУчет.ЗаписатьДвижения(Движения);
	Конецесли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

Процедура ДвиженияПоРегистрамУСНРегл(РежимПроведения, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		Возврат;
	КонецЕсли;
	
	//Отразим услугу
	НаборДвижений = Движения.РасходыПриУСН;
		
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	СтрокаДвижений = ТаблицаДвижений.Добавить();
	СтрокаДвижений.Валюта 				= СтруктураШапкиДокумента.ВалютаДокумента;
	СтрокаДвижений.ДоговорКонтрагента 	= СтруктураШапкиДокумента.ДоговорКонтрагента;
	СтрокаДвижений.СтатусыПартийУСН		= Перечисления.СтатусыПартийУСН.Купленные;
	СтрокаДвижений.ВидРасхода 			= Перечисления.ВидыРасходовУСН.Услуги;
	СтрокаДвижений.ОтражениеВУСН 		= Перечисления.ОтражениеВУСН.НеПринимаются;
	СтрокаДвижений.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал");
	ВыделятьНДСУСН = ?(Отказ, Истина, УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	Если ВыделятьНДСУСН Тогда
		СтрокаДвижений.Сумма = СуммаВознаграждения - СуммаНДСВознаграждения;
	Иначе
		СтрокаДвижений.Сумма = СуммаВознаграждения;
	КонецЕсли;
	СтрокаДвижений.НДС = СуммаНДСВознаграждения;
	
	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Дата, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.РасходыПриУСН.ВыполнитьПриход();
		НаборДвижений.Записать(Истина);
	КонецЕсли;
	
	НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
		
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей)

	СтруктураПолей.Вставить("СчетУчетаБУ"  ,  "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНУ"  ,  "СчетУчетаНУ");
	СтруктураПолей.Вставить("СчетДоходовБУ",  "СчетДоходовБУ");
	СтруктураПолей.Вставить("СубконтоБУ"   ,  "СубконтоБУ");
	СтруктураПолей.Вставить("СчетДоходовНУ",  "СчетДоходовНУ");
	СтруктураПолей.Вставить("СубконтоНУ"   ,  "СубконтоНУ");
	СтруктураПолей.Вставить("СчетРасходовБУ", "СчетРасходовБУ");
	СтруктураПолей.Вставить("СчетРасходовНУ", "СчетРасходовНУ");
	СтруктураПолей.Вставить("ПереданныеПринятыеБУ", "ПереданныеПринятыеБУ");
	СтруктураПолей.Вставить("ПереданныеПринятыеНУ", "ПереданныеПринятыеНУ");

КонецПроцедуры // ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл()


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мСтруктураПараметровДляДокументовРасчетов = Новый Структура;
мСтруктураПараметровДляДокументовРасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары"));
мСтруктураПараметровДляДокументовРасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровДляДокументовРасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Ложь);
мСтруктураПараметровДляДокументовРасчетов.Вставить("ИмяЗаказаВТабличныхЧастях");

мСтруктураПараметровДляПолученияДоговора = Новый Структура();
мСписокДопустимыхВидовДоговоров = Новый СписокЗначений();
мСписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
мСтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", мСписокДопустимыхВидовДоговоров);

мМассивСформированныхСФ = Новый Массив;
