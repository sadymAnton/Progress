Перем мУдалятьДвижения;

Перем мИспользоватьТару Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем КодОперацииПартииТоваров;
Перем УчетнаяПолитикаРегл;
Перем мПараметрыСвязиСтрокТЧ Экспорт;
Перем мУказаниеПроектовВТабличнойЧастиДокументов Экспорт;

Перем мСтруктураПараметровВзаиморасчетов Экспорт;

Перем мИспользоватьРасширеннуюАналитику Экспорт;
Перем мДатаНачалаИспользованияРасширеннойАналитики Экспорт;

// Хранит структуру, содержащую параметры для определения договора, доступного в данном документе:
//    список допустимых видов договоров;
//    список допустимых способов ведения взаиморасчетов.
Перем мСтруктураПараметровДляПолученияДоговора Экспорт;

// Хранит ссылку на исходный корректируемый документ
Перем мДокументПоступленияСсылка Экспорт;

Перем мУказаниеСкладовВТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура заполняет склад в строке табличной части товары
//
Процедура ЗаполнитьСкладВСтрокеТабличнойЧастиТовары(СтрокаТабличнойЧасти) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
		Если ЗначениеЗаполнено(Склад) Тогда
			// Заполним склад из шапки
			СтрокаТабличнойЧасти.Склад = Склад;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику.Склад) Тогда
			// Заполним склад из заказа поставщику
			СтрокаТабличнойЧасти.Склад = СтрокаТабличнойЧасти.ЗаказПоставщику.Склад;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Очищает ненужные строки табличных частей
//
Процедура ОчиститьНенужныеТабличныеЧасти() Экспорт
	
	// Если договор с комитентом или для основания не поддерживается корректировка услуг,
	// то надо очистить ТЧ "Услуги".
	Если Услуги.Количество() > 0 И НЕ ВозможнаКорректировкаУслуг() Тогда
		Услуги.Очистить();
	КонецЕсли;
	
КонецПроцедуры // ОчиститьНенужныеТабличныеЧасти()

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти(ИмяТабЧасти, СтрокаТЧ, ЭтотОбъект, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

// Возвращает структуру со значениями по-умолчанию счетов учета шапки.
//
Функция ЗаполнитьСтруктуруСчетовУчетаШапки(ЗаполнятьБУ=Истина, ЗаполнятьНУ=Истина) Экспорт
 
	СтруктураСчетов = Новый Структура();
	
	Если ЗаполнятьБУ и ОтражатьВБухгалтерскомУчете Тогда
	
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетовСКомитентом);
		Иначе
			СтруктураСчетов.Вставить("СчетУчетаРасчетовСКонтрагентом",	СчетаУчета.СчетРасчетов);
		КонецЕсли;
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоАвансам",		СчетаУчета.СчетАвансов);
		СтруктураСчетов.Вставить("СчетУчетаРасчетовПоТаре",			СчетаУчета.СчетУчетаТары);
		
	КонецЕсли;
		
	Возврат СтруктураСчетов;
	
КонецФункции

// Функция возвращает последний кооректирующий документ
//
// Возвращаемое значение:
// 	Ссылка на документ КорректировкаПоступления
//
Функция ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаПоступления.Ссылка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	КорректировкаПоступления.ИсправляемыйДокументПоступления = &Ссылка
		|	И КорректировкаПоступления.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|	И КорректировкаПоступления.Ссылка <> &ЭтотДокумент
		|	И КорректировкаПоступления.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаПоступления.Дата УБЫВ";
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат ДокументСсылка;
	КонецЕсли;
		
КонецФункции

// Функция возвращает признак возможности корректировки по видам учета
// 
// Возвращаемое значение:
// 	Булево
Функция ДоступнаКорректировкаБУиНУ() Экспорт
	
	// Корректировка по учетам доступна только только для некоторых видов документов
	Возврат ((ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
				И ДокументПоступления.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
				И ЗначениеЗаполнено(ДокументПоступления.ДоговорКонтрагента))
			ИЛИ (ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") 
				И ДокументПоступления.КорректироватьБУиНУ));
			
КонецФункции
			
// Функция возвращает признак возможности признавать или зачитывать аванс
// 
// Возвращаемое значение:
// 	Булево
Функция ДоступноПризнаватьЗачитыватьАванс() Экспорт
	
	// Возможность признавать или зачитывать аванс недоступна 
	// для договоров с ведением взаиморасчетов по расчетным документам с контрагентами
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат НЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	Иначе
		Возврат Ложь;
	КонецЕсли;
			
КонецФункции

// Процедура заполняет значение реквизитов до корректировки
//
Процедура ОбработатьСуммыДоКорректировки()
	
	ИсправлениеКорректировки = ЗначениеЗаполнено(ИсправляемыйДокументПоступления) 
							И (ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")) 
							И (ИсправляемыйДокументПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("КоличествоДоИзменения"), 	"КоличествоДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("ЦенаДоИзменения"), 		"ЦенаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаДоИзменения"), 		"СуммаДоКорректировки");
		Услуги.ЗагрузитьКолонку(Услуги.ВыгрузитьКолонку("СуммаНДСДоИзменения"), 	"СуммаНДСДоКорректировки");
		
	ИначеЕсли Не ИсправлениеКорректировки Тогда
		
		Для Каждого СтрокаТЧ из Товары Цикл
			СтрокаТЧ.КоличествоДоКорректировки = 0;
			СтрокаТЧ.ЦенаДоКорректировки = 0;
			СтрокаТЧ.СуммаДоКорректировки = 0;
			СтрокаТЧ.СуммаНДСДоКорректировки = 0;
		КонецЦикла;
		Для Каждого СтрокаТЧ из Услуги Цикл
			СтрокаТЧ.КоличествоДоКорректировки = 0;
			СтрокаТЧ.ЦенаДоКорректировки = 0;
			СтрокаТЧ.СуммаДоКорректировки = 0;
			СтрокаТЧ.СуммаНДСДоКорректировки = 0;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет табличные части документа по основанию
//
Процедура ЗаполнитьПоДокументу() Экспорт
	
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		ИЛИ ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ЗаполнитьПоПоступлению();
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		ЗаполнитьПоПоступлениюВНТТ();
	ИначеЕсли ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ЗаполнитьПоДопРасходам();
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает вид операции исходного корректируемого документа
//
Функция ПолучитьВидОперацииОснования() Экспорт
	
	Если ЗначениеЗаполнено(мДокументПоступленияСсылка) Тогда
		ВидОперацииДокумента = ОбщегоНазначения.ПолучитьРеквизитШапки("ВидОперации", 
			мДокументПоступленияСсылка, 
			мДокументПоступленияСсылка.Метаданные());
	Иначе
		ВидОперацииДокумента = Неопределено;
	КонецЕсли;
	
	Возврат ВидОперацииДокумента;
	
КонецФункции

// Функция возвращает доступные типы номенклатуры в зависимости от корректируемого документа
//
Функция ПолучитьОписаниеТипаНоменклатурыПоОснованию() Экспорт
	
	МассивТипов = Новый Массив();
	
	Если ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
		ИЛИ ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") 
		ИЛИ ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ГТДИмпорт") 
		ИЛИ ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") 
		ИЛИ ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки")
		ИЛИ ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		
		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		
	ИначеЕсли ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		
		МассивТипов.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
		
	ИначеЕсли ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		Если Не КорректироватьБУиНУ Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка.ОбъектыСтроительства"));
		КонецЕсли;
		
	Иначе
		
		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		МассивТипов.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ОбъектыСтроительства"));
	
	КонецЕсли;
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Функция ПолучитьСвойстваСкладаВТабличнойЧасти() Экспорт
	
	СвойстваСклада = Новый Структура;
	
	СвойстваСклада.Вставить("ВидимостьСклада", 				КорректироватьБУиНУ);
	СвойстваСклада.Вставить("ОбязательноеЗаполнениеСклада", СвойстваСклада.ВидимостьСклада);
	
	Возврат СвойстваСклада;
	
КонецФункции

Функция ПолучитьСвойстваЗаказаПоставщикуВТабличнойЧасти() Экспорт
	
	ВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	СвойстваЗаказа 		  = Новый Структура;
	
	// Заказ в ТЧ виден, если взаиморасчеты по договору ведутся по заказам или по договору в целом (не ведутся по счетам)
	// Заполнение заказа обязательно, если взаиморасчеты по договору ведутся по заказам
	СвойстваЗаказа.Вставить("ВидимостьЗаказа",
		ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам И КорректироватьБУиНУ);
	СвойстваЗаказа.Вставить("ОбязательноеЗаполнениеЗаказа",
		СвойстваЗаказа.ВидимостьЗаказа И ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	Возврат СвойстваЗаказа;
	
КонецФункции

Функция ВозможнаКорректировкаУслуг() Экспорт
	
	Если НЕ ЗначениеЗаполнено(мДокументПоступленияСсылка)
	 ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.СчетФактураПолученный")
	 ИЛИ ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") 
	 ИЛИ ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ОтражениеПоступленияТоваровИУслугНДС") Тогда
		Возврат Истина;
 	КонецЕсли;
 	
	Возврат ОбщегоНазначения.НаличиеТабличнойЧастиУДокумента(мДокументПоступленияСсылка.Метаданные().Имя, "Услуги");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧИВАЮЩИЕ ЗАПОЛНЕНИЯ ДОКУМЕНТА

// Процедура заполянет шапку документа по документу поступления 
//
// Параметры:
// 	 ЗаполнятьРедактируемыеРеквизиты - Булево - Признак того, что нужно перезаполнить реквизиты шапки, редактируемые в форме
//
Процедура ЗаполнитьСвойстваШапки(ЗаполнятьРедактируемыеРеквизиты = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	// Перед заполнением сохраним реквизиты шапки документа, не заполняемые из основания
	НезаполняемыеРеквизиты = "Дата, Номер, ПометкаУдаления, Проведен, ДокументПоступления, ВидОперации,
		|НомерВходящегоДокумента, ДатаВходящегоДокумента, КорректироватьБУиНУ, Ответственный, Комментарий,
		|ПризнаватьЗачитыватьАванс, КорректироватьНДС";
		
	Если НЕ ЗаполнятьРедактируемыеРеквизиты Тогда
		НезаполняемыеРеквизиты = НезаполняемыеРеквизиты + ", БанковскийСчетКонтрагента, Грузоотправитель, Грузополучатель, 
			|ВосстановитьНДС, СтатьяПрочихДоходовИРасходов, СпособОтраженияУслугТекущегоГода";
	КонецЕсли;
	
	СтруктураНезаполняемыеРеквизиты = Новый Структура(НезаполняемыеРеквизиты);
	ЗаполнитьЗначенияСвойств(СтруктураНезаполняемыеРеквизиты, ЭтотОбъект);
	
	// Очистим реквизиты шапки документа
	Для каждого Реквизит из ЭтотОбъект.Метаданные().Реквизиты Цикл
		Если НЕ СтруктураНезаполняемыеРеквизиты.Свойство(Реквизит.Имя) Тогда
			ЭтотОбъект[Реквизит.Имя] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Получим ссылку на исходный исправляемый документ поступления
	мДокументПоступленияСсылка = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	
	Если ЗначениеЗаполнено(мДокументПоступленияСсылка) Тогда
		
		// Заполним основные реквизиты шапки по основанию
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, мДокументПоступленияСсылка);
		
		Если Не ЗначениеЗаполнено(КурсВзаиморасчетов) ИЛИ Не ЗначениеЗаполнено(КратностьВзаиморасчетов) Тогда
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсВзаиморасчетов 			 = СтруктураКурсаВзаиморасчетов.Курс;
			КратностьВзаиморасчетов 	 = СтруктураКурсаВзаиморасчетов.Кратность;
		КонецЕсли;
		
		// Заполним реквизиты учета НДС в случае, если таких реквизитов нет в документе основания
		МетаданныеДокументаОснования = мДокументПоступленияСсылка.Метаданные();
		Если МетаданныеДокументаОснования.Реквизиты.Найти("УчитыватьНДС") = Неопределено Тогда
			УчитыватьНДС = Истина;
		КонецЕсли;
		Если МетаданныеДокументаОснования.Реквизиты.Найти("СуммаВключаетНДС") = Неопределено Тогда
			СуммаВключаетНДС = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Перезаполним шапку по документу поступления
	Если КорректироватьБУиНУ Тогда 
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументПоступления);
		
		Если ТипЗнч(СтруктураНезаполняемыеРеквизиты.ДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			СкладОрдер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументПоступления, "СкладОрдер");
			Если СтруктураНезаполняемыеРеквизиты.ДокументПоступления.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
				Склад = СкладОрдер.Склад;
			Иначе
				Склад = СкладОрдер;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Восстановим незаполняемые реквизиты
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНезаполняемыеРеквизиты);
	
	ДокументПоступленияСсылка = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;
		
	Если ТипЗнч(УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь)) = Тип("ДокументСсылка.КорректировкаПоступления") 
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		КорректировкаКорректировочногоСчетаФактуры = Истина;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
		Иначе	
			ИсправляемыйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
		КонецЕсли;	
	Иначе
		ИсправляемыйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
	КонецЕсли;	
	
	// Цены в документе всегда указываем вручную
	ТипЦен = Неопределено;
	
КонецПроцедуры

// Процедура заполняет табличные части "Товары" и "Услуги"
// по данным документов: ПоступлениеТоваровУслуг, Корректировка поступления
//
Процедура ЗаполнитьПоПоступлению()
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументПоступления.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.ОтражениеВУСН,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.Заказ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНУ,
	|	ПоступлениеТоваровУслугТовары.ЗаказПоставщику,
	|	ПоступлениеТоваровУслугТовары.КлючСвязи,";
	
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ПоступлениеТоваровУслугТовары.Склад,
		|	ПоступлениеТоваровУслугТовары.ДокументПартии,
		|	ПоступлениеТоваровУслугТовары.КоличествоДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.ЦенаДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.СуммаДоКорректировки,
		|	ПоступлениеТоваровУслугТовары.СуммаНДСДоКорректировки,";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровУслугТовары.Ссылка.ВидПоступления = ЗНАЧЕНИЕ(Перечисление.ВидыПоступленияТоваров.НаСклад)
		|			ТОГДА ПоступлениеТоваровУслугТовары.Склад
		|		ИНАЧЕ ПоступлениеТоваровУслугТовары.ПриходныйОрдер.Склад
		|	КОНЕЦ КАК Склад,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ПоступлениеТоваровУслугТовары.Номенклатура					КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатурыДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры				КАК СерияНоменклатурыДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Количество					КАК КоличествоДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Цена							КАК ЦенаДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС						КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС						КАК СуммаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Сумма							КАК СуммаДоИзменения,
	|	ИСТИНА 														КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ."+ИмяВидаДокумента+".Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|/////////////////////////////////////////////////////////////////////////////
	|;
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Содержание,
	|	ПоступлениеТоваровУслугУслуги.Заказ,
	|	ПоступлениеТоваровУслугУслуги.Количество,
	|	ПоступлениеТоваровУслугУслуги.Цена,
	|	ПоступлениеТоваровУслугУслуги.Сумма,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС,
	|	ПоступлениеТоваровУслугУслуги.НоменклатурнаяГруппа,
	//// <- Шевченков №53448 20160616
	////|	ПоступлениеТоваровУслугУслуги.Подразделение,
	//|	ВЫБОР 
	//|		КОГДА ПоступлениеТоваровУслугУслуги.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	//|			ТОГДА СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение
	//|		ИНАЧЕ
	//|			ПоступлениеТоваровУслугУслуги.Подразделение
	//|	КОНЕЦ КАК Подразделение,	
	//// ->
	|	ПоступлениеТоваровУслугУслуги.ПодразделениеОрганизации,
	|	ПоступлениеТоваровУслугУслуги.СтатьяЗатрат,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	|	ПоступлениеТоваровУслугУслуги.Субконто1,
	|	ПоступлениеТоваровУслугУслуги.Субконто2,
	|	ПоступлениеТоваровУслугУслуги.Субконто3,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ,
	|	ПоступлениеТоваровУслугУслуги.СубконтоНУ1,
	|	ПоступлениеТоваровУслугУслуги.СубконтоНУ2,
	|	ПоступлениеТоваровУслугУслуги.СубконтоНУ3,
	|	ПоступлениеТоваровУслугУслуги.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугУслуги.Продукция,
	|	ПоступлениеТоваровУслугУслуги.ХарактеристикаПродукции,
	|	ПоступлениеТоваровУслугУслуги.СерияПродукции,
	|	ПоступлениеТоваровУслугУслуги.ОбъектСтроительства,
	|	ПоступлениеТоваровУслугУслуги.ОтражениеВУСН,
	|	ПоступлениеТоваровУслугУслуги.Проект,
	|	ПоступлениеТоваровУслугУслуги.ЗаказПоставщику,
	|	ПоступлениеТоваровУслугУслуги.СпособРаспределенияЗатратНаВыпуск,
	|	ПоступлениеТоваровУслугУслуги.СпособСтроительства,";
	
	Если ИмяВидаДокумента = "КорректировкаПоступления" Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ПоступлениеТоваровУслугУслуги.КоличествоДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.ЦенаДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.СуммаДоКорректировки,
		|	ПоступлениеТоваровУслугУслуги.СуммаНДСДоКорректировки,";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ПоступлениеТоваровУслугУслуги.Номенклатура				КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Содержание				КАК СодержаниеДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Количество				КАК КоличествоДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Цена						КАК ЦенаДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Сумма						КАК СуммаДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС					КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС					КАК СуммаНДСДоИзменения,
	|	ИСТИНА 													КАК ЕстьВДокументеПоступления
	|
	|ИЗ
	|	Документ." + ИмяВидаДокумента + ".Услуги КАК ПоступлениеТоваровУслугУслуги
	//// <- Шевченков №53448 20160616
	//|	ЛЕВОЕ СОЕДИНЕНИЕ
	//|		РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	//|			ПО ПоступлениеТоваровУслугУслуги.ПодразделениеОрганизации = СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации	
	//// ->
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	Результат = Запрос.ВыполнитьПакет();
	
	Товары.Загрузить(Результат[0].Выгрузить());
	Услуги.Загрузить(Результат[1].Выгрузить());
	СерийныеНомера.Загрузить(ДокументПоступления.СерийныеНомера.Выгрузить());
	
КонецПроцедуры

// Процедура заполняет табличную часть "Товары" 
// по данным документов: ПоступлениеТоваровУслугВНТТ
//
Процедура ЗаполнитьПоПоступлениюВНТТ()
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.КоличествоМест,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
	|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмеренияМест,
	|	ПоступлениеТоваровУслугТовары.Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ПоступлениеТоваровУслугТовары.Цена,
	|	ПоступлениеТоваровУслугТовары.ОтражениеВУСН,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры,
	|	ПоступлениеТоваровУслугТовары.Заказ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаБУ,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугТовары.СчетУчетаНУ,
	|	ПоступлениеТоваровУслугТовары.ЗаказПоставщику,
	|	ПоступлениеТоваровУслугТовары.КлючСвязи,
	|	ПоступлениеТоваровУслугТовары.Ссылка.Склад 					КАК Склад,
	|	ПоступлениеТоваровУслугТовары.Номенклатура					КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугТовары.ХарактеристикаНоменклатуры	КАК ХарактеристикаНоменклатурыДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СерияНоменклатуры				КАК СерияНоменклатурыДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Количество					КАК КоличествоДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Цена							КАК ЦенаДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС						КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.СуммаНДС						КАК СуммаНДСДоИзменения,
	|	ПоступлениеТоваровУслугТовары.Сумма							КАК СуммаДоИзменения,
	|	ИСТИНА 														КАК ЕстьВДокументеПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНТТ.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|/////////////////////////////////////////////////////////////////////////////
	|;
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугУслуги.Номенклатура,
	|	ПоступлениеТоваровУслугУслуги.Содержание,
	|	ПоступлениеТоваровУслугУслуги.Количество,
	|	ПоступлениеТоваровУслугУслуги.Цена,
	|	ПоступлениеТоваровУслугУслуги.Сумма,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС,
	|	ПоступлениеТоваровУслугУслуги.НоменклатурнаяГруппа,
	|	ПоступлениеТоваровУслугУслуги.Подразделение,
	|	ПоступлениеТоваровУслугУслуги.ПодразделениеОрганизации,
	|	ПоступлениеТоваровУслугУслуги.СтатьяЗатрат,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатрат,
	|	ПоступлениеТоваровУслугУслуги.Субконто1,
	|	ПоступлениеТоваровУслугУслуги.Субконто2,
	|	ПоступлениеТоваровУслугУслуги.Субконто3,
	|	ПоступлениеТоваровУслугУслуги.СчетЗатратНУ,
	|	ПоступлениеТоваровУслугУслуги.СубконтоНУ1,
	|	ПоступлениеТоваровУслугУслуги.СубконтоНУ2,
	|	ПоступлениеТоваровУслугУслуги.СубконтоНУ3,
	|	ПоступлениеТоваровУслугУслуги.СчетУчетаНДС,
	|	ПоступлениеТоваровУслугУслуги.Продукция,
	|	ПоступлениеТоваровУслугУслуги.ХарактеристикаПродукции,
	|	ПоступлениеТоваровУслугУслуги.СерияПродукции,
	|	ПоступлениеТоваровУслугУслуги.ОбъектСтроительства,
	|	ПоступлениеТоваровУслугУслуги.ОтражениеВУСН,
	|	ПоступлениеТоваровУслугУслуги.Проект,
	|	ПоступлениеТоваровУслугУслуги.ЗаказПоставщику,
	|	ПоступлениеТоваровУслугУслуги.СпособРаспределенияЗатратНаВыпуск,
	|	ПоступлениеТоваровУслугУслуги.СпособСтроительства,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура				КАК НоменклатураДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Содержание				КАК СодержаниеДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Количество				КАК КоличествоДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Цена						КАК ЦенаДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.Сумма						КАК СуммаДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.СтавкаНДС					КАК СтавкаНДСДоИзменения,
	|	ПоступлениеТоваровУслугУслуги.СуммаНДС					КАК СуммаНДСДоИзменения,
	|	ИСТИНА 													КАК ЕстьВДокументеПоступления
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслугВНТТ.Услуги КАК ПоступлениеТоваровУслугУслуги
	|ГДЕ
	|	ПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	Результат = Запрос.ВыполнитьПакет();
	
	Товары.Загрузить(Результат[0].Выгрузить());
	Услуги.Загрузить(Результат[1].Выгрузить());
	СерийныеНомера.Загрузить(ДокументПоступления.СерийныеНомера.Выгрузить());
	
КонецПроцедуры

// Процедура заполняет табличную часть "Товары" 
// по данным документов: ПоступлениеДопРасходов, Корректировка поступления
//
Процедура ЗаполнитьПоДопРасходам()
	
	Если НЕ ЗначениеЗаполнено(ДокументПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	Услуги.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоступлениеДопРасходовТовары.НомерСтроки,
	|	ПоступлениеДопРасходовТовары.Номенклатура,
	|	ПоступлениеДопРасходовТовары.ЕдиницаИзмерения,
	|	ПоступлениеДопРасходовТовары.Коэффициент,
	|	ПоступлениеДопРасходовТовары.Количество,
	|	ПоступлениеДопРасходовТовары.СуммаНДС,
	|	ПоступлениеДопРасходовТовары.СуммаТовара,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ПоступлениеДопРасходовТовары.ЕдиницаИзмерения.Вес, 0) 
	|		* ПоступлениеДопРасходовТовары.Количество 
	|		КАК Число(15,3)) КАК ВесТовара,
	|	ПоступлениеДопРасходовТовары.Количество КАК КоличествоТовара,
	|	ПоступлениеДопРасходовТовары.Сумма,
	|	ПоступлениеДопРасходовТовары.ХарактеристикаНоменклатуры,
	|	ПоступлениеДопРасходовТовары.СерияНоменклатуры,
	|	ВЫБОР 
	|		КОГДА ДокументПартии ССЫЛКА Документ.ОприходованиеТоваров ИЛИ ДокументПартии ССЫЛКА Документ.ПоступлениеТоваровУслугВНТТ 
	|			ТОГДА ДокументПартии.Склад
	|		КОГДА ДокументПартии.СкладОрдер ССЫЛКА Документ.ПриходныйОрдерНаТовары 
	|			ТОГДА ДокументПартии.СкладОрдер.Склад
	|		ИНАЧЕ ДокументПартии.СкладОрдер 
	|	КОНЕЦ КАК Склад,
	|	ПоступлениеДопРасходовТовары.ЗаказПокупателя,
	|	ПоступлениеДопРасходовТовары.ДокументПартии,
	|	ПоступлениеДопРасходовТовары.СчетУчетаБУ,
	|	ПоступлениеДопРасходовТовары.СчетУчетаНДС,
	|	ПоступлениеДопРасходовТовары.СчетУчетаНУ,
	|	ПоступлениеДопРасходовТовары.СтатьяЗатратНУ,
	|	ПоступлениеДопРасходовТовары.ОтражениеВУСН,
	|	ПоступлениеДопРасходовТовары.ПодразделениеОрганизации,
	|	ПоступлениеДопРасходовТовары.Ссылка.СтавкаНДС,
	|	ПоступлениеДопРасходовТовары.Количество 		КАК КоличествоДоИзменения,
	|	ПоступлениеДопРасходовТовары.Ссылка.СтавкаНДС	КАК СтавкаНДСДоИзменения,
	|	ПоступлениеДопРасходовТовары.СуммаНДС 			КАК СуммаНДСДоИзменения,
	|	ПоступлениеДопРасходовТовары.Сумма				КАК СуммаДоИзменения,
	|	ИСТИНА 											КАК ЕстьВДокументеПоступления
	|	
	|ИЗ
	|	Документ.ПоступлениеДопРасходов.Товары КАК ПоступлениеДопРасходовТовары
	|ГДЕ
	|	ПоступлениеДопРасходовТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	Если ДокументПоступления.Сумма <> 0 тогда
		
		СуммаКРаспределению = ДокументПоступления.Сумма;
		НДСКРаспределению   = ДокументПоступления.СуммаНДС;
		
		// Определим базис распределения
		КолонкаБазиса = "";
		Если ДокументПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству Тогда
			КолонкаБазиса = "КоличествоТовара";
		ИначеЕсли ДокументПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
			КолонкаБазиса = "СуммаТовара";
		ИначеЕсли ДокументПоступления.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
			КолонкаБазиса = "ВесТовара";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КолонкаБазиса) тогда
			//Не выбран способ распределения
			Возврат;
		ИначеЕсли ТаблицаТоваров.Итог(КолонкаБазиса) = 0 тогда 
			//Базис распределения - пустая колонка!
			Возврат;
		КонецЕсли;
		
		БазисРаспределения = ТаблицаТоваров.ВыгрузитьКолонку(КолонкаБазиса);
		ИтогРаспределения  = ОбщегоНазначения.РаспределитьПропорционально(СуммаКРаспределению,БазисРаспределения);
		
		Если НЕ (НДСКРаспределению = 0) тогда
			ИтогРаспределенияНДС = ОбщегоНазначения.РаспределитьПропорционально(НДСКРаспределению,БазисРаспределения);
		КонецЕсли;
		
		Для НомерСтрокиТаблицы = 0 по ИтогРаспределения.ВГраница() цикл
			Если не ИтогРаспределения[НомерСтрокиТаблицы] = 0 тогда
				ТаблицаТоваров[НомерСтрокиТаблицы].Сумма  = ТаблицаТоваров[НомерСтрокиТаблицы].Сумма + ИтогРаспределения[НомерСтрокиТаблицы];
				ТаблицаТоваров[НомерСтрокиТаблицы].СуммаДоИзменения = ТаблицаТоваров[НомерСтрокиТаблицы].Сумма;
			КонецЕсли;
			Если Не(НДСКРаспределению = 0) тогда
				Если НЕ ИтогРаспределенияНДС[НомерСтрокиТаблицы] = 0 тогда
					ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС = ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС + ИтогРаспределенияНДС[НомерСтрокиТаблицы];
					ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДСДоИзменения = ТаблицаТоваров[НомерСтрокиТаблицы].СуммаНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Товары.Загрузить(ТаблицаТоваров);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента)
	мУчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата,истина);
    Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
	КонецЕсли;

	Если НЕ (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете
		ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете) Тогда
		
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация,истина);
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Функция возвращает фрагмент таблицы значений, состоящий из строк, 
// в которых заполнено значение хотя бы в одной из проверяемых колонок
// 
// Параметры:
// 	ТаблицаЗначений - ТаблицаЗначений -  таблица, из которой необходимо отобрать строки
// 	СписокКолонокДляПроверки - Строка - Список колонок для проверки заполнения значений
// 
// Возвращаемое значение:
// 	Результат - ТаблицаЗначений - результат отбора
//
Функция ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаЗначений, СписокКолонокДляПроверки)
	
	Результат = ТаблицаЗначений.СкопироватьКолонки();
	
	КолонкиДляПроверки = Новый Структура(СписокКолонокДляПроверки);
	
	Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
		Для каждого Колонка из КолонкиДляПроверки Цикл
			Если ТаблицаЗначений.Колонки.Найти(Колонка.Ключ) <> Неопределено 
				И ЗначениеЗаполнено(СтрокаТаблицы[Колонка.Ключ]) Тогда
				
				// Значение в колонке заполнено. Копируем строку в таблицу Результат
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				  
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуТоваровТекущегоПериода(СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Результат = ТаблицаПоТоварам.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицы из ТаблицаПоТоварам Цикл
		
		КоличествоДоИзменения	= СтрокаТаблицы.КоличествоДоИзменения;
		КоличествоНачалоМесяца	= Макс(КоличествоДоИзменения - СтрокаТаблицы.РеализованоВПрошлыеМесяцы - СтрокаТаблицы.РеализованоВПрошлыеГоды, 0);
		К1 = ?(СтрокаТаблицы.Количество <> 0 ИЛИ НачалоМесяца(СтруктураШапкиДокумента.ДокументПоступленияДата) = НачалоМесяца(СтруктураШапкиДокумента.Дата), 1, ?(КоличествоДоИзменения <> 0, Мин(КоличествоНачалоМесяца / КоличествоДоИзменения, 1), 1));
		Если К1 > 0 Тогда
			// Значение в колонке заполнено. Копируем строку в таблицу Результат
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если К1 <> 1 Тогда 
				НоваяСтрока.НДС 				= Окр(К1*НоваяСтрока.НДС,2,1);
				НоваяСтрока.НДСВал              = Окр(К1*НоваяСтрока.НДСВал,2,1);
				НоваяСтрока.НДСУпр              = Окр(К1*НоваяСтрока.НДСУпр,2,1);
				НоваяСтрока.ПроводкаСумма       = Окр(К1*НоваяСтрока.ПроводкаСумма,2,1);
				НоваяСтрока.ПроводкаСуммаНДС    = Окр(К1*НоваяСтрока.ПроводкаСуммаНДС,2,1);
				НоваяСтрока.Стоимость           = Окр(К1*НоваяСтрока.Стоимость,2,1);
				НоваяСтрока.Сумма               = Окр(К1*НоваяСтрока.Сумма,2,1);
				НоваяСтрока.СуммаБУ             = Окр(К1*НоваяСтрока.СуммаБУ,2,1);
				НоваяСтрока.СуммаБУБезНДС       = Окр(К1*НоваяСтрока.СуммаБУБезНДС,2,1);
				НоваяСтрока.СуммаБезНДС         = Окр(К1*НоваяСтрока.СуммаБезНДС,2,1);
				НоваяСтрока.СуммаБезНДСВал      = Окр(К1*НоваяСтрока.СуммаБезНДСВал,2,1);
				НоваяСтрока.СуммаВал            = Окр(К1*НоваяСтрока.СуммаВал,2,1);
				НоваяСтрока.СуммаВзаиморасчетов = Окр(К1*НоваяСтрока.СуммаВзаиморасчетов,2,1);
				НоваяСтрока.СуммаПродажная      = Окр(К1*НоваяСтрока.СуммаПродажная,2,1);
				НоваяСтрока.СуммаРегл           = Окр(К1*НоваяСтрока.СуммаРегл,2,1);
				НоваяСтрока.СуммаУпр			= Окр(К1*НоваяСтрока.СуммаУпр,2,1);							
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТаблицуУслугТекущегоПериода(СтруктураШапкиДокумента, ТаблицаПоУслугам)
	
	Если Год(СтруктураШапкиДокумента.ДокументПоступленияДата) = Год(СтруктураШапкиДокумента.Дата) 
		И (Месяц(СтруктураШапкиДокумента.ДокументПоступленияДата) = Месяц(СтруктураШапкиДокумента.Дата) 
			ИЛИ СтруктураШапкиДокумента.СпособОтраженияУслугТекущегоГода = 1) Тогда
		Результат = ТаблицаПоУслугам.Скопировать();
	Иначе
		Результат = ТаблицаПоУслугам.СкопироватьКолонки();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения=неопределено,Отказ=ложь) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьВСтруктуруШапкиСведенияОСчетахРасчетов(ЭтотОбъект, СтруктураШапкиДокумента);
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	// Если есть колонка заказ, то заполнение поля Сделка не обязательно
	ЗаказВТабличнойЧасти = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента, "Поступление");
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"ВедениеВзаиморасчетов", 					"ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"ВалютаВзаиморасчетов", 					"ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"Организация", 								"ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"ВидДоговора", 								"ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"УчетАгентскогоНДС", 						"УчетАгентскогоНДС");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"ВидАгентскогоДоговора", 					"ВидАгентскогоДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"НалоговыйАгентПоОплате", 					"НалоговыйАгентПоОплате");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"РасчетыВУсловныхЕдиницах", 				"РасчетыВУсловныхЕдиницах");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"ВестиПоДокументамРасчетовСКонтрагентом", 	"ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента", 	"КонтролироватьДенежныеСредстваКомитента", 	"КонтролироватьДенежныеСредстваКомитента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация",			"ОтражатьВРегламентированномУчете", 		"ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка",				"ВидОперации", 								"СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка", 				"ВидОперации", 								"СделкаВидОперации");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",		"СписыватьПартииПриПроведенииДокументов", 	"СписыватьПартииПриПроведенииДокументов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика",		"ВестиПартионныйУчетПоСкладам", 			"ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", 		"НеВключатьНДСВСтоимостьПартий", 			"НеВключатьНДСВСтоимостьПартий");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", 		"ВедениеУчетаПоПроектам", 					"ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", 		"ВестиУчетТоваровОрганизацийВРазрезеСкладов", "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад",      		"ВидСклада",								 "ВидСклада");
	
	// Если сделка - Заказ поставщику, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка) 
	   И (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
		  ИЛИ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка", "ВалютаДокумента"         , "ВалютаЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка", "КурсВзаиморасчетов"      , "КурсВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка", "КратностьВзаиморасчетов" , "КратностьВзаиморасчетовЗаказа");
	КонецЕсли;

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);

	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);
	
	// Здесь контролировать сумму задолженности, предоплату и число дней задолженности не надо
	СтруктураШапкиДокумента.Вставить("КонтролироватьСуммуЗадолженности", Ложь);
	СтруктураШапкиДокумента.Вставить("ПроцентПредоплаты", 0);
	СтруктураШапкиДокумента.Вставить("КонтролироватьЧислоДнейЗадолженности", Ложь);

	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Дополним шапку исходным исправляемым документом поступления
	СтруктураШапкиДокумента.Вставить("ИсходныйИсправляемыйДокументПоступления", УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина));
	
	////////////////////////////////////////////////////////////////////
	// Сведения о корректируемом документе
	ДокументПоступленияСсылка = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	СтруктураШапкиДокумента.Вставить("ДокументПоступленияДата", 	?(ЗначениеЗаполнено(ДокументПоступленияСсылка), ДокументПоступленияСсылка.Дата, Дата));
	СтруктураШапкиДокумента.Вставить("ДокументПоступленияСсылка", 	ДокументПоступленияСсылка);
    СтруктураШапкиДокумента.Вставить("ДокументОснование",	 		ДокументПоступления);
	СтруктураШапкиДокумента.Вставить("ДокументОснованиеДата",	 	?(ЗначениеЗаполнено(ДокументПоступления), ДокументПоступления.Дата, Дата));
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

//Процедура добавляет в структуру полей сведения о СтатьеЗатрат и НоменклатурнойГруппе из Номенклатуры
//	Эти сведения впоследствии могут пригодиться для заполнения незаполненных Статьи и НоменклатурнойГруппы
//	Также процедура готовит структуру, сопоставляющую поля из табличной части документа и поля из номенклатуры
Процедура ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок, СтруктураЗависимыхКолонок)
	
	//Поля для заполнения 
	СтруктураПолей.Вставить("СтатьяЗатратНоменклатуры", "Номенклатура.СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатратНоменклатуры", "Номенклатура.СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("НоменклатурнаяГруппаНоменклатуры", "Номенклатура.НоменклатурнаяГруппаЗатрат");

	СтруктураОбрабатываемыхКолонок.Вставить("СтатьяЗатрат", 			"СтатьяЗатратНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("НоменклатурнаяГруппа", 	"НоменклатурнаяГруппаНоменклатуры");
	СтруктураОбрабатываемыхКолонок.Вставить("ХарактерЗатрат", 			"ХарактерЗатратНоменклатуры");
	
	СтруктураЗависимыхКолонок.Вставить("ХарактерЗатрат", "СтатьяЗатрат")
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке)

	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "ВалютаУправленческогоУчета"        , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"             , "КурсВалютыУправленческогоУчета"    , "КурсВалютыУправленческогоУчета");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "НастройкаСпособовВеденияУправленческогоПартионногоУчета", "СпособВеденияПартионногоУчетаПоОрганизации", "СпособВеденияПартионногоУчетаПоОрганизации");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)
	

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура();
	СтруктураОбязательныхПолей.Вставить("ДокументПоступления", "Не заполнено значение реквизита ""Основание""");
	СтруктураОбязательныхПолей.Вставить("Организация");
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
		Запрос.УстановитьПараметр("ЭтотДокумент", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаПоступления.Ссылка
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	КорректировкаПоступления.ДокументПоступления = &ДокументПоступления
		|	И КорректировкаПоступления.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|	И КорректировкаПоступления.Ссылка <> &ЭтотДокумент
		|	И КорректировкаПоступления.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаПоступления.Дата УБЫВ";
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("К документу "+ ДокументПоступления +" введено больше одного корректировочного документа с видом операции ""Исправление первичных документов"". 
			|Каждую последующую корректировку следует вводить на основании предыдущей.", Отказ, Заголовок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТоварамТекущийПериод, ТаблицаПоУслугамТекущийПериод) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура"                         , "Номенклатура");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"           , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                    , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ВестиПартионныйУчетПоСериям"          , "Номенклатура.ВестиПартионныйУчетПоСериям");
	СтруктураПолей.Вставить("Услуга"                               , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                                , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                             , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("ЗаказПокупателя"                      , "Заказ");
	СтруктураПолей.Вставить("ВидЗаказаПокупателя"                  , "Заказ.ВидОперации");
	СтруктураПолей.Вставить("СкладЗаказаПокупателя"                , "Заказ.СкладГруппа");
	СтруктураПолей.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", 
	                        "Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                     , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("СтавкаНДС"                            , "СтавкаНДС");
	СтруктураПолей.Вставить("Склад"                                , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                            , "Склад.ВидСклада");
	СтруктураПолей.Вставить("ВидСкладаРазмещения"                  , "Склад.ВидСклада");
	
	СтруктураПолей.Вставить("Цена"                                 , "Цена");
	СтруктураПолей.Вставить("Коэффициент"                          , "Коэффициент");
	СтруктураПолей.Вставить("УчетПоСериям"                         , "Номенклатура.ВестиУчетПоСериям");
	СтруктураПолей.Вставить("СтранаПроисхождения"                  , "СерияНоменклатуры.СтранаПроисхождения");
	СтруктураПолей.Вставить("НомерГТД"                             , "СерияНоменклатуры.НомерГТД");
	СтруктураПолей.Вставить("ЗаказПоставщику"                      , "ЗаказПоставщику");
	СтруктураПолей.Вставить("ДокументПартии"                       , "ДокументПартии");

	СтруктураПолей.Вставить("РеализованоВПрошлыеМесяцы"            , "РеализованоВПрошлыеМесяцы");
	СтруктураПолей.Вставить("РеализованоВПрошлыеГоды"              , "РеализованоВПрошлыеГоды");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураШапкиДокумента);
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура();
	СтруктураСложныхПолей.Вставить("Количество", "(Количество - КоличествоДоИзменения) * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("КоличествоДоИзменения", "КоличествоДоИзменения * Коэффициент / Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураСложныхПолей.Вставить("Сумма",      "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС",        "СуммаНДС - СуммаНДСДоИзменения");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;
		
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураСложныхПолей);
	
	// Получим необходимые данные для проведения и проверки заполнения данные 
	// по табличной части "Услуги".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Номенклатура",             "Номенклатура");
	СтруктураПолей.Вставить("СтавкаНДС",                "СтавкаНДС");
	СтруктураПолей.Вставить("Содержание",               "Содержание");
	СтруктураПолей.Вставить("Услуга",                   "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор",                    "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект",                 "Номенклатура.Комплект");
	СтруктураПолей.Вставить("СтатьяЗатрат",             "СтатьяЗатрат");
	СтруктураПолей.Вставить("ХарактерЗатрат",           "СтатьяЗатрат.ХарактерЗатрат");
	СтруктураПолей.Вставить("Продукция",                "Продукция");
	СтруктураПолей.Вставить("ХарактеристикаПродукции",  "ХарактеристикаПродукции");
	СтруктураПолей.Вставить("СерияПродукции",           "СерияПродукции");
	СтруктураПолей.Вставить("Подразделение",            "Подразделение");
	СтруктураПолей.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");
	СтруктураПолей.Вставить("Заказ",                    "Заказ");
	СтруктураПолей.Вставить("ЗаказПоставщику",          "ЗаказПоставщику");
	СтруктураПолей.Вставить("СпособРаспределенияЗатратНаВыпуск", "СпособРаспределенияЗатратНаВыпуск");
	СтруктураПолей.Вставить("ПроектЗатрат", "Проект");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей);
	
	СтруктураОбрабатываемыхКолонок = Новый Структура();
	СтруктураЗависимыхКолонок = Новый Структура();
	ДополнитьСтруктуруПолейДаннымиНоменклатуры(СтруктураПолей, СтруктураОбрабатываемыхКолонок, СтруктураЗависимыхКолонок);
	
	// Сформируем структуру сложных полей
	СтруктураСложныхПолей = Новый Структура();
	СтруктураСложныхПолей.Вставить("Количество", "Количество - КоличествоДоИзменения");
	СтруктураСложныхПолей.Вставить("Сумма",      "Сумма - СуммаДоИзменения");
	СтруктураСложныхПолей.Вставить("НДС",        "СуммаНДС - СуммаНДСДоИзменения");
	СтруктураСложныхПолей.Вставить("СуммаНДС",   "СуммаНДС - СуммаНДСДоИзменения");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	КонецЕсли;
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураСложныхПолей);

	ТаблицаПоТоварам      = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента);
	ТаблицаПоУслугам      = ПодготовитьТаблицуТоваров(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента);
	
	//Заполним в таблице по услугам подразделение организации
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуДокументаПодразделениемОрганизации(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
	//Заполнение незаполненных СтатьиЗатрат и НоменклатурнойГруппы по Номенклатуре в Таблице услуг
	ОбщегоНазначенияКлиентСервер.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВТаблицеДокумента(ТаблицаПоУслугам, СтруктураОбрабатываемыхКолонок, СтруктураЗависимыхКолонок);
	
	//Счета учета номенклатуры и затрат
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента);
	СчетаУчетаВДокументах.ЗаполнитьПриПроведенииСчетаУчетаТабличнойЧасти("Услуги", ТаблицаПоУслугам, СтруктураШапкиДокумента);
	
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоТоварам, 
			СтруктураШапкиДокумента,
			Ложь,
			мВалютаРегламентированногоУчета);
			
	БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаПоУслугам, 
			СтруктураШапкиДокумента,
			Ложь,
			мВалютаРегламентированногоУчета);
		
	// Скорректируем на суммы НДС, включаемого в стоимость в соответствии с пропорцией согласно ст.170
	ТаблицаКоэффициентов = УчетНДСФормированиеДвижений.КорректировкаПоступленияПодготовитьТаблицуКоэффициентов(СтруктураШапкиДокумента);
	
	СкорректироватьТаблицуТоваровПоПропорцииСт170(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаКоэффициентов);
	СкорректироватьТаблицуТоваровПоПропорцииСт170(СтруктураШапкиДокумента, ТаблицаПоУслугам, ТаблицаКоэффициентов);
	
	БухгалтерскийУчет.СформироватьКолонкиДляСодержанияПроводкиПоВходящемуДокументу(ТаблицаПоТоварам, "вх.док.", НомерВходящегоДокумента, ДатаВходящегоДокумента);
	БухгалтерскийУчет.СформироватьСодержаниеПроводкиПоВходящемуДокументу(ТаблицаПоТоварам, "Поступление");
	БухгалтерскийУчет.СформироватьКолонкиДляСодержанияПроводкиПоВходящемуДокументу(ТаблицаПоУслугам, "вх.док.", НомерВходящегоДокумента, ДатаВходящегоДокумента);
	БухгалтерскийУчет.СформироватьСодержаниеПроводкиПоВходящемуДокументу(ТаблицаПоУслугам, "");
	
	ТаблицаПоТоварамТекущийПериод = ПолучитьТаблицуТоваровТекущегоПериода(СтруктураШапкиДокумента, ТаблицаПоТоварам);
	ТаблицаПоУслугамТекущийПериод = ПолучитьТаблицуУслугТекущегоПериода(СтруктураШапкиДокумента, ТаблицаПоУслугам);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	// Удалим из таблицы строки, по которым не было изменений
	КоличествоСтрок = ТаблицаТоваров.Количество();
	Для Индекс = 1 по КоличествоСтрок Цикл
		
		СтрокаТаблицы = ТаблицаТоваров[КоличествоСтрок - Индекс];
		
		Если СтрокаТаблицы.Количество = 0 И СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.НДС = 0 Тогда
			ТаблицаТоваров.Удалить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	// Создаем колонку "Стоимость" и копируем в нее колонку "Сумма"
	ТаблицаТоваров.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.ЗагрузитьКолонку(ТаблицаТоваров.ВыгрузитьКолонку("Сумма") , "Стоимость");
	
	ТаблицаТоваров.Колонки.Добавить("КоличествоМинус", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.КоличествоМинус = - СтрокаТаблицы.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
	// Порядок вызова в данном случае важен
	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;

КонецФункции // ПодготовитьТаблицуТоваров()

// Процедура подготавливает таблицу товаров для проведения по упр. учету
//
Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)

	ЕстьЦена = ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено;

	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСкладаРазмещения");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		                 ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();

		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСкладаРазмещения");
	КонецЕсли;

	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));

	// Надо рассчитать стоимость без НДС.
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл

		// Считаем, что поступление выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, 
				ВалютаДокумента, 
				СтруктураШапкиДокумента.ВалютаЗаказа,
				СтруктураШапкиДокумента.КурсДокумента, 
				СтруктураШапкиДокумента.КурсЗаказа,
				СтруктураШапкиДокумента.КратностьДокумента, 
				СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;

		СтоимостьСНДС  = СтрокаТаблицы.Стоимость + ?(УчитыватьНДС И Не СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		Если СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий 
				И НЕ (СтруктураШапкиДокумента.НДСВключенВСтоимость) 
				И НЕ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаТаблицы.Стоимость = СтрокаТаблицы.Стоимость - ?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		Иначе
			СтрокаТаблицы.Стоимость = СтоимостьСНДС;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.УчетАгентскогоНДС Тогда
			СтоимостьДляВзаиморасчетов = СтоимостьСНДС - СтрокаТаблицы.НДС;
		Иначе
			СтоимостьДляВзаиморасчетов = СтоимостьСНДС;
		КонецЕсли;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьДляВзаиморасчетов, 
												ВалютаДокумента, 
												СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
												СтруктураШапкиДокумента.КурсДокумента, 
												КурсВзаиморасчетов, 
												СтруктураШапкиДокумента.КратностьДокумента, 
												КратностьВзаиморасчетов);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтоимостьСНДС, 
												ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												СтруктураШапкиДокумента.КратностьДокумента, 
												СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		 
		СтрокаТаблицы.НДСУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, 
												ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 
												СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
												СтруктураШапкиДокумента.КратностьДокумента, 
												СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
 		
		СтрокаТаблицы.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
												СтруктураШапкиДокумента.КурсДокумента,
												СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
												СтруктураШапкиДокумента.КратностьДокумента,
												СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Цена нужна для проведения по заказам поставщиков, поэтому ее необходимо пересчитать в валюту заказа
		Если ЕстьЦена И ЗначениеЗаполнено(СтруктураШапкиДокумента.Сделка) 
			И (ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
		       ИЛИ ТипЗнч(СтруктураШапкиДокумента.Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
			СтруктураКурсаВалютыЗаказа = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаЗаказа, Дата);
			СтрокаТаблицы.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, СтруктураШапкиДокумента.ВалютаДокумента,
										СтруктураШапкиДокумента.ВалютаЗаказа,
										СтруктураШапкиДокумента.КурсДокумента,
										СтруктураКурсаВалютыЗаказа.Курс, 
										СтруктураШапкиДокумента.КратностьДокумента,
										СтруктураКурсаВалютыЗаказа.Кратность);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

// Процедура подготавливает таблицу товаров для проведения по регл. учету
//
Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаРегл",        Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСумма",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаТоваров.Колонки.Добавить("ПроводкаСуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	ЕстьСкладВТабличнойЧасти = (НЕ ТаблицаТоваров.Колонки.Найти("Склад") = Неопределено);
	Если ЕстьСкладВТабличнойЧасти Тогда
		ТаблицаТоваров.Колонки.Добавить("СкладПроводок", Новый описаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	Данные = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Дата);
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		Если ЕстьСкладВТабличнойЧасти Тогда
			СтрокаТаблицы.СкладПроводок = СтрокаТаблицы.Склад;
		КонецЕсли; 
		
		НДС   = СтрокаТаблицы.НДС;
		Сумма = ?(СуммаВключаетНДС, СтрокаТаблицы.Стоимость - НДС, СтрокаТаблицы.Стоимость);
		
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
			СтрокаТаблицы.ПроводкаСуммаНДС = НДС;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента,
												Данные.Курс, 
												СтруктураШапкиДокумента.КратностьДокумента,
												Данные.Кратность);
			СтрокаТаблицы.ПроводкаСуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НДС, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента,
												Данные.Курс, 
												СтруктураШапкиДокумента.КратностьДокумента,
												Данные.Кратность);
		КонецЕсли;
		
		СтрокаТаблицы.СуммаРегл = СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.ПроводкаСуммаНДС;  // Используется в процедурах отражения затрат
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

Процедура СкорректироватьТаблицуТоваровПоПропорцииСт170(СтруктураШапкиДокумента, ТаблицаТоваров, ТаблицаКоэффициентов)

	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДССписанного", 		ОписаниеТиповЧисло15_2);  // Сумма НДС, включаемого в стоимость по пропорции согласно ст.170
	ТаблицаТоваров.Колонки.Добавить("СуммаНДССписанногоВал", 	ОписаниеТиповЧисло15_2);  // Сумма НДС в валюте, включаемого в стоимость по пропорции согласно ст.170
	
	ЕстьКолонкаСчетУчетаБУ 	= ТаблицаТоваров.Колонки.Найти("СчетУчетаБУ") <> Неопределено;

    СтруктураПоиска = Новый Структура("ВидЦенности,СтавкаНДС,СчетУчетаНДС");
    
    ОрганизацияПрименяетУСН = Ложь;
   	Если СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН")
		И СтруктураШапкиДокумента.ОрганизацияПрименяетУСН тогда
		ОрганизацияПрименяетУСН = СтруктураШапкиДокумента.ОрганизацияПрименяетУСН;
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
	
		Если ЕстьКолонкаСчетУчетаБУ Тогда
			Если СтрокаТаблицы.СчетУчетаБУ.Забалансовый Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		Строки = ТаблицаКоэффициентов.НайтиСтроки(СтруктураПоиска);
		
		Если СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
			ПропорцияПоСт170 = 1;
		ИначеЕсли Строки.Количество() > 0 Тогда
			ПропорцияПоСт170 = Строки[0].НДСКоэффициент;
		Иначе
			ПропорцияПоСт170 = 0;
		КонецЕсли;	
		
		НДС    = (1 - ПропорцияПоСт170) * СтрокаТаблицы.НДС;
		НДСВал = (1 - ПропорцияПоСт170) * СтрокаТаблицы.НДСВал;
		
		СтрокаТаблицы.СуммаНДССписанного 	= СтрокаТаблицы.НДС - НДС;
		СтрокаТаблицы.СуммаНДССписанногоВал = СтрокаТаблицы.НДСВал - НДСВал;
		
		СтрокаТаблицы.НДС 					= СтрокаТаблицы.НДС - СтрокаТаблицы.СуммаНДССписанного;  		// Сумма НДС для выделения на 19-м счете
		СтрокаТаблицы.НДСВал 				= СтрокаТаблицы.НДСВал - СтрокаТаблицы.СуммаНДССписанногоВал;
		//СтрокаТаблицы.НДСУпр 				- на упр. учет включение в стоимость по регл. не влияет
		СтрокаТаблицы.ПроводкаСумма	 		= СтрокаТаблицы.ПроводкаСумма + СтрокаТаблицы.СуммаНДССписанного;
		СтрокаТаблицы.ПроводкаСуммаНДС 		= СтрокаТаблицы.ПроводкаСуммаНДС - СтрокаТаблицы.СуммаНДССписанного;
		//СтрокаТаблицы.Стоимость			- относится к упр. учету, поэтому от регл.учета не зависит
		СтрокаТаблицы.Сумма 				= СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДССписанного;
		СтрокаТаблицы.СуммаБУ 				= СтрокаТаблицы.СуммаБУ + СтрокаТаблицы.СуммаНДССписанного;
		СтрокаТаблицы.СуммаБУБезНДС			= СтрокаТаблицы.СуммаБУБезНДС + СтрокаТаблицы.СуммаНДССписанного;
		СтрокаТаблицы.СуммаБезНДС			= СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.СуммаНДССписанного;
		СтрокаТаблицы.СуммаБезНДСВал		= СтрокаТаблицы.СуммаБезНДСВал + СтрокаТаблицы.СуммаНДССписанногоВал;
		СтрокаТаблицы.СуммаВал				= СтрокаТаблицы.СуммаВал + СтрокаТаблицы.СуммаНДССписанногоВал;
		//СтрокаТаблицы.СуммаВзаиморасчетов	- сумма взаиморасчетов с контрагентом от включения НДС в стоимость не зависит
		//СтрокаТаблицы.СуммаПродажная		- на упр. учет включение в стоимость по регл. не влияет
		//СтрокаТаблицы.СуммаРегл			- определяется как ПроводкаСумма + ПроводкаСуммаНДС, поэтому из-за разнонаправленного изменения сумм в слагаемых итог не меняется
		//СтрокаТаблицы.СуммаУпр			- на упр. учет включение в стоимость по регл. не влияет
	
	КонецЦикла;

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураШапкиДокумента)

	СтруктураПолей.Вставить("СчетУчетаБУ",   "СчетУчетаБУ");
	СтруктураПолей.Вставить("СчетУчетаНДС",  "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетУчетаНУ",   "СчетУчетаНУ");
	СтруктураПолей.Вставить("ОтражениеВУСН", "ОтражениеВУСН");

	//Для определения счетов учета при проведении документов
	СтруктураПолей.Вставить("СкладВидСклада", "Склад.ВидСклада");
	
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа",           "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Цена",                           "Цена");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
//
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей)

	СтруктураПолей.Вставить("НоменклатурнаяГруппа",     "НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("ПодразделениеОрганизации", "ПодразделениеОрганизации");
	СтруктураПолей.Вставить("ОбъектСтроительства",      "ОбъектСтроительства");
	СтруктураПолей.Вставить("СпособСтроительства",      "СпособСтроительства");
	СтруктураПолей.Вставить("СчетЗатрат",   "СчетЗатрат" );
	СтруктураПолей.Вставить("СчетУчетаНДС", "СчетУчетаНДС");
	СтруктураПолей.Вставить("СчетЗатратНУ", "СчетЗатратНУ" );
	СтруктураПолей.Вставить("Субконто1",    "Субконто1");
	СтруктураПолей.Вставить("Субконто2",    "Субконто2");
	СтруктураПолей.Вставить("Субконто3",    "Субконто3");
	СтруктураПолей.Вставить("СубконтоНУ1",  "СубконтоНУ1");
	СтруктураПолей.Вставить("СубконтоНУ2",  "СубконтоНУ2");
	СтруктураПолей.Вставить("СубконтоНУ3",  "СубконтоНУ3");
	СтруктураПолей.Вставить("ОтражениеВУСН",  "ОтражениеВУСН");

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить
	//Проверяем здесь, а не в ОбработкаПроверкиЗаполнения, т.к. эти реквизиты заполняются 
	//	в ПередЗаписью - после того как выполняется ОбработкаПроверкиЗаполнения
	СтруктураОбязательныхПолей = Новый Структура("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента, "Поступление") Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПоставщику");
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);

	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Здесь НТТ быть не должно.
	УправлениеЗапасами.ПроверитьЧтоСкладНеНТТ(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Проверка заполнения номера ГТД в серии
	УправлениеЗапасами.ПроверитьЧтоВСерииЗаполненНомерГТД(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);

	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПоставщику", Отказ, Заголовок);

	// Проверка наличия продажных цен на приходуемый товар.
	УправлениеРозничнойТорговлей.ПроверитьЧтоДляРозничныхСкладовЗаполненаСуммаПродажная(
		ЭтотОбъект,
		"Товары",
		ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество"),
		Отказ,
		Заголовок,
		"ВидСкладаРазмещения");
		
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары", Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "Услуги".
//
// Параметры:
// Параметры: 
//  РезультатЗапросаПоУслугам - результат запроса, содержащий данные для проведения и проверки ТЧ Услуги
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                     - флаг отказа в проведении.
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Услуги";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура();
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента, "Поступление") Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПоставщику");
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(СтруктураОбязательныхПолей, СтруктураШапкиДокумента.ВидСклада);
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиУслугиРегл(ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	УправлениеЗаказами.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПоставщику", Отказ, Заголовок);
	
	// Проверим соответствие подразделения и оранизации.
	УправлениеЗатратами.ПроверитьПодразделениеОрганизацииВСтрокахТабЧасти(ЭтотОбъект, ТаблицаПоУслугам, "Услуги",, Отказ, Заголовок);
	
	// Проверить обязательные поля для производственных статей затрат
	Для Каждого СтрокаУслуг Из ТаблицаПоУслугам Цикл
		Если СтрокаУслуг.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве
			ИЛИ СтрокаУслуг.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы
			ИЛИ СтрокаУслуг.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы
			ИЛИ СтрокаУслуг.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
			
			Если СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
				
				Если СтрокаУслуг.Подразделение.Пустая() Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В строке номер """ + СтрокаУслуг.НомерСтроки 
							+ """ табличной части ""Услуги"": Не заполнено значение реквизита ""Подразделение""!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
				
				Если СтрокаУслуг.ПодразделениеОрганизации.Пустая() Тогда
					ОбщегоНазначения.СообщитьОбОшибке("В строке номер """ + СтрокаУслуг.НомерСтроки 
							+ """ табличной части ""Услуги"": Не заполнено значение реквизита ""Подразделение организации""!", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслуги()

// Выполняет проверки,которые нужны только для регл. учета
Процедура ПроверитьЗаполнениеТабличнойЧастиУслугиРегл(ТаблицаПоУслугам, Отказ, Заголовок)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнены значения ""Статья затрат"" (строка № " + СтрокаТаблицы.НомерСтроки + " табличной части ""Услуги"")", Отказ, Заголовок);
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат.ХарактерЗатрат) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В статье затрат """ + СтрокаТаблицы.СтатьяЗатрат + """ не указан вид расхода (строка № " + СтрокаТаблицы.НомерСтроки + " табличной части ""Услуги"")", Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиУслугиРегл()

// Процедура готовит таблицу для движения по внутренним заказам
//
Процедура ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Знач СтатусПартии)
	
	Сч = 0;
	
	Пока Сч < ТабИсходная.Количество() Цикл
		СтрокаТаблицы = ТабИсходная.Получить(Сч);
		Если ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
			  И СтрокаТаблицы.ЗаказПокупателя.Заказчик = СтрокаТаблицы.Склад Тогда
			// Проверим остаток по регистру "Внутренние заказы", если в остатках не хватает количества, 
			// то, вероятно, заказаны комплектующие для комплектов, по ним движений не делаем
			КоличествоОстаток = УправлениеЗаказами.ПолучитьОстатокПоВнутреннемуЗаказу(СтрокаТаблицы.ЗаказПокупателя, 
																   СтрокаТаблицы.Количество, 
																   СтрокаТаблицы.Номенклатура, 
																   ?(СтатусПартии=Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, Неопределено, СтрокаТаблицы.ХарактеристикаНоменклатуры),
																   СтрокаТаблицы.ЕдиницаИзмерения,
																   СтатусПартии);
			Если КоличествоОстаток > 0 Тогда
				СтрокаТаблицы.Количество = Мин(СтрокаТаблицы.Количество, КоличествоОстаток);
				Сч = Сч + 1;
			Иначе
				ТабИсходная.Удалить(СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ТабИсходная.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	ТабИсходная.Колонки.ЗаказПокупателя.Имя = "Заказ";
	
КонецПроцедуры

// Функция удаляет из исходной таблицы строки для которых не надо делать размещение под заказ
// Возвращается КОПИЯ исходной таблицы.
//
Функция УдалитьСтрокиНеТребующиеРазмещенияВЗаказе(ТабТовары)

	ТаблицаПоТоварамРазмещение = ТабТовары.Скопировать();
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамРазмещение.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоТоварамРазмещение.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПоставщику) Тогда
			
			ТаблицаПоТоварамРазмещение.Удалить(СтрокаТаблицы);
			
		Иначе
			Сч = Сч + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПоТоварамРазмещение;
	
КонецФункции // УдалитьСтрокиНеТребующиеРазмещенияВЗаказе()

// Процедура удаляет строки из таблицы значений с пустым заказом или с внутренним заказом (по которым не надо делать резерв)
//
Процедура УдалитьСтрокиБезЗаказаДляРезерва(ТаблицаПоТоварамЗаказамПокупателей)
	
	Сч = 0;
	Пока Сч < ТаблицаПоТоварамЗаказамПокупателей.Количество() Цикл
		
		СтрокаТаблицы = ТаблицаПоТоварамЗаказамПокупателей.Получить(Сч);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя)
				ИЛИ (ТипЗнч(СтрокаТаблицы.ЗаказПокупателя) = Тип("ДокументСсылка.ВнутреннийЗаказ") // Считается исполнением внутреннего заказа.
				И  СтрокаТаблицы.ЗаказПокупателя.Заказчик = СтрокаТаблицы.Склад) Тогда             // Резерв в это случае делать не надо.
			
			ТаблицаПоТоварамЗаказамПокупателей.Удалить(СтрокаТаблицы);
			
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиБезЗаказаДляРезерва()

// Процедура заполняет сделку в строках таблице значений
//
Процедура ОпределитьСделкуВСтрокахТаблицыЗначений(ТаблицыДанныхДокумента, ИмяТаблицы, ИмяКолонкиСделка, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		//сделку надо очистить
		ТаблицыДанныхДокумента[ИмяТаблицы].ЗаполнитьЗначения(Неопределено, ИмяКолонкиСделка);
		
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		//сделку надо взять из шапки документа
		ТаблицыДанныхДокумента[ИмяТаблицы].ЗаполнитьЗначения(УправлениеВзаиморасчетами.ОпределитьСделку(ЭтотОбъект, СтруктураШапкиДокумента),ИмяКолонкиСделка);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует движения по регистру ТоварыОрганизации
//
Процедура ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоТоварам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
	// Корректировка поступления всегда двигает товарные регистры, даже если введена на основании поступления по ордеру
	
	НаборДвижений = Движения.ТоварыОрганизаций;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	ТаблицаДвижений = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаДвижений, "Количество");

	// Недостающие поля.
	ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
	ТаблицаДвижений.ЗаполнитьЗначения(Неопределено,"Комиссионер");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Неопределено, "Склад");
	КонецЕсли;
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.ТоварыОрганизаций.ВыполнитьПриход();
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизацийРегл()

// Проводит табличные часть "Товары" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ Услуги
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок, СтруктураШапкиДокумента)

	// Определим код операции движений по регистру партий
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
	Иначе
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Поступление;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	// Корректировка поступления всегда двигает товарные регистры, даже если введена на основании поступления по ордеру
	
	ОтборСкладОптовый    = Новый Структура("ВидСкладаРазмещения", Перечисления.ВидыСкладов.Оптовый);
	ОтборСкладРозничный  = Новый Структура("ВидСкладаРазмещения", Перечисления.ВидыСкладов.Розничный);
		
	ТаблицаТоварыОпт = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладОптовый).Выгрузить();
	ТаблицаТоварыОпт = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаТоварыОпт, "Количество");
	ТаблицаТоварыРозница = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(ТаблицаПоТоварам, ОтборСкладРозничный).Выгрузить();
	ТаблицаТоварыРозница = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаТоварыРозница, "Количество, СуммаПродажная");
	
	СтруктТаблицДокументаОпт = Новый Структура;
	СтруктТаблицДокументаОпт.Вставить("ТаблицаПоТоварам", ТаблицаТоварыОпт);
	
	СтруктТаблицДокументаРозница = Новый Структура;
	СтруктТаблицДокументаРозница.Вставить("ТаблицаПоТоварам", ТаблицаТоварыРозница);
	
	ТаблицыДанныхДокументаОпт     = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокументаОпт);
	ТаблицыДанныхДокументаРозница = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице, СтруктТаблицДокументаРозница);
	
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаОпт,     "Качество", Справочники.Качество.Новый);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокументаРозница, "Качество", Справочники.Качество.Новый);
	
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаОпт, Дата);
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокументаРозница, Дата);
	
	// Подготовим таблицу по товарам для целей движения по ПУ
	ТаблицаПоТоварамДляДвиженияПоПартиям = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, 
		"Количество" + ?(СтруктураШапкиДокумента.НеВключатьНДСВСтоимостьПартий, ", СуммаУпр, НДСУпр", ", СуммаУпр"));
	
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента,
		Отказ, 
		ТаблицаПоТоварамДляДвиженияПоПартиям,
		,
		,
		СтруктураШапкиДокумента.ОтражатьВУправленческомУчете);
	
	// ТОВАРЫ, УСЛУГИ ПО РЕГИСТРУ Закупки.
	
	КопияТаблицыТоваров = ТаблицаПоТоварам.Скопировать();
	КопияТаблицыТоваров.ЗагрузитьКолонку(КопияТаблицыТоваров.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
	
	КопияТаблицыУслуги = ТаблицаПоУслугам.Скопировать();
	КопияТаблицыУслуги.ЗагрузитьКолонку(КопияТаблицыУслуги.ВыгрузитьКолонку("СуммаУпр"), "Стоимость");
	
	КопияТаблицыТоваров.Колонки.НДС   .Имя = "_НДС";
	КопияТаблицыТоваров.Колонки.НДСУпр.Имя = "НДС";
	
	Если ТипЗнч(СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументПоступления) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		КопияТаблицыТоваров.Колонки.ДокументПартии.Имя = "ДокументЗакупки";
	КонецЕсли;
	
	КопияТаблицыУслуги.Колонки.НДС   .Имя = "_НДС";
	КопияТаблицыУслуги.Колонки.НДСУпр.Имя = "НДС";
	
	// <- Шевченков №54944
	КопияТаблицыТоваров.Колонки.СуммаВзаиморасчетов.Имя = "ПРГ_СтоимостьВал";
	КопияТаблицыТоваров.Колонки.НДСВал.Имя = "ПРГ_НДСВал";
	Если КопияТаблицыТоваров.Колонки.Найти("ПРГ_ВалютаДокумента") = Неопределено Тогда
		КопияТаблицыТоваров.Колонки.Добавить("ПРГ_ВалютаДокумента", новый описаниетипов("СправочникСсылка.Валюты"));			
	КонецЕсли;
	// ->
	
	// <- Шевченков №54944
	КопияТаблицыУслуги.Колонки.СуммаВзаиморасчетов.Имя = "ПРГ_СтоимостьВал";
	КопияТаблицыУслуги.Колонки.НДСВал.Имя = "ПРГ_НДСВал";
	Если КопияТаблицыУслуги.Колонки.Найти("ПРГ_ВалютаДокумента") = Неопределено Тогда
		КопияТаблицыУслуги.Колонки.Добавить("ПРГ_ВалютаДокумента", новый описаниетипов("СправочникСсылка.Валюты"));			
	КонецЕсли;
	// ->
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
		
		// В этом случае таблицы документа обрабатываются особым образом
		ТаблицаДвижений = Движения.Закупки.Выгрузить();
		ТаблицаДвижений.Очистить();
		ТаблицаДвиженийТовары       = ТаблицаДвижений.Скопировать();
		ТаблицаДвиженийУслуги       = ТаблицаДвижений.Скопировать();
		
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыТоваров,      ТаблицаДвиженийТовары,       Проект, Дата, "Закупки");
		УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТаблицыУслуги,       ТаблицаДвиженийУслуги,       Проект, Дата, "Закупки");
		
		// Вставляем уже подготовленные таблицы движений
		ТаблицыДанныхДокумента = Новый Структура;
		ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам",      ТаблицаДвиженийТовары);
		ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам",      ТаблицаДвиженийУслуги);
		
	Иначе
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",      КопияТаблицыТоваров);
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам",      КопияТаблицыУслуги);
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Закупки, СтруктТаблицДокумента);
		
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ПРГ_ВалютаДокумента",СтруктураШапкиДокумента.ВалютаДокумента);  // Шевченков №54944
	
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       УправлениеЗапасамиПартионныйУчет.ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента));
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
	Если ТипЗнч(СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументПоступления) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументЗакупки",    СтруктураШапкиДокумента.ИсходныйИсправляемыйДокументПоступления);
	КонецЕсли;
	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение, "ТаблицаПоТоварам");
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику", СтруктураШапкиДокумента.Сделка);
	КонецЕсли;
	
	ТаблицыДанныхДокумента.ТаблицаПоТоварам = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицыДанныхДокумента.ТаблицаПоТоварам, "Количество, Стоимость, НДС");
	ТаблицыДанныхДокумента.ТаблицаПоУслугам = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицыДанныхДокумента.ТаблицаПоУслугам, "Количество, Стоимость, НДС"); 
	
	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Закупки, Неопределено, ТаблицыДанныхДокумента, Дата);
	
КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартийУпр()

// Проводит табличные части "Товары" по регистрам
//
// Параметры:
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ТоварыИТараПоРегистрамОстатковИПартийРегл(РежимПроведения, ТаблицаПоТоварам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеНаКомиссию;
	Иначе
		КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Поступление;
	КонецЕсли;
	
	УправлениеЗапасамиПартионныйУчет.ВыполнитьПриходПоРегистрамПартий(
		?(ДополнительныеСвойства.Свойство("ТаблицаСтаройРегистрацииВПоследовательности"),ДополнительныеСвойства.ТаблицаСтаройРегистрацииВПоследовательности,Неопределено),
		СтруктураШапкиДокумента, 
		Отказ, 
		ТаблицаПоТоварам, 
		, 
		,
		, 
		СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, 
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчете ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН);
	
КонецПроцедуры // ТоварыИТараПоРегистрамОстатковИПартий()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  ТаблицаПоВзаиморасчетам   - таблица по взаиморасчетам,
//  ТаблицаПоРасчетам         - таблица по расчетам,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
								ТаблицаПоТоварамТекущийПериод, ТаблицаПоУслугамТекущийПериод, Отказ, Заголовок);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, 
		СтруктураШапкиДокумента, 
		ТаблицаПоТоварам, 
		ТаблицаПоУслугам,
		ТаблицаПоВзаиморасчетам, 
		ТаблицаПоРасчетам,
		ТаблицаПоТоварамТекущийПериод, 
		Отказ, 
		Заголовок);
		
	// Формирование движений по отражению затрат.
	УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
		СтруктураШапкиДокумента, 
		ТаблицаПоУслугамТекущийПериод);
	
	ДвиженияПоРегиструТоварыОрганизацийРегл(РежимПроведения, ТаблицаПоТоварамТекущийПериод, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	ПроводкиНУ = ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,Движения.Налоговый,Неопределено);
	
	ДвиженияПоРегистрамРегл(РежимПроведения, 
		СтруктураШапкиДокумента, 
		ТаблицаПоТоварам,
		ТаблицаПоУслугам,
		ТаблицаПоВзаиморасчетам,
		ТаблицаПоТоварамТекущийПериод, 
		ТаблицаПоУслугамТекущийПериод,
		Отказ,
		Заголовок,
		ПроводкиНУ);
		
	// Разницы по ПБУ18/02
	Если ТаблицаПоУслугамТекущийПериод.Количество() > 0 Тогда
		ДвиженияПоРазницамПоУслугам(СтруктураШапкиДокумента, ТаблицаПоУслугамТекущийПериод, ПроводкиНУ);
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Движения.Налоговый.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
							ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, ТаблицаПоТоварамТекущийПериод, 
							Отказ, Заголовок);
	
	Если Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если (СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ
			ИЛИ СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.Розничный) Тогда
			
		УправлениеСертификациейНоменклатуры.ПроверитьНаСертификацию(ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры"), Дата, Ложь, Заголовок);
		
	КонецЕсли;
	
	УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, 
		СтруктураШапкиДокумента, 
		мСтруктураПараметровВзаиморасчетов, 
		ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоВзаиморасчетам, "СуммаВзаиморасчетов, СуммаУпр"), 
		ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоРасчетам, "СуммаВзаиморасчетов, СуммаУпр"), 
		ВидДвиженияНакопления.Расход,
		Отказ,
		Заголовок);
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	// ТАРА ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТАРА ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	
	ТоварыИТараПоРегистрамОстатковИПартийУпр(РежимПроведения, 
		ТаблицаПоТоварамТекущийПериод, 
		ТаблицаПоУслугам, 
		Отказ,
		Заголовок,
		СтруктураШапкиДокумента);
	
	Если НЕ Отказ Тогда
	
		// ТОВАР, ТАРА ПО РЕГИСТРУ ТоварыПолученные.
		СтруктТаблицДокумента = Новый Структура;
		
		ТабИменТовары = Неопределено;
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(ТаблицаПоТоварам, ТабИменТовары, "ЗаказПоставщику", "Сделка");
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество, СуммаВзаиморасчетов"));
			
		КонецЕсли;
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыПолученные, СтруктТаблицДокумента);
		
		Если ТабИменТовары <> Неопределено Тогда
			ОбщегоНазначения.ВосстановитьИменаКолонокТаблицыЗначений(ТаблицаПоТоварам, ТабИменТовары);
		КонецЕсли;
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
			ОпределитьСделкуВСтрокахТаблицыЗначений(ТаблицыДанныхДокумента, "ТаблицаПоТоварам", "Сделка", СтруктураШапкиДокумента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПолучения", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "ТаблицаПоТоварам");
			
		КонецЕсли;
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПолученные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
		// ТОВАР, ПО РЕГИСТРУ ЗаказыПоставщикам.
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество, СуммаВзаиморасчетов, СуммаУпр"));
		СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоУслугам, "Количество, СуммаВзаиморасчетов, СуммаУпр"));
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПоставщикам, СтруктТаблицДокумента);
		
		ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПоставщику");
		
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
		
		СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", СтатусПартии, "ТаблицаПоТоварам");
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", СтатусПартии, "ТаблицаПоУслугам");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПоставщикам, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
	
	КонецЕсли;
	
	// Резервирование по заказам покупателей
	
	// Сначала удалим из таблицы строки, по которым не надо ничего резервировать
	// (реквизит ЗаказПокупателя пуст)
	ТаблицаПоТоварамЗаказамПокупателей = ТаблицаПоТоварам.Скопировать();
	
	//для вида операции ВПереработку реквизит ЗаказПокупателя всегда заполнен, поэтому вид операции не проверяем
	УдалитьСтрокиБезЗаказаДляРезерва(ТаблицаПоТоварамЗаказамПокупателей);
	
	Если ТаблицаПоТоварамЗаказамПокупателей.Количество() > 0 Тогда
		
		ТаблицаПоТоварамЗаказамПокупателей.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварамЗаказамПокупателей, "Количество"));
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	// Товары по регистру "Размещение заказов покупателей"
	ТаблицаПоТоварамРазмещение = УдалитьСтрокиНеТребующиеРазмещенияВЗаказе(ТаблицаПоТоварам);
	
	Если ТаблицаПоТоварамРазмещение.Количество() > 0 Тогда
		
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварамРазмещение, "Количество"));
		
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.РазмещениеЗаказовПокупателей, СтруктТаблицДокумента);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ТоварТара", Перечисления.ТоварТара.Товар, "ТаблицаПоТоварам");
		
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.РазмещениеЗаказовПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
	// Погашение внутренних заказов в случае Заказчик = Склад поступления
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СтатусПартии",      Перечисления.СтатусыПартийТоваров.Купленный);
	ДопПараметры.Вставить("РежимПроведения",   РежимПроведения);
	ДопПараметры.Вставить("ИмяРеквизитаЗаказ", "Заказ");
	ДопПараметры.Вставить("ЗаказВШапке",       Ложь);
	ДопПараметры.Вставить("ИмяТабЧасти",       "Товары");
	
	ТабИсходная = ОтобратьСтрокиСЗаполненнымиЗначениямиВКолонках(ТаблицаПоТоварам, "Количество");
	
	ПодготовитьТаблицуДляДвиженийПоВнутреннимЗаказам(ТабИсходная, Перечисления.СтатусыПартийТоваров.Купленный);
	Если ТабИсходная.Количество() > 0 Тогда
		УправлениеЗаказами.ДвижениеПоВнутреннимЗаказам(ЭтотОбъект, ТабИсходная, ДопПараметры, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)

	Если НЕ мСтруктураПараметровВзаиморасчетов.ПроводитьПоВзаиморасчетам Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
		
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
				
КонецПроцедуры

// Формирует движения по постоянным и временным разницам по табличной части Услуги
//
Процедура ДвиженияПоРазницамПоУслугам(СтруктураШапкиДокумента, ТаблицаПоУслугам, ПроводкиНУ)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитикаРегл.ПоддержкаПБУ18 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДока   = Дата;
	
	// Подготовим структуру таблицы для отражения затрат.
	ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
	
	Для Каждого СтрокаТЧ из ТаблицаПоУслугам Цикл
		
		//СуммаВПроводку = СтрокаТЧ.Сумма - СтрокаТЧ.СуммаНДС;
		СуммаВПроводку = СтрокаТЧ.ПроводкаСумма;
		
		Если Лев(СтрокаТЧ.СчетЗатратНУ.Код, 2) = "97" Тогда
			СтатьяЗатрат1 = СтрокаТЧ.СубконтоНУ1.СтатьяЗатрат;
			СтатьяЗатрат2 = Неопределено;
			СтатьяЗатрат3 = Неопределено;
		Иначе
			СтатьяЗатрат1 = СтрокаТЧ.СубконтоНУ1;
			СтатьяЗатрат2 = СтрокаТЧ.СубконтоНУ2;
			СтатьяЗатрат3 = СтрокаТЧ.СубконтоНУ3;
		КонецЕсли;
			
		Если ТипЗнч(СтатьяЗатрат1)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СтатьяЗатрат1.ВидРасходовНУ;
			ВидУчета = ?(СтатьяЗатрат1.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ВР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат2)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СтатьяЗатрат2.ВидРасходовНУ;
			ВидУчета = ?(СтатьяЗатрат2.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ВР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат3)=Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатрат = СтатьяЗатрат3.ВидРасходовНУ;
			ВидУчета = ?(СтатьяЗатрат3.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения, Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ВР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат1)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СтатьяЗатрат1.ВидПрочихДоходовИРасходов;
			ВидУчета = ?(СтатьяЗатрат1.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ВР, Перечисления.ВидыУчетаПоПБУ18.ПР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат2)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СтатьяЗатрат2.ВидПрочихДоходовИРасходов;
			ВидУчета = ?(СтатьяЗатрат2.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ВР, Перечисления.ВидыУчетаПоПБУ18.ПР);
		ИначеЕсли ТипЗнч(СтатьяЗатрат3)=Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ВидЗатрат = СтатьяЗатрат3.ВидПрочихДоходовИРасходов;
			ВидУчета = ?(СтатьяЗатрат3.ПринятиеКналоговомуУчету, Перечисления.ВидыУчетаПоПБУ18.ВР, Перечисления.ВидыУчетаПоПБУ18.ПР);
		Иначе
			ВидЗатрат = "";
			ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР;
		КонецЕсли;
		
		Если ВидЗатрат = "" Тогда
			СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТЧ.СчетЗатрат), Ложь, Дата);
			Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетЗатратНУ	Тогда
				Продолжить;
			КонецЕсли;
			Если СчетНУСоответствующийСчетуБУ.Родитель = СтрокаТЧ.СчетЗатратНУ.Родитель Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ",СтрокаТЧ.СчетЗатрат, ВидЗатрат), Ложь, Дата);
			Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетЗатратНУ	Тогда
				Продолжить;
			КонецЕсли;
			Если СчетНУСоответствующийСчетуБУ.Родитель = СтрокаТЧ.СчетЗатратНУ.Родитель Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ)	Тогда
				СчетНУСоответствующийСчетуБУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",СтрокаТЧ.СчетЗатрат), Ложь, Дата);
				Если СчетНУСоответствующийСчетуБУ = СтрокаТЧ.СчетЗатратНУ	Тогда
					Продолжить;
				КонецЕсли;
				Если СчетНУСоответствующийСчетуБУ.Родитель = СтрокаТЧ.СчетЗатратНУ.Родитель Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Если соответствующий счет не найден, то разницы не рассчитаны
		Если НЕ ЗначениеЗаполнено(СчетНУСоответствующийСчетуБУ)	Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиНУ.Добавить();
			
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = СтрокаТЧ.Содержание;
			
		Проводка.СчетДт      = СчетНУСоответствующийСчетуБУ;
			
		ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетНУСоответствующийСчетуБУ, "Налоговый");
			
		Если ПроизводственныеРасходыНУ Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтрокаТЧ.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТЧ.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЧ.ОбъектСтроительства);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", СтрокаТЧ.СпособСтроительства);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаТЧ.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаТЧ.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаТЧ.Субконто3);
		КонецЕсли;
						
		Проводка.Сумма = СуммаВПроводку;
		Проводка.ВидУчетаДт = ВидУчета;
		
		// Добавим строку в таблицу затрат.
		Если ПроизводственныеРасходыНУ Тогда
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.СуммаБезНДС = 0;
			НоваяСтрока.СуммаРегл = 0;
			НоваяСтрока.СчетЗатратНУ = СчетНУСоответствующийСчетуБУ;
			
			Если ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР Тогда
				НоваяСтрока.ВременнаяРазница = СуммаВПроводку;
			ИначеЕсли ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
				НоваяСтрока.ПостояннаяРазница = СуммаВПроводку;
			КонецЕсли;
		КонецЕсли;
			
		Проводка = ПроводкиНУ.Добавить();
			
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = СтрокаТЧ.Содержание;
		
		ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаТЧ.СчетЗатратНУ, "Налоговый");
		
		Проводка.СчетДт = СтрокаТЧ.СчетЗатратНУ;
		Если ПроизводственныеРасходыНУ Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтрокаТЧ.ПодразделениеОрганизации);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТЧ.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаТЧ.СтатьяЗатрат);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТЧ.ОбъектСтроительства);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", СтрокаТЧ.СпособСтроительства);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаТЧ.СубконтоНУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаТЧ.СубконтоНУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаТЧ.СубконтоНУ3);
			Проводка.Сумма = - СуммаВПроводку;
		КонецЕсли;
		Проводка.Сумма = - СуммаВПроводку;
		Проводка.ВидУчетаДт = ВидУчета;
		
		// Добавим строку в таблицу затрат.
		Если ПроизводственныеРасходыНУ Тогда
			НоваяСтрока = ТаблицаЗатрат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.СуммаБезНДС = 0;
			НоваяСтрока.СуммаРегл = 0;
			
			Если ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ВР Тогда
				НоваяСтрока.ВременнаяРазница = - СуммаВПроводку;
			ИначеЕсли ВидУчета = Перечисления.ВидыУчетаПоПБУ18.ПР Тогда
				НоваяСтрока.ПостояннаяРазница = - СуммаВПроводку;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаЗатрат.Количество() > 0 Тогда
		
		ВремСтруктураШапкиДокумента = Новый Структура;
		ВремСтруктураШапкиДокумента.Вставить("Ссылка", СтруктураШапкиДокумента.Ссылка);
		ВремСтруктураШапкиДокумента.Вставить("Дата", СтруктураШапкиДокумента.Дата);
		ВремСтруктураШапкиДокумента.Вставить("Организация", СтруктураШапкиДокумента.Организация);
		ВремСтруктураШапкиДокумента.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
		ВремСтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете", Истина);
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			ВремСтруктураШапкиДокумента, 
			ТаблицаЗатрат
		);
		
	КонецЕсли;
		
КонецПроцедуры // ДвиженияПоРазницамПоУслугам()

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, 
									ТаблицаПоТоварамТекущийПериод, ТаблицаПоУслугамТекущийПериод, Отказ, Заголовок, ПроводкиНУ);

	Если Не СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
	// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
	ТоварыИТараПоРегистрамОстатковИПартийРегл(РежимПроведения, ТаблицаПоТоварамТекущийПериод, Отказ, Заголовок, СтруктураШапкиДокумента);
	
	// Формирование проводок по поступлению ТМЦ
	//УправлениеЗапасамиПартионныйУчет.СформироватьПроводкиПоПоступлениюТМЦ(СтруктураШапкиДокумента,
	//	Отказ, 
	//	ТаблицаПоТоварамТекущийПериод,
	//	, 
	//	ТаблицаПоУслугамТекущийПериод,
	//	, 
	//	, 
	//	СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, 
	//	СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
	СформироватьПроводки(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок);
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	// Движения по взаиморасчетам
	Если мСтруктураПараметровВзаиморасчетов.ПроводитьПоВзаиморасчетам Тогда
		
		СкладПроводок = Справочники.Склады.ПустаяСсылка();
		
		Если ТаблицаПоТоварам.Количество()>0 Тогда
			СкладПроводок = ТаблицаПоТоварам[0].Склад;
		КонецЕсли;
		СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(СтруктураШапкиДокумента.Ссылка,
												мВалютаРегламентированногоУчета, 
												Заголовок,
												, 
												ТаблицаПоВзаиморасчетам, СтруктураШапкиДокумента);
												
		Если НЕ ПризнаватьЗачитыватьАванс Тогда																						
			//Что бы аванс не зачитывался автоматически очистим счет учета авансов										
			СтруктураПараметровЗачетАванса.СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
		Если НЕ СтруктураПараметровЗачетАванса = Ложь Тогда
			
			// Движения по регистру сведений РасчетыПоПриобретениюОрганизации
			// и проводки по зачету аванса
			ТаблицаРасчетовПоПриобретению = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовитьТаблицуДляРегистраРасчетовПоПриобретению(
				мСтруктураПараметровВзаиморасчетов, 
				СтруктураШапкиДокумента);
			СтруктураПараметровЗачетАванса.Вставить("Склад", СкладПроводок);
			СуммаАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, 
				ПроводкиБУ, 
				мВалютаРегламентированногоУчета, 
				РежимПроведения, 
				ЭтотОбъект, 
				ТаблицаРасчетовПоПриобретению);
				
			// Движения по регистру РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				СтруктураПараметровЗачетАванса.Вставить("ПроводкиНУ", Движения.Налоговый);
			КонецЕсли;
			
			БухгалтерскийУчетРасчетовСКонтрагентами.РасчетыВУсловныхЕдиницахПриобретениеРеализация(СтруктураПараметровЗачетАванса, 
				мВалютаРегламентированногоУчета,
				РежимПроведения,
				ПроводкиБУ,
				ЭтотОбъект,
				Отказ,
				, 
				Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запись сформированных проводок
	
	Если Движения.Хозрасчетный.Модифицированность() Тогда 
		Движения.Хозрасчетный.Записать(Ложь);
	КонецЕсли;
	
	Если Движения.Налоговый.Модифицированность() Тогда
		Движения.Налоговый.Записать(Ложь);
	Конецесли;
	
КонецПроцедуры // ДвиженияПоРегистрамРегл()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	ТипОснования = ТипЗнч(Основание);
	Дата = НачалоДня(ТекущаяДата());
	
	Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) <> Тип("Структура") Тогда
		ДокументСсылка = УчетНДС.ПолучитьИсправляемыйДокументПоступления(Основание, Ложь);
		ДокументОснование = ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка);
		#Если Клиент Тогда
		Если Основание <> ДокументОснование И Основание.Дата < ДокументОснование.Дата Тогда
			Если Вопрос("Для указанного документа существуют более поздние корректировки.
				|Использовать последнюю введенную корректировку?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
				ДокументОснование = Основание;
			КонецЕсли;
		Иначе
			ДокументОснование = Основание;
		КонецЕсли;
		#КонецЕсли
		
		Если ЗначениеЗаполнено(ДокументСсылка)
			И ЗначениеЗаполнено(ДокументСсылка.ВалютаДокумента) 
			И ДокументСсылка.ВалютаДокумента <> мВалютаРегламентированногоУчета 
			И ЗначениеЗаполнено(ДокументСсылка.ДоговорКонтрагента)
			И ДокументСсылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			#Если Клиент Тогда
			Предупреждение("Для договоров в условных единицах, корректировка документов, оформленных в валюте, не поддерживается.
			|Корректируемый документ должен быть оформлен в рублях.");
			#КонецЕсли
			Возврат;
		КонецЕсли;
		
	Иначе
		ДокументОснование = Основание;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ 
		ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		Организация = ДокументОснование.Организация;
		ДокументПоступления = ДокументОснование;
		КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ();
		ЗаполнитьСвойстваШапки();
		ЗаполнитьПоПоступлению();
		КорректироватьНДС = Истина;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		Организация = ДокументОснование.Организация;
		ДокументПоступления = ДокументОснование;
		КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ();
		ЗаполнитьСвойстваШапки();
		ЗаполнитьПоПоступлениюВНТТ();
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		Организация = ДокументОснование.Организация;
		ДокументПоступления = ДокументОснование;
		КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ();
		ЗаполнитьСвойстваШапки();
		ЗаполнитьПоДопРасходам();
		КорректироватьНДС = Истина;
		
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ПризнаватьЗачитыватьАванс = ДоступноПризнаватьЗачитыватьАванс();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапки(Ложь);
	ОчиститьНенужныеТабличныеЧасти();
	ОбработатьСуммыДокорректировки();
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
	Если КорректироватьНДС Тогда
		УчетНДС.СинхронизацияПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	Иначе
		УчетНДС.УстановкаПометкиНаУдалениеУСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный", Истина);
	КонецЕсли;
	
	// Заполнить склад в табличной части товары
	Для каждого СтрокаТовары из Товары Цикл
		ЗаполнитьСкладВСтрокеТабличнойЧастиТовары(СтрокаТовары);
	КонецЦикла;
	
	Если Не мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.ЗаполнитьПроектВСтрокахТабЧасти(ЭтотОбъект, Услуги);
	КонецЕсли;

	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");

	// Заполним субконто затрат
	СчетаУчетаВДокументах.ЗаполнитьСубконтоТабличнойЧасти("Услуги", ЭтотОбъект, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	ПризнаватьЗачитыватьАванс = ПризнаватьЗачитыватьАванс И ДоступноПризнаватьЗачитыватьАванс();
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДС.ПроверитьСоответствиеРеквизитовСчетаФактуры(ЭтотОбъект, "СчетФактураПолученный");
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем СтруктураШапкиДокумента;
	Перем ТаблицаПоТоварам, ТаблицаПоУслугам;
	Перем ТаблицаПоТоварамТекущийПериод, ТаблицаПоУслугамТекущийПериод;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
	
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения,Отказ);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ (КорректироватьБУиНУ или КорректироватьНДС) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.КорректироватьБУиНУ Тогда
		
		// Подготовка таблиц по Товарам и Услугам 
		
		ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТоварамТекущийПериод, ТаблицаПоУслугамТекущийПериод);
		// Проверить заполнение ТЧ 
		ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
		ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		//Счета учета номенклатуры и затрат
		СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Товары", ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
		СчетаУчетаВДокументах.ПроверитьСчетаУчетаТабличнойЧасти("Услуги", ТаблицаПоУслугам, СтруктураШапкиДокумента, Отказ, Заголовок);
		
		
		// Подготовка таблиц по взаимпорасчетам
		ПроводитьПоВзаиморасчетам = (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
		мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
		
		СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
		
		мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
		УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, 
			ТаблицаПоРасчетам, 
			ЭтотОбъект,
			мСтруктураПараметровВзаиморасчетов,
			СтруктураШапкиДокумента, 
			Отказ,
			Заголовок);
			
		//Проверим на возможность проведения в БУ и НУ
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете 
			ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента,
				СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,
				СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
				мВалютаРегламентированногоУчета, 
				Ложь,
				Отказ,
				Заголовок);
				
		КонецЕсли;
		
	КонецЕсли;
	
	ПодготовитьПараметрыУчетнойПолитики(Отказ, Заголовок, СтруктураШапкиДокумента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Движения по регистрам упр. и рег учета формируем только если в документе установлен реквизит КорректироватьБУиНУ
	// Движения по регистрам учета НДС формируются отдельной обработкой
	Если СтруктураШапкиДокумента.КорректироватьБУиНУ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, 
			СтруктураШапкиДокумента, 
			ТаблицаПоТоварам,
			ТаблицаПоУслугам,
			ТаблицаПоВзаиморасчетам,
			ТаблицаПоРасчетам,
			ТаблицаПоТоварамТекущийПериод,
			ТаблицаПоУслугамТекущийПериод,
			Отказ,
			Заголовок);
			
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаПоТоварам", ТаблицаПоТоварамТекущийПериод));
	
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ОбработкаПроверкиЗаполнения"
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если КорректироватьБУиНУ И НЕ ОтражатьВУправленческомУчете И НЕ ОтражатьВБухгалтерскомУчете Тогда
		СтрокаСообщения = Нстр("ru = 'Документ должен принадлежать хотя бы одному из видов учета: ""Управленческий"" и (или)  ""Бухгалтерский"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	Если КорректироватьБУиНУ И НЕ ДоступнаКорректировкаБУиНУ() Тогда
		Если НЕ (мИспользоватьРасширеннуюАналитику И мДатаНачалаИспользованияРасширеннойАналитики <= Дата) Тогда
			СтрокаСообщения = Нстр("ru = 'Корректировка по упр. и регл. учету возможна только в режиме расширенной аналитики'");
		Иначе
			СтрокаСообщения = Нстр("ru = 'Для указанного основания корректировка по упр. и регл. учету не выполняется.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ЭтотОбъект,,, Отказ);
	КонецЕсли;
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если НЕ КорректироватьБУиНУ Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.Номенклатура");
		НепроверяемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
		НепроверяемыеРеквизиты.Добавить("Услуги.Номенклатура");
		НепроверяемыеРеквизиты.Добавить("Услуги.Содержание");
	КонецЕсли;
	
	Если НЕ УчитыватьНДС Тогда
		НепроверяемыеРеквизиты.Добавить("Товары.СтавкаНДС");
		НепроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	Для Каждого Реквизит Из НепроверяемыеРеквизиты Цикл
		НомерУдаляемогоЭлемента = ПроверяемыеРеквизиты.Найти(Реквизит);
		Если НомерУдаляемогоЭлемента <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(НомерУдаляемогоЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	// Единица измерения мест должна быть заполнена, если указано количество мест
	ОбработкаТабличныхЧастейСервер.ПроверитьЗаполненаЕдиницаИзмеренияМест(Товары, ЭтотОбъект, Отказ);
	
	// Проверим, соответсвует ли тип указанной номенклатуры документу-основанию
	ОписаниеТипаНоменклатуры = ПолучитьОписаниеТипаНоменклатурыПоОснованию();
	Для Каждого Строка Из Товары Цикл
		Если ЗначениеЗаполнено(Строка.Номенклатура)
			И НЕ ОписаниеТипаНоменклатуры.СодержитТип(ТипЗнч(Строка.Номенклатура)) Тогда
			
			ТекстОшибки = НСтр("ru = 'Тип номенклатуры в строке ""%НомерСтроки%"" списка ""Товары"" не соответствует указанному основанию.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Строка.НомерСтроки);
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПроводки(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Отказ, Заголовок) Экспорт
	
	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	
	ТЗРНаСчете15 = Ложь;
	Если мИспользоватьРасширеннуюАналитику И мДатаНачалаИспользованияРасширеннойАналитики <= СтруктураШапкиДокумента.Дата Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитика)
		  ИЛИ УчетнаяПолитика.ВидУчетаТЗР = Перечисления.ВариантыУчетаТЗР.ОтнесениеНаОтдельныйСчет Тогда
			ТЗРНаСчете15 = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из ТаблицаПоТоварам Цикл
		
		Содержание  = "Поступление " + БухгалтерскийУчет.ПолучитьНазваниеОбъекта(СтрокаТовары.СчетУчетаБУ) + " по вх.док." + СтруктураШапкиДокумента.НомерВходящегоДокумента + " от " + Формат(СтруктураШапкиДокумента.ДатаВходящегоДокумента, "ДЛФ=Д");
		
		СписатьПоСтрКоличество 	= СтрокаТовары.Количество;
		СписатьПоСтрСуммаБУ		= СтрокаТовары.СуммаБУ;
		СписатьПоСтрНДС			= СтрокаТовары.НДС;
		СписатьПоСтрСуммаВал	= СтрокаТовары.СуммаВал;
		
		КоличествоДоИзменения	= СтрокаТовары.КоличествоДоИзменения;
		КоличествоНачалоМесяца	= Макс(КоличествоДоИзменения - СтрокаТовары.РеализованоВПрошлыеМесяцы - СтрокаТовары.РеализованоВПрошлыеГоды, 0);
		КоличествоНачалоГода 	= Макс(КоличествоДоИзменения - СтрокаТовары.РеализованоВПрошлыеГоды, 0);
		
		//Коэффициент текущего месяца
		К1 = ?(СписатьПоСтрКоличество <> 0 ИЛИ НачалоМесяца(СтруктураШапкиДокумента.ДокументПоступленияДата) = НачалоМесяца(СтруктураШапкиДокумента.Дата), 1, ?(КоличествоДоИзменения <> 0, Мин(КоличествоНачалоМесяца / КоличествоДоИзменения, 1), 1));
		//Коэффициент текущего года
		К2 = ?(Год(СтруктураШапкиДокумента.ДокументПоступленияДата) = Год(СтруктураШапкиДокумента.Дата), 1, ?(КоличествоДоИзменения - КоличествоНачалоМесяца <> 0, Мин((КоличествоНачалоГода - КоличествоНачалоМесяца) / (КоличествоДоИзменения - КоличествоНачалоМесяца), 1), 1));
		//Коэффициент прошлого года
		К3 = 1;
		
		Если К1 <> 0 ИЛИ СписатьПоСтрКоличество <> 0 Тогда
			СтрКоличество 	= Окр(К1*СписатьПоСтрКоличество,3,1);
			СтрСуммаБУ		= Окр(К1*СписатьПоСтрСуммаБУ,2,1);
			СтрНДС			= Окр(К1*СписатьПоСтрНДС,2,1);
			СтрСуммаВал		= Окр(К1*СписатьПоСтрСуммаВал,2,1);
		
			СписатьПоСтрКоличество 	= СписатьПоСтрКоличество - СтрКоличество;
			СписатьПоСтрСуммаБУ		= СписатьПоСтрСуммаБУ - СтрСуммаБУ;
			СписатьПоСтрНДС			= СписатьПоСтрНДС - СтрНДС;
			СписатьПоСтрСуммаВал	= СписатьПоСтрСуммаВал - СтрСуммаВал;
			
			Если СтрКоличество <> 0 ИЛИ СтрСуммаБУ <> 0 Тогда
				Проводка 			 = ПроводкиБУ.Добавить();
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = Содержание;
				
				Проводка.СчетДт      = СтрокаТовары.СчетУчетаБУ;
				Если ТЗРНаСчете15 И (НЕ СтрокаТовары.СчетУчетаБУ.Забалансовый) Тогда
					Проводка.СчетДт  = УправлениеЗапасамиРасширеннаяАналитика.ОпределитьСубсчетСчета15(Проводка.СчетДт);
				КонецЕсли;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТовары.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтрокаТовары.Склад);
				
				// Для товаров, принятых на комиссию партия прописывается всегда 
				Если (Проводка.СчетДт.Количественный) Тогда
					Проводка.КоличествоДт = СтрКоличество;
				КонецЕсли;
				Проводка.Сумма = ?(СтрокаТовары.СчетУчетаБУ.Забалансовый, СтрСуммаБУ + СтрНДС, СтрСуммаБУ);
				
				// Проверка - вид Операции - комиссия
				Если СтрокаТовары.СчетУчетаБУ.Забалансовый Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
					
				Иначе
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					Если Проводка.СчетКт.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И
					(НЕ СтрокаТовары.СчетУчетаБУ.Забалансовый) Тогда
					
					СуммаНУ = ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, СтрСуммаБУ + СтрНДС, СтрСуммаБУ);
					
					Проводка 			 = ПроводкиНУ.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = Содержание;
					
					Проводка.СчетДт      = СтрокаТовары.СчетУчетаНУ;
					Если ТЗРНаСчете15 Тогда
						Проводка.СчетДт  = УправлениеЗапасамиРасширеннаяАналитика.ОпределитьСубсчетСчета15(Проводка.СчетДт);
					КонецЕсли;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТовары.Номенклатура);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СтрокаТовары.Склад);
					
					// Для товаров, принятых на комиссию партия прописывается всегда 
					Если (Проводка.СчетДт.Количественный) Тогда
						Проводка.КоличествоДт = СтрКоличество;
					КонецЕсли;
					Проводка.Сумма 		= СуммаНУ;
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
					// Проверка - вид Операции - комиссия
					Если (УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТовары.СчетУчетаНУ)) Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
						
					Иначе
						Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
						
						Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТовары.СчетУчетаБУ.Забалансовый Тогда
			Продолжить;
		КонецЕсли;
		
		Если К2 <> 0 И К1 <> 1 Тогда 
			
			СтрКоличество 	= Окр(К2*СписатьПоСтрКоличество,3,1);
			СтрСуммаБУ		= Окр(К2*СписатьПоСтрСуммаБУ,2,1);
			СтрНДС			= Окр(К2*СписатьПоСтрНДС,2,1);
			СтрСуммаВал		= Окр(К2*СписатьПоСтрСуммаВал,2,1);
			
			СписатьПоСтрКоличество 	= СписатьПоСтрКоличество - СтрКоличество;
			СписатьПоСтрСуммаБУ		= СписатьПоСтрСуммаБУ - СтрСуммаБУ;
			СписатьПоСтрНДС			= СписатьПоСтрНДС - СтрНДС;
			СписатьПоСтрСуммаВал	= СписатьПоСтрСуммаВал - СтрСуммаВал;
			
			Если СтрСуммаБУ <> 0 ИЛИ СтрНДС <> 0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = Содержание;
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаТовары.Номенклатура.НоменклатурнаяГруппа);
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
				КонецЕсли;
				
				Проводка.Сумма = СтрСуммаБУ;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					
					СуммаНУ = ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, СтрСуммаБУ + СтрНДС, СтрСуммаБУ);
					
					Проводка = ПроводкиНУ.Добавить();
					Проводка.Период       = СтруктураШапкиДокумента.Дата;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = Содержание;
					
					Проводка.СчетДт       = ПланыСчетов.Налоговый.СебестоимостьПродаж;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаТовары.Номенклатура.НоменклатурнаяГруппа);
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
					Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
					Проводка.Сумма = СуммаНУ;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если К3 <> 0 И К2 <> 1 Тогда 
			
			СтрКоличество 	= Окр(К3*СписатьПоСтрКоличество,3,1);
			СтрСуммаБУ		= Окр(К3*СписатьПоСтрСуммаБУ,2,1);
			СтрНДС			= Окр(К3*СписатьПоСтрНДС,2,1);
			СтрСуммаВал		= Окр(К3*СписатьПоСтрСуммаВал,2,1);
		
			СписатьПоСтрКоличество 	= СписатьПоСтрКоличество - СтрКоличество;
			СписатьПоСтрСуммаБУ		= СписатьПоСтрСуммаБУ - СтрСуммаБУ;
			СписатьПоСтрНДС			= СписатьПоСтрНДС - СтрНДС;
			СписатьПоСтрСуммаВал	= СписатьПоСтрСуммаВал - СтрСуммаВал;
			
			Если СтрСуммаБУ < 0 Тогда //Доходы
				Проводка 				= ПроводкиБУ.Добавить();
				Проводка.Период       	= СтруктураШапкиДокумента.Дата;
				Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  	= Содержание;
				
				Проводка.СчетКт      	= ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяПрочихДоходовИРасходов);
				
				Проводка.СчетДт 		= СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = - СтрСуммаВал;
				КонецЕсли;
				
				Проводка.Сумма = - СтрСуммаБУ;
								
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					//Увеличение налоговой базы должно быть отражено в прошлом периоде
					//Отразим постоянные разницы, поскольку в БУ доходы отражены как внереализационные, а в НУ будут сторнированы как доходы от реализации
					Проводка 				= ПроводкиНУ.Добавить();
					Проводка.Период       	= СтруктураШапкиДокумента.Дата;
					Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  	= Содержание;
					
					Проводка.СчетКт      	= ПланыСчетов.Налоговый.ВнереализационныеДоходы;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяПрочихДоходовИРасходов);
					
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					Проводка.Сумма = - СтрСуммаБУ;
					
					//Корректировка фин. результата
					Проводка 				= ПроводкиНУ.Добавить();
					Проводка.Период       	= СтруктураШапкиДокумента.ДокументПоступленияДата;
					Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
					
					СуммаНУ = ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, СтрСуммаБУ + СтрНДС, СтрСуммаБУ);
					
					Проводка.Содержание   = Содержание;
					
					Проводка.СчетДт       = ПланыСчетов.Налоговый.СебестоимостьПродаж;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаТовары.Номенклатура.НоменклатурнаяГруппа);
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
					Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
					Проводка.Сумма = СуммаНУ;
					
					Проводка 				= ПроводкиНУ.Добавить();
					Проводка.Период       	= СтруктураШапкиДокумента.ДокументПоступленияДата;
					Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  	= Содержание;
					
					Проводка.СчетДт       	= ПланыСчетов.Налоговый.ПрибыльУбытокОтПродаж;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаТовары.Номенклатура.НоменклатурнаяГруппа);
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
					Проводка.СчетКт 		= ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ПрибылиИУбытки", Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
					Проводка.Сумма = - СуммаНУ;
															
				КонецЕсли;
			ИначеЕсли СтрСуммаБУ > 0 Тогда
				Проводка 				= ПроводкиБУ.Добавить();
				Проводка.Период       	= СтруктураШапкиДокумента.Дата;
				Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  	= Содержание;
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяПрочихДоходовИРасходов);
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
				КонецЕсли;
				
				Проводка.Сумма = СтрСуммаБУ;

				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
										
					Проводка 				= ПроводкиНУ.Добавить();
					Проводка.Период       	= СтруктураШапкиДокумента.Дата;
					Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  	= Содержание;
					
					Проводка.СчетДт      	= ПланыСчетов.Налоговый.ВнереализационныеРасходы;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяПрочихДоходовИРасходов);
					
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					Проводка.Сумма 		= СтрСуммаБУ;
				КонецЕсли;
			КонецЕсли;			
			
		КонецЕсли;
		
		СформироватьДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, СтрокаТовары, Содержание, ПроводкиБУ, Отказ, Заголовок);
		
	КонецЦикла;
	
	Для Каждого СтрокаУслуги Из ТаблицаПоУслугам Цикл
		
		Содержание  = СтрокаУслуги.Содержание;
		
		СтрСуммаБУ		= СтрокаУслуги.СуммаБУ;
		СтрНДС			= СтрокаУслуги.НДС;
		СтрСуммаВал		= СтрокаУслуги.СуммаВал;
		СтрСуммаНУ 		= ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, СтрСуммаБУ + СтрНДС, СтрСуммаБУ);
		
		Если Год(СтруктураШапкиДокумента.ДокументПоступленияДата) < Год(СтруктураШапкиДокумента.Дата) Тогда
			
			Если СтрСуммаБУ < 0 Тогда //Доходы
				Проводка 				= ПроводкиБУ.Добавить();
				Проводка.Период 		= СтруктураШапкиДокумента.Дата;
				Проводка.Организация 	= СтруктураШапкиДокумента.Организация;
				Проводка.Содержание 	= Содержание;
				
				Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяПрочихДоходовИРасходов);
				
				Проводка.СчетДт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если Проводка.СчетДт.Валютный Тогда
					Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт = -СтрСуммаВал;
				КонецЕсли;
				
				Проводка.Сумма = -СтрСуммаБУ;
								
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					//Увеличение налоговой базы должно быть отражено в прошлом периоде
					//Отразим постоянные разницы, поскольку в БУ доходы отражены как внереализационные, а в НУ будут сторнированы как доходы от реализации
					Проводка 				= ПроводкиНУ.Добавить();
					Проводка.Период       	= СтруктураШапкиДокумента.Дата;
					Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  	= Содержание;
					
					Проводка.СчетКт      	= ПланыСчетов.Налоговый.ВнереализационныеДоходы;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяПрочихДоходовИРасходов);
					
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					Проводка.Сумма = - СтрСуммаБУ;
					
					//Корректировка фин. результата
					Проводка 				= ПроводкиНУ.Добавить();
					Проводка.Период       	= СтруктураШапкиДокумента.ДокументПоступленияДата;
					Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   	= Содержание;
					
					СуммаНУ = ?(СтруктураШапкиДокумента.НДСВключенВСтоимость, СтрСуммаБУ + СтрНДС, СтрСуммаБУ);
					
					Проводка.СчетДт       = ПланыСчетов.Налоговый.СебестоимостьПродаж;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаУслуги.Номенклатура.НоменклатурнаяГруппа);
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
					Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					Проводка.Сумма = СуммаНУ;
					
					Проводка 				= ПроводкиНУ.Добавить();
					Проводка.Период       	= СтруктураШапкиДокумента.ДокументПоступленияДата;
					Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  	= Содержание;
					
					Проводка.СчетДт       	= ПланыСчетов.Налоговый.ПрибыльУбытокОтПродаж;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаУслуги.Номенклатура.НоменклатурнаяГруппа);
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
					Проводка.СчетКт 		= ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ПрибылиИУбытки", Перечисления.ПрибылиИУбытки.ПрибыльУбытокОтПродаж);
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					Проводка.Сумма = - СуммаНУ;
															
				КонецЕсли;
            ИначеЕсли СтрСуммаБУ > 0 Тогда
				Проводка 				= ПроводкиБУ.Добавить();
				Проводка.Период       	= СтруктураШапкиДокумента.Дата;
				Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  	= Содержание;
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяПрочихДоходовИРасходов);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПодразделениеОрганизации", СтрокаУслуги.ПодразделениеОрганизации); // Шевченков ;53448 20160616
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
				КонецЕсли;
				
				Проводка.Сумма = СтрСуммаБУ;

				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
										
					Проводка 				= ПроводкиНУ.Добавить();
					Проводка.Период       	= СтруктураШапкиДокумента.Дата;
					Проводка.Организация  	= СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  	= Содержание;
					
					Проводка.СчетДт      	= ПланыСчетов.Налоговый.ВнереализационныеРасходы;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтруктураШапкиДокумента.СтатьяПрочихДоходовИРасходов);
					
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					Проводка.Сумма 		= СтрСуммаБУ;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Месяц(СтруктураШапкиДокумента.ДокументПоступленияДата) < Месяц(СтруктураШапкиДокумента.Дата)
			И СтруктураШапкиДокумента.СпособОтраженияУслугТекущегоГода = 0 Тогда
			
			Если СтрСуммаБУ <> 0 Тогда
				Проводка = ПроводкиБУ.Добавить();
				Проводка.Период       = СтруктураШапкиДокумента.Дата;
				Проводка.Организация  = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание   = Содержание;
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаУслуги.Номенклатура.НоменклатурнаяГруппа);
				
				Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
				
				Если Проводка.СчетКт.Валютный Тогда
					Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
				КонецЕсли;
				
				Проводка.Сумма = СтрСуммаБУ;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					
					Проводка 			  = ПроводкиНУ.Добавить();
					Проводка.Период       = СтруктураШапкиДокумента.Дата;
					Проводка.Организация  = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание   = Содержание;
					
					Проводка.СчетДт       = ПланыСчетов.Налоговый.СебестоимостьПродаж;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"НоменклатурныеГруппы", СтрокаУслуги.Номенклатура.НоменклатурнаяГруппа);
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
					Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент, Истина, Заголовок);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
					Проводка.Сумма = СтрСуммаНУ;
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Если СтрСуммаБУ <> 0 Тогда
				СодержаниеПроводки = СтрокаУслуги.Содержание;
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = СтруктураШапкиДокумента.Дата;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = СодержаниеПроводки;
				Проводка.Сумма       = СтрСуммаБУ;
				
				Проводка.СчетДт          = СтрокаУслуги.СчетЗатрат;
				
				ПроизводственныеРасходыБУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаУслуги.СчетЗатрат, "Хозрасчетный");
				
				Если ПроизводственныеРасходыБУ Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтрокаУслуги.ПодразделениеОрганизации);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаУслуги.НоменклатурнаяГруппа);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаУслуги.СтатьяЗатрат);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаУслуги.ОбъектСтроительства);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", СтрокаУслуги.СпособСтроительства);
				Иначе
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаУслуги.Субконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаУслуги.Субконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаУслуги.Субконто3);
				КонецЕсли;
								
				Если НЕ СтрокаУслуги.СчетЗатрат.Забалансовый Тогда
					
					Проводка.СчетКт = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					
					Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
						Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = СтрСуммаВал;
					КонецЕсли;
				Конецесли;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СтрСуммаНУ <> 0 Тогда
					
					Проводка = ПроводкиНУ.Добавить();
					
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = СодержаниеПроводки;
					Проводка.Сумма       = СтрСуммаНУ;
					
					Проводка.СчетДт = СтрокаУслуги.СчетЗатратНУ;
					Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
					
					ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтрокаУслуги.СчетЗатратНУ, "Налоговый");
					
					Если ПроизводственныеРасходыНУ Тогда
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтрокаУслуги.ПодразделениеОрганизации);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаУслуги.НоменклатурнаяГруппа);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтрокаУслуги.СтатьяЗатрат);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаУслуги.ОбъектСтроительства);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СпособыСтроительства", СтрокаУслуги.СпособСтроительства);
					Иначе
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,1, СтрокаУслуги.Субконто1);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,2, СтрокаУслуги.Субконто2);
						БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,3, СтрокаУслуги.Субконто3);
					КонецЕсли;
		
					Проводка.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					Проводка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;	
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СформироватьДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, СтрокаУслуги, Содержание, ПроводкиБУ, Отказ, Заголовок);
		
	КонецЦикла
		
КонецПроцедуры

Процедура СформироватьДвиженияРегистровПодсистемыНДС(СтруктураШапкиДокумента, СтрокаТаблицы, Содержание, Проводки, Отказ, Заголовок)
	
	НДС 	= СтрокаТаблицы.НДС;
	НДСВал  = СтрокаТаблицы.НДСВал;
	
	Если СтруктураШапкиДокумента.УчитыватьНДС И НДС <> 0 Тогда

		НалоговыйАгентЗаСчетСобственныхСредств = УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(СтрокаТаблицы.ВидЦенности);
			
		Проводка = Проводки.Добавить();

		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = Содержание;
		
		Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНДС;
		
		СубконтоСФПолученные = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение, СтруктураШапкиДокумента.Ссылка, УчетНДС.ПолучитьИсправляемыйДокументПоступления(СтруктураШапкиДокумента.ДокументОснование));
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"СФПолученные", СубконтоСФПолученные, Истина, Заголовок);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты", СтруктураШапкиДокумента.Контрагент,Истина);
		
		Если СтрокаТаблицы.ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные Тогда
			
			СубконтоОбСтр = СтрокаТаблицы.СчетЗатрат.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства,"ВидСубконто");
			Если СубконтоОбСтр = Неопределено Тогда
				ОбщегоНазначения.СообщитьОбОшибке("На счете затрат отсутствует вид субконто <" + Строка(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства) + ">. Субконто для счета учета НДС не может быть заполнено.",, Заголовок);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт, "ОбъектыСтроительства", СтрокаТаблицы["Субконто"+СубконтоОбСтр.НомерСтроки], Истина, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не НалоговыйАгентЗаСчетСобственныхСредств 
			Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
			// Проводка при исполнении обязанностей налогового агента
			Проводка.СчетКт       = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка.ВалютнаяСуммаКт = НДСВал;
			КонецЕсли;
		Иначе
			Проводка.СчетКт       = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",СтруктураШапкиДокумента.ДоговорКонтрагента);
		КонецЕсли;

		Проводка.Сумма       = НДС;

		
		Если СтруктураШапкиДокумента.УчетАгентскогоНДС
			И (Не НалоговыйАгентЗаСчетСобственныхСредств 
				Или Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате) Тогда 

			// Нужно дополнительно сформировать проводку по начислению НДС налогового агента
			Проводка2 = Проводки.Добавить();

			Проводка2.Период          = СтруктураШапкиДокумента.Дата;
			Проводка2.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка2.Содержание      = "Начислен НДС в качестве налогового агента";

			Проводка2.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Контрагенты",        СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетДт,Проводка2.СубконтоДт,"Договоры",           СтруктураШапкиДокумента.ДоговорКонтрагента);
			
			Если СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
				Проводка2.ВалютаДт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
				Проводка2.ВалютнаяСуммаДт = НДСВал;
			КонецЕсли;
			
			Если Не СтруктураШапкиДокумента.НалоговыйАгентПоОплате Тогда
				Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.НДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			Иначе
				Проводка2.СчетКт          = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента;
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка2.СчетКт,Проводка2.СубконтоКт,"Договоры", СтруктураШапкиДокумента.ДоговорКонтрагента);
			КонецЕсли;
			
			Проводка2.Сумма       = НДС;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мИспользоватьРасширеннуюАналитику 			 = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат");
мДатаНачалаИспользованияРасширеннойАналитики = глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат");

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мУказаниеПроектовВТабличнойЧастиДокументов = УправлениеПроектами.УказаниеПроектовВТабличнойЧастиДокументов();

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Поступление");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПоставщику");

мСтруктураПараметровДляПолученияДоговора = ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();

мУказаниеСкладовВТЧ = Истина;