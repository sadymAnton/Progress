Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета;

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  НазваниеМакета - строка, название макета.
	//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли;
	КонецЕсли; 
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект,, Ссылка));
		
КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати
	//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
	Возврат Новый Структура();
		
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
#КонецЕсли
 
Процедура ОбработкаПроведения(Отказ, Режим)
 	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = НСтр("ru = 'Проведение документа """ + СокрЛП(Ссылка) + """: '");
	
		
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке(),
	ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект), мВалютаРегламентированногоУчета);
	
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	//Blik 211216 57270 проверка по заказу поставщика н
	Если ЭтоЗаданиеПоПоставщикам()  Тогда
		ПроверитьСоответствиеВидаОперацииИУсловийпоставкиДляПоставщика(Отказ,Заголовок);
	КонецЕсли;
	//Blik 211216 57270 к
	
	//Blik 65458 210817 н
	Если ЭтоЗаданиеПоКопекингу()  Тогда
		ПроверитьСоответствиеВидаОперацииИУсловийпоставкиДляКопекинга(Отказ,Заголовок);
	КонецЕсли;
	//Blik 65458 210817к
	
	ТаблицаДвижений = ПолучитьТаблицуДвижений(СтруктураШапкиДокумента);	
		
	Если НЕ Отказ И Не СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Отменено Тогда
		//m.ionov@a-prof.ru 13.02.2015
		/// Кунов О.В., 17.06.2015 - 40343
		//начало изменений Ожиганов 23.07.2015 оптимизация задания на перевозу	 
		//Если Не ЭтоЗаданиеПоСП() И ЗаданиеНаПодбор.Товары.Количество() = 0 Тогда
		//Blik 65458 210817 для заданий по копекенгу не требуется задание на подбор н
		//Если Не ЭтоЗаданиеПоСП() и Не ЭтоЗаданиеПоПоставщикам() и не ЭтоЗаданиеПоКопекингу() Тогда  //Blik 57270 271016 не проверяем по поставщикам
		Если Не ЭтоЗаданиеПоСП() и не ЭтоЗаданиеПоПоставщикам() Тогда
		//Blik 65458 210817 к
					ПРГКоЛВоСтрок  = Новый Запрос("ВЫБРАТЬ
			                              |	СП_ЗаданиеНаПодборТовары.Ссылка,
			                              |	ЕСТЬNULL(КОЛИЧЕСТВО(*), 0) КАК КолВо
			                              |ИЗ
			                              |	Документ.СП_ЗаданиеНаПодбор.Товары КАК СП_ЗаданиеНаПодборТовары
			                              |ГДЕ
			                              |	СП_ЗаданиеНаПодборТовары.Ссылка = &Ссылка
			                              |
			                              |СГРУППИРОВАТЬ ПО
			                              |	СП_ЗаданиеНаПодборТовары.Ссылка");
										  
			ПРГКоЛВоСтрок.УстановитьПараметр("Ссылка",ЗаданиеНаПодбор);
			Выборка = ПРГКоЛВоСтрок.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если  Выборка.КолВо = 0 Тогда
				//Если  ЗаданиеНаПодбор.Товары.Количество() = 0 Тогда
			///
					ОбщегоНазначения.СообщитьОбОшибке("Нельзя формировать задание на перевозку по пустому заданию на подбор " + СокрЛП(ЗаданиеНаПодбор),Отказ,Заголовок);
					Возврат;
				КонецЕсли;
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Нельзя формировать задание на перевозку по пустому заданию на подбор " + СокрЛП(ЗаданиеНаПодбор),Отказ,Заголовок);
			КонецЕсли;	
			//конец изменений 
		КонецЕсли;
		//----m.ionov@a-prof.ru---
		
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаДвижений, Отказ);
	КонецЕсли;
	
	//Сделаем переменные доступными из подписок на события
	ДополнительныеСвойства.Вставить("СтруктураШапкиДокумента", СтруктураШапкиДокумента);
	ДополнительныеСвойства.Вставить("СтруктураТабличныхЧастей", Новый Структура("ТаблицаДвижений", ТаблицаДвижений));

КонецПроцедуры

Функция ПолучитьТаблицуДвижений(СтруктураШапкиДокумента)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка КАК ЗаданиеНаПеревозку,
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.Отделение,
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.Склад,
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.Получатель,
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.АдресПоставки,
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.Заказ,
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.ЗаданиеНаПодбор,
				   //Blik 09116 57270 н
				   //|	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.ВесПлан,
				   //|	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.ВесБруттоПлан,
				   //|	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.ОбъемПлан,
				   |	ВЫБОР
				   |		КОГДА ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
				   |			ТОГДА ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.ТП_ВесНетто
				   |		ИНАЧЕ ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.ВесПлан
				   |	КОНЕЦ КАК ВесПлан,
				   |	ВЫБОР
				   |		КОГДА ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
				   |			ТОГДА ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.ТП_ВесБрутто
				   |		ИНАЧЕ ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.ВесБруттоПлан
				   |	КОНЕЦ КАК ВесБруттоПлан,
				   |	ВЫБОР
				   |		КОГДА ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
				   |			ТОГДА ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.ТП_Объем
				   |		ИНАЧЕ ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.ОбъемПлан
				   |	КОНЕЦ КАК ОбъемПлан,
				   |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.КоличествоМестПлан,
				   //|	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.КоличествоПаллетоМестПлан,
				   |	ВЫБОР
				   |		КОГДА ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика)
				   |			ТОГДА ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка.ТП_КоличествоПалеттоМест
				   |		ИНАЧЕ ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.КоличествоПаллетоМестПлан
				   |	КОНЕЦ КАК КоличествоПаллетоМестПлан,
				   //Blik 09116 57270 к
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.ВесФакт,
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.ВесБруттоФакт,
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.ОбъемФакт,
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.КоличествоМестФакт,
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.КоличествоПаллетоМестФакт
	               |ИЗ
	               |	Документ.ПТЛ_ЗаданиеНаПеревозку.СоставЗадания КАК ПТЛ_ЗаданиеНаПеревозкуСоставЗадания
	               |ГДЕ
	               |	ПТЛ_ЗаданиеНаПеревозкуСоставЗадания.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоЗаданиюНаПеревозку, Отказ)
	
	//Движения по регистру накопления "ПТЛ_ЗаданияНаПеревозку"
	НаборДвижений = Движения.ПТЛ_ЗаданияНаПеревозку;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоЗаданиюНаПеревозку, ТаблицаДвижений);
	
	// Недостающие поля.
	//ТаблицаДвижений.ЗаполнитьЗначения(Сценарий, "Сценарий");
	
	НаборДвижений.мПериод = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		
		Движения.ПТЛ_ЗаданияНаПеревозку.ВыполнитьДвижения();
		
	КонецЕсли;
    			
КонецПроцедуры

Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	
	//начало изменений Ожиганов А. 15.12.2016 б/н исправление ошибки при записи статусов в пределах секунды
	ТекДата = ТекущаяДата();
	КонДня = КонецДня(ТекущаяДата());	
	//конец изменений 
	
	//Движения по регистру накопления "АП_СтатусыДокументов"
	//начало изменений Ожиганов А. 15.12.2016 б/н исправление ошибки при записи статусов в пределах секунды
	//ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(КонДня, Новый Структура("Документ", Ссылка));
	//конец изменений 
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		//начало изменений Ожиганов А. 15.12.2016 б/н исправление ошибки при записи статусов в пределах секунды
		//СформируемЗаписьПоРегиструСтатусы();
		СформируемЗаписьПоРегиструСтатусы(ТекДата);
		//конец изменений 
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = СтатусДокумента Тогда
		//начало изменений Ожиганов А. 15.12.2016 б/н исправление ошибки при записи статусов в пределах секунды
	    //СформируемЗаписьПоРегиструСтатусы();
		СформируемЗаписьПоРегиструСтатусы(Макс(ДанныеПоСтатусу[0].Период,ТекДата));
		//конец изменений 
	КонецЕсли; 
	
КонецПроцедуры

//начало изменений Ожиганов А. 15.12.2016 б/н исправление ошибки при записи статусов в пределах секунды
//Процедура СформируемЗаписьПоРегиструСтатусы()
Процедура СформируемЗаписьПоРегиструСтатусы(ТекДата)
//конец изменений 	

	мДатаЗаписи = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	НаборЗаписей.Прочитать();
	
	//начало изменений Ожиганов А. 15.12.2016 б/н исправление ошибки при записи статусов в пределах секунды
	Пока НаборЗаписей.Количество() > 0 Цикл
	
		мДатаЗаписи  = мДатаЗаписи + 1;
		НаборЗаписей.Очистить();
		
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
		
		НаборЗаписей.Прочитать();
	КонецЦикла;
	//конец изменений 
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = СтатусДокумента;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры  

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	ПРГПростоЗаписать = Ложь;
	Если ДополнительныеСвойства.Свойство("ПРГПростоЗаписать",ПРГПростоЗаписать) Тогда
		Если ПРГПростоЗаписать Тогда
			возврат;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 
	
	
	///начало изменений
	////m.ionov@a-prof.ru 01.02.2015
	//Если Заказ = Неопределено Тогда
	//	Номер = "Не задан";
	//ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
	//	Номер = Заказ.Номер;
	//Иначе
	//	Номер = СокрЛП(Заказ.Номер) + "M";
	//КонецЕсли;
	////----m.ionov@a-prof.ru---
	//Blik 57270 271016 н номер не копируем
	Если ЭтоЗаданиеПоПоставщикам() Тогда
	Иначе
	//Blik 57270 271016 к
		мНомер = CформироватьНомерЗаданияНаПодбор(Заказ); 
		Если СокрЛП(мНомер) <> СокрЛП(Номер) тогда
			Номер = СокрЛП(мНомер);
		КонецЕсли;	
	КонецЕсли; //Blik 57270 271016 
	//конец изменений
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	//m.ionov@a-prof.ru 15.10.2014
	ЗаполнитьДопПоля();
	
	Если Не ЭтоНовый() Тогда
		РазрешитьЗапись = Ложь;
		Если ДополнительныеСвойства.Свойство("РазрешитьЗапись", РазрешитьЗапись) = Ложь Тогда
			РазрешитьЗапись = Ложь;
		КонецЕсли;
		
		Если Не РазрешитьЗапись Тогда
			
			Отказ = Не АП_ОбщегоНазначенияСервер.МожноМенятьЗаданиеНаПеревозку(Ссылка);
			
			Если Отказ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Задание " + СокрЛП(Ссылка) + " запрещено менять, так как есть введенные документы на основании", Отказ);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если Не Отказ и Не СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Отменено
		и Не СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.НеВыполнено Тогда
		ЕстьДругие = АП_ОбщегоНазначенияСервер.ПроверкаНаДубльПоЗаданиюНаПеревозку(Заказ, Ссылка);
		Если не ЭтоЗаданиеПоПоставщикам() тогда  //Blik 071116 57270 по поставщикам может быть неск док
			Если ЗначениеЗаполнено(ЕстьДругие) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("По заказу уже есть задание на перевозку " + СокрЛП(ЕстьДругие), Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	#Если Клиент Тогда
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") И НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И НЕ ПометкаУдаления Тогда
		Если Не АП_ОбщегоНазначенияКлиент.ТребуетсяЗаданиеНаПеревозку(Заказ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По " + СокрЛП(Заказ) + " не требуется задание на перевозку!", Отказ);
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
	//----m.ionov@a-prof.ru---   
	
	//m.ionov@a-prof.ru 26.02.2015
	КП_ИтогоВес = СоставЗадания.Итог("ВесБруттоПлан");
	//----m.ionov@a-prof.ru---

КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	Заказ = Неопределено;
	
	ДокументОснование = Основание;
	
	Если ЭтоНовый() Тогда
		СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Открыто;
		Ответственный = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;  
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВнутреннийЗаказ")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Заказ = Основание.Ссылка;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
		Заказ = Основание.Заказ;
	//Blik 251016 57270 н
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Заказ = Основание;
	//Blik 251016 57270 к
	КонецЕсли;
	
	Если Заказ = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не верное основание для создания задания на перевозку", Истина);
		СтандартнаяОбработка = Ложь;
		
		//ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ОтгрузкаКлиенту;
		
	Иначе
		
		//Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") И Не ПроверитьСогласованиеЗаказа(Заказ) Тогда
		//	#Если Клиент Тогда
		//	ОбщегоНазначения.СообщитьОбОшибке("Заказ не согласован, нельзя вводить задание на перевозку!");
		//	#КонецЕсли
		//	СтандартнаяОбработка = Ложь;
		//	Возврат;
		//КонецЕсли;		
		
		ЗаполнитьПоЗаказу();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказу(ПерезаполнитьВсе = Истина) Экспорт
	
	//начало изменений Ожиганов А. 15.12.2016 б/н поправим ошибку, которая возникает в случае пустого заказа
	//начало изменений Ожиганов 22.07.2015 оптимизация задания на перевозу	 
	Если Не ЗначениеЗаполнено(Заказ)  Тогда
		СтруктРекв =  Новый Структура("ЗаданиеНаПодбор,ГородДоставки,ДатаОтгрузкиПлан,ДатаДоставкиПлан,ТипТранспорта,АдресПоставки,ТП_АдресОтгрузки,Получатель");
		для каждого ТекЗнч Из СтруктРекв Цикл
			ЭтотОбъект[ТекЗнч.Ключ] = Неопределено;
		КонецЦикла;	
		возврат ;
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
	//Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
	//конец изменений 	
		ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеНаСклад;
		
		АЗаказ = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Заказ,
		Новый Структура("Организация,ПРГ_ВидОперации,КП_Отделение,КП_Отделение,КП_УсловиеПоставки,КП_ТЭК,КП_АдресДоставкиТЭК,
		|КП_ТипТранспорта,ДатаОтгрузки,КП_ДатаДоставкиТЭК,КП_ДатаДоставки,Контрагент,Грузополучатель,Заказчик,КП_Маршрут,
		|КП_ГородДоставки,КП_Водитель,КП_ТранспортноеСредство,СП_Склад,АдресОтгрузки,Заказчик")); //Blik 150817 добавлен адрес отгрузки
		
		//Blik 150817 65458 н
		Если АЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера Тогда
			 ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера;
			 ТП_АдресОтгрузки = АЗаказ.АдресОтгрузки;
		ИначеЕсли АЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру Тогда
			 ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру;
			 ТП_АдресОтгрузки = АЗаказ.АдресОтгрузки;
		КонецЕсли;
		//Blik 150817 65458 к
		
		Организация = АЗаказ.Организация;
		Отделение = АЗаказ.КП_Отделение;
		
		//{08.09.2015 Островерхий заявка №43562 
		//Склад = АЗаказ.КП_Отделение;
		//Blik 150817 65458 н
		Если АЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера 
			или АЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру Тогда
			Склад = АЗаказ.Заказчик;
			//Blik 150817 65458 к
		Иначе
			Склад = АЗаказ.СП_Склад;
		КонецЕсли;
		//08.09.2015 Островерхий} 
		
		УсловиеПоставки = АЗаказ.КП_УсловиеПоставки;
		
		//m.ionov@a-prof.ru 31.01.2015
		Если УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоТЭК Тогда
			Получатель = АЗаказ.КП_ТЭК;
			АдресПоставки = АЗаказ.КП_АдресДоставкиТЭК;
			
			Если ПерезаполнитьВсе Тогда
				ТипТранспорта = АЗаказ.КП_ТипТранспорта;
			
				ДатаОтгрузкиПлан = АЗаказ.ДатаОтгрузки;
				ДатаДоставкиПлан = АЗаказ.КП_ДатаДоставкиТЭК;
			КонецЕсли;
			
			ГородДоставки = АЗаказ.КП_АдресДоставкиТЭК.НСИ_Город;
		Иначе
			
			Если АЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_ПередачаPOSM
				//{08.09.2015 Островерхий заявка №43562 
				ИЛИ АЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.СП_СписаниеPOSM 
				//08.09.2015 Островерхий} 
				//Blik 150817 65458 н
				или АЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера
				
				или АЗаказ.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру
				//Blik 150817 65458 к
				Тогда
				Получатель = АЗаказ.Контрагент;
			Иначе
				Получатель = АЗаказ.Заказчик;
			КонецЕсли;
			АдресПоставки = АЗаказ.Грузополучатель;
			
			Если ПерезаполнитьВсе Тогда
				ТипТранспорта = АЗаказ.КП_ТипТранспорта;
			
				ДатаОтгрузкиПлан = АЗаказ.ДатаОтгрузки;
				ДатаДоставкиПлан = АЗаказ.КП_ДатаДоставки;

			КонецЕсли;		
				
			Маршрут = АЗаказ.КП_Маршрут;
		
			ГородДоставки = АЗаказ.КП_ГородДоставки;
		КонецЕсли;
		
		Если АЗаказ.КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз Тогда
			ТЭК = АЗаказ.Контрагент;
			Водитель = АЗаказ.КП_Водитель;
			ТранспортноеСредство = АЗаказ.КП_ТранспортноеСредство;
		Иначе
			//ТЭК = Справочники.Контрагенты.ПустаяСсылка();
			//Водитель = Справочники.ПТЛ_Водители.ПустаяСсылка();
			//ТранспортноеСредство = Справочники.ПТЛ_ТранспортныеСредства.ПустаяСсылка();
		КонецЕсли;
		
		//ЗаданиеНаПодбор = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(АЗаказ);
	//Blik 251016 57270 н
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика;
		
		АЗаказ = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Заказ,
		Новый //Структура("Организация,ВидОперации,Контрагент,Склад"));
		Структура("Организация,ВидОперации,ТП_ДатаОтгрузки,ДатаПоступления,Контрагент,Склад"));
		УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаОтПоставщика;
		Организация = АЗаказ.Организация; 
		Склад = АЗаказ.Склад;
		//Отделение = Склад.Отделение;
		//ДатаОтгрузкиПлан = АЗаказ.ТП_ДатаОтгрузки;
		//ДатаДоставкиПлан = АЗаказ.ДатаПоступления;
		Получатель = АЗаказ.Контрагент;
		//начало изменений Ожиганов А. 15.12.2016 б/н поправим ошибку, которая возникает в случае пустого заказа
		 ДокументОснование = Заказ;
		//конец изменений  
		АдресПоставки = Склад.НСИ_АП;
	//Blik 251016 57270 к
	Иначе
		ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ОтгрузкаКлиенту;
		
		//начало изменений Ожиганов 22.07.2015 оптимизация задания на перевозу	 
		АЗаказ = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Заказ,
		Новый Структура("Организация,
		|КП_Отделение,КП_Отделение,СкладГруппа,КП_УсловиеПоставки,КП_ТЭК,КП_АдресДоставкиТЭК,
		|КП_ТипТранспорта,ДатаОтгрузки,КП_ДатаДоставкиТЭК,КП_АдресДоставкиТЭК,Контрагент,Грузополучатель,КП_ГородДоставки,
		|КП_Маршрут,КП_Водитель,КП_ТранспортноеСредство,КП_ДатаДоставки"));
		
		//конец изменений 
		
		
		Организация = АЗаказ.Организация;
		Отделение = АЗаказ.КП_Отделение;
		
		Склад = АЗаказ.СкладГруппа;
		
		
		УсловиеПоставки = АЗаказ.КП_УсловиеПоставки;
		
		//m.ionov@a-prof.ru 31.01.2015
		Если УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоТЭК Тогда
			Получатель = АЗаказ.КП_ТЭК;
			АдресПоставки = АЗаказ.КП_АдресДоставкиТЭК;
			
			Если ПерезаполнитьВсе Тогда
				ТипТранспорта = АЗаказ.КП_ТипТранспорта;
			
				ДатаОтгрузкиПлан = АЗаказ.ДатаОтгрузки;
				ДатаДоставкиПлан = АЗаказ.КП_ДатаДоставкиТЭК;
			КонецЕсли;
			
			ГородДоставки = АЗаказ.КП_АдресДоставкиТЭК.НСИ_Город;	
		Иначе     		
			//{22.04.2015 Островерхий заявка №39185 
			//Если АЗаказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.Дегустация
			//	ИЛИ АЗаказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР Тогда 
			//	Получатель = АЗаказ.КП_Сотрудник;
			//Иначе
				Получатель = АЗаказ.Контрагент;
			//КонецЕсли;
			//22.04.2015 Островерхий} 
							
			АдресПоставки = АЗаказ.Грузополучатель;
			
			Если ПерезаполнитьВсе Тогда
				ТипТранспорта = АЗаказ.КП_ТипТранспорта;
			
				ДатаОтгрузкиПлан = АЗаказ.ДатаОтгрузки;
				ДатаДоставкиПлан = АЗаказ.КП_ДатаДоставки;
			КонецЕсли;
			
			Маршрут = АЗаказ.КП_Маршрут;
			
			ГородДоставки = АЗаказ.КП_ГородДоставки;				
		КонецЕсли;
					
		Если АЗаказ.КП_УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.Самовывоз Тогда
			ТЭК = АЗаказ.Контрагент;
			Водитель = АЗаказ.КП_Водитель;
			ТранспортноеСредство = АЗаказ.КП_ТранспортноеСредство;
		Иначе
			//ТЭК = Справочники.Контрагенты.ПустаяСсылка();
			//Водитель = Справочники.ПТЛ_Водители.ПустаяСсылка();
			//ТранспортноеСредство = Справочники.ПТЛ_ТранспортныеСредства.ПустаяСсылка();
		КонецЕсли;
				  		
	КонецЕсли;
	
	ЗаполнитьДопПоля();
	
	ЗаданиеНаПодбор = АП_ОбщегоНазначенияСервер.ВернутьЗаданиеНаПодоборПоЗаказу(Заказ);
	
	Если ЗначениеЗаполнено(ЗаданиеНаПодбор) Тогда
		
		ЗаполнитьПоЗаданиюНаПодбор(ЗаданиеНаПодбор);	
		//Blik 261016 57270 н
	ИначеЕсли ЭтоЗаданиеПоПоставщикам() Тогда
		ЗаполнитьПоЗаказуПоставщика(Заказ);
		/// Кунов О.В., 17.06.2015 - 40343
	ИначеЕсли ЭтоЗаданиеПоСП() Тогда
		ЗаполнитьПоТабличнойЧастиЗаказа();
		///	
		//Blik 150817 65458 н
	ИначеЕсли ЭтоЗаданиеПоКопекингу() Тогда
		//Blik 150917 65458 н
		ЗаполнитьПоЗаданиюНаПодбор(ЗаданиеНаПодбор);
		//ЗаполнитьПоТабличнойЧастиЗаказа();
		//Blik 150917 65458 к
		//Blik 150817 65458 к	
	Иначе
		СоставЗадания.Очистить(); 			
	КонецЕсли;
	
	Если ПерезаполнитьВсе Тогда
		//ЗаданияНаПеревозку.Очистить();
	КонецЕсли;
	
КонецПроцедуры


/// Кунов О.В., 18.06.2015 - 40343
Процедура ЗаполнитьПоТабличнойЧастиЗаказа() Экспорт
	
	ЗаполнитьПоЗаданиюНаПодбор(Заказ);
	
КонецПроцедуры
///

//Blik 261016 57270 н
Процедура ЗаполнитьПоЗаказуПоставщика(Заказ) Экспорт
	
	 НоваяСтрока = ?(СоставЗадания.Количество() = 0, СоставЗадания.Добавить(), СоставЗадания[0]);
	
	//начало изменений Ожиганов 22.07.2015 оптимизация задания на перевозу	 
	//нужно для того чтобы избавиться от перещаписи из задания на подбор    
	Если не ЭтоНовый() Тогда
		СтруктВесов =  АП_ОбщегоНазначенияКлиент.ПолучитьСтруктуруВесовИКолВоДляЗаказаПоставщикаСоставЗадания(Ссылка);
		СтруктВесов.КоличествоПаллетоМестПлан  = ТП_КоличествоПалеттоМест;
		СтруктВесов.ВесПлан             = ТП_ВесНетто;
		СтруктВесов.ВесБруттоПлан       = ТП_ВесБрутто;
		СтруктВесов.ОбъемПлан           = ТП_Объем;
		//Для Каждого ТекЗнч Из СтруктВесов Цикл
		//	Если НоваяСтрока[ТекЗнч.Ключ] <> СтруктВесов[ТекЗнч.Ключ] Тогда
		//		НоваяСтрока[ТекЗнч.Ключ] = СтруктВесов[ТекЗнч.Ключ];
		//	КонецЕслИ;	
		//КонецЦикла;	
	КонецЕсли;
КонецПроцедуры
 //Blik 261016 57270 к
 
Процедура ЗаполнитьПоЗаданиюНаПодбор(ЗаданиеНаПодбор) Экспорт
	НоваяСтрока = ?(СоставЗадания.Количество() = 0, СоставЗадания.Добавить(), СоставЗадания[0]);
	
	//начало изменений Ожиганов 22.07.2015 оптимизация задания на перевозу	 
	//нужно для того чтобы избавиться от перещаписи из задания на подбор
	СтруктВесов =  АП_ОбщегоНазначенияКлиент.ПолучитьСтруктуруВесовИКолВоДляЗаданияНаПеревозку(ЗаданиеНаПодбор);
	Для Каждого ТекЗнч Из СтруктВесов Цикл
		Если НоваяСтрока[ТекЗнч.Ключ] <> СтруктВесов[ТекЗнч.Ключ] Тогда
			НоваяСтрока[ТекЗнч.Ключ] = СтруктВесов[ТекЗнч.Ключ];
		КонецЕслИ;	
	КонецЦикла;	
	
	
	//ТабВеса = ЗаданиеНаПодбор.Товары.Выгрузить(,"Номенклатура,Количество,КоличествоМест,ЕдиницаИзмерения,ЕдиницаИзмеренияМест");
	//
	//СтуктураВесов = АП_ОбщегоНазначенияКлиент.ПолучитьИтоговыйВес(ТабВеса);
	//НоваяСтрока.ВесПлан = СтуктураВесов.ВесНетто;
	//НоваяСтрока.ВесБруттоПлан = СтуктураВесов.ВесБрутто;
	//НоваяСтрока.ОбъемПлан = СтуктураВесов.Объем;
	//
	//НоваяСтрока.КоличествоМестПлан = ЗаданиеНаПодбор.Товары.Итог("КоличествоМест");
	//
	///// Кунов О.В., 18.06.2015 - 40343
	//Если ТипЗнч(ЗаданиеНаПодбор) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
	//	НоваяСтрока.КоличествоПаллетоМестПлан = ЗаданиеНаПодбор.Заказ.КП_КоличествоПаллетоМест;
	//	ТабВеса = ЗаданиеНаПодбор.Товары.Выгрузить(,"Номенклатура,КоличествоФакт,КоличествоМестФакт,ЕдиницаИзмерения,ЕдиницаИзмеренияМест");
	//	ТабВеса.Колонки.КоличествоФакт.Имя = "Количество";
	//	ТабВеса.Колонки.КоличествоМестФакт.Имя = "КоличествоМест";
	//Иначе
	//	НоваяСтрока.КоличествоПаллетоМестПлан = ЗаданиеНаПодбор.КП_КоличествоПаллетоМест;
	//	ТабВеса = ЗаданиеНаПодбор.Товары.Выгрузить(,"Номенклатура,Количество,КоличествоМест,ЕдиницаИзмерения,ЕдиницаИзмеренияМест");
	//КонецЕсли;
	/////
	//
	//СтуктураВесов = АП_ОбщегоНазначенияКлиент.ПолучитьИтоговыйВес(ТабВеса);
	//НоваяСтрока.ВесФакт = СтуктураВесов.ВесНетто;
	//НоваяСтрока.ВесБруттоФакт = СтуктураВесов.ВесБрутто;
	//НоваяСтрока.ОбъемФакт = СтуктураВесов.Объем;
	//
	///// Кунов О.В., 18.06.2015 - 40343
	//Если ТипЗнч(ЗаданиеНаПодбор) = Тип("ДокументСсылка.СП_ЗаданиеНаПодбор") Тогда
	//	НоваяСтрока.КоличествоМестФакт = ЗаданиеНаПодбор.Товары.Итог("КоличествоМестФакт");
	//	НоваяСтрока.КоличествоПаллетоМестФакт = ЗаданиеНаПодбор.КоличествоПаллетоМест;	
	//Иначе 
	//	НоваяСтрока.КоличествоМестФакт = ЗаданиеНаПодбор.Товары.Итог("КоличествоМест");
	//	НоваяСтрока.КоличествоПаллетоМестФакт = ЗаданиеНаПодбор.КП_КоличествоПаллетоМест;
	//КонецЕсли;
	/////
	//конец изменений 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//начало изменений Ожиганов 26.05.2015 немножко оптимизируем 
	ПРГПростоЗаписать = Ложь;
	Если ДополнительныеСвойства.Свойство("ПРГПростоЗаписать",ПРГПростоЗаписать) Тогда
		Если ПРГПростоЗаписать Тогда
			возврат;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 

	
	Если Не Отказ Тогда
		Если не ЭтоЗаданиеПоПоставщикам() Тогда   //Blik 271016 57270
			МенятьСтатус = Истина;
			Если ДополнительныеСвойства.Свойство("МенятьСтатус", МенятьСтатус) = Ложь Тогда
				МенятьСтатус = Истина;
			КонецЕсли;
			АП_ОбщегоНазначенияСервер.ИзменитьСтатусЗаказа(Заказ, Ссылка, МенятьСтатус);
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		//Запишем изменение статуса
		ЗаписатьИзменениеСтатусов(Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Открыто
		И Не СтатусДокумента = Перечисления.ПТЛ_СтатусыЗаданияНаПеревозку.Отменено Тогда
		Если РольДоступна("АП_Администратор") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение задания на перевозку. Отменить проведение можно только в статусе Открыт или Отменен!", Ложь, "Отмена проведения задания на перевозку");
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение задания на перевозку. Отменить проведение можно только в статусе Открыт или Отменен!", Отказ, "Отмена проведения задания на перевозку");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(АП_ОбщегоНазначенияСервер.ВернутьПланДоставкиПоЗаданию(Ссылка)) Тогда
		Если РольДоступна("АП_Администратор") Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение задания на перевозку. По заданию сформированы документы!", Ложь, "Отмена проведения задания на перевозку");
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Запрещено отменять проведение задания на перевозку. По заданию сформированы документы!", Отказ, "Отмена проведения задания на перевозку");
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

Процедура ЗаполнитьДопПоля() Экспорт
	Если Заказ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Регион = АдресПоставки.НСИ_Регион;
	Если Не ЗначениеЗаполнено(ГородДоставки) Тогда
		ГородДоставки = АдресПоставки.НСИ_Город;
	КонецЕсли;
	
	Если УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоТЭК Тогда
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			//начало изменений Ожиганов 22.07.2015 оптимизация задания на перевозу	 
			АЗаказ = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Заказ,
			Новый Структура("Заказчик,Грузополучатель,КП_ДатаДоставки"));
			//конец изменений  
			КонечныйПолучатель = АЗаказ.Заказчик;
			КонечныйАдресДоставки = АЗаказ.Грузополучатель;
			КонечнаяДатаДоставки  = АЗаказ.КП_ДатаДоставки;
		Иначе
			АЗаказ = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(Заказ,
			Новый Структура("КП_ВидЗаказаПокупателя,КП_Сотрудник,Контрагент,Грузополучатель,КП_ДатаДоставки"));
			Если АЗаказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.Дегустация
				ИЛИ АЗаказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияПР 
				//Blik 71301 171017 н
				ИЛИ АЗаказ.КП_ВидЗаказаПокупателя = Перечисления.КП_ВидыЗаказовПокупателей.ДегустацияС
				//Blik 71301 171017 к
				Тогда
				КонечныйПолучатель = АЗаказ.КП_Сотрудник;
			Иначе
				КонечныйПолучатель = АЗаказ.Контрагент;
			КонецЕсли;
			
			КонечныйАдресДоставки = АЗаказ.Грузополучатель;
			КонечнаяДатаДоставки  = АЗаказ.КП_ДатаДоставки; 
		КонецЕсли;
		//Blik 261016 57270 н
	ИначеЕсли УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаОтПоставщика Тогда
		КонечныйПолучатель = Организация;
		//АдресПоставки = Склад.НСИ_АП;
		КонечныйАдресДоставки = АдресПоставки;
		КонечнаяДатаДоставки  = ДатаДоставкиПлан;
		Заказ_ГородДоставки = АдресПоставки.НСИ_Город;
		ГородДоставки = АдресПоставки.НСИ_Город;
		Отделение = Склад.НСИ_Отделение;
		//Blik 261016 57270  к
		//Blik 150817 65458 н
	ИначеЕсли УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаОтКопекера
		или УсловиеПоставки = Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоКопекера
		Тогда
		КонечныйПолучатель = Организация;
		//АдресПоставки = Склад.НСИ_АП;
		КонечныйАдресДоставки = АдресПоставки;
		КонечнаяДатаДоставки  = ДатаДоставкиПлан;
		Заказ_ГородДоставки = АдресПоставки.НСИ_Город;
		ГородДоставки = АдресПоставки.НСИ_Город;
		Отделение = Склад.НСИ_Отделение;
		//Blik 150817 65458 к
	Иначе
		КонечныйПолучатель = Получатель;
		КонечныйАдресДоставки = АдресПоставки;
		КонечнаяДатаДоставки  = ДатаДоставкиПлан;
	КонецЕсли;
		
КонецПроцедуры

Процедура ВвестиЖурналУчетаАМ(ФормаЗаказа) Экспорт

	Если ЭтоНовый() Или Не Проведен Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Ввести журнал учета можно только после проведения документа!");
		
		Возврат;
	КонецЕсли;
	
	ЖурналУчета = АП_ОбщегоНазначенияСервер.ВернутьЖурналУчетаАМ(Ссылка);
	Если ЖурналУчета = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Задание не включено в план доставки!");
		
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ЖурналУчета) Тогда

		ЖурналУчета = Документы.ПТЛ_ЖурналУчетаВъездаВыездаАМ.СоздатьДокумент();
		ЖурналУчета.Заполнить(Ссылка);
	КонецЕсли;
	
	ЖурналУчета.ПолучитьФорму(,ФормаЗаказа).Открыть();	

КонецПроцедуры

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	
	/// Кунов О.В., 17.06.2015 - 40343
	
	СтрокаОбязательныхПолей = "Заказ, ВидОперации, Отделение, Получатель, СтатусДокумента, Ответственный";
	//Blik 65458 210817 для заданий по копекенгу не требуется задание на подбор н
	//Если Не ЭтоЗаданиеПоСП() и не ЭтоЗаданиеПоПоставщикам() и не ЭтоЗаданиеПоКопекингу() Тогда
	Если Не ЭтоЗаданиеПоСП() и не ЭтоЗаданиеПоПоставщикам() Тогда	
		СтрокаОбязательныхПолей = СтрокаОбязательныхПолей + ", ЗаданиеНаПодбор";
	КонецЕсли;
	//Blik 65458 210817 к
	
	//СтруктураОбязательныхПолей = 
	//Новый Структура("Заказ, ВидОперации, ЗаданиеНаПодбор, 
	//				|Отделение, Получатель, СтатусДокумента, Ответственный");
					
	СтруктураОбязательныхПолей = Новый Структура(СтрокаОбязательныхПолей);
	
	///
	
	// Теперь позовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//m.ionov@a-prof.ru 01.02.2015
	/// Кунов О.В., 17.06.2015 - 40343 //Blik 271016 57270 не проверяем заказ поставщику
	//Blik 65458 210817 для заданий по копекенгу не требуется задание на подбор н
	//Если Не Отказ И Не ЭтоЗаданиеПоСП() и Не ЭтоЗаданиеПоПоставщикам()и не ЭтоЗаданиеПоКопекингу()  Тогда
	///
	Если Не Отказ И Не ЭтоЗаданиеПоСП() и Не ЭтоЗаданиеПоПоставщикам() Тогда
	//Blik 65458 210817 к	
		//начало изменений Ожиганов 23.07.2015 оптимизация задания на перевозу	 
		аЗаданиеНаПодбор = ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(ЗаданиеНаПодбор,Новый Структура("Проведен"));
		//Если Не fЗаданиеНаПодбор.Проведен Тогда
		Если Не аЗаданиеНаПодбор.Проведен Тогда
		//конец изменений  	
			ОбщегоНазначения.СообщитьОбОшибке("Задание " + СокрЛП(Ссылка) + " нельзя провести, так как не проведено задание на подбор", Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	//----m.ionov@a-prof.ru---
    	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

Функция CформироватьНомерЗаданияНаПодбор(Заказ)

	//{02.06.2015 Островерхий заявка №40317 
	тНомерЗадания = "Не задан";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказПокупателя.Ссылка,
		|	ЗаказПокупателя.Номер
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВнутреннийЗаказ.Ссылка,
		|	ВнутреннийЗаказ.Номер + ""М""
		|ИЗ
		|	Документ.ВнутреннийЗаказ КАК ВнутреннийЗаказ
		|ГДЕ
		|	ВнутреннийЗаказ.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Заказ);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		тНомерЗадания = ВыборкаДетальныеЗаписи.Номер;  
	КонецЕсли;

	Возврат тНомерЗадания; 
	//02.06.2015 Островерхий} 

КонецФункции // CформироватьНомерЗаданияНаПодбор(Заказ)

/// Кунов О.В., 18.06.2015 - 40343
Функция ЭтоЗаданиеПоСП() Экспорт
	
	//убрать потом
	
	//начало изменений Ожиганов 22.07.2015 оптимизация задания на перевозу	 
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		возврат ПРГ_ДопФункцииКлиентСервер.ПолучитьСтруктРевизитаЗаказа(ДокументОснование,Новый Структура("КП_Регион")).КП_Регион;
	Иначе
		возврат ложь;
	конецесли 	
	//конец изменений 	
	//Возврат ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПокупателя") И ДокументОснование.КП_Регион;
	//конец изменений 
	
КонецФункции
///
//Blik 271016 57270  н
Функция ЭтоЗаданиеПоПоставщикам() Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		возврат Истина;
	Иначе
		возврат ложь;
	конецесли 	

КонецФункции
//Blik 271016 57270 к

//Blik 150817 65458 н
Функция ЭтоЗаданиеПоКопекингу() Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВнутреннийЗаказ") 
		и (ДокументОснование.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеОтКопекера
		или ДокументОснование.ПРГ_ВидОперации = Перечисления.ПРГ_ВидыОперацийВнутреннегоЗаказа.ПеремещениеККопекеру)
	Тогда
		возврат Истина;
	Иначе
		возврат ложь;
	конецесли 	

КонецФункции
//Blik 150817 65458 к

//Blik 071216 57270 н
Функция ПроверитьСоответствиеОбъемноВесовыхХарактеристик() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ПТЛ_ЗаданиеНаПеревозкуТП_Товары.Количество) КАК Количество,
	|	СУММА(ПТЛ_ЗаданиеНаПеревозкуТП_Товары.ВесНетто) КАК ВесНетто,
	|	СУММА(ПТЛ_ЗаданиеНаПеревозкуТП_Товары.ВесБрутто) КАК ВесБрутто,
	|	СУММА(ПТЛ_ЗаданиеНаПеревозкуТП_Товары.КоличествоПалеттоМест) КАК КоличествоПалеттоМест,
	|	СУММА(ПТЛ_ЗаданиеНаПеревозкуТП_Товары.Объем) КАК Объем,
	|	ПТЛ_ЗаданиеНаПеревозкуТП_Товары.Ссылка
	|ИЗ
	|	Документ.ПТЛ_ЗаданиеНаПеревозку.ТП_Товары КАК ПТЛ_ЗаданиеНаПеревозкуТП_Товары
	|ГДЕ
	|	ПТЛ_ЗаданиеНаПеревозкуТП_Товары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПТЛ_ЗаданиеНаПеревозкуТП_Товары.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтрСообщения = "";
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВесНетто > (ТП_ВесНетто+(ТП_ВесНетто*0.1)) Тогда
			 СтрСообщения = СтрСообщения+" Вес нетто превышает указанный в документе на "+(Выборка.ВесНетто-ТП_ВесНетто)+"!"+Символы.ПС;
		 КонецЕсли;
		 Если Выборка.ВесБрутто > (ТП_ВесБрутто+(ТП_ВесБрутто*0.1)) Тогда
			 СтрСообщения = СтрСообщения+" Вес брутто превышает указанный в документе на "+(Выборка.ВесБрутто-ТП_ВесБрутто)+"!"+Символы.ПС;
		 КонецЕсли;
		// Если Выборка.Объем > (ТП_Объем+(ТП_Объем*0.1)) Тогда
		//	 СтрСообщения = СтрСообщения+" Объем превышает указанный в документе на "+(Выборка.Объем-ТП_Объем)+"!"+Символы.ПС;
		//КонецЕсли;
		Если Выборка.КоличествоПалеттоМест > (ТП_КоличествоПалеттоМест+(ТП_КоличествоПалеттоМест*0.1)) Тогда
			 СтрСообщения = СтрСообщения+" Количество мест превышает указанный в документе на "+(Выборка.КоличествоПалеттоМест-ТП_КоличествоПалеттоМест)+"!"+Символы.ПС;
		КонецЕсли; 
	КонецЦикла;
	Если СтрСообщения<>"" Тогда
		Сообщить("Документ не проведен!! " +СтрСообщения);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
//Blik 071216 57270 к

//Blik 211216 57270 проверка по заказу поставщика н
Функция	ПроверитьСоответствиеВидаОперацииИУсловийпоставкиДляПоставщика(Отказ,Заголовок)
	
	Если (ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика и УсловиеПоставки <> Перечисления.ПТЛ_УсловияПоставки.ДоставкаОтПоставщика)
		Или (ВидОперации <> Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ДоставкаОтПоставщика и  УсловиеПоставки =  Перечисления.ПТЛ_УсловияПоставки.ДоставкаОтПоставщика) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("вид операции не соответствует условию поставки, документ не будет проведен!!!",Отказ,Заголовок);
	КонецЕсли;
	
КонецФункции
//Blik 211216 57270 к

//Blik 65458 210817 н
 Функция ПроверитьСоответствиеВидаОперацииИУсловийпоставкиДляКопекинга(Отказ,Заголовок)
	
	Если (ВидОперации = Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеОтКопекера и УсловиеПоставки <> Перечисления.ПТЛ_УсловияПоставки.ДоставкаОтКопекера)
		Или (ВидОперации <> Перечисления.СП_ВидыОперацииЗаданияНаПодбор.ПеремещениеККопекеру и  УсловиеПоставки =  Перечисления.ПТЛ_УсловияПоставки.ДоставкаДоКопекера) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("вид операции не соответствует условию поставки, документ не будет проведен!!!",Отказ,Заголовок);
	КонецЕсли;
	
КонецФункции
//Blik 65458 210817 к

Функция ПроверитьСогласованиеЗаказа(Заказ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КП_СтатусыСогласованияЗаказаСрезПоследних1.Документ,
	|	КП_СтатусыСогласованияЗаказаСрезПоследних1.СогласованиеБухгалтерией,
	|	КП_СтатусыСогласованияЗаказаСрезПоследних2.СогласованиеКредитнымКонтролем
	|ИЗ
	|	(ВЫБРАТЬ
	|		КП_СтатусыСогласованияЗаказаСрезПоследних.Документ КАК Документ,
	|		КП_СтатусыСогласованияЗаказаСрезПоследних.СогласованиеБухгалтерией КАК СогласованиеБухгалтерией,
	|		КП_СтатусыСогласованияЗаказаСрезПоследних.СогласованиеКредитнымКонтролем КАК СогласованиеКредитнымКонтролем
	|	ИЗ
	|		РегистрСведений.КП_СтатусыСогласованияЗаказа.СрезПоследних(&ДатаСреза, Документ = &Заказ) КАК КП_СтатусыСогласованияЗаказаСрезПоследних
	|	ГДЕ
	|		КП_СтатусыСогласованияЗаказаСрезПоследних.СогласованиеБухгалтерией <> ЗНАЧЕНИЕ(Перечисление.КП_СогласованиеБухгалтерией.ПустаяСсылка)) КАК КП_СтатусыСогласованияЗаказаСрезПоследних1
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КП_СтатусыСогласованияЗаказаСрезПоследних.Документ КАК Документ,
	|			КП_СтатусыСогласованияЗаказаСрезПоследних.СогласованиеБухгалтерией КАК СогласованиеБухгалтерией,
	|			КП_СтатусыСогласованияЗаказаСрезПоследних.СогласованиеКредитнымКонтролем КАК СогласованиеКредитнымКонтролем
	|		ИЗ
	|			РегистрСведений.КП_СтатусыСогласованияЗаказа.СрезПоследних(&ДатаСреза, Документ = &Заказ) КАК КП_СтатусыСогласованияЗаказаСрезПоследних
	|		ГДЕ
	|			КП_СтатусыСогласованияЗаказаСрезПоследних.СогласованиеКредитнымКонтролем <> ЗНАЧЕНИЕ(Перечисление.ПКК_СогласованиеКредитныйКонтролем.ПустаяСсылка)) КАК КП_СтатусыСогласованияЗаказаСрезПоследних2
	|		ПО КП_СтатусыСогласованияЗаказаСрезПоследних1.Документ = КП_СтатусыСогласованияЗаказаСрезПоследних2.Документ");
	
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НеСогласован Или
			Выборка.СогласованиеБухгалтерией = Перечисления.КП_СогласованиеБухгалтерией.НаСогласовании Или
			Выборка.СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НеСогласован Или
			Выборка.СогласованиеКредитнымКонтролем = Перечисления.ПКК_СогласованиеКредитныйКонтролем.НаСогласовании Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
