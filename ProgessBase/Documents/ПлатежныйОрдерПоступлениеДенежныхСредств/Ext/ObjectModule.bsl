Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

// Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

//Определение периода движений документа
Перем ДатаДвижений;

Перем мСтруктураПараметровДенежныхСредств;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет данные по УСН
//
Процедура ЗаполнитьНастройкуКнигиУСН() Экспорт

	Если РучнаяНастройка_УСН Тогда
		ТекстВороса = 
		"Отражение платежа в Книге учета доходов и расходов настроено вручную.
		|Перезаполнить показатели Книги учета доходов и расходов?";
		Если Вопрос(ТекстВороса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			РучнаяНастройка_УСН = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СуммаДляКУДиР = СуммаДокумента;

	Если НЕ ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		КурсВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СуммаДляКУДиР = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР, ВалютаДокумента, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
	КонецЕсли;

	Если НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата) Тогда

		Графа4_УСН      = СуммаДляКУДиР;
		Графа5_УСН      = СуммаДляКУДиР;
		Графа6_УСН      = 0;
		Графа7_УСН      = 0;
		НДС_УСН         = 0;
		ДоходыЕНВД_УСН  = Ложь;
		РасходыЕНВД_УСН = Ложь;
		Содержание_УСН  = "" + ВидОперации + ".";

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
			Содержание_УСН = "Возврат денежных средств поставщиком";
			Графа4_УСН      = 0;
			Графа5_УСН      = 0;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьНастройкуКнигиУСН()

#КонецЕсли

 //Заполняет сумму документа и расшифровку платежа по расчетному документу
 //
Процедура ЗаполнитьПоРасчетномуДокументуУпр() Экспорт
	
	Организация=РасчетныйДокумент.Организация;
	СчетОрганизации=РасчетныйДокумент.СчетОрганизации;
	
	Контрагент=РасчетныйДокумент.Контрагент;
	СчетКонтрагента=РасчетныйДокумент.СчетКонтрагента;
	
	ВалютаДокумента=РасчетныйДокумент.ВалютаДокумента;
	СтруктураКурсаДокумента   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	ВидОперации=РасчетныйДокумент.ВидОперации;
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	ОтраженоВОперУчете          = РасчетныйДокумент.ОтраженоВОперУчете;
	ОтражатьВБухгалтерскомУчете = РасчетныйДокумент.ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете     = РасчетныйДокумент.ОтражатьВНалоговомУчете;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
	
		ТекстЗапроса="ВЫБРАТЬ
		             |	ДенежныеСредстваКПолучениюОстатки.ДокументПолучения,
		             |	ДенежныеСредстваКПолучениюОстатки.СуммаОстаток,
					 |	ДенежныеСредстваКПолучениюОстатки.СтатьяДвиженияДенежныхСредств,
		             |	РасчетныйДокумент.ДоговорКонтрагента,
		             |	РасчетныйДокумент.Сделка,
		             |	РасчетныйДокумент.Ссылка.СуммаДокумента КАК СуммаДокумента,
		             |	РасчетныйДокумент.СуммаПлатежа,
					 |	РасчетныйДокумент.КурсВзаиморасчетов,
		             |	РасчетныйДокумент.КратностьВзаиморасчетов,
		             |	РасчетныйДокумент.СуммаВзаиморасчетов,
		             |	РасчетныйДокумент.СтавкаНДС,
		             |	РасчетныйДокумент.СуммаНДС,
		             |	РасчетныйДокумент.СчетУчетаРасчетовСКонтрагентом,
		             |	РасчетныйДокумент.СчетУчетаРасчетовПоАвансам,
					 |	РасчетныйДокумент.Проект
		             |ИЗ
		             |	РегистрНакопления.ДенежныеСредстваКПолучению.Остатки(, ДокументПолучения=&РасчетныйДокумент) КАК ДенежныеСредстваКПолучениюОстатки
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+РасчетныйДокумент.Метаданные().Имя+".РасшифровкаПлатежа КАК РасчетныйДокумент
		             |		ПО ДенежныеСредстваКПолучениюОстатки.ДокументПолучения = РасчетныйДокумент.Ссылка";
					 
		Запрос=Новый Запрос;
		Запрос.Текст=ТекстЗапроса;
		Запрос.УстановитьПараметр("РасчетныйДокумент",РасчетныйДокумент);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента=Результат.ДоговорКонтрагента;
			СтрокаПлатеж.Сделка=Результат.Сделка;
			СтрокаПлатеж.КурсВзаиморасчетов=Результат.КурсВзаиморасчетов;
			СтрокаПлатеж.КратностьВзаиморасчетов=Результат.КратностьВзаиморасчетов;
			СтрокаПлатеж.СтавкаНДС=Результат.СтавкаНДС;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам=Результат.СчетУчетаРасчетовПоАвансам;
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом=Результат.СчетУчетаРасчетовСКонтрагентом;
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=Результат.СтатьяДвиженияДенежныхСредств;
			СтрокаПлатеж.Проект=Результат.Проект;
			
			КоэффициентПересчета=?(Результат.СуммаДокумента=0,0,Результат.СуммаОстаток/Результат.СуммаДокумента);
			
			СтрокаПлатеж.СуммаПлатежа=Результат.СуммаПлатежа*КоэффициентПересчета;
			СтрокаПлатеж.СуммаВзаиморасчетов=Результат.СуммаВзаиморасчетов*КоэффициентПересчета;
			СтрокаПлатеж.СуммаНДС=Результат.СуммаНДС*КоэффициентПересчета;
			
		КонецЦикла;
		
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
	Иначе
		
		ТекстЗапроса="ВЫБРАТЬ
		             |	ДенежныеСредстваКПолучениюОстатки.СуммаОстаток
		             |ИЗ
		             |	РегистрНакопления.ДенежныеСредстваКПолучению.Остатки(, ДокументПолучения=&РасчетныйДокумент) КАК ДенежныеСредстваКПолучениюОстатки";
					 
		Запрос=Новый Запрос;
		Запрос.Текст=ТекстЗапроса;
		Запрос.УстановитьПараметр("РасчетныйДокумент",РасчетныйДокумент);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			СуммаДокумента=Результат.СуммаОстаток;
			
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
		КонецЕсли;
		
		СчетУчетаРасчетовСКонтрагентом=РасчетныйДокумент.СчетУчетаРасчетовСКонтрагентом;
		СубконтоКт1=РасчетныйДокумент.СубконтоКт1;
	    СубконтоКт2=РасчетныйДокумент.СубконтоКт2;
		СубконтоКт3=РасчетныйДокумент.СубконтоКт3;
		СтатьяДвиженияДенежныхСредств=РасчетныйДокумент.СтатьяДвиженияДенежныхСредств;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоРасчетномуДокументуУпр()

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("СчетОрганизации");
	СтруктураПолей.Вставить("СуммаДокумента");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчетыУпр()

	СтруктураПолей = Новый Структура("Организация, Контрагент, СуммаДокумента, Ответственный");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейРасчетыУпр()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		
		Если Не Отказ Тогда
			
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателя","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;

			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);

	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли; 
	
КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",     ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",       СчетОрганизации);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",              ДатаДвижений);
	мСтруктураПараметровДенежныхСредств.Вставить("ПоРасчетномуДокументу",     НЕ РасчетныйДокумент = Неопределено);
	
	УправлениеДенежнымиСредствами.ПровестиПоступлениеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
		
		// Подготовим структуру таблицы для отражения затрат.
		ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
		
		// Добавим строку в таблицу затрат.
		НоваяСтрока = ТаблицаЗатрат.Добавить();
		НоваяСтрока.Подразделение 			= СтруктураШапкиДокумента.ПодразделениеЗатраты;
		НоваяСтрока.СтатьяЗатрат 			= СтруктураШапкиДокумента.СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа 	= СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		НоваяСтрока.Проект 					= ТаблицаПлатежейУпр[0].Проект;
		
		НоваяСтрока.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтруктураШапкиДокумента.СуммаУслуг,
			СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета
		);
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			СтруктураШапкиДокумента,
			ТаблицаЗатрат
		);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	Иначе
		ВидРасчетовПоОперации = перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	// Бухгалтерские проводки документа
	Если не (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете) Тогда
		Возврат;
	КонецЕсли; 
	
	//начало изменений
	ПРГ_ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
		                      |ИЗ
		                      |	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
		                      |ГДЕ
		                      |	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение");
		Запрос.УстановитьПараметр("Подразделение",Подразделение);							  
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка .Следующий() Тогда
			ПРГ_ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;
		КонецЕсли;
	КонецЕслИ;	
	//конец изменений 
	
	ДатаДока = ДатаДвижений;
	
	ВалютаРег   = мВалютаРегламентированногоУчета;
	ДанныеОВалютеРег   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
	
	ПроводкиБУ  = Движения.Хозрасчетный;
	ПроводкиНУ  = Движения.Налоговый;
	
	РасчетыВВалюте = Ложь;
	СчетДт = УправлениеДенежнымиСредствами.ОпределитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетОрганизации, мВалютаРегламентированногоУчета, РасчетыВВалюте);
	
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Расчеты по кредитам и займам";
		
		Проводка.СчетКт      = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].ДоговорКонтрагента);
		
		Проводка.СчетДт      = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			
			Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалютеРег.Курс, 
			СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалютеРег.Кратность);
		Иначе
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Прочее поступление денежных средств";
		
		Проводка.СчетКт      = СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);
		
		Проводка.СчетДт      = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			СуммаПроводки   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалютеРег.Курс, 
			СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалютеРег.Кратность);
		Иначе
			СуммаПроводки = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		Проводка.Сумма = СуммаПроводки;
		
		// Сформируем проводку по НУ
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
			И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Прочее поступление денежных средств";
			
			Проводка.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ДоговорКонтрагента);

			Проводка.СчетКт = СчетУчетаРасчетовСКонтрагентомНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоНУКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоНУКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоНУКт3);
			
			Проводка.Сумма = СуммаПроводки;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты тогда
		
		СчетДоходов = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		СчетРасходов = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
		
		// расходная часть операции
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Расходы от продажи валюты";
		
		Проводка.СчетКт      = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].ДоговорКонтрагента);
		
		Если Проводка.СчетКт.Валютный Тогда
			Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = РасшифровкаПлатежа[0].СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.СчетДт      = СчетРасходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты);
		//начало изменений 
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПодразделениеОрганизации", ПРГ_ПодразделениеОрганизации);
		//конец изменений 
		
		СуммаРасхода = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(РасшифровкаПлатежа[0].СуммаВзаиморасчетов, 
			СтруктураШапкиДокумента.ВалютаВзаиморасчетов, ВалютаРег,
			КурсНаДатуПриобретенияРеализацииВалюты, ДанныеОВалютеРег.Курс,
			РасшифровкаПлатежа[0].КратностьВзаиморасчетов, ДанныеОВалютеРег.Кратность);
		Проводка.Сумма = СуммаРасхода;
		
		ПроводкаНУ             = Движения.Налоговый.Добавить();
		ПроводкаНУ.Период      = ДатаДока;
		ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
		ПроводкаНУ.Содержание  = "Расходы от продажи валюты";
		ПроводкаНУ.СчетКт      = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Договоры", РасшифровкаПлатежа[0].ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
		ПроводкаНУ.СчетДт      = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, 1, Справочники.ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты);
		ПроводкаНУ.Сумма       = СуммаРасхода;
		ПроводкаНУ.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
		ПроводкаНУ.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
		
		// доходная часть операции
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Доходы от продажи валюты";
		
		Проводка.СчетКт = СчетДоходов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты);
		//начало изменений 
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ПРГ_ПодразделениеОрганизации);
		//конец изменений 
		
		Проводка.СчетДт = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		СуммаДохода    = СтруктураШапкиДокумента.СуммаДокумента;
		Проводка.Сумма = СуммаДохода;
		
		ПроводкаНУ             = Движения.Налоговый.Добавить();
		ПроводкаНУ.Период      = ДатаДока;
		ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
		ПроводкаНУ.Содержание  = "Доходы от продажи валюты";
		ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, 1, Справочники.ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты);
		ПроводкаНУ.СчетДт      = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", РасшифровкаПлатежа[0].ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
		ПроводкаНУ.Сумма = СуммаДохода;
		ПроводкаНУ.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
		ПроводкаНУ.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
		
		// Отражение фин. результата операции в налоговом учете
		ФинРезультат = СуммаДохода - СуммаРасхода;
		Если ФинРезультат <> 0 И СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН Тогда
			
			ПроводкаНУ             = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период      = ДатаДока;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
			
			Если ФинРезультат > 0 Тогда
				
				ПроводкаНУ.Содержание = "Прибыль от продажи валюты";
				
				ПроводкаНУ.СчетКт		= ПланыСчетов.Налоговый.ВнереализационныеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
				
				ПроводкаНУ.СчетДт		= ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", РасшифровкаПлатежа[0].ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				
				ПроводкаНУ.Сумма      = ФинРезультат;
				
				Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
					
					ПроводкаНУ             = Движения.Налоговый.Добавить();
					ПроводкаНУ.Период      = ДатаДока;
					ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Содержание = "Прибыль от продажи валюты";
					ПроводкаНУ.СчетКт		= ПланыСчетов.Налоговый.ВнереализационныеДоходы;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
					ПроводкаНУ.СчетДт		= ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", РасшифровкаПлатежа[0].ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					ПроводкаНУ.Сумма      = - ФинРезультат;
					ПроводкаНУ.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
					ПроводкаНУ.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
				КонецЕсли;
				
				
			Иначе	
				ПроводкаНУ.Содержание = "Убыток от продажи валюты";
				
				ПроводкаНУ.СчетДт		= ПланыСчетов.Налоговый.ВнереализационныеРасходы;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
				
				ПроводкаНУ.СчетКт		= ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Договоры", РасшифровкаПлатежа[0].ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				
				ПроводкаНУ.Сумма      = -ФинРезультат;
				
				Если СтруктураШапкиДокумента.ПоддержкаПБУ18 Тогда
					ПроводкаНУ             = Движения.Налоговый.Добавить();
					ПроводкаНУ.Период      = ДатаДока;
					ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
					ПроводкаНУ.Содержание = "Убыток от продажи валюты";
					ПроводкаНУ.СчетДт		= ПланыСчетов.Налоговый.ВнереализационныеРасходы;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
					ПроводкаНУ.СчетКт		= ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", Контрагент);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Договоры", РасшифровкаПлатежа[0].ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
					ПроводкаНУ.Сумма      = ФинРезультат;
					ПроводкаНУ.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
					ПроводкаНУ.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.НУ;
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты тогда
		
		ДанныеОВалютеРег= МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Приобретение иностранной валюты";
		
		Проводка.СчетКт      = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].ДоговорКонтрагента);
		
		Проводка.СчетДт      = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если Проводка.СчетДт.Валютный Тогда
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		Проводка.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
		СтруктураШапкиДокумента.КурсНаДатуПриобретенияРеализацииВалюты, ДанныеОВалютеРег.Курс,
		СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалютеРег.Кратность);
		
		СуммаИззаРазницыКурсов = РасшифровкаПлатежа[0].СуммаВзаиморасчетов - Проводка.Сумма;
		
		Если ОтражатьРазницуВКурсеВСоставеОперационныхРасходов Тогда
			
			Если СуммаИззаРазницыКурсов > 0 Тогда
				// расход
				СчетРасходов = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Разница курсов при покупке валюты";
				
				Проводка.СчетКт      = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", РасшифровкаПлатежа[0].ДоговорКонтрагента);
				
				Проводка.СчетДт      = СчетРасходов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
				//начало изменений 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПодразделениеОрганизации", ПРГ_ПодразделениеОрганизации);
				//конец изменений 
				
				Проводка.Сумма = СуммаИззаРазницыКурсов;
				
			ИначеЕсли СуммаИззаРазницыКурсов < 0 Тогда
				// доход
				СчетДоходов = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				
				Проводка = ПроводкиБУ.Добавить();
				
				Проводка.Период      = ДатаДока;
				Проводка.Организация = СтруктураШапкиДокумента.Организация;
				Проводка.Содержание  = "Разница курсов при покупке валюты";
				
				Проводка.СчетКт      = СчетДоходов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
				//начало изменений 
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Подразделения", ПРГ_ПодразделениеОрганизации);
				//конец изменений
				
				Проводка.СчетДт      = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].ДоговорКонтрагента);
				
				Проводка.Сумма = -СуммаИззаРазницыКурсов;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И СуммаИззаРазницыКурсов <> 0 Тогда
			
			// Фин. результат  операции
			ПроводкаНУ             = Движения.Налоговый.Добавить();
			ПроводкаНУ.Период      = ДатаДока;
			ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
					
			Если СуммаИззаРазницыКурсов < 0 Тогда
				
				ПроводкаНУ.Содержание = "Прибыль от покупки валюты";
				
				ПроводкаНУ.СчетКт		= ПланыСчетов.Налоговый.ВнереализационныеДоходы;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
				
				ПроводкаНУ.СчетДт		= ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Контрагенты", Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "Договоры", РасшифровкаПлатежа[0].ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				
				ПроводкаНУ.Сумма      = -СуммаИззаРазницыКурсов;
						
				Если НЕ СтруктураШапкиДокумента.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов Тогда
					ПроводкаПР             = Движения.Налоговый.Добавить();
					ПроводкаПР.Период      = ДатаДока;
					ПроводкаПР.Организация = СтруктураШапкиДокумента.Организация;
					ПроводкаПР.Содержание  = "Прибыль от покупки валюты";
					ПроводкаПР.СчетКт	   = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаПР.СчетКт, ПроводкаПР.СубконтоКт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
					
					ПроводкаПР.Сумма       = СуммаИззаРазницыКурсов;
					ПроводкаПР.ВидУчетаКт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
				КонецЕсли;
				
			Иначе
				
				ПроводкаНУ.Содержание = "Убыток от покупки валюты";
				
				ПроводкаНУ.СчетДт		= ПланыСчетов.Налоговый.ВнереализационныеРасходы;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетДт, ПроводкаНУ.СубконтоДт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
				
				ПроводкаНУ.СчетКт		= ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Контрагенты", Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "Договоры", РасшифровкаПлатежа[0].ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаНУ.СчетКт, ПроводкаНУ.СубконтоКт, "УсловияПоступленияИВыбытия", Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
				
				ПроводкаНУ.Сумма      = СуммаИззаРазницыКурсов;
						
				Если НЕ СтруктураШапкиДокумента.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов Тогда
					ПроводкаПР             = Движения.Налоговый.Добавить();
					ПроводкаПР.Период      = ДатаДока;
					ПроводкаПР.Организация = СтруктураШапкиДокумента.Организация;
					ПроводкаПР.Содержание  = "Убыток от покупки валюты";
					ПроводкаПР.СчетДт	   = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
					БухгалтерскийУчет.УстановитьСубконто(ПроводкаПР.СчетДт, ПроводкаПР.СубконтоДт, "ПрочиеДоходыИРасходы", Справочники.ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты);
					ПроводкаПР.Сумма       = -СуммаИззаРазницыКурсов;
					ПроводкаПР.ВидУчетаДт  = Перечисления.ВидыУчетаПоПБУ18.ПР;
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	Иначе
		
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок,СчетДт);
		Если Не (СтруктураПараметровДДС = Ложь) тогда
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям);
		Иначе
			БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенегПрочийПриход(ЭтотОбъект, РасчетыВВалюте, СчетДт, СтруктураШапкиДокумента, Отказ, Заголовок);
		Конецесли;
		
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам 
		и не СуммаУслуг = 0 
		Тогда
		
		ДанныеОВалютеРег= МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
		СуммаУслугРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаУслуг, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
		СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалютеРег.Курс, 
		СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалютеРег.Кратность);
		
		// Подготовим структуру таблицы для отражения затрат.
		ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
		
		// Добавим строку в таблицу затрат.
		НоваяСтрока = ТаблицаЗатрат.Добавить();
		НоваяСтрока.ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизацииЗатраты;
		НоваяСтрока.СтатьяЗатрат 			= СтруктураШапкиДокумента.СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа 	= СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		НоваяСтрока.СчетЗатрат 				= СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		НоваяСтрока.СчетЗатратНУ 			= СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомНУ;
		
		НоваяСтрока.СуммаРегл 				= СуммаУслугРегл;
		НоваяСтрока.СуммаНал 				= СуммаУслугРегл;
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			СтруктураШапкиДокумента,
			ТаблицаЗатрат
		);
		
		// Сформируем проводку по бухгалтерскому учету.
		ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
		
		//Оплата посреднических услуг БУ
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		
		Если ПроизводственныеРасходы Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизацииЗатраты);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтруктураШапкиДокумента.СтатьяЗатрат);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоКт3);
		КонецЕсли;
		
		Проводка.СчетКт      = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", РасшифровкаПлатежа[0].ДоговорКонтрагента);
		
		Проводка.Сумма       = СуммаУслугРегл;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
			И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			
			ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомНУ, "Налоговый");
			
			//Оплата посреднических услуг НУ
			Проводка    = ПроводкиНУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентомНУ;
			
			Если ПроизводственныеРасходыНУ Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизацииЗатраты);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтруктураШапкиДокумента.СтатьяЗатрат);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоНУКт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоНУКт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоНУКт3);
			КонецЕсли;
			
			Проводка.Сумма       = СуммаУслугРегл;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		
		НалоговыйУчетУСН.ПрочееДДС(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок)

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		Сообщить(Заголовок+" 
		|не совпадают сумма документа и ее расшифровка.");

		Отказ = Истина;

	КонецЕсли;

	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(), Отказ, Заголовок);

	Если ОтраженоВОперУчете ИЛИ (ОтражатьВБухгалтерскомУчете И Оплачено) Тогда
		
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчетыУпр(), Отказ, Заголовок);
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
			
			Если Не Отказ Тогда
				УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(Дата, ТаблицаПлатежейУпр, Отказ, Заголовок,,Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
		
		Если ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
			ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам тогда
			Для Каждого Платеж Из РасшифровкаПлатежа Цикл
				ПроверитьЗначение(Платеж.СчетУчетаРасчетовСКонтрагентом,Отказ, Заголовок,"СчетУчетаРасчетовСКонтрагентом");
			КонецЦикла;
			
			Если не СуммаУслуг = 0 тогда 
				СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом", "Не заполнено значение реквизита ""Счет затрат""!");
				СтруктураПолей.Вставить("СтатьяЗатрат");
				СтруктураПолей.Вставить("ПодразделениеОрганизацииЗатраты");
				
				ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
			КонецЕсли;
			
		Иначе
			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       			, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                       			, "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьДенежныеСредстваКомитента"       , "КонтролироватьДенежныеСредстваКомитента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "ВалютаУправленческогоУчета"             		, "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы"           , "КурсВалютыУправленческогоУчета"         		, "КурсВалютыУправленческогоУчета");
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	КонецЕсли;

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;

	Иначе	
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("КурсДокумента"		, КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	, КратностьДокумента);

	ДатаДвижений=УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата,ДатаОплаты);
	СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаДвижений);
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если (Основание <> Неопределено) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание))) Тогда
		
		Если Основание.Метаданные().Реквизиты.Найти("Оплачено") <> Неопределено Тогда
			
			Если Основание.Оплачено Тогда
				Сообщить("Платежный ордер не вводится на основании документов, уже исполненных банком.");
				Возврат;
			КонецЕсли;
			
			РасчетныйДокумент = Основание.Ссылка;
			ДокументОснование = РасчетныйДокумент;
			
			ЗаполнитьПоРасчетномуДокументуУпр();
			
		Иначе
			
			УправлениеДенежнымиСредствами.ЗаполнитьПриходПоОснованию(ЭтотОбъект, Основание, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
			
		КонецЕсли;
		
	КонецЕсли;

	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	Перем Заголовок, СтруктураШапкиДокумента;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	Если (ЗначениеЗаполнено(РасчетныйДокумент)) И РасчетныйДокумент.Оплачено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ: "+Строка(РасчетныйДокумент)+" уже оплачен полностью. Проведение отменено.",Отказ, Заголовок);
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ТаблицаПлатежейУпр=УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(ДатаДвижений,ВалютаДокумента,Ссылка, "ПлатежныйОрдерПоступлениеДенежныхСредств");
	
	ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок);

	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		
		//Проверим на возможность проведения в БУ и НУ
		Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
			Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
				УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
				СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
				мВалютаРегламентированногоУчета, Истина,Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ");
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
	Если (Не РасчетныйДокумент=Неопределено) И (Не Отказ) И (Не РасчетныйДокумент.ЧастичнаяОплата) Тогда
		
		ИзменяемыйДокумент=РасчетныйДокумент.ПолучитьОбъект();
		Попытка
			ИзменяемыйДокумент.Заблокировать();
		Исключение
			Сообщить("Не удалось заблокировать документ "+ИзменяемыйДокумент+". Возможно, его форма открыта");
			Отказ = истина;
			Возврат;
		КонецПопытки;
		ИзменяемыйДокумент.Разблокировать();


		ИзменяемыйДокумент.ЧастичнаяОплата=Истина;
		ИзменяемыйДокумент.Оплачено=Ложь;
		ИзменяемыйДокумент.ДатаОплаты='00010101';
		
		ИзменяемыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Проверим необходимость снятия флага частичной оплаты у расчетного документа
	
	Если Не РасчетныйДокумент=Неопределено Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	ПлатежныйОрдерПоступлениеДенежныхСредств.Ссылка
		             |ИЗ
		             |	Документ.ПлатежныйОрдерПоступлениеДенежныхСредств КАК ПлатежныйОрдерПоступлениеДенежныхСредств
		             |
		             |ГДЕ
		             |	ПлатежныйОрдерПоступлениеДенежныхСредств.Ссылка <> &Ссылка И
					 |  ПлатежныйОрдерПоступлениеДенежныхСредств.РасчетныйДокумент=&РасчетныйДокумент И
		             |	ПлатежныйОрдерПоступлениеДенежныхСредств.Проведен";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Запрос.УстановитьПараметр("РасчетныйДокумент",РасчетныйДокумент);
		
		Результат=Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			
			ИзменяемыйДокумент=РасчетныйДокумент.ПолучитьОбъект();
			
			Попытка
				ИзменяемыйДокумент.Заблокировать();
			Исключение
				Сообщить("Не удалось заблокировать документ "+ИзменяемыйДокумент+". Возможно, его форма открыта");
				Отказ = истина;
				Возврат;
			КонецПопытки;
			ИзменяемыйДокумент.Разблокировать();

			
			ИзменяемыйДокумент.ЧастичнаяОплата=Ложь;		
			ИзменяемыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
			
	Оплачено = Истина;
	ДатаОплаты=Дата;

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные);
