Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ""), Ссылка);

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура();

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, Подразделение, Отделение, Склад, ДатаЗадания, Номенклатура, ЕдиницаИзмерения");
	
	СтруктураОбязательныхПолей.Вставить("Спецификация");
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
    	
	//Проверка подразделения
	Если ЗначениеЗаполнено(СтруктураШапкиДокумента.Подразделение)
		И СтруктураШапкиДокумента.Подразделение.ВидПодразделения <> Перечисления.ВидыПодразделений.ОсновноеПроизводство
		И СтруктураШапкиДокумента.Подразделение.ВидПодразделения <> Перечисления.ВидыПодразделений.ВспомогательноеПроизводство Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("В шапке документа должно быть указано подразделение с видом ""Основное производство"" или ""Вспомогательное производство""!", Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента,РежимПроведения, Отказ, Заголовок);
	
	НаборДвижений   = Движения.ТоварыКПолучениюНаСклады;
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 	
	НоваяСтрока = ТаблицаДвижений.Добавить();
	НоваяСтрока.Номенклатура               = Номенклатура;
	НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
	НоваяСтрока.ДокументПолучения         	= Ссылка;
	НоваяСтрока.ДокументРезерва             = Документы.ЗаказПокупателя.ПустаяСсылка();
	
	НоваяСтрока.Количество                 = Количество*Коэффициент/ ?(СтруктураШапкиДокумента.КоэффициентЕдиницаХраненияОстатков=0 ,1,СтруктураШапкиДокумента.КоэффициентЕдиницаХраненияОстатков);
	
	НоваяСтрока.СтатусПартии               = Перечисления.СтатусыПартийТоваров.Продукция;
	НоваяСтрока.Склад               	   = Склад;
	НоваяСтрока.Качество               	   = Справочники.Качество.Новый;
	
	НаборДвижений.мПериод = ДатаЗадания;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	НаборДвижений.ВыполнитьПриход();	
	
	//Blik 060317 63001 н
	//в закрытом задании при кол-во факт=0 нужно сделать обратное движение по товарам
	Если СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Закрыто и КоличествоФакт=0 Тогда
		НаборДвижений.ВыполнитьРасход();	
	КонецЕсли;
	//Blik 060317 63001 к
	
	//НоваяСтрока = ТаблицаДвижений.Добавить();
	//НоваяСтрока.Номенклатура               = Ссылка.Номенклатура;
	//НоваяСтрока.ХарактеристикаНоменклатуры = Ссылка.ХарактеристикаНоменклатуры;
	//НоваяСтрока.ДокументПолучения         	= Ссылка;
	//НоваяСтрока.ДокументРезерва             = Документы.ЗаказПокупателя.ПустаяСсылка();
	//
	//НоваяСтрока.Количество                 = Ссылка.Количество*Ссылка.Коэффициент/Ссылка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
	//
	//НоваяСтрока.СтатусПартии               = Перечисления.СтатусыПартийТоваров.Продукция;
	//НоваяСтрока.Склад               	   = Ссылка.Склад;
	//НоваяСтрока.Качество               	   = Справочники.Качество.Новый;
	//
	//НаборДвижений.мПериод = Ссылка.ДатаЗадания;
	//НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	//НаборДвижений.ВыполнитьПриход();
	//конец изменений 

								  
КонецПроцедуры // ДвиженияПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СП_ЗаданиеНаСмену") Тогда
		ДатаЗадания = ДанныеЗаполнения.ДатаЗадания;
		ЕдиницаИзмерения = ДанныеЗаполнения.ЕдиницаИзмерения;
		ЗаданиеНаПроизводство = ДанныеЗаполнения.ЗаданиеНаПроизводство;
		Количество = ДанныеЗаполнения.Количество - ДанныеЗаполнения.КоличествоФакт;
		КоличествоФакт = 0;
		Коэффициент = ДанныеЗаполнения.Коэффициент;
		Номенклатура = ДанныеЗаполнения.Номенклатура;
		Организация = ДанныеЗаполнения.Организация;
		Ответственный = ДанныеЗаполнения.Ответственный;
		Отделение = ДанныеЗаполнения.Отделение;
		Подразделение = ДанныеЗаполнения.Подразделение;
		Склад = ДанныеЗаполнения.Склад;
		Смена = ДанныеЗаполнения.Смена;
		Спецификация = ДанныеЗаполнения.Спецификация;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		СтатусДокумента = ДанныеЗаполнения.СтатусДокумента;
		ХарактеристикаНоменклатуры = ДанныеЗаполнения.ХарактеристикаНоменклатуры;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СП_ПривязкаСкладовКОтделениям.СкладПлановойВыдержки,
			|	СП_ПривязкаСкладовКОтделениям.СкладСпецВыдержки
			|ИЗ
			|	РегистрСведений.СП_ПривязкаСкладовКОтделениям КАК СП_ПривязкаСкладовКОтделениям
			|ГДЕ
			|	СП_ПривязкаСкладовКОтделениям.Отделение = &Отделение";

		Запрос.УстановитьПараметр("Отделение", Отделение);

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Склад = ВыборкаДетальныеЗаписи.СкладСпецВыдержки;
		КонецЦикла;

		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаданиеНаПроизводство") Тогда
		ДатаЗадания = ДанныеЗаполнения.ДатаЗадания;
		Ответственный = ДанныеЗаполнения.Ответственный;
		Подразделение = ДанныеЗаполнения.Подразделение;
		Смена = ДанныеЗаполнения.Смена;
		ЗаданиеНаПроизводство = ДанныеЗаполнения.Ссылка;
		Если  ДанныеЗаполнения.ВыпускТехПроцесс.Количество() > 0 тогда
			Номенклатура = ДанныеЗаполнения.ВыпускТехПроцесс[0].Номенклатура;
			ХарактеристикаНоменклатуры = ДанныеЗаполнения.ВыпускТехПроцесс[0].ХарактеристикаНоменклатуры; 
			Количество = ДанныеЗаполнения.ВыпускТехПроцесс[0].Количество;
			Коэффициент = ДанныеЗаполнения.ВыпускТехПроцесс[0].Коэффициент;
			ЕдиницаИзмерения = ДанныеЗаполнения.ВыпускТехПроцесс[0].ЕдиницаИзмерения;
			Спецификация = ДанныеЗаполнения.ВыпускТехПроцесс[0].Спецификация;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Если Не ЭтоНовый() Тогда
		РазрешитьЗапись = Ложь;
		Если ДополнительныеСвойства.Свойство("РазрешитьЗапись", РазрешитьЗапись) = Ложь Тогда
			РазрешитьЗапись = Ложь;
		КонецЕсли;
		
		Если Не РазрешитьЗапись Тогда
			
			Отказ = Не МожноМенятьЗаданиеНаСмену();
			
			Если Отказ Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Задание " + СокрЛП(Ссылка) + " запрещено менять, так как есть введенные документы на основании", Отказ);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
		
	Если Не Отказ Тогда//и РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СП_ЗаданиеНаСмену") И ЗначениеЗаполнено(ДокументОснование) Тогда
			//Если ДокументОснование.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.ПереданоНаСклад
			//	И НЕ ДокументОснование.Склад.НСИ_ПодключенКSolvo Тогда
			//	ОбщегоНазначения.СообщитьОбОшибке("Необходимо задание на смену закрыть или отменить!", Отказ);
			//	Возврат;
			//КонецЕсли;	
			
			Если Не ДокументОснование.Количество = ДокументОснование.КоличествоФакт Тогда
				
				
				ОбъектЗадание = ДокументОснование.ПолучитьОбъект(); 
				
				ОбъектЗадание.Количество = ОбъектЗадание.КоличествоФакт;
				
				ОбъектЗадание.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Истина);
				
				Попытка
					
					Если ОбъектЗадание.Проведен Тогда
						ОбъектЗадание.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					Иначе
						ОбъектЗадание.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
					
					ОбъектЗадание.ДополнительныеСвойства.Вставить("РазрешитьЗапись", Ложь);
					
					ОбщегоНазначения.Сообщение("В задании на смену " + СокрЛП(ОбъектЗадание) + " количество план приведено к фактическому");
					
				Исключение
					
					ОбщегоНазначения.СообщитьОбОшибке("Не удалось изменить задание на смену по котому введен документ. В основании количество план должны быть равны факту!", Отказ);
					
				КонецПопытки;
				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, РежимПроведения);
	КонецЕсли;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика", "ВестиПартионныйУчетПоСкладам", "ВестиПартионныйУчетПоСкладам");
    УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ВЫРАЖЕНИЕ"           , "ЕстьNULL(Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,0)", "КоэффициентЕдиницаХраненияОстатков");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	//конец изменений 

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если Не Отказ и НЕ СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Открыто И Не СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Отменено Тогда
		//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
		//ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
		ДвиженияПоРегистрам(СтруктураШапкиДокумента,РежимПроведения, Отказ, Заголовок);
		//конец изменений 
	КонецЕсли;

КонецПроцедуры // ОбработкаПроведения()

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИзменениеСтатусов(Отказ);
	
КонецПроцедуры

Процедура ЗаписатьИзменениеСтатусов(Отказ) Экспорт
	
	//Движения по регистру накопления "АП_СтатусыДокументов"
	//Движения по регистру накопления "АП_СтатусыДокументов"
	//начало изменений Ожиганов 08.06.2015 запись будущим периодом 
	//поскольку запись осуществляется следующей  секундой будем брать срез последних на конец дня
	//есть шанс получить несоотвествие но до этого надеюсь не дойдет
	//в противном случае всегда будем наблюдать ошибку запись с такими поля существует
	ТекДата = ТекущаяДата();
	КонДня = КонецДня(ТекущаяДата());
	
	
	//ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(ТекущаяДата(), Новый Структура("Документ", Ссылка));
	ДанныеПоСтатусу = РегистрыСведений.АП_СтатусыДокументов.СрезПоследних(КонДня, Новый Структура("Документ", Ссылка));
	//конец изменений 
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		//начало изменений Ожиганов 09.06.2015 запись будущим периодом 
		//СформируемЗаписьПоРегиструСтатусы(Отказ);
		СформируемЗаписьПоРегиструСтатусы(Отказ,ТекДата);
		//конец изменений 
	ИначеЕсли НЕ ДанныеПоСтатусу[0].Статус = СтатусДокумента Тогда
		//начало изменений Ожиганов 09.06.2015 запись будущим периодом 
	    //СформируемЗаписьПоРегиструСтатусы(Отказ);
		СформируемЗаписьПоРегиструСтатусы(Отказ,Макс(ДанныеПоСтатусу[0].Период,ТекДата));
		//конец изменений 
	КонецЕсли;
	
КонецПроцедуры

Процедура СформируемЗаписьПоРегиструСтатусы(Отказ,ТекДата)

	//начало изменений Ожиганов 09.06.2015 запись будущим периодом 
	//мДатаЗаписи = ТекущаяДата();
	мДатаЗаписи  = ТекДата;

	//конец изменений 
	
	НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Ссылка);
	НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
	
	//начало изменений Ожиганов 09.06.2015 запись будущим периодом 
	НаборЗаписей.Прочитать();
	
	//начало изменений Ожиганов 08.06.2015 запись будущим периодом 
	//Если НаборЗаписей.Количество() > 0 Тогда
	Пока НаборЗаписей.Количество() > 0 Цикл
	
		мДатаЗаписи  = мДатаЗаписи + 1;
		
		НаборЗаписей.Очистить();
		
		
		//НаборЗаписей = РегистрыСведений.АП_СтатусыДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Ссылка);
		НаборЗаписей.Отбор.Период.Установить(мДатаЗаписи);
		
		НаборЗаписей.Прочитать();
	КонецЦикла;
	
	
	//НаборЗаписей.Прочитать();
	//конец изменений 
	
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = мДатаЗаписи;
	НоваяСтрока.Документ = Ссылка;
	НоваяСтрока.Статус = СтатусДокумента;
	НоваяСтрока.Ответственный = глЗначениеПеременной("глТекущийПользователь");
	
	Попытка		
		НаборЗаписей.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
	КонецПопытки;
	
КонецПроцедуры

Функция МожноМенятьЗаданиеНаСмену() Экспорт
	
	//Если СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.ПереданоНаСклад
	//	ИЛИ СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.ПереданоНаСклад
	
	Если ЭтоНовый() Тогда
		Возврат Истина;
	КонецЕсли;
	
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаданиеНаСмену.Склад.НСИ_ПодключенКSolvo КАК НСИ_ПодключенКSolvo,
	                      |	ЗаданиеНаСмену.СтатусДокумента,
	                      |	Выпуск.Ссылка КАК ВыпускПродукции,
	                      |	ЗаданиеНаСмену.Проведен,
	                      |	ЕСТЬNULL(Выпуск.Проведен, ЛОЖЬ) КАК ВыпускПродукцииПроведен
	                      |ИЗ
	                      |	Документ.СП_ЗаданиеНаСмену КАК ЗаданиеНаСмену
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыпускПродукции КАК Выпуск
	                      |		ПО ЗаданиеНаСмену.Ссылка = Выпуск.СП_ЗаданиеНаСмену
	                      |ГДЕ
	                      |	ЗаданиеНаСмену.Ссылка = &Ссылка");
						  
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		ВызватьИсключение  "Сбой !!! Обратитесь к программистам!";
	КонецЕсли;	
	//конец изменений 
	
//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 	
	////Если Склад.НСИ_ПодключенКSolvo  И (Ссылка.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.ПереданоНаСклад
	////	ИЛИ Ссылка.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Закрыто) Тогда
	Если Выборка.НСИ_ПодключенКSolvo  И (Выборка.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.ПереданоНаСклад
		ИЛИ Выборка.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Закрыто) Тогда
//конец изменений 	
		
		Если РольДоступна("АП_Администратор") Тогда
			ОбщегоНазначения.Сообщение("Запрещено менять задание на смену", СтатусСообщения.ОченьВажное);
			Возврат Истина;
		Иначе
			Возврат ложь;
		КонецЕсли;
		
	ИначеЕсли Не АП_ОбщегоНазначенияСервер.ДоступнаРоль(глЗначениеПеременной("глТекущийПользователь"), Справочники.АП_РолиПользователей.СотрудникСклада)
//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 		
//		И (Ссылка.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.ПереданоНаСклад
//		ИЛИ Ссылка.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Закрыто) Тогда
		И (Выборка.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.ПереданоНаСклад
		ИЛИ Выборка.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Закрыто) Тогда
//конец изменений 		
		
		Если РольДоступна("АП_Администратор") Тогда
			ОбщегоНазначения.Сообщение("Запрещено менять задание на смену", СтатусСообщения.ОченьВажное);
			Возврат Истина;
		Иначе
			Возврат ложь;
		КонецЕсли;
		
	КонецЕсли;
	//начало изменений Ожиганов 31.05.2015 немножко оптимизируем 
	//Если Ссылка.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Закрыто Тогда
	Если Выборка.СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Закрыто Тогда
	
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//		   |	СП_ЗаданиеНаСмену.Ссылка
		//		   |ИЗ
		//		   |	Документ.СП_ЗаданиеНаСмену КАК СП_ЗаданиеНаСмену
		//		   |ГДЕ
		//		   |	СП_ЗаданиеНаСмену.ДокументОснование = &Ссылка
		//		   |	И СП_ЗаданиеНаСмену.Проведен = ИСТИНА
		//		   |
		//		   |ОБЪЕДИНИТЬ ВСЕ
		//		   |
		//		   |ВЫБРАТЬ
		//		   |	ВыпускПродукции.Ссылка
		//		   |ИЗ
		//		   |	Документ.ВыпускПродукции КАК ВыпускПродукции
		//		   |ГДЕ
		//		   |	ВыпускПродукции.СП_ЗаданиеНаСмену = &Ссылка
		//		   |	И ВыпускПродукции.Проведен = ИСТИНА";
		//		   
		//Запрос.УстановитьПараметр("Ссылка", Ссылка);			   
		//Результат = Запрос.Выполнить().Пустой();
		Результат = НЕ (ЗначениеЗаполнено(Выборка.ВыпускПродукции) и Выборка.ВыпускПродукцииПроведен);
		//конец изменений 			
	
		Если Не Результат Тогда
			Если РольДоступна("АП_Администратор") Тогда
				ОбщегоНазначения.Сообщение("Запрещено менять задание на смену", СтатусСообщения.ОченьВажное);
				Возврат Истина;
			Иначе
				Возврат ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция МожноМенятьСоставСтрок() Экспорт
	Если РольДоступна("АП_Администратор") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не Проведен Тогда
		Возврат Истина;
	ИначеЕсли Не СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Открыто 
		И Не СтатусДокумента = Перечисления.СП_СтатусыЗаданияНаСмену.Отменено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	Если Не МожноМенятьСоставСтрок() Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	КоличествоФакт = 0;
КонецПроцедуры

Функция ДоступенСтатусДокумента() Экспорт

	Возврат Истина;	

КонецФункции // ()
 

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мИспользоватьПотребностиЗаказовНаПроизводство = глЗначениеПеременной("ИспользоватьПотребностиЗаказовНаПроизводство");
