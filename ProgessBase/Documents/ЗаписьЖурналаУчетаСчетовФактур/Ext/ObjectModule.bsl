Перем мУдалятьДвижения;
Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

Процедура УстановитьКодВидаОперации(КодВидаОперацииОснования = Неопределено) Экспорт
	
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);
	КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "04","01");		
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПосредническаяДеятельность, Отказ, Заголовок)
	
	ДвиженияЖурналУчетаСчетовФактур = Движения.ЖурналУчетаСчетовФактур;
	
	Для Каждого СтрокаТЧ Из ТаблицаПосредническаяДеятельность Цикл
		
		СтрокаЖурнала = ДвиженияЖурналУчетаСчетовФактур.Добавить();
		
		СтрокаЖурнала.Период							= СтруктураШапкиДокумента.Дата;
		
		ЗаполнитьЗначенияСвойств(СтрокаЖурнала, СтруктураШапкиДокумента);
		
		СтрокаЖурнала.СчетФактура 						= Ссылка;
		СтрокаЖурнала.ИндексСтроки 						= СтрокаТЧ.НомерСтроки;
		СтрокаЖурнала.Валюта							= СтруктураШапкиДокумента.ВалютаДокумента;
		СтрокаЖурнала.КодВидаОперации 					= СтруктураШапкиДокумента.КодВидаОперации;
		
		СтрокаЖурнала.ДатаВыставленияПолучения 			= СтруктураШапкиДокумента.ДатаВыставления;
		СтрокаЖурнала.ДатаИсправления 					= СтруктураШапкиДокумента.ДатаИсправления;
		СтрокаЖурнала.ДатаИсправленияКорректировочногоСчетаФактуры = СтруктураШапкиДокумента.ДатаИсправленияКорректировочногоСФ;
		СтрокаЖурнала.ДатаКорректировочногоСчетаФактуры = СтруктураШапкиДокумента.ДатаКорректировочногоСФ;
		СтрокаЖурнала.ДатаСчетаФактуры 					= СтруктураШапкиДокумента.ДатаСФ;
		
		СтрокаЖурнала.НомерИсправления 					= СтруктураШапкиДокумента.НомерИсправления;
		СтрокаЖурнала.НомерИсправленияКорректировочногоСчетаФактуры = СтруктураШапкиДокумента.НомерИсправленияКорректировочногоСФ;
		СтрокаЖурнала.НомерКорректировочногоСчетаФактуры = СтруктураШапкиДокумента.НомерКорректировочногоСФ;
		СтрокаЖурнала.НомерСчетаФактуры 				= СтруктураШапкиДокумента.НомерСФ;
		
		Если СтрокаЖурнала.Период < '20150101' Тогда
			ЗаполнитьЗначенияСвойств(СтрокаЖурнала, СтрокаТЧ);
		Иначе
			СтрокаЖурнала.КодВидаОперацииКомиссия = СтруктураШапкиДокумента.КодВидаОперации;
			СтрокаЖурнала.КодВидаСделки = СтрокаТЧ.КодВидаСделки;
			СтрокаЖурнала.Субкомиссионер = СтрокаТЧ.Субкомиссионер;
			СтрокаЖурнала.Продавец = СтрокаТЧ.Продавец;
			СтрокаЖурнала.НомерСчетаФактурыПродавца = СтрокаТЧ.НомерСчетаФактурыПродавца;
			СтрокаЖурнала.СуммаНДСКомиссия = СтрокаТЧ.СуммаНДС;
			СтрокаЖурнала.СуммаНДСРазницаУвеличениеКомиссия = СтрокаТЧ.СуммаНДСРазницаУвеличение;
			СтрокаЖурнала.СуммаНДСРазницаУменьшениеКомиссия = СтрокаТЧ.СуммаНДСРазницаУменьшение;
			СтрокаЖурнала.СуммаПоСчетуФактуреКомиссия = СтрокаТЧ.СуммаПоСчетуФактуре;
			СтрокаЖурнала.СуммаПоСчетуФактуреРазницаУвеличениеКомиссия = СтрокаТЧ.СуммаПоСчетуФактуреРазницаУвеличение;
			СтрокаЖурнала.СуммаПоСчетуФактуреРазницаУменьшениеКомиссия = СтрокаТЧ.СуммаПоСчетуФактуреРазницаУменьшение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДвиженияПоРегистрам()

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация,ЧастьЖурнала,Контрагент,ВалютаДокумента,НомерСФ,ДатаСФ");

	Если СтруктураШапкиДокумента.Исправление Тогда
		СтруктураОбязательныхПолей.Вставить("НомерИсправления");
		СтруктураОбязательныхПолей.Вставить("ДатаИсправления");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Корректировка Тогда
		СтруктураОбязательныхПолей.Вставить("НомерКорректировочногоСФ");
		СтруктураОбязательныхПолей.Вставить("ДатаКорректировочногоСФ");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ИсправлениеКорректировки Тогда
		СтруктураОбязательныхПолей.Вставить("НомерИсправленияКорректировочногоСФ");
		СтруктураОбязательныхПолей.Вставить("ДатаИсправленияКорректировочногоСФ");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Дата >= '20150101' Тогда
		СтруктураОбязательныхПолей.Вставить("КодВидаОперации");
	КонецЕсли;
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

КонецПроцедуры 

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(ТаблицаПосредническаяДеятельность, СтруктураШапкиДокумента, Отказ, Заголовок)

	Для Каждого СтрокаТЧ Из ТаблицаПосредническаяДеятельность Цикл
		
		Если СтруктураШапкиДокумента.Корректировка Тогда
			Если СтрокаТЧ.СуммаПоСчетуФактуреРазницаУменьшение = 0
				И СтрокаТЧ.СуммаПоСчетуФактуреРазницаУвеличение = 0 
				И СтрокаТЧ.СуммаНДСРазницаУменьшение = 0 
				И СтрокаТЧ.СуммаНДСРазницаУвеличение = 0 Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке( "Не заполнены суммовые показатели корректировочного счета-фактуры. (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
				
			КонецЕсли;
		Иначе
			Если СтрокаТЧ.СуммаПоСчетуФактуре = 0
				И СтрокаТЧ.СуммаНДС = 0 Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке( "Не заполнены суммовые показатели счета-фактуры. (строка № " + СтрокаТЧ.НомерСтроки + ")." , Отказ, Заголовок);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"	, "КПП"   , "ОрганизацияКПП");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Контрагент"     , "КПП"   , "КонтрагентКПП");
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.Контрагент) Тогда
		СтруктураШапкиДокумента.Вставить("КППКонтрагента", СтруктураШапкиДокумента.ОрганизацияКПП); 
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.КППКонтрагента) Тогда
		СтруктураШапкиДокумента.Вставить("КППКонтрагента", СтруктураШапкиДокумента.КонтрагентКПП);
	КонецЕсли;
	
	НетНДС = (ПосредническаяДеятельность.Итог("СуммаНДС") + ПосредническаяДеятельность.Итог("СуммаНДСРазницаУменьшение") + ПосредническаяДеятельность.Итог("СуммаНДСРазницаУвеличение") = 0);
	СтруктураШапкиДокумента.Вставить("ПоСтавкеБезНДС", НетНДС И (НЕ СтруктураШапкиДокумента.Под0));
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(ТаблицаПосредническаяДеятельность) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполнения по табличной части "ДокументыОснования".
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Продавец"      						, "Продавец");
	СтруктураПолей.Вставить("НомерСчетаФактурыПродавца"		     	, "НомерСчетаФактурыПродавца");
	СтруктураПолей.Вставить("ДатаСчетаФактурыПродавца"				, "ДатаСчетаФактурыПродавца");
	СтруктураПолей.Вставить("Субкомиссионер"             			, "Субкомиссионер");
	СтруктураПолей.Вставить("КодВидаСделки"     					, "КодВидаСделки");
	СтруктураПолей.Вставить("СуммаПоСчетуФактуре"        			, "СуммаПоСчетуФактуре");
	СтруктураПолей.Вставить("СуммаНДС"     							, "СуммаНДС");
	СтруктураПолей.Вставить("СуммаПоСчетуФактуреРазницаУменьшение"	, "СуммаПоСчетуФактуреРазницаУменьшение");
	СтруктураПолей.Вставить("СуммаПоСчетуФактуреРазницаУвеличение"	, "СуммаПоСчетуФактуреРазницаУвеличение");
	СтруктураПолей.Вставить("СуммаНДСРазницаУменьшение" 			, "СуммаНДСРазницаУменьшение");
	СтруктураПолей.Вставить("СуммаНДСРазницаУвеличение" 			, "СуммаНДСРазницаУвеличение");
	
	РезультатЗапросаПоДокументамОснованиям = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ПосредническаяДеятельность", СтруктураПолей);
	
	ТаблицаПосредническаяДеятельность = РезультатЗапросаПоДокументамОснованиям.Выгрузить();
		
КонецПроцедуры // СформироватьТаблицыДокумента()

// Устанавливает значение флага "Выставлен" и ревизита "Кода способа выставления" по умолчанию
//
Процедура УстановитьПризнакВыставлен() Экспорт
	
	ДатаВыставления = ?(Дата = '00010101', ОбщегоНазначения.ПолучитьРабочуюДату(), Дата);
	
КонецПроцедуры	

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение(НСтр("ru = 'Документ можно распечатать только после его записи'"));
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение(НСтр("ru = Недостаточно полномочий для печати непроведенного документа!'"));
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	СтруктураМакетов = Новый Структура;
	Возврат СтруктураМакетов;
	
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,, ОбъектКопирования.Ссылка);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
		
	Если НЕ Исправление Тогда
		НепроверяемыеРеквизиты.Добавить("НомерИсправления");
		НепроверяемыеРеквизиты.Добавить("ДатаИсправления");
	КонецЕсли;
	
	Если НЕ Корректировка Тогда
		НепроверяемыеРеквизиты.Добавить("НомерКорректировочногоСФ");
		НепроверяемыеРеквизиты.Добавить("ДатаКорректировочногоСФ");
	КонецЕсли;
	
	Если НЕ ИсправлениеКорректировки Тогда
		НепроверяемыеРеквизиты.Добавить("НомерИсправленияКорректировочногоСФ");
		НепроверяемыеРеквизиты.Добавить("ДатаИсправленияКорректировочногоСФ");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	Для Каждого Строка Из ПосредническаяДеятельность Цикл
		
		Если Корректировка Тогда
			Строка.СуммаПоСчетуФактуре = 0;
			Строка.СуммаНДС = 0;
		Иначе
			Строка.СуммаПоСчетуФактуреРазницаУвеличение = 0;
			Строка.СуммаПоСчетуФактуреРазницаУменьшение = 0;
			Строка.СуммаНДСРазницаУвеличение = 0;
			Строка.СуммаНДСРазницаУменьшение = 0;
		КонецЕсли;
		
		Если ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры Тогда
			Строка.Субкомиссионер = Справочники.Контрагенты.ПустаяСсылка();
			Строка.КодВидаСделки = "";
		ИначеЕсли ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры Тогда
			Строка.Продавец = Справочники.Контрагенты.ПустаяСсылка();
			Строка.НомерСчетаФактурыПродавца = "";
		КонецЕсли;
		
	КонецЦикла;
	
	СводныйКомиссионный = ПосредническаяДеятельность.Количество() > 1;

КонецПроцедуры 

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	ОбщегоНазначения.ДобавитьПрефиксОрганизации(ЭтотОбъект, Префикс);
	ОбщегоНазначения.ДобавитьПрефиксУзла(Префикс);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПосредническаяДеятельность;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(ТаблицаПосредническаяДеятельность);
	
	ПроверитьЗаполнениеТабличнойЧасти(ТаблицаПосредническаяДеятельность, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Движения по документу
	Если НЕ Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПосредническаяДеятельность, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры 


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мНадписьПредоплата = "Предварительный платеж";
мОбновлятьРеквизитыПриЗаписи = Истина;
