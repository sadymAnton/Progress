////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьКодОперацииДляДекларации(ВидЦенности) Экспорт
	
	Если ВидЦенности = Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства Тогда
		Возврат Перечисления.НДСКодыОперацийПоОбъектамНедвижимости.Приобретение;
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.СМРПодрядные Тогда
		Возврат Перечисления.НДСКодыОперацийПоОбъектамНедвижимости.СМРПодрядные;
	ИначеЕсли ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами Тогда
		Возврат Перечисления.НДСКодыОперацийПоОбъектамНедвижимости.СМРСобственные;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуОбъектовНедвижимости(ГруппыОС = Неопределено, ОграничениеПериода = Ложь, ИсключаемыеОС = Неопределено) Экспорт
	
	Если ГруппыОС = Неопределено Тогда
		ГруппыОС = Новый Массив;
		ГруппыОС.Добавить(Перечисления.ГруппыОС.Здания);
		ГруппыОС.Добавить(Перечисления.ГруппыОС.Сооружения);
		ГруппыОС.Добавить(Перечисления.ГруппыОС.ЗемельныеУчастки);
	КонецЕсли;	
	
	// Формирование списка ОС:
	// - входящих в список групп
	// - введенных в эксплуатацию не ранее нижнего ограничения периода
	// - с момента ввода которых в эксплуатацию не прошло указанное число лет
	// - не снятых с учета в данной организации
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",                               КонецГода(Дата));
	Запрос.УстановитьПараметр("Организация",                          Организация);
	Запрос.УстановитьПараметр("СнятоСУчета",                          Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ВведеноВЭксплуатацию",                 Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	Запрос.УстановитьПараметр("ГруппыОС",                             ГруппыОС);
	Запрос.УстановитьПараметр("НижнееОграничениеПериода",             ?(ОграничениеПериода, '20060101', '00010101'));
	Запрос.УстановитьПараметр("ОграничениеПериодаЭксплуатацииВГодах", 15);
	Запрос.УстановитьПараметр("ИсключатьОС", ИсключаемыеОС <> Неопределено);
	Запрос.УстановитьПараметр("ИсключаемыеОС", ИсключаемыеОС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	((НЕ &ИсключатьОС)
	|			ИЛИ (НЕ ОсновныеСредства.Ссылка В (&ИсключаемыеОС)))
	|	И ОсновныеСредства.ГруппаОС В(&ГруппыОС)
	|	И ОсновныеСредства.Ссылка В
	|			(ВЫБРАТЬ
	|				СостоянияОСОрганизаций.ОсновноеСредство
	|			ИЗ
	|				РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|			ГДЕ
	|				СостоянияОСОрганизаций.Состояние = &ВведеноВЭксплуатацию
	|				И СостоянияОСОрганизаций.ДатаСостояния МЕЖДУ &НижнееОграничениеПериода И &Период
	|				И &Период < ДОБАВИТЬКДАТЕ(СостоянияОСОрганизаций.ДатаСостояния, ГОД, &ОграничениеПериодаЭксплуатацииВГодах)
	|				И СостоянияОСОрганизаций.Организация = &Организация)
	|	И (НЕ ОсновныеСредства.Ссылка В
	|				(ВЫБРАТЬ
	|					СостоянияОСОрганизаций.ОсновноеСредство
	|				ИЗ
	|					РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|				ГДЕ
	|					СостоянияОСОрганизаций.Состояние = &СнятоСУчета
	|					И СостоянияОСОрганизаций.ДатаСостояния < &Период
	|					И СостоянияОСОрганизаций.Организация = &Организация))";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СписокОС = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");
		Возврат ПолучитьПараметрыОСпоСписку(СписокОС, Истина);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ПолучитьПараметрыОСпоСписку(СписокОС, СтоимостьНеПогашена = Истина) Экспорт
	
	// Получение списка ОС, стоимость которых не окончательно погашена, с указанием остаточной стоимости
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      КонецГода(Дата));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокОС",    СписокОС);
	Запрос.УстановитьПараметр("ВведеноВЭксплуатацию", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОбъектНедвижимости,
		|	ЕСТЬNULL(СтоимостьОСБухгалтерскийУчетОстатки.СтоимостьОстаток, 0) КАК СтоимостьОбъектаНедвижимости,
		|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаВводаВЭксплуатациюБУ,
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(СостоянияОСОрганизаций.ДатаСостояния, МЕСЯЦ, 1), МЕСЯЦ) КАК ДатаНачисленияАмортизацииНУ
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
		|		&Период,
		|		Организация = &Организация
		|		    И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация = СостоянияОСОрганизаций.Организация
		|			И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
		|			И (СостоянияОСОрганизаций.Состояние = &ВведеноВЭксплуатацию)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Остатки(
		|		&Период,
		|		Организация = &Организация
		|		    И ОсновноеСредство В (&СписокОС)) КАК СтоимостьОСБухгалтерскийУчетОстатки
		|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СтоимостьОСБухгалтерскийУчетОстатки.ОсновноеСредство";
	Если СтоимостьНеПогашена Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ЕСТЬNULL(СтоимостьОСБухгалтерскийУчетОстатки.СтоимостьОстаток, 0) - ЕСТЬNULL(СтоимостьОСБухгалтерскийУчетОстатки.АмортизацияОстаток, 0) > 0";
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - структура, содержащая реквизиты шапки документа и результаты запроса по шапке,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, СчетСписанияНДС" + ?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, ", СчетСписанияНДСНУ", ""));
	
	// Теперь вызовем общую процедуру проверки.
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Проверяет правильность заполнения строк табличных.
//
Процедура ПроверитьЗаполнениеТабличныхЧастей(СтруктураШапкиДокумента, Отказ, Заголовок)

	СтруктураОтбора = Новый Структура("КлючСтроки");
	
	Для Каждого СтрокаТаблицыОС Из ОбъектыНедвижимости Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицыОС.НомерСтроки) + """ табличной части ""Объекты недвижимости"": ";
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыОС.ОбъектНедвижимости) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение реквизита ""Объект недвижимости""!", Отказ, Заголовок);
		КонецЕсли;
		Если СтрокаТаблицыОС.ИспользуетсяДляОперацийНеОблагаемыхНДС Тогда
			
			Если СтрокаТаблицыОС.ДатаНачалаИспользованияДляОпераций = '00010101' Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение реквизита ""Дата начала использования для операций, не облагаемых НДС""!", Отказ, Заголовок);
			КонецЕсли;
			Если СтрокаТаблицыОС.ДатаНачалаИспользованияДляОпераций = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение реквизита ""Стоимость объекта недвижимости (БУ)""!", Отказ, Заголовок);
			КонецЕсли;
			Если СтрокаТаблицыОС.ДоляВыручкиНеОблагаемаяНДС = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение реквизита ""Доля выручки, не облагаемая НДС (%)""!", Отказ, Заголовок);
			КонецЕсли;
			
		КонецЕсли;
		Если СтруктураШапкиДокумента.ОтражатьВосстановлениеВКнигеПродаж И СтрокаТаблицыОС.ИспользуетсяДляОперацийНеОблагаемыхНДС Тогда
			
			СтруктураОтбора.КлючСтроки = СтрокаТаблицыОС.КлючСтроки;
			СтрокиСчетаФактуры = СчетаФактуры.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаСчетФактура Из СтрокиСчетаФактуры Цикл
				СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицыОС.НомерСтроки) + """ табличной части ""Счета-фактуры (" + СтрокаТаблицыОС.ОбъектНедвижимости + ")"": ";
				Если НЕ ЗначениеЗаполнено(СтрокаСчетФактура.СчетФактура) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение реквизита ""Счет-фактура""", Отказ, Заголовок);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаСчетФактура.ВидЦенности) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение реквизита ""Вид ценности""", Отказ, Заголовок);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаСчетФактура.КодОперацииДляДекларации) Тогда
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "Не заполнено значение реквизита ""Код операции для декларации""", Отказ, Заголовок);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Функция ПодготовитьТаблицуЗаписей(СтруктураШапкиДокумента)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("Событие", Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.Ссылка.Организация,
	               |	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.СчетФактура,
	               |	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.ВидЦенности,
	               |	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.Поставщик КАК Покупатель,
	               |	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.ДатаОплаты,
	               |	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.ДокументОплаты,
	               |	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.СтавкаНДС,
	               |	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.СуммаБезНДСВосстановлена КАК СуммаБезНДС,
	               |	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.НДСВосстановлен КАК НДС,
	               |	&Событие КАК Событие,
	               |	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.Ссылка.Дата КАК ДатаСобытия
	               |ИЗ
	               |	Документ.ВосстановлениеНДСпоОбъектамНедвижимости.СчетаФактуры КАК ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВосстановлениеНДСпоОбъектамНедвижимости.ОбъектыНедвижимости КАК ВосстановлениеНДСпоОбъектамНедвижимостиОбъектыНедвижимости
	               |		ПО ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.Ссылка = ВосстановлениеНДСпоОбъектамНедвижимостиОбъектыНедвижимости.Ссылка
	               |			И ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.КлючСтроки = ВосстановлениеНДСпоОбъектамНедвижимостиОбъектыНедвижимости.КлючСтроки
	               |ГДЕ
	               |	ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.Ссылка = &Ссылка
	               |	И ВосстановлениеНДСпоОбъектамНедвижимостиОбъектыНедвижимости.ИспользуетсяДляОперацийНеОблагаемыхНДС
	               |	И ВосстановлениеНДСпоОбъектамНедвижимостиСчетаФактуры.НДСВосстановлен <> 0";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
	
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаЗаписей, Отказ, Заголовок);
	
	Если ТаблицаЗаписей.Количество() <> 0 Тогда
		
		ТаблицаДвижений_НДСЗаписиКнигиПродаж = Новый ТаблицаЗначений;
		ТаблицаДвижений_НДСЗаписиКнигиПродаж = Движения.НДСЗаписиКнигиПродаж.Выгрузить();
		ТаблицаДвижений_НДСЗаписиКнигиПродаж.Очистить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗаписей, ТаблицаДвижений_НДСЗаписиКнигиПродаж);
			
		Движения.НДСЗаписиКнигиПродаж.мПериод 			= СтруктураШапкиДокумента.Дата;
		Движения.НДСЗаписиКнигиПродаж.мТаблицаДвижений 	= ТаблицаДвижений_НДСЗаписиКнигиПродаж;
		Движения.НДСЗаписиКнигиПродаж.ДобавитьДвижение(Ложь);
		
		СуммаНДС = ТаблицаЗаписей.Итог("НДС");
		
		// Проводки по БУ
		
		ПроводкаБУ = Движения.Хозрасчетный.Добавить();
		ПроводкаБУ.Период       = СтруктураШапкиДокумента.Дата;
		ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
		ПроводкаБУ.Содержание   = "Восстановлен НДС";
		ПроводкаБУ.НомерЖурнала = "НДС";

		ПроводкаБУ.СчетДт       = СтруктураШапкиДокумента.СчетСписанияНДС; 
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоСписанияНДС1);
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоСписанияНДС2);
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоСписанияНДС3);
			
		ПроводкаБУ.СчетКт       = ПланыСчетов.Хозрасчетный.НДС; //68.02
		БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетКт, ПроводкаБУ.СубконтоКт, "ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
			
		ПроводкаБУ.Сумма        = СуммаНДС;
		
		// Проводки по НУ
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			ПроводкаБУ = Движения.Налоговый.Добавить();
			ПроводкаБУ.Период       = СтруктураШапкиДокумента.Дата;
			ПроводкаБУ.Организация  = СтруктураШапкиДокумента.Организация;
			ПроводкаБУ.Содержание   = "Восстановлен НДС";
			ПроводкаБУ.НомерЖурнала = "НДС";

			ПроводкаБУ.СчетДт       = СтруктураШапкиДокумента.СчетСписанияНДСНУ; 
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоСписанияНДСНУ1);
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоСписанияНДСНУ2);
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаБУ.СчетДт, ПроводкаБУ.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоСписанияНДСНУ3);
				
			ПроводкаБУ.Сумма        = СуммаНДС;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Проверим правильность заполнения табличных частей документа
	ПроверитьЗаполнениеТабличныхЧастей(СтруктураШапкиДокумента, Отказ, Заголовок);
		
	Если Отказ Или Не ОтражатьВосстановлениеВКнигеПродаж Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаписей = ПодготовитьТаблицуЗаписей(СтруктураШапкиДокумента);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаЗаписей, Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

