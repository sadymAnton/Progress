Перем мУдалятьДвижения;

// Текущие курс и кратность валюты документа для расчетов
Перем КурсДокумента Экспорт;
Перем КратностьДокумента Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;

// Хранят группировочные признаки вида операции
Перем ЕстьРасчетыСКонтрагентами Экспорт;
Перем ЕстьРасчетыПоКредитам Экспорт;

// Хранит таблицу, использующуюся при проведении документа
Перем ТаблицаПлатежейУпр;

//Определение периода движений документа
Перем ДатаДвижений;

Перем мСтруктураПараметровДенежныхСредств;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

// Процедура заполняет данные по УСН
//
Процедура ЗаполнитьНастройкуКнигиУСН() Экспорт

	Если РучнаяНастройка_УСН Тогда
		ТекстВороса = 
		"Отражение платежа в Книге учета доходов и расходов настроено вручную.
		|Перезаполнить показатели Книги учета доходов и расходов?";
		Если Вопрос(ТекстВороса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			РучнаяНастройка_УСН = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СуммаДляКУДиР = СуммаДокумента;

	Если НЕ ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		КурсВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СуммаДляКУДиР = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР, ВалютаДокумента, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
	КонецЕсли;

	Если НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата) Тогда

		Графа4_УСН      = СуммаДляКУДиР;
		Графа5_УСН      = СуммаДляКУДиР;
		Графа6_УСН      = 0;
		Графа7_УСН      = 0;
		НДС_УСН         = 0;
		ДоходыЕНВД_УСН  = Ложь;
		РасходыЕНВД_УСН = Ложь;
		Содержание_УСН  = "" + ВидОперации + ".";

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
			Содержание_УСН = "Возврат денежных средств поставщиком";
			Графа4_УСН      = 0;
			Графа5_УСН      = 0;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьНастройкуКнигиУСН()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Формирует структуру полей, обязательных для заполнения при отражении фактического
// движения средств по банку.
//
// Возвращаемое значение:
//   СтруктураОбязательныхПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейОплатаУпр()

	СтруктураПолей=Новый Структура;
	СтруктураПолей.Вставить("СчетОрганизации");
	СтруктураПолей.Вставить("СуммаДокумента");
	СтруктураПолей.Вставить("ДатаОплаты","Не указана дата оплаты документа банком!");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейОплатаУпр()

// Формирует структуру полей, обязательных для заполнения при отражении операции во 
// взаиморасчетах
// Возвращаемое значение:
//   СтруктурахПолей   – структура для проверки
//
Функция СтруктураОбязательныхПолейРасчетыУпр()

	СтруктураПолей = Новый Структура("Организация, Контрагент, СуммаДокумента, Ответственный");
	СтруктураПолей.Вставить("СчетОрганизации","Не указан банковский счет организации!");

	Возврат СтруктураПолей;

КонецФункции // СтруктураОбязательныхПолейРасчетыУпр()

// Проверяет значение, необходимое при проведении
Процедура ПроверитьЗначение(Значение, Отказ, Заголовок, ИмяРеквизита)
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда 
		
		ОбщегоНазначения.СообщитьОбОшибке("Не заполнено значение реквизита """+ИмяРеквизита+"""",Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначение()

// Проверяет заполнение табличной части документа
//
Процедура ПроверитьЗаполнениеТЧ(Отказ, Заголовок)

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл

		ПроверитьЗначение(Платеж.ДоговорКонтрагента,Отказ, Заголовок,"Договор");
		ПроверитьЗначение(Платеж.СуммаВзаиморасчетов,Отказ, Заголовок,"Сумма взаиморасчетов");
		//начало изменений
		Если Дата > '20140101' Тогда
			ПроверитьЗначение(Платеж.СтатьяДвиженияДенежныхСредств,Отказ, Заголовок,"Статья движения денежных средств");
		КонецЕсли;
		//конец изменений 
		
		Если Не Отказ Тогда
			
			// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
			Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Заказ покупателя","Заказ поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);
				
				Если Отказ Тогда
				
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по заказам""! 
					|Заполните поле """+ТекстСделка+"""!");
					
				КонецЕсли;
				
			ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				
				ТекстСделка=?(УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации).ТипЗаказа="ЗаказПокупателя","Счет покупателю","Счет поставщику");
				ПроверитьЗначение(Платеж.Сделка,Отказ, Заголовок,ТекстСделка);

				Если Отказ Тогда
					Сообщить("По договору "+Строка(Платеж.ДоговорКонтрагента)+" установлен способ ведения взаиморасчетов ""по счетам""! 
					|Заполните поле """+ТекстСделка+"""!");
				КонецЕсли;
						
			КонецЕсли;

			Если ЗначениеЗаполнено(Организация) 
				И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЗаполнениеТЧ

// Формирует движения по регистрам
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//  Режим 					  - режим проведения документа
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента);
	ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);
	
	Если ЕстьРасчетыСКонтрагентами или ЕстьРасчетыПоКредитам Тогда
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента);
	КонецЕсли; 

КонецПроцедуры // ДвиженияПоРегистрам()

Процедура ДвиженияПоРегистрамУпр(РежимПроведения, Отказ, Заголовок, СтруктураШапкиДокумента)

	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыСКонтрагентами", ЕстьРасчетыСКонтрагентами);
	мСтруктураПараметровДенежныхСредств.Вставить("ЕстьРасчетыПоКредитам",     ЕстьРасчетыПоКредитам);
	мСтруктураПараметровДенежныхСредств.Вставить("БанковскийСчетКасса",       СчетОрганизации);
	мСтруктураПараметровДенежныхСредств.Вставить("ДатаДвижений",              ДатаДвижений);
	
	//начало изменений
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПодотчетником Тогда
		  СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетовПодотчетника",              ВалютаДокумента);
	КонецЕсли;	
	//конец изменений 
	
	УправлениеДенежнымиСредствами.ПровестиПоступлениеДенежныхСредствУпр(
		СтруктураШапкиДокумента, мСтруктураПараметровДенежныхСредств, ТаблицаПлатежейУпр, Движения, Отказ, Заголовок);
		
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
			
		
		// Подготовим структуру таблицы для отражения затрат.
		ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
		
		// Добавим строку в таблицу затрат.
		НоваяСтрока = ТаблицаЗатрат.Добавить();
		НоваяСтрока.Подразделение 			= СтруктураШапкиДокумента.ПодразделениеЗатраты;
		НоваяСтрока.СтатьяЗатрат 			= СтруктураШапкиДокумента.СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа 	= СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		НоваяСтрока.Проект 					= ТаблицаПлатежейУпр[0].Проект;
		
		НоваяСтрока.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтруктураШапкиДокумента.СуммаУслуг,
			СтруктураШапкиДокумента.ВалютаДокумента,
			СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета
		);
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(
			СтруктураШапкиДокумента,
			ТаблицаЗатрат
		);
		
	КонецЕсли;
	
	Для Каждого СтрокаРасшифровки Из ЭтотОбъект.РасшифровкаПлатежа Цикл
		 		
		// <- Шевченков
		// По регистру "ОстаткиПоБюджетам"
	
		НаборДвиженийОстаткиПоБюджетам   = Движения.ПРГ_ОстаткиПоБюджетам;
		ТаблицаДвиженийОстаткиПоБюджетам = НаборДвиженийОстаткиПоБюджетам.Выгрузить();
		ТаблицаДвиженийОстаткиПоБюджетам.Очистить();
		
		СтруктураКурсВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(
				СтрокаРасшифровки.Заявка.ВалютаДокумента, ЭтотОбъект.ДатаОплаты);
				
		мВалютаУправленческогоУчета=глЗначениеПеременной("ВалютаУправленческогоУчета");
		
		СтруктураГруппаВалют = Новый Структура;
		СтруктураГруппаВалют.Вставить("ВалютаУпрУчета",мВалютаУправленческогоУчета.Код);
		СтруктураГруппаВалют.Вставить("ВалютаДокумента",СтрокаРасшифровки.Заявка.ВалютаДокумента.Код);
	
		СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют, ЭтотОбъект.ДатаОплаты);
		
		Для Каждого Платеж Из СтрокаРасшифровки.Заявка.РасшифровкаПлатежа Цикл
			
			СтрокаДвижениеОстаткиПоСтатьям = ТаблицаДвиженийОстаткиПоБюджетам.Добавить();
			
			СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				Платеж.СуммаПлатежа,
				СтрокаРасшифровки.Заявка.ВалютаДокумента, Справочники.Валюты.НайтиПоКоду("643"),
				СтруктураКурсВзаиморасчетов.Курс, СтруктураКурсыВалют.ВалютаУпрУчетаКурс, 
				СтруктураКурсВзаиморасчетов.Кратность, СтруктураКурсыВалют.ВалютаУпрУчетаКратность);
				
			СтрокаДвижениеОстаткиПоСтатьям.Подразделение = СтрокаРасшифровки.Заявка.ЦФО;
			СтрокаДвижениеОстаткиПоСтатьям.СтатьяДДС     = Платеж.СтатьяДвиженияДенежныхСредств;
			СтрокаДвижениеОстаткиПоСтатьям.Проект        = ?(ЗначениеЗаполнено(Платеж.Проект), Платеж.Проект, Неопределено);
			СтрокаДвижениеОстаткиПоСтатьям.Сумма         = СуммаУпр;
			СтрокаДвижениеОстаткиПоСтатьям.СарехОрех     = СтрокаРасшифровки.Заявка.СарехОрех;
		                            			
		КонецЦикла;
		
		НаборДвиженийОстаткиПоБюджетам.мПериод            = ЭтотОбъект.ДатаОплаты;
		НаборДвиженийОстаткиПоБюджетам.мТаблицаДвижений   = ТаблицаДвиженийОстаткиПоБюджетам;
		
		Движения.ПРГ_ОстаткиПоБюджетам.ВыполнитьДвижения();
	
		// ->
			
	КонецЦикла;
		
КонецПроцедуры

Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента)
	
	Если НЕ (Оплачено И ОтраженоВОперУчете) Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияНакопления.Расход;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком Тогда
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя Тогда
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	Иначе
		ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.Прочее;
	КонецЕсли;
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
	УправлениеВзаиморасчетами.ОтражениеОплатыВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ДатаДвижений, "РасшифровкаПлатежа", ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);

КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, Отказ, Заголовок,СтруктураШапкиДокумента)
	
	Если не (СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете и СтруктураШапкиДокумента.Оплачено) Тогда
		Возврат;
	КонецЕсли; 
	
	// Бухгалтерские проводки документа
	ДатаДока = ДатаДвижений;
	
	ВалютаРег   = мВалютаРегламентированногоУчета;
	
	ПроводкиБУ  = Движения.Хозрасчетный;
	ПроводкиНУ  = Движения.Налоговый;
	
	РасчетыВВалюте  = Ложь;
	СчетДт = УправлениеДенежнымиСредствами.ОпределитьСчетУчетаДенежныхСредств(СтруктураШапкиДокумента.СчетОрганизации, мВалютаРегламентированногоУчета, РасчетыВВалюте);
	//начало изменений
	РасчетыПоВалютеДоговора = Ложь;
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		Если РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
			РасчетыПоВалютеДоговора = Истина;
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений
	//начало изменений
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПодотчетником Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Возврат денежных средств подотчетником ";
		
		Проводка.СчетДт      = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Если СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			 Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
		Иначе
			  Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
		КонецЕсли;	
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.ФизЛицо);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
			
			
			СуммаПроводки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
			СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		Иначе
			СуммаПроводки = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		Проводка.Сумма = СуммаПроводки;
    //конец изменений 
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Прочее поступление денежных средств";
		
		Проводка.СчетДт      = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Проводка.СчетКт = СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.СубконтоКт1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураШапкиДокумента.СубконтоКт2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураШапкиДокумента.СубконтоКт3);
		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
			
			
			СуммаПроводки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
			СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		Иначе
			СуммаПроводки = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
		Проводка.Сумма = СуммаПроводки;
		
		// Сформируем проводку по НУ
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
			И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			
			Проводка = ПроводкиНУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание  = "Прочее поступление денежных средств";
			
			Проводка.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ДоговорКонтрагента);
			
			Проводка.СчетКт = СчетУчетаРасчетовСКонтрагентомНУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СубконтоНУКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СубконтоНУКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СубконтоНУКт3);
			
			Проводка.Сумма = СуммаПроводки;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Расчеты по кредитам и займам";
		
		Проводка.СчетДт      = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СчетОрганизации);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств);
		
		Проводка.СчетКт      = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, РасшифровкаПлатежа[0].ДоговорКонтрагента);
		
		

		
		Если РасчетыВВалюте Тогда
			
			Если Проводка.СчетДт.Валютный Тогда
				Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			Если Проводка.СчетКт.Валютный Тогда
				Проводка.ВалютаКт        = СтруктураШапкиДокумента.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтруктураШапкиДокумента.СуммаДокумента;
			КонецЕсли;
			
			ДанныеОВалюте   = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
			
			Проводка.Сумма  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалюте.Курс, 
			СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалюте.Кратность);
		Иначе
			//начало изменений
			Если РасчетыПоВалютеДоговора Тогда
					Если Проводка.СчетДт.Валютный Тогда
						Проводка.ВалютаДт        = РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт = РасшифровкаПлатежа[0].СуммаВзаиморасчетов;
					КонецЕсли;
					
					Если Проводка.СчетКт.Валютный Тогда
						Проводка.ВалютаКт        = РасшифровкаПлатежа[0].ДоговорКонтрагента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаКт = РасшифровкаПлатежа[0].СуммаВзаиморасчетов;
					КонецЕсли;
			КонецЕсли;	
			//конец изменений 
			Проводка.Сумма = СтруктураШапкиДокумента.СуммаДокумента;
		КонецЕсли;
		
	Иначе
		СтруктураПараметровДДС = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляДвиженияДенег(Ссылка, мВалютаРегламентированногоУчета, Заголовок,СчетДт);
		
		Если Не (СтруктураПараметровДДС = Ложь) тогда
			
			БухгалтерскийУчетРасчетовСКонтрагентами.БухгалтерскийУчетРасчетыСКонтрагентами_Оплата(СтруктураПараметровДДС, СтруктураШапкиДокумента, Движения, Отказ, Заголовок, ПринадлежностьПоследовательностям);
			
		Иначе
			БухгалтерскийУчетРасчетовСКонтрагентами.ДвижениеДенегПрочийПриход(ЭтотОбъект, РасчетыВВалюте, СчетДт, СтруктураШапкиДокумента, Отказ, Заголовок);
		Конецесли;
		
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам 
		и не СуммаУслуг = 0 
		Тогда
		
		ДанныеОВалютеРег= МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРег, ДатаДока);
		СуммаУслугРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаУслуг, СтруктураШапкиДокумента.ВалютаДокумента, ВалютаРег,
		СтруктураШапкиДокумента.КурсДокумента,      ДанныеОВалютеРег.Курс, 
		СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалютеРег.Кратность);
		
		// Подготовим структуру таблицы для отражения затрат.
		ТаблицаЗатрат = УправлениеЗатратами.СформироватьТаблицуЗатрат();
		
		// Добавим строку в таблицу затрат.
		НоваяСтрока = ТаблицаЗатрат.Добавить();
		НоваяСтрока.ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизацииЗатраты;
		НоваяСтрока.СтатьяЗатрат 			= СтруктураШапкиДокумента.СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа 	= СтруктураШапкиДокумента.НоменклатурнаяГруппа;
		НоваяСтрока.СчетЗатрат 				= СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		НоваяСтрока.СчетЗатратНУ 			= СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомНУ;
		
		НоваяСтрока.СуммаРегл 				= СуммаУслугРегл;
		НоваяСтрока.СуммаНал 				= СуммаУслугРегл;
		
		УправлениеЗатратами.ДвиженияПоПрочимЗатратам(СтруктураШапкиДокумента, ТаблицаЗатрат);
		
		// Сформируем проводку по бухгалтерскому учету.
		ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом);
		
		//Оплата посреднических услуг БУ
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период      = ДатаДока;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		
		Проводка.СчетДт      = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
		
		Если ПроизводственныеРасходы Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизацииЗатраты);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтруктураШапкиДокумента.СтатьяЗатрат);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоКт3);
		КонецЕсли;
		
		Проводка.СчетКт      = РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", РасшифровкаПлатежа[0].ДоговорКонтрагента);
		
		Проводка.Сумма       = СуммаУслугРегл;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
			И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ) Тогда
			
			ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентомНУ, "Налоговый");
			
			//Оплата посреднических услуг НУ
			Проводка    = ПроводкиНУ.Добавить();
			
			Проводка.Период      = ДатаДока;
			Проводка.Организация = СтруктураШапкиДокумента.Организация;
			
			Проводка.СчетДт      = СчетУчетаРасчетовСКонтрагентомНУ;
			
			Если ПроизводственныеРасходыНУ Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",        СтруктураШапкиДокумента.ПодразделениеОрганизацииЗатраты);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтруктураШапкиДокумента.НоменклатурнаяГруппа);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",         СтруктураШапкиДокумента.СтатьяЗатрат);
			Иначе
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураШапкиДокумента.СубконтоНУКт1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураШапкиДокумента.СубконтоНУКт2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураШапкиДокумента.СубконтоНУКт3);
			КонецЕсли;
			
			Проводка.Сумма       = СуммаУслугРегл;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		НалоговыйУчетУСН.ДвиженияУСН(Ссылка, РежимПроведения);
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы И (СтруктураШапкиДокумента.Оплачено ИЛИ НЕ СтруктураШапкиДокумента.ОтражатьВУправленческомУчете) Тогда
		
		НалоговыйУчетУСН.ПрочееДДС(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок)

	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		Сообщить(Заголовок+" 
		|не совпадают сумма документа и ее расшифровка.");

		Отказ = Истина;

	КонецЕсли;

	Если Оплачено Тогда
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейОплатаУпр(), Отказ, Заголовок);
	КонецЕсли;

	Если ОтраженоВОперУчете ИЛИ (ОтражатьВБухгалтерскомУчете И Оплачено) Тогда
		
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолейРасчетыУпр(), Отказ, Заголовок);
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			ПроверитьЗаполнениеТЧ(Отказ, Заголовок);
			Если Не Отказ Тогда
				УправлениеДенежнымиСредствами.КонтрольОстатковПоТЧ(Дата, ТаблицаПлатежейУпр, Отказ, Заголовок,,Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом");
		
		Если ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
			ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
		//начало изменений
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПодотчетником Тогда
			СтруктураПолей = Новый Структура("ФизЛицо");
			ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
		//конец изменений 
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам тогда
			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);
			
			Если не СуммаУслуг = 0 тогда 
				СтруктураПолей = Новый Структура("СчетУчетаРасчетовСКонтрагентом", "Не заполнено значение реквизита ""Счет затрат""!");
				СтруктураПолей.Вставить("СтатьяЗатрат");
				СтруктураПолей.Вставить("ПодразделениеОрганизацииЗатраты");
				
				ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
			КонецЕсли;
			
		Иначе
			ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасшифровкаПлатежа", СтруктураПолей, Отказ, Заголовок);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента)

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВедениеВзаиморасчетов"                         , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВалютаВзаиморасчетов"                          , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "Организация"                       			, "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "ВидДоговора"                       			, "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорКонтрагента"  , "КонтролироватьДенежныеСредстваКомитента"       , "КонтролироватьДенежныеСредстваКомитента");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организация"         , "ОтражатьВРегламентированномУчете"              , "ОтражатьВРегламентированномУчете");
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"    , "ВалютаУправленческогоУчета");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");
	КонецЕсли;

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ОтражатьВУправленческомУчете",Истина); // Банковские документы всегда отражаются в упр. учете
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами ИЛИ
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		
		КурсДокумента      = РасшифровкаПлатежа[0].КурсВзаиморасчетов;
		КратностьДокумента = РасшифровкаПлатежа[0].КратностьВзаиморасчетов;

	Иначе	
		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
		
		КурсДокумента      = СтруктураКурсаДокумента.Курс;
		КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
 	СтруктураШапкиДокумента.Вставить("КурсДокумента"		, КурсДокумента);
	СтруктураШапкиДокумента.Вставить("КратностьДокумента"	, КратностьДокумента);
	
	ДатаДвижений=?(Оплачено,УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Дата,ДатаОплаты),Дата);
	СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаДвижений);
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)

	Если (Основание <> Неопределено) И (Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание))) Тогда
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		УправлениеДенежнымиСредствами.ЗаполнитьПриходПоОснованию(ЭтотОбъект, Основание, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	КонецЕсли;

	Если НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроведения(Отказ, Режим)

	Перем Заголовок, СтруктураШапкиДокумента;
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Истина, Режим);
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);

	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	Если НЕ ОтраженоВОперУчете И НЕ Оплачено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбрано правило проведения (""Отразить в опер. учете"",""Оплачено"")",Отказ, Заголовок);
	КонецЕсли;
	
	ТаблицаПлатежейУпр = УправлениеДенежнымиСредствами.ПолучитьТаблицуПлатежейУпр(ДатаДвижений,ВалютаДокумента,Ссылка, "ПлатежноеПоручениеВходящее");
	
	ПроверитьЗаполнениеДокументаУпр(Отказ, Заголовок);
	ПроверитьЗаполнениеДокументаРегл(Отказ, Заголовок);

	//начало изменений отключаем проверку по кредитам из займам
	РасчетыВУЕ = Неопределено;
	Если  ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		      РасчетыВУЕ = истина;
	КонецЕсли;	
	//конец изменений 
	
	//Проверим на возможность проведения в БУ и НУ
	Если ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете тогда
		Для каждого СтрокаОплаты из РасшифровкаПлатежа Цикл
			УправлениеВзаиморасчетами.ПроверкаВозможностиПроведенияВ_БУ_НУ(СтрокаОплаты.ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
					СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
					мВалютаРегламентированногоУчета, Истина,Отказ, Заголовок,"Строка "+СтрокаОплаты.НомерСтроки+" - ",,РасчетыВУЕ);
		КонецЦикла;
	КонецЕсли;
	
	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Режим, Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЧастичнаяОплата Тогда
		Сообщить("По документу "+ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка)+" уже прошла частичная оплата.
		|Перед отменой проведения документа необходимо отменить проведение платежных ордеров.");
		Отказ=Истина;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект);
	
	//начало изменений
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПодотчетником Тогда
		Если РасшифровкаПлатежа.Количество() = 1 Тогда
			Если РасшифровкаПлатежа[0].СуммаВзаиморасчетов <> РасшифровкаПлатежа[0].СуммаПлатежа Тогда
				РасшифровкаПлатежа[0].СуммаВзаиморасчетов = РасшифровкаПлатежа[0].СуммаПлатежа;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	//конец изменений 


	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры

// Процедура - обработчик события "ПриКопировании" объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	ДокументОснование = Неопределено;
	ЧастичнаяОплата   = Ложь;

КонецПроцедуры

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСтруктураПараметровДенежныхСредств = Новый Структура;
мСтруктураПараметровДенежныхСредств.Вставить("ВидДенежныхСредств", Перечисления.ВидыДенежныхСредств.Безналичные);
