Перем мУдалятьДвижения;

Перем мВалютаРегламентированногоУчета Экспорт;

//Процедура заполнения выполняемых действий при создании нового документа
Процедура ЗаполнитьВыполняемыеДействия() Экспорт
	ДенежныеСредстваВКассах            = ОтражатьВУправленческомУчете;
	ДенежныеСредстваНаБанковскихСчетах = ОтражатьВУправленческомУчете;
	ВзаиморасчетыСКонтрагентами        = ОтражатьВУправленческомУчете;
	ВзаиморасчетыСПодотчетнымиЛицами   = ОтражатьВУправленческомУчете;

	Если ОтражатьВУправленческомУчете Тогда
		ОтражатьВБухгалтерскомУчете = Ложь;
		ОтражатьВНалоговомУчете     = Ложь;
	КонецЕсли;
    ПереоценкаВалютныхСредствРегл = ОтражатьВБухгалтерскомУчете;
	ПереоценкаРасчетовВУсловныхЕдиницахРегл = ОтражатьВБухгалтерскомУчете;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)

	// Укажем, что надо проверить:
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда

		СтруктураОбязательныхПолей = Новый Структура("Организация");

		// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
		ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);

		// Теперь вызовем общую процедуру проверки.
		ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);

		
	КонецЕсли;
	//Проверка указано ли хотя бы одно выполняемое действие
	ЕстьВыполняемыеДействия = ложь;
	Если ОтражатьВУправленческомУчете Тогда
		ЕстьВыполняемыеДействия = ДенежныеСредстваВКассах или ДенежныеСредстваНаБанковскихСчетах или ВзаиморасчетыСКонтрагентами или ВзаиморасчетыСПодотчетнымиЛицами;
	ИначеЕсли ОтражатьВБухгалтерскомУчете Тогда
		ЕстьВыполняемыеДействия = ПереоценкаВалютныхСредствРегл или  ПереоценкаРасчетовВУсловныхЕдиницахРегл;
	КонецЕсли;
	Если не ЕстьВыполняемыеДействия Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбраны выполняемые действия",Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Формирует таблицу данных с итогами по подотчетникам
//
Функция ПодготовитьТаблицуПоПодотчетникам(СтруктураШапкиДокумента)

	ЗапросПоДенежнымСредствам = Новый Запрос;
	ЗапросПоДенежнымСредствам.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	ЗапросПоДенежнымСредствам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Организация,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ФизЛицо,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток  КАК СуммаВзаиморасчетовОстаток,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаУпрОстаток             КАК СуммаУпрОстаток,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта                      КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс                                        КАК КурсВалютыДенежныхСредств, 
	|	КурсыВалютСрезПоследних.Кратность                                   КАК КратностьВалютыДенежныхСредств 
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ГраницаОстатков,) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ГраницаОстатков,) КАК КурсыВалютСрезПоследних
	|ПО
	|	КурсыВалютСрезПоследних.Валюта = ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта";
	Выборка = ЗапросПоДенежнымСредствам.Выполнить().Выгрузить();

	Выборка.Колонки.Добавить("СуммаУпр",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    МассивДляУдаления=Новый Массив;
	
	Для каждого СтрокаТаблицы из Выборка Цикл
		
		Если Не СтрокаТаблицы.КурсВалютыДенежныхСредств=NULL Тогда 
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетовОстаток, СтрокаТаблицы.Валюта,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
													СтрокаТаблицы.КурсВалютыДенежныхСредств, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтрокаТаблицы.КратностьВалютыДенежныхСредств, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) - 
													СтрокаТаблицы.СуммаУпрОстаток;
																								
													
		КонецЕсли;
												
		Если СтрокаТаблицы.СуммаУпр=0 Тогда
			МассивДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;		
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ МассивДляУдаления Цикл
		Выборка.Удалить(Строка);
	КонецЦикла;

	Возврат Выборка;

КонецФункции

// Формирует таблицу данных с итогами по взаиморасчетам
//
Функция ПодготовитьТаблицуПоВзаиморасчетам(СтруктураШапкиДокумента)

	ЗапросПоДенежнымСредствам = Новый Запрос;
	ЗапросПоДенежнымСредствам.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	ЗапросПоДенежнымСредствам.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетысКонтрагентамиОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетысКонтрагентамиОстатки.Контрагент,
	|	ВзаиморасчетысКонтрагентамиОстатки.Организация,
	|	ВзаиморасчетысКонтрагентамиОстатки.Сделка,
	|	ВзаиморасчетысКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	|	ВзаиморасчетысКонтрагентамиОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
	|	ВзаиморасчетысКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК КурсВалютыДенежныхСредств,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьВалютыДенежныхСредств
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ГраницаОстатков, ) КАК ВзаиморасчетысКонтрагентамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ГраницаОстатков, ) КАК КурсыВалютСрезПоследних
	|		ПО КурсыВалютСрезПоследних.Валюта = ВзаиморасчетысКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов";

	Выборка = ЗапросПоДенежнымСредствам.Выполнить().Выгрузить();

	Выборка.Колонки.Добавить("СуммаУпр",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    МассивДляУдаления=Новый Массив;
	
	Для каждого СтрокаТаблицы из Выборка Цикл
		
		Если Не СтрокаТаблицы.КурсВалютыДенежныхСредств=NULL Тогда 
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетовОстаток, СтрокаТаблицы.Валюта,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
													СтрокаТаблицы.КурсВалютыДенежныхСредств, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтрокаТаблицы.КратностьВалютыДенежныхСредств, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) - 
													СтрокаТаблицы.СуммаУпрОстаток;
																								
													
		КонецЕсли;
												
		Если СтрокаТаблицы.СуммаУпр=0 Тогда
			МассивДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;		
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ МассивДляУдаления Цикл
		Выборка.Удалить(Строка);
	КонецЦикла;

	Возврат Выборка;

КонецФункции

// Формирует таблицу данных с итогами по расчетам
//
Функция ПодготовитьТаблицуПоРасчетам(СтруктураШапкиДокумента)

	ЗапросПоДенежнымСредствам = Новый Запрос;
	ЗапросПоДенежнымСредствам.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	ЗапросПоДенежнымСредствам.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетысКонтрагентамиОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетысКонтрагентамиОстатки.Контрагент,
	|	ВзаиморасчетысКонтрагентамиОстатки.Организация,
	|	ВзаиморасчетысКонтрагентамиОстатки.Сделка,
	|	ВзаиморасчетысКонтрагентамиОстатки.РасчетыВозврат,
	|	ВзаиморасчетысКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	|	ВзаиморасчетысКонтрагентамиОстатки.СуммаУпрОстаток            КАК СуммаУпрОстаток,
	|	ВзаиморасчетысКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс                                  КАК КурсВалютыДенежныхСредств, 
	|	КурсыВалютСрезПоследних.Кратность                             КАК КратностьВалютыДенежныхСредств 
	|ИЗ
	|	РегистрНакопления.РасчетысКонтрагентами.Остатки(&ГраницаОстатков,) КАК ВзаиморасчетысКонтрагентамиОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ГраницаОстатков,) КАК КурсыВалютСрезПоследних
	|ПО
	|	КурсыВалютСрезПоследних.Валюта = ВзаиморасчетысКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов";
	Выборка = ЗапросПоДенежнымСредствам.Выполнить().Выгрузить();

	Выборка.Колонки.Добавить("СуммаУпр",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    МассивДляУдаления=Новый Массив;
	
	Для каждого СтрокаТаблицы из Выборка Цикл
		
		Если Не СтрокаТаблицы.КурсВалютыДенежныхСредств=NULL Тогда 
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетовОстаток, СтрокаТаблицы.Валюта,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
													СтрокаТаблицы.КурсВалютыДенежныхСредств, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтрокаТаблицы.КратностьВалютыДенежныхСредств, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) - 
													СтрокаТаблицы.СуммаУпрОстаток;
																								
													
		КонецЕсли;
												
		Если СтрокаТаблицы.СуммаУпр=0 Тогда
			МассивДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;		
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ МассивДляУдаления Цикл
		Выборка.Удалить(Строка);
	КонецЦикла;

	Возврат Выборка;

КонецФункции

// Формирует таблицу данных с итогами по денежным средствам
//
Функция ПодготовитьТаблицуПоДенежнымСредствам(СтруктураШапкиДокумента)

	ЗапросПоДенежнымСредствам = Новый Запрос;
	ЗапросПоДенежнымСредствам.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	ЗапросПоДенежнымСредствам.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваОстатки.БанковскийСчетКасса,
	|	ДенежныеСредстваОстатки.Организация,
	|	ДенежныеСредстваОстатки.ВидДенежныхСредств,
	|	ДенежныеСредстваОстатки.СуммаОстаток    КАК СуммаОстаток,
	|	ДенежныеСредстваОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
	|	ДенежныеСредстваОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс            КАК КурсВалютыДенежныхСредств, 
	|	КурсыВалютСрезПоследних.Кратность       КАК КратностьВалютыДенежныхСредств 
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(&ГраницаОстатков,) КАК ДенежныеСредстваОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ГраницаОстатков,) КАК КурсыВалютСрезПоследних
	|ПО
	|	КурсыВалютСрезПоследних.Валюта = ДенежныеСредстваОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств";

	Если НЕ ДенежныеСредстваВКассах Тогда

		ЗапросПоДенежнымСредствам.Текст = ЗапросПоДенежнымСредствам.Текст + "
		|ГДЕ
		|	ДенежныеСредстваОстатки.БанковскийСчетКасса ССЫЛКА Справочник.БанковскиеСчета";

	ИначеЕсли НЕ ДенежныеСредстваНаБанковскихСчетах Тогда

		ЗапросПоДенежнымСредствам.Текст = ЗапросПоДенежнымСредствам.Текст + "
		|ГДЕ
		|	ДенежныеСредстваОстатки.БанковскийСчетКасса ССЫЛКА Справочник.Кассы";

	КонецЕсли;

	Выборка = ЗапросПоДенежнымСредствам.Выполнить().Выгрузить();

	Выборка.Колонки.Добавить("СуммаУпр",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    МассивДляУдаления=Новый Массив;
	
	Для каждого СтрокаТаблицы из Выборка Цикл
		
		Если Не СтрокаТаблицы.КурсВалютыДенежныхСредств=NULL Тогда 
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаОстаток, СтрокаТаблицы.Валюта,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
													СтрокаТаблицы.КурсВалютыДенежныхСредств, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтрокаТаблицы.КратностьВалютыДенежныхСредств, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) - 
													СтрокаТаблицы.СуммаУпрОстаток;
																								
													
		КонецЕсли;
												
		Если СтрокаТаблицы.СуммаУпр=0 Тогда
			МассивДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;		
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ МассивДляУдаления Цикл
		Выборка.Удалить(Строка);
	КонецЦикла;

	Возврат Выборка;

КонецФункции

// Формирует таблицу данных с итогами по денежным средствам
//
Функция ПодготовитьТаблицуПоДенежнымСредствамКПолучению(СтруктураШапкиДокумента)

	ЗапросПоДенежнымСредствам = Новый Запрос;
	ЗапросПоДенежнымСредствам.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	ЗапросПоДенежнымСредствам.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДенежныеСредстваКПолучениюОстатки.Организация,
	|	ДенежныеСредстваКПолучениюОстатки.БанковскийСчетКасса,
	|	ДенежныеСредстваКПолучениюОстатки.ВидДенежныхСредств,
	|	ДенежныеСредстваКПолучениюОстатки.ДокументПолучения,
	|	ДенежныеСредстваКПолучениюОстатки.СуммаОстаток    КАК СуммаОстаток,
	|	ДенежныеСредстваКПолучениюОстатки.СуммаУпрОстаток КАК СуммаУпрОстаток,
	|	ДенежныеСредстваКПолучениюОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс            КАК КурсВалютыДенежныхСредств, 
	|	КурсыВалютСрезПоследних.Кратность       КАК КратностьВалютыДенежныхСредств 
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКПолучению.Остатки(&ГраницаОстатков,) КАК ДенежныеСредстваКПолучениюОстатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ГраницаОстатков,) КАК КурсыВалютСрезПоследних
	|ПО
	|	КурсыВалютСрезПоследних.Валюта = ДенежныеСредстваКПолучениюОстатки.БанковскийСчетКасса.ВалютаДенежныхСредств";

	Если НЕ ДенежныеСредстваВКассах Тогда

		ЗапросПоДенежнымСредствам.Текст = ЗапросПоДенежнымСредствам.Текст + "
		|ГДЕ
		|	ДенежныеСредстваКПолучениюОстатки.БанковскийСчетКасса ССЫЛКА Справочник.БанковскиеСчета";

	ИначеЕсли НЕ ДенежныеСредстваНаБанковскихСчетах Тогда

		ЗапросПоДенежнымСредствам.Текст = ЗапросПоДенежнымСредствам.Текст + "
		|ГДЕ
		|	ДенежныеСредстваКПолучениюОстатки.БанковскийСчетКасса ССЫЛКА Справочник.Кассы";

	КонецЕсли;

	Выборка = ЗапросПоДенежнымСредствам.Выполнить().Выгрузить();

	Выборка.Колонки.Добавить("СуммаУпр",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
    МассивДляУдаления=Новый Массив;
	
	Для каждого СтрокаТаблицы из Выборка Цикл
		
		Если Не СтрокаТаблицы.КурсВалютыДенежныхСредств=NULL Тогда 
		
		СтрокаТаблицы.СуммаУпр = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаОстаток, СтрокаТаблицы.Валюта,
													СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
													СтрокаТаблицы.КурсВалютыДенежныхСредств, 
													СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
													СтрокаТаблицы.КратностьВалютыДенежныхСредств, 
													СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета) - 
													СтрокаТаблицы.СуммаУпрОстаток;
																								
													
		КонецЕсли;
												
		Если СтрокаТаблицы.СуммаУпр=0 Тогда
			МассивДляУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;		
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ МассивДляУдаления Цикл
		Выборка.Удалить(Строка);
	КонецЦикла;

	Возврат Выборка;

КонецФункции

Процедура ДвиженияПорегистрамВзаиморасчетыСПодотчетнымиЛицамиУпр(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоПодотчетникам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ВзаиморасчетыСПодотчетнымиЛицами Тогда
		Возврат;
	КонецЕсли;

	НаборДвижений   = Движения.ВзаиморасчетыСПодотчетнымиЛицами;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоПодотчетникам, ТаблицаДвижений);

	НаборДвижений.мПериод          = КонецДня(Дата);
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСПодотчетнымиЛицами.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПорегистрамВзаиморасчетыСПодотчетнымиЛицамиУпр()

Процедура ДвиженияПорегистрамВзаиморасчетыСКонтрагентамиУпр(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоВзаиморасчетам,ТаблицаПоРасчетам, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ВзаиморасчетыСКонтрагентами Тогда
		Возврат;
	КонецЕсли;

	НаборДвижений = Движения.ВзаиморасчетыСКонтрагентами;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоВзаиморасчетам, ТаблицаДвижений);

	НаборДвижений.мПериод          = КонецДня(Дата);
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ВзаиморасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;

	НаборДвижений = Движения.РасчетыСКонтрагентами;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоРасчетам, ТаблицаДвижений);

	НаборДвижений.мПериод          = КонецДня(Дата);
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.РасчетыСКонтрагентами.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПорегистрамВзаиморасчетыСПодотчетнымиЛицамиУпр()

// Формирует движения по денежным средствам
//
Процедура ДвиженияПорегистрамДенежныеСредстваУпр(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоДенежнымСредствам,ТаблицаПоДенежнымСредствамКПолучению, Отказ, Заголовок)

	Если НЕ (СтруктураШапкиДокумента.ДенежныеСредстваВКассах ИЛИ СтруктураШапкиДокумента.ДенежныеСредстваНаБанковскихСчетах) Тогда
		Возврат;
	КонецЕсли;

	НаборДвижений = Движения.ДенежныеСредства;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДенежнымСредствам, ТаблицаДвижений);

	НаборДвижений.мПериод          = КонецДня(Дата);
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ДенежныеСредства.ВыполнитьПриход();
	КонецЕсли;

	НаборДвижений = Движения.ДенежныеСредстваКПолучению;

	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();

	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоДенежнымСредствамКПолучению, ТаблицаДвижений);

	НаборДвижений.мПериод          = КонецДня(Дата);
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;

	Если Не Отказ Тогда
		Движения.ДенежныеСредстваКПолучению.ВыполнитьПриход();
	КонецЕсли;

КонецПроцедуры // ДвиженияПорегистрамДенежныеСредстваУпр()

// Процедура рассчитывает курсовые разницы и формирует проводки БУ, НУ и движения КУДиР для УСН
//
// Параметры
//  СтруктураШапкиДокумента	– <Структура> – структура шапки документа, откуда вызвана процедура
//  ДвиженияДокумента		– <Коллекция> – коллекция движений документа, откуда вызвана процедура
//  Отказ					– <Булево> – при возникновении ошибок процедура возвращает в этот параметр значение Истина
//  Заголовок				– <Строка> – заголовок сообщений об ошибках
//  ДвиженияБылиЗаписаны	– <Булево> – если движения документа записывались в процессе проведения, для определения переоцениваемых счетов и субконто. 
//									необходимо анализировать не Движения.Хозрасчетный, а прочитанный набор записей с отбором по регистратору.
//  РегламентнаяПереоценка	– <Булево> – если Истина - переоценивать нужно все остатки по всем счетам и субконто, 
//									если Ложь - только остатки по счетам и субконто из проводок текущего документа.
//
Процедура ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Отказ, Заголовок, ТаблицаРасчетаПереоценкиВалюты = Неопределено)
	
	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	
	ПереоценкаНаОтчетнуюДату = (КонецДня(Дата) = КонецМесяца(Дата));
	
	ГраницаОстатков     = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	
	ОтражатьВ_НУ        = СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
	ПоддержкаПБУ18      = СтруктураШапкиДокумента.ПоддержкаПБУ18;
	ОтражатьВ_УСН       = СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН;
	ОтражатьВ_УСНДоходы = СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы;
	
	// с 2013 доходы и расходы от переоценки валютных ценностей при исчислении УСН не определяются и не учитываются
	Если Дата >= '20130101' Тогда
		ОтражатьВ_УСН 		= Ложь;
		ОтражатьВ_УСНДоходы = Ложь;
	Иначе
		ОтражатьВ_УСН       = ОтражатьВ_УСН И Дата >= '20060101';
		ОтражатьВ_УСНДоходы = ОтражатьВ_УСНДоходы И Дата >= '20060101';
	КонецЕсли;
	
	// До 2008 года одинаково переоценивались все остатки по балансовым счетам в иностранной валюте
	// С 2008 года в БУ не переоцениваются авансы в валюте, остальные остатки по балансовым счетам переоцениваются
	// В налоговом учете по налогу на прибыль курсовые разницы по переоценке авансов отражаются до 2010 года, 
	// источник данных для курсовых разниц НУ - результат переоценки забалансового счета ВАЛ
	
	ОцениватьДоходовИРасходовВНУПоКурсуАвансов = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьОценкуДоходовРасходовПоКурсуАвансов(Дата);
	Правила2008 = (Дата >= '20080101');
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ГраницаОстатков", ГраницаОстатков);
	
	// Валютные счета, подлежащие переоценке
	// Все балансовые валютные счета
	// Счета, переоцениваемые в особом порядке, исключаются
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И (НЕ Хозрасчетный.Забалансовый)
	|	И (НЕ Хозрасчетный.Ссылка В
	|				(ВЫБРАТЬ
	|					СчетаСОсобымПорядкомПереоценки.Счет
	|				ИЗ
	|					РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценки))";
	
	СчетаПодлежащиеПереоценке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Счета расчетов с контрагентами
	// Все балансовые счета, подлежащие переоценке, на которых установлены виды субконто Контрагенты, Договоры
	
	Запрос.УстановитьПараметр("СчетаПодлежащиеПереоценке", СчетаПодлежащиеПереоценке);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаСубконтоКонтрагенты.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоДоговоры
	|		ПО СчетаСубконтоКонтрагенты.Ссылка = СчетаСубконтоДоговоры.Ссылка
	|ГДЕ
	|	СчетаСубконтоКонтрагенты.Ссылка В (&СчетаПодлежащиеПереоценке)
	|	И СчетаСубконтоКонтрагенты.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И СчетаСубконтоДоговоры.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)";
	
	СчетаРасчетовСКонтрагентами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Если организация - плательщик налога на прибыль, в 2008 году в список переоцениваемых 
	// добавляется забалансовый счет ВАЛ
	
	Если ОтражатьВ_НУ И Правила2008 Тогда
		СчетаПодлежащиеПереоценке.Добавить(ПланыСчетов.Хозрасчетный.АвансыПокупателейВВалюте);
		СчетаПодлежащиеПереоценке.Добавить(ПланыСчетов.Хозрасчетный.АвансыПоставщикамВВалюте);
	КонецЕсли;
	
	// Получение остатков для проведения переоценки
	
	ВидыСубконтоСчетов = Новый Соответствие; // виды субконто счетов кэшируются
	Запрос.УстановитьПараметр("СчетаРасчетовСКонтрагентами", СчетаРасчетовСКонтрагентами);
	
	Если глЗначениеПеременной("ИспользоватьБлокировкуДанных") Тогда
		
		// Блокируем регистр полностью
		
		БД = Новый БлокировкаДанных;
		БД.Добавить("РегистрБухгалтерии.Хозрасчетный");
		БД.Заблокировать();
				
	КонецЕсли;
		
	Если ПереоценкаНаОтчетнуюДату Тогда
		
		// Получение всех остатков по всем счетам, подлежащим переоценке
		// По счетам расчетов в результат не включаются остатки по договорам в у.е.
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.Субконто3,
		|	ХозрасчетныйОстатки.Валюта,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаРасчетовСКонтрагентами)
		|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидДоговора,
		|	(НЕ ХозрасчетныйОстатки.Счет.Забалансовый) КАК ОтражатьВ_БУ,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
		|	ХозрасчетныйОстатки.СуммаОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&ГраницаОстатков, Счет В (&СчетаПодлежащиеПереоценке), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ХозрасчетныйОстатки.Счет В (&СчетаРасчетовСКонтрагентами)
		|				ТОГДА (НЕ ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки";
		
		ВалютныеОстатки = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		// Получение остатков только по счетам и субконто, по которым были движения за день
		// Оборотные субконто переданного набора записей пропускаются
		
		// Формирование таблицы счетов и субконто для переоценки
		// Заполнение полей ИспользоватьСубконтоХ:
		// 		- если субконто с номером Х нет на счете - Ложь
		// 		- если субконто с номером Х есть и оно необоротное - Истина
		// 		- если субконто с номером Х есть и оно оборотное - Ложь
		// 		- если субконто с номером Х - "ДокументыРасчетовСКонтрагентами" 
		//			и до 2008 года учет по документам не велся и дата документа до 2008 года - Ложь
		
		ТаблицаДляПереоценки = Новый ТаблицаЗначений;
		ТаблицаДляПереоценки.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ОписаниеТиповСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
		ТаблицаДляПереоценки.Колонки.Добавить("Субконто1", ОписаниеТиповСубконто);
		ТаблицаДляПереоценки.Колонки.Добавить("Субконто2", ОписаниеТиповСубконто);
		ТаблицаДляПереоценки.Колонки.Добавить("Субконто3", ОписаниеТиповСубконто);
		
		Запрос.УстановитьПараметр("НачалоДня", НачалоДня(Дата));
		Запрос.УстановитьПараметр("КонецДня", КонецДня(Дата));
		ТекстЗапросаПоОборотам =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХозрасчетныйДвиженияССубконто.ВалютаДт КАК Валюта,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Субконто1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК Субконто2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК Субконто3
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&НачалоДня,
		|			&КонецДня,
		|			Организация = &Организация
		|				И СчетДт = &Счет) КАК ХозрасчетныйДвиженияССубконто
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.ВалютаКт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&НачалоДня,
		|			&КонецДня,
		|			Организация = &Организация
		|				И СчетКт = &Счет) КАК ХозрасчетныйДвиженияССубконто";
		
		ВидыСубконтоСчетов = Новый Соответствие;
		ИспользоватьСубконто = Новый Массив(3);
		
		ВалютныеОстатки = Новый ТаблицаЗначений;
		
		Для каждого ПереоцениваемыйСчет Из СчетаПодлежащиеПереоценке Цикл
				
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("Счет", ПереоцениваемыйСчет);
			Запрос.Текст = ТекстЗапросаПоОборотам;
			Результат = Запрос.Выполнить();
			
			НетДвиженийПоСчету = Результат.Пустой();
			Если НетДвиженийПоСчету Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
			
			ТаблицаДляПереоценки.Очистить();
			
			Для й = 0 По 2 Цикл
				ИспользоватьСубконто[й] = Ложь;
			КонецЦикла;
			
			ВидыСубконтоСчета = ВидыСубконтоСчетов[ПереоцениваемыйСчет];
			Если ВидыСубконтоСчета = Неопределено Тогда
				ВидыСубконтоСчета = ПереоцениваемыйСчет.ВидыСубконто;
				ВидыСубконтоСчетов.Вставить(ПереоцениваемыйСчет, ВидыСубконтоСчета);
			КонецЕсли;
			Для Каждого СтрокаВидаСубконто Из ВидыСубконтоСчета Цикл
				ИспользоватьСубконто[СтрокаВидаСубконто.НомерСтроки - 1] = НЕ СтрокаВидаСубконто.ТолькоОбороты;
			КонецЦикла;
					
			Для каждого СтрокаДвижения из ТаблицаДвижений Цикл
				
				СтрокаДляПереоценки        = ТаблицаДляПереоценки.Добавить();
				СтрокаДляПереоценки.Валюта = СтрокаДвижения.Валюта;
				
				Для й = 1 По 3 Цикл
					Если ИспользоватьСубконто[й - 1] Тогда
						СтрокаДляПереоценки["Субконто" + й] = СтрокаДвижения["Субконто" + й];
					Иначе
						СтрокаДляПереоценки["Субконто" + й] = Неопределено;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
			НетПереоцениваемыхСчетов = (ТаблицаДляПереоценки.Количество() = 0);
			Если НетПереоцениваемыхСчетов Тогда
				Продолжить;
			КонецЕсли;

			ТаблицаДляПереоценки.Свернуть("Субконто1, Субконто2, Субконто3, Валюта");
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Таб.Валюта,
			|	Таб.Субконто1,
			|	Таб.Субконто2,
			|	Таб.Субконто3
			|ПОМЕСТИТЬ ТаблицаДляПереоценки
			|ИЗ
			|	&ТаблицаДляПереоценки КАК Таб";
			Запрос.УстановитьПараметр("ТаблицаДляПереоценки", ТаблицаДляПереоценки);
			Запрос.Выполнить();
			
			// Выполняем запрос к остаткам
			// По счетам расчетов в результат не включаются остатки по договорам в у.е.
			
			ШаблонТекстаЗапроса =
			"ВЫБРАТЬ
			|	ХозрасчетныйОстатки.Счет КАК Счет,
			|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
			|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
			|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
			|	ХозрасчетныйОстатки.Валюта,
			|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора КАК ВидДоговора,
			|	(НЕ ХозрасчетныйОстатки.Счет.Забалансовый) КАК ОтражатьВ_БУ,
			|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
			|	ХозрасчетныйОстатки.СуммаОстаток
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&ГраницаОстатков,
			|			Счет = &Счет,
			|			&ВидыСубконто,
			|			Организация = &Организация
			|				И (Валюта, Субконто1, Субконто2, Субконто3) В (ВЫБРАТЬ РАЗЛИЧНЫЕ Таб.Валюта, Таб.Субконто1, Таб.Субконто2, Таб.Субконто3 ИЗ ТаблицаДляПереоценки КАК Таб)) КАК ХозрасчетныйОстатки
			|ГДЕ
			|	(НЕ ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах)
			|
			|ДЛЯ ИЗМЕНЕНИЯ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки";
			
			Запрос.УстановитьПараметр("Счет", ПереоцениваемыйСчет);
			ВидыСубконтоСчета = ВидыСубконтоСчетов[ПереоцениваемыйСчет];
			Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконтоСчета.ВыгрузитьКолонку("ВидСубконто"));
			
			ТекстЗапроса = ШаблонТекстаЗапроса;
			
			ЭтоСчетРасчетов = СчетаРасчетовСКонтрагентами.Найти(ПереоцениваемыйСчет) <> Неопределено;
			Если НЕ ЭтоСчетРасчетов Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
					"ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора КАК ВидДоговора",
					"НЕОПРЕДЕЛЕНО КАК ВидДоговора");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
					|ГДЕ
					|	(НЕ ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах)",
					"");
			КонецЕсли;
			
			Если НЕ ИспользоватьСубконто[0] Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстатки.Субконто1", "НЕОПРЕДЕЛЕНО");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ", Субконто1", ""); 
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ", Таб.Субконто1", ""); 
			КонецЕсли;
			Если НЕ ИспользоватьСубконто[1] Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстатки.Субконто2", "НЕОПРЕДЕЛЕНО");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ", Субконто2", ""); 
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ", Таб.Субконто2", ""); 
			КонецЕсли;
			Если НЕ ИспользоватьСубконто[2] Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстатки.Субконто3", "НЕОПРЕДЕЛЕНО");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ", Субконто3", ""); 
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ", Таб.Субконто3", ""); 
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВалютныеОстатки.Количество() = 0 Тогда
				ВалютныеОстатки = Результат.Выгрузить();
			Иначе
				ТаблицаРезультата = Результат.Выгрузить();
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРезультата, ВалютныеОстатки);
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли; // Подготовлены остатки для переоценки
	
	Если ВалютныеОстатки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВ_УСН ИЛИ ОтражатьВ_УСНДоходы Тогда
	
		// Счета, результат переоценки которых нужно отразить в УСН
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Валютный
		|		И Хозрасчетный.Ссылка В ИЕРАРХИИ 
		|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути_))";
		
		СчетаПереоценкиУСН = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		// Данные по счетам, переоценка которых отражается в УСН
		
		ТаблицаКурсовыхРазницУСН = Новый ТаблицаЗначений;
		ТаблицаКурсовыхРазницУСН.Колонки.Добавить("Счет",   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаКурсовыхРазницУСН.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаКурсовыхРазницУСН.Колонки.Добавить("Сумма",  Новый ОписаниеТипов("Число"));
		ТаблицаКурсовыхРазницУСН.Колонки.Добавить("БанковскийСчет", 	Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
		
	КонецЕсли;
	
	Если Правила2008 Тогда
			
		// Счета расчетов с поставщиками - используются для определения авансов по валютным договорам с комиссионерами и комитентами
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Валютный
		|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
		|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал))";
		
		СчетаРасчетовСПоставщиками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		// Счета расчетов с покупателями - используются для определения авансов по валютным договорам с комиссионерами и комитентами
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Валютный
		|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
		|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал))";
		
		СчетаРасчетовСПокупателями = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
	КонецЕсли;
		
	// Формирование проводок по курсовым разницам в БУ и НУ
	
	КурсыВалют = Новый Соответствие; // курсы валют кэшируются
	
	СтатьяКурсовыхРазниц = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы;
	
	Для каждого СтрокаОстатка из ВалютныеОстатки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаОстатка.Валюта) Тогда
			
			ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаОстатка.Счет];
			Если ВидыСубконтоСчета = Неопределено Тогда
				ВидыСубконтоСчета = СтрокаОстатка.Счет.ВидыСубконто;
				ВидыСубконтоСчетов.Вставить(СтрокаОстатка.Счет, ВидыСубконтоСчета);
			КонецЕсли;
			СтрокаСообщения = "Обнаружены остатки по валютному счету без указания валюты. Переоценка остатка не производится." + Символы.ПС
				+ "	- счет: " + СтрокаОстатка.Счет + " <" + СтрокаОстатка.Счет.Наименование + ">";
			Для НомерСубконто = 1 по ВидыСубконтоСчета.Количество() Цикл
				СтрокаСообщения = СтрокаСообщения + Символы.ПС 
					+ "		- субконто <" + Строка(ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто) + "> : """ + СтрокаОстатка["Субконто" + НомерСубконто] + """";
			КонецЦикла;
			ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , Заголовок);
			Продолжить;
			
		КонецЕсли;  
		
		Если НЕ Правила2008 Тогда
			
			// До 2008 года одинаково переоценивались все остатки по балансовым счетам 
			
			ПереоцениватьОстаток = СтрокаОстатка.ОтражатьВ_БУ;
			
		Иначе
			
			// С 2008 года в БУ не переоцениваются авансы в валюте
			// Аванс или задолженность - определяется по виду остатка на счете (дебиторская/кредиторская)
			// и по виду договора
			// Вид договора в таблице остатков определен только для счетов расчетов
			
			Если НЕ ЗначениеЗаполнено(СтрокаОстатка.ВидДоговора) Тогда
			
				ЭтоАванс = Ложь;
			
			ИначеЕсли СтрокаОстатка.ВалютнаяСуммаОстаток = 0 Тогда
			
				ЭтоАванс = Ложь;
			
			ИначеЕсли СтрокаОстатка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
				
				ЭтоАванс = СтрокаОстатка.ВалютнаяСуммаОстаток < 0;
			
			ИначеЕсли СтрокаОстатка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				
				ЭтоАванс = СтрокаОстатка.ВалютнаяСуммаОстаток > 0;
			
			ИначеЕсли СтрокаОстатка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				
				Если СтрокаОстатка.ВалютнаяСуммаОстаток > 0 Тогда
					ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПоставщиком;
				Иначе
					ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПокупателем;
				КонецЕсли;
			
			ИначеЕсли СтрокаОстатка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				
				Если СтрокаОстатка.ВалютнаяСуммаОстаток > 0 Тогда
					ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПоставщиком;
				Иначе
					ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СтрокаОстатка.Счет) <> Неопределено;
					ЭтоАванс                    = ЭтоСчетРасчетовСПокупателем;
				КонецЕсли;
				
			Иначе //.Прочее
				
				ЭтоАванс = Ложь;
			
			КонецЕсли;
			
			ПереоцениватьОстаток = НЕ ЭтоАванс;
			
		КонецЕсли;
		
		Если НЕ ПереоцениватьОстаток Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКурса = КурсыВалют[СтрокаОстатка.Валюта];
		Если СтруктураКурса = Неопределено Тогда
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаОстатка.Валюта, Дата);
			КурсыВалют.Вставить(СтрокаОстатка.Валюта, СтруктураКурса);
		КонецЕсли;

		ОстатокРуб = СтрокаОстатка.СуммаОстаток;
		ОстатокВал = СтрокаОстатка.ВалютнаяСуммаОстаток;
		РасчетныйОстатокРуб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОстатокВал, 
			СтрокаОстатка.Валюта, ВалютаРегламентированногоУчета,
			СтруктураКурса.Курс, 1,
			СтруктураКурса.Кратность, 1);

		Если ОстатокРуб = РасчетныйОстатокРуб Тогда
			Продолжить;
		КонецЕсли;

		СуммаПереоценки = РасчетныйОстатокРуб - ОстатокРуб;
		
		// Проводка по переоценке счета в БУ
		
		ПроводкаБУ = Движения.Хозрасчетный.Добавить();
		
		ПроводкаБУ.Период      = Дата;
		ПроводкаБУ.Организация = Организация;
		ПроводкаБУ.Содержание  = "Переоценка активов и обязательств в валюте";
		ПроводкаБУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСчетов;
		
		ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаОстатка.Счет];
		Если ВидыСубконтоСчета = Неопределено Тогда
			ВидыСубконтоСчета = СтрокаОстатка.Счет.ВидыСубконто;
			ВидыСубконтоСчетов.Вставить(СтрокаОстатка.Счет, ВидыСубконтоСчета);
		КонецЕсли;
			
		Если СуммаПереоценки < 0 Тогда
			
			Если СтрокаОстатка.ОтражатьВ_БУ Тогда
				ПроводкаБУ.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
				ПроводкаБУ.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазниц;
			КонецЕсли;
			
			ПроводкаБУ.СчетКт = СтрокаОстатка.Счет;
			БухгалтерскийУчет.УстановитьСубконто(СтрокаОстатка.Счет, ПроводкаБУ.СубконтоКт, 1, СтрокаОстатка.Субконто1, , , ВидыСубконтоСчета);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаОстатка.Счет, ПроводкаБУ.СубконтоКт, 2, СтрокаОстатка.Субконто2, , , ВидыСубконтоСчета);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаОстатка.Счет, ПроводкаБУ.СубконтоКт, 3, СтрокаОстатка.Субконто3, , , ВидыСубконтоСчета);
			
			ПроводкаБУ.ВалютаКт = СтрокаОстатка.Валюта;
			ПроводкаБУ.Сумма    = -СуммаПереоценки;
			
		Иначе
			
			Если СтрокаОстатка.ОтражатьВ_БУ Тогда
				ПроводкаБУ.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				ПроводкаБУ.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазниц;
			КонецЕсли;
			
			ПроводкаБУ.СчетДт = СтрокаОстатка.Счет;
			БухгалтерскийУчет.УстановитьСубконто(СтрокаОстатка.Счет, ПроводкаБУ.СубконтоДт, 1, СтрокаОстатка.Субконто1, , , ВидыСубконтоСчета);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаОстатка.Счет, ПроводкаБУ.СубконтоДт, 2, СтрокаОстатка.Субконто2, , , ВидыСубконтоСчета);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаОстатка.Счет, ПроводкаБУ.СубконтоДт, 3, СтрокаОстатка.Субконто3, , , ВидыСубконтоСчета);
			
			ПроводкаБУ.ВалютаДт = СтрокаОстатка.Валюта;
			ПроводкаБУ.Сумма    = СуммаПереоценки;
			
		КонецЕсли;
		
		СтрокаРасчетаПереоценкиВалюты = ТаблицаРасчетаПереоценкиВалюты.Добавить();
		
		СтрокаРасчетаПереоценкиВалюты.Счет           = СтрокаОстатка.Счет;
		СтрокаРасчетаПереоценкиВалюты.Субконто1      = СтрокаОстатка.Субконто1;
		СтрокаРасчетаПереоценкиВалюты.Субконто2      = СтрокаОстатка.Субконто2;
		СтрокаРасчетаПереоценкиВалюты.Субконто3      = СтрокаОстатка.Субконто3;
		СтрокаРасчетаПереоценкиВалюты.Валюта         = СтрокаОстатка.Валюта;
		СтрокаРасчетаПереоценкиВалюты.СуммаВВалюте   = ОстатокВал;
		СтрокаРасчетаПереоценкиВалюты.СуммаВРублях   = ОстатокРуб;
		СтрокаРасчетаПереоценкиВалюты.КурсПереоценки = СтруктураКурса.Курс;
		СтрокаРасчетаПереоценкиВалюты.Сумма          = СуммаПереоценки;
		СтрокаРасчетаПереоценкиВалюты.ВидУчета       = Перечисления.ВидыУчетаПоПБУ18.ПустаяСсылка();

		// С 2010 года результат переоценки забалансовых счетов ВАЛ 
		// не отражается во внереализационных доходах/расходах НУ (281-ФЗ от 25.11.09)
		ОтражатьСтрокуВ_НУ = ОтражатьВ_НУ 
			И (Дата < '20100101' ИЛИ СтрокаОстатка.ОтражатьВ_БУ);
		
		Если ОтражатьСтрокуВ_НУ Тогда

			// Проводка по курсовой разнице в НУ на сумму переоценки счета в БУ
			
			ПроводкаНУ = Движения.Налоговый.Добавить();

			ПроводкаНУ.Период      = Дата;
			ПроводкаНУ.Организация = Организация;
			ПроводкаНУ.Содержание  = "Переоценка активов и обязательств в валюте";
			ПроводкаНУ.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСчетов;
			
			Если СуммаПереоценки < 0 Тогда
				
				ПроводкаНУ.СчетДт = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
				ПроводкаНУ.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазниц;
				ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				ПроводкаНУ.СубконтоКт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
				ПроводкаНУ.Сумма  = -СуммаПереоценки;
				
			Иначе
				
				ПроводкаНУ.СчетДт = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;
				ПроводкаНУ.СубконтоДт.УсловияПоступленияИВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ЗаПлату;
				ПроводкаНУ.СчетКт = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
				ПроводкаНУ.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазниц;
				ПроводкаНУ.Сумма  = СуммаПереоценки;
				
			КонецЕсли;
			
			Если (НЕ СтрокаОстатка.ОтражатьВ_БУ) И ПоддержкаПБУ18 Тогда
				
				// Если есть курсовая разница в НУ, а в БУ нет - формируется проводка по постоянным разницам
				// БУ = НУ + ПР, поэтому суммы проводок по НУ и по ПР имеют разные знаки
				
				ПроводкаПР = Движения.Налоговый.Добавить();

				ПроводкаПР.Период      = Дата;
				ПроводкаПР.Организация = Организация;
				ПроводкаПР.Содержание  = "Постоянные разницы по переоценке активов и обязательств в валюте";
				ПроводкаПР.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ПереоценкаВалютныхСчетов;
				
				Если СуммаПереоценки < 0 Тогда
					
					ПроводкаПР.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					ПроводкаПР.СчетДт     = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
					ПроводкаПР.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазниц;
					
					ПроводкаПР.Сумма  = СуммаПереоценки;
					
				Иначе
					
					ПроводкаПР.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПР;
					ПроводкаПР.СчетКт     = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
					ПроводкаПР.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазниц;
					
					ПроводкаПР.Сумма  = -СуммаПереоценки;
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
		Если (ОтражатьВ_УСН ИЛИ ОтражатьВ_УСНДоходы) Тогда
			
			ОтражатьПереоценкуСчетаВУСН = СчетаПереоценкиУСН.Найти(СтрокаОстатка.Счет) <> Неопределено;
			
			Если ОтражатьПереоценкуСчетаВУСН Тогда
				СтрокаПереоценки        = ТаблицаКурсовыхРазницУСН.Добавить();
				СтрокаПереоценки.Счет   = СтрокаОстатка.Счет;
				СтрокаПереоценки.Валюта = СтрокаОстатка.Валюта;
				СтрокаПереоценки.Сумма  = СуммаПереоценки;
				Если ТипЗнч(СтрокаОстатка.Субконто1) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
					СтрокаПереоценки.БанковскийСчет  = СтрокаОстатка.Субконто1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование движений регистра КнигаУчетаДоходовИРасходов для УСН
	
	Если (ОтражатьВ_УСН ИЛИ ОтражатьВ_УСНДоходы) И ТаблицаКурсовыхРазницУСН.Количество() > 0 Тогда
		
		РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(СтруктураШапкиДокумента.Ссылка);
		
		ТаблицаКурсовыхРазницУСН.Свернуть("Валюта, Счет, БанковскийСчет", "Сумма");
		
		Для Каждого СтрокаПереоценки Из ТаблицаКурсовыхРазницУСН Цикл
			
			Если СтрокаПереоценки.Сумма > 0 Тогда
				
				ЗаписьКУДиР                = Движения.КнигаУчетаДоходовИРасходов.Добавить();
				ЗаписьКУДиР.Период         = СтруктураШапкиДокумента.Дата;
				ЗаписьКУДиР.Активность     = Истина;
				ЗаписьКУДиР.Организация    = СтруктураШапкиДокумента.Организация;
				ЗаписьКУДиР.Графа4         = СтрокаПереоценки.Сумма;
				ЗаписьКУДиР.Графа5         = СтрокаПереоценки.Сумма;
				ЗаписьКУДиР.Графа6         = 0;
				ЗаписьКУДиР.Графа7         = 0;
				ЗаписьКУДиР.НДС	           = 0;
				ЗаписьКУДиР.ЭтапПроведения = -1;
				Если ЗначениеЗаполнено(СтрокаПереоценки.БанковскийСчет) Тогда
					ЗаписьКУДиР.Содержание     = "Доход от переоценки " + СтрокаПереоценки.Валюта 
						+ " на счете "+ СтрокаПереоценки.Счет + ", расчетный счет № """ + СтрокаПереоценки.БанковскийСчет.НомерСчета + """";
				Иначе
					ЗаписьКУДиР.Содержание     = "Доход от переоценки " + СтрокаПереоценки.Валюта 
						+ " на счете "+ СтрокаПереоценки.Счет + " """ + СтрокаПереоценки.Счет.Наименование + """";
				КонецЕсли;
				ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента;
				
			ИначеЕсли СтрокаПереоценки.Сумма < 0 И НЕ ОтражатьВ_УСНДоходы Тогда
				
				ЗаписьКУДиР                = Движения.КнигаУчетаДоходовИРасходов.Добавить();
				ЗаписьКУДиР.Период         = СтруктураШапкиДокумента.Дата;
				ЗаписьКУДиР.Активность     = Истина;
				ЗаписьКУДиР.Организация    = СтруктураШапкиДокумента.Организация;
				ЗаписьКУДиР.Графа4         = 0;
				ЗаписьКУДиР.Графа5         = 0;
				ЗаписьКУДиР.Графа6         = - СтрокаПереоценки.Сумма;
				ЗаписьКУДиР.Графа7         = - СтрокаПереоценки.Сумма;
				ЗаписьКУДиР.НДС	           = 0;
				ЗаписьКУДиР.ЭтапПроведения = -1;
				Если ЗначениеЗаполнено(СтрокаПереоценки.БанковскийСчет) Тогда
					ЗаписьКУДиР.Содержание     = "Расходы от переоценки " + СтрокаПереоценки.Валюта 
						+ " на счете "+ СтрокаПереоценки.Счет + ", расчетный счет № """ + СтрокаПереоценки.БанковскийСчет.НомерСчета + """";
				Иначе
					ЗаписьКУДиР.Содержание     = "Расходы от переоценки " + СтрокаПереоценки.Валюта 
						+ " на счете "+ СтрокаПереоценки.Счет + " """ + СтрокаПереоценки.Счет.Наименование + """";
				КонецЕсли;
				ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет переоценку валютных счетов
//
Процедура ПереоценитьВалютныеСредстваРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если НЕ СтруктураШапкиДокумента.ПереоценкаВалютныхСредствРегл Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРасчетаПереоценкиВалюты = Движения.РасчетПереоценкиВалютныхСредств.ВыгрузитьКолонки();

	ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, Отказ, Заголовок, ТаблицаРасчетаПереоценкиВалюты);
	
	БухгалтерскийУчет.ЗаписьВВспомогательныеРегистрыСведений(СтруктураШапкиДокумента,
		ТаблицаРасчетаПереоценкиВалюты, 
		РегистрыСведений.РасчетПереоценкиВалютныхСредств,
		"Организация,ПериодРасчета,Активность,Регистратор,Счет,Валюта,Субконто1,Субконто2,Субконто3,ВидУчета,КурсПереоценки,СуммаВВалюте,СуммаВРублях",
		"Сумма");
	
КонецПроцедуры

// Выполняет переоценку счетов расчетов в условных единицах
//
Процедура ПереоценитьРасчетыВУсловныхЕдиницахРегл(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ПереоценкаРасчетовВУсловныхЕдиницахРегл ИЛИ Дата < '20061231' Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ПереоценкаНаОтчетнуюДату = (КонецДня(Дата) = КонецМесяца(Дата));
	
	//Если ПереоценкаНаОтчетнуюДату Тогда
	//
	//	ТекстЗапроса = 
	//	"ВЫБРАТЬ
	//	|	ЗадолженностьПокупателей.Счет,
	//	|	ЗадолженностьПокупателей.Субконто1,
	//	|	ЗадолженностьПокупателей.Субконто2,
	//	|	ВЫРАЗИТЬ(ЗадолженностьПокупателей.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	//	|	ЗадолженностьПокупателей.ВалютнаяСуммаОстаток,
	//	|	ЗадолженностьПокупателей.СуммаОстаток,
	//	|	ИСТИНА КАК РасчетыПоРеализации
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	//	|			&ГраницаОстатков,
	//	|			(НЕ Счет.Забалансовый)
	//	|				И Счет.Валютный,
	//	|			&ВидыСубконто,
	//	|			Организация = &Организация
	//	|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах
	//	|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора = &СПокупателем) КАК ЗадолженностьПокупателей
	//	|ГДЕ
	//	|	(ЗадолженностьПокупателей.ВалютнаяСуммаОстаток > 0
	//	|			ИЛИ ЗадолженностьПокупателей.ВалютнаяСуммаОстаток = 0
	//	|				И ЗадолженностьПокупателей.СуммаОстаток <> 0)
	//	|
	//	|ДЛЯ ИЗМЕНЕНИЯ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ЗадолженностьПоставщиков.Счет,
	//	|	ЗадолженностьПоставщиков.Субконто1,
	//	|	ЗадолженностьПоставщиков.Субконто2,
	//	|	ВЫРАЗИТЬ(ЗадолженностьПоставщиков.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов,
	//	|	-ЗадолженностьПоставщиков.ВалютнаяСуммаОстаток,
	//	|	-ЗадолженностьПоставщиков.СуммаОстаток,
	//	|	ЛОЖЬ
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	//	|			&ГраницаОстатков,
	//	|			(НЕ Счет.Забалансовый)
	//	|				И Счет.Валютный,
	//	|			&ВидыСубконто,
	//	|			Организация = &Организация
	//	|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах
	//	|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора = &СПоставщиком) КАК ЗадолженностьПоставщиков
	//	|ГДЕ
	//	|	(ЗадолженностьПоставщиков.ВалютнаяСуммаОстаток < 0
	//	|			ИЛИ ЗадолженностьПоставщиков.ВалютнаяСуммаОстаток = 0
	//	|				И ЗадолженностьПоставщиков.СуммаОстаток <> 0)
	//	|
	//	|ДЛЯ ИЗМЕНЕНИЯ
	//	|	РегистрБухгалтерии.Хозрасчетный.Остатки";
	//	
	//	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	//	
	//Иначе
	//
	//	ТекстЗапроса = 
	//	"ВЫБРАТЬ
	//	|	ЗадолженностьПокупателей.Счет,
	//	|	ЗадолженностьПокупателей.Субконто1,
	//	|	ЗадолженностьПокупателей.Субконто2,
	//	|	ВЫРАЗИТЬ(ЗадолженностьПокупателей.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	//	|	ЗадолженностьПокупателей.ВалютнаяСуммаКонечныйОстаток КАК ВалютнаяСуммаОстаток,
	//	|	ЗадолженностьПокупателей.СуммаКонечныйОстаток КАК СуммаОстаток,
	//	|	ИСТИНА КАК РасчетыПоРеализации
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	//	|			&НачалоДня,
	//	|			&КонецДня,
	//	|			,
	//	|			,
	//	|			(НЕ Счет.Забалансовый)
	//	|				И Счет.Валютный,
	//	|			&ВидыСубконто,
	//	|			Организация = &Организация
	//	|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах
	//	|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора = &СПокупателем) КАК ЗадолженностьПокупателей
	//	|ГДЕ
	//	|	(ЗадолженностьПокупателей.ВалютнаяСуммаКонечныйОстаток > 0
	//	|			ИЛИ ЗадолженностьПокупателей.ВалютнаяСуммаКонечныйОстаток = 0
	//	|				И ЗадолженностьПокупателей.СуммаКонечныйОстаток <> 0)
	//	|	И (ЗадолженностьПокупателей.ВалютнаяСуммаОборотДт <> 0
	//	|			ИЛИ ЗадолженностьПокупателей.ВалютнаяСуммаОборотКт <> 0)
	//	|
	//	|ДЛЯ ИЗМЕНЕНИЯ
	//	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ЗадолженностьПоставщиков.Счет,
	//	|	ЗадолженностьПоставщиков.Субконто1,
	//	|	ЗадолженностьПоставщиков.Субконто2,
	//	|	ВЫРАЗИТЬ(ЗадолженностьПоставщиков.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов,
	//	|	-ЗадолженностьПоставщиков.ВалютнаяСуммаКонечныйОстаток,
	//	|	-ЗадолженностьПоставщиков.СуммаКонечныйОстаток,
	//	|	ЛОЖЬ
	//	|ИЗ
	//	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	//	|			&НачалоДня,
	//	|			&КонецДня,
	//	|			,
	//	|			,
	//	|			(НЕ Счет.Забалансовый)
	//	|				И Счет.Валютный,
	//	|			&ВидыСубконто,
	//	|			Организация = &Организация
	//	|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах
	//	|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора = &СПоставщиком) КАК ЗадолженностьПоставщиков
	//	|ГДЕ
	//	|	(ЗадолженностьПоставщиков.ВалютнаяСуммаКонечныйОстаток < 0
	//	|			ИЛИ ЗадолженностьПоставщиков.ВалютнаяСуммаКонечныйОстаток = 0
	//	|				И ЗадолженностьПоставщиков.СуммаКонечныйОстаток <> 0)
	//	|	И (ЗадолженностьПоставщиков.ВалютнаяСуммаОборотДт <> 0
	//	|			ИЛИ ЗадолженностьПоставщиков.ВалютнаяСуммаОборотКт <> 0)
	//	|
	//	|ДЛЯ ИЗМЕНЕНИЯ
	//	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты";
	//
	//	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(Дата));
	//	Запрос.УстановитьПараметр("КонецДня",  КонецДня(Дата));
	//	
	//КонецЕсли;
	
		//Если ПереоценкаНаОтчетнуюДату Тогда
	//
	Если ПереоценкаНаОтчетнуюДату Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗадолженностьПокупателей.Счет,
		|	ЗадолженностьПокупателей.Субконто1,
		|	ЗадолженностьПокупателей.Субконто2,
		|	ЗадолженностьПокупателей.Субконто3,
		|	ВЫРАЗИТЬ(ЗадолженностьПокупателей.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЗадолженностьПокупателей.ВалютнаяСуммаОстаток,
		|	ЗадолженностьПокупателей.СуммаОстаток,
		|	ИСТИНА КАК РасчетыПоРеализации
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ГраницаОстатков,
		|			НЕ Счет.Забалансовый
		|				И Счет.Валютный,
		|			,
		|			Организация = &Организация
		|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах
		|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора = &СПокупателем
		|				И Субконто1 ССЫЛКА Справочник.Контрагенты
		|				И Субконто2 ССЫЛКА Справочник.ДоговорыКонтрагентов) КАК ЗадолженностьПокупателей
		|ГДЕ
		|	(ЗадолженностьПокупателей.ВалютнаяСуммаОстаток > 0
		|			ИЛИ ЗадолженностьПокупателей.ВалютнаяСуммаОстаток = 0
		|				И ЗадолженностьПокупателей.СуммаОстаток <> 0)
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадолженностьПоставщиков.Счет,
		|	ЗадолженностьПоставщиков.Субконто1,
		|	ЗадолженностьПоставщиков.Субконто2,
		|	ЗадолженностьПоставщиков.Субконто3,
		|	ВЫРАЗИТЬ(ЗадолженностьПоставщиков.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов,
		|	-ЗадолженностьПоставщиков.ВалютнаяСуммаОстаток,
		|	-ЗадолженностьПоставщиков.СуммаОстаток,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ГраницаОстатков,
		|			НЕ Счет.Забалансовый
		|				И Счет.Валютный,
		|			,
		|			Организация = &Организация
		|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах
		|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора = &СПоставщиком
		|				И Субконто1 ССЫЛКА Справочник.Контрагенты
		|				И Субконто2 ССЫЛКА Справочник.ДоговорыКонтрагентов) КАК ЗадолженностьПоставщиков
		|ГДЕ
		|	(ЗадолженностьПоставщиков.ВалютнаяСуммаОстаток < 0
		|			ИЛИ ЗадолженностьПоставщиков.ВалютнаяСуммаОстаток = 0
		|				И ЗадолженностьПоставщиков.СуммаОстаток <> 0)
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки";
		
		Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
		
	Иначе
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗадолженностьПокупателей.Счет,
		|	ЗадолженностьПокупателей.Субконто1,
		|	ЗадолженностьПокупателей.Субконто2,
		|	ЗадолженностьПокупателей.Субконто3,
		|	ВЫРАЗИТЬ(ЗадолженностьПокупателей.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ЗадолженностьПокупателей.ВалютнаяСуммаКонечныйОстаток КАК ВалютнаяСуммаОстаток,
		|	ЗадолженностьПокупателей.СуммаКонечныйОстаток КАК СуммаОстаток,
		|	ИСТИНА КАК РасчетыПоРеализации
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоДня,
		|			&КонецДня,
		|			,
		|			,
		|			НЕ Счет.Забалансовый
		|				И Счет.Валютный,
		|			,
		|			Организация = &Организация
		|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах
		|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора = &СПокупателем
		|				И Субконто1 ССЫЛКА Справочник.Контрагенты
		|				И Субконто2 ССЫЛКА Справочник.ДоговорыКонтрагентов) КАК ЗадолженностьПокупателей
		|ГДЕ
		|	(ЗадолженностьПокупателей.ВалютнаяСуммаКонечныйОстаток > 0
		|			ИЛИ ЗадолженностьПокупателей.ВалютнаяСуммаКонечныйОстаток = 0
		|				И ЗадолженностьПокупателей.СуммаКонечныйОстаток <> 0)
		|	И (ЗадолженностьПокупателей.ВалютнаяСуммаОборотДт <> 0
		|			ИЛИ ЗадолженностьПокупателей.ВалютнаяСуммаОборотКт <> 0)
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗадолженностьПоставщиков.Счет,
		|	ЗадолженностьПоставщиков.Субконто1,
		|	ЗадолженностьПоставщиков.Субконто2,
		|	ЗадолженностьПоставщиков.Субконто3,
		|	ВЫРАЗИТЬ(ЗадолженностьПоставщиков.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВалютаВзаиморасчетов,
		|	-ЗадолженностьПоставщиков.ВалютнаяСуммаКонечныйОстаток,
		|	-ЗадолженностьПоставщиков.СуммаКонечныйОстаток,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		|			&НачалоДня,
		|			&КонецДня,
		|			,
		|			,
		|			НЕ Счет.Забалансовый
		|				И Счет.Валютный,
		|			,
		|			Организация = &Организация
		|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах
		|				И ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора = &СПоставщиком
		|				И Субконто1 ССЫЛКА Справочник.Контрагенты
		|				И Субконто2 ССЫЛКА Справочник.ДоговорыКонтрагентов) КАК ЗадолженностьПоставщиков
		|ГДЕ
		|	(ЗадолженностьПоставщиков.ВалютнаяСуммаКонечныйОстаток < 0
		|			ИЛИ ЗадолженностьПоставщиков.ВалютнаяСуммаКонечныйОстаток = 0
		|				И ЗадолженностьПоставщиков.СуммаКонечныйОстаток <> 0)
		|	И (ЗадолженностьПоставщиков.ВалютнаяСуммаОборотДт <> 0
		|			ИЛИ ЗадолженностьПоставщиков.ВалютнаяСуммаОборотКт <> 0)
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты";
	
		Запрос.УстановитьПараметр("НачалоДня", НачалоДня(Дата));
		Запрос.УстановитьПараметр("КонецДня",  КонецДня(Дата));
		
	КонецЕсли;

	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Запрос.УстановитьПараметр("СПокупателем",   Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("СПоставщиком",   Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	Выборка    = Запрос.Выполнить().Выбрать();
	
	КурсыВалют = Новый Соответствие;
	
	ЭтоПереоценкаНа_01_01_2007  = КонецДня(Дата) = '20061231235959';
	
	ФормироватьРазницыДляПБУ18 = СтруктураШапкиДокумента.ПоддержкаПБУ18 И НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН;
	
	ПроводкиБУ = Движения.Хозрасчетный;
	
	Если ФормироватьРазницыДляПБУ18 Тогда
		ПроводкиНУ = Движения.Налоговый;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		/// Кунов О.В., 05.10.2017 - 71539
		
		/// Кунов О.В., 29.01.2015 - 35660
		//ЭтоДоговор2015Года = ЗначениеЗаполнено(Выборка.Субконто2) И ЗначениеЗаполнено(Выборка.Субконто2.Дата) И Выборка.Субконто2.Дата >= '20150101';
		///
		
		ЭтоДоговорЗайма = ЗначениеЗаполнено(Выборка.Субконто2) И Выборка.Субконто2.ПРГ_ДоговорЗайма;
		
		///
		
		СтруктураКурса = КурсыВалют[Выборка.ВалютаВзаиморасчетов];
		Если СтруктураКурса = Неопределено Тогда
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаВзаиморасчетов, Дата);
			КурсыВалют.Вставить(Выборка.ВалютаВзаиморасчетов, СтруктураКурса);
		КонецЕсли;
		
		РублеваяСуммаПослеПереоценки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.ВалютнаяСуммаОстаток,
			Выборка.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
			СтруктураКурса.Курс, 1,
			СтруктураКурса.Кратность, 1);
			
		СуммаПереоценки = РублеваяСуммаПослеПереоценки - Выборка.СуммаОстаток;
		
		Если (СуммаПереоценки < 0 И Выборка.РасчетыПоРеализации) 
			ИЛИ (СуммаПереоценки > 0 И НЕ Выборка.РасчетыПоРеализации) Тогда
			СуфиксСчетаРасчетов = "Кт";
			СуфиксКоррСчета     = "Дт";
		Иначе
			СуфиксСчетаРасчетов = "Дт";
			СуфиксКоррСчета     = "Кт";
		КонецЕсли;
		
		Если ЭтоПереоценкаНа_01_01_2007 Тогда
			Если СуфиксКоррСчета = "Кт" Тогда
				КоррСчетБУ = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению;
			Иначе
				КоррСчетБУ = ПланыСчетов.Хозрасчетный.УбытокПодлежащийПокрытию;
			КонецЕсли;
		Иначе
			Если СуфиксКоррСчета = "Кт" Тогда
				КоррСчетБУ = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
			Иначе
				КоррСчетБУ = ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;
			КонецЕсли;
		КонецЕсли;
		
		ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьУчетПРпоРасчетамВУЕ(Дата);
		
		Если ФормироватьРазницыДляПБУ18 Тогда
			Если СуфиксКоррСчета = "Кт" Тогда
				КоррСчетНУ = ПланыСчетов.Налоговый.ВнереализационныеДоходы;
			Иначе
				КоррСчетНУ = ПланыСчетов.Налоговый.ВнереализационныеРасходы;
			КонецЕсли;
            Если ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ Тогда
                СчетЗадолженностиНУ = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав; 
            Иначе
                
                Если Выборка.РасчетыПоРеализации Тогда
                    СчетЗадолженностиНУ = ПланыСчетов.Налоговый.ЗадолженностьПоРеализацииВУЕ;
                Иначе
                    СчетЗадолженностиНУ = ПланыСчетов.Налоговый.ЗадолженностьПоПриобретениюВУЕ;
                КонецЕсли; 
            КонецЕсли;
        КонецЕсли;
			
		Если СуммаПереоценки < 0 Тогда
			СуммаПереоценки = -СуммаПереоценки;
		КонецЕсли;
			
		Если СуммаПереоценки > 0 Тогда
				
			ПроводкаБУ = ПроводкиБУ.Добавить();

			ПроводкаБУ.Период      = КонецДня(Дата);
			ПроводкаБУ.Организация = СтруктураШапкиДокумента.Организация;
			ПроводкаБУ.Содержание  = "Пересчет задолженности в у.е.";

			ПроводкаБУ["Счет" + СуфиксКоррСчета] = КоррСчетБУ;
			Если НЕ ЭтоПереоценкаНа_01_01_2007 Тогда
				ПроводкаБУ["Субконто" + СуфиксКоррСчета].ПрочиеДоходыИРасходы = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ;
			КонецЕсли;

			ПроводкаБУ["Счет" + СуфиксСчетаРасчетов] = Выборка.Счет;
			Для Каждого ТекВидСубконто из Выборка.Счет.ВидыСубконто Цикл
				ПроводкаБУ["Субконто" + СуфиксСчетаРасчетов].Вставить(ТекВидСубконто.ВидСубконто, Выборка["Субконто" + ТекВидСубконто.НомерСтроки]);
			КонецЦикла;
			ПроводкаБУ["Валюта" + СуфиксСчетаРасчетов]        = Выборка.ВалютаВзаиморасчетов;
			ПроводкаБУ["ВалютнаяСумма" + СуфиксСчетаРасчетов] = 0;
				
			ПроводкаБУ.Сумма = СуммаПереоценки;
			
				
			Если ФормироватьРазницыДляПБУ18 Тогда
					
				ПроводкаНУ = ПроводкиНУ.Добавить();

				ПроводкаНУ.Период      = КонецДня(Дата);
				ПроводкаНУ.Организация = СтруктураШапкиДокумента.Организация;
				ПроводкаНУ.Содержание  = "Пересчет задолженности в у.е.";

				Если НЕ ЭтоПереоценкаНа_01_01_2007 Тогда
					ПроводкаНУ["Счет" + СуфиксКоррСчета]     = КоррСчетНУ;
					
					/// Кунов О.В., 05.10.2017 - 71539
					
					/// Кунов О.В., 29.01.2015 - 35660
					//Если ЭтоДоговор2015Года Тогда
					//	ПроводкаНУ["ВидУчета" + СуфиксКоррСчета] = Перечисления.ВидыУчетаПоПБУ18.НУ;
					//Иначе
					//	ПроводкаНУ["ВидУчета" + СуфиксКоррСчета] = ?(ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ, Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ВР);
					//КонецЕсли;
					///
					
					Если ЭтоДоговорЗайма Тогда
						ПроводкаНУ["ВидУчета" + СуфиксКоррСчета] = ?(ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ, Перечисления.ВидыУчетаПоПБУ18.ПР, Перечисления.ВидыУчетаПоПБУ18.ВР);
					Иначе
						ПроводкаНУ["ВидУчета" + СуфиксКоррСчета] = Перечисления.ВидыУчетаПоПБУ18.НУ;
					КонецЕсли;
					
					///
					
					ПроводкаНУ["Субконто" + СуфиксКоррСчета].ПрочиеДоходыИРасходы = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ;
				КонецЕсли;
				
				ПроводкаНУ["Счет" + СуфиксСчетаРасчетов]     = СчетЗадолженностиНУ;
				ПроводкаНУ["ВидУчета" + СуфиксСчетаРасчетов] = ?(ПрименяетсяУчетПРВКурсовыхРазницахПоРасчетамВУЕ,Перечисления.ВидыУчетаПоПБУ18.НУ, Перечисления.ВидыУчетаПоПБУ18.ВР);
				
				БухгалтерскийУчет.УстановитьСубконто(СчетЗадолженностиНУ, ПроводкаНУ["Субконто" + СуфиксСчетаРасчетов], 1, Перечисления.УсловияПоступленияИВыбытияИмущества.Другие, , , СчетЗадолженностиНУ.ВидыСубконто);
				
				ПроводкаНУ["Субконто" + СуфиксСчетаРасчетов].Контрагенты = Выборка.Субконто1;
				ПроводкаНУ["Субконто" + СуфиксСчетаРасчетов].Договоры    = Выборка.Субконто2;
					
				ПроводкаНУ.Сумма = СуммаПереоценки;

			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
		
КонецПроцедуры

// Процедура списывает все остатки счета ВАЛ для тех случаев, когда порядок пересчета
// авансов в валюте - на дату аванса в НУ
//
Процедура СписатьСчетВал (СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ТекДата = СтруктураШапкиДокумента.Дата;
	НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = Константы.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Получить();
	СписатьОтаткиВал = (НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов >=Дата('20100101') И Месяц(НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов)= Месяц(ТекДата) И Год(НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов)= Год(ТекДата));

	Если Не СписатьОтаткиВал Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекДата);
	Запрос.УстановитьПараметр("Организация",СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Счет",       ПланыСчетов.Хозрасчетный.АвансыВИностраннойВалюте);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	ХозрасчетныйОстатки.Валюта,
	|	СУММА(ХозрасчетныйОстатки.ВалютнаяСуммаОстаток) КАК ВалютнаяСуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Валюта";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Выборка Из Результат Цикл
		
			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период      = ТекДата;
			Проводка.Организация = Организация;
			Проводка.Содержание  = "Переход на пересчет в рубли по курсу аванса";
			
			Если Сред(Выборка.Счет.Код,5,2) =  "62" Тогда
				
				Проводка.СчетДт = Выборка.Счет;
				Проводка.СубконтоДт.Контрагенты = Выборка.Субконто1;
				Проводка.СубконтоДт.Договоры = Выборка.Субконто2;
				Проводка.Сумма  = -Выборка.СуммаОстаток;
				Проводка.ВалютнаяСуммаДт  = -Выборка.ВалютнаяСуммаОстаток;
				Проводка.ВалютаДт = Выборка.Валюта;
				Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовРеализация;
		    	
			Иначе
				
				Проводка.СчетКт = Выборка.Счет;
				Проводка.СубконтоКт.Контрагенты = Выборка.Субконто1;
				Проводка.СубконтоКт.Договоры = Выборка.Субконто2;
				Проводка.Сумма  = Выборка.СуммаОстаток;
				Проводка.ВалютнаяСуммаКт  = Выборка.ВалютнаяСуммаОстаток;
				Проводка.ВалютаКт = Выборка.Валюта;
				Проводка.ВидРегламентнойОперации = Перечисления.ВидыРегламентныхОпераций.ВосстановлениеСостоянияРасчетовПриобретение;
			    
			КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения по регистрам бухгалтерии
//
Процедура ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	ПереоценитьВалютныеСредстваРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПереоценитьРасчетыВУсловныхЕдиницахРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоПодотчетникам, ТаблицаПоВзаиморасчетам, 
							ТаблицаПоРасчетам, ТаблицаПоДенежнымСредствам, ТаблицаПоДенежнымСредствамКПолучению, Отказ, Заголовок)

	Если ОтражатьВУправленческомУчете Тогда
		ДвиженияПорегистрамВзаиморасчетыСПодотчетнымиЛицамиУпр(РежимПроведения, СтруктураШапкиДокумента, 
		                        ТаблицаПоПодотчетникам, Отказ, Заголовок);

		ДвиженияПорегистрамВзаиморасчетыСКонтрагентамиУпр(РежимПроведения, СтруктураШапкиДокумента, 
		                        ТаблицаПоВзаиморасчетам,ТаблицаПоРасчетам, Отказ, Заголовок);

		ДвиженияПорегистрамДенежныеСредстваУпр(РежимПроведения, СтруктураШапкиДокумента, 
		                        ТаблицаПоДенежнымСредствам, ТаблицаПоДенежнымСредствамКПолучению,  Отказ, Заголовок);

	Иначе
        СписатьСчетВал(СтруктураШапкиДокумента, Отказ, Заголовок);
		ДвиженияПоРегистрамРегл(СтруктураШапкиДокумента, Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроведения(Отказ, РежимЗаписи, РежимПроведения) 

	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;

	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;

	ТаблицаПоПодотчетникам     = Новый ТаблицаЗначений;
	ТаблицаПоВзаиморасчетам    = Новый ТаблицаЗначений;
	ТаблицаПоРасчетам          = Новый ТаблицаЗначений;
	ТаблицаПоДенежнымСредствам = Новый ТаблицаЗначений;

	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);

	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета",     "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета", "КурсВалютыУправленческогоУчета");

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);

	Если ВзаиморасчетыСПодотчетнымиЛицами Тогда
		ТаблицаПоПодотчетникам = ПодготовитьТаблицуПоПодотчетникам(СтруктураШапкиДокумента);
	КонецЕсли;

	Если ВзаиморасчетыСКонтрагентами Тогда
		ТаблицаПоВзаиморасчетам = ПодготовитьТаблицуПоВзаиморасчетам(СтруктураШапкиДокумента);
		ТаблицаПоРасчетам       = ПодготовитьТаблицуПоРасчетам(СтруктураШапкиДокумента);
	КонецЕсли;

	Если ДенежныеСредстваВКассах ИЛИ ДенежныеСредстваНаБанковскихСчетах Тогда
		ТаблицаПоДенежнымСредствам = ПодготовитьТаблицуПоДенежнымСредствам(СтруктураШапкиДокумента);
		ТаблицаПоДенежнымСредствамКПолучению = ПодготовитьТаблицуПоДенежнымСредствамКПолучению(СтруктураШапкиДокумента);
	КонецЕсли;

	// Движения по документу
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
			ТаблицаПоПодотчетникам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
			ТаблицаПоДенежнымСредствам, ТаблицаПоДенежнымСредствамКПолучению, 
			Отказ, Заголовок);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПЕЧАТИ ДОКУМЕНТА


#Если Клиент Тогда

// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 
	
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчет.ПечатьСправкиРасчета(Отчеты.СправкаРасчетПереоценкаВалютныхСредств, Новый Структура("Организация, Дата", Организация, Дата));
	
КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа.
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
 Возврат Новый Структура("Переоценка", "Справка - расчет");
 
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

