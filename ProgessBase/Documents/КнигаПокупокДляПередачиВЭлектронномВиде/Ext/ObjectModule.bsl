Перем мВалютаРегламентированногоУчета Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует сведения необходимые для сохранения и передачи файла (файлов) электронного
// представления документа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - сведения электронного представления документа, включающие в себя
//                    имя файла(файлов), текст(тексты) и кодировку представления.
//
Функция ЭлектронноеПредставление() Экспорт
	
	ПроизвольнаяСтрока = Новый ОписаниеТипов("Строка");
	
	СведенияЭлектронногоПредставления = Новый ТаблицаЗначений;
	СведенияЭлектронногоПредставления.Колонки.Добавить("ИмяФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("ТекстФайла", ПроизвольнаяСтрока);
	СведенияЭлектронногоПредставления.Колонки.Добавить("КодировкаТекста", ПроизвольнаяСтрока);
	
	ОсновныеСведения = ОсновныеСведенияЭлектронногоПредставления();
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML(); 
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписьXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаполнитьДанными(ЗаписьXML, ОсновныеСведения);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Текст = ЗаписьXML.Закрыть();
	
	СтрокаСведенийЭлектронногоПредставления = СведенияЭлектронногоПредставления.Добавить();
	СтрокаСведенийЭлектронногоПредставления.ИмяФайла = ОсновныеСведения.ИдФайл + ".xml";
	СтрокаСведенийЭлектронногоПредставления.ТекстФайла = Текст;
	СтрокаСведенийЭлектронногоПредставления.КодировкаТекста = "windows-1251";
	
	Если СведенияЭлектронногоПредставления.Количество() = 0 Тогда
		СведенияЭлектронногоПредставления = Неопределено;
	КонецЕсли;
	
	Возврат СведенияЭлектронногоПредставления;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ПометкаУдаления ИЛИ ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода",НачалоКвартала(НалоговыйПериод));
	Запрос.УстановитьПараметр("КонецНалоговогоПериода",КонецКвартала(НалоговыйПериод));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка
	|ИЗ
	|	Документ.КнигаПокупокДляПередачиВЭлектронномВиде КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка <> &Ссылка
	|	И Таблица.Организация = &Организация
	|	И Таблица.НалоговыйПериод >= &НачалоНалоговогоПериода
	|	И Таблица.НалоговыйПериод <= &КонецНалоговогоПериода
	|	И НЕ Таблица.ПометкаУдаления";

	Если НЕ Запрос.Выполнить().Пустой() Тогда
		НалоговыйПериодПредставление = ПредставлениеПериода(НачалоКвартала(НалоговыйПериод), КонецКвартала(НалоговыйПериод), "ФП = Истина" );
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Уже имеется оформленная книга покупок за %1",НалоговыйПериодПредставление);
		ОбщегоНазначения.СообщитьОбОшибке(Сообщение);
		Отказ = Истина;		
		Возврат;
	КонецЕсли;	
	
	РассчитатьСуммыДокумента();
	
	ПериодСоставления = НалоговыйПериод;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

Процедура ЗаполнитьДокумент() Экспорт
	
	Если ТабличнаяЧасть.Количество() <> 0 Тогда
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НачалоПериода", НачалоКвартала(НалоговыйПериод));
	СтруктураПараметров.Вставить("КонецПериода", КонецКвартала(НалоговыйПериод));
	СтруктураПараметров.Вставить("СформироватьОтчетПоСтандартнойФорме", Истина);
	СтруктураПараметров.Вставить("ОтбиратьПоКонтрагенту", Ложь);
	СтруктураПараметров.Вставить("КонтрагентДляОтбора");
	СтруктураПараметров.Вставить("ГруппироватьПоКонтрагентам", Ложь); 
	СтруктураПараметров.Вставить("ВыводитьПокупателейПоАвансам", Ложь);
	СтруктураПараметров.Вставить("ВыводитьТолькоДопЛисты", Ложь);
	СтруктураПараметров.Вставить("ФормироватьДополнительныеЛисты", Ложь);
	СтруктураПараметров.Вставить("СписокОрганизаций", СписокОрганизаций);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("ДополнительныеЛистыЗаТекущийПериод", Ложь); 
	СтруктураПараметров.Вставить("ДатаФормированияДопЛиста"); 
	СтруктураПараметров.Вставить("ЗаписьДополнительногоЛиста", Ложь);
	СтруктураПараметров.Вставить("СкрытьКолонкиПоСтавке20", Ложь);
	СтруктураПараметров.Вставить("ЕстьЗаписиПоКолонке20");
	СтруктураПараметров.Вставить("ЗаполнениеДокумента", Истина);
	СтруктураПараметров.Вставить("ЕстьЗаписиПоКолонке20", Ложь);
	СтруктураПараметров.Вставить("ПрефиксыРИБиОрганизации", ОбщегоНазначения.СформироватьМассивПрефиксовДляРИБИОрганизации(Организация));
	
	СписокСчетовФактур = Неопределено;
	
	Результат = УчетНДС.ПолучитьЗаписиКнигиПокупок(СписокСчетовФактур, СтруктураПараметров);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	УчетНДСКлиент.ПреобразоватьЗаписиКнигиПокупок(
		СтруктураПараметров, Результат, , СписокСчетовФактур, , , ТабличнаяЧасть);
	
КонецПроцедуры

Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить экземпляр документа на печать
	Если ИмяМакета = "КнигаПокупок" Тогда
		
		ТабДокумент = ПечатьКнигиПокупок();
		
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, ЭтотОбъект.Метаданные().Представление()), НепосредственнаяПечать);
	
КонецПроцедуры

Функция ПечатьКнигиПокупок()
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
		
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КнигаПокупок";

	Макет = ПолучитьОбщийМакет("КнигаПокупок1137");
	
	ЕстьЗаписиПоКолонке20 = Ложь;	
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод шапки книги покупок
	Секция = Макет.ПолучитьОбласть("ШапкаИнформация");
	ТабличныйДокумент.Вывести(Секция);
		
	Секция = Макет.ПолучитьОбласть("Шапка");
	
	Секция.Параметры.УстановленныйОтбор = "";
	Секция.Параметры.НачалоПериода = Формат(НачалоКвартала(НалоговыйПериод), "ДФ=dd.MM.yyyy");
	Секция.Параметры.КонецПериода = Формат(КонецКвартала(НалоговыйПериод), "ДФ=dd.MM.yyyy");
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, КонецКвартала(НалоговыйПериод));
	НазваниеОрганизации = ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");;
	
	Секция.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	Секция.Параметры.ИННКППОрганизации = "" + Организация.ИНН + ?(НЕ ЗначениеЗаполнено(Организация.КПП), "", ("/" + Организация.КПП));
	
	ТабличныйДокумент.Вывести(Секция);
	// Вывод шапки книги покупок
	/////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод пустой книги покупок, если данных нет
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		Секция = Макет.ПолучитьОбласть("Всего");
		ТабличныйДокумент.Вывести(Секция);
		
		/////////////////////////////////////////////////////////////////////////
		// Вывод подвала
		ВывестиПодвал(ТабличныйДокумент, Макет);
		// Вывод подвала
		/////////////////////////////////////////////////////////////////////////
				
		УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, , Строка(глЗначениеПеременной("глТекущийПользователь")));
		
		Возврат ТабличныйДокумент;
		
	КонецЕсли; 
	// Вывод пустой книги покупок, если данных нет
	/////////////////////////////////////////////////////////////////////////
	
	Секция = Макет.ПолучитьОбласть("Строка");
	
	// Вывод строк
	Для Каждого СтрокаДокумента Из ТабличнаяЧасть Цикл
		
		Секция.Параметры.Заполнить(СтрокаДокумента);
		ТабличныйДокумент.Вывести(Секция);		
		
	КонецЦикла;	
		
    
	// Вывод всего
	Секция = Макет.ПолучитьОбласть("Всего");
	Секция.Параметры.Заполнить(Ссылка);
	
	ТабличныйДокумент.Вывести(Секция);
	
	/////////////////////////////////////////////////////////////////////////
	// Вывод подвала
	ВывестиПодвал(ТабличныйДокумент, Макет);
	// Вывод подвала
	/////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////
	// Повтор шапки таблицы на каждой строке
	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область("СтрокиДляПовтора");
	// Повтор шапки таблицы на каждой строке
	/////////////////////////////////////////////////////////////////////////
    	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, , Строка(глЗначениеПеременной("глТекущийПользователь")));
    	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиПодвал(ТабличныйДокумент, Макет)
	
	СписокПоказателей = Новый Массив;
	СписокПоказателей.Добавить("ФИОРук");
	СписокПоказателей.Добавить("ФИО");
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), СписокПоказателей);
	СведенияОЮрФизЛице  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ТекущаяДата());
	СведенияОбОрганизации.Вставить("Свидетельство", ОписаниеОрганизации(СведенияОЮрФизЛице, "Свидетельство,"));
	
	Секция = Макет.ПолучитьОбласть("Подвал");
	Секция.Параметры.ИмяРук = СведенияОбОрганизации.ФИОРук;
	Секция.Параметры.ИмяОрг = ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация), СведенияОбОрганизации.ФИО, "");
	Секция.Параметры.Свидетельство = СведенияОбОрганизации.Свидетельство;
	
	ТабличныйДокумент.Вывести(Секция);
	
КонецПроцедуры

#КонецЕсли

Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("КнигаПокупок","Книга покупок");
	
КонецФункции

Процедура РассчитатьСуммыДокумента()
	
	ВсегоПокупок      = ТабличнаяЧасть.Итог("ВсегоПокупок");
	СуммаБезНДС18     = ТабличнаяЧасть.Итог("СуммаБезНДС18");
	НДС18             = ТабличнаяЧасть.Итог("НДС18");
	СуммаБезНДС10     = ТабличнаяЧасть.Итог("СуммаБезНДС10");
	НДС10             = ТабличнаяЧасть.Итог("НДС10");
	НДС0              = ТабличнаяЧасть.Итог("НДС0");
	СуммаБезНДС20     = ТабличнаяЧасть.Итог("СуммаБезНДС20");
	НДС20             = ТабличнаяЧасть.Итог("НДС20");
	СуммаСовсемБезНДС = ТабличнаяЧасть.Итог("СуммаСовсемБезНДС");
	
КонецПроцедуры

Функция ОсновныеСведенияЭлектронногоПредставления()
	
	ОсновныеСведения = Новый Структура;
	
	ОсновныеСведения.Вставить("ДатаФормированияФайла", ТекущаяДата());
	ОсновныеСведения.Вставить("ВерсПрог", РегламентированнаяОтчетность.СформироватьВерсПрог());
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация);
	ОсновныеСведения.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ОсновныеСведения.Вставить("ЭтоЮЛ", НЕ ЭтоПБОЮЛ);
	ОсновныеСведения.Вставить("ЭтоИП", ЭтоПБОЮЛ);
	
	СведенияОбОрганизации = СведенияОбОрганизации();
	
	Если ЭтоПБОЮЛ Тогда
		ОсновныеСведения.Вставить("ИННФЛ", СведенияОбОрганизации.ИННЮЛ);
		СведенияОЮрФизЛице  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ТекущаяДата());
		СвидетельствоОРегистрации = ОписаниеОрганизации(СведенияОЮрФизЛице, "Свидетельство");
		ОсновныеСведения.Вставить("СвГосРегИП", СвидетельствоОРегистрации);
		
		СведенияОбИП = СведенияОбИП();
		ОсновныеСведения.Вставить("ФамилияИП",  СведенияОбИП.Фамилия);
		ОсновныеСведения.Вставить("ИмяИП",      СведенияОбИП.Имя);
		ОсновныеСведения.Вставить("ОтчествоИП", СведенияОбИП.Отчество);
	Иначе
		ОсновныеСведения.Вставить("НаимОрг", СведенияОбОрганизации.НаимЮЛПол);
		ОсновныеСведения.Вставить("ИННЮЛ", СведенияОбОрганизации.ИННЮЛ);
		ОсновныеСведения.Вставить("КПП", СведенияОбОрганизации.КППЮЛ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИФНС) Тогда
		ОсновныеСведения.Вставить("КодНО", ИФНС.Код);
	Иначе
		ОсновныеСведения.Вставить("КодНО", СведенияОбОрганизации.КодНО);
	КонецЕсли;
	
	ДобавитьСведенияОПодписанте(ОсновныеСведения);
	
	ОсновныеСведения.Вставить("Период", ПериодПоСКНП);
	
	ОтчетныйГод = Формат(НалоговыйПериод, "ДФ=yyyy");
	ОсновныеСведения.Вставить("ОтчГод", ОтчетныйГод);
	
	ИдентификаторФайла = ИдентификаторФайлаЭлектронногоПредставления(ОсновныеСведения);
	ОсновныеСведения.Вставить("ИдФайл", ИдентификаторФайла);
	
	Возврат ОсновныеСведения;
	
КонецФункции

Функция СведенияОбОрганизации()
	
	СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ТелОрганизации, ФИО, ОКВЭД, ОКАТО";
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ТекущаяДата(), СтрокаСведений);
	
	Возврат СведенияОбОрганизации;
	
КонецФункции

Процедура ДобавитьСведенияОПодписанте(ОсновныеСведения)
	
	Если ЗначениеЗаполнено(ИФНС) И ЗначениеЗаполнено(ИФНС.Представитель) Тогда
		Если ТипЗнч(ИФНС.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ФИОПодписанта = СведенияОФизЛице(ИФНС.Представитель);
			ОсновныеСведения.Вставить("ПрПодп", "2");
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
			ОсновныеСведения.Вставить("НаимДокПодп",  ИФНС.ДокументПредставителя);
			
		ИначеЕсли НЕ ПустаяСтрока(ИФНС.УполномоченноеЛицоПредставителя) Тогда
			ОсновныеСведения.Вставить("ПрПодп", "2");
			СоставляющиеФИО = РасщепленноеФИО(ИФНС.УполномоченноеЛицоПредставителя);
			ОсновныеСведения.Вставить("ПодпФамилия",  СоставляющиеФИО.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      СоставляющиеФИО.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", СоставляющиеФИО.Отчество);
			ОсновныеСведения.Вставить("НаимДокПодп",  ИФНС.ДокументПредставителя);
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОсновныеСведения.Свойство("ПрПодп") ИЛИ (ОсновныеСведения.Свойство("ПрПодп") И ОсновныеСведения.ПрПодп <> "2") Тогда
		Если ЗначениеЗаполнено(Подписант) Тогда
			ФИОПодписанта = СведенияОФизЛице(Подписант);
			ОсновныеСведения.Вставить("ПрПодп", "1");
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
			
		Иначе
			ФИОПодписанта = СведенияОРуководителе();
			ОсновныеСведения.Вставить("ПрПодп", "1");
			ОсновныеСведения.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
			ОсновныеСведения.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
			ОсновныеСведения.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СведенияОРуководителе()
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Организация, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Руководитель = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Дата, Данные);
	
	Если Руководитель <> Неопределено И Руководитель.Количество() > 0 Тогда
		ФЛ = Руководитель[0]["ФизическоеЛицо"];
		Если ЗначениеЗаполнено(ФЛ) Тогда
			ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо",ФЛ));
			Если ДанныеФЛ.Количество() > 0 Тогда
				Результат.Фамилия  = СокрЛП(ДанныеФЛ[0].Фамилия);
				Результат.Имя      = СокрЛП(ДанныеФЛ[0].Имя);
				Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СведенияОФизЛице(ФизЛицо)
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
		
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", ФизЛицо));
		Если ДанныеФЛ.Количество() > 0 Тогда
			Результат.Фамилия  = СокрЛП(ДанныеФЛ[0].Фамилия);
			Результат.Имя      = СокрЛП(ДанныеФЛ[0].Имя);
			Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РасщепленноеФИО(Знач ФИОСтр)
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

Функция СведенияОбИП()
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ИндивидуальныйПредприниматель = Организация.ИндивидуальныйПредприниматель;
	Если ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
		ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(Дата, Новый Структура("ФизЛицо", ИндивидуальныйПредприниматель));
		Если ДанныеФЛ.Количество() > 0 Тогда
			Результат.Фамилия = СокрЛП(ДанныеФЛ[0].Фамилия);
			Результат.Имя = СокрЛП(ДанныеФЛ[0].Имя);
			Результат.Отчество = СокрЛП(ДанныеФЛ[0].Отчество);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторФайлаЭлектронногоПредставления(СведенияОтправки)
	
	Префикс = "1115102";
	Если СведенияОтправки.ЭтоПБОЮЛ Тогда
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННФЛ);
	Иначе
		ИдентификаторОтправителя = СокрЛП(СведенияОтправки.ИННЮЛ) + СокрЛП(СведенияОтправки.КПП);
	КонецЕсли;
	ИдентификаторПолучателя = СведенияОтправки.КодНО;
	ИдентификационныйНомер1 = Строка(Новый УникальныйИдентификатор);
	ДатаФормированияФайла = Формат(СведенияОтправки.ДатаФормированияФайла, "ДФ=yyyyMMdd");
	ИдентификационныйНомер2 = Строка(Новый УникальныйИдентификатор);
	
	ИдентификаторФайла = Префикс
	                   + "_" + ИдентификаторОтправителя
	                   + "_" + ИдентификаторПолучателя
	                   + "_" + ИдентификационныйНомер1
	                   + "_" + ДатаФормированияФайла
	                   + "_" + ИдентификационныйНомер2;
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Процедура ЗаполнитьДанными(МодельВыгрузки, Параметры)
	
	МодельВыгрузки.ЗаписатьАтрибут("ИдФайл", Параметры.ИдФайл);
	МодельВыгрузки.ЗаписатьАтрибут("ВерсПрог", Параметры.ВерсПрог);
	МодельВыгрузки.ЗаписатьАтрибут("ВерсФорм", "5.01");
	
	МодельВыгрузки.ЗаписатьНачалоЭлемента("Документ");
		
		МодельВыгрузки.ЗаписатьАтрибут("КНД", "1115102");
		
		МодельВыгрузки.ЗаписатьНачалоЭлемента("СвПокуп");
			Если Параметры.ЭтоИП Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("СведИП");
					МодельВыгрузки.ЗаписатьАтрибут("ИННФЛ", Параметры.ИННФЛ);
					МодельВыгрузки.ЗаписатьАтрибут("СвГосРегИП", Параметры.СвГосРегИП);
					МодельВыгрузки.ЗаписатьНачалоЭлемента("ФИОИП");
						МодельВыгрузки.ЗаписатьАтрибут("Фамилия", Параметры.ФамилияИП);
						МодельВыгрузки.ЗаписатьАтрибут("Имя", Параметры.ИмяИП);
						МодельВыгрузки.ЗаписатьАтрибут("Отчество", Параметры.ОтчествоИП);
					МодельВыгрузки.ЗаписатьКонецЭлемента();
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			Иначе
				МодельВыгрузки.ЗаписатьНачалоЭлемента("СведЮЛ");
					МодельВыгрузки.ЗаписатьАтрибут("НаимОрг", Параметры.НаимОрг);
					МодельВыгрузки.ЗаписатьАтрибут("ИННЮЛ", Параметры.ИННЮЛ);
					МодельВыгрузки.ЗаписатьАтрибут("КПП", Параметры.КПП);
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
		МодельВыгрузки.ЗаписатьКонецЭлемента();
		
		ЗаполнитьДаннымиВсего(МодельВыгрузки, Параметры);
		ЗаполнитьДаннымиТабличнойЧасти(МодельВыгрузки, Параметры);
		
		МодельВыгрузки.ЗаписатьНачалоЭлемента("Подписант");
			ЗаписатьОбязательныйАтрибут(МодельВыгрузки, "ПрПодп", Параметры.ПрПодп);
			
			МодельВыгрузки.ЗаписатьНачалоЭлемента("ФИО");
				ЗаписатьОбязательныйАтрибут(МодельВыгрузки, "Фамилия", Параметры.ПодпФамилия);
				ЗаписатьОбязательныйАтрибут(МодельВыгрузки, "Имя", Параметры.ПодпИмя);
				ЗаписатьНеобязательныйАтрибут(МодельВыгрузки, "Отчество", Параметры.ПодпОтчество);
			МодельВыгрузки.ЗаписатьКонецЭлемента();
			
			Если Параметры.Свойство("НаимДокПодп") Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("СвПред");
					ЗаписатьОбязательныйАтрибут(МодельВыгрузки, "НаимДок", Параметры.НаимДокПодп);
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
		МодельВыгрузки.ЗаписатьКонецЭлемента();
		
	МодельВыгрузки.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиВсего(МодельВыгрузки, Параметры)
	
	МодельВыгрузки.ЗаписатьНачалоЭлемента("СвКнПок");
		МодельВыгрузки.ЗаписатьАтрибут("Период", Параметры.Период);
		МодельВыгрузки.ЗаписатьАтрибут("ОтчетГод", Параметры.ОтчГод);
		
		МодельВыгрузки.ЗаписатьНачалоЭлемента("Всего");
			МодельВыгрузки.ЗаписатьАтрибут("СтТовУчНалВсего", ФорматДеньги(ВсегоПокупок));
			
			// НДС 18%.
			Если СуммаБезНДС18 <> 0 ИЛИ НДС18 <> 0 Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("ВтЧисле");
					ЗаполнитьДаннымиПоСтавкеНДС(МодельВыгрузки, "18", СуммаБезНДС18, НДС18);
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			// НДС 10%.
			Если СуммаБезНДС10 <> 0 ИЛИ НДС10 <> 0 Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("ВтЧисле");
					ЗаполнитьДаннымиПоСтавкеНДС(МодельВыгрузки, "10", СуммаБезНДС10, НДС10);
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			// НДС 0%.
			Если НДС0 <> 0 Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("ВтЧисле");
					ЗаполнитьДаннымиПоСтавкеНДС(МодельВыгрузки, "0", НДС0);
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			// НДС 20%.
			Если СуммаБезНДС20 <> 0 ИЛИ НДС20 <> 0 Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("ВтЧисле");
					ЗаполнитьДаннымиПоСтавкеНДС(МодельВыгрузки, "20", СуммаБезНДС20, НДС20);
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			// НДС Без НДС.
			Если СуммаСовсемБезНДС <> 0 Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("ВтЧисле");
					ЗаполнитьДаннымиПоСтавкеНДС(МодельВыгрузки, "без НДС", СуммаСовсемБезНДС);
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
			
		МодельВыгрузки.ЗаписатьКонецЭлемента();
	МодельВыгрузки.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиТабличнойЧасти(МодельВыгрузки, Параметры)
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		
		МодельВыгрузки.ЗаписатьНачалоЭлемента("СвПокупка");
		
		МодельВыгрузки.ЗаписатьАтрибут("НомПП", Формат(СтрокаТабличнойЧасти.Ном, "ЧГ=0"));
		
		ДатаНомерСчетаФактуры = СтрокаТабличнойЧасти.ДатаНомер;
		РеквизитыСчетаФактуры = РасщепленнаяСтрока(ДатаНомерСчетаФактуры, ";");
		МодельВыгрузки.ЗаписатьАтрибут("ДатаСчФ", СокрЛП(РеквизитыСчетаФактуры[0]));
		МодельВыгрузки.ЗаписатьАтрибут("НомерСчФ", СокрЛП(РеквизитыСчетаФактуры[1]));
		
		НомерДатаИсправленияСчетаФактуры = СтрокаТабличнойЧасти.НомерДатаИсправления;
		Если ЗначениеЗаполнено(НомерДатаИсправленияСчетаФактуры) Тогда
			РеквизитыИсправленияСчетаФактуры = РасщепленнаяСтрока(НомерДатаИсправленияСчетаФактуры, ";");
			МодельВыгрузки.ЗаписатьАтрибут("НомИспрСчФ", СокрЛП(РеквизитыИсправленияСчетаФактуры[0]));
			МодельВыгрузки.ЗаписатьАтрибут("ДатаИспрСчФ", СокрЛП(РеквизитыИсправленияСчетаФактуры[1]));
		КонецЕсли;
		
		НомерДатаКорректировочногоСчетаФактуры = СтрокаТабличнойЧасти.НомерДатаКорректировки;
		Если ЗначениеЗаполнено(НомерДатаКорректировочногоСчетаФактуры) Тогда
			РеквизитыКорректировочногоСчетаФактуры = РасщепленнаяСтрока(НомерДатаКорректировочногоСчетаФактуры, ";");
			МодельВыгрузки.ЗаписатьАтрибут("НомерКСчФ", СокрЛП(РеквизитыКорректировочногоСчетаФактуры[0]));
			МодельВыгрузки.ЗаписатьАтрибут("ДатаКСчФ", СокрЛП(РеквизитыКорректировочногоСчетаФактуры[1]));
		КонецЕсли;
		
		НомерДатаИсправленияКорректировочногоСчетаФактуры = СтрокаТабличнойЧасти.НомерДатаИсправленияКорректировки;
		Если ЗначениеЗаполнено(НомерДатаИсправленияКорректировочногоСчетаФактуры) Тогда
			РеквизитыИсправленияКорректировочногоСчетаФактуры = РасщепленнаяСтрока(НомерДатаИсправленияКорректировочногоСчетаФактуры, ";");
			МодельВыгрузки.ЗаписатьАтрибут("НомИспрКСчФ", СокрЛП(РеквизитыИсправленияКорректировочногоСчетаФактуры[0]));
			МодельВыгрузки.ЗаписатьАтрибут("ДатаИспрКСчФ", СокрЛП(РеквизитыИсправленияКорректировочногоСчетаФактуры[1]));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОприходования) Тогда
			МодельВыгрузки.ЗаписатьАтрибут("ДатаПринУчет", СтрокаТабличнойЧасти.ДатаОприходования);
		КонецЕсли;
		
		МодельВыгрузки.ЗаписатьАтрибут("НаимПрод", СтрокаТабличнойЧасти.Продавец);
		ИНН = СтрокаТабличнойЧасти.ПродавецИНН;
		Если ЗначениеЗаполнено(ИНН) Тогда
			Если СтрДлина(ИНН) = 12 Тогда
				МодельВыгрузки.ЗаписатьАтрибут("ИННФЛ", ИНН);
			Иначе
				МодельВыгрузки.ЗаписатьАтрибут("ИННЮЛ", ИНН);
				МодельВыгрузки.ЗаписатьАтрибут("КПП", СтрокаТабличнойЧасти.ПродавецКПП);
			КонецЕсли;
		КонецЕсли;
		
		ПроисхождениеТовара = СтрокаТабличнойЧасти.НомерГТД;
		Для Инд = 1 По СтрЧислоСтрок(ПроисхождениеТовара) Цикл
			СтрокаПроисхожденияТовара = СтрПолучитьСтроку(ПроисхождениеТовара, Инд);
			РеквизитыПроисхожденияТовара = РасщепленнаяСтрока(ПроисхождениеТовара, ";");
			ЗаписатьНеобязательныйАтрибут(МодельВыгрузки, "КодПроисх", СокрЛП(РеквизитыПроисхожденияТовара[0]));
			Прервать;
		КонецЦикла;
		
		МодельВыгрузки.ЗаписатьАтрибут("СтТовУчНалВсего", ФорматДеньги(СтрокаТабличнойЧасти.ВсегоПокупок));
		
		ДатыОплаты = СтрокаТабличнойЧасти.ДатаОплаты;
		Для Инд = 1 По СтрЧислоСтрок(ДатыОплаты) Цикл
			СтрокаДатыОплаты = СтрПолучитьСтроку(ДатыОплаты, Инд);
			Если НЕ ПустаяСтрока(СтрокаДатыОплаты) Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("ДатаОплСчФПрод");
				МодельВыгрузки.ЗаписатьТекст(Лев(СокрЛП(СтрокаДатыОплаты), 10));
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		// НДС 18%.
		Если СтрокаТабличнойЧасти.СуммаБезНДС18 <> 0 ИЛИ СтрокаТабличнойЧасти.НДС18 <> 0 Тогда
			МодельВыгрузки.ЗаписатьНачалоЭлемента("ВтчСтоимПок");
				ЗаполнитьДаннымиПоСтавкеНДС(МодельВыгрузки, "18", СтрокаТабличнойЧасти.СуммаБезНДС18, СтрокаТабличнойЧасти.НДС18);
			МодельВыгрузки.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// НДС 10%.
		Если СтрокаТабличнойЧасти.СуммаБезНДС10 <> 0 ИЛИ СтрокаТабличнойЧасти.НДС10 <> 0 Тогда
			МодельВыгрузки.ЗаписатьНачалоЭлемента("ВтчСтоимПок");
				ЗаполнитьДаннымиПоСтавкеНДС(МодельВыгрузки, "10", СтрокаТабличнойЧасти.СуммаБезНДС10, СтрокаТабличнойЧасти.НДС10);
			МодельВыгрузки.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// НДС 0%.
		Если СтрокаТабличнойЧасти.НДС0 <> 0 Тогда
			МодельВыгрузки.ЗаписатьНачалоЭлемента("ВтчСтоимПок");
				ЗаполнитьДаннымиПоСтавкеНДС(МодельВыгрузки, "0", СтрокаТабличнойЧасти.НДС0);
			МодельВыгрузки.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// НДС 20%.
		Если СтрокаТабличнойЧасти.СуммаБезНДС20 <> 0 ИЛИ СтрокаТабличнойЧасти.НДС20 <> 0 Тогда
			МодельВыгрузки.ЗаписатьНачалоЭлемента("ВтчСтоимПок");
				ЗаполнитьДаннымиПоСтавкеНДС(МодельВыгрузки, "20", СтрокаТабличнойЧасти.СуммаБезНДС20, СтрокаТабличнойЧасти.НДС20);
			МодельВыгрузки.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// НДС Без НДС.
		Если СтрокаТабличнойЧасти.СуммаСовсемБезНДС <> 0 Тогда
			МодельВыгрузки.ЗаписатьНачалоЭлемента("ВтчСтоимПок");
				ЗаполнитьДаннымиПоСтавкеНДС(МодельВыгрузки, "без НДС", СтрокаТабличнойЧасти.СуммаСовсемБезНДС);
			МодельВыгрузки.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		ПроисхождениеТовара = СтрокаТабличнойЧасти.НомерГТД;
		Для Инд = 1 По СтрЧислоСтрок(ПроисхождениеТовара) Цикл
			СтрокаПроисхожденияТовара = СтрПолучитьСтроку(ПроисхождениеТовара, Инд);
			РеквизитыПроисхожденияТовара = РасщепленнаяСтрока(ПроисхождениеТовара, ";");
			Если ЗначениеЗаполнено(РеквизитыПроисхожденияТовара[1]) Тогда
				МодельВыгрузки.ЗаписатьНачалоЭлемента("НомерТД");
					МодельВыгрузки.ЗаписатьТекст(СокрЛП(РеквизитыПроисхожденияТовара[1]));
				МодельВыгрузки.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		МодельВыгрузки.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиПоСтавкеНДС(МодельВыгрузки, Знач СтавкаНДС, СтоимостьБезНДС, СуммаНДС = 0)
	
	Если ТипЗнч(СтавкаНДС) <> Тип("Строка") Тогда
		СтавкаНДС = Строка(СтавкаНДС);
	КонецЕсли;
	
	МодельВыгрузки.ЗаписатьАтрибут("СтТовБезНДС", ФорматДеньги(СтоимостьБезНДС));
	
	Если СтавкаНДС = "без НДС" Тогда
		ТипСтавки = "текст";
		ЗначениеСуммы = "без НДС";
	Иначе
		ТипСтавки = "процент";
		ЗначениеСуммы = Формат(СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧН=-; ЧГ=0");
	КонецЕсли;
		
	МодельВыгрузки.ЗаписатьНачалоЭлемента("НалСт");
		МодельВыгрузки.ЗаписатьАтрибут("НалСтВел", СтавкаНДС);
		МодельВыгрузки.ЗаписатьАтрибут("НалСтТип", ТипСтавки);
	МодельВыгрузки.ЗаписатьКонецЭлемента();
	
	МодельВыгрузки.ЗаписатьНачалоЭлемента("СумНал");
		МодельВыгрузки.ЗаписатьАтрибут("СумНДС", ЗначениеСуммы);
	МодельВыгрузки.ЗаписатьКонецЭлемента();
		
КонецПроцедуры

Процедура ЗаписатьОбязательныйАтрибут(МодельВыгрузки, ИмяАтрибута, ЗначениеАтрибута)
	
	ЗаписатьАтрибут(МодельВыгрузки, ИмяАтрибута, ЗначениеАтрибута);
	
КонецПроцедуры

Процедура ЗаписатьНеобязательныйАтрибут(МодельВыгрузки, ИмяАтрибута, ЗначениеАтрибута)
	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		ЗаписатьАтрибут(МодельВыгрузки, ИмяАтрибута, ЗначениеАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьАтрибут(МодельВыгрузки, ИмяАтрибута, ЗначениеАтрибута)
	
	МодельВыгрузки.ЗаписатьАтрибут(ИмяАтрибута, ЗначениеАтрибута);
	
КонецПроцедуры

Функция РасщепленнаяСтрока(СтрокаЗначения, Разделитель)
	
	Результат = Новый Массив;
	
	ПозицияРазделителя = Найти(СтрокаЗначения, Разделитель);
	Если ПозицияРазделителя = 0 Тогда
		Результат.Добавить(СтрокаЗначения);
		Результат.Добавить("");
	Иначе
		Результат.Добавить(Лев(СтрокаЗначения, ПозицияРазделителя - 1));
		Результат.Добавить(Сред(СтрокаЗначения, ПозицияРазделителя + 1));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматДеньги(Сумма)
	
	Возврат Формат(Сумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧН=; ЧГ=0");
	
КонецФункции

Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина)

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли;

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", 		" ");
	СоответствиеПараметров.Вставить("НаименованиеСокращенное", 	" ");
	СоответствиеПараметров.Вставить("ИНН",                		" ИНН ");
	СоответствиеПараметров.Вставить("КПП",                		" КПП ");
	СоответствиеПараметров.Вставить("Свидетельство",			" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   		" ");
	СоответствиеПараметров.Вставить("ФактическийАдрес",   		" ");
	СоответствиеПараметров.Вставить("Телефоны",           		" тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",         		" р/с ");
	СоответствиеПараметров.Вставить("Банк",               		" в банке ");
	СоответствиеПараметров.Вставить("БИК",                		" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           		" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          		" Код по ОКПО ");


	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

