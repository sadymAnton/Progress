Перем мУдалятьДвижения;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

#Если Клиент Тогда
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт

	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеДопПравамиПользователей.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда

		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
		
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);

КонецПроцедуры // Печать

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура;

КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#КонецЕсли

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	УправлениеПроизводствомДвиженияПоРегистрам.ПеренестиДвиженияПоПроизводственнымРегистрамМеждународныйУчет(СтруктураШапкиДокумента);
	
	// is ЯннуровВФ нач
	ПереносЗатратПоПроводкам();
	// is ЯннуровВФ кон
	//Добавлено Андрей Перов 19.10.2017
	КорректировкаЗатратСУчетомПравилПереносаПроводок();
	//Конец добавления
КонецПроцедуры // ОбработкаПроведения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	 
	мУдалятьДвижения = НЕ ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// is ЯннуровВФ
Процедура ПереносЗатратПоПроводкам()
	
	лНаборЗаписейНПЗ = РегистрыНакопления.НезавершенноеПроизводствоМеждународныйУчет.СоздатьНаборЗаписей();
	лНаборЗаписейЗатраты = РегистрыНакопления.ЗатратыМеждународныйУчет.СоздатьНаборЗаписей();
	лНаборЗаписейБрак = РегистрыНакопления.БракВПроизводствеМеждународныйУчет.СоздатьНаборЗаписей();
	
	лСчетаНЗПБУ = Новый Массив;
	лСчетаНЗПБУ.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоНеОблагаемоеЕНВД); // 20.01.1
	лСчетаНЗПБУ.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД); // 20.01.2
	лСчетаНЗПБУ.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваНеОблагаемоеЕНВД); // 23.01
	лСчетаНЗПБУ.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваОблагаемоеЕНВД); // 23.01
	лСчетаНЗПБУ.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваНеОблагаемоеЕНВД); // 29.01
	лСчетаНЗПБУ.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваОблагаемоеЕНВД); // 29.02
	лСчетаЗатратБУ = Новый Массив;
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД); // 25.01
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыОблагаемыеЕНВД); // 25.02
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыРаспределяемые); // 25.03
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД); // 26.01
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыОблагаемыеЕНВД); // 26.02
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыРаспределяемые); // 26.03
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращенияНеОблагаемыеЕНВД); // 44.01.1
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращенияОблагаемыеЕНВД); // 44.01.2
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.ИздержкиОбращенияРаспределяемые); // 44.01.3
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД); // 44.02.01
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходыНеОблагаемыеЕНВД); // 44.02.1
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходыОблагаемыеЕНВД); // 44.02.1
	лСчетаЗатратБУ.Добавить(ПланыСчетов.Хозрасчетный.КоммерческиеРасходыРаспределяемые); // 44.02.3
	лСчетаБракаБУ = Новый Массив;
	лСчетаБракаБУ.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводствеНеОблагаемоеЕНВД); // 28.01
	лСчетаБракаБУ.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводствеОблагаемоеЕНВД); //28.02
	лСчетаПартийБУ = Новый Массив; // Придут через "Списание МПЗ"
	лСчетаПартийБУ.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке); // 07.*
	лСчетаПартийБУ.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы); // 08.*
	лСчетаПартийБУ.Добавить(ПланыСчетов.Хозрасчетный.Материалы); // 10.*
	лСчетаПартийБУ.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты); // 21.*
	лСчетаПартийБУ.Добавить(ПланыСчетов.Хозрасчетный.Товары); // 41.*
	лСчетаПартийБУ.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция); // 43.*
	
	лСчетаНЗПМУ = Новый Массив;
	лСчетаНЗПМУ.Добавить(ПланыСчетов.Международный._ОсновноеПроизводство); // 20.01
	лСчетаНЗПМУ.Добавить(ПланыСчетов.Международный.ВспомогательныеПроизводства); // 23
	лСчетаНЗПМУ.Добавить(ПланыСчетов.Международный.ОбслуживающиеПроизводства); // 29
	лСчетаЗатратМУ = Новый Массив;
	лСчетаЗатратМУ.Добавить(ПланыСчетов.Международный.ОбщепроизводственныеРасходы); // 25
	лСчетаЗатратМУ.Добавить(ПланыСчетов.Международный.АдминистративныеРасходы); // 26
	лСчетаЗатратМУ.Добавить(ПланыСчетов.Международный._ИздержкиОбращения); // 44.01
	лСчетаЗатратМУ.Добавить(ПланыСчетов.Международный._КоммерческиеРасходы); // 44.02
	лСчетаБракаМУ = Новый Массив;
	лСчетаБракаМУ.Добавить(ПланыСчетов.Международный.БракВПроизводстве); // 28

	лЗапрос = Новый Запрос;
	лЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаПартийБУ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет
	|АВТОУПОРЯДОЧИВАНИЕ";
	лЗапрос.УстановитьПараметр("СчетаПартийБУ", лСчетаПартийБУ);
	лСчетаПартийБУ = лЗапрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	лИндекс = лСчетаПартийБУ.Найти(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации); // 10.11
	Если лИндекс <> Неопределено Тогда 
		лСчетаПартийБУ.Удалить(лИндекс);
	КонецЕсли;
	
	лЗапрос = Новый Запрос;
	лЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МеждународныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	МеждународныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	МеждународныйДвиженияССубконто.СчетДт КАК СчетДт,
	|	МеждународныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	|	МеждународныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	|	МеждународныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	|	МеждународныйДвиженияССубконто.КоличествоДт,
	|	МеждународныйДвиженияССубконто.СчетКт КАК СчетКт,
	|	МеждународныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|	МеждународныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	|	МеждународныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	|	МеждународныйДвиженияССубконто.КоличествоКт,
	|	МеждународныйДвиженияССубконто.Сумма КАК Сумма,
	|	МеждународныйДвиженияССубконто.ПервичныйДокумент
	|ПОМЕСТИТЬ втПроводки
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&ОкончаниеПериодаСГраницей,
	|			Организация = &Организация
	|				И Регистратор ССЫЛКА Документ.ПереносПроводокМеждународный
	|				И Активность = ИСТИНА,
	|			,
	|			) КАК МеждународныйДвиженияССубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО МеждународныйДвиженияССубконто.ПервичныйДокумент = Хозрасчетный.Регистратор
	|			И МеждународныйДвиженияССубконто.ис_ПервичныйНомерСтроки = Хозрасчетный.НомерСтроки
	|ГДЕ
	|	(МеждународныйДвиженияССубконто.СчетДт В (&СчетаНЗПМУ)
	|				И НЕ Хозрасчетный.СчетДт В (&СчетаНЗПБУ)
	|				И НЕ Хозрасчетный.СчетКт В (&СчетаПартийБУ)
	|			ИЛИ МеждународныйДвиженияССубконто.СчетДт В (&СчетаЗатратМУ)
	|				И НЕ Хозрасчетный.СчетДт В (&СчетаЗатратБУ)
	|				И НЕ Хозрасчетный.СчетКт В (&СчетаПартийБУ)
	|			ИЛИ МеждународныйДвиженияССубконто.СчетДт В (&СчетаБракаМУ)
	|				И НЕ Хозрасчетный.СчетДт В (&СчетаБракаБУ)
	|				И НЕ Хозрасчетный.СчетКт В (&СчетаПартийБУ)
	|			ИЛИ МеждународныйДвиженияССубконто.СчетКт В (&СчетаНЗПМУ)
	|				И НЕ Хозрасчетный.СчетКт В (&СчетаНЗПБУ)
	|				И НЕ Хозрасчетный.СчетДт В (&СчетаПартийБУ)
	|			ИЛИ МеждународныйДвиженияССубконто.СчетКт В (&СчетаЗатратМУ)
	|				И НЕ Хозрасчетный.СчетКт В (&СчетаЗатратБУ)
	|				И НЕ Хозрасчетный.СчетДт В (&СчетаПартийБУ)
	|			ИЛИ МеждународныйДвиженияССубконто.СчетКт В (&СчетаБракаМУ)
	|				И НЕ Хозрасчетный.СчетКт В (&СчетаБракаБУ)
	|				И НЕ Хозрасчетный.СчетДт В (&СчетаПартийБУ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПроводки.СчетДт КАК Счет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Дебет) КАК ВидДвижения,
	|	втПроводки.СубконтоДт1 КАК Субконто1,
	|	втПроводки.СубконтоДт2 КАК Субконто2,
	|	втПроводки.СубконтоДт3 КАК Субконто3,
	|	втПроводки.КоличествоДт КАК Количество,
	|	втПроводки.Сумма,
	|	втПроводки.Регистратор,
	|	втПроводки.НомерСтроки,
	|	втПроводки.ПервичныйДокумент
	|ИЗ
	|	втПроводки КАК втПроводки
	|ГДЕ
	|	втПроводки.СчетДт В (&СчетаНЗПМУ, &СчетаЗатратМУ, &СчетаБракаМУ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПроводки.СчетКт,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит),
	|	втПроводки.СубконтоКт1,
	|	втПроводки.СубконтоКт2,
	|	втПроводки.СубконтоКт3,
	|	втПроводки.КоличествоКт,
	|	втПроводки.Сумма,
	|	втПроводки.Регистратор,
	|	втПроводки.НомерСтроки,
	|	втПроводки.ПервичныйДокумент
	|ИЗ
	|	втПроводки КАК втПроводки
	|ГДЕ
	|	втПроводки.СчетКт В (&СчетаНЗПМУ, &СчетаЗатратМУ, &СчетаБракаМУ)";
	лЗапрос.УстановитьПараметр("Организация", Организация);
	лЗапрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПериодНачало));
	лЗапрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ПериодКонец));
	лЗапрос.УстановитьПараметр("ОкончаниеПериодаСГраницей", Новый Граница(КонецДня(ПериодКонец),ВидГраницы.Включая));
	лЗапрос.УстановитьПараметр("СчетаНЗПБУ", лСчетаНЗПБУ);
	лЗапрос.УстановитьПараметр("СчетаНЗПМУ", лСчетаНЗПМУ);
	лЗапрос.УстановитьПараметр("СчетаЗатратБУ", лСчетаЗатратБУ);
	лЗапрос.УстановитьПараметр("СчетаЗатратМУ", лСчетаЗатратМУ);
	лЗапрос.УстановитьПараметр("СчетаБракаБУ", лСчетаБракаБУ);
	лЗапрос.УстановитьПараметр("СчетаБракаМУ", лСчетаБракаМУ);
	лЗапрос.УстановитьПараметр("СчетаПартийБУ", лСчетаПартийБУ); // 
	лЗапрос.УстановитьПараметр("ПустыеСубконтоМУ", ПолучитьСписокПустыхСубконто(ПланыВидовХарактеристик.ВидыСубконтоМеждународные));
	
	лВыборка = лЗапрос.Выполнить().Выбрать();
	Пока лВыборка.Следующий() Цикл 
		
		Если лСчетаНЗПМУ.Найти(лВыборка.Счет) <> Неопределено Тогда // Незавершенное производство
			
			лДвижение = лНаборЗаписейНПЗ.Добавить();
			Если лВыборка.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит Тогда 
				лДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				лДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			лДвижение.Период = Дата;
			лДвижение.Регистратор = Ссылка;
			лДвижение.Организация = Организация;
			лДвижение.СчетУчета = лВыборка.Счет;
			лДвижение.Подразделение = лВыборка.Субконто1;
			лДвижение.НоменклатурнаяГруппа = лВыборка.Субконто2;
			лДвижение.СтатьяЗатрат = лВыборка.Субконто3;
			лДвижение.Количество = лВыборка.Количество;
			лДвижение.Стоимость = лВыборка.Сумма;
				
		ИначеЕсли лСчетаЗатратМУ.Найти(лВыборка.Счет) <> Неопределено Тогда // Затраты
			
			лДвижение = лНаборЗаписейЗатраты.Добавить();
			Если лВыборка.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит Тогда 
				лДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				лДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			лДвижение.Период = Дата;
			лДвижение.Регистратор = Ссылка;
			лДвижение.Организация = Организация;
			лДвижение.СчетУчета = лВыборка.Счет;
			Если лВыборка.Счет = ПланыСчетов.Международный._ИздержкиОбращения
			 Или лВыборка.Счет = ПланыСчетов.Международный._КоммерческиеРасходы Тогда 
				лДвижение.СтатьяЗатрат = лВыборка.Субконто1;
				лДвижение.Подразделение = лВыборка.Субконто2;
			Иначе
				лДвижение.Подразделение = лВыборка.Субконто1;
				лДвижение.СтатьяЗатрат = лВыборка.Субконто2;
			КонецЕсли;
			лДвижение.Сумма = лВыборка.Сумма;
				
		ИначеЕсли лСчетаБракаМУ.Найти(лВыборка.Счет) <> Неопределено Тогда // Брак в производстве
			
			лДвижение = лНаборЗаписейБрак.Добавить();
			Если лВыборка.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит Тогда 
				лДвижение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				лДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			лДвижение.Период = Дата;
			лДвижение.Регистратор = Ссылка;
			лДвижение.Организация = Организация;
			лДвижение.СчетУчета = лВыборка.Счет;
			лДвижение.Подразделение = лВыборка.Субконто1;
			лДвижение.НоменклатурнаяГруппа = лВыборка.Субконто2;
			лДвижение.СтатьяЗатрат = лВыборка.Субконто3;
			лДвижение.Стоимость = лВыборка.Сумма;
				
		Иначе
			Сообщить("Необработанный счет: "+лВыборка.Счет, СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЦикла;
	
	Если лНаборЗаписейНПЗ.Количество() > 0 Тогда 
		лНаборЗаписейНПЗ.Отбор.Регистратор.Установить(Ссылка);
		лНаборЗаписейНПЗ.Записать(Ложь);
	КонецЕсли;
	Если лНаборЗаписейЗатраты.Количество() > 0 Тогда 
		лНаборЗаписейЗатраты.Отбор.Регистратор.Установить(Ссылка);
		лНаборЗаписейЗатраты.Записать(Ложь);
	КонецЕсли;
	Если лНаборЗаписейБрак.Количество() > 0 Тогда 
		лНаборЗаписейБрак.Отбор.Регистратор.Установить(Ссылка);
		лНаборЗаписейБрак.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры
//Добавлено Андрей Перов 18.10.2017
Процедура КорректировкаЗатратСУчетомПравилПереносаПроводок()
	
	НаборЗаписейНПЗ = РегистрыНакопления.НезавершенноеПроизводствоМеждународныйУчет.СоздатьНаборЗаписей();
	НаборЗаписейЗатраты = РегистрыНакопления.ЗатратыМеждународныйУчет.СоздатьНаборЗаписей();
	НаборЗаписейБрак = РегистрыНакопления.БракВПроизводствеМеждународныйУчет.СоздатьНаборЗаписей();
	
	СчетаНЗПМУ = Новый Массив;
	СчетаНЗПМУ.Добавить(ПланыСчетов.Международный._ОсновноеПроизводство); // 20.01
	СчетаНЗПМУ.Добавить(ПланыСчетов.Международный.ВспомогательныеПроизводства); // 23
	СчетаНЗПМУ.Добавить(ПланыСчетов.Международный.ОбслуживающиеПроизводства); // 29
	СчетаЗатратМУ = Новый Массив;
	СчетаЗатратМУ.Добавить(ПланыСчетов.Международный.ОбщепроизводственныеРасходы); // 25
	СчетаЗатратМУ.Добавить(ПланыСчетов.Международный.АдминистративныеРасходы); // 26
	СчетаЗатратМУ.Добавить(ПланыСчетов.Международный._ИздержкиОбращения); // 44.01
	СчетаЗатратМУ.Добавить(ПланыСчетов.Международный._КоммерческиеРасходы); // 44.02
	СчетаБракаМУ = Новый Массив;
	СчетаБракаМУ.Добавить(ПланыСчетов.Международный.БракВПроизводстве); // 28
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРГ_НастройкиПравилПереносаПроводокМУСрезПоследних.ПравилоПереносаДт,
		|	ПРГ_НастройкиПравилПереносаПроводокМУСрезПоследних.НомерСтрокиПравилаПереносаДт,
		|	ПРГ_НастройкиПравилПереносаПроводокМУСрезПоследних.ПравилоПереносаКт,
		|	ПРГ_НастройкиПравилПереносаПроводокМУСрезПоследних.НомерСтрокиПравилаПереносаКт
		|ПОМЕСТИТЬ ВТПравилаПереноса
		|ИЗ
		|	РегистрСведений.ПРГ_НастройкиПравилПереносаПроводокМУ.СрезПоследних(&НачалоПериода, ) КАК ПРГ_НастройкиПравилПереносаПроводокМУСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МеждународныйДвиженияССубконто.СчетДт,
		|	МеждународныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1Приемник,
		|	МеждународныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2Приемник,
		|	МеждународныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3Приемник,
		|	МеждународныйДвиженияССубконто.СчетКт,
		|	МеждународныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1Приемник,
		|	МеждународныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2Приемник,
		|	МеждународныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3Приемник,
		|	МеждународныйДвиженияССубконто.Сумма,
		|	МеждународныйДвиженияССубконто.КоличествоДт,
		|	МеждународныйДвиженияССубконто.КоличествоКт,
		|	МеждународныйДвиженияССубконто.ПервичныйДокумент,
		|	МеждународныйДвиженияССубконто.ис_ПервичныйНомерСтроки
		|ПОМЕСТИТЬ ВТДанныеМеждународный
		|ИЗ
		|	РегистрБухгалтерии.Международный.ДвиженияССубконто(
		|			&НачалоПериода,
		|			&ГраницаОкончаниеПериода,
		|			Организация = &Организация
		|				И Регистратор ССЫЛКА Документ.ПереносПроводокМеждународный
		|				И Активность = ИСТИНА
		|				И (ис_ПравилоПереносаДт, ис_НомерСтрокиПравилаПереносаДт, ис_ПравилоПереносаКт, ис_НомерСтрокиПравилаПереносаКт) В
		|					(ВЫБРАТЬ
		|						ВТПравилаПереноса.ПравилоПереносаДт,
		|						ВТПравилаПереноса.НомерСтрокиПравилаПереносаДт,
		|						ВТПравилаПереноса.ПравилоПереносаКт,
		|						ВТПравилаПереноса.НомерСтрокиПравилаПереносаКт
		|					ИЗ
		|						ВТПравилаПереноса КАК ВТПравилаПереноса)
		|				И Счет В (&СчетаНЗПМУ, &СчетаЗатратМУ, &СчетаБракаМУ),
		|			,
		|			) КАК МеждународныйДвиженияССубконто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДанныеМеждународный.ис_ПервичныйНомерСтроки,
		|	ВТДанныеМеждународный.ПервичныйДокумент
		|ПОМЕСТИТЬ ВТДанныеОтборХозрасчетный
		|ИЗ
		|	ВТДанныеМеждународный КАК ВТДанныеМеждународный
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДанныеМеждународный.ис_ПервичныйНомерСтроки,
		|	ВТДанныеМеждународный.ПервичныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1Источник,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2Источник,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3Источник,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1Источник,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2Источник,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3Источник,
		|	ВТДанныеМеждународный.СчетДт,
		|	ВТДанныеМеждународный.СубконтоДт1Приемник,
		|	ВТДанныеМеждународный.СубконтоДт2Приемник,
		|	ВТДанныеМеждународный.СубконтоДт3Приемник,
		|	ВТДанныеМеждународный.СчетКт,
		|	ВТДанныеМеждународный.СубконтоКт1Приемник,
		|	ВТДанныеМеждународный.СубконтоКт2Приемник,
		|	ВТДанныеМеждународный.СубконтоКт3Приемник,
		|	ВТДанныеМеждународный.Сумма,
		|	ВТДанныеМеждународный.КоличествоДт,
		|	ВТДанныеМеждународный.КоличествоКт
		|ПОМЕСТИТЬ ВТДанныеДляДвижения
		|ИЗ
		|	ВТДанныеМеждународный КАК ВТДанныеМеждународный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|				&НачалоПериода,
		|				&ГраницаОкончаниеПериода,
		|				Организация = &Организация
		|					И (НомерСтроки, Регистратор) В
		|						(ВЫБРАТЬ
		|							ВТДанныеОтборХозрасчетный.ис_ПервичныйНомерСтроки,
		|							ВТДанныеОтборХозрасчетный.ПервичныйДокумент
		|						ИЗ
		|							ВТДанныеОтборХозрасчетный КАК ВТДанныеОтборХозрасчетный),
		|				,
		|				) КАК ХозрасчетныйДвиженияССубконто
		|		ПО ВТДанныеМеждународный.ис_ПервичныйНомерСтроки = ХозрасчетныйДвиженияССубконто.НомерСтроки
		|			И ВТДанныеМеждународный.ПервичныйДокумент = ХозрасчетныйДвиженияССубконто.Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Дебет) КАК ВидДвижения,
		|	ВТДанныеДляДвижения.СчетДт КАК Счет,
		|	ВТДанныеДляДвижения.СубконтоДт1Источник КАК Субконто1Источник,
		|	ВТДанныеДляДвижения.СубконтоДт2Источник КАК Субконто2Источник,
		|	ВТДанныеДляДвижения.СубконтоДт3Источник КАК Субконто3Источник,
		|	ВТДанныеДляДвижения.СубконтоДт1Приемник КАК Субконто1Приемник,
		|	ВТДанныеДляДвижения.СубконтоДт2Приемник КАК Субконто2Приемник,
		|	ВТДанныеДляДвижения.СубконтоДт3Приемник КАК Субконто3Приемник,
		|	ВТДанныеДляДвижения.Сумма,
		|	ВТДанныеДляДвижения.КоличествоДт КАК Количество
		|ИЗ
		|	ВТДанныеДляДвижения КАК ВТДанныеДляДвижения
		|ГДЕ
		|	ВТДанныеДляДвижения.СчетДт В (&СчетаНЗПМУ, &СчетаЗатратМУ, &СчетаБракаМУ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит),
		|	ВТДанныеДляДвижения.СчетКт,
		|	ВТДанныеДляДвижения.СубконтоКт1Источник,
		|	ВТДанныеДляДвижения.СубконтоКт2Источник,
		|	ВТДанныеДляДвижения.СубконтоКт3Источник,
		|	ВТДанныеДляДвижения.СубконтоКт1Приемник,
		|	ВТДанныеДляДвижения.СубконтоКт2Приемник,
		|	ВТДанныеДляДвижения.СубконтоКт3Приемник,
		|	ВТДанныеДляДвижения.Сумма,
		|	ВТДанныеДляДвижения.КоличествоКт
		|ИЗ
		|	ВТДанныеДляДвижения КАК ВТДанныеДляДвижения
		|ГДЕ
		|	ВТДанныеДляДвижения.СчетКт В (&СчетаНЗПМУ, &СчетаЗатратМУ, &СчетаБракаМУ)";

	Запрос.УстановитьПараметр("ГраницаОкончаниеПериода", Новый Граница(КонецДня(ПериодКонец),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПериодНачало));	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаНЗПМУ", СчетаНЗПМУ);	
	Запрос.УстановитьПараметр("СчетаЗатратМУ", СчетаЗатратМУ);	
	Запрос.УстановитьПараметр("СчетаБракаМУ", СчетаБракаМУ);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если СчетаНЗПМУ.Найти(ВыборкаДетальныеЗаписи.Счет) <> Неопределено Тогда // Незавершенное производство
			
			// Добавим запись по приемнику
			Движение = НаборЗаписейНПЗ.Добавить();
			Если ВыборкаДетальныеЗаписи.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит Тогда 
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;			
			Движение.Период = Дата;
			Движение.Регистратор = Ссылка;
			Движение.Организация = Организация;
			Движение.СчетУчета = ВыборкаДетальныеЗаписи.Счет;
			Движение.Подразделение = ВыборкаДетальныеЗаписи.Субконто1Приемник;
			Движение.НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.Субконто2Приемник;
			Движение.СтатьяЗатрат = ВыборкаДетальныеЗаписи.Субконто3Приемник;
			Движение.Количество = ВыборкаДетальныеЗаписи.Количество;
			Движение.Стоимость = ВыборкаДетальныеЗаписи.Сумма;
			
		    // Отсторнируем движение по источнику			
			Движение = НаборЗаписейНПЗ.Добавить();
			Если ВыборкаДетальныеЗаписи.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит Тогда 
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;			
			Движение.Период = Дата;
			Движение.Регистратор = Ссылка;
			Движение.Организация = Организация;
			Движение.СчетУчета = ВыборкаДетальныеЗаписи.Счет;
			Движение.Подразделение = ВыборкаДетальныеЗаписи.Субконто1Источник;
			Движение.НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.Субконто2Источник;
			Движение.СтатьяЗатрат = ВыборкаДетальныеЗаписи.Субконто3Источник;
			Движение.Количество = -ВыборкаДетальныеЗаписи.Количество;
			Движение.Стоимость = -ВыборкаДетальныеЗаписи.Сумма;			
						
		ИначеЕсли СчетаЗатратМУ.Найти(ВыборкаДетальныеЗаписи.Счет) <> Неопределено Тогда // Затраты
			
			// Добавим запись по приемнику
			Движение = НаборЗаписейЗатраты.Добавить();
			Если ВыборкаДетальныеЗаписи.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит Тогда 
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;			
			Движение.Период = Дата;
			Движение.Регистратор = Ссылка;
			Движение.Организация = Организация;
			Движение.СчетУчета = ВыборкаДетальныеЗаписи.Счет;
			Если ВыборкаДетальныеЗаписи.Счет = ПланыСчетов.Международный._ИздержкиОбращения
			 Или ВыборкаДетальныеЗаписи.Счет = ПланыСчетов.Международный._КоммерческиеРасходы Тогда 
				Движение.СтатьяЗатрат = ВыборкаДетальныеЗаписи.Субконто1Приемник;
				Движение.Подразделение = ВыборкаДетальныеЗаписи.Субконто2Приемник;
			Иначе
				Движение.Подразделение = ВыборкаДетальныеЗаписи.Субконто1Приемник;
				Движение.СтатьяЗатрат = ВыборкаДетальныеЗаписи.Субконто2Приемник;
			КонецЕсли;
			Движение.Сумма = ВыборкаДетальныеЗаписи.Сумма;
			
			// Отсторнируем движение по источнику
			Движение = НаборЗаписейЗатраты.Добавить();
			Если ВыборкаДетальныеЗаписи.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит Тогда 
				Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;			
			Движение.Период = Дата;
			Движение.Регистратор = Ссылка;
			Движение.Организация = Организация;
			Движение.СчетУчета = ВыборкаДетальныеЗаписи.Счет;
			Если ВыборкаДетальныеЗаписи.Счет = ПланыСчетов.Международный._ИздержкиОбращения
			 Или ВыборкаДетальныеЗаписи.Счет = ПланыСчетов.Международный._КоммерческиеРасходы Тогда 
				Движение.СтатьяЗатрат = ВыборкаДетальныеЗаписи.Субконто1Источник;
				Движение.Подразделение = ВыборкаДетальныеЗаписи.Субконто2Источник;
			Иначе
				Движение.Подразделение = ВыборкаДетальныеЗаписи.Субконто1Источник;
				Движение.СтатьяЗатрат = ВыборкаДетальныеЗаписи.Субконто2Источник;
			КонецЕсли;
			Движение.Сумма = -ВыборкаДетальныеЗаписи.Сумма;		
				
		ИначеЕсли СчетаБракаМУ.Найти(ВыборкаДетальныеЗаписи.Счет) <> Неопределено Тогда // Брак в производстве
			
			// Добавим запись по приемнику
			Движение = НаборЗаписейБрак.Добавить();
			Если ВыборкаДетальныеЗаписи.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит Тогда 
				ВыборкаДетальныеЗаписи.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				ВыборкаДетальныеЗаписи.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			Движение.Период = Дата;
			Движение.Регистратор = Ссылка;
			Движение.Организация = Организация;
			Движение.СчетУчета = ВыборкаДетальныеЗаписи.Счет;
			Движение.Подразделение = ВыборкаДетальныеЗаписи.Субконто1Приемник;
			Движение.НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.Субконто2Приемник;
			Движение.СтатьяЗатрат = ВыборкаДетальныеЗаписи.Субконто3Приемник;
			Движение.Стоимость = ВыборкаДетальныеЗаписи.Сумма;
			
			// Отсторнируем движение по источнику
			Движение = НаборЗаписейБрак.Добавить();
			Если ВыборкаДетальныеЗаписи.ВидДвижения = Перечисления.ВидыДвиженийБухгалтерии.Кредит Тогда 
				ВыборкаДетальныеЗаписи.ВидДвижения = ВидДвиженияНакопления.Расход;
			Иначе
				ВыборкаДетальныеЗаписи.ВидДвижения = ВидДвиженияНакопления.Приход;
			КонецЕсли;
			Движение.Период = Дата;
			Движение.Регистратор = Ссылка;
			Движение.Организация = Организация;
			Движение.СчетУчета = ВыборкаДетальныеЗаписи.Счет;
			Движение.Подразделение = ВыборкаДетальныеЗаписи.Субконто1Источник;
			Движение.НоменклатурнаяГруппа = ВыборкаДетальныеЗаписи.Субконто2Источник;
			Движение.СтатьяЗатрат = ВыборкаДетальныеЗаписи.Субконто3Источник;
			Движение.Стоимость = -ВыборкаДетальныеЗаписи.Сумма;	
		Иначе
			Сообщить("Необработанный счет: "+ВыборкаДетальныеЗаписи.Счет, СтатусСообщения.Внимание);
		КонецЕсли;
		
	КонецЦикла;

	Если НаборЗаписейНПЗ.Количество() > 0 Тогда 
		НаборЗаписейНПЗ.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаписейНПЗ.Записать(Ложь);
	КонецЕсли;
	Если НаборЗаписейЗатраты.Количество() > 0 Тогда 
		НаборЗаписейЗатраты.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаписейЗатраты.Записать(Ложь);
	КонецЕсли;
	Если НаборЗаписейБрак.Количество() > 0 Тогда 
		НаборЗаписейБрак.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаписейБрак.Записать(Ложь);
	КонецЕсли;

КонецПроцедуры
//Конец добавления 

// is ЯннуровВФ
Функция ПолучитьСписокПустыхСубконто(ВидыСубконто) 
	лСписок = Новый Массив; 
	лСписок.Добавить(Неопределено); 
	
	лВыборка = ВидыСубконто.Выбрать(); 
	Пока лВыборка.Следующий() Цикл 
		лСписок.Добавить(лВыборка.ТипЗначения.ПривестиЗначение()); 
	КонецЦикла; 
	
	Возврат лСписок; 
КонецФункции // () 
