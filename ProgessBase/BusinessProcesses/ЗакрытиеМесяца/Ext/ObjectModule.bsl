Перем ВозможностьЗапускаПроверена;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

//Процедура проверяет возможность запуска бизнес-процесса
//Вызывается либо из формы процесса по нажатию на кнопку запуска, либо из предопределенной процедуры ПередСтартом()
//Для исключения повторного запуска данной процедуры предназначена экспортная переменная ВозможностьЗапускаПроверена
//Возвращаемое значение - булево (Ложь - запуск запрещен, Истина - запуск разрешен)
Функция ПроверитьВозможностьЗапуска() Экспорт
	//Проверка заполнения настройки
	Если НЕ ЗначениеЗаполнено(НастройкаЗакрытияМесяца) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана настройка закрытия месяца.");
		Возврат Ложь;
	КонецЕсли;
	
	//Проверка заполнения организации
	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация.");
		Возврат Ложь;
	КонецЕсли;
	
	//Проверка - есть ли дублирующиеся бизнес-процессы
	ЗапросБизнесПроцессы = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1 
		|	БизнесПроцесс.Ссылка
		|ИЗ 
		|	БизнесПроцесс.ЗакрытиеМесяца КАК БизнесПроцесс
		|ГДЕ "+БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеПериодРегистрации(Истина, "БизнесПроцесс", "&ПериодРегистрации")+"
		|"+БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеОрганизация(Истина, "БизнесПроцесс", "&Организация", Ложь)+"
		|"+БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеОтражениеВУчете(Новый Структура("УУ,БУ,НУ", Истина, Истина, Истина), 
												Новый Структура("ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете", 
																ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете), 
												"БизнесПроцесс", Неопределено, ПериодРегистрации)+"
		|И Стартован И Ссылка <> &текСсылка";
	
	ЗапросБизнесПроцессы.Текст = ТекстЗапроса;
	ЗапросБизнесПроцессы.УстановитьПараметр("Организация", Организация);
	ЗапросБизнесПроцессы.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	ЗапросБизнесПроцессы.УстановитьПараметр("текСсылка", Ссылка);
	Результат = ЗапросБизнесПроцессы.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ТекстПредупреждение = "Для указанных периода, организации и признаков отражения в учете уже запущена процедура закрытия месяца.
		|Запрещено запускать новую процедуру закрытия месяца с такими же настройками";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстПредупреждение);
		Возврат Ложь;
	КонецЕсли;
	//Проверка выполнения настроек - есть ли хотя бы один включенный этап
	СтрокиВключены = РегламентныеОперации.Найти(Истина, "Использовать");
	Если СтрокиВключены = Неопределено Тогда
		ТекстПредупреждение = "Отключены все регламентные операции.
		|Запрещено запускать процедуру закрытия месяца";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстПредупреждение);
		Возврат Ложь;
	КонецЕсли;

	//Проверка выполнения настроек - есть ли ответственные для всех включенных этапов
	ЗапросБизнесПроцессы = Новый Запрос;
	ЗапросБизнесПроцессы.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентныеОперации.РегламентнаяОперация КАК РегламентнаяОперация,
	|	РегламентныеОперации.Ответственный,
	|	РегламентныеОперации.Использовать
	|ИЗ
	|	БизнесПроцесс.ЗакрытиеМесяца.РегламентныеОперации КАК РегламентныеОперации
	|ГДЕ РегламентныеОперации.Ссылка = &текСсылка И Использовать И
	|	(РегламентныеОперации.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	ИЛИ РегламентныеОперации.Ответственный = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка)
	|	ИЛИ РегламентныеОперации.Ответственный = Неопределено)";
	ЗапросБизнесПроцессы.УстановитьПараметр("текСсылка", Ссылка);
	Результат = ЗапросБизнесПроцессы.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТекстПредупреждение = "Не для всех используемых регламентных операций назначены ответственные.
		|Запрещено запускать процедуру закрытия месяца.
		|Ответственные за выполнение регламентных операций назначаются в справочнике ""Настройки закрытия месяца""";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстПредупреждение);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Отключает использование операций, соответствующих таким подчиненным бизнес-процессам,
// все операции которых - выключены
Процедура ОтключитьПодчиненныеБизнесПроцессыБезОпераций() Экспорт
	
	// Убедимся, что нет точек, соответствующих таким подчиненным бизнес-процессам,
	// все операции которых - выключены
	ИспользуемыеОперации = РегламентныеОперации.НайтиСтроки(Новый Структура("Использовать", Истина));
	
	Для Каждого ОписаниеПодчиненногоБизнесПроцесса ИЗ БизнесПроцессы.ЗакрытиеМесяца.ПодчиненныеБизнесПроцессы() Цикл
		
		КлючПоискаОперации = Новый Структура();
		КлючПоискаОперации.Вставить("Использовать", 		Истина);
		КлючПоискаОперации.Вставить("РегламентнаяОперация", ОписаниеПодчиненногоБизнесПроцесса.Ключ);
		
		НайденныеОперации = РегламентныеОперации.НайтиСтроки(КлючПоискаОперации);
		Если НайденныеОперации.Количество() = 0 Тогда
			// Не используется операция, соответствующая этому подчиненному БП
			Продолжить;
		КонецЕсли;
		
		// Убедимся, что используются точки этого подчиненного БП
		ИспользуютсяТочки             = Ложь;
		ИмяПодчиненногоБизнесПроцесса = ОписаниеПодчиненногоБизнесПроцесса.Значение;
		ТипТочекПодчиненногоБП        = Тип("ТочкаМаршрутаБизнесПроцессаСсылка." + ИмяПодчиненногоБизнесПроцесса);
		Для Каждого СтрокаОперацииПодчиненногоБП Из ИспользуемыеОперации Цикл
			Если ТипЗнч(СтрокаОперацииПодчиненногоБП.РегламентнаяОперация) = ТипТочекПодчиненногоБП Тогда
				ИспользуютсяТочки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ИспользуютсяТочки Тогда
			// Отключим бессмысленную операцию
			Для Каждого БессмысленнаяОперация Из НайденныеОперации Цикл
				БессмысленнаяОперация.Использовать = Ложь;
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла; // По ПодчиненныеБизнесПроцессы
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

//Функция предназначена для поиска задачи, соответствующей текущему процессу и текущей регламентной операции (точке маршрута)
//Возвращает ссылку на задачу либо Неопределено
Функция ПолучитьЗадачуПоРеглОперации(РеглОперация) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗадачаРегламентныеОперацииЗакрытияМесяца.Ссылка КАК ЗадачаСсылка
	|ИЗ
	|	Задача.РегламентныеОперацииЗакрытияМесяца КАК ЗадачаРегламентныеОперацииЗакрытияМесяца
	|ГДЕ
	|	(ЗадачаРегламентныеОперацииЗакрытияМесяца.БизнесПроцесс = &БизнесПроцесс
	|	ИЛИ ЗадачаРегламентныеОперацииЗакрытияМесяца.БизнесПроцесс в (&ПодчиненныеБизнесПроцессы))
	|	И ЗадачаРегламентныеОперацииЗакрытияМесяца.ТочкаМаршрута = &ТочкаМаршрута
	|";
	ЗапросЗадачи 		= Новый Запрос;
	ЗапросЗадачи.Текст 	= ТекстЗапроса;
	
	ЗапросЗадачи.УстановитьПараметр("БизнесПроцесс", Ссылка);
	
	ПодчиненныеБизнесПроцессы = Новый Массив();
	ПодчиненныеБизнесПроцессы.Добавить(БизнесПроцессЗакрытиеМесяца.ПолучитьПодчиненныйБизнесПроцессРасчетНДС(Ссылка));
	ПодчиненныеБизнесПроцессы.Добавить(БизнесПроцессЗакрытиеМесяца.ПолучитьПодчиненныйБизнесПроцессЗакрытиеМесяцаУСН(Ссылка));
	ЗапросЗадачи.УстановитьПараметр("ПодчиненныеБизнесПроцессы", ПодчиненныеБизнесПроцессы);
	
	ЗапросЗадачи.УстановитьПараметр("ТочкаМаршрута", РеглОперация);
	
	ВыборкаЗадач 		= ЗапросЗадачи.Выполнить().Выбрать();
	Если ВыборкаЗадач.Следующий() Тогда
		Возврат ВыборкаЗадач.ЗадачаСсылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

//Процедура вызывается при создании задач
//Выполняет 
//1. заполнение ответственных (пользователя и группу пользователей) при создании задач
//2. удаление задач, которые формируются для отключенных регламентных операций
Процедура ПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	БизнесПроцессЗакрытиеМесяца.ПриСозданииЗадачБизнесПроцессов(ЭтотОбъект.Ссылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ);
	Если ФормируемыеЗадачи.Количество() > 0 Тогда
		Если ФормируемыеЗадачи[0].ТочкаМаршрута = БизнесПроцессы.ЗакрытиеМесяца.ТочкиМаршрута.РассчитатьНДС Тогда
			СтартоватьПодчиненныйБизнесПроцессРасчетНДС(ФормируемыеЗадачи[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Процедура вызывается перед стартом процесса
//Проверяет возможность запуска в случае, если это не было сделано из формы элемента бизнес-процесса
Процедура ПередСтартом(ТочкаМаршрута, Отказ)
	
	ОтключитьПодчиненныеБизнесПроцессыБезОпераций();
	
	Если ВозможностьЗапускаПроверена Тогда
		Возврат;
	КонецЕсли;
	Отказ = НЕ ПроверитьВозможностьЗапуска();
	Если НЕ Отказ И БизнесПроцессЗакрытиеМесяца.ИспользоватьБизнесПроцессУСН(Ссылка) Тогда
		СтартоватьПодчиненныйБизнесПроцессУСН();
	КонецЕсли;
	
КонецПроцедуры

//Процедура вызывается перед записью
Процедура ПередЗаписью(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ОтражатьВУправленческомУчете ИЛИ ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не установлены признаки отражения в учетах",Отказ);
	КонецЕсли;

КонецПроцедуры

//Процедура создает и запускает подчиненный бизнес-процесс "Расчет НДС"
Процедура СтартоватьПодчиненныйБизнесПроцессРасчетНДС(ВедущаяЗадачаРасчетНДС = Неопределено) Экспорт
	Если ВедущаяЗадачаРасчетНДС = Неопределено Тогда
		ВедущаяЗадачаРасчетНДС = ПолучитьЗадачуПоРеглОперации(БизнесПроцессы.ЗакрытиеМесяца.ТочкиМаршрута.РассчитатьНДС);
		Если ВедущаяЗадачаРасчетНДС <> Неопределено Тогда
			Попытка
				ВедущаяЗадачаРасчетНДС = ВедущаяЗадачаРасчетНДС.ПолучитьОбъект();
			Исключение
				ОбщегоНазначения.Сообщение("Невозможно получить задачу расчета НДС");
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Если ВедущаяЗадачаРасчетНДС.ЭтоНовый() Тогда
		ВедущаяЗадачаРасчетНДС.Записать();
	КонецЕсли;
	БизнесПроцессРасчетНДС = БизнесПроцессЗакрытиеМесяца.ПолучитьПодчиненныйБизнесПроцессРасчетНДС(Ссылка);
	Если БизнесПроцессРасчетНДС.Пустая() Тогда
		БизнесПроцессРасчетНДС = БизнесПроцессы.РасчетНДС.СоздатьБизнесПроцесс();
	Иначе
		БизнесПроцессРасчетНДС = БизнесПроцессРасчетНДС.ПолучитьОбъект();
		БизнесПроцессРасчетНДС.Заблокировать();
	КонецЕсли;
	//Заполняем организацию и дату в подчиненном бизнес-процессе для корректной работы РЛС
	БизнесПроцессРасчетНДС.Организация = Организация;
	БизнесПроцессРасчетНДС.Дата = Дата;
	
	БизнесПроцессРасчетНДС.ВедущаяЗадача 		= ВедущаяЗадачаРасчетНДС.Ссылка;
	БизнесПроцессРасчетНДС.Записать();
	
	Если Не БизнесПроцессРасчетНДС.Стартован Тогда
		БизнесПроцессРасчетНДС.Старт();
	КонецЕсли;
КонецПроцедуры

//Процедура создает и запускает подчиеннный бизнес процесс "ЗакрытиеМесяцаУСНДоходыМинусРасходы"
Процедура СтартоватьПодчиненныйБизнесПроцессУСН() Экспорт
	БизнесПроцессУСН = БизнесПроцессЗакрытиеМесяца.ПолучитьПодчиненныйБизнесПроцессЗакрытиеМесяцаУСН(Ссылка);
	Если БизнесПроцессУСН.Пустая() Тогда
		БизнесПроцессУСН = БизнесПроцессы.ЗакрытиеМесяцаУСНДоходыМинусРасходы.СоздатьБизнесПроцесс();
	Иначе
		БизнесПроцессУСН = БизнесПроцессУСН.ПолучитьОбъект();
		БизнесПроцессУСН.Заблокировать();
	КонецЕсли;
	//Заполняем организацию и дату в подчиненном бизнес-процессе для корректной работы РЛС
	БизнесПроцессУСН.Организация = Организация;
	БизнесПроцессУСН.Дата = Дата;
	
	БизнесПроцессУСН.ОсновнойБизнесПроцесс	= Ссылка;
	БизнесПроцессУСН.Записать();
	
	Если НЕ БизнесПроцессУСН.Стартован Тогда
		БизнесПроцессУСН.Старт();
	КонецЕсли;
КонецПроцедуры

//Процедура отменяет запуск и/или завершение бизнес-процесса ЗакрытиеМесяцаУСНДоходыМинусРасходы, подчиненного текущему бизнес процессу ЗакрытиеМесяца
Процедура ОтменитьСтартИлиЗавершениеПодчиненногоБизнесПроцессаУСН(ОтменитьСтарт, ОтменитьЗавершение) Экспорт
	БизнесПроцессУСН = БизнесПроцессЗакрытиеМесяца.ПолучитьПодчиненныйБизнесПроцессЗакрытиеМесяцаУСН(Ссылка);
	Если БизнесПроцессУСН.Пустая() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ((БизнесПроцессУСН.Стартован И ОтменитьСтарт) ИЛИ (БизнесПроцессУСН.Завершен И ОтменитьЗавершение)) Тогда
		Возврат;
	КонецЕсли;
	БизнесПроцессУСН = БизнесПроцессУСН.ПолучитьОбъект();
	БизнесПроцессУСН.Заблокировать();
	Если ОтменитьСтарт Тогда
		БизнесПроцессУСН.Стартован = Ложь;
	КонецЕсли;
	Если ОтменитьЗавершение Тогда 
		БизнесПроцессУСН.Завершен = Ложь;
	КонецЕсли;
	БизнесПроцессУСН.Записать();
КонецПроцедуры


//Процедура вызывается при записи
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПометкаУдаления И Стартован Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Процедура закрытия месяца запущена. Перед пометкой на удаление необходимо отменить запуск процедуры",Отказ);
	Иначе	
		БизнесПроцессРасчетНДС = БизнесПроцессЗакрытиеМесяца.ПолучитьПодчиненныйБизнесПроцессРасчетНДС(Ссылка);
		Если ЗначениеЗаполнено(БизнесПроцессРасчетНДС) И ПометкаУдаления <> БизнесПроцессРасчетНДС.ПометкаУдаления Тогда
			БизнесПроцессРасчетНДСОбъект = БизнесПроцессРасчетНДС.ПолучитьОбъект();
			БизнесПроцессРасчетНДСОбъект.Заблокировать();
			БизнесПроцессРасчетНДСОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЕсли;	
		БизнесПроцессУСН = БизнесПроцессЗакрытиеМесяца.ПолучитьПодчиненныйБизнесПроцессЗакрытиеМесяцаУСН(Ссылка);
		Если ЗначениеЗаполнено(БизнесПроцессУСН) И ПометкаУдаления <> БизнесПроцессУСН.ПометкаУдаления Тогда
			БизнесПроцессУСНОбъект = БизнесПроцессУСН.ПолучитьОбъект();
			БизнесПроцессУСНОбъект.Заблокировать();
			БизнесПроцессУСНОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

ВозможностьЗапускаПроверена = Ложь;