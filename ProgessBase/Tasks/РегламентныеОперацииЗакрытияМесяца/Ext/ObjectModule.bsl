Перем мГлавныйБизнесПроцесс Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

//Процедура обработчик события ПередВыполнением задачи
Процедура ПередВыполнением(Отказ)
	
	Заголовок = "Выполнение регламентной операции """+Ссылка.Наименование+"""";
	Если НЕ ЗначениеЗаполнено(мГлавныйБизнесПроцесс) Тогда
		мГлавныйБизнесПроцесс = БизнесПроцессЗакрытиеМесяца.ОпределитьГлавныйБизнесПроцесс(Ссылка.БизнесПроцесс);
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(СпособВыполнения)	Тогда
		СпособВыполнения = Перечисления.СпособыВыполненияРегламентныхОпераций.Вручную;
	КонецЕсли;
	
	//если способ выполнения не вручную (т.е. автоматически либо принудительно) - проверки проведения документов не выполняются
	Если НЕ СпособВыполнения = Перечисления.СпособыВыполненияРегламентныхОпераций.Вручную Тогда
		Возврат;
	КонецЕсли;
	ИмяТочкиМаршрута = НРег(ТочкаМаршрута.Имя);
	//для некоторых операций необходимо проверять границу последовательности, а не проведение документов
	Если ИмяТочкиМаршрута = НРег("ПровестиПоПартиям") Тогда
		ПроверитьГраницыПоследовательностей(истина,ложь,ложь,ложь,Отказ, Заголовок);
		Возврат;
	ИначеЕсли ИмяТочкиМаршрута = НРег("ВосстановитьПоследовательностьРасчетовПоПриобретению") Тогда
		ПроверитьГраницыПоследовательностей(ложь,истина,ложь,ложь,Отказ, Заголовок);
		Возврат;
	ИначеЕсли ИмяТочкиМаршрута = НРег("ВосстановитьПоследовательностьРасчетовПоРеализации") Тогда
		ПроверитьГраницыПоследовательностей(ложь,ложь,истина,ложь,Отказ, Заголовок);
		Возврат;
	ИначеЕсли ИмяТочкиМаршрута = НРег("ВосстановитьПоследовательностьНалоговогоУчетаУСН") Тогда
		ПроверитьГраницыПоследовательностей(ложь,ложь,ложь,истина,Отказ, Заголовок);
		Возврат;
	ИначеЕсли ИмяТочкиМаршрута = НРег("ВыполнитьДопроведение") Тогда
		ПроверитьДопроведениеДокументов(Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	//для операций регистрации СФ необходимо проверить наличие проведенных документов "Счет-фактура выданный"
	Если ТочкаМаршрута = БизнесПроцессы.РасчетНДС.ТочкиМаршрута.РегистрацияСчетовФактурНаАванс Тогда
		ПроверитьНаличиеСчетовФактур(Перечисления.ВидСчетаФактурыВыставленного.НаАванс, Отказ, Заголовок);
		Возврат;
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.РасчетНДС.ТочкиМаршрута.РегистрацияСчетовФактурНаСуммовыеРазницы Тогда
		ПроверитьНаличиеСчетовФактур(Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу, Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	//получим список типов документов которые должны содаваться при выполнении регл операции
	СписокТиповДокументов = БизнесПроцессЗакрытиеМесяца.ПолучитьСписокТиповДокументов(ТочкаМаршрута);
		
	Если СписокТиповДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросДокументовРО = Новый Запрос;
	
	ОтказУУ	= Ложь;
	ОтказБУ	= Ложь;
	ОтказНУ	= Ложь;
	СтруктураПризнаковОтраженияВУчете = новый Структура("ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете",мГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете,мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете,мГлавныйБизнесПроцесс.ОтражатьВНалоговомУчете);
	Для каждого ТипДокумента Из СписокТиповДокументов Цикл
		Если ТипДокумента = "" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПризнаковОтраженияВУчете_ДляТочкиМаршрута = БизнесПроцессЗакрытиеМесяца.СкорректироватьОтражениеВУчете(СтруктураПризнаковОтраженияВУчете, ТочкаМаршрута, мГлавныйБизнесПроцесс.ПериодРегистрации);
		ЕстьРеквизитОтражатьВУУ = Метаданные.Документы[ТипДокумента].Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено;
		ЕстьРеквизитОтражатьВБУ = Метаданные.Документы[ТипДокумента].Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено;
		ЕстьРеквизитОтражатьВНУ = Метаданные.Документы[ТипДокумента].Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено;
		ЕстьРеквизитПериодРегистрации = Метаданные.Документы[ТипДокумента].Реквизиты.Найти("ПериодРегистрации") <> Неопределено;
        ЕстьРеквизитОрганизация = Метаданные.Документы[ТипДокумента].Реквизиты.Найти("Организация") <> Неопределено;
		
		ПериодичностьДокумента = БизнесПроцессЗакрытиеМесяца.ОпределитьПериодичностьДокумента(ТипДокумента);
		
		ОтказУУ = Истина;
		ОтказБУ	= Истина;
		ОтказНУ	= Истина;
		СтруктураНаличияРеквизитовОтраженияВУчете = новый Структура("УУ,БУ,НУ",ЕстьРеквизитОтражатьВУУ,ЕстьРеквизитОтражатьВБУ,ЕстьРеквизитОтражатьВНУ);

		//запрос - созданные и проведенные в рамках регламентной операции документы
		ТекстЗапроса = "ВЫБРАТЬ
		|	Ссылка,
		|	Проведен "+
		?(ЕстьРеквизитОрганизация," , Организация","")+
		?(ЕстьРеквизитОтражатьВУУ," , ОтражатьВУправленческомУчете","")+
		?(ЕстьРеквизитОтражатьВБУ," , ОтражатьВБухгалтерскомУчете","")+
		?(ЕстьРеквизитОтражатьВНУ," , ОтражатьВНалоговомУчете","")+"
		|ИЗ
		|	Документ." + ТипДокумента + " КАК " + ТипДокумента + "
		|ГДЕ "+БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеПериодРегистрации(ЕстьРеквизитПериодРегистрации,ТипДокумента,"&ПериодРегистрации",ПериодичностьДокумента)+"
		|"+ БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеОрганизация(ЕстьРеквизитОрганизация,ТипДокумента,"&Организация",истина)+"
		|"+БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеОтражениеВУчете(СтруктураНаличияРеквизитовОтраженияВУчете, СтруктураПризнаковОтраженияВУчете_ДляТочкиМаршрута,ТипДокумента,ТочкаМаршрута,мГлавныйБизнесПроцесс.ПериодРегистрации)+"
		|	И Проведен = ИСТИНА";
		
		ЗапросДокументовРО.Текст = ТекстЗапроса;
		
		ЗапросДокументовРО.УстановитьПараметр("ПериодРегистрации", мГлавныйБизнесПроцесс.ПериодРегистрации);
		ЗапросДокументовРО.УстановитьПараметр("Организация", мГлавныйБизнесПроцесс.Организация);
		
		ТаблицаДокументов = ЗапросДокументовРО.Выполнить().Выгрузить();
		
		Если ТаблицаДокументов.Количество() = 0 Тогда
			//не создано ни одного документа данного вида
			Прервать;
		КонецЕсли;
		
		Для каждого СтрокаДокументов Из ТаблицаДокументов Цикл
			//проверяем есть ли документы, отражающие закрытие месяца по УУ
			Если ОтказУУ Тогда
				Если СтруктураПризнаковОтраженияВУчете_ДляТочкиМаршрута.ОтражатьВУправленческомУчете И  ЕстьРеквизитОтражатьВУУ Тогда
					Если СтрокаДокументов.ОтражатьВУправленческомУчете Тогда
						ОтказУУ	= Ложь;
					КонецЕсли;
				Иначе
					ОтказУУ	= Ложь;
				КонецЕсли;
			КонецЕсли;  //Если ОтказУУ Тогда
			//проверяем есть ли документы, отражающие закрытие месяца по БУ по указанной организации
			Если ОтказБУ Тогда
				Если ТипДокумента = "ЗакрытиеГода" Тогда
					Если СтруктураПризнаковОтраженияВУчете_ДляТочкиМаршрута.ОтражатьВБухгалтерскомУчете Тогда
						Если СтрокаДокументов.Организация=мГлавныйБизнесПроцесс.Организация И СтрокаДокументов.Ссылка.РеформацияБалансаБУ Тогда
							ОтказБУ	= Ложь;
						КонецЕсли;
					Иначе
						ОтказБУ = ложь;
					КонецЕсли;
				ИначеЕсли СтруктураПризнаковОтраженияВУчете_ДляТочкиМаршрута.ОтражатьВБухгалтерскомУчете И ЕстьРеквизитОтражатьВБУ Тогда
					Если СтрокаДокументов.ОтражатьВБухгалтерскомУчете Тогда
						Если ЕстьРеквизитОрганизация Тогда
							Если СтрокаДокументов.Организация = мГлавныйБизнесПроцесс.Организация Тогда
								ОтказБУ	= Ложь;
							КонецЕсли;
						Иначе
							ОтказБУ	= Ложь;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ОтказБУ = ложь;
				КонецЕсли;
			КонецЕсли; //Если ОтказБУ Тогда
			
			//проверяем есть ли документы, отражающие закрытие месяца по НУ по указанной организации
			Если ОтказНУ Тогда
				Если ТипДокумента = "ЗакрытиеГода" Тогда
					Если СтруктураПризнаковОтраженияВУчете_ДляТочкиМаршрута.ОтражатьВНалоговомУчете Тогда
						Если СтрокаДокументов.Организация=мГлавныйБизнесПроцесс.Организация И СтрокаДокументов.Ссылка.ЗакрытиеСчетовНУ Тогда
							ОтказНУ	= Ложь;
						КонецЕсли;
					Иначе
						ОтказНУ = ложь;
					КонецЕсли;
				ИначеЕсли СтруктураПризнаковОтраженияВУчете_ДляТочкиМаршрута.ОтражатьВНалоговомУчете И ЕстьРеквизитОтражатьВНУ Тогда
					Если СтрокаДокументов.ОтражатьВНалоговомУчете Тогда
						Если ЕстьРеквизитОрганизация Тогда
							Если СтрокаДокументов.Организация = мГлавныйБизнесПроцесс.Организация Тогда
								ОтказНУ	= Ложь;
							КонецЕсли;
						Иначе
							ОтказНУ	= Ложь;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ОтказНУ = ложь;
				КонецЕсли;
			КонецЕсли; //Если ОтказНУ Тогда
			
			Если НЕ (ОтказУУ ИЛИ ОтказБУ или ОтказНУ) Тогда  //выяснили что все документы созданы - не требуется обходить список до конца
				Прервать;
			КонецЕсли;
		КонецЦикла; //Для каждого СтрокаДокументов Из ТаблицаДокументов Цикл
		
		Если ОтказУУ ИЛИ ОтказБУ ИЛИ ОтказНУ Тогда //После обхода всех документов данного типа выяснилось что по какому-либо виду учета введены не все документы
			Прервать;
		КонецЕсли;
	КонецЦикла; //Для каждого ТипДокумента Из СписокТиповДокументов Цикл
	
	//Частный случай - документов ПереоценкаВалютныхСредств по БУ может быть несколько, и все они должны быть проведены
	Если ТипДокумента = "ПереоценкаВалютныхСредств" И СтруктураПризнаковОтраженияВУчете_ДляТочкиМаршрута.ОтражатьВБухгалтерскомУчете 
		И НЕ (ОтказУУ ИЛИ ОтказБУ ИЛИ ОтказНУ) Тогда
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Документ." + ТипДокумента + " КАК " + ТипДокумента + "
		|ГДЕ "+БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеПериодРегистрации(ЕстьРеквизитПериодРегистрации,ТипДокумента,"&ПериодРегистрации")+"
		|"+ БизнесПроцессЗакрытиеМесяца.СформироватьУсловиеОрганизация(ЕстьРеквизитОрганизация,ТипДокумента,"&Организация",ложь)+"
		| И ОтражатьВБухгалтерскомУчете И ПереоценкаВалютныхСредствРегл
		|	И НЕ Проведен И НЕ ПометкаУдаления";
        Запрос = новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ПериодРегистрации", мГлавныйБизнесПроцесс.ПериодРегистрации);
		Запрос.УстановитьПараметр("Организация", мГлавныйБизнесПроцесс.Организация);
        Результат = Запрос.Выполнить();
		ОтказБУ = не Результат.Пустой();
			
	КонецЕсли;
	
	Если ОтказУУ ИЛИ ОтказБУ ИЛИ ОтказНУ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не были созданы либо не были проведены все надлежащие документы. Регламентная операция может быть выполнена только в режиме ""без проверок"" (Действия - Выполнить без проверок)",Отказ, Заголовок);			
	ИначеЕсли ИмяТочкиМаршрута = НРег("РассчитатьНДСПоПродукции") Тогда
		ОбщегоНазначения.Сообщение("Не забудьте переформировать книги покупок и книги продаж!", Перечисления.ВидыСообщений.ВажнаяИнформация,Заголовок);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

//Процедура выполняет создание документов для регламентной операции
//Вызывается из формы задачи РегламентныеОперации
//В перспективе предполагается использовать для автоматического выполнения некоторых регламентных операций
//Параметры: ИмеющиесяДокументы - таблица уже обнаруженных документов (на основе данных табличного поля в форме Задачи)
//	СписокНеСозданныхДокументов - список документов, которые не созданы в рамках работы процедуры, (либо созданы ранее, либо не удалось создать)
//	СписокТиповДокументов - список типов документов, которые необходимо создать
//	флПроводить - признак необходимости проводить создаваемые документы
//	флОК - признак успешности создания документов
Процедура СоздатьДокументы(ИмеющиесяДокументы, СписокНеСозданныхДокументов, СписокТиповДокументов, флПроводить=ложь, флОК=Истина) Экспорт
	
	ДатаРегистрации = НачалоМесяца(мГлавныйБизнесПроцесс.ПериодРегистрации);

	Для каждого ТипДокумент Из СписокТиповДокументов Цикл
		Если ТипДокумент = "" Тогда Продолжить; КонецЕсли;
		ПредставлениеДокумента = Метаданные.Документы[ТипДокумент].Синоним;
		Если ПустаяСтрока(ПредставлениеДокумента) Тогда
			ПредставлениеДокумента = ТипДокумент;
		КонецЕсли;
		
		Если ТипДокумент = "РасчетСебестоимостиВыпуска" Тогда
			//Расчет себестоимости создается на двух этапах бизнес-процесса, на каждом - со своими признаками отражения в учете
			Если НРег(ТочкаМаршрута.Имя) = НРег("РассчитатьСебестоимость") Тогда
				//один документ: УУ
				Если мГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете Тогда
					Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, Истина) Тогда
						флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,, Истина, Ложь, Ложь, флПроводить) И флОК;
					Иначе
						СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (УУ)");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли НРег(ТочкаМаршрута.Имя) = НРег("РассчитатьСебестоимостьРегл") Тогда
				//Зависит от применения расширенной аналитики учета затрат
				Если глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") И
					глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат")<=ДатаРегистрации Тогда
					//Один документ: БУ
					Если мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете Тогда
						Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, , Истина) Тогда
							флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, Ложь, Истина, Ложь, флПроводить) И флОК;
						Иначе
							СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (Регл)");
						КонецЕсли;
					КонецЕсли;
				Иначе
					//Два документа: БУ и НУ
					Если мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете Тогда
						Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, , Истина) Тогда
							флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, Ложь, Истина, Ложь, флПроводить) И флОК;
						Иначе
							СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (БУ)");
						КонецЕсли;
					КонецЕсли;
					
					Если мГлавныйБизнесПроцесс.ОтражатьВНалоговомУчете Тогда
						Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, , , Истина) Тогда
							флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, Ложь, Ложь, Истина, флПроводить) И флОК;
						Иначе
							СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (НУ)");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;	
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТипДокумент = "КорректировкаСтоимостиСписанияТоваров" Тогда
			
			//создаются отдельные документы для каждого вида учета
			Если мГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете Тогда
				Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, Истина) Тогда
					флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, Истина, Ложь, Ложь, флПроводить) И флОК;
				Иначе
					СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (УУ)");
				КонецЕсли;
			КонецЕсли;
			
			Если мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете Тогда
				Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, , Истина) Тогда
					флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, Ложь, Истина, Ложь, флПроводить) И флОК;
				Иначе
					СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (БУ)");
				КонецЕсли;
			КонецЕсли;
			
			Если мГлавныйБизнесПроцесс.ОтражатьВНалоговомУчете Тогда
				Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, , , Истина) Тогда
					флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, Ложь, Ложь, Истина, флПроводить) И флОК;
				Иначе
					СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (НУ)");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипДокумент = "ПереоценкаВалютныхСредств" Тогда
			//один документ по УУ и пакет документов по БУ + НУ
			Если мГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете Тогда
				Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент, Истина) Тогда
				
					флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,, Истина, Ложь, Ложь, флПроводить) И флОК;
				Иначе
					СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента+" (УУ)");
				КонецЕсли;
			КонецЕсли;
			Если мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете Тогда
				СоздатьДокументыПереоценкиВалютныхСредствБУ(КонецМесяца(ДатаРегистрации),мГлавныйБизнесПроцесс.Организация, флПроводить);
			КонецЕсли;	
		Иначе
			Если НЕ ЕстьРегламентныйДокумент(ИмеющиесяДокументы,ТипДокумент) Тогда
				//один документ по всем видам учета
				флОК = СоздатьРегламентныйДокумент(ТипДокумент, КонецМесяца(ДатаРегистрации), ДатаРегистрации,мГлавныйБизнесПроцесс.Организация, мГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете, мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете, мГлавныйБизнесПроцесс.ОтражатьВНалоговомУчете, флПроводить) И флОК;
			Иначе
				СписокНеСозданныхДокументов.Добавить(ПредставлениеДокумента);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

//Функция проверяет наличие регламентного документа среди таблицы сформированных документов по переданному типу и признакам отражения в учетах
//Параметры: СформированныеДокументы - таблица уже созданных документов
//    ТипДокумента - строка, тип документа
//    ОтражатьУУ,ОтражатьБУ, ОтражатьНУ - признаки отражения в учетах 
Функция ЕстьРегламентныйДокумент(СформированныеДокументы, ТипДокумента, ОтражатьУУ = Неопределено, ОтражатьБУ = Неопределено, ОтражатьНУ = Неопределено) Экспорт
	Если СформированныеДокументы=неопределено Тогда
		Возврат ложь;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ТипДокумента,ПометкаУдаления",ТипДокумента,Ложь);
	Если ТипДокумента = "ЗакрытиеГода" Тогда
		//признаками отражения в учете служат выполняемые операции
		Если ОтражатьБУ <> Неопределено Тогда
			СтруктураОтбора.Вставить("РеформацияБалансаБУ",ОтражатьБУ);
		КонецЕсли; 
        Если ОтражатьНУ <> Неопределено Тогда
			СтруктураОтбора.Вставить("ЗакрытиеСчетовНУ",ОтражатьНУ);
		КонецЕсли;
	Иначе	
		Если ОтражатьУУ <> Неопределено Тогда
			СтруктураОтбора.Вставить("ОтражатьВУправленческомУчете",ОтражатьУУ);
		КонецЕсли; 
		
		Если ОтражатьБУ <> Неопределено Тогда
			СтруктураОтбора.Вставить("ОтражатьВБухгалтерскомУчете",ОтражатьБУ);
		КонецЕсли; 
		
		Если ОтражатьНУ <> Неопределено Тогда
			СтруктураОтбора.Вставить("ОтражатьВНалоговомУчете",ОтражатьНУ);
		КонецЕсли; 
	КонецЕсли;
	
	МассивДокументов = СформированныеДокументы.НайтиСтроки(СтруктураОтбора);
	
	Возврат МассивДокументов.Количество() <> 0;
	
КонецФункции // ЕстьРегламентныйДокумент()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ 

//Функция создает регламентный документ по переданным параметрам
//Параметры: ТипДокумент - тип документа
// 	Дата - Дата документа
//  ДатаРегистрации - значение реквизита ПериодРегистрации
//	Организация - значение реквизита Организация
//  ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете - признаки отражения в учетах
//	Проводить - признак необходимости проведения создаваемых документов
//Возвращаемое значение - булево, признак успешности операции
Функция СоздатьРегламентныйДокумент(ТипДокумент, Дата, ДатаРегистрации, Организация = Неопределено, ОтражатьВУправленческомУчете = Истина, ОтражатьВБухгалтерскомУчете = Истина, ОтражатьВНалоговомУчете = Истина, Проводить = Истина)
	
	СтруктураПараметровДокумента = Новый Структура();
	
	СтруктураПараметровДокумента.Вставить("Дата",Дата);
	СтруктураПараметровДокумента.Вставить("ПериодРегистрации", НачалоМесяца(ДатаРегистрации));
	СтруктураПараметровДокумента.Вставить("Организация", Организация);
	СтруктураПараметровДокумента.Вставить("Ответственный", глЗначениеПеременной("глТекущийПользователь"));
	Если ТипДокумент = "ЗакрытиеГода" Тогда
		СтруктураПараметровДокумента.Вставить("РеформацияБалансаБУ",ОтражатьВБухгалтерскомУчете);
        СтруктураПараметровДокумента.Вставить("ЗакрытиеСчетовНУ",ОтражатьВНалоговомУчете);
	Иначе	
		СтруктураПараметровДокумента.Вставить("ОтражатьВУправленческомУчете", ОтражатьВУправленческомУчете);
		СтруктураПараметровДокумента.Вставить("ОтражатьВБухгалтерскомУчете", ОтражатьВБухгалтерскомУчете);
		СтруктураПараметровДокумента.Вставить("ОтражатьВНалоговомУчете", ОтражатьВНалоговомУчете);
	КонецЕсли;
	//Дополнительное условие для формирования книг покупок и продаж по ставке 0%
	Если ЭтотОбъект.ТочкаМаршрута.Имя = "ФормированиеЗаписейКнигиПокупокПоСтавке0" Тогда
		СтруктураПараметровДокумента.Вставить("ПредъявленНДСКВычету0", Истина);
	КонецЕсли;
	Если ЭтотОбъект.ТочкаМаршрута.Имя = "ФормированиеЗаписейКнигиПродажПоСтавке0" Тогда
		СтруктураПараметровДокумента.Вставить("Реализация0", Истина);
	КонецЕсли;
	Если ЭтотОбъект.ТочкаМаршрута.Имя = "РаспределениеНДСКосвенныхРасходов" Тогда
		СтруктураПараметровДокумента.Вставить("НачалоПериода", УчетНДС.ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, Дата));
	КонецЕсли;

	НовыйДокумент = Документы[ТипДокумент].СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокумент,СтруктураПараметровДокумента);
	
	ЗаписатьДокумент = Истина;
	ОткрытьФормуДокумента = Ложь;
	Если ТипДокумент = "РасчетСебестоимостиВыпуска" ИЛИ
		ТипДокумент = "ОпределениеФинансовыхРезультатов" ИЛИ
		ТипДокумент = "ПереоценкаВалютныхСредств" ИЛИ
		ТипДокумент = "РегламентныеОперацииНалоговогоУчетаПоНалогуНаПрибыль" Тогда
		
		Если ТипДокумент = "РасчетСебестоимостиВыпуска" Тогда
			НовыйДокумент.НастройкаЗакрытияМесяца =  мГлавныйБизнесПроцесс.НастройкаЗакрытияМесяца;
		КонецЕсли; 
		
		//Заполнение перечня операций
		Попытка
			НовыйДокумент.ЗаполнитьВыполняемыеДействия();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось заполнить и создать документ: "+ОписаниеОшибки());
			Возврат ложь;
		КонецПопытки;
	ИначеЕсли ТипДокумент = "РегламентныеОперацииНалоговогоУчетаПоУСН" Тогда
		НовыйДокумент.ПериодРегистрации							= НачалоКвартала(ДатаРегистрации);
		НовыйДокумент.РаспределениеРасходовПоВидамДеятельности	= Истина;
		НовыйДокумент.ПризнаниеРасходовНаПриобретениеОСУСН		= Истина;
		НовыйДокумент.ПризнаниеРасходовНаПриобретениеНМАУСН		= Истина;
		НовыйДокумент.СписаниеДопРасходовУСН					= Истина;
	ИначеЕсли ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.РасчетНДС") Тогда
		ОшибкаЗаполнения = Ложь;
		СтрокаСообщения = "";

		Попытка
			//Вызываем метод автоматического заполнения документа
			НовыйДокумент.ЗаполнитьДокумент(ОшибкаЗаполнения, Ложь, СтрокаСообщения);
		Исключение
		КонецПопытки;
		Если ОшибкаЗаполнения И ЗначениеЗаполнено(СтрокаСообщения) Тогда
			//Если документ заполнить не удалось, предлагаем заполнить вручную
			ПредставлениеДокумента = НовыйДокумент.Метаданные().Синоним;
			
			Если ЭтотОбъект.ТочкаМаршрута.Имя = "ФормированиеЗаписейКнигиПродажПоСтавке0"
				ИЛИ ЭтотОбъект.ТочкаМаршрута.Имя = "ФормированиеЗаписейКнигиПокупокПоСтавке0" Тогда
				
				ПредставлениеДокумента = ПредставлениеДокумента + " (по ставке 0%)"
			КонецЕсли;
			
			СтрокаСообщения = "Документ «" + ПредставлениеДокумента + "» не может быть заполнен автоматически по причине: " + СтрокаСообщения;
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Возможно, документ «" + ПредставлениеДокумента + "» в этом периоде не нужен.";
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Открыть документ для заполнения вручную?";
			
			//Документ не записываем, т.к. он не заполнился данными в автоматическом режиме
			ЗаписатьДокумент = Ложь;
			#Если Клиент Тогда
				Если Вопрос(СтрокаСообщения, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет
					, "Этап «" + ЭтотОбъект.ТочкаМаршрута.НаименованиеЗадачи + "»") = КодВозвратаДиалога.Да Тогда
					ОткрытьФормуДокумента = Истина;
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("Необходимо выполнить операцию в режиме «Без проверок»");
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗаписатьДокумент Тогда
		Попытка
			НовыйДокумент.Записать(?(Проводить,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
			Возврат Истина;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось создать документ: "+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;	
	ИначеЕсли ОткрытьФормуДокумента Тогда
		Попытка
			ФормаДокумента = НовыйДокумент.ПолучитьФорму();
			ФормаДокумента.Открыть();
			//Заполним реквизиты шапки - могли измениться при открытии формы
			ЗаполнитьЗначенияСвойств(НовыйДокумент,СтруктураПараметровДокумента);
			Возврат Истина;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось открыть форму документа: "+ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции	

//Процедура проверяет наличие проведенных счетов-фактур выданных по требуемым значениям признаков
Процедура ПроверитьНаличиеСчетовФактур(ВидСчетаФактуры, Отказ, Заголовок)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Проведен = ИСТИНА
	|	И СчетФактураВыданный.Организация = &Организация
	|	И СчетФактураВыданный.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СчетФактураВыданный.ВидСчетаФактуры = &ВидСчетаФактуры";
	
	Запрос.УстановитьПараметр("Организация", мГлавныйБизнесПроцесс.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(мГлавныйБизнесПроцесс.ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(мГлавныйБизнесПроцесс.ПериодРегистрации));
	Запрос.УстановитьПараметр("ВидСчетаФактуры", ВидСчетаФактуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ПредставлениеДокумента = """Счет-фактура выданный"" с видом операции " 
			+ ?(ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс, """На аванс""", """На суммовые разницы""");
		ТекстСообщения = "Не обнаружены проведенные документы " + ПредставлениеДокумента;
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Регламентная операция может быть выполнена только в режиме ""без проверок"" (Действия - Выполнить без проверок)";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры //ПроверитьНаличиеСчетовФактур()

//Процедура проверяет границы последовательностей по партиям и по взаиморасчетам
//Параметры:  флПартии 				- признак необходимости проверять последовательность по партиям
//			флРасчетыПоПриобретению - признак необходимости проверять последовательность расчетов по приобретению
//			флРасчетыПоРеализации 	- признак необходимости проверять последовательность расчетов по реализации
//			Отказ 					- признак того, что последовательность не восстановлена
Процедура ПроверитьГраницыПоследовательностей(флПартии, флРасчетыПоПриобретению, флРасчетыПоРеализации, флНалоговыйУчетУСН, Отказ, Заголовок)
	//вычисление даты, раньше которой граница не должна находиться
	ДатаГраницы = Мин(ТекущаяДата(),КонецМесяца(мГлавныйБизнесПроцесс.ПериодРегистрации));
	
	ТекстСообщения = "";
	Если флПартии Тогда
		Если мГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете Тогда
			//получим параметры учетной политики
			СпособВеденияПартионногоУчетаПоОрганизации = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(
					мГлавныйБизнесПроцесс.Организация,
					НачалоМесяца(мГлавныйБизнесПроцесс.ПериодРегистрации)
				);
			ОрганизацияУУ = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(мГлавныйБизнесПроцесс.Организация,СпособВеденияПартионногоУчетаПоОрганизации);

			//Проверка границы партионного учета по УУ
			СтруктураОтбор = новый Структура("Организация",ОрганизацияУУ);
			ПредставлениеГраницы = """Партионный учет (УУ)"""+?(ЗначениеЗаполнено(ОрганизацияУУ),", организация "+ОрганизацияУУ,"");
			ПроверитьГраницуПоследовательности("ПартионныйУчет",СтруктураОтбор,ДатаГраницы,ПредставлениеГраницы,ТекстСообщения);
		КонецЕсли;
		Если мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете Тогда
			СтруктураОтбор = новый Структура("Организация",мГлавныйБизнесПроцесс.Организация);
			ПредставлениеГраницы = """Партионный учет (БУ)"", организация "+мГлавныйБизнесПроцесс.Организация;
			ПроверитьГраницуПоследовательности("ПартионныйУчетБУ",СтруктураОтбор,ДатаГраницы,ПредставлениеГраницы,ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	Если флРасчетыПоПриобретению И (мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете ИЛИ мГлавныйБизнесПроцесс.ОтражатьВНалоговомУчете) Тогда
		СтруктураОтбор = новый Структура("Организация",мГлавныйБизнесПроцесс.Организация);
		ПредставлениеГраницы = """Расчеты по приобретению организации"", организация "+мГлавныйБизнесПроцесс.Организация;
		ПроверитьГраницуПоследовательности("РасчетыПоПриобретениюОрганизации",СтруктураОтбор,ДатаГраницы,ПредставлениеГраницы,ТекстСообщения,ложь);
	КонецЕсли;
	Если флРасчетыПоРеализации И (мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете ИЛИ мГлавныйБизнесПроцесс.ОтражатьВНалоговомУчете) Тогда
		СтруктураОтбор = новый Структура("Организация",мГлавныйБизнесПроцесс.Организация);
		ПредставлениеГраницы = """Расчеты по реализации организации"", организация "+мГлавныйБизнесПроцесс.Организация;
		ПроверитьГраницуПоследовательности("РасчетыПоРеализацииОрганизации",СтруктураОтбор,ДатаГраницы,ПредставлениеГраницы,ТекстСообщения, ложь);
	КонецЕсли;
	Если флНалоговыйУчетУСН И (мГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете ИЛИ мГлавныйБизнесПроцесс.ОтражатьВНалоговомУчете) Тогда
		СтруктураОтбор = новый Структура("Организация",мГлавныйБизнесПроцесс.Организация);
		ПредставлениеГраницы = """Налоговый учет УСН"", организация "+мГлавныйБизнесПроцесс.Организация;
		ПроверитьГраницуПоследовательности("НалоговыйУчетУСН",СтруктураОтбор,ДатаГраницы,ПредставлениеГраницы,ТекстСообщения, ложь);
	КонецЕсли;
	

	Если ТекстСообщения<>"" Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС+ "Регламентная операция может быть выполнена только в режиме ""без проверок"" (Действия - Выполнить без проверок)";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ,Заголовок);
	КонецЕсли;
	
КонецПроцедуры

//Процедура проверяет конкретную указанную в параметрах границу последовательности 
//Параметры:  ИмяГраницы - имя границы последовательности
//			Отбор 					- структура отбора, по которой необходимо получить границу
//			ДатаСравнения 			- дата, раньше которой граница не должна находиться
//			ПредставлениеГраницы 	- строка, представление границы для вывода сообщений
//			ТекстСообщения 			- текст сообщения, который необходимо вывести пользователю
//			флПартии 				- булево, признак того что проверяется граница партионного учета
Процедура ПроверитьГраницуПоследовательности(ИмяГраницы,Отбор,ДатаСравнения,ПредставлениеГраницы,ТекстСообщения, флПартии=истина)
	Если флПартии Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПартионныйУчетГраницы.Период КАК Период
		|ИЗ
		|	Последовательность." + ИмяГраницы + ".Границы КАК ПартионныйУчетГраницы
		|ГДЕ
		|	ПартионныйУчетГраницы.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПартионныйУчет.Период
		|ИЗ
		|	Последовательность." + ИмяГраницы + " КАК ПартионныйУчет
		|ГДЕ
		|	(НЕ ПартионныйУчет.ПроведенВХронологическойПоследовательности)
		|	И	ПартионныйУчет.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
		
		Запрос.УстановитьПараметр("Организация", Отбор.Организация);
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаГраницы =  Выборка.Период;
		Иначе
			ДатаГраницы = Дата("00010101000000");
		КонецЕсли;
	Иначе
		ГраницаПоследовательности = Последовательности[ИмяГраницы].ПолучитьГраницу(Отбор);
		ДатаГраницы = ГраницаПоследовательности.Дата
	КонецЕсли;	
	
	Если ДатаГраницы<ДатаСравнения Тогда
		//Если дата не пустая, и меньше конца закрываемого периода - необходимо проверить есть ли 
		//	зарегистрированные в последовательности документы позже этой даты и раньше конца закрываемого периода
		Если ДатаГраницы <> Дата("00010101000000") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Период
			|ИЗ
			|	Последовательность." + ИмяГраницы + "
			|ГДЕ
			|	Организация = &Организация
			|	И Период > &Граница 
			|	И Период <= &ДатаСравнения
			|	" + ?(флПартии, " И НЕ ПроведенВХронологическойПоследовательности", "")+"
			|УПОРЯДОЧИТЬ ПО
			|	Период";
			Запрос.УстановитьПараметр("Организация", Отбор.Организация);
			Запрос.УстановитьПараметр("Граница", ДатаГраницы);
			Запрос.УстановитьПараметр("ДатаСравнения", ДатаСравнения);
			РезультатЗапроса = Запрос.Выполнить();
			//Нет ни одного документа в последовательности между границей и концом закрываемого периода
			//	Значит, граница восстановлена
			Если РезультатЗапроса.Пустой() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ТекстСообщения = ТекстСообщения + ?(ТекстСообщения<>"",Символы.ПС,"")+
			"Граница последовательности "+ПредставлениеГраницы + " установлена на дату " + ДатаГраницы + Символы.ПС + Символы.Таб + 
			"Последовательность не восстановлена";
	КонецЕсли;
КонецПроцедуры

//Процедура проверяет выполнено ли допроведение документов за период
Процедура ПроверитьДопроведениеДокументов(Отказ, Заголовок)
	ДатаПервогоНедопроведенногоДокумента = ОтложенноеПроведениеДокументов.ПолучитьДатуПервогоНедопроведенногоДокумента(мГлавныйБизнесПроцесс.Организация, , КонецМесяца(мГлавныйБизнесПроцесс.ПериодРегистрации));
	Если ЗначениеЗаполнено(ДатаПервогоНедопроведенногоДокумента) Тогда
		ТекстСообщения = "Не выполнено допроведение документов. Регламентная операция может быть выполнена только в режиме ""без проверок"" (Действия - Выполнить без проверок)";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения,Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры

//Процедура создает документы "Переоценка валютных средств", отраженные в БУ
//Создание документов происходит с помощью методов встроенной обработки "РегламентноеВосстановлениеСостоянияРасчетовОрганизаций"
//Параметры: ДатаРегистрации - дата, по которую необходимо переоценить валютные средства
//			Организация, по которой необходимо выполнить переоценку
//			флПроводить - булево, признак того что документы при создании следует проводить
Процедура СоздатьДокументыПереоценкиВалютныхСредствБУ(ДатаРегистрации, Организация, флПроводить)
	Перем ОбработкаОбъект;
	ОбработкаОбъект = Обработки.РегламентноеВосстановлениеСостоянияРасчетовОрганизаций.Создать();
	ОбработкаОбъект.Организация = Организация;
	ОбработкаОбъект.ДатаАктуализации = КонецМесяца(ДатаРегистрации);
	Если флПроводить Тогда
		//Создание + Проведение
		ОбработкаОбъект.ПереоценитьВалютныеОстатки(НачалоМесяца(ДатаРегистрации));
	Иначе
		//Создание без проведения
		ОбработкаОбъект.СоздатьДокументыПереоценкиВалютныхСредств(НачалоМесяца(ДатаРегистрации));
	КонецЕсли;
	
КонецПроцедуры

//Процедура обработчик события ПередИнтерактивнымВыполнением
Процедура ПередИнтерактивнымВыполнением(Отказ)

	Если ТочкаМаршрута = БизнесПроцессы.ЗакрытиеМесяца.ТочкиМаршрута.РассчитатьНДС Тогда
		#Если Клиент Тогда
		Предупреждение("Выполнение задачи ""Рассчитать НДС"" возможно только в автоматическом режиме" + Символы.ПС
						+ "после выполнения задач расчета НДС");	
		#КонецЕсли
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры