Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Перем Раздел, ТекущийНомерСправки, ОбластьГруппировки, ДатаПодписи, ПервыйНомер;

#Если ТолстыйКлиентОбычноеПриложение Тогда

Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Неопределено, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	ЗначениеПанелипользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ЭтотОбъект);
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	Группировка = ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, "ФизЛицо");
	ПолеГруппирвоки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппирвоки.Поле = Новый ПолеКомпоновкиДанных("Год");
	ПолеГруппирвоки.Использование = истина;
	ПолеГруппирвоки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппирвоки.Поле = Новый ПолеКомпоновкиДанных("Организация");
	ПолеГруппирвоки.Использование = истина;
	Группировка.Имя = "ДобавленнаяЧасть";

	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ВзносыРаботника");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Организация_ИНН");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Организация_КПП");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Организация_Наименование");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Ответственный_Должность");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Ответственный_ФИО");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Отчество");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Фамилия");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Имя");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо_АдресГород");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо_АдресДом");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо_АдресИндекс");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо_АдресКвартира");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо_АдресКорпус");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо_АдресНаселенныйПункт");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо_АдресРайон");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо_АдресРегион");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо_АдресУлица");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо_ИНН");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо_КодДокументаУдЛичн");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФизЛицо_СерияНомерДокументаУдЛичн");
	
	ДокументРезультат.Очистить();
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаАктуальности"));
	Если ЗначениеПараметра <> Неопределено тогда
		Если ЗначениеПараметра.Значение <> '00010101' тогда
			ДатаАктуальности = ЗначениеПараметра.Значение;
		Иначе
			ДатаАктуальности           = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
		КонецЕсли;
	Иначе
		ДатаАктуальности = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	КонецЕсли;
	
	ДатаПодписи = ДатаАктуальности;
	
	Ответственный =  Неопределено;
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Ответственный"));
	Если ЗначениеПараметра <> Неопределено тогда
		Ответственный = ЗначениеПараметра.Значение;
	КонецЕсли;
	
	ПервыйНомер = 1;
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПервыйНомер"));
	Если ЗначениеПараметра <> Неопределено тогда
		ПервыйНомер = ЗначениеПараметра.Значение;
	КонецЕсли;
	ТекущийНомерСправки = ПервыйНомер;

	
	//Заполним параметры Организация и физлицо, на случай если нет данных
	МассивОтборов = ТиповыеОтчеты.ПолучитьЭлементыОтбора(КомпоновщикНастроек);
	Организация = Неопределено;
	ФизЛицо = Неопределено;
	Для каждого ЭлементОтбора из МассивОтборов Цикл
		Если НЕ ЭлементОтбора.Использование тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
		   И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФизЛицо") 
		   И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно тогда
			ФизЛицо = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
		   И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") 
		   И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно тогда
			Организация = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Если Организация <> Неопределено тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Организация", Организация);
	КонецЕсли;
	
	Если ФизЛицо <> Неопределено тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ФизЛицо", ФизЛицо);
	КонецЕсли;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДеревоДанных =  Новый ДеревоЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ДеревоДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	МассивГруппировок = ТиповыеОтчеты.ПолучитьЭлементыСтруктуры(КомпоновщикНастроек);
	
	Макет =	ПолучитьМакет("ФормаОтчета2009Кв1");
    Раздел = Макет.ПолучитьОбласть("Раздел");
	МакетГруппировки = ПолучитьМакет("МакетГруппировки");
	ОбластьГруппировки = МакетГруппировки.ПолучитьОбласть("Группировка");


	Если ДеревоДанных.Строки.Количество() = 0 Тогда
		ДокументРезультат.Вывести(Раздел);
	Иначе
		ВывестиКарточки(ДокументРезультат, ДеревоДанных.Строки, 0, МассивГруппировок);
	КонецЕсли;
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	//Параметры документа
	ДокументРезультат.ТолькоПросмотр = Истина;
	ДокументРезультат.ПолеСлева				= 5;
	ДокументРезультат.ПолеСправа			= 10;
	ДокументРезультат.ПолеСнизу				= 0;
	ДокументРезультат.ПолеСверху			= 2;
	ДокументРезультат.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_РегламентированнаяФормаСправкаПоДСВ";
	ДокументРезультат.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
КонецПроцедуры 

// Заполняет табличный документ
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//
Процедура ВывестиКарточки(ДокументРезультат, СтрокиДереваДанных, Уровень, Группировки) Экспорт

	Для каждого СтрокаТаблицы из СтрокиДереваДанных Цикл
		Если Группировки[Уровень] <> Неопределено И Группировки[Уровень].Значение.Имя = "ДобавленнаяЧасть" тогда
			ВывестиКарточку(ДокументРезультат, СтрокаТаблицы, Уровень);
		Иначе
			ВывестиГруппировку(ДокументРезультат, СтрокаТаблицы, Уровень, Группировки);
		КонецЕсли;
	КонецЦИкла;
	
КонецПроцедуры

Процедура ВывестиГруппировку(Результат, СтрокаТаблицы, Уровень, МассивГруппировок)
	Если МассивГруппировок.Количество()-1 >= Уровень И МассивГруппировок[Уровень].Значение.Имя <> "ДобавленнаяЧасть" тогда
		Группировка = МассивГруппировок[Уровень].Значение;
		Заголовок = "";
		Значение  = "";
		Для каждого ЭлементГруппировки из Группировка.ПоляГруппировки.Элементы Цикл
			ДоступноеПоле = ТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ЭлементГруппировки.Поле, КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок);
			Заголовок = Заголовок + ?(Заголовок <> "", ", ", "") + ДоступноеПоле.Заголовок;
			Поле = СтрЗаменить(Строка(ЭлементГруппировки.Поле), ".", "");
			Значение = Значение + ?(Значение <> "", ", ", "") + Формат(СтрокаТаблицы[Поле], "ЧГ=0; ДФ=dd.MM.yyyy");
		КонецЦикла;
		ОбластьГруппировки.Параметры.НазваниеПарметра = Заголовок;
		ОбластьГруппировки.Параметры.Значение         = Значение;
		Результат.Вывести(ОбластьГруппировки, Уровень);
		
		Если СтрокаТаблицы.Строки.Количество() > 0 тогда
			ВывестиКарточки(Результат, СтрокаТаблицы.Строки, Уровень+1, МассивГруппировок);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиКарточку(ДокументРезультат, ДанныеФизЛиц, Уровень)
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.Организация_ИНН, Раздел, "Организация_ИНН_", 12);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.Организация_КПП, Раздел, "Организация_КПП_", 9);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрЗаменить(Формат(ДатаПодписи, "ДФ=dd.MM.yyyy"),".",""), Раздел, "Дата", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ДанныеФизЛиц.Год, "ЧГ=0"), Раздел, "Год", 4);
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.Организация_Наименование, Раздел, "Организация_Наименование_", 160);
	
	Раздел.Параметры.ФИООтветственного = ДанныеФизЛиц.Ответственный_ФИО;
	Раздел.Параметры.ДолжностьОтветственного = ДанныеФизЛиц.Ответственный_Должность;
	
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Формат(ТекущийНомерСправки, "ЧГ=0"), Раздел, "Номер", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.Фамилия, Раздел, "ФизЛицо_Фамилия_", 33);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.Имя, Раздел, "ФизЛицо_Имя_", 33);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.Отчество, Раздел, "ФизЛицо_Отчество_", 33);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.ФизЛицо_ИНН, Раздел, "ФизЛицо_ИНН_", 12);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.ФизЛицо_КодДокументаУдЛичн, Раздел, "ФизЛицо_КодДокументаУдЛичн_", 2);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.ФизЛицо_СерияНомерДокументаУдЛичн, Раздел, "ФизЛицо_СерияНомерДокументаУдЛичн_", 25);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.ФизЛицо_АдресИндекс, Раздел, "ФизЛицо_АдресИндекс_", 6);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ПроцедурыУправленияПерсоналом.ПолучитьКодРегионаРФИзКодаАдресногоЭлемента(ДанныеФизЛиц.ФизЛицо_АдресРегион), Раздел, "ФизЛицо_АдресРегион_", 2);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.ФизЛицо_АдресРайон, Раздел, "ФизЛицо_АдресРайон_", 33);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.ФизЛицо_АдресГород, Раздел, "ФизЛицо_АдресГород_", 33);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.ФизЛицо_АдресНаселенныйПункт, Раздел, "ФизЛицо_АдресНаселенныйПункт_", 33);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.ФизЛицо_АдресУлица, Раздел, "ФизЛицо_АдресУлица_", 33);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.ФизЛицо_АдресДом, Раздел, "ФизЛицо_АдресДом_", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.ФизЛицо_АдресКорпус, Раздел, "ФизЛицо_АдресКорпус_", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ДанныеФизЛиц.ФизЛицо_АдресКвартира, Раздел, "ФизЛицо_АдресКвартира_", 8);
	ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Прав("           " + Формат(ДанныеФизЛиц.ВзносыРаботника,"ЧЦ=11; ЧС=-2; ЧГ=0"),11), Раздел, "СуммаВзносовРубли_", 11);
	
	Если ТекущийНомерСправки > ПервыйНомер Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ДокументРезультат.Вывести(Раздел);  
	ТекущийНомерСправки = ТекущийНомерСправки + 1;
	
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

//Процедура ПередВыводомЭлементРезультата(МакетКомпоновки, ПроцессорКомпоновки, ЭлементРезультата) Экспорт

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции

	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
КонецПроцедуры

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
