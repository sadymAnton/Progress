Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю



Функция СформируемТаблица_АдресаПоставки_ТипыЦен() Экспорт
	//Контрагент, АдресПоставки, Номенклатура, Скидка, ТипЦены, Цена, ЦенаСНДС","");
	//Результат.Колонки.Добавить("Регион");
	//Результат.Колонки.Добавить("КаналПродаж");
	//Результат.Колонки.Добавить("ПроектГП");
	//Результат.Колонки.Добавить("УсловиеПоставки");
	
	ТЗ = ТабНоменклатура.Выгрузить(,"Номенклатура,ПроектГП,ТипЦены,Цена,ЦенаСНДС,Скидка");
	Отбор = Новый Структура("Цена",0);
	МассивНулевыхСтрок = ТЗ.НайтиСтроки(Отбор);
	Для Каждого СтрокаКУдалению Из МассивНулевыхСтрок Цикл
		ТЗ.Удалить(СтрокаКУдалению);
	КонецЦикла;
    ТЗ.Колонки.Добавить("Контрагент");
    ТЗ.Колонки.Добавить("АдресПоставки");
    ТЗ.Колонки.Добавить("Регион");
    ТЗ.Колонки.Добавить("КаналПродаж");
    ТЗ.Колонки.Добавить("УсловиеПоставки");
	ТЗ.ЗаполнитьЗначения(Контрагент,"Контрагент");
	//ТЗ.ЗаполнитьЗначения(АдресПоставки,"АдресПоставки");
	ТЗ.ЗаполнитьЗначения(Регион,"Регион");
	ТЗ.ЗаполнитьЗначения(КатегорияКлиентов,"КаналПродаж");
	ТЗ.ЗаполнитьЗначения(УсловиеПоставки,"УсловиеПоставки");
	
	Возврат ТЗ;
КонецФункции	


Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрДатаЦен = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ПараметрДатаЦен <> Неопределено Тогда
		ПараметрДатаЦен.Использование = Истина;
		ПараметрДатаЦен.Значение = ДатаЦен;
	КонецЕсли;
	
	
	
	//ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	//
	//#Если Клиент Тогда
	//	ЕстьОтборы = Ложь;
	//	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	//	
	//	Для i = 0 по ЭлементыОтбора.Количество()-1 Цикл
	//		ЭлементСтарый = ЭлементыОтбора.Получить(i);
	//		Если ЭлементСтарый.Использование Тогда
	//			ЕстьОтборы = Истина;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Если Не ЕстьОтборы Тогда
	//		Если Не Вопрос("Не установлены отборы в отчете, отчет по всем клиентам будет выполнятся несколько часов. Все равно продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
	//			Возврат Неопределено;
	//		КонецЕсли;
	//	КонецЕсли;
	//#КонецЕсли
	
	СтруктураВнешнихДанных = Новый Структура;
	СтруктураВнешнихДанных.Вставить("ТаблицаАдресаПоставки_ТипыЦен", СформируемТаблица_АдресаПоставки_ТипыЦен());
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, СтруктураВнешнихДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
		
КонецФункции

Функция СформироватьОтчетВсе(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ТЗ) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрДатаЦен = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ПараметрДатаЦен <> Неопределено Тогда
		ПараметрДатаЦен.Использование = Истина;
		ПараметрДатаЦен.Значение = ДатаЦен;
	КонецЕсли;
	
	СтруктураВнешнихДанных = Новый Структура;
	СтруктураВнешнихДанных.Вставить("ТаблицаАдресаПоставки_ТипыЦен", ТЗ);
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, СтруктураВнешнихДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
		
КонецФункции



Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		ПараметрКонецПериода.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДоработатьКомпоновщикПередВыводом()

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

