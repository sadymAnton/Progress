Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета
Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю
Перем ДатаНачалаНП, ДатаКонцаНП;

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	ЗначениеПанелипользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ЭтотОбъект);
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ЗначениеПараметра <> Неопределено Тогда
		ДатаНачалаНП =  Дата(ЗначениеПараметра.Значение);
	КонецЕсли;
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ЗначениеПараметра <> Неопределено Тогда
		ДатаКонцаНП = Дата(ЗначениеПараметра.Значение);
	КонецЕсли;
	
	Если ДатаНачалаНП = '00010101'  тогда
		ДатаНачалаНП = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	Если ДатаКонцаНП = '00010101' тогда
		ДатаКонцаНП = КонецМесяца(ТекущаяДата());
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	Попытка 
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаЗначений =  Новый ТаблицаЗначений;
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
	Исключение
		#Если ТолстыйКлиентОбычноеПриложение тогда 
			Вопрос("Отчет не сформирован!" + Символы.ПС + ТиповыеОтчеты.ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке()), РежимДиалогаВопрос.ОК);
		#КонецЕсли
		Возврат Результат;
	КонецПопытки;
	
	Если ТаблицаЗначений.Количество() > 0 Тогда
		СформироватьМакет(Результат, ТаблицаЗначений);
	Иначе
		СформироватьПустографку(Результат);
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	Возврат Результат;
	
КонецФункции

Процедура СформироватьМакет(ДокументРезультат, ТаблицаОрганизаций)
	
	ДокументРезультат.Очистить();
	
	НачалоПериода = НачалоГода(ДатаКонцаНП);
	ОкончаниеПериода = КонецМесяца(ДатаКонцаНП);
	НачалоТекущегоКвартала = НачалоКвартала(ДатаКонцаНП);
	ДатаПодписи = Макс(ОкончаниеПериода, КонецМесяца(ТекущаяДатаСеанса()));
	
	// Области макета
	Макет = ПолучитьМакет("ПФ_MXL_СправкаРасчет");
	ОбластьЗаявление = Макет.ПолучитьОбласть("Заявление");
	ОбластьСтраницаПриложения1 = Макет.ПолучитьОбласть("СтраницаПриложения1");
	ОбластьСтраницаПриложения2 = Макет.ПолучитьОбласть("СтраницаПриложения2");

	// Создание запроса и установка параметров.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	Запрос.УстановитьПараметр("НачалоОтчетногоПериода",	НачалоПериода);
	Запрос.УстановитьПараметр("КонецОтчетногоПериода",	ОкончаниеПериода);
	Запрос.УстановитьПараметр("Месяц1",					Месяц(НачалоТекущегоКвартала));
	Запрос.УстановитьПараметр("Месяц2",					Месяц(НачалоТекущегоКвартала) + 1);
	Запрос.УстановитьПараметр("Месяц3",					Месяц(НачалоТекущегоКвартала) + 2);
	Запрос.УстановитьПараметр("ПоследнийМесяц",			НачалоМесяца(ОкончаниеПериода));
	// ----------------------------------------------------------------------------------
	// ТЕКСТЫ ЗАПРОСОВ
	
	СоздатьВТРасчетыСФондомТекст = 
	"ВЫБРАТЬ
	|	РасчетыПоСтраховымВзносамОстаткиИОбороты.Организация КАК Организация,
	|	РасчетыПоСтраховымВзносамОстаткиИОбороты.ВидПлатежа КАК ВидПлатежа,
	|	РасчетыПоСтраховымВзносамОстаткиИОбороты.Период КАК Период,
	|	РасчетыПоСтраховымВзносамОстаткиИОбороты.ФССНачальныйОстаток,
	|	РасчетыПоСтраховымВзносамОстаткиИОбороты.ФССКонечныйОстаток,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОстаткиИОбороты.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|			ТОГДА РасчетыПоСтраховымВзносамОстаткиИОбороты.ФССПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФССНачислено,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОстаткиИОбороты.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогАкт)
	|			ТОГДА РасчетыПоСтраховымВзносамОстаткиИОбороты.ФССПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФССДоНачислено,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОстаткиИОбороты.ВидПлатежа <> ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию)
	|			ТОГДА РасчетыПоСтраховымВзносамОстаткиИОбороты.ФССРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФССУплачено,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОстаткиИОбороты.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию)
	|			ТОГДА -РасчетыПоСтраховымВзносамОстаткиИОбороты.ФССОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФССПроизведеноРасходов,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОстаткиИОбороты.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НеПринято)
	|			ТОГДА РасчетыПоСтраховымВзносамОстаткиИОбороты.ФССПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФССНеПринятоРасходов,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносамОстаткиИОбороты.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПолученоИзФонда)
	|			ТОГДА РасчетыПоСтраховымВзносамОстаткиИОбороты.ФССПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ФССВозмещеноРасходов
	|ПОМЕСТИТЬ ВТРасчетыСФондом
	|ИЗ
	|	РегистрНакопления.РасчетыПоСтраховымВзносам.ОстаткиИОбороты(
	|			&НачалоОтчетногоПериода,
	|			&КонецОтчетногоПериода,
	|			Месяц,
	|			,
	|			Организация В (&СписокОрганизаций)
	|				И НЕ ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Штраф), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПениСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПениАкт))) КАК РасчетыПоСтраховымВзносамОстаткиИОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период";
	
	НачальныйОстатокТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СУММА(ВЫБОР
	|					КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогАкт))
	|						ТОГДА РасчетыСФондом.ФССНачальныйОстаток
	|					КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПолученоИзФонда), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НеПринято))
	|						ТОГДА РасчетыСФондом.ФССНачальныйОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ) > 0
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогАкт))
	|							ТОГДА РасчетыСФондом.ФССНачальныйОстаток
	|						КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПолученоИзФонда), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НеПринято))
	|							ТОГДА РасчетыСФондом.ФССНачальныйОстаток
	|						ИНАЧЕ 0
	|					КОНЕЦ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000010001003,
	|	ВЫБОР
	|		КОГДА СУММА(ВЫБОР
	|					КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогАкт))
	|						ТОГДА РасчетыСФондом.ФССНачальныйОстаток
	|					КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПолученоИзФонда), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НеПринято))
	|						ТОГДА РасчетыСФондом.ФССНачальныйОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ) < 0
	|			ТОГДА -СУММА(ВЫБОР
	|						КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогАкт))
	|							ТОГДА РасчетыСФондом.ФССНачальныйОстаток
	|						КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПолученоИзФонда), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НеПринято))
	|							ТОГДА РасчетыСФондом.ФССНачальныйОстаток
	|						ИНАЧЕ 0
	|					КОНЕЦ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000010011003
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом
	|ГДЕ
	|	РасчетыСФондом.Организация = &Организация
	|	И РасчетыСФондом.Период = &НачалоОтчетногоПериода";
	
	КонечныйОстатокТекст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СУММА(ВЫБОР
	|					КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогАкт))
	|						ТОГДА РасчетыСФондом.ФССКонечныйОстаток
	|					КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПолученоИзФонда), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НеПринято))
	|						ТОГДА РасчетыСФондом.ФССКонечныйОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ) < 0
	|			ТОГДА -СУММА(ВЫБОР
	|						КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогАкт))
	|							ТОГДА РасчетыСФондом.ФССКонечныйОстаток
	|						КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПолученоИзФонда), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НеПринято))
	|							ТОГДА РасчетыСФондом.ФССКонечныйОстаток
	|						ИНАЧЕ 0
	|					КОНЕЦ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000010010003,
	|	ВЫБОР
	|		КОГДА СУММА(ВЫБОР
	|					КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогАкт))
	|						ТОГДА РасчетыСФондом.ФССКонечныйОстаток
	|					КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПолученоИзФонда), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НеПринято))
	|						ТОГДА РасчетыСФондом.ФССКонечныйОстаток
	|					ИНАЧЕ 0
	|				КОНЕЦ) > 0
	|			ТОГДА СУММА(ВЫБОР
	|						КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогСам), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НалогАкт))
	|							ТОГДА РасчетыСФондом.ФССКонечныйОстаток
	|						КОГДА РасчетыСФондом.ВидПлатежа В (ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.РасходыПоСтрахованию), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.ПолученоИзФонда), ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.НеПринято))
	|							ТОГДА РасчетыСФондом.ФССКонечныйОстаток
	|						ИНАЧЕ 0
	|					КОНЕЦ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК П000010021003
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом
	|ГДЕ
	|	РасчетыСФондом.Организация = &Организация
	|	И РасчетыСФондом.Период = &ПоследнийМесяц";
	
	РасчетыСФондомТекст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНачислено), 0) КАК П000010002101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|					ТОГДА РасчетыСФондом.ФССНачислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010002301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|					ТОГДА РасчетыСФондом.ФССНачислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010002401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|					ТОГДА РасчетыСФондом.ФССНачислено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010002501,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССДоНачислено), 0) КАК П000010003101,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССНеПринятоРасходов), 0) КАК П000010005101,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССВозмещеноРасходов), 0) КАК П000010006101,
	|	ЕСТЬNULL(СУММА(РасчетыСФондом.ФССУплачено), 0) КАК П000010016101,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|					ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010015301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|					ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010015401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|					ТОГДА РасчетыСФондом.ФССПроизведеноРасходов
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010015501,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц1
	|					ТОГДА РасчетыСФондом.ФССУплачено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010016301,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц2
	|					ТОГДА РасчетыСФондом.ФССУплачено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010016401,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА МЕСЯЦ(РасчетыСФондом.Период) = &Месяц3
	|					ТОГДА РасчетыСФондом.ФССУплачено
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК П000010016501
	|ИЗ
	|	ВТРасчетыСФондом КАК РасчетыСФондом
	|ГДЕ
	|	РасчетыСФондом.Организация = &Организация";
	
	Запрос.Текст = СоздатьВТРасчетыСФондомТекст;
	Запрос.УстановитьПараметр("СписокОрганизаций", ТаблицаОрганизаций.ВыгрузитьКолонку("Организация"));
	Запрос.Выполнить();
	
	ПолучениеАдресовОрганизаций = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ВЫБОР
	|					КОГДА АдресФактическийЮрЛица.Поле1 ЕСТЬ NULL 
	|						ТОГДА АдресЮрЛица.Представление
	|					ИНАЧЕ АдресФактическийЮрЛица.Представление
	|				КОНЕЦ
	|		КОГДА АдресаФактические.Поле1 ЕСТЬ NULL 
	|			ТОГДА АдресаРегистрации.Представление
	|		ИНАЧЕ АдресаФактические.Представление
	|	КОНЕЦ КАК АдресФактический
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаФактические
	|		ПО Организации.ИндивидуальныйПредприниматель = АдресаФактические.Объект
	|			И (АдресаФактические.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|			И (АдресаФактические.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
	|		ПО Организации.ИндивидуальныйПредприниматель = АдресаРегистрации.Объект
	|			И (АдресаРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|			И (АдресаРегистрации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресЮрЛица
	|		ПО Организации.Ссылка = АдресЮрЛица.Объект
	|			И (АдресЮрЛица.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|			И (АдресЮрЛица.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресФактическийЮрЛица
	|		ПО Организации.Ссылка = АдресФактическийЮрЛица.Объект
	|			И (АдресЮрЛица.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации))
	|			И (АдресЮрЛица.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|ГДЕ
	|	Организации.Ссылка В (&СписокОрганизаций)";
	Запрос.Текст = ПолучениеАдресовОрганизаций;
	АдресаОрганизаций = Запрос.Выполнить().Выбрать();
	
	Для каждого СтрокаТЗ Из ТаблицаОрганизаций Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Организация = СтрокаТЗ.Организация;
		
		// -----------------------------------------------------------------------------
		// ВЫПОЛНЕНИЕ ЗАПРОСОВ
		
		ОписаниеТаблиц = Новый Структура("ПособияПоНетрудоспособности2017,ПособияПоУходу2017,ПолучателейПособияПоУходу2017");
		ЗаполнениеРегламентированнойОтчетности.РасчетПоказателей_РСВ_2017Кв1(НачалоПериода, ОкончаниеПериода, ДатаПодписи, Организация, Организация, ОписаниеТаблиц);
	
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = НачальныйОстатокТекст;
		ВыборкаНачальныйОстаток = Запрос.Выполнить().Выбрать();
		ВыборкаНачальныйОстаток.Следующий();
		Запрос.Текст = КонечныйОстатокТекст;
		ВыборкаКонечныйОстатокТекст = Запрос.Выполнить().Выбрать();
		ВыборкаКонечныйОстатокТекст.Следующий();
		Запрос.Текст = РасчетыСФондомТекст;
		ВыборкаРасчетыСФондом = Запрос.Выполнить().Выбрать();
		ВыборкаРасчетыСФондом.Следующий();
		
		// -----------------------------------------------------------------------------
		// ЗАПОЛНЕНИЕ ФОРМЫ
		
		ФактическийАдрес = "";
		АдресаОрганизаций.Сбросить();
		Если АдресаОрганизаций.НайтиСледующий(Новый Структура("Организация", Организация)) Тогда
			ФактическийАдрес = АдресаОрганизаций.АдресФактический;
		КонецЕсли;
		
		ПараметрыЗаявления = ОбластьЗаявление.Параметры;
		ПараметрыРасчетовСФондом = ОбластьСтраницаПриложения1.Параметры;
		ПараметрыРасходовПоСтрахованию = ОбластьСтраницаПриложения2.Параметры;
		
		СтрокаРеквизитыОрганизации = "НаименованиеПолное, РегистрационныйНомерФСС, КодПодчиненностиФСС, ДополнительныйКодФСС, ИНН";
		ПараметрыЗаявления.Заполнить(ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(Организация, СтрокаРеквизитыОрганизации));
		
		СтрокаСведенийОбОрганизации = "КППЮЛ,ФИОРук,ТелРук,ДолжнРук,ФИОБух,ТелБух,ФИОУпПред,БанкСчетНомер,БанкСчетНаимБанка,БанкСчетКоррСчетБанка,БанкСчетБИКБанка";
		ПараметрыЗаявления.Заполнить(РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, ДатаПодписи, СтрокаСведенийОбОрганизации));
		
		ПараметрыЗаявления.АдресФактический = ФактическийАдрес;
		
		// Если что-то указали в параметрах отчета - выведем в заявление.
		
		ПараметрыОтчета = Новый Массив;
		ПараметрыОтчета.Добавить("РуководительКонтрольногоОргана");
		ПараметрыОтчета.Добавить("БанкСчетНомер");
		ПараметрыОтчета.Добавить("НаименованиеОрганаФК");
		ПараметрыОтчета.Добавить("ЛицевойСчет");
		
		Для каждого Параметр Из ПараметрыОтчета Цикл
			Если Не ЗначениеЗаполнено(ПараметрыЗаявления[Параметр]) Тогда
				ПараметрКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Параметр));
				Если ПараметрКомпоновщика.Использование Тогда
					ПараметрыЗаявления[Параметр] = ПараметрКомпоновщика.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ПараметрыЗаявления.БанкСчетНаимБанка) Тогда
			ПараметрКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Банк"));
			Если ПараметрКомпоновщика.Использование И ЗначениеЗаполнено(ПараметрКомпоновщика.Значение) Тогда
				РеквизитыБанка = ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(ПараметрКомпоновщика.Значение,"Наименование, Код, КоррСчет");
				ПараметрыЗаявления.БанкСчетНаимБанка = РеквизитыБанка.Наименование;
				ПараметрыЗаявления.БанкСчетБИКБанка = РеквизитыБанка.Код;
				ПараметрыЗаявления.БанкСчетКоррСчетБанка = РеквизитыБанка.КоррСчет;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Исполнитель"));
		Если ПараметрКомпоновщика.Использование И ЗначениеЗаполнено(ПараметрКомпоновщика.Значение) Тогда
			СведенияОФИОФизическихЛиц = РегламентированнаяОтчетность.ПолучитьФИОФизЛица(ПараметрКомпоновщика.Значение, ДатаПодписи);
			ПараметрыЗаявления.Исполнитель = СведенияОФИОФизическихЛиц.Фамилия + "" "" + СведенияОФИОФизическихЛиц.Имя + "" "" + СведенияОФИОФизическихЛиц.Отчество;
		КонецЕсли;
		
		ПараметрыРасчетовСФондом.Заполнить(ВыборкаНачальныйОстаток);
		ПараметрыРасчетовСФондом.Заполнить(ВыборкаКонечныйОстатокТекст);
		ПараметрыРасчетовСФондом.Заполнить(ВыборкаРасчетыСФондом);
		
		Если ОписаниеТаблиц.ПособияПоНетрудоспособности2017.Количество() > 0 Тогда
			ПараметрыРасходовПоСтрахованию.Заполнить(ОписаниеТаблиц.ПособияПоНетрудоспособности2017[0]);
		КонецЕсли;
		Если ОписаниеТаблиц.ПособияПоУходу2017.Количество() > 0 Тогда
			ПараметрыРасходовПоСтрахованию.Заполнить(ОписаниеТаблиц.ПособияПоУходу2017[0]);
		КонецЕсли;
		Если ОписаниеТаблиц.ПолучателейПособияПоУходу2017.Количество() > 0 Тогда
			ПараметрыРасходовПоСтрахованию.Заполнить(ОписаниеТаблиц.ПолучателейПособияПоУходу2017[0]);
		КонецЕсли;
		
		ПараметрыРасходовПоСтрахованию.ВсегоРасходов = ?(ЗначениеЗаполнено(ПараметрыРасходовПоСтрахованию.ВсегоРасходов), ПараметрыРасходовПоСтрахованию.ВсегоРасходов, 0) + ?(ЗначениеЗаполнено(ПараметрыРасходовПоСтрахованию.ВсегоПоУходу), ПараметрыРасходовПоСтрахованию.ВсегоПоУходу, 0);
		ПараметрыРасходовПоСтрахованию.ВсегоСверхНорм = ?(ЗначениеЗаполнено(ПараметрыРасходовПоСтрахованию.ВсегоСверхНорм), ПараметрыРасходовПоСтрахованию.ВсегоСверхНорм, 0) + ?(ЗначениеЗаполнено(ПараметрыРасходовПоСтрахованию.СверхНормПоУходу), ПараметрыРасходовПоСтрахованию.СверхНормПоУходу, 0);	
		ПараметрыРасчетовСФондом.ВсегоРасходов = ПараметрыРасходовПоСтрахованию.ВсегоРасходов;
		
		СредстваКВыделению = Макс(0, Мин(?(ЗначениеЗаполнено(ПараметрыРасчетовСФондом.П000010010003), ПараметрыРасчетовСФондом.П000010010003, 0),
			ПараметрыРасчетовСФондом.ВсегоРасходов - ?(ЗначениеЗаполнено(ПараметрыРасчетовСФондом.П000010005101), ПараметрыРасчетовСФондом.П000010005101, 0) - ?(ЗначениеЗаполнено(ПараметрыРасчетовСФондом.П000010006101), ПараметрыРасчетовСФондом.П000010006101, 0)));
		Если ЗначениеЗаполнено(СредстваКВыделению) Тогда
			ПараметрыЗаявления.СредстваКВыделению = ОбщегоНазначенияЗК.СформироватьСуммуПрописью(Окр(СредстваКВыделению, 0, РежимОкругления.Окр15как10), Константы.ВалютаРегламентированногоУчета.Получить());
		Иначе
			ПараметрыЗаявления.ПодписьРуб = "  руб."
		КонецЕсли;
			
		ДокументРезультат.Вывести(ОбластьЗаявление);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ДокументРезультат.Вывести(ОбластьСтраницаПриложения1);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ДокументРезультат.Вывести(ОбластьСтраницаПриложения2);
		
	КонецЦикла; 
	
	// -----------------------------------------------------------------------------
	// Параметры документа
	
	УстановитьПараметрыВыводаТабличногоДокумента(ДокументРезультат);
	
КонецПроцедуры

Процедура СформироватьПустографку(ДокументРезультат)
	
	Макет = ПолучитьМакет("ПФ_MXL_СправкаРасчет");
	
	ОбластьЗаявление = Макет.ПолучитьОбласть("Заявление");
	ОбластьЗаявление.Параметры.ПодписьРуб = "  руб.";
	ДокументРезультат.Вывести(ОбластьЗаявление);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("СтраницаПриложения1"));
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	ДокументРезультат.Вывести(Макет.ПолучитьОбласть("СтраницаПриложения2"));
	
	// Параметры документа
	УстановитьПараметрыВыводаТабличногоДокумента(ДокументРезультат);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыводаТабличногоДокумента(ДокументРезультат)
	ДокументРезультат.Автомасштаб 			= 	Истина;
	ДокументРезультат.ОриентацияСтраницы 	= 	ОриентацияСтраницы.Портрет;
	ДокументРезультат.ТолькоПросмотр		= 	Ложь;
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);
	
	// Считываение структуры настроек отчета
	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыводомЭлементРезультата(МакетКомпоновки, ПроцессорКомпоновки, ЭлементРезультата) Экспорт
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки, ПроцессорКомпоновки) Экспорт
	
	
КонецПроцедуры

Процедура ПриВыводеЗаголовкаОтчета(ОбластьЗаголовок) Экспорт
КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию,
	|МинимальныйПериодОтчета", 
	ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию,"Год");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;


