Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	//m.ionov@a-prof.ru 07.12.2014
	СтруктураВнешнихДанных = Новый Структура;
	СтруктураВнешнихДанных.Вставить("ТаблицаДанных", СформироватьТаблицуДанных());
	//----m.ionov@a-prof.ru---
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, СтруктураВнешнихДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
		
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции

Функция СформироватьТаблицуДанных()
	 
	// Обработка механизма разузлования
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//начало изменений Ожиганов 14.08.2015 избавимся от обращения к реквизитам документа 
	//мСхемаКомпоновки = ПолучитьМакет("СхемаКомпоновкиДанныхДляРасчета");
	мСхемаКомпоновки = ПолучитьМакет("СхемаКомпоновкиДанныхДляРасчетаНовая");
	//конец изменений 
	
	НовыеНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		
	Для i = 0 по ЭлементыОтбора.Количество()-1 Цикл
		
		ЭлементСтарый = ЭлементыОтбора.Получить(i);
		
		Если ТипЗнч(ЭлементСтарый) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭлементНовый = НовыеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
			ЭлементНовый.ВидСравнения   = ЭлементСтарый.ВидСравнения;
			ЭлементНовый.Использование  = ЭлементСтарый.Использование;
			ЭлементНовый.ЛевоеЗначение  = ЭлементСтарый.ЛевоеЗначение;
			ЭлементНовый.ПравоеЗначение = ЭлементСтарый.ПравоеЗначение;
			//ЭлементНовый.Родитель = ЭлементСтарый.Родитель;
		Иначе
			 ЭлементНовый = НовыеНастройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			 ЭлементНовый.Использование  = ЭлементСтарый.Использование;
			 ЭлементНовый.ТипГруппы = ЭлементСтарый.ТипГруппы;
		КонецЕсли;
		
	КонецЦикла; 
	
	//Доп. отбор
	//ТиповыеОтчеты.ДобавитьОтбор(НовыеНастройки.Отбор, "Заказ", СписокЗаказов, ВидСравненияКомпоновкиДанных.ВСписке);	
	
	//ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	//Если ПараметрНачалоПериода <> Неопределено Тогда
	//	
	//	мПараметрНачалоПериода = НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	//	Если мПараметрНачалоПериода <> Неопределено Тогда
	//		мПараметрНачалоПериода.Использование = Истина;
	//		мПараметрНачалоПериода.Значение = ПараметрНачалоПериода.Значение;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	//Если ПараметрКонецПериода <> Неопределено Тогда
	//			
	//	мПараметрКонецПериода = НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	//	Если мПараметрКонецПериода <> Неопределено Тогда
	//		мПараметрКонецПериода.Использование = Истина;
	//		мПараметрКонецПериода.Значение = ПараметрКонецПериода.Значение;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	ДатаЦен = КонецДня(ТекущаяДата());
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		
		ДатаЦен = КонецДня(ПараметрНачалоПериода.Значение);
		
		мПараметрНачалоПериода = НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если мПараметрНачалоПериода <> Неопределено Тогда
			мПараметрНачалоПериода.Использование = Истина;
			
			мПараметрНачалоПериода.Значение = ДатаЦен;
		Иначе
			мПараметрНачалоПериода = НовыеНастройки.ПараметрыДанных.Элементы.Добавить();
			мПараметрНачалоПериода.Параметр = Новый ПараметрКомпоновкиДанных("Период");
			мПараметрНачалоПериода.Использование = Истина;
			мПараметрНачалоПериода.Значение = ДатаЦен;
			
			//начало изменений Ожиганов 14.08.2015 немного оптимизируем  
			мНачалоПериода = НовыеНастройки.ПараметрыДанных.Элементы.Добавить();
			мНачалоПериода.Параметр = Новый ПараметрКомпоновкиДанных("НачалоПериода");
			мНачалоПериода.Значение = НачалоДня(ДатаЦен);
			мНачалоПериода.Использование = Истина;
			
			мКонецПериода = НовыеНастройки.ПараметрыДанных.Элементы.Добавить();
			мКонецПериода.Параметр = Новый ПараметрКомпоновкиДанных("КонецПериода");
			мКонецПериода.Значение = КонецДня(ДатаЦен);
			мКонецПериода.Использование = Истина;
			
			мРубли = Константы.ВалютаРегламентированногоУчета.Получить();
			
			мПарметрРубли = НовыеНастройки.ПараметрыДанных.Элементы.Добавить();
			мПарметрРубли.Параметр = Новый ПараметрКомпоновкиДанных("мРубли");
			мПарметрРубли.Значение = мРубли;
			мПарметрРубли.Использование = Истина;
			
			//конец изменений 
			
		КонецЕсли;
	КонецЕсли;
	  	
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, ЭтотОбъект.КомпоновщикНастроек.Настройки,,, тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, НовыеНастройки,,, тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , );
	
		
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	#Если Клиент Тогда
		Состояние("Расчет просроченной задолженности ");
	#КонецЕсли

	СпКонтрагентов = Результат.ВыгрузитьКолонку("Контрагент");
	
	//начало изменений Ожиганов 28.07.2015 длительное выполнение запросов, тех журнал. 
	//немного оптимизируем
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(СпКонтрагентов);
	//конец изменений 
	
	//{22.06.2015 Островерхий заявка №б/н 
	ТабДолгов = ПолучитьРасчитаннуюДебиторку(ДатаЦен,СпКонтрагентов);
	ТабДолгов.Колонки.СуммаВсего.Имя = "КонОст";
	ТабДолгов.Колонки.ПросроченныйДолг.Имя = "Просрочено";
	//ТабДолгов = ПКК_КредитныйКонтроль.ПолучитьПросроченнуюДебеторскуюЗадолженность_Таблица(СпКонтрагентов, ДатаЦен); 
	//22.06.2015 Островерхий} 
	
	ТабДолгов.Свернуть("Контрагент, ДнейПросрочено", "КонОст,Просрочено");
	ТабДолгов.Сортировать("ДнейПросрочено УБЫВ");
	
	мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	ВсегоКол = Результат.Количество();
	ОбработаноСтрок = 0;
	
	Сч = 0;
	Пока Сч < Результат.Количество() Цикл
		
		Строка = Результат[Сч];
		
		ОбработаноСтрок = ОбработаноСтрок + 1;
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			//начало изменений Ожиганов 14.08.2015 немного оптимизируем  
			Если ОбработаноСтрок % 50 = 0 Тогда
				Состояние("Расчет просроченной задолженности " + СокрЛП(ОбработаноСтрок) + "/" + СокрЛП(ВсегоКол));
			КонецЕсли;	
			//конец изменений 
		#КонецЕсли	
		
		Если Строка.Заказ = Неопределено Тогда
			//Это значит Итого
			Сч = Сч + 1;
			Продолжить;
		КонецЕсли;
		
		//СтрокиДолгов = ТабДолгов.НайтиСтроки(Новый Структура("ДоговорКонтрагента", Строка.ДоговорКонтрагента);
		//Долги = ТабДолгов.Скопировать(Новый Структура("ДоговорКонтрагента", Строка.ДоговорКонтрагента));
		//начало изменений Ожиганов 14.08.2015 немного оптимизируем  
		Долги = ТабДолгов.Скопировать(Новый Структура("Контрагент", Строка.Контрагент));
		//конец изменений 
		//Долги.Сортировать("ДнейПросрочено УБЫВ");
		
		
		//начало изменений Ожиганов 14.08.2015 немного оптимизируем  
		Строка.ПросроченнаяЗадолженность = Долги.Итог("Просрочено");
		Строка.Задолженность = Долги.Итог("КонОст");
		Если Долги.Количество() > 0 Тогда
			Строка.ДнейПросрочки = Долги[0].ДнейПросрочено;
		Иначе
			Строка.ДнейПросрочки = 0;
		КонецЕсли;
		//конец изменений 
		//Строка.СуммаЗаказаРуб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаЗаказа, Строка.ВалютаЗаказа, мВалютаУпрУчета, Строка.Заказ.КурсВзаиморасчетов, 1, Строка.Заказ.КратностьВзаиморасчетов, 1); 
				
	    Сч = Сч + 1;
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции
#КонецЕсли

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		ПараметрКонецПериода.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДоработатьКомпоновщикПередВыводом()

Функция ПолучитьРасчитаннуюДебиторку(НаДату,СписокКонтрагентов)
	
	//начало изменений Ожиганов 28.07.2015 длительное выполнение запросов, тех журнал. 
	ТаблИтоговаяРазвернуто = Ложь;
	//конец изменений 
	
	
	ОписЧисла = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	ОписДата  = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблИтого = Новый ТаблицаЗначений;
	ТаблИтого.Колонки.Добавить("Дата",ОписДата);
	ТаблИтого.Колонки.Добавить("ДатаОплаты",ОписДата);
	ТаблИтого.Колонки.Добавить("ДнейПросрочено",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	ТаблИтого.Колонки.Добавить("Отсрочка",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	
	ТаблИтого.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблИтого.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблИтого.Колонки.Добавить("ДоговорКонтрагента",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблИтого.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблИтого.Колонки.Добавить("Регистратор",Документы.ТипВсеСсылки());

	
	//ТаблИтого.Колонки.Добавить("НачОст",ОписЧисла);
	//ТаблИтого.Колонки.Добавить("Приход",ОписЧисла);
	//ТаблИтого.Колонки.Добавить("Расход",ОписЧисла);
	//ТаблИтого.Колонки.Добавить("КонОст",ОписЧисла);
	//ТаблИтого.Колонки.Добавить("Погашено",ОписЧисла);
	//ТаблИтого.Колонки.Добавить("Просрочено",ОписЧисла);
	
	ТаблИтого.Колонки.Добавить("СуммаВсего",ОписЧисла);
	ТаблИтого.Колонки.Добавить("НеПросроченныйДолг",ОписЧисла);
	ТаблИтого.Колонки.Добавить("ПросроченныйДолг",ОписЧисла);
	
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаВсего", "Итого задолж-ть",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	//УниверсальныйОтчет.ДобавитьПоказатель("НеПросроченныйДолг", "Не просроч. задолж-ть",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	//УниверсальныйОтчет.ДобавитьПоказатель("ПросроченныйДолг", "Просроч. задолж-ть",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	//УниверсальныйОтчет.ДобавитьПоказатель("ПросроченныйДолгПоИнтервалам", "Просроч. задолж-ть по интерв.",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	
	
	//ТаблИнтерв = Новый ТаблицаЗначений;
	
	//ТаблИнтерв = Неопределено;
	//ОбъектИнт  = Интервал.ПолучитьОбъект();
	//ТаблИнтерв = ОбъектИнт.ТабличнаяЧасть.Выгрузить();
	//
	//ТаблИнтерв.Колонки.Добавить("КолВоДней",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	//ТаблИнтерв.Колонки.Добавить("БылоЧтото",Новый ОписаниеТипов("Булево"));
	//ТаблИнтерв.Колонки.Добавить("ИмяКолонки");
	//
	////ТаблИнтерв.ВыбратьСтроку();
	//
	////Для Каждого ТекСтрока Из ТаблИнтерв Цикл
	//Для к = 0  По ТаблИнтерв.Количество()-1 Цикл
	//	ТаблИнтерв[к].ИмяКолонки = "ПросроченныйДолг_"+(к+1);
	//	ТаблИтого.Колонки.Добавить(ТаблИнтерв[к].ИмяКолонки,ОписЧисла);
	//	ТаблИнтерв[к].БылоЧтото	 = Ложь;
	//КонецЦикла;	
	
	//возврат ТаблИтого;
	//КонецИнтервала
	//НачалоИнтервала
	//Подпись
	//ТаблИнтерв
	
	
	Дата1 =  КонецДня(НаДату);//НачалоМесяца(УниверсальныйОтчет.ДатаНач);
	Дата2 =  КонецДня(НаДату);//КонецМесяца(УниверсальныйОтчет.ДатаКон);
	
	ТекВремя = ТекущаяДата();
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	//начало изменений Ожиганов 25.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	//ПостроительЗапроса.Текст = ПолучитьТекстЗапроса();
	ПостроительЗапроса.Текст = ПРГ_ДопФункцииКлиентСервер.ПолучитьТекстЗапросаДляРасчетаПДЗ();
	//конец изменений 
	
	ПостроительЗапроса.Параметры.Вставить("Дата1",Дата1);
	ПостроительЗапроса.Параметры.Вставить("Дата2",Дата2);
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков = Новый Массив;
	МассивДоков .Добавить(Неопределено);
	МассивДоков .Добавить(Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков .Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	МассивДоков .Добавить(Документы.ВводНачальныхОстатковПоВзаиморасчетам.ПустаяСсылка());
	
	ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",МассивДоков );
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ПостроительЗапроса.Параметры.Вставить("ВидДоговора",МассивВидовДоговоров);
	
	
	ТекОрганизация 		   = Неопределено;
	ТекКонтрагент  		   = Неопределено;
	ТекДоговорКонтрагента  = Неопределено;
	ТекВалюта			   = Неопределено;
	
	//Для каждого ТекОтбор ИЗ УниверсальныйОтчет.ПостроительОтчета.Отбор Цикл
	//	Если ТекОтбор.Использование Тогда
	//		Попытка
	//			НашОтбор = ПостроительЗапроса.Отбор.Добавить(ТекОтбор.ПутьКданным,ТекОтбор.Имя,ТекОтбор.Представление);
	//			НашОтбор.Использование  = ТекОтбор.Использование;
	//			НашОтбор.ВидСравнения   = ТекОтбор.ВидСравнения;
	//			Если ТипЗнч(ТекОтбор.Значение)  = Тип("СписокЗначений") Тогда
	//				Список = Новый СписокЗначений;
	//				Список.ЗагрузитьЗначения(ТекОтбор.Значение.ВыгрузитьЗначения());
	//				НашОтбор.Значение       = Список;
	//			Иначе
	//				НашОтбор.Значение       = ТекОтбор.Значение;
	//			КонецЕсли;	
	//		 Исключение
	//		 КонецПопытки;	
	//	КонецЕсли;	
	//КонецЦикла;	
	
	НашОтбор = ПостроительЗапроса.Отбор.Добавить("Контрагент","Контрагент","Контрагент");
	НашОтбор.Использование  = Истина;
	НашОтбор.ВидСравнения   = ВидСравнения.ВСписке;
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(СписокКонтрагентов);
					
	НашОтбор.Значение       = Список;
//	ПостроительЗапроса.Отбор.Добавить();
	
	ПостроительЗапроса.Выполнить();	
	РезЗапроса 			   = ПостроительЗапроса.Результат;
	ДатаДляРасчетаПроср    = НачалоДня(Дата2);
	//Если ВыводитьВремя Тогда
	//	Сообщить("Получен результат" + (ТекущаяДата()-ТекВремя));
	//КонецЕсли;	
	
	ВыборкаДетальная 	   = РезЗапроса.Выбрать();
	//Если ВыводитьВремя Тогда
	//	Сообщить("Полученв Выборка" + (ТекущаяДата()-ТекВремя));
	//КонецЕсли;	
	
	
	Пока ВыборкаДетальная.Следующий() Цикл
		  ОбработкаПрерыванияПользователя();
		  ИзмГруппировка = Ложь;
		  Если ТекОрганизация <>ВыборкаДетальная.Организация Тогда
			  ТекОрганизация  = ВыборкаДетальная.Организация;
			  ИзмГруппировка = Истина;
		  КонецЕсли;	
		  
		  Если ТекКонтрагент <>ВыборкаДетальная.Контрагент Тогда
			  ТекКонтрагент  = ВыборкаДетальная.Контрагент;
			  ИзмГруппировка = Истина;
		  КонецЕсли;	
		  
		  Если ТекДоговорКонтрагента <> ВыборкаДетальная.ДоговорКонтрагента Тогда
			  ТекДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
			  ИзмГруппировка 		 = Истина;
		  КонецЕсли;	
		  
		  //Если ТекВалюта <> ВыборкаДетальная.Валюта Тогда
		  //	ТекВалюта       = ВыборкаДетальная.Валюта;
		  //	ИзмГруппировка = Истина;
		  //КонецЕсли;	
		  
		  Если ИзмГруппировка Тогда
			  ИтогКонОст 	   	= ВыборкаДетальная.ПриходКон - ВыборкаДетальная.РасходКон;
			  
			  ИтогоРасход  	    = ВыборкаДетальная.РасходКон;
			  ИтогоПриход  	    = ВыборкаДетальная.ПриходКон;
			  
			  ИтогоРасходНач    = ВыборкаДетальная.РасходНач;
			  ИтогоПриходНач    = ВыборкаДетальная.ПриходНач;
			  
			  ИтогНачОст 		= ИтогоПриходНач - ИтогоРасходНач;
		  
			  ЗнакКонОст  	    = ?(ИтогКонОст > 0,1,-1);
			  ЗнакНачОст  	    = ?(ИтогНачОст > 0,1,-1);
			  ИзмГруппировка 	= Ложь;
			  Если Не ТаблИтоговаяРазвернуто Тогда
				   ТекСтрока =ТаблИтого.Добавить();
			  КонецЕсли;
		  Иначе	  
		  КонецЕсли; 
		  
		  КонОст = 0;
		  НачОст = 0;
		  Приход = 0;
		  Расход = 0;
			
		  Если ЗнакКонОст = 1 Тогда
			   КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
			   ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
		  Иначе // знак -1
			   КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
			   ИтогоПриход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
		  КонецЕсли;	  
		   
		  Если ЗнакНачОст = 1 Тогда
		   		НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
		   		ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
		  Иначе	
		   		НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
		   		ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
		  КонецЕсли;
		   
		  Если ВыборкаДетальная.Дата < Дата1 Тогда
			   Приход = 0;
			   Расход = 0;
		  ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
			   Приход = ВыборкаДетальная.Приход;
			   Расход = ВыборкаДетальная.Расход;
			   НачОст = 0;
		  КонецЕсли;	   
		   
		  Если  (КонОст = 0) Тогда  //и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
			   продолжить;
		  КонецЕсли;  
		  
		  ДатаОплаты  = '00010101';    //
		  Если КонОст > 0 Тогда //Приход > 0 или НачОст > 0 или 
			  ДатаОплаты   =  ВыборкаДетальная.ДатаОплаты;
			  Если ДатаОплаты  = '00010101' Тогда
				  ДатаОплаты = ВыборкаДетальная.Дата;
			  КонецЕсли;	  
			  Погашено = НачОст+Приход-КонОст;
		  КонецЕсли; 
		  
		  ДнейПросрочено = 0;
		  Если ДатаОплаты <> '00010101' и ДатаОплаты < ДатаДляРасчетаПроср и КонОст >0 Тогда
			  ДнейПросрочено = (ДатаДляРасчетаПроср - НачалоДня(ДатаОплаты))/(3600*24); 
		  КонецЕсли;
		  
		  //начало изменений Ожиганов 28.04.2015 37874  
		  РазницаВднях = 0;
		  //конец изменений 
		  Если КонОст > 0 Тогда
		    	РазницаВднях  = (ДатаДляРасчетаПроср - НачалоДня(ДатаОплаты))/(3600*24); 
		  КонецЕсли;	
		
		  Если ТаблИтоговаяРазвернуто Тогда
		  		НоваяСтрока 	   				  = ТаблИтого.Добавить();
				НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
				НоваяСтрока.ДатаОплаты		  	  = ДатаОплаты; //?(Приход>0 или НачОст>0,ВыборкаДетальная.ДатаОплаты,'00010101');
				НоваяСтрока.Регистратор 		  = ВыборкаДетальная.Регистратор;
				НоваяСтрока.ДнейПросрочено	  	  = ДнейПросрочено;
		  Иначе
				НоваяСтрока 					  = ТекСтрока;
				//начало изменений Ожиганов 28.07.2015 длительное выполнение запросов, тех журнал. 
				НоваяСтрока.ДнейПросрочено        = Макс(НоваяСтрока.ДнейПросрочено,ДнейПросрочено);
				//конец изменений 
		  КонецЕсли;
		  
		  НоваяСтрока.Организация		  		 = ВыборкаДетальная.Организация;
		  НоваяСтрока.Контрагент		  		 = ВыборкаДетальная.Контрагент;
		  НоваяСтрока.ДоговорКонтрагента  		 = ВыборкаДетальная.ДоговорКонтрагента;
		  
		  НоваяСтрока.СуммаВсего		  		 = НоваяСтрока.СуммаВсего + КонОст;
		  
		  Если ДнейПросрочено > 0 и КонОст > 0  Тогда
			  НоваяСтрока.ПросроченныйДолг 		 = НоваяСтрока.ПросроченныйДолг   + КонОст;
		  Иначе	  
			  НоваяСтрока.НеПросроченныйДолг	 = НоваяСтрока.НеПросроченныйДолг + КонОст;
		  конецЕсли; 
		  
		  //m.ionov@a-prof.ru 17.02.2015
		  Если ДатаОплаты <> '00010101' Тогда
		  	НоваяСтрока.Отсрочка = (НачалоДня(ДатаОплаты) - НачалоДня(ВыборкаДетальная.Дата))/(3600*24); 
		  Иначе
		    НоваяСтрока.Отсрочка = 0;
		  КонецЕсли;
		
		  //Для к = 0 По 
		 // Если КонОст > 0 Тогда
		 //	 Для к = 0  По ТаблИнтерв.Количество()-1 Цикл
		 //   	  Если ТаблИнтерв[к].НачалоИнтервала = 0 и ДнейПросрочено=0 Тогда
		 //   		  Если  РазницаВднях = 0 Тогда
		 //   			  НоваяСтрока[ТаблИнтерв[к].ИмяКолонки] 	 = НоваяСтрока[ТаблИнтерв[к].ИмяКолонки] + КонОст;
		 //   			  ТаблИнтерв[к].БылоЧтото	 = Истина;
		 //   		  КонецЕсли;	  
		 //   		  прервать;
		 //   	  //начало изменений Ожиганов 28.04.2015 37874  
		 //   	  ИначеЕсли РазницаВднях < 0 и  ТаблИнтерв[к].НачалоИнтервала < 0 Тогда
		 //   		  Если РазницаВднях <= ТаблИнтерв[к].НачалоИнтервала  Тогда
		 //   			  НоваяСтрока[ТаблИнтерв[к].ИмяКолонки] 	 = НоваяСтрока[ТаблИнтерв[к].ИмяКолонки] + КонОст;
		 //   			  ТаблИнтерв[к].БылоЧтото	 = Истина;
		 //   			  прервать;
		 //   		  КонецЕсли;					  
		 //   	  //конец изменений 
		 //   	  ИначеЕсли ДнейПросрочено <= ТаблИнтерв[к].НачалоИнтервала и ДнейПросрочено>0 Тогда
		 //   		  НоваяСтрока[ТаблИнтерв[к].ИмяКолонки] 	 = НоваяСтрока[ТаблИнтерв[к].ИмяКолонки] + КонОст;
		 //   		  ТаблИнтерв[к].БылоЧтото	 = Истина;
		 //   		  прервать;
		 //   	  КонецЕсли;	  
		 //	 КонецЦикла;	
		 //КонецЕслИ;	  
		  
	  КонецЦикла; 
	 //Если ВыводитьВремя Тогда
	 //	  Сообщить("Обсчет дебиторки "+(ТекущаяДата()-ТекВремя));
	 //КонецЕсли;	
	 возврат ТаблИтого;
КонецФункции
 
Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
