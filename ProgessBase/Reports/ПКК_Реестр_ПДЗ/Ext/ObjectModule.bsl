Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	СтруктураВнешнихДанных = Новый Структура;
	СтруктураВнешнихДанных.Вставить("ТаблицаПДЗ", СформируемТаблица_ТаблицаПДЗ());
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета,СтруктураВнешнихДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
		
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Функция СформируемТаблица_ТаблицаПДЗ()
	
	// Обработка механизма разузлования
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	мСхемаКомпоновки = ПолучитьМакет("СхемаКомпоновкиДанныхДляРасчета");
	
	НовыеНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		
	Для i = 0 по ЭлементыОтбора.Количество()-1 Цикл
		
		ЭлементСтарый = ЭлементыОтбора.Получить(i);
		
		ЭлементНовый = НовыеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементНовый.ВидСравнения   = ЭлементСтарый.ВидСравнения;
		ЭлементНовый.Использование  = ЭлементСтарый.Использование;
		ЭлементНовый.ЛевоеЗначение  = ЭлементСтарый.ЛевоеЗначение;
		ЭлементНовый.ПравоеЗначение = ЭлементСтарый.ПравоеЗначение;
		
	КонецЦикла; 

	
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		
		мПараметрНачалоПериода = НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		Если мПараметрНачалоПериода <> Неопределено Тогда
			мПараметрНачалоПериода.Использование = Истина;
			мПараметрНачалоПериода.Значение = ПараметрНачалоПериода.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
				
		мПараметрКонецПериода = НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		Если мПараметрКонецПериода <> Неопределено Тогда
			мПараметрКонецПериода.Использование = Истина;
			мПараметрКонецПериода.Значение = ПараметрКонецПериода.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, ЭтотОбъект.КомпоновщикНастроек.Настройки,,, тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, НовыеНастройки,,, тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , );
	
		
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	СписокКонтрагентов = Результат.ВыгрузитьКолонку("Контрагент");

	
	//СписокКонтрагентов = Новый СписокЗначений;
	//Для каждого стрНастройки из КомпоновщикНастроек.Настройки.Отбор.Элементы цикл
	//	Если СокрЛП(стрНастройки.ЛевоеЗначение) = "Контрагент" и стрНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно тогда
	//		 СписокКонтрагентов.Добавить(стрНастройки.ПравоеЗначение);
	//	ИначеЕсли СокрЛП(стрНастройки.ЛевоеЗначение) = "Контрагент" и стрНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке тогда
	//		СписокКонтрагентов = стрНастройки.ПравоеЗначение;
	//	КонецЕсли;
	//КонецЦикла;
	
	//Результат = новый ТаблицаЗначений;
	//
	//Если СписокКонтрагентов.Количество() = 0 Тогда
	//	ЗапросК = Новый Запрос;
	//	ЗапросК.Текст = 
	//		"ВЫБРАТЬ
	//		|	Контрагенты.Ссылка
	//		|ИЗ
	//		|	Справочник.Контрагенты КАК Контрагенты
	//		|ГДЕ
	//		|	Контрагенты.ЭтоГруппа = Ложь
	//		|	И Контрагенты.Покупатель = Истина
	//		|	И Контрагенты.ПометкаУдаления = Ложь";
	//	РезультатК = ЗапросК.Выполнить();
	//	ВыборкаДетальныеЗаписиК = РезультатК.Выбрать();
	//	Пока ВыборкаДетальныеЗаписиК.Следующий() Цикл
	//		СписокКонтрагентов.Добавить(ВыборкаДетальныеЗаписиК.Ссылка);	
	//	КонецЦикла;
	//КонецЕсли;
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Контрагент");
	Результат.Колонки.Добавить("Сумма");
	Результат.Колонки.Добавить("Дни");
	Результат.Колонки.Добавить("КодКонтрагента");
	Результат.Колонки.Добавить("Команда");
	Результат.Колонки.Добавить("ШтрафНач");
	Результат.Колонки.Добавить("ПроцентПДЗ");
	Результат.Колонки.Добавить("ШтрафКон");
	
	ЗапросН = Новый Запрос;
	ЗапросН.Текст = 
		"ВЫБРАТЬ
		|	ПКК_НастройкаПодсистемыКредитногоКонтроляСрезПоследних.НастройкаНачисленияШтрафов,
		|	ПКК_НастройкаПодсистемыКредитногоКонтроляСрезПоследних.МинимальнаяСуммаПросроченнойЗадолженности,
		|	ПКК_НастройкаПодсистемыКредитногоКонтроляСрезПоследних.МинимальноеКолВоДнейПросроченнойЗадолженности,
		|	ПКК_НастройкаПодсистемыКредитногоКонтроляСрезПоследних.ИнтервалДЗ
		|ИЗ
		|	РегистрСведений.ПКК_НастройкаПодсистемыКредитногоКонтроля.СрезПоследних(&Дата, ) КАК ПКК_НастройкаПодсистемыКредитногоКонтроляСрезПоследних";

	ЗапросН.УстановитьПараметр("Дата", ПараметрКонецПериода.Значение);

	РезультатН = ЗапросН.Выполнить();

	ВыборкаДетальныеЗаписиН = РезультатН.Выбрать();

	МинимальнаяСуммаПросроченнойЗадолженности = 0;
	МинДни = 0;
	
	Пока ВыборкаДетальныеЗаписиН.Следующий() Цикл
		ШтрафыСпр = ВыборкаДетальныеЗаписиН.НастройкаНачисленияШтрафов;	
		МинимальнаяСуммаПросроченнойЗадолженности = ВыборкаДетальныеЗаписиН.МинимальнаяСуммаПросроченнойЗадолженности;	
	КонецЦикла;
	
	Если ШтрафыСпр = неопределено или ШтрафыСпр.ТабличнаяЧасть.Количество() = 0 тогда
		ОбщегоНАзначения.СообщитьОбОшибке("Не найдена настройка штрафов!");
	иначе   
		МинДни = ШтрафыСпр.ТабличнаяЧасть[0].НачалоИнтервала;
	КонецЕсли;
	
	
	Для каждого стрКонтрагент из СписокКонтрагентов цикл
		
		Дней = 0;
		Сумма = 0;
		Штраф = 0;
		ШтрафКон = 0;
		ПроцентПДЗ = 0;
		ДнейКон = 0;
		ДнейДляРасчетаНачШтрафа = 0;
        СуммаПросрочкиДляРасчетаНачШтрафа = 0;

		//{15.05.2015 Островерхий заявка №б/н 
		//ТаблДвиженияПоКонтрагенту = ЗадолженностьВПериоде(стрКонтрагент,ПараметрНачалоПериода.Значение,ПараметрКонецПериода.Значение);
		ТаблДвиженияПоКонтрагенту = ЗадолженностьВПериоде(стрКонтрагент,'00010101',ПараметрКонецПериода.Значение);
		//15.05.2015 Островерхий} 
		
		Для каждого стрДвиж из ТаблДвиженияПоКонтрагенту цикл;
			
			тПериод = Макс(стрДвиж.ДатаОплатыПлан,?(стрДвиж.ДатаОплатыФакт=Неопределено,'00010101',стрДвиж.ДатаОплатыФакт));
			
			Если стрДвиж.СуммаПросроченногоДолгаПоДокументу > МинимальнаяСуммаПросроченнойЗадолженности
				И тПериод >= ПараметрНачалоПериода.Значение И тПериод <= ПараметрКонецПериода.Значение Тогда
				ДнейДляРасчетаНачШтрафа = Макс(стрДвиж.ДнейПросрокОплаты,ДнейДляРасчетаНачШтрафа);
				СуммаПросрочкиДляРасчетаНачШтрафа = стрДвиж.СуммаПросроченногоДолгаПоДокументу + СуммаПросрочкиДляРасчетаНачШтрафа;
			КонецЕсли;
			Если стрДвиж.СуммаПросроченногоДолга > 0 
				Тогда
				Дней = Макс(стрДвиж.ДнейПросрокОплаты,Дней);
				Сумма = стрДвиж.СуммаПросроченногоДолга + Сумма;
			КонецЕсли;
		КонецЦикла;
		
		Если ШтрафыСпр <> неопределено
			И ДнейДляРасчетаНачШтрафа >= МинДни И СуммаПросрочкиДляРасчетаНачШтрафа >= МинимальнаяСуммаПросроченнойЗадолженности тогда
			Для каждого стрДн из ШтрафыСпр.ТабличнаяЧасть цикл
				Если ДнейДляРасчетаНачШтрафа >= стрДн.КонецИнтервала и ДнейДляРасчетаНачШтрафа <= стрДн.НачалоИнтервала тогда
					 Штраф = стрДн.ПроцентШтрафа;
				ИначеЕсли ДнейДляРасчетаНачШтрафа >= стрДн.КонецИнтервала тогда
					 Штраф = стрДн.ПроцентШтрафа;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблДвиженияПоКонтрагенту.Итог("СуммаДолга") > 0 тогда
			ПроцентПДЗ =  ТаблДвиженияПоКонтрагенту.Итог("СуммаПросроченногоДолга")/ТаблДвиженияПоКонтрагенту.Итог("СуммаДолга")*100;
		иначе
			ПроцентПДЗ = 0;
		КонецЕсли;
		
		Если Сумма > 0 тогда
			ШтрафКон = 100;
		Иначе
			ШтрафКон = Штраф;
		КонецЕсли;
		
		//Если ТаблДвиженияПоКонтрагенту.Итог("СуммаПросроченногоДолга") > 0
		//	И Дней > 0 Тогда 		
		//	
			стрРезультат = Результат.Добавить();
			стрРезультат.Контрагент = стрКонтрагент;
			стрРезультат.Команда =   стрКонтрагент.НСИ_ТорговаяКоманда;
			стрРезультат.КодКонтрагента = стрКонтрагент.Код;
			
			//стрРезультат.Сумма = Сумма/1000;
			стрРезультат.Сумма = Сумма/1000;
			
			стрРезультат.Дни = Дней;
			//стрРезультат.Дни = ДнейКон;
			
			стрРезультат.ШтрафНач = Штраф;
			стрРезультат.ПроцентПДЗ =  ПроцентПДЗ;
			стрРезультат.ШтрафКон = ШтрафКон;
		//
		//КонецЕсли; 
		//
		////КонецЕсли;
		//
		////17.04.2015 Островерхий} 
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции

#КонецЕсли

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		ПараметрКонецПериода.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДоработатьКомпоновщикПередВыводом()

Функция ПолучитьПросроченнуюДебеторскуюЗадолженность_Таблица(СписокКонтрагентов, Дата, ВВалютеВзаиморасчетов = Ложь, ДатаНачала = Неопределено) Экспорт
	
	Перем ТаблИтого;
	ТаблИтого = Новый ТаблицаЗначений;
	ТаблИтого.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	//++ Spl_Апроф 18.11.2014 (k.russkih@a-prof.ru)
	ТаблИтого.Колонки.Добавить("НомерДокумента",Новый ОписаниеТипов("Строка"));
	//ТаблИтого.Колонки.Добавить("АдресПоставки", Новый ОписаниеТипов("СправочникСсылка.АдресаПоставки"));
	//-- Spl_Апроф
	ТаблИтого.Колонки.Добавить("ДатаОплаты",Новый ОписаниеТипов("Дата"));
	ТаблИтого.Колонки.Добавить("Регистратор",Документы.ТипВсеСсылки());
	ТаблИтого.Колонки.Добавить("ДнейПросрочено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	ТаблИтого.Колонки.Добавить("Организация");
	ТаблИтого.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблИтого.Колонки.Добавить("ДоговорКонтрагента",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблИтого.Колонки.Добавить("Просрочено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	ТаблИтого.Колонки.Добавить("НачОст", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Приход", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Расход", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("КонОст", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблИтого.Колонки.Добавить("Погашено", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
			
	ПостроительЗапроса = Новый ПостроительЗапроса;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА 0
	               |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |		КОНЕЦ) КАК ПриходКон,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА 0
	               |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |		КОНЕЦ) КАК РасходКон,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ПриходНач,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК РасходНач,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Приход,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА 0
	               |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |								КОНЕЦ
	               |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |							ТОГДА ВЫБОР
	               |									КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |										ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |									ИНАЧЕ 0
	               |								КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Расход
	               |ПОМЕСТИТЬ ТаблКонтр
	               |{ВЫБРАТЬ
	               |	Организация.*,
	               |	ДоговорКонтрагента.*,
	               |	Контрагент.*}
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	               |ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	               |	И ВзаиморасчетыСКонтрагентами.Активность
	               |	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
	               |	И ВзаиморасчетыСКонтрагентами.Контрагент В(&Контрагент)
	               |{ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент.*,
	               |	ВзаиморасчетыСКонтрагентами.Организация.*,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВзаиморасчетыСКонтрагентами.Организация,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент
	               |
	               |ИМЕЮЩИЕ
	               |	(СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА 0
	               |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						КОНЕЦ
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |							ИНАЧЕ 0
	               |						КОНЕЦ
	               |			КОНЕЦ - ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА 0
	               |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						КОНЕЦ
	               |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |								ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |							ИНАЧЕ 0
	               |						КОНЕЦ
	               |			КОНЕЦ) <> 0
	               |		ИЛИ СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ - ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) <> 0
	               |		ИЛИ СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) <> 0
	               |		ИЛИ СУММА(ВЫБОР
	               |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	               |					ТОГДА ВЫБОР
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА 0
	               |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |									КОНЕЦ
	               |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |								ТОГДА ВЫБОР
	               |										КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |											ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |										ИНАЧЕ 0
	               |									КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ 0
	               |			КОНЕЦ) <> 0)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Организация,
	               |	ДоговорКонтрагента,
	               |	Контрагент
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	               |	КОНЕЦ КАК Дата,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	               |	КОНЕЦ КАК Регистратор,
				   //|	ВЫБОР
				   //|		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   //|			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
				   //|		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
				   //|			ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
				   //|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
				   //|	КОНЕЦ КАК ДатаОплаты,
				   |	ВЫБОР
				   |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
				   |			ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
				   |			ТОГДА КорректировкаРеализации.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
				   |			ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
				   |			ТОГДА КорректировкаДолга.АП_ДатаОплаты
				   |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
				   |	КОНЕЦ КАК ДатаОплаты,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Приход,
	               |	СУММА(ВЫБОР
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% > 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов%
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	               |				ТОГДА ВЫБОР
	               |						КОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% < 0
	               |							ТОГДА ВзаиморасчетыСКонтрагентами.%СуммаВзаиморасчетов% * -1
	               |						ИНАЧЕ 0
	               |					КОНЕЦ
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК Расход,
	               |	Минимум(ТаблКонтр.ПриходНач) КАК ПриходНач,
	               |	Минимум(ТаблКонтр.РасходНач) КАК РасходНач,
	               |	Минимум(ТаблКонтр.ПриходКон) КАК ПриходКон,
	               |	Минимум(ТаблКонтр.РасходКон) КАК РасходКон,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения.Номер
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор.Номер
	               |	КОНЕЦ КАК НомерДокумента,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор.Грузополучатель
	               |	КОНЕЦ КАК АдресПоставки
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				   |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = РеализацияТоваровУслуг.Ссылка
				   |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
				   |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаРеализации.Ссылка
				   |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
				   |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаЗаписейРегистров.Ссылка
				   |	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга КАК КорректировкаДолга
				   |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаДолга.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
	               |		ПО ВзаиморасчетыСКонтрагентами.Организация = ТаблКонтр.Организация
	               |			И ВзаиморасчетыСКонтрагентами.Контрагент = ТаблКонтр.Контрагент
	               |			И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
	               |ГДЕ
	               |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	               |	И ВзаиморасчетыСКонтрагентами.Активность
	               |	И ВзаиморасчетыСКонтрагентами.Контрагент В(&Контрагент)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВзаиморасчетыСКонтрагентами.Организация,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	               |	ВЫБОР
	               |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	               |	КОНЕЦ,
				   |	ВЫБОР
				   |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
				   |			ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
				   |			ТОГДА КорректировкаРеализации.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
				   |			ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
				   |		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
				   |			ТОГДА КорректировкаДолга.АП_ДатаОплаты
				   |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
				   |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения.Номер
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор.Номер
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	               |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	               |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор.Грузополучатель
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организация,
	               |	Контрагент,
	               |	ДоговорКонтрагента,
				   |	Дата,
	               |	ДатаОплаты,
	               |	Регистратор";
				   
				   
	Если ВВалютеВзаиморасчетов Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаВзаиморасчетов");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%СуммаВзаиморасчетов%","СуммаУпр");
	КонецЕсли;
			   
	Если ДатаНачала = Неопределено Тогда
		Дата1 = НачалоГода(ТекущаяДата());
	Иначе
		Дата1 = НачалоДня(ДатаНачала);
	КонецЕсли;
	Дата2 = КонецДня(Дата);
	
	ПостроительЗапроса.Параметры.Вставить("Дата1", Дата1);
	ПостроительЗапроса.Параметры.Вставить("Дата2", Дата2);
	ПостроительЗапроса.Параметры.Вставить("Контрагент", СписокКонтрагентов);
	//начало изменений
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент", Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков = Новый Массив;
	МассивДоков .Добавить(Неопределено);
	МассивДоков .Добавить(Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков .Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	МассивДоков .Добавить(Документы.ВводНачальныхОстатковПоВзаиморасчетам.ПустаяСсылка());
	ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",МассивДоков );
	//конец изменений 
	
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ПостроительЗапроса.Параметры.Вставить("ВидДоговора",МассивВидовДоговоров);
	
	ТекОрганизация 		   = Неопределено;
	ТекКонтрагент  		   = Неопределено;
	ТекДоговорКонтрагента  = Неопределено;
	ТекВалюта			   = Неопределено;
	ТекСтрока			   =  Неопределено;
	ТекВремя               = ТекущаяДата();
	
	ТаблИтоговаяРазвернуто = Истина;
	ВыводитьВремя = Ложь;
	ДатаДляРасчетаПроср    = НачалоДня(Дата2);
	
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.Выполнить();	
	РезЗапроса	 = ПостроительЗапроса.Результат;
	ВыборкаДетальная 	   = РезЗапроса.Выбрать();
	
	Пока ВыборкаДетальная.Следующий() Цикл
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		ИзмГруппировка = Ложь;
		Если ТекОрганизация <>ВыборкаДетальная.Организация Тогда
			ТекОрганизация  = ВыборкаДетальная.Организация;
			ИзмГруппировка = Истина;
		КонецЕсли;	
		
		Если ТекКонтрагент <>ВыборкаДетальная.Контрагент Тогда
			ТекКонтрагент  = ВыборкаДетальная.Контрагент;
			ИзмГруппировка = Истина;
		КонецЕсли;	
		
		Если ТекДоговорКонтрагента <> ВыборкаДетальная.ДоговорКонтрагента Тогда
			ТекДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
			ИзмГруппировка 		 = Истина;
		КонецЕсли;	
		
		//Если ТекВалюта <> ВыборкаДетальная.Валюта Тогда
		//	ТекВалюта       = ВыборкаДетальная.Валюта;
		//	ИзмГруппировка = Истина;
		//КонецЕсли;	
		
		Если ИзмГруппировка Тогда
			ИтогКонОст 	   	   = ВыборкаДетальная.ПриходКон - ВыборкаДетальная.РасходКон;
			
			ИтогоРасход  	   = ВыборкаДетальная.РасходКон;
			ИтогоПриход  	   = ВыборкаДетальная.ПриходКон;
			
			ИтогоРасходНач   = ВыборкаДетальная.РасходНач;
			ИтогоПриходНач   = ВыборкаДетальная.ПриходНач;
			
			ИтогНачОст 		   = ИтогоПриходНач - ИтогоРасходНач;
			
			ЗнакКонОст  	   = ?(ИтогКонОст > 0,1,-1);
			ЗнакНачОст  	   = ?(ИтогНачОст > 0,1,-1);
			ИзмГруппировка 	= Ложь;
			Если Не ТаблИтоговаяРазвернуто Тогда
				ТекСтрока = ТаблИтого.Добавить();
			КонецЕсли;
		КонецЕсли; 
		
		КонОст = 0;
		НачОст = 0;
		Приход = 0;
		Расход = 0;
		
		Если ЗнакКонОст = 1 Тогда
			КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
			ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
		Иначе // знак -1
			КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
			ИтогоПриход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
		КонецЕсли;	  
		
		Если ЗнакНачОст = 1 Тогда
			НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
			ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
		Иначе	
			НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
			ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
		КонецЕсли;
		
		Если ВыборкаДетальная.Дата < Дата1 Тогда
			Приход = 0;
			Расход = 0;
		ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
			Приход = ВыборкаДетальная.Приход;
			Расход = ВыборкаДетальная.Расход;
			НачОст = 0;
		КонецЕсли;	   
		
		Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
			продолжить;
		КонецЕсли;  
		
		Погашено   = 0;
		ДатаОплаты  = '00010101';
		Если Приход > 0 или НачОст > 0 Тогда
			ДатаОплаты   =  ВыборкаДетальная.ДатаОплаты;
			Если ДатаОплаты  = '00010101' Тогда
				ДатаОплаты = ВыборкаДетальная.Дата;
			КонецЕсли;	  
			Погашено = НачОст+Приход-КонОст;
		КонецЕсли; 
		
		ДнейПросрочено = 0;
		Если ДатаОплаты<>'00010101' и ДатаОплаты < ДатаДляРасчетаПроср и КонОст >0 Тогда
			ДнейПросрочено = (ДатаДляРасчетаПроср-НачалоДня(ДатаОплаты))/(3600*24);
		КонецЕсли; 
		
		Если ТаблИтоговаяРазвернуто Тогда
			НоваяСтрока 	   				  = ТаблИтого.Добавить();
			НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
			НоваяСтрока.ДатаОплаты		  	  = ДатаОплаты; //?(Приход>0 или НачОст>0,ВыборкаДетальная.ДатаОплаты,'00010101');
			НоваяСтрока.Регистратор 		  = ВыборкаДетальная.Регистратор;
			НоваяСтрока.ДнейПросрочено	  	  = ДнейПросрочено;
			//++ Spl_Апроф 18.11.2014 (k.russkih@a-prof.ru)
			НоваяСтрока.НомерДокумента        = ВыборкаДетальная.НомерДокумента;
			//НоваяСтрока.АдресПоставки         = ВыборкаДетальная.АдресПоставки;
			//-- Spl_Апроф
		Иначе
			НоваяСтрока 					  = ТекСтрока;
		КонецЕсли;
		
		НоваяСтрока.Организация		  = ВыборкаДетальная.Организация;
		НоваяСтрока.Контрагент		  = ВыборкаДетальная.Контрагент;
		НоваяСтрока.ДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
		
		Если ДнейПросрочено > 0 Тогда
			НоваяСтрока.Просрочено			  = НоваяСтрока.Просрочено + КонОст;
		КонецЕсли;	  
		
		НоваяСтрока.НачОст			  = НоваяСтрока.НачОст + НачОст;
		НоваяСтрока.Приход			  = НоваяСтрока.Приход + Приход;
		НоваяСтрока.Расход			  = НоваяСтрока.Расход + Расход;
		НоваяСтрока.КонОст			  = НоваяСтрока.КонОст + КонОст;
		НоваяСтрока.Погашено 		  = НоваяСтрока.Погашено + Погашено;
		
	КонецЦикла; 
	
	Возврат ТаблИтого;
	
КонецФункции

#Если Клиент Тогда

Функция ЗадолженностьВПериоде(Контрагент,НачалоПериода,КонецПериода)
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	
	Результат = новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Валюта");
	Результат.Колонки.Добавить("НачальныйОстаток");
	Результат.Колонки.Добавить("ДатаДокумента");
	Результат.Колонки.Добавить("ДатаОплаты");
	Результат.Колонки.Добавить("ДоговорКонтрагента");
	Результат.Колонки.Добавить("Документ");
	Результат.Колонки.Добавить("Контрагент");
	Результат.Колонки.Добавить("НакладнаяДокумента");
	Результат.Колонки.Добавить("Оплата");
	Результат.Колонки.Добавить("СуммаОстаток");
	Результат.Колонки.Добавить("ДнейПросрокОплаты");
	Результат.Колонки.Добавить("СуммаДокумента");
	Результат.Колонки.Добавить("СуммаОплаты");
	Результат.Колонки.Добавить("СуммаДолга");
	Результат.Колонки.Добавить("СуммаПросроченногоДолга");
	Результат.Колонки.Добавить("ДатаОплатыПлан");
	Результат.Колонки.Добавить("ДатаОплатыФакт");
	Результат.Колонки.Добавить("СуммаПросроченногоДолгаПоДокументу");
	
	Состояние("Получаем начальные остатки");
	
	//{17.04.2015 Островерхий заявка №38629 
	ТаблицаНачОстатки = ПКК_КредитныйКонтроль.ПолучитьПросроченнуюДебеторскуюЗадолженность_Таблица(Контрагент, НачалоПериода, истина, НачалоПериода);
	//ТаблицаНачОстатки = ПолучитьПросроченнуюДебеторскуюЗадолженность_Таблица(Контрагент, НачалоПериода, истина, НачалоПериода); 
	//17.04.2015 Островерхий} 
	
    //Приход за период
	Состояние("Получаем документы");
	ЗапросДокументы = Новый Запрос;
	ЗапросДокументы.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.Период КАК ДатаДокумента,
	|ВЫБОР
	|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
	|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|		ТОГДА ВзаиморасчетыСКонтрагентами.Регистратор.АП_ДатаОплаты
	|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	|КОНЕЦ КАК ДатаОплатыПлан,
	|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Документ,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентами.Контрагент,
	|	ВзаиморасчетыСКонтрагентами.Регистратор.Комментарий КАК ОписаниеДокумента,
	|	ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|							ТОГДА -ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	|						ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	|					КОНЕЦ
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	|						ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	|					КОНЕЦ
	|		КОНЕЦ КАК СуммаДокумента,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	0 как НачальныйОстаток,
	//{24.08.2015 Островерхий заявка №42710
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	|	КОНЕЦ, МЕСЯЦ) КАК ДатаПериода,
	|	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет,
	|	ВзаиморасчетыСКонтрагентами.СуммаУпрЗачет 
	//24.08.2015 Островерхий} 
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|ГДЕ
	|	((ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0 )
	|			ИЛИ (ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0))
	|	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
	|	И ВзаиморасчетыСКонтрагентами.Контрагент = &Контрагент
	|	И (ВзаиморасчетыСКонтрагентами.Период >= &НачалоПериода)
	|	И (ВзаиморасчетыСКонтрагентами.Период <= &КонецПериода)
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент, ДоговорКонтрагента, ДатаПериода, ДатаОплатыПлан, ВзаиморасчетыСКонтрагентами.Период, ВзаиморасчетыСКонтрагентами.Регистратор";

	ЗапросДокументы.УстановитьПараметр("КонецПериода", КонецПериода);
	ЗапросДокументы.УстановитьПараметр("НачалоПериода", НачалоПериода);
	ЗапросДокументы.УстановитьПараметр("Контрагент", Контрагент);
		
	ЗапросДокументы.УстановитьПараметр("ВидДоговора", МассивВидовДоговоров);
	
	РезультатДокументы = ЗапросДокументы.Выполнить();
	ТаблицаДокументы = РезультатДокументы.Выгрузить();
	
	//Расход за период
	Состояние("Получаем оплату");
	ЗапросОплата = Новый Запрос;
	ЗапросОплата.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентами.Период КАК ДатаОплатыФакт,
		|	ВзаиморасчетыСКонтрагентами.Регистратор.Дата КАК ДатаОплаты,
		|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Оплата,
		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
		|	ВзаиморасчетыСКонтрагентами.Контрагент,
		|	ВзаиморасчетыСКонтрагентами.Регистратор.Комментарий КАК ОписаниеОплаты,
		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
		| 	ВЫБОР КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0 ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов*-1 КОНЕЦ КАК СуммаОплаты,
		//{24.08.2015 Островерхий заявка №42710 
		|	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет,
		|	ВзаиморасчетыСКонтрагентами.СуммаУпрЗачет 
		//24.08.2015 Островерхий}
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	((ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				И ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0 )
		|			ИЛИ (ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0))
		|	И ВзаиморасчетыСКонтрагентами.Период >= &НачалоПериода
		|	И ВзаиморасчетыСКонтрагентами.Период <= &КонецПериода
		|	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
		|	И ВзаиморасчетыСКонтрагентами.Контрагент = &Контрагент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,ДоговорКонтрагента,ДатаОплаты";

	ЗапросОплата.УстановитьПараметр("НачалоПериода", НачалоПериода);
	ЗапросОплата.УстановитьПараметр("КонецПериода", КонецПериода);
	ЗапросОплата.УстановитьПараметр("Контрагент", Контрагент);
	
	ЗапросОплата.УстановитьПараметр("ВидДоговора", МассивВидовДоговоров);
	
	РезультатОплата = ЗапросОплата.Выполнить();
	ТаблицаОплата = РезультатОплата.Выгрузить();
	
    сч = 1 ;
	КолДокум =  ТаблицаНачОстатки.Количество();
	Для каждого стрН из ТаблицаНачОстатки цикл
		Состояние("Обрабатываем начальные остатки "+СокрЛП(Сч)+" из "+СокрЛП(КолДокум));
		СтрДобавленная = ТаблицаДокументы.Добавить();
		СтрДобавленная.ДоговорКонтрагента = стрН.ДоговорКонтрагента;
		СтрДобавленная.Контрагент = стрН.Контрагент;
		СтрДобавленная.ДатаДокумента = стрН.Дата;
		СтрДобавленная.ДатаОплатыПлан = стрН.ДатаОплаты;
		СтрДобавленная.Документ  = стрН.Регистратор;
		СтрДобавленная.ОписаниеДокумента  = стрН.Регистратор.Комментарий;
		СтрДобавленная.НачальныйОстаток = стрН.НачОст;
		СтрДобавленная.СуммаДокумента = стрН.НачОст;
		СтрДобавленная.Валюта = стрН.ДоговорКонтрагента.ВалютаВзаиморасчетов;
        сч = сч+1 ;
	КонецЦикла;
	Состояние("Сортируем начальные остатки ");
	ТаблицаДокументы.Сортировать("Контрагент, ДоговорКонтрагента, ДатаПериода, ДатаОплатыПлан");
	КолДокум =  ТаблицаДокументы.Количество();
	Сч = 1;

	
	ТаблицаОплатПоДоговору = Новый ТаблицаЗначений;
	Для каждого СтрДокумент из ТаблицаДокументы цикл
		Состояние("Обрабатываем Документы "+ СокрЛП(Сч)+" из "+СокрЛП(КолДокум));
		Сч = Сч + 1;        
		
		//{24.08.2015 Островерхий заявка №42710 
		Если СтрДокумент.СуммаДокумента-СтрДокумент.СуммаВзаиморасчетовЗачет = 0 Тогда
			Продолжить;
		КонецЕсли; 
		//24.08.2015 Островерхий}
		
		СуммаОстаток = СтрДокумент.СуммаДокумента;
		ЕстьОплатаПоДокументу  = Ложь;
		
		Если ТаблицаОплатПоДоговору.Количество()=0 или СтрДокумент.ДоговорКонтрагента <> ТаблицаОплатПоДоговору[0].ДоговорКонтрагента Тогда
			ТаблицаОплатПоДоговору = ТаблицаОплата.НайтиСтроки(Новый Структура("ДоговорКонтрагента",СтрДокумент.ДоговорКонтрагента)); 
		КонецЕсли;
		
		Для каждого СтрОплата из ТаблицаОплатПоДоговору цикл
			
			//{24.08.2015 Островерхий заявка №42710 
			Если СтрОплата.СуммаОплаты-СтрОплата.СуммаВзаиморасчетовЗачет = 0 Тогда
				Продолжить;
			КонецЕсли; 
			//24.08.2015 Островерхий}
			
			Если  СтрОплата.СуммаОплаты > 0 и СуммаОстаток >0 тогда
				СтрРезультат = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрРезультат,СтрДокумент);
				ЗаполнитьЗначенияСвойств(СтрРезультат,СтрОплата);
				СтрРезультат.ДнейПросрокОплаты = 0;
				СтрРезультат.СуммаДокумента = 0;
				СтрРезультат.НачальныйОстаток = 0;
				
				СтрРезультат.ДнейПросрокОплаты = ((НачалоДня(СтрРезультат.ДатаОплаты) - НачалоДня(СтрРезультат.ДатаОплатыПлан))/86400);  
				
				Если СтрРезультат.ДнейПросрокОплаты > 0 тогда
					СтрРезультат.СуммаПросроченногоДолгаПоДокументу = СуммаОстаток;
					
				иначе 
					СтрРезультат.СуммаПросроченногоДолгаПоДокументу = 0;
					
				КонецЕсли;
				
				//m.ionov@a-prof.ru 10.03.2015
				СтрРезультат.СуммаПросроченногоДолга = 0;
				//----m.ionov@a-prof.ru---
				
				Если СтрОплата.СуммаОплаты <= СуммаОстаток тогда
					СуммаОстаток = СуммаОстаток - СтрОплата.СуммаОплаты;
					СтрОплата.СуммаОплаты = 0; 
				Иначе
					СтрРезультат.СуммаОплаты = СуммаОстаток; 
					СтрОплата.СуммаОплаты = СтрОплата.СуммаОплаты - СуммаОстаток;
					СуммаОстаток = 0;
				КонецЕсли;
				
				ЕстьОплатаПоДокументу  = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОплатаПоДокументу  = Ложь тогда
			СтрРезультат = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрРезультат,СтрДокумент);
			СтрРезультат.ДнейПросрокОплаты = 0;
			СтрРезультат.СуммаДокумента = 0;
			СтрРезультат.НачальныйОстаток = 0;
			СтрРезультат.СуммаПросроченногоДолгаПоДокументу = СуммаОстаток;
		КонецЕсли;
		
		Если СтрДокумент.НачальныйОстаток <> 0 тогда
			СтрРезультат.НачальныйОстаток = СтрДокумент.СуммаДокумента;
		Иначе 
			СтрРезультат.СуммаДокумента = СтрДокумент.СуммаДокумента;
		КонецЕсли;
		СтрРезультат.СуммаДолга = СуммаОстаток;
		
		Если СтрРезультат.СуммаДолга  > 0 Тогда
			
			Если НачалоДня(КонецПериода) < ТекущаяДата() тогда
				СтрРезультат.ДнейПросрокОплаты = ((НачалоДня(КонецПериода) - НачалоДня(СтрРезультат.ДатаОплатыПлан))/86400);  
			иначе
				СтрРезультат.ДнейПросрокОплаты = ((НачалоДня(ТекущаяДата()) - НачалоДня(СтрРезультат.ДатаОплатыПлан))/86400);  
			КонецЕсли;
				
			Если СтрРезультат.ДнейПросрокОплаты > 0 Тогда
				СтрРезультат.СуммаПросроченногоДолга = СуммаОстаток;
			Иначе
				СтрРезультат.ДнейПросрокОплаты = 0;
				СтрРезультат.СуммаПросроченногоДолга = 0;
			КонецЕсли;
		Иначе 	
			СтрРезультат.СуммаПросроченногоДолга = 0;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
