Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки,ВыводВФормуОтчета);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	Возврат Результат;

КонецФункции


Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
#Если ТолстыйКлиентОбычноеПриложение Тогда 
		
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "РежимОтчета", Константы.РежимНабораПерсонала.Получить());
	
	ВыбранныеПоля = ТиповыеОтчеты.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
		
	Если ЕстьДетальныеПоля(ВыбранныеПоля) тогда
		Возврат;
	КонецЕсли;
	
	ГруппировкиОтчета = ТиповыеОтчеты.ПолучитьГруппировки(КомпоновщикНастроек);
	
	Для каждого Группировка из ГруппировкиОтчета Цикл
		
		ДобавитьОтборИлиПоВсемПоказателям(Группировка.Значение, ВыбранныеПоля);
		ПараметрВывода = Группировка.Значение.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("FilterOutput"));
		Если ПараметрВывода <> Неопределено тогда
			ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
			ПараметрВывода.Использование = истина;
		КонецЕсли;
	КонецЦикла;
#КонецЕсли                                     
КонецПроцедуры

Процедура ДобавитьОтборИлиПоВсемПоказателям(СтруктураОтчета, ВыбранныеПоля)
#Если ТолстыйКлиентОбычноеПриложение Тогда
	// создадим отбор или 
	ГруппаИли = СтруктураОтчета.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Для каждого ВыбранноеПоле из ВыбранныеПоля Цикл
		ТиповыеОтчеты.ДобавитьОтбор(ГруппаИли, Строка(ВыбранноеПоле.Поле), 0, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЦикла;
#КонецЕсли
КонецПроцедуры

Функция ЕстьДетальныеПоля(ВыбранныеПоля)
#Если ТолстыйКлиентОбычноеПриложение Тогда
	ЕстьРесурсы = ложь;
	Для каждого ВыбраноеПоле из ВыбранныеПоля Цикл
		ДоступноеПоле = ТиповыеОтчеты.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбраноеПоле.Поле, КомпоновщикНастроек);
		Если ДоступноеПоле <> Неопределено тогда
			Если ДоступноеПоле.Ресурс тогда
				ЕстьРесурсы = истина;
			Иначе
				ЕстьРесурсы = ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Не ЕстьРесурсы;
#КонецЕсли
КонецФункции

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	СписокПолейПодстановкиОтборовПоУмолчанию.Вставить("Организация", "ОсновнаяОрганизация");
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию", 
	ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию);
КонецФункции

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

Если ПравоДоступа("Чтение", Метаданные.Документы.ПриемНаРаботу,) 
	и ПравоДоступа("Чтение", Метаданные.Документы.Увольнение,) 
	и ПравоДоступа("Чтение", Метаданные.Документы.КадровоеПеремещение,) тогда 
	СхемаКомпоновкиДанных.НаборыДанных.Данные.Элементы.КоличествоОбслуживаемыхCотрудников.Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных.Данные.Элементы.КоличествоОбслуживаемыхCотрудников.Запрос, """Ответственный не доступен""", "Работники.Регистратор.Ответственный");
	СхемаКомпоновкиДанных.НаборыДанных.Данные.Элементы.КоличествоОбслуживаемыхCотрудников.Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных.Данные.Элементы.КоличествоОбслуживаемыхCотрудников.Запрос, """ОтветственныйОтбор""", "Работники.Регистратор.Ответственный.*");
КонецЕсли;

Если  ПравоДоступа("Чтение", Метаданные.Документы.ПриемНаРаботуВОрганизацию,) 
	и ПравоДоступа("Чтение", Метаданные.Документы.КадровоеПеремещениеОрганизаций,) 
	и ПравоДоступа("Чтение", Метаданные.Документы.УвольнениеИзОрганизаций,)  тогда
	СхемаКомпоновкиДанных.НаборыДанных.Данные.Элементы.КоличествоОбслуживаемыхCотрудников.Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных.Данные.Элементы.КоличествоОбслуживаемыхCотрудников.Запрос, """Ответственный организации не доступен""", "РаботникиОрганизаций.ПервичныйДокумент.Ответственный");
	СхемаКомпоновкиДанных.НаборыДанных.Данные.Элементы.КоличествоОбслуживаемыхCотрудников.Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных.Данные.Элементы.КоличествоОбслуживаемыхCотрудников.Запрос, """ОтветственныйОрганизацииОтбор""", "РаботникиОрганизаций.ПервичныйДокумент.Ответственный.*");
	СхемаКомпоновкиДанных.НаборыДанных.Данные.Элементы.КоличествоОбслуживаемыхЮридическихЛиц.Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных.Данные.Элементы.КоличествоОбслуживаемыхЮридическихЛиц.Запрос, """Ответственный не доступен""", "РаботникиОрганизаций.ПервичныйДокумент.Ответственный");
	СхемаКомпоновкиДанных.НаборыДанных.Данные.Элементы.КоличествоОбслуживаемыхЮридическихЛиц.Запрос = СтрЗаменить(СхемаКомпоновкиДанных.НаборыДанных.Данные.Элементы.КоличествоОбслуживаемыхЮридическихЛиц.Запрос, """ОтветственныйОрганизацииОтбор""", "РаботникиОрганизаций.ПервичныйДокумент.Ответственный.*");
КонецЕсли;	

УправлениеОтчетами.ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);
КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));