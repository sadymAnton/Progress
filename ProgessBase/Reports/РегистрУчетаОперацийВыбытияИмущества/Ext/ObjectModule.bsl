#Если Клиент Тогда
	
Перем НП Экспорт;

Перем Счет91_01;
Перем Счет90_01_1;
Перем Счет90_01_2;
Перем Счет91_01_1;
Перем Счет91_01_2;
Перем Счет91_01_3;
Перем Счет91_01_4;
Перем Счет91_01_5;
Перем Счет91_01_6;
Перем СчетНПВ;

Перем СписокСчетовУчетаИмущества, СписокСчетовСписания;
Перем ПрочиеСчета;

// Формирует массив в который помещеет только отмеченные
// в списке значения.
//
// Параметры:
// СписокЗначений - список значений из которого выбираются элементы
Функция СписокИзПомеченныхЭлементов(СписокЗначений)

	Массив = Новый СписокЗначений;

	Для каждого ЭлементСписка из СписокЗначений Цикл

		Если ЭлементСписка.Пометка Тогда
			Массив.Добавить(ЭлементСписка.Значение);
		КонецЕсли;

	КонецЦикла;

	Возврат Массив;

КонецФункции

Функция ОбъектУчета(МассивСубконто)

	ОбъектУчета = Неопределено;

	Для каждого Субконто Из МассивСубконто Цикл

		Если ((ТипЗнч(Субконто) = Тип("СправочникСсылка.Номенклатура")) 
		  или (ТипЗнч(Субконто) = Тип("СправочникСсылка.НематериальныеАктивы"))
		  или (ТипЗнч(Субконто) = Тип("СправочникСсылка.ОбъектыСтроительства"))
		  или (ТипЗнч(Субконто) = Тип("СправочникСсылка.ОсновныеСредства"))
		  или (ТипЗнч(Субконто) = Тип("СправочникСсылка.ЦенныеБумаги"))) Тогда

			ОбъектУчета = Субконто;
			Прервать;

		ИначеЕсли ТипЗнч(Субконто) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

			ОбъектУчета = Строка(Субконто.Владелец) + " ( " + Субконто + ")";
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат ОбъектУчета;

КонецФункции // ОбъектУчета()

Функция ВидДоходаПоОперации(Счет, Субконто1, Субконто2, Субконто3, Выборка)

	ВидДохода = "";

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(Субконто1);
	МассивСубконто.Добавить(Субконто2);
	МассивСубконто.Добавить(Субконто3);
	МассивСубконто.Добавить(Выборка.СубконтоДт1);
	МассивСубконто.Добавить(Выборка.СубконтоДт2);
	МассивСубконто.Добавить(Выборка.СубконтоДт3);

	ОбъектУчета = ОбъектУчета(МассивСубконто);

	Если Счет.ПринадлежитЭлементу(Счет90_01_1) ИЛИ Счет = Счет90_01_1 Тогда
		ВидДохода   = "Выручка от реализации товаров (работ, услуг) собственного производства";		
		ОбъектУчета = Субконто2;

	ИначеЕсли Счет.ПринадлежитЭлементу(Счет90_01_2) ИЛИ Счет = Счет90_01_2 Тогда
		Если Субконто2.Услуга Тогда
			ВидДохода   = "Выручка от реализации услуг";
		Иначе
			ВидДохода   = "Выручка от реализации покупных товаров";
			
		КонецЕсли;

	ИначеЕсли Счет.ПринадлежитЭлементу(Счет91_01_1) ИЛИ Счет = Счет91_01_1 Тогда
		ВидДохода   = "Выручка от реализации ОС";

	ИначеЕсли Счет.ПринадлежитЭлементу(Счет91_01_2) ИЛИ Счет = Счет91_01_2 Тогда
		ВидДохода   = "Выручка от реализации НМА";

	ИначеЕсли Счет.ПринадлежитЭлементу(Счет91_01_3) ИЛИ Счет = Счет91_01_3 Тогда
		ВидДохода   = "Выручка от реализации объектов строительства";

	ИначеЕсли Счет.ПринадлежитЭлементу(Счет91_01_4) ИЛИ Счет = Счет91_01_4 Тогда

		Если Субконто2.Услуга Тогда
			ВидДохода = "Выручка от реализации товаров (работ, услуг) собственного производства";
		Иначе
			ВидДохода = "Выручка от реализации прочего имущества";
		КонецЕсли;

	ИначеЕсли Счет.ПринадлежитЭлементу(Счет91_01_5) ИЛИ Счет = Счет91_01_5 Тогда

		Если Выборка.СубконтоКт1.ВидПрочихДоходовИРасходов  = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияКакОказанияФинансовыхУслуг Тогда
			ВидДохода = "Выручка от реализации прав требования";

		ИначеЕсли Выборка.СубконтоКт1.ВидПрочихДоходовИРасходов  = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияДоНаступленияСрокаПлатежа Тогда
			ВидДохода = "Выручка от уступки права до наступления срока платежа";

		ИначеЕсли Выборка.СубконтоКт1.ВидПрочихДоходовИРасходов  = Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПраваТребованияПослеНаступленияСрокаПлатежа Тогда
			ВидДохода = "Выручка от уступки права после наступления срока платежа";

		Иначе
			ВидДохода = "Выручка от реализации имущественных прав";
		КонецЕсли;

	ИначеЕсли Счет.ПринадлежитЭлементу(Счет91_01_6) ИЛИ Счет = Счет91_01_6 Тогда
		ВидДохода = "Выручка от реализации ЦБ";

	Иначе
		ВидДохода = "Доход не возникает";
	КонецЕсли;

	Возврат Новый Структура("ВидДохода, ОбъектУчета", ВидДохода, ОбъектУчета);

КонецФункции

Функция ПолучитьУсловиеВыбытия(Счет, Субконто1)

	УсловиеВыбытия = Неопределено;

	Если Счет = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав Тогда // ПВ
		УсловиеВыбытия = Субконто1;

	ИначеЕсли Счет = ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль Тогда //99
		УсловиеВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.СписаниеИмущества;

	ИначеЕсли Счет = ПланыСчетов.Налоговый.ВнереализационныеРасходы Тогда //91.02.7
		УсловиеВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.Другие;

	ИначеЕсли Счет = ПланыСчетов.Налоговый.ПрочиеКосвенныеРасходы Тогда //91.02.9
		УсловиеВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.Другие;

	ИначеЕсли Счет = ПланыСчетов.Налоговый.ПредоставленныеЗаймы Тогда //58.03
		УсловиеВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ПоДоговоруЗайма;

	ИначеЕсли Счет = ПланыСчетов.Налоговый.ВкладыПоДоговоруПростогоТоварищества Тогда //58.04
		УсловиеВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ВкладВПростоеТоварищество;

	ИначеЕсли Счет = ПланыСчетов.Налоговый.НедостачиИПотериОтПорчиЦенностей Тогда //94
		УсловиеВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.Недостачи;

	ИначеЕсли Счет = ПланыСчетов.Налоговый.ВнутрихозяйственныеРасчеты Тогда //79
		УсловиеВыбытия = Перечисления.УсловияПоступленияИВыбытияИмущества.ПередачаОбособленномуПодразделению;
	КонецЕсли;

	Возврат УсловиеВыбытия;

КонецФункции // ПолучитьУсловиеВыбытия()

Функция ВидРасходаСоответствуетКритериюОтбора(ВидРасхода)

	Соответствие        = ЛОЖЬ;
	НайденныйВидРасхода = ВидыДоходов.НайтиПоЗначению(ВидРасхода);

	Если НайденныйВидРасхода <> Неопределено Тогда

		Если НайденныйВидРасхода.Пометка Тогда
			Соответствие = ИСТИНА;
		КонецЕсли;

	КонецЕсли;

	Возврат Соответствие;

КонецФункции

Функция ПолучитьСписокСчетовСписания(СписокУсловийВыбытия)

	СписокСчетовСписания = Новый СписокЗначений();
	Если СписокУсловийВыбытия.НайтиПоЗначению(Перечисления.УсловияПоступленияИВыбытияИмущества.СписаниеИмущества) <> Неопределено Тогда
		СписокСчетовСписания.Добавить(ПланыСчетов.Налоговый.ПрибылиИУбыткиБезНалогаНаПрибыль); // 99
	КонецЕсли;

	Если СписокУсловийВыбытия.НайтиПоЗначению(Перечисления.УсловияПоступленияИВыбытияИмущества.Другие) <> Неопределено Тогда
		СписокСчетовСписания.Добавить(ПланыСчетов.Налоговый.ВнереализационныеРасходы); // 91.02.07
		СписокСчетовСписания.Добавить(ПланыСчетов.Налоговый.ПрочиеКосвенныеРасходы); // 91.02.09
	КонецЕсли;

	Возврат СписокСчетовСписания;

КонецФункции // ПолучитьСписокСчетовСписания()

Функция ПолучитьСписокПрочихСчетовСписания(СписокУсловийВыбытия)

	ПрочиеСчета = Новый СписокЗначений();
	Если СписокУсловийВыбытия.НайтиПоЗначению(Перечисления.УсловияПоступленияИВыбытияИмущества.ПоДоговоруЗайма) <> Неопределено Тогда
		ПрочиеСчета.Добавить(ПланыСчетов.Налоговый.ПредоставленныеЗаймы);// 5803
	КонецЕсли;

	Если СписокУсловийВыбытия.НайтиПоЗначению(Перечисления.УсловияПоступленияИВыбытияИмущества.ВкладВПростоеТоварищество) <> Неопределено Тогда
		ПрочиеСчета.Добавить(ПланыСчетов.Налоговый.ВкладыПоДоговоруПростогоТоварищества);// 5804
	КонецЕсли;

	Если СписокУсловийВыбытия.НайтиПоЗначению(Перечисления.УсловияПоступленияИВыбытияИмущества.Недостачи) <> Неопределено Тогда
		ПрочиеСчета.Добавить(ПланыСчетов.Налоговый.НедостачиИПотериОтПорчиЦенностей);// 94
	КонецЕсли;

	Если СписокУсловийВыбытия.НайтиПоЗначению(Перечисления.УсловияПоступленияИВыбытияИмущества.ПередачаОбособленномуПодразделению) <> Неопределено Тогда
		ПрочиеСчета.Добавить(ПланыСчетов.Налоговый.ВнутрихозяйственныеРасчеты);// 79
	КонецЕсли;

	Возврат ПрочиеСчета;

КонецФункции // ПолучитьСписокПрочихСчетовСписания()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом
//	ПоказыватьЗаголовок - признак видимости строк с заголовком отчета
//	ВысотаЗаголовка - параметр, через который возвращается высота заголовка в строках 
//
Процедура СформироватьОтчет(ДокументРезультат, ПоказыватьЗаголовок, ВысотаЗаголовка, ТолькоЗаголовок = Ложь) Экспорт

	ДокументРезультат.Очистить();

	Макет = ПолучитьМакет("Отчет");

	ОбластьЗаголовок  = Макет.ПолучитьОбласть("Заголовок");

	ОбластьЗаголовок.Параметры.НачалоПериода       = Формат(ДатаНач, "ДФ=dd.MM.yyyy");
	ОбластьЗаголовок.Параметры.КонецПериода        = Формат(ДатаКон, "ДФ=dd.MM.yyyy");
	ОбластьЗаголовок.Параметры.НазваниеОрганизации = Организация.НаименованиеПолное;
	ОбластьЗаголовок.Параметры.ИННОрганизации      = "" + Организация.ИНН + "/" + Организация.КПП;
	ДокументРезультат.Вывести(ОбластьЗаголовок);

	// Параметр для показа заголовка
	ВысотаЗаголовка = ДокументРезультат.ВысотаТаблицы;

	// Когда нужен только заголовок:
	Если ТолькоЗаголовок Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	// Формирование списка, состоящего из помеченных в списке условий выбытия
	СписокУсловийВыбытия = СписокИзПомеченныхЭлементов(УсловияВыбытия);
	
	СписокСчетовСписания = ПолучитьСписокСчетовСписания(СписокУсловийВыбытия);
	ПрочиеСчета          = ПолучитьСписокПрочихСчетовСписания(СписокУсловийВыбытия);
	
	ОбластьПодвал          = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы    = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы   = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("ДатаНач",                    НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон",                    КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("МассивУсловийПолучения",     СписокУсловийВыбытия);
	Запрос.УстановитьПараметр("ВидУчета",                   Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("СписокСчетовСписания",       СписокСчетовСписания);
	Запрос.УстановитьПараметр("ПрочиеСчета",                ПрочиеСчета);
	Запрос.УстановитьПараметр("СписокСчетовУчетаИмущества", СписокСчетовУчетаИмущества);
	Запрос.УстановитьПараметр("СчетНПВ",                    СчетНПВ);
	Запрос.УстановитьПараметр("СчетНПВ",                    СчетНПВ);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НалоговыйОборотыДтКт.СчетДт КАК СчетДт,
	|	НалоговыйОборотыДтКт.СубконтоДт1 КАК СубконтоДт1,
	|	НалоговыйОборотыДтКт.СубконтоДт2 КАК СубконтоДт2,
	|	НалоговыйОборотыДтКт.СубконтоДт3 КАК СубконтоДт3,
	|	НалоговыйОборотыДтКт.СчетКт КАК СчетКт,
	|	НалоговыйОборотыДтКт.СубконтоКт1 КАК СубконтоКт1,
	|	НалоговыйОборотыДтКт.СубконтоКт2 КАК СубконтоКт2,
	|	НалоговыйОборотыДтКт.СубконтоКт3 КАК СубконтоКт3,
	|	ЕСТЬNULL(НалоговыйОборотыДтКт.СуммаОборот, 0) КАК Сумма,
	|	ЕСТЬNULL(НалоговыйОборотыДтКт.КоличествоОборотКт, 0) КАК Количество,
	|	НалоговыйОборотыДтКт.Период КАК ДатаОперации,
	|	НалоговыйОборотыДтКт.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ОборотыДтКт(&ДатаНач,
	|&ДатаКон,
	|Запись,
	|СчетДт = &СчетНПВ,
	|,
	|, 
	|, 
	|Организация = &Организация И ВидУчетаДт = &ВидУчета И СубконтоДт1 В (&МассивУсловийПолучения)) КАК НалоговыйОборотыДтКт
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОборотыДтКт.СчетДт,
	|	НалоговыйОборотыДтКт.СубконтоДт1,
	|	НалоговыйОборотыДтКт.СубконтоДт2,
	|	НалоговыйОборотыДтКт.СубконтоДт3,
	|	НалоговыйОборотыДтКт.СчетКт,
	|	НалоговыйОборотыДтКт.СубконтоКт1,
	|	НалоговыйОборотыДтКт.СубконтоКт2,
	|	НалоговыйОборотыДтКт.СубконтоКт3,
	|	ЕСТЬNULL(НалоговыйОборотыДтКт.СуммаОборот, 0) КАК Сумма,
	|	ЕСТЬNULL(НалоговыйОборотыДтКт.КоличествоОборотКт, 0) КАК Количество,
	|	НалоговыйОборотыДтКт.Период,
	|	НалоговыйОборотыДтКт.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ОборотыДтКт(&ДатаНач, &ДатаКон, Запись, СчетДт В ИЕРАРХИИ (&СписокСчетовСписания), , СчетКт В ИЕРАРХИИ (&СписокСчетовУчетаИмущества), , Организация = &Организация И ВидУчетаДт = &ВидУчета) КАК НалоговыйОборотыДтКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыйОборотыДтКт.СчетДт,
	|	НалоговыйОборотыДтКт.СубконтоДт1,
	|	НалоговыйОборотыДтКт.СубконтоДт2,
	|	НалоговыйОборотыДтКт.СубконтоДт3,
	|	НалоговыйОборотыДтКт.СчетКт,
	|	НалоговыйОборотыДтКт.СубконтоКт1,
	|	НалоговыйОборотыДтКт.СубконтоКт2,
	|	НалоговыйОборотыДтКт.СубконтоКт3,
	|	ЕСТЬNULL(НалоговыйОборотыДтКт.СуммаОборот, 0) КАК Сумма,
	|	ЕСТЬNULL(НалоговыйОборотыДтКт.КоличествоОборотКт, 0) КАК Количество,
	|	НалоговыйОборотыДтКт.Период,
	|	НалоговыйОборотыДтКт.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.ОборотыДтКт(&ДатаНач, &ДатаКон, Запись, СчетДт В ИЕРАРХИИ (&ПрочиеСчета), ,СчетКт В ИЕРАРХИИ (&СписокСчетовУчетаИмущества), , Организация = &Организация И ВидУчетаДт = &ВидУчета) КАК НалоговыйОборотыДтКт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаОперации
	|
	|ИТОГИ ПО
	|	СчетДт ТОЛЬКО ИЕРАРХИЯ";
	Результат = Запрос.Выполнить();
	ИтогоСумма = 0;
	ИтогоКоличество = 0;

	ДокументРезультат.Вывести(ОбластьШапкаТаблицы);

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если (Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке) ИЛИ
			(Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии) Тогда
			Продолжить;
		КонецЕсли;
	
		СтруктураДохода = ВидДоходаПоОперации(Выборка.СчетКт, Выборка.СубконтоКт1, Выборка.СубконтоКт2, Выборка.СубконтоКт3, Выборка);
		Если  ТипЗнч(Выборка.Регистратор) = СтруктураДохода.ВидДохода = "Доход не возникает" Тогда
			Сумма          = 0;
		Иначе
			Сумма          = Выборка.Сумма;
			
		КонецЕсли;
		
		Если  Выборка.Количество = 0 И Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;


		Если ВидРасходаСоответствуетКритериюОтбора(СтруктураДохода.ВидДохода) Тогда

			ОбластьСтрока.Параметры.Дата           = Формат(Выборка.ДатаОперации, "ДФ=dd.MM.yyyy");
			ОбластьСтрока.Параметры.УсловиеВыбытия = УсловияВыбытия.НайтиПоЗначению(ПолучитьУсловиеВыбытия(Выборка.СчетДт, Выборка.СубконтоДт1));
			ОбластьСтрока.Параметры.Основание      = Выборка.Регистратор;
			ОбластьСтрока.Параметры.ВидДохода      = СтруктураДохода.ВидДохода;
			ОбластьСтрока.Параметры.ОбъектУчета    = СтруктураДохода.ОбъектУчета;
			ОбластьСтрока.Параметры.Количество     = Выборка.Количество;
			
			ОбластьСтрока.Параметры.Сумма          = Сумма;
			ИтогоСумма      = ИтогоСумма      + ?(Сумма =      Null, 0, Сумма);
			
			ОбластьСтрока.Параметры.Расшифровка    = Выборка.Регистратор;
			

			ДокументРезультат.Вывести(ОбластьСтрока);
			ИтогоКоличество = ИтогоКоличество + ?(Выборка.Количество = Null, 0, Выборка.Количество);

		КонецЕсли;

	КонецЦикла;

	СтруктураЛиц = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ДатаКон);
	ОбластьПодвал.Параметры.ОтветственныйЗаРегистры = ОбщегоНазначения.ФамилияИнициалыФизЛица(СтруктураЛиц.ОтветственныйЗаРегистры);
	ОбластьПодвалТаблицы.Параметры.ИтогоСумма = ИтогоСумма;
	ОбластьПодвалТаблицы.Параметры.ИтогоКоличество = ИтогоКоличество;
	ДокументРезультат.Вывести(ОбластьПодвалТаблицы);
	ДокументРезультат.Вывести(ОбластьПодвал);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

НП = Новый НастройкаПериода;

Счет90_01_1 = ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
Счет90_01_2 = ПланыСчетов.Налоговый.ВыручкаОтРеализацииПокупныхТоваров;

Счет91_01   = ПланыСчетов.Налоговый.ПрочиеДоходы;
Счет91_01_1 = ПланыСчетов.Налоговый.ВыручкаОтРеализацииОсновныхСредств;
Счет91_01_2 = ПланыСчетов.Налоговый.ВыручкаОтРеализацииНематериальныхАктивов;
Счет91_01_3 = ПланыСчетов.Налоговый.ВыручкаОтРеализацииОбъектовСтроительства;
Счет91_01_4 = ПланыСчетов.Налоговый.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг;
Счет91_01_5 = ПланыСчетов.Налоговый.ВыручкаОтРеализацииИмущественныхПрав;
Счет91_01_6 = ПланыСчетов.Налоговый.ВыручкаОтРеализацииЦенныхБумаг;
СчетНПВ     = ПланыСчетов.Налоговый.ПоступлениеИВыбытиеИмуществаРаботУслугПрав;

СписокСчетовУчетаИмущества = Новый СписокЗначений();
СписокСчетовУчетаИмущества.Добавить(ПланыСчетов.Налоговый.ВложенияВоВнеоборотныеАктивы); // 08
СписокСчетовУчетаИмущества.Добавить(ПланыСчетов.Налоговый.ОсновныеСредства);             // 01
СписокСчетовУчетаИмущества.Добавить(ПланыСчетов.Налоговый.НематериальныеАктивы);         // 04
СписокСчетовУчетаИмущества.Добавить(ПланыСчетов.Налоговый.ОборудованиеКУстановке);       // 07
СписокСчетовУчетаИмущества.Добавить(ПланыСчетов.Налоговый.Материалы);                    // 10
СписокСчетовУчетаИмущества.Добавить(ПланыСчетов.Налоговый.ВспомогательныеПроизводства);  // 23
СписокСчетовУчетаИмущества.Добавить(ПланыСчетов.Налоговый.Товары);                       // 41
СписокСчетовУчетаИмущества.Добавить(ПланыСчетов.Налоговый.ГотоваяПродукция);             // 43

#КонецЕсли
