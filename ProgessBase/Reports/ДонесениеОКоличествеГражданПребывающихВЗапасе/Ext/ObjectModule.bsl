Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	ЗначениеПанелипользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ЭтотОбъект);
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	Если ЗначениеПанелипользователя <> Неопределено тогда
		ЗначениеПанелипользователя.ВыводитьЗаголовокОтчета = ложь;
		ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ЗначениеПанелипользователя);
	КонецЕсли;
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	СписокОфицерскихЗваний	=	Новый СписокЗначений;
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.МладшийЛейтенант);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Лейтенант);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.СтаршийЛейтенант);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Капитан);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Майор);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Подполковник);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Полковник);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.ГенералМайор);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.ГенералЛейтенант);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.ГенералПолковник);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.ГенералАрмии);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.МаршалРоссийскойФедерации);
	
	СписокЗванийПрапорщиков	=	Новый СписокЗначений;
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Прапорщик);
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.СтаршийПрапорщик);
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.МладшийСержант);
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Сержант);
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.СтаршийСержант);
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Старшина);
	
	СписокСолдатскихЗваний	=	Новый СписокЗначений;
	СписокСолдатскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Рядовой);
	СписокСолдатскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Ефрейтор);
	
	СписокГодныеКСлужбе = Новый СписокЗначений;
	СписокГодныеКСлужбе.Добавить(Перечисления.ГодностьКВоеннойСлужбе.Годен);
	СписокГодныеКСлужбе.Добавить(Перечисления.ГодностьКВоеннойСлужбе.ГоденСОграничениями);
	СписокГодныеКСлужбе.Добавить(Перечисления.ГодностьКВоеннойСлужбе.ОграниченноГоден);
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Офицеры", СписокОфицерскихЗваний);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Прапорщики",			СписокЗванийПрапорщиков);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Солдаты",			СписокСолдатскихЗваний);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Военнообязанный",	Перечисления.ОтношениеКВоинскойОбязанности.Военнообязанный);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокГодныеКСлужбе",СписокГодныеКСлужбе);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Призывник",			Перечисления.ОтношениеКВоинскойОбязанности.Призывник);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Руководители",		Перечисления.КатегорииДолжностейДляВоинскогоУчета.Руководители);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Специалисты",		Перечисления.КатегорииДолжностейДляВоинскогоУчета.СпециалистыСХ);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ДругиеСлужащие",		Перечисления.КатегорииДолжностейДляВоинскогоУчета.ДругиеСлужащие);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Рабочие",			Перечисления.КатегорииДолжностейДляВоинскогоУчета.РабочиеСХ);
	
	СписокГруппировок = ТиповыеОтчеты.ПолучитьЭлементыСтруктуры(КомпоновщикНастроек);
	Для каждого ЭлементСпискаГруппировки из СписокГруппировок Цикл
		Группировка = ЭлементСпискаГруппировки.Значение;
		ТиповыеОтчеты.УстановитьПараметрВывода(Группировка, "TemplateType", ТипМакетаГруппировкиКомпоновкиДанных.Вертикальный);
	КонецЦикла;
	
	Группировка = ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, "Организация");
	ТиповыеОтчеты.УстановитьПараметрВывода(Группировка, "AppearanceTemplate", "None");
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);
	
	// разобъем отчет по страницам
	Если ТипЗнч(Результат) = Тип("ТабличныйДокумент") или ТипЗнч(Результат) = Тип("ПолеТабличногоДокумента") тогда
		ОблатьПриложение = Результат.НайтиТекст("_КонецСтраницы", , , , , истина);
		Пока ОблатьПриложение <> Неопределено Цикл
			Область = Результат.Область("R" + ОблатьПриложение.Верх + ":R" + ОблатьПриложение.Верх + "");
			Область.КонецСтраницы = истина;
			ОблатьПриложение.Текст = "";
			ОблатьПриложение = Результат.НайтиТекст("_КонецСтраницы", Область, , , , истина);
		КонецЦикла;
		Если Область <> Неопределено тогда
			Область.КонецСтраницы = ложь;
		КонецЕсли;
	КонецЕсли;
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Результат.АВтомасштаб = истина;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	Возврат Результат;
		
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Процедура ПередВыводомЭлементРезультата(МакетКомпоновки, ПроцессорКомпоновки, ЭлементРезультата) Экспорт
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки, ПроцессорКомпоновки) Экспорт
	
	
КонецПроцедуры

Процедура ПриВыводеЗаголовкаОтчета(ОбластьЗаголовок) Экспорт
КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	СписокПолейПодстановкиОтборовПоУмолчанию.Вставить("Организация", "ОсновнаяОрганизация");
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию", 
	ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию);
КонецФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
КонецПроцедуры

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

УправлениеОтчетами.ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных)
