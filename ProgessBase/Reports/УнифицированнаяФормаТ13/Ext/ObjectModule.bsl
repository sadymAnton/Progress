	
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Настройка периода
Перем ДатаЗаполнения;
Перем НомерДокумента;
Перем ОтветственноеЛицо;
Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета
Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

Функция ПолучитьВидСравнения(ВС) Экспорт
	Если ВС = ВидСравнения.Равно тогда
		Возврат ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ВС = ВидСравнения.ВИерархии тогда
		Возврат ВидСравненияКомпоновкиДанных.ВИерархии;
	ИначеЕсли ВС = ВидСравнения.ВСписке тогда
		Возврат ВидСравненияКомпоновкиДанных.ВСписке;
	ИначеЕсли ВС = ВидСравнения.ВСпискеПоИерархии тогда
		Возврат ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;     
	ИначеЕсли ВС = ВидСравнения.НеВИерархии тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВИерархии;     
	ИначеЕсли ВС = ВидСравнения.НеВСписке тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВСписке;     
	ИначеЕсли ВС = ВидСравнения.НеВСпискеПоИерархии тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;     
	ИначеЕсли ВС = ВидСравнения.НеРавно тогда
		Возврат ВидСравненияКомпоновкиДанных.НеРавно;     
	Иначе
		Возврат ВС;
	КонецЕсли;
КонецФункции

//  Процедура заполняет фильтр по переданным значениям
//  	Организация, ОтборОрганизации, ВидСравненияОрганизации
// 		Подразделение, ОтборПодразделения, ВидСравненияПодразделения,
//		Работник, ОтборРаботника, ВидСравненияРаботника,
//		ПериодРегистрации
Процедура УстановитьФильтр(ФильтрСоответствия) Экспорт
	
	Если ФильтрСоответствия["Организация"] <> Неопределено Тогда
		Организация = ФильтрСоответствия["Организация"];
		ОтборОрганизации = ложь;
		ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.Равно;
		Если ФильтрСоответствия["ОтборОрганизации"] <> Неопределено Тогда
			ОтборОрганизации = ФильтрСоответствия["ОтборОрганизации"];
		КонецЕсли;
		Если ФильтрСоответствия["ВидСравненияОрганизации"] <> Неопределено Тогда
			ВидСравненияОрганизации = ПолучитьВидСравнения(ФильтрСоответствия["ВидСравненияОрганизации"]);
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "Организация", Организация, ВидСравненияОрганизации, ОтборОрганизации);
	КонецЕсли;
	
	Если ФильтрСоответствия["Подразделение"] <> Неопределено Тогда
		Подразделение = ФильтрСоответствия["Подразделение"];
		ОтборПодразделения = ложь;
		ВидСравненияПодразделения = ВидСравненияКомпоновкиДанных.Равно;
		Если ФильтрСоответствия["ОтборПодразделения"] <> Неопределено Тогда
			ОтборПодразделения = ФильтрСоответствия["ОтборПодразделения"];
		КонецЕсли;
		Если ФильтрСоответствия["ВидСравненияПодразделения"] <> Неопределено Тогда
			ВидСравненияПодразделения = ПолучитьВидСравнения(ФильтрСоответствия["ВидСравненияПодразделения"]);
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "ПодразделениеОрганизации", Подразделение, ВидСравненияПодразделения, ОтборПодразделения);
		//ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ГруппироватьПодразделения", ОтборПодразделения);
	КонецЕсли;
	
	Если ФильтрСоответствия["Работник"] <> Неопределено Тогда
		Работник = ФильтрСоответствия["Работник"];
		ОтборРаботника = ложь;
		ВидСравненияРаботника = ВидСравненияКомпоновкиДанных.Равно;
		Если ФильтрСоответствия["ОтборРаботника"] <> Неопределено Тогда
			ОтборРаботника = ФильтрСоответствия["ОтборРаботника"];
		КонецЕсли;
		Если ФильтрСоответствия["ВидСравненияРаботника"] <> Неопределено Тогда
			ВидСравненияРаботника = ПолучитьВидСравнения(ФильтрСоответствия["ВидСравненияРаботника"]);
		КонецЕсли;
		ТиповыеОтчеты.ДобавитьОтбор(КомпоновщикНастроек, "Сотрудник", Работник, ВидСравненияРаботника, ОтборРаботника);
	КонецЕсли;
	
	Если ФильтрСоответствия["ПериодРегистрации"] <> Неопределено Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоМесяца(ФильтрСоответствия["ПериодРегистрации"]));
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецМесяца(ФильтрСоответствия["ПериодРегистрации"]));
	КонецЕсли;
	
	Если ФильтрСоответствия["ДатаНачала"] <> Неопределено Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ФильтрСоответствия["ДатаНачала"]));
	КонецЕсли;
	
	Если ФильтрСоответствия["ДатаОкончания"] <> Неопределено Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ФильтрСоответствия["ДатаОкончания"]));
	КонецЕсли;
	
	Если ФильтрСоответствия["ДатаЗаполнения"] <> Неопределено Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ДатаЗаполнения", ФильтрСоответствия["ДатаЗаполнения"]);
	КонецЕсли;
	
	Если ФильтрСоответствия["НомерДокумента"] <> Неопределено Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "НомерДокумента", ФильтрСоответствия["НомерДокумента"]);
	КонецЕсли;
	
	Если ФильтрСоответствия["ОтветственноеЛицо"] <> Неопределено Тогда
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ОтветственноеЛицо", ФильтрСоответствия["ОтветственноеЛицо"]);
	КонецЕсли;
КонецПроцедуры // УстановитьФильтр()


// Процедура Формирует отчет Т-13 по данным регистров
// и заполняет табличный документ - ДокументРезильтат
Процедура СформироватьМакет(ДокументРезультат, Режим, НачалоПериода, КонецПериода, СписокРаботников, ТаблицаРаботниковОрганизации, Ответственный, ГруппироватьПодразделения, ВозвращаемоеСообщениеОбОшибке)
	
	Если Не ПроцедурыУправленияПерсоналомПереопределяемый.РегламентированныйКалендарьЗаполнен(НачалоПериода, КонецПериода, Истина) Тогда
		Если Режим = "Табель" Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	ЗапросТабель = Новый Запрос();
	
	ЗапросТабель.УстановитьПараметр("НачалоПериода", НачалоПериода);
	ЗапросТабель.УстановитьПараметр("КонецПериода",  КонецПериода);
	ЗапросТабель.УстановитьПараметр("ТаблицаРаботниковОрганизации",  ТаблицаРаботниковОрганизации);
	
	Если ТипЗнч(Ответственный) = Тип("СправочникСсылка.Пользователи") тогда
		ЗапросТабель.УстановитьПараметр("Ответственный", Ответственный.ФизЛицо);
	Иначе
		ЗапросТабель.УстановитьПараметр("Ответственный", Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	
	// условия на измерения регистра
	УсловиеПоРаботникам	= "";
	УсловиеНаОрганизации = "";
	
	ЗапросТабель.УстановитьПараметр("РаботникиОрганизации", СписокРаботников);
	УсловиеПоРаботникам	= " Сотрудник В (&РаботникиОрганизации)";
	
	ОтборОрганизации        = ложь;
	Организация             = Неопределено;
	ВидСравненияОрганизации = "";
	
	МассивОтборов = ТиповыеОтчеты.ПолучитьЭлементыОтбора(КомпоновщикНастроек);
	Для каждого ЭлементОтбора из МассивОтборов Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") и ЭлементОтбора.Использование тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") тогда
				Если ОтборОрганизации и Организация <> Неопределено тогда
					ОтборОрганизации           = ложь;
					Организация                = Неопределено;
					ВидСравненияОрганизации = "";
				Иначе
					ОтборОрганизации = истина;
					Организация      = ЭлементОтбора.ПравоеЗначение;
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						ВидСравненияОрганизации = ВидСравнения.Равно; 
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.НеРавно Тогда
						ВидСравненияОрганизации = ВидСравнения.НеРавно;
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						ВидСравненияОрганизации = ВидСравнения.ВСписке;
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
						ВидСравненияОрганизации = ВидСравнения.НеВСписке;
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
						ВидСравненияОрганизации = ВидСравнения.ВИерархии;
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
						ВидСравненияОрганизации = ВидСравнения.НеВИерархии;
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
						ВидСравненияОрганизации = ВидСравнения.НеВСпискеПоИерархии;
					ИначеЕсли ВидСравненияОрганизации = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
						ВидСравненияОрганизации = ВидСравнения.ВСпискеПоИерархии;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборОрганизации Тогда
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			ЗапросТабель.УстановитьПараметр("Организация", ОбщегоНазначенияЗК.ГоловнаяОрганизация(Организация));
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА Организации.Ссылка
			|		ИНАЧЕ Организации.ГоловнаяОрганизация
			|	КОНЕЦ КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка В(&Организация)");
			
			Запрос.УстановитьПараметр("Организация", Организация);
			ЗапросТабель.УстановитьПараметр("Организация", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;
		
		Если ВидСравненияОрганизации = ВидСравнения.Равно Тогда
			ВидСравненияДляОрганизации = "=" 
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			ВидСравненияДляОрганизации = "<>"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.ВСписке Тогда
			ВидСравненияДляОрганизации = "В"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеВСписке Тогда
			ВидСравненияДляОрганизации = "НЕ В"
		КонецЕсли;
		
		Если ВидСравненияОрганизации = ВидСравнения.Равно ИЛИ ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			УсловиеНаОрганизации = " Организация " + ВидСравненияДляОрганизации + " &Организация";
		Иначе
			УсловиеНаОрганизации = " Организация " + ВидСравненияДляОрганизации + " (&Организация)";
		КонецЕсли;
	КонецЕсли;
	
	// условия на ресурсы регистра
	УсловиеВЗапрос = "";
	Если ОтборОрганизации Тогда
		ЗапросТабель.УстановитьПараметр("ОбособленноеПодразделение", Организация);
		Если ВидСравненияОрганизации = ВидСравнения.Равно Тогда
			ВидСравненияДляОрганизации = "=" 
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			ВидСравненияДляОрганизации = "<>"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.ВСписке Тогда
			ВидСравненияДляОрганизации = "В"
		ИначеЕсли ВидСравненияОрганизации = ВидСравнения.НеВСписке Тогда
			ВидСравненияДляОрганизации = "НЕ В"
		КонецЕсли;
		
		Если ВидСравненияОрганизации = ВидСравнения.Равно ИЛИ ВидСравненияОрганизации = ВидСравнения.НеРавно Тогда
			УсловиеНаОбособленноеПодразделение = " %Таблица%.Организация " + ВидСравненияДляОрганизации + " &ОбособленноеПодразделение";
		Иначе
			УсловиеНаОбособленноеПодразделение = " %Таблица%.Организация " + ВидСравненияДляОрганизации + " (&ОбособленноеПодразделение)";
		КонецЕсли;
		УсловиеВЗапрос = УсловиеВЗапрос + " И " + УсловиеНаОбособленноеПодразделение;
	КонецЕсли;
	
	ОтборПодразделения        = ложь;
	Подразделение             = Неопределено;
	ВидСравненияПодразделения = "";
	
	МассивОтборов = ТиповыеОтчеты.ПолучитьЭлементыОтбора(КомпоновщикНастроек);
	Для каждого ЭлементОтбора из МассивОтборов Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПодразделениеОрганизации") и ЭлементОтбора.Использование тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") тогда
				Если ОтборПодразделения и Подразделение <> Неопределено тогда
					ОтборПодразделения        = ложь;
					Подразделение             = Неопределено;
					ВидСравненияПодразделения = "";
				Иначе
					ОтборПодразделения = истина;
					Подразделение      = ЭлементОтбора.ПравоеЗначение;
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
						ВидСравненияПодразделения = ВидСравнения.Равно; 
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
						ВидСравненияПодразделения = ВидСравнения.НеРавно;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
						ВидСравненияПодразделения = ВидСравнения.ВСписке;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
						ВидСравненияПодразделения = ВидСравнения.НеВСписке;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
						ВидСравненияПодразделения = ВидСравнения.ВИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
						ВидСравненияПодразделения = ВидСравнения.НеВИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
						ВидСравненияПодразделения = ВидСравнения.ВСпискеПоИерархии;
					ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
						ВидСравненияПодразделения = ВидСравнения.НеВСпискеПоИерархии;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УсловиеПодразделение = "";
	Если ОтборПодразделения Тогда
		ЗапросТабель.УстановитьПараметр("ПодразделениеОрганизации", Подразделение);
		
		Если ВидСравненияПодразделения = ВидСравнения.Равно Тогда
			ВидСравненияДляПодразделения = "=" 
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеРавно Тогда
			ВидСравненияДляПодразделения = "<>"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.ВСписке Тогда
			ВидСравненияДляПодразделения = "В"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеВСписке Тогда
			ВидСравненияДляПодразделения = "НЕ В"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.ВСпискеПоИерархии ИЛИ
			ВидСравненияПодразделения = ВидСравнения.ВИерархии Тогда
			ВидСравненияДляПодразделения = "В ИЕРАРХИИ"
		ИначеЕсли ВидСравненияПодразделения = ВидСравнения.НеВСпискеПоИерархии ИЛИ
			ВидСравненияПодразделения = ВидСравнения.НеВИерархии Тогда
			ВидСравненияДляПодразделения = "НЕ В ИЕРАРХИИ"
		КонецЕсли;
		
		Если ВидСравненияПодразделения = ВидСравнения.Равно ИЛИ ВидСравненияПодразделения = ВидСравнения.НеРавно Тогда
			УсловиеПодразделение = " %Таблица%.ПодразделениеОрганизации " + ВидСравненияДляПодразделения + " &ПодразделениеОрганизации";
		Иначе
			УсловиеПодразделение = " %Таблица%.ПодразделениеОрганизации " + ВидСравненияДляПодразделения + " (&ПодразделениеОрганизации)";
		КонецЕсли;
		
		УсловиеВЗапрос = УсловиеВЗапрос + " И " + УсловиеПодразделение;
	КонецЕсли;
	
	Если ГруппироватьПодразделения Тогда
		ПорядокГруппировки = " ПодразделениеОрганизации, ";
	Иначе
		ПорядокГруппировки = " ";
	КонецЕсли;
	
	Макет = ПолучитьМакет("Т13");
	
	ОбластьДанныхШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьДанныхКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьДанныхСтрока		= Макет.ПолучитьОбласть("Строка");
	ОбластьДанныхПодвал		= Макет.ПолучитьОбласть("Подвал");
	
	Если ОтборПодразделения и НЕ ГруппироватьПодразделения и ТипЗнч(Подразделение) <> Тип("СписокЗначений") тогда
		ЗапросТабель.УстановитьПараметр("Подразделение",  Подразделение);
	КонецЕсли;
	ПараметровВстроке = ОбластьДанныхСтрока.Параметры.Количество();
	ЗапросТабель.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Запрос дат периода
	Если РабочаяДата < НачалоПериода Тогда
		// формируем пустую таблицу
		ВозвращаемоеСообщениеОбОшибке = "Отчет можно формировать только за текущий или предыдущий периоды!";
		Возврат;
	Иначе
		ТекстЗапросаДат = 
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(Год(НачалоПериода), "ЧГ=4") + ", " + Месяц(НачалоПериода) + " , " + День(НачалоПериода) + ") КАК ДатаТабеля,
		|	ДАТАВРЕМЯ(" + Формат(Год(НачалоПериода), "ЧГ=4") + ", " + Месяц(НачалоПериода) + " , 1) КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТДатыТабеля 
		|	";           
		ДатаВОтчете = НачалоПериода + 86400;
		Пока ДатаВОтчете <= НачалоДня(КонецПериода) Цикл
			НомерДня    = День(ДатаВОтчете);
			НомерМесяца = Месяц(ДатаВОтчете);
			НомерГода   = Год(ДатаВОтчете);
			ТекстЗапросаДат = ТекстЗапросаДат + 
			"ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4")+ ", " + НомерМесяца + " ," + НомерДня + "),
			|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4") + ", " + НомерМесяца + " , 1) КАК ПериодРегистрации
			|	";
			ДатаВОтчете = ДатаВОтчете + 86400;
		КонецЦикла;
	КонецЕсли;
	
	Если Режим = "Табель" Тогда
		
		// Запрос сотрудников
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.Сотрудник КАК Справочник.СотрудникиОрганизаций) КАК Сотрудник,
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.Организация КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(&Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК ПодразделениеОрганизации,
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.Должность КАК Справочник.ДолжностиОрганизаций) КАК Должность,
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.ГрафикРаботы КАК Справочник.ГрафикиРаботы) КАК ГрафикРаботы,
		|	РаботникиОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
		|	РаботникиОрганизаций.ДатаКалендаря КАК ДатаСр
		|ПОМЕСТИТЬ ВТТаблицаРаботниковОрганизации
		|ИЗ
		|	&ТаблицаРаботниковОрганизации КАК РаботникиОрганизаций
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
		|			КОГДА ФИОФизЛицСрезПоследних.Имя = """"
		|				ТОГДА """"
		|			ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
		|				ТОГДА """"
		|			ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|		КОНЕЦ, РаботникиОрганизаций.Сотрудник.Физлицо.Наименование) КАК СотрудникНаименование,
		|	РаботникиОрганизаций.Организация КАК Организация,
		|	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	РаботникиОрганизаций.Должность КАК Должность,
		|	РаботникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы,
		|	РаботникиОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
		|	РаботникиОрганизаций.ДатаСр КАК ДатаСр
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТТаблицаРаботниковОрганизации КАК РаботникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&КонецПериода,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						СотрудникиОрганизаций.Сотрудник.Физлицо
		|					ИЗ
		|						ВТТаблицаРаботниковОрганизации КАК СотрудникиОрганизаций)) КАК ФИОФизЛицСрезПоследних
		|		ПО (ФИОФизЛицСрезПоследних.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(2010, 1, 1) КАК ДатаТабеля,
		|	ДАТАВРЕМЯ(2010, 1, 1) КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТДатыТабеля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.СотрудникНаименование КАК СотрудникНаименование,
		|	Сотрудники.Организация,
		|	Сотрудники.ПодразделениеОрганизации,
		|	Сотрудники.Должность,
		|	Сотрудники.ГрафикРаботы,
		|	ВТДатыТабеля.ДатаТабеля КАК ДатаТабеля,
		|	ВТДатыТабеля.ПериодРегистрации КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТСотрудникДата
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыТабеля КАК ВТДатыТабеля
		|		ПО (ВТДатыТабеля.ДатаТабеля = Сотрудники.ДатаСр)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаТабеля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисленияРаботниковОрганизаций.Период КАК Период,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ПериодРегистрации КАК ПериодРегистрации,
		|	Сотрудники.ДатаСр КАК ДатаСр,
		|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета,
		|	ПлановыеНачисленияРаботниковОрганизаций.ПериодЗавершения,
		|	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаЗавершения,
		|	ПлановыеНачисленияРаботниковОрганизаций.ДействиеЗавершения,
		|	ПлановыеНачисленияРаботниковОрганизаций.ДатаНачалаСобытия
		|ПОМЕСТИТЬ ВТНеобработанныеПлановыеНачисленияРаботниковОрганизаций
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
		|		ПО Сотрудники.Сотрудник = ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
		|			И Сотрудники.ДатаСр >= ПлановыеНачисленияРаботниковОрганизаций.Период
		|ГДЕ
		|	ПлановыеНачисленияРаботниковОрганизаций.Период <= &КонецПериода
		|	И ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПлановыеНачисления.ВидРасчета,
		|	ПлановыеНачисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК КлассификаторВидаВремени,
		|	ДатыПолученияВР.ДатаТабеля КАК ДатаТабеля,
		|	ДатыПолученияВР.ПериодРегистрации КАК ПериодРегистрации,
		|	ДатыПолученияВР.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТПлановыеНачисленияСотрудников
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДатыТабеля.ДатаТабеля КАК ДатаТабеля,
		|		ДатыТабеля.ПериодРегистрации КАК ПериодРегистрации,
		|		МАКСИМУМ(ПлановыеНачисления.Период) КАК Период,
		|		ПлановыеНачисления.Сотрудник КАК Сотрудник
		|	ИЗ
		|		ВТДатыТабеля КАК ДатыТабеля
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНеобработанныеПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
		|			ПО (ПлановыеНачисления.Период <= ДатыТабеля.ДатаТабеля)
		|				И (ПлановыеНачисления.ПериодРегистрации = ДатыТабеля.ПериодРегистрации)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДатыТабеля.ДатаТабеля,
		|		ДатыТабеля.ПериодРегистрации,
		|		ПлановыеНачисления.Сотрудник) КАК ДатыПолученияВР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНеобработанныеПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
		|		ПО ДатыПолученияВР.Период = ПлановыеНачисления.Период
		|			И ДатыПолученияВР.Сотрудник = ПлановыеНачисления.Сотрудник
		|			И ДатыПолученияВР.ПериодРегистрации = ПлановыеНачисления.ПериодРегистрации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаТабеля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФактическийПериодДействия.Сотрудник КАК Сотрудник,
		|	ФактическийПериодДействия.ВидРасчета КАК ВидРасчета,
		|	ВЫБОР
		|		КОГДА ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйДополнительныйОтпуск)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Болезнь)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Забастовка)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ЗадержкаВыплатыЗаработнойПлаты)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификацииВДругойМестности)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыБезОплаты)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтстранениеОтРаботыСОплатой)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВынужденныйПрогул)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботодателя)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Простой)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника)
		|				ИЛИ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ПростойПоВинеРаботника)
		|			ТОГДА ВЫБОР
		|					КОГДА СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение) > 0
		|							ИЛИ (НЕ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя)
		|								И (НЕ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка))
		|						ТОГДА ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
		|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|				КОНЕЦ
		|		ИНАЧЕ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
		|	КОНЕЦ КАК ВидВремени,
		|	ФактическийПериодДействия.ВидРасчета.ВидВремени КАК ПеречислениеВидВремени,
		|	ФактическийПериодДействия.ГрафикРаботы КАК ГрафикРаботы,
		|	ФактическийПериодДействия.ПериодДействия КАК ПериодРегистрации,
		|	ФактическийПериодДействия.ПериодРегистрации КАК МесяцНачисления,
		|	ФактическийПериодДействия.Сторно,
		|	ФактическийПериодДействия.ОтработаноЧасов,
		|	ГрафикиРаботыПоВидамВремени.Дата КАК ДатаТабеля,
		|	ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидВремениИсходный
		|ПОМЕСТИТЬ ВТОсновныеНачисления
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|			ПериодДействия В
		|					(ВЫБРАТЬ
		|						Сотрудники.ПериодРегистрации
		|					ИЗ
		|						ВТСотрудники КАК Сотрудники)
		|				И ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю)
		|				И Сотрудник В
		|					(ВЫБРАТЬ
		|						Сотрудники.Сотрудник
		|					ИЗ
		|						ВТСотрудники КАК Сотрудники)
		|				И ((НЕ ВидРасчета.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ПустаяСсылка), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеНеотработанное)))
		|					ИЛИ ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)))) КАК ФактическийПериодДействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО ФактическийПериодДействия.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И ФактическийПериодДействия.ПериодДействияНачало <= ГрафикиРаботыПоВидамВремени.Дата
		|			И ФактическийПериодДействия.ПериодДействияКонец >= ГрафикиРаботыПоВидамВремени.Дата
		|			И ФактическийПериодДействия.ВидУчетаВремени = ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическийПериодДействия.Сотрудник,
		|	ФактическийПериодДействия.ВидРасчета,
		|	ФактическийПериодДействия.ВидРасчета.ВидВремени,
		|	ФактическийПериодДействия.ГрафикРаботы,
		|	ФактическийПериодДействия.ПериодДействия,
		|	ФактическийПериодДействия.ПериодРегистрации,
		|	ФактическийПериодДействия.Сторно,
		|	ФактическийПериодДействия.ОтработаноЧасов,
		|	ГрафикиРаботыПоВидамВремени.Дата,
		|	ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени,
		|	ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ВидРасчета,
		|	ГрафикРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыТабеля.ДатаТабеля КАК ДатаТабеля,
		|	ДатыТабеля.ПериодРегистрации КАК ПериодРегистрации,
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.ВидРасчета,
		|	Начисления.ВидВремени,
		|	Начисления.ПеречислениеВидВремени КАК ПеречислениеВидВремени,
		|	Начисления.ГрафикРаботы,
		|	ВЫБОР
		|		КОГДА Начисления.ПеречислениеВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
		|			ТОГДА ВЫБОР
		|					КОГДА ДатыТабеля.ДатаТабеля = Начисления.ДатаТабеля
		|						ТОГДА Начисления.ОтработаноЧасов
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ОтработаноЧасов,
		|	Начисления.ВидВремениИсходный
		|ПОМЕСТИТЬ ВТОтфильтрованныеОсновныеНачисления
		|ИЗ
		|	ВТДатыТабеля КАК ДатыТабеля
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисления КАК Начисления
		|		ПО ДатыТабеля.ДатаТабеля = Начисления.ДатаТабеля
		|			И (Начисления.ПериодРегистрации = ДатыТабеля.ПериодРегистрации)
		|			И ((НЕ Начисления.Сторно))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновныеНачисления КАК СторноНачисления
		|		ПО (СторноНачисления.Сотрудник = Начисления.Сотрудник)
		|			И (СторноНачисления.ВидРасчета = Начисления.ВидРасчета)
		|			И (СторноНачисления.МесяцНачисления > Начисления.МесяцНачисления)
		|			И (СторноНачисления.Сторно)
		|			И ДатыТабеля.ДатаТабеля = СторноНачисления.ДатаТабеля
		|ГДЕ
		|	СторноНачисления.Сотрудник ЕСТЬ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаТабеля,
		|	ПеречислениеВидВремени
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочееВремяРаботниковОрганизаций.Сотрудник КАК Сотрудник,
		|	СУММА(РабочееВремяРаботниковОрганизаций.Часов) КАК Часов,
		|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени КАК ВидВремени,
		|	РабочееВремяРаботниковОрганизаций.Период КАК ДатаТабеля,
		|	РабочееВремяРаботниковОрганизаций.ПериодРегистрации КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТРабочеВремя
		|ИЗ
		|	(ВЫБРАТЬ
		|		РабочееВремяРаботниковОрганизаций.Сотрудник КАК Сотрудник,
		|		РабочееВремяРаботниковОрганизаций.Часов КАК Часов,
		|		РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
		|		РабочееВремяРаботниковОрганизаций.Период КАК Период,
		|		НАЧАЛОПЕРИОДА(РабочееВремяРаботниковОрганизаций.Период, МЕСЯЦ) КАК ПериодРегистрации
		|	ИЗ
		|		РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
		|	ГДЕ
		|		РабочееВремяРаботниковОрганизаций.Сотрудник В
		|				(ВЫБРАТЬ
		|					Сотрудники.Сотрудник
		|				ИЗ
		|					ВТСотрудники КАК Сотрудники)
		|		И (НЕ РабочееВремяРаботниковОрганизаций.СводнаяЗапись)
		|		И (НЕ РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод)
		|		И РабочееВремяРаботниковОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	
		|	ОБЪЕДИНИТЬ
		|	
		////Вадим
		//|	ВЫБРАТЬ
		//|		ОсновныеНачисления.Сотрудник,
		//|		ОсновныеНачисления.ОтработаноЧасов,
		//|		ОсновныеНачисления.ВидВремени,
		//|		ОсновныеНачисления.ДатаТабеля,
		//|		ОсновныеНачисления.ПериодРегистрации
		//|	ИЗ
		//|		ВТОтфильтрованныеОсновныеНачисления КАК ОсновныеНачисления
		//|	ГДЕ
		//|		ОсновныеНачисления.ПеречислениеВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)) КАК РабочееВремяРаботниковОрганизаций
		//
		   |	
		|	ВЫБРАТЬ
		|		AVT_РаботаСверхНормы.Сотрудник,
		|		AVT_РаботаСверхНормы.Часов,
		|		AVT_РаботаСверхНормы.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени,
		|		AVT_РаботаСверхНормы.Период,
		|		НАЧАЛОПЕРИОДА(AVT_РаботаСверхНормы.Период, МЕСЯЦ)
		|	ИЗ
		|		РегистрНакопления.AVT_РаботаСверхНормы КАК AVT_РаботаСверхНормы
		|	ГДЕ
		//|		AVT_РаботаСверхНормы.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПраздничныхИВыходных) И
		|		не AVT_РаботаСверхНормы.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы) И
		|		 AVT_РаботаСверхНормы.Сотрудник В
		|				(ВЫБРАТЬ
		|					Сотрудники.Сотрудник
		|				ИЗ
		|					ВТСотрудники КАК Сотрудники)
		|		И НЕ AVT_РаботаСверхНормы.Часов = 0
		|		И AVT_РаботаСверхНормы.Период МЕЖДУ &НачалоПериода И &КонецПериода) КАК РабочееВремяРаботниковОрганизаций
	
		
		
		 ///ВадимКонец
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочееВремяРаботниковОрганизаций.Сотрудник,
		|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени,
		|	РабочееВремяРаботниковОрганизаций.Период,
		|	РабочееВремяРаботниковОрганизаций.ПериодРегистрации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ДатаТабеля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Работники.Сотрудник КАК Сотрудник,
		|	Работники.Период КАК Период,
		|	Работники.ГрафикРаботы,
		|	Работники.ПериодЗавершения,
		|	Работники.ГрафикРаботыЗавершения
		|ПОМЕСТИТЬ ВТГрафикиРаботниковСрез
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|			&НачалоПериода,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					Сотрудники.Сотрудник
		|				ИЗ
		|					ВТСотрудники КАК Сотрудники)) КАК Работники
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Работники.Сотрудник КАК Сотрудник,
		|	&НачалоПериода КАК Период,
		|	ВЫБОР
		|		КОГДА Работники.ПериодЗавершения <= &НачалоПериода
		|				И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА Работники.ГрафикРаботыЗавершения
		|		ИНАЧЕ Работники.ГрафикРаботы
		|	КОНЕЦ КАК ГрафикРаботы
		|ПОМЕСТИТЬ ВТГрафикиРаботников
		|ИЗ
		|	ВТГрафикиРаботниковСрез КАК Работники
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Работники.Сотрудник,
		|	Работники.ПериодЗавершения,
		|	Работники.ГрафикРаботыЗавершения
		|ИЗ
		|	ВТГрафикиРаботниковСрез КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийПроверка
		|		ПО (РаботникиОрганизацийПроверка.Сотрудник = Работники.Сотрудник)
		|			И (РаботникиОрганизацийПроверка.Период <= Работники.ПериодЗавершения)
		|			И (РаботникиОрганизацийПроверка.Период > Работники.Период)
		|ГДЕ
		|	Работники.ПериодЗавершения >= &НачалоПериода
		|	И Работники.ПериодЗавершения <= &КонецПериода
		|	И РаботникиОрганизацийПроверка.Сотрудник ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.ГрафикРаботы
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО РаботникиОрганизаций.Сотрудник = ВТСотрудники.Сотрудник
		|ГДЕ
		|	РаботникиОрганизаций.Период > &НачалоПериода
		|	И РаботникиОрганизаций.Период <= &КонецПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.ПериодЗавершения,
		|	РаботникиОрганизаций.ГрафикРаботыЗавершения
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО РаботникиОрганизаций.Сотрудник = ВТСотрудники.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийПроверка
		|		ПО (РаботникиОрганизацийПроверка.Сотрудник = РаботникиОрганизаций.Сотрудник)
		|			И (РаботникиОрганизацийПроверка.Период <= РаботникиОрганизаций.ПериодЗавершения)
		|			И (РаботникиОрганизацийПроверка.Период > РаботникиОрганизаций.Период)
		|ГДЕ
		|	РаботникиОрганизаций.Период > &НачалоПериода
		|	И РаботникиОрганизаций.Период <= &КонецПериода
		|	И РаботникиОрганизаций.ПериодЗавершения <= &КонецПериода
		|	И РаботникиОрганизаций.ПериодЗавершения > &НачалоПериода
		|	И РаботникиОрганизацийПроверка.Сотрудник ЕСТЬ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы КАК ГрафикРаботы,
		|	ГрафикиРаботыПоВидамВремени.Дата КАК Дата,
		|	НАЧАЛОПЕРИОДА(ГрафикиРаботыПоВидамВремени.Дата, МЕСЯЦ) КАК ПериодРегистрации,
		|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение,
		|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
		|	ГрафикиРаботыПоВидамВремени.Документ,
		|	ГрафикиРаботыПоВидамВремени.План КАК План
		|ПОМЕСТИТЬ ВТГрафикиРаботыПоВидамВремени
		|ИЗ
		|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|ГДЕ
		|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы В
		|			(ВЫБРАТЬ
		|				Сотрудники.Сотрудник
		|			ИЗ
		|				ВТСотрудники КАК Сотрудники
		|		
		|			ОБЪЕДИНИТЬ ВСЕ
		|		
		|			ВЫБРАТЬ
		|				ГрафикиРаботников.ГрафикРаботы
		|			ИЗ
		|				ВТГрафикиРаботников КАК ГрафикиРаботников)
		|	И ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ГрафикиРаботыПоВидамВремени.ВидУчетаВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГрафикРаботы,
		|	Дата,
		|	ВидУчетаВремени,
		|	План
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТГрафикиРаботыПоВидамВремени.ГрафикРаботы,
		|	ВТГрафикиРаботыПоВидамВремени.Дата,
		|	ВТГрафикиРаботыПоВидамВремени.ПериодРегистрации,
		|	СУММА(ВТГрафикиРаботыПоВидамВремени.ОсновноеЗначение) КАК ОсновноеЗначение,
		|	ВТГрафикиРаботыПоВидамВремени.ВидУчетаВремени
		|ПОМЕСТИТЬ ВТГрафикиРаботыПоОсновнымНачислениям
		|ИЗ
		|	ВТГрафикиРаботыПоВидамВремени КАК ВТГрафикиРаботыПоВидамВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТГрафикиРаботыПоВидамВремени.ГрафикРаботы,
		|	ВТГрафикиРаботыПоВидамВремени.ВидУчетаВремени,
		|	ВТГрафикиРаботыПоВидамВремени.ПериодРегистрации,
		|	ВТГрафикиРаботыПоВидамВремени.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Основной.Сотрудник КАК Сотрудник,
		|	Основной.ГрафикРаботы,
		|	Основной.Период КАК ПериодНачало,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(Вспомогательный.Период) ЕСТЬ NULL 
		|			ТОГДА &КонецПериода
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Вспомогательный.Период), СЕКУНДА, -1)
		|	КОНЕЦ КАК ПериодКонец
		|ПОМЕСТИТЬ ВТГрафикиПериодами
		|ИЗ
		|	ВТГрафикиРаботников КАК Основной
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботников КАК Вспомогательный
		|		ПО Основной.Сотрудник = Вспомогательный.Сотрудник
		|			И (Вспомогательный.Период > Основной.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.Сотрудник,
		|	Основной.ГрафикРаботы,
		|	Основной.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодНачало
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник КАК Сотрудник,
		|	СостояниеРаботников.Период КАК Период,
		|	СостояниеРаботников.Состояние,
		|	СостояниеРаботников.ПериодЗавершения,
		|	СостояниеРаботников.СостояниеЗавершения
		|ПОМЕСТИТЬ ВТСостояниеРаботниковСрез
		|ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(
		|			&НачалоПериода,
		|			Сотрудник В
		|				(ВЫБРАТЬ
		|					Сотрудники.Сотрудник
		|				ИЗ
		|					ВТСотрудники КАК Сотрудники)) КАК СостояниеРаботников
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник КАК Сотрудник,
		|	&НачалоПериода КАК Период,
		|	ВЫБОР
		|		КОГДА СостояниеРаботников.ПериодЗавершения <= &НачалоПериода
		|				И СостояниеРаботников.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА СостояниеРаботников.СостояниеЗавершения
		|		ИНАЧЕ СостояниеРаботников.Состояние
		|	КОНЕЦ КАК Состояние
		|ПОМЕСТИТЬ ВТСостояниеРаботников
		|ИЗ
		|	ВТСостояниеРаботниковСрез КАК СостояниеРаботников
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник,
		|	СостояниеРаботников.ПериодЗавершения,
		|	СостояниеРаботников.СостояниеЗавершения
		|ИЗ
		|	ВТСостояниеРаботниковСрез КАК СостояниеРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковПроверка
		|		ПО (СостояниеРаботниковПроверка.Сотрудник = СостояниеРаботников.Сотрудник)
		|			И (СостояниеРаботниковПроверка.Период <= СостояниеРаботников.ПериодЗавершения)
		|			И (СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период)
		|ГДЕ
		|	СостояниеРаботников.ПериодЗавершения >= &НачалоПериода
		|	И СостояниеРаботников.ПериодЗавершения <= &КонецПериода
		|	И СостояниеРаботниковПроверка.Сотрудник ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник,
		|	СостояниеРаботников.Период,
		|	СостояниеРаботников.Состояние
		|ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО СостояниеРаботников.Сотрудник = ВТСотрудники.Сотрудник
		|ГДЕ
		|	СостояниеРаботников.Период > &НачалоПериода
		|	И СостояниеРаботников.Период <= &КонецПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник,
		|	СостояниеРаботников.ПериодЗавершения,
		|	СостояниеРаботников.СостояниеЗавершения
		|ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО СостояниеРаботников.Сотрудник = ВТСотрудники.Сотрудник
		///Вадим
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК СостояниеРаботниковПроверка
		//|		ПО (СостояниеРаботниковПроверка.Сотрудник = СостояниеРаботников.Сотрудник)
		//|			И (СостояниеРаботниковПроверка.Период < СостояниеРаботников.ПериодЗавершения)
		//|			И (СостояниеРаботниковПроверка.Период > СостояниеРаботников.Период)
		///ВадимКонец
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК ПроверкаПерекрытияПериодовСостоянияРаботников
		|		ПО (ПроверкаПерекрытияПериодовСостоянияРаботников.Сотрудник = СостояниеРаботников.Сотрудник)
		|			И ((НЕ(ПроверкаПерекрытияПериодовСостоянияРаботников.Регистратор = СостояниеРаботников.Регистратор
		|					И ПроверкаПерекрытияПериодовСостоянияРаботников.НомерСтроки = СостояниеРаботников.НомерСтроки)))
		|			И (ПроверкаПерекрытияПериодовСостоянияРаботников.Период = СостояниеРаботников.ПериодЗавершения)
		|ГДЕ
		|	СостояниеРаботников.Период > &НачалоПериода
		|	И СостояниеРаботников.Период <= &КонецПериода
		|	И СостояниеРаботников.ПериодЗавершения <= &КонецПериода
		|	И СостояниеРаботников.ПериодЗавершения > &НачалоПериода
		///Вадим
		//|	И СостояниеРаботниковПроверка.Сотрудник ЕСТЬ NULL 
		///ВадимКонец
		|	И ПроверкаПерекрытияПериодовСостоянияРаботников.Сотрудник ЕСТЬ NULL 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СостояниеРаботников.Сотрудник,
		|	СостояниеРаботников.ДатаНачалаДоп,
		|	СостояниеРаботников.ВидДополнительногоОтпуска.ОбозначениеВТабелеУчетаРабочегоВремени
		|ИЗ
		|	РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники КАК ВТСотрудники
		|		ПО СостояниеРаботников.Сотрудник = ВТСотрудники.Сотрудник
		|ГДЕ
		|	СостояниеРаботников.ДатаНачалаДоп > &НачалоПериода
		|	И СостояниеРаботников.ДатаНачалаДоп <= &КонецПериода
		|	И СостояниеРаботников.ВидДополнительногоОтпуска <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Основной.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА Основной.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Заболевание), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ТравмаНаПроизводстве), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПоУходуЗаРебенком), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПоУходуЗаВзрослым), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Карантин), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Протезирование), ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ПособиеПриДолечивании))
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Болезнь)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Командировка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускЕжегодный)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебный)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенком)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ВынужденныйПрогул)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВынужденныйПрогул)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ГосударственныеОбязанности)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ГосударственныеОбязанности)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Прогулы)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.ДополнительныеВыходныеДниОплачиваемые)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДополнительныеВыходныеДниОплачиваемые)
		|		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияРаботникаОрганизации.Простой)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Простой)
		|		КОГДА Основной.Состояние ССЫЛКА Справочник.КлассификаторИспользованияРабочегоВремени
		|			ТОГДА Основной.Состояние
		|	КОНЕЦ КАК ВидВремени,
		|	Основной.Период КАК ПериодНачало,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(Вспомогательный.Период) ЕСТЬ NULL 
		|			ТОГДА &КонецПериода
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Вспомогательный.Период), СЕКУНДА, -1)
		|	КОНЕЦ КАК ПериодКонец
		|ПОМЕСТИТЬ ВТСостояниеСотрудников
		|ИЗ
		|	ВТСостояниеРаботников КАК Основной
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеРаботников КАК Вспомогательный
		|		ПО Основной.Сотрудник = Вспомогательный.Сотрудник
		|			И (Вспомогательный.Период > Основной.Период)
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.Сотрудник,
		|	Основной.Состояние,
		|	Основной.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодНачало
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникДата.ДатаТабеля КАК ДатаТабеля,
		|	СотрудникДата.ПериодРегистрации КАК ПериодРегистрации,
		|	СотрудникДата.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ГрафикиРаботыПоВидамВремени.ГрафикРаботы ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК НаДатуВведенТабель
		|ПОМЕСТИТЬ ВТДатыЗаполненныеТабелем
		|ИЗ
		|	ВТСотрудникДата КАК СотрудникДата
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (ГрафикиРаботыПоВидамВремени.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
		|			И (ГрафикиРаботыПоВидамВремени.Документ <> ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка))
		|			И СотрудникДата.Сотрудник = ГрафикиРаботыПоВидамВремени.ГрафикРаботы
		|			И (СотрудникДата.ДатаТабеля МЕЖДУ ВЫРАЗИТЬ(ГрафикиРаботыПоВидамВремени.Документ КАК Документ.ТабельУчетаРабочегоВремениОрганизации).ДатаНачалаПериода И ВЫРАЗИТЬ(ГрафикиРаботыПоВидамВремени.Документ КАК Документ.ТабельУчетаРабочегоВремениОрганизации).ДатаОкончанияПериода)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаТабеля,
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НеотфильтрованноеВремя.ПериодРегистрации КАК ПериодРегистрации,
		|	НеотфильтрованноеВремя.Организация КАК Организация,
		|	НеотфильтрованноеВремя.Организация.НаименованиеПолное КАК ИмяОрганизации,
		|	НеотфильтрованноеВремя.Организация.КодПоОКПО КАК КодПоОКПО,
		|	НеотфильтрованноеВремя.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	НеотфильтрованноеВремя.ПодразделениеОрганизации.Наименование КАК ИмяПодразделения,
		|	НеотфильтрованноеВремя.Должность.Наименование КАК Должность,
		|	НеотфильтрованноеВремя.Сотрудник,
		|	НеотфильтрованноеВремя.Сотрудник.Код КАК ТабельныйНомер,
		|	НеотфильтрованноеВремя.СотрудникНаименование,
		|	НеотфильтрованноеВремя.ДатаТабеля,
		|	НеотфильтрованноеВремя.ВидВремени,
		|	НеотфильтрованноеВремя.ВидВремени.БуквенныйКод КАК БуквенныйКод,
		|	НеотфильтрованноеВремя.ВидВремениРабочее.РабочееВремя КАК РабочееВремя,
		|	ВЫБОР
		|		КОГДА НеотфильтрованноеВремя.ВидВремени.РабочееВремя
		|			ТОГДА ЕСТЬNULL(НеотфильтрованноеВремя.Часов, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Часов,
		|	ВЫБОР
		|		КОГДА (НЕ НеотфильтрованноеВремя.ВидВремени.РабочееВремя)
		|			ТОГДА ЕСТЬNULL(НеотфильтрованноеВремя.Часов, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НеотработаноЧасов,
		|	ВЫБОР
		|		КОГДА НеотфильтрованноеВремя.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
		|			ТОГДА 0
		|		КОГДА НеотфильтрованноеВремя.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|			ТОГДА 2
		|		КОГДА НеотфильтрованноеВремя.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|			ТОГДА 3
		|		КОГДА НеотфильтрованноеВремя.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|			ТОГДА 5
		|		КОГДА НеотфильтрованноеВремя.ВидВремени.РабочееВремя
		|			ТОГДА 1
		|		ИНАЧЕ 4
		|	КОНЕЦ КАК ПолеСортировки,
		///Вадим
		//|	НеотфильтрованноеВремя.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени,
		//|	НеотфильтрованноеВремя.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени.РабочееВремя КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя,
		//|	НеотфильтрованноеВремя.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени.БуквенныйКод КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениБуквенныйКод,
				|	NULL КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени,
		|	NULL КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя,
		|	NULL КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениБуквенныйКод,
		///ВадимКонец
		|	Руководитель.Должность КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОРуководителя.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОРуководителя.Имя, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОРуководителя.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОРуководителя.Отчество, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ФИОРуководителя.Фамилия, ФИОРуководителя.ФизЛицо) КАК ФИОРуководителя,
		|	ФИОРуководителя.Имя КАК ИмяРуководителя,
		|	ФИОРуководителя.Фамилия КАК ФамилияРуководителя,
		|	ФИОРуководителя.Отчество КАК ОтчествоРуководителя,
		|	ФИОРуководителя.ФизЛицо КАК ФизЛицоРуководителя,
		|	ЕСТЬNULL(РуководительКадровойСлужбыПодразделения.Должность, РуководительКадровойСлужбыОрганизации.Должность) КАК ДолжностьКадровика,
		|	ВЫБОР
		|		КОГДА ФИОКадровикаПодразделения.Фамилия ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(ВЫБОР
		|						КОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Имя, 1, 1) <> """"
		|							ТОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Имя, 1, 1) + "". ""
		|						ИНАЧЕ """"
		|					КОНЕЦ + ВЫБОР
		|						КОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Отчество, 1, 1) <> """"
		|							ТОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Отчество, 1, 1) + "". ""
		|						ИНАЧЕ """"
		|					КОНЕЦ + ФИОКадровикаОрганизации.Фамилия, РуководительКадровойСлужбыОрганизации.ФизическоеЛицо)
		|		ИНАЧЕ ЕСТЬNULL(ВЫБОР
		|					КОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Имя, 1, 1) <> """"
		|						ТОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Имя, 1, 1) + "". ""
		|					ИНАЧЕ """"
		|				КОНЕЦ + ВЫБОР
		|					КОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Отчество, 1, 1) <> """"
		|						ТОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Отчество, 1, 1) + "". ""
		|					ИНАЧЕ """"
		|				КОНЕЦ + ФИОКадровикаПодразделения.Фамилия, РуководительКадровойСлужбыПодразделения.ФизическоеЛицо)
		|	КОНЕЦ КАК ФИОКадровика,
		|	ВЫБОР
		|		КОГДА ФИОКадровикаПодразделения.Имя ЕСТЬ NULL 
		|			ТОГДА ФИОКадровикаОрганизации.Имя
		|		ИНАЧЕ ФИОКадровикаПодразделения.Имя
		|	КОНЕЦ КАК ИмяКадровика,
		|	ВЫБОР
		|		КОГДА ФИОКадровикаПодразделения.Фамилия ЕСТЬ NULL 
		|			ТОГДА ФИОКадровикаОрганизации.Фамилия
		|		ИНАЧЕ ФИОКадровикаПодразделения.Фамилия
		|	КОНЕЦ КАК ФамилияКадровика,
		|	ВЫБОР
		|		КОГДА ФИОКадровикаПодразделения.Отчество ЕСТЬ NULL 
		|			ТОГДА ФИОКадровикаОрганизации.Отчество
		|		ИНАЧЕ ФИОКадровикаПодразделения.Отчество
		|	КОНЕЦ КАК ОтчествоКадровика,
		|	ВЫБОР
		|		КОГДА РуководительКадровойСлужбыПодразделения.ФизическоеЛицо ЕСТЬ NULL 
		|			ТОГДА РуководительКадровойСлужбыОрганизации.ФизическоеЛицо
		|		ИНАЧЕ РуководительКадровойСлужбыПодразделения.ФизическоеЛицо
		|	КОНЕЦ КАК ФизЛицоКадровика,
		|	Ответственный.ИмяОтветственного КАК ИмяОтветственного,
		|	Ответственный.ФамилияОтветственного КАК ФамилияОтветственного,
		|	Ответственный.ОтчествоОтветственного КАК ОтчествоОтветственного,
		|	Ответственный.ФизлицоОтветственного КАК ФизЛицоОтветственного,
		|	Ответственный.ФИООтветственного КАК ФИООтветственного,
		|	Ответственный.ДолжностьОтветственного КАК ДолжностьОтветственного,
		|	ЕСТЬNULL(НеотфильтрованноеВремя.ВнутрисменныеОтклоненияЧасов, 0) КАК ВнутрисменныеОтклоненияЧасов
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТСотрудникДата.ДатаТабеля КАК ДатаТабеля,
		|		ВЫБОР
		|			КОГДА ВТОсновныеНачисления.ВидВремени ЕСТЬ НЕ NULL 
		|				ТОГДА ВЫБОР
		|						КОГДА ВТОсновныеНачисления.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
		|								И (ЕСТЬNULL(ГрафикПоОсновнымНачислениям.ОсновноеЗначение, 0) = 0
		|									И ЕСТЬNULL(ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение, 0) = 0)
		|							ТОГДА NULL
		|						КОГДА ((НЕ ВТОсновныеНачисления.ПеречислениеВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)))
		|								ИЛИ ВТОсновныеНачисления.ПеречислениеВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)
		|									И ВТОсновныеНачисления.ВидВремениИсходный = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка))
		|								И (ЕСТЬNULL(ГрафикПоОсновнымНачислениям.ОсновноеЗначение, 0) = 0
		|									И ЕСТЬNULL(ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение, 0) = 0)
		|							ТОГДА ВЫБОР
		|									КОГДА ВТРабочеВремя.ВидВремени ЕСТЬ НЕ NULL 
		|											И (ВТРабочеВремя.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники)
		|												ИЛИ ВТОсновныеНачисления.ВидВремениИсходный = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка))
		|										ТОГДА ВТРабочеВремя.ВидВремени
		|									ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|								КОНЕЦ
		|						КОГДА ВТОсновныеНачисления.ВидВремени <> ВТРабочеВремя.ВидВремени
		|								И ВТОсновныеНачисления.ОтработаноЧасов ЕСТЬ NULL 
		|								И ВТРабочеВремя.Часов ЕСТЬ НЕ NULL 
		|								И ВТОсновныеНачисления.ВидВремени.РабочееВремя
		|							ТОГДА ВТРабочеВремя.ВидВремени
		|						ИНАЧЕ ВТОсновныеНачисления.ВидВремени
		|					КОНЕЦ
		|			КОГДА ВТРабочеВремя.ВидВремени ЕСТЬ НЕ NULL 
		|				ТОГДА ВТРабочеВремя.ВидВремени
		|			КОГДА ВТСостояниеСотрудников.ВидВремени ЕСТЬ НЕ NULL 
		|				ТОГДА ВЫБОР
		|						КОГДА (ГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0
		|								ИЛИ ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0)
		|								И (НЕ ВТСостояниеСотрудников.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Болезнь), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)))
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|						ИНАЧЕ ВТСостояниеСотрудников.ВидВремени
		|					КОНЕЦ
		|			КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ НЕ NULL 
		|				ТОГДА ВЫБОР
		|						КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|						КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|						КОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0
		|							ТОГДА ВЫБОР
		|									КОГДА ИндивидуальныйГрафикПоРаботникам.План
		|										ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|									КОГДА (НЕ ИндивидуальныйГрафикПоРаботникам.План)
		|											И ДатыЗаполненныеТабелем.НаДатуВведенТабель
		|										ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|								КОНЕЦ
		|						ИНАЧЕ ЕСТЬNULL(ПлановыеНачисленияСотрудников.КлассификаторВидаВремени, ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
		|					КОНЕЦ
		|			КОГДА ГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ НЕ NULL 
		|				ТОГДА ВЫБОР
		|						КОГДА ГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|						КОГДА ГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|						КОГДА ГрафикПоРаботникам.ОсновноеЗначение = 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|						ИНАЧЕ ЕСТЬNULL(ПлановыеНачисленияСотрудников.КлассификаторВидаВремени, ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
		|					КОНЕЦ
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|		КОНЕЦ КАК ВидВремени,
		|		ВЫБОР
		|			КОГДА ВТОсновныеНачисления.ОтработаноЧасов ЕСТЬ НЕ NULL 
		|				ТОГДА ВТОсновныеНачисления.ОтработаноЧасов
		|			КОГДА ВТРабочеВремя.Часов ЕСТЬ НЕ NULL 
		|				ТОГДА ВТРабочеВремя.Часов
		|			КОГДА ГрафикПоОсновнымНачислениям.ОсновноеЗначение ЕСТЬ НЕ NULL 
		|				ТОГДА ГрафикПоОсновнымНачислениям.ОсновноеЗначение - ВЫБОР
		|						КОГДА ЕСТЬNULL(ВнутрисменныеОтклонения.ВидИспользованияРабочегоВремени.РабочееВремя, ИСТИНА)
		|							ТОГДА 0
		|						ИНАЧЕ ВЫБОР
		|								КОГДА ВТОсновныеНачисления.ВидВремени = ВнутрисменныеОтклонения.ВидИспользованияРабочегоВремени
		|									ТОГДА 0
		|								ИНАЧЕ ЕСТЬNULL(ВнутрисменныеОтклонения.Часов, 0)
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОГДА ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение ЕСТЬ НЕ NULL 
		|				ТОГДА ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение
		|			КОГДА ГрафикПоСостояниюСотрудников.ОсновноеЗначение ЕСТЬ НЕ NULL 
		|				ТОГДА ГрафикПоСостояниюСотрудников.ОсновноеЗначение
		|			КОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение ЕСТЬ НЕ NULL 
		|				ТОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение - ВЫБОР
		|						КОГДА ЕСТЬNULL(ВнутрисменныеОтклонения.ВидИспользованияРабочегоВремени.РабочееВремя, ИСТИНА)
		|							ТОГДА 0
		|						ИНАЧЕ ВЫБОР
		|								КОГДА ВТОсновныеНачисления.ВидВремени = ВнутрисменныеОтклонения.ВидИспользованияРабочегоВремени
		|									ТОГДА 0
		|								ИНАЧЕ ЕСТЬNULL(ВнутрисменныеОтклонения.Часов, 0)
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОГДА ГрафикПоРаботникам.ОсновноеЗначение ЕСТЬ НЕ NULL 
		|				ТОГДА ГрафикПоРаботникам.ОсновноеЗначение - ВЫБОР
		|						КОГДА ВнутрисменныеОтклонения.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные)
		|							ТОГДА 0
		|						ИНАЧЕ ЕСТЬNULL(ВнутрисменныеОтклонения.Часов, 0)
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК Часов,
		|		ВТСотрудникДата.Организация КАК Организация,
		|		ВТСотрудникДата.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|		ВТСотрудникДата.Должность КАК Должность,
		|		ВТСотрудникДата.Сотрудник КАК Сотрудник,
		|		ВТСотрудникДата.СотрудникНаименование КАК СотрудникНаименование,
		|		ВТСотрудникДата.ПериодРегистрации КАК ПериодРегистрации,
		|		ВнутрисменныеОтклонения.ВидИспользованияРабочегоВремени КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени,
		|		ВнутрисменныеОтклонения.Часов КАК ВнутрисменныеОтклоненияЧасов,
		|		ВЫБОР
		|			КОГДА ВТОсновныеНачисления.ВидВремени ЕСТЬ НЕ NULL 
		|				ТОГДА ВЫБОР
		|						КОГДА ВТОсновныеНачисления.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
		|								И (ЕСТЬNULL(ГрафикПоОсновнымНачислениям.ОсновноеЗначение, 0) = 0
		|									И ЕСТЬNULL(ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение, 0) = 0)
		|							ТОГДА NULL
		|						КОГДА ((НЕ ВТОсновныеНачисления.ПеречислениеВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)))
		|								ИЛИ ВТОсновныеНачисления.ПеречислениеВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)
		|									И ВТОсновныеНачисления.ВидВремениИсходный = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка))
		|								И (ЕСТЬNULL(ГрафикПоОсновнымНачислениям.ОсновноеЗначение, 0) = 0
		|									И ЕСТЬNULL(ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение, 0) = 0)
		|							ТОГДА ВЫБОР
		|									КОГДА ВТРабочеВремя.ВидВремени ЕСТЬ НЕ NULL 
		|											И ВТРабочеВремя.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники)
		|										ТОГДА ВТРабочеВремя.ВидВремени
		|									ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|								КОНЕЦ
		|						КОГДА ВТОсновныеНачисления.ВидВремени <> ВТРабочеВремя.ВидВремени
		|								И ВТОсновныеНачисления.ОтработаноЧасов ЕСТЬ NULL 
		|								И ВТРабочеВремя.Часов ЕСТЬ НЕ NULL 
		|								И ВТОсновныеНачисления.ВидВремени.РабочееВремя
		|							ТОГДА ВТРабочеВремя.ВидВремени
		|						ИНАЧЕ ВТОсновныеНачисления.ВидВремени
		|					КОНЕЦ
		|			КОГДА ВТРабочеВремя.ВидВремени ЕСТЬ НЕ NULL 
		|				ТОГДА ВТРабочеВремя.ВидВремени
		|			КОГДА ВТСостояниеСотрудников.ВидВремени ЕСТЬ НЕ NULL 
		|				ТОГДА ВЫБОР
		|						КОГДА (ГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0
		|								ИЛИ ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0)
		|								И (НЕ ВТСостояниеСотрудников.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Болезнь), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Командировка)))
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|						ИНАЧЕ ВТСостояниеСотрудников.ВидВремени
		|					КОНЕЦ
		|			КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ НЕ NULL 
		|				ТОГДА ВЫБОР
		|						КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|						КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|						КОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0
		|							ТОГДА ВЫБОР
		|									КОГДА ИндивидуальныйГрафикПоРаботникам.План
		|										ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|									КОГДА (НЕ ИндивидуальныйГрафикПоРаботникам.План)
		|											И ДатыЗаполненныеТабелем.НаДатуВведенТабель
		|										ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|								КОНЕЦ
		|						ИНАЧЕ ЕСТЬNULL(ПлановыеНачисленияСотрудников.КлассификаторВидаВремени, ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
		|					КОНЕЦ
		|			КОГДА ГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ НЕ NULL 
		|				ТОГДА ВЫБОР
		|						КОГДА ГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|						КОГДА ГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|						КОГДА ГрафикПоРаботникам.ОсновноеЗначение = 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|						ИНАЧЕ ЕСТЬNULL(ПлановыеНачисленияСотрудников.КлассификаторВидаВремени, ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
		|					КОНЕЦ
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|		КОНЕЦ КАК ВидВремениРабочее
		|	ИЗ
		|		ВТСотрудникДата КАК ВТСотрудникДата
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочеВремя КАК ВТРабочеВремя
		|			ПО (ВТРабочеВремя.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И (ВТРабочеВремя.ДатаТабеля = ВТСотрудникДата.ДатаТабеля)
			/////Вадим 18.01.2013 15:20:29
		//|				И (ВТРабочеВремя.ВидВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные))
			/////Вадим Конец
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиПериодами КАК ВТГрафикиПериодами
		|			ПО (ВТГрафикиПериодами.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И ВТСотрудникДата.ДатаТабеля >= ВТГрафикиПериодами.ПериодНачало
		|				И ВТСотрудникДата.ДатаТабеля <= ВТГрафикиПериодами.ПериодКонец
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыЗаполненныеТабелем КАК ДатыЗаполненныеТабелем
		|			ПО (ДатыЗаполненныеТабелем.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И (ДатыЗаполненныеТабелем.ДатаТабеля = ВТСотрудникДата.ДатаТабеля)
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ВнутрисменныеОтклонения.ВидИспользованияРабочегоВремени КАК ВидИспользованияРабочегоВремени,
		|				ВнутрисменныеОтклонения.Часов КАК Часов,
		|				ВнутрисменныеОтклонения.Сотрудник КАК Сотрудник,
		|				ВнутрисменныеОтклонения.Период КАК Период
		|			ИЗ
		|				РегистрНакопления.ВнутрисменноеВремяРаботниковОрганизаций КАК ВнутрисменныеОтклонения
		|			
		|			ОБЪЕДИНИТЬ
		|			
		|			ВЫБРАТЬ
		|				ВТРабочееВремя.ВидВремени,
		|				ВТРабочееВремя.Часов,
		|				ВТРабочееВремя.Сотрудник,
		|				ВТРабочееВремя.ДатаТабеля
		|			ИЗ
		|				ВТРабочеВремя КАК ВТРабочееВремя
		|			ГДЕ
		|				ВТРабочееВремя.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Сверхурочные)) КАК ВнутрисменныеОтклонения
		|			ПО (ВнутрисменныеОтклонения.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И (ВнутрисменныеОтклонения.Период = ВТСотрудникДата.ДатаТабеля)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТОтфильтрованныеОсновныеНачисления КАК ВТОсновныеНачисления
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоОсновнымНачислениям КАК ГрафикПоОсновнымНачислениям
		|				ПО ВТОсновныеНачисления.ГрафикРаботы = ГрафикПоОсновнымНачислениям.ГрафикРаботы
		|					И ВТОсновныеНачисления.ДатаТабеля = ГрафикПоОсновнымНачислениям.Дата
		|					И (ВЫБОР
		|						КОГДА ВТОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|							ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|						КОГДА ВТОсновныеНачисления.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|							ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|					КОНЕЦ = ГрафикПоОсновнымНачислениям.ВидУчетаВремени)
		|					И (ВТОсновныеНачисления.ВидВремени ЕСТЬ НЕ NULL )
		|			ПО ВТСотрудникДата.Сотрудник = ВТОсновныеНачисления.Сотрудник
		|				И ВТСотрудникДата.ДатаТабеля = ВТОсновныеНачисления.ДатаТабеля
		|				И (ВТОсновныеНачисления.ПеречислениеВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы))
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеСотрудников КАК ВТСостояниеСотрудников
		|			ПО ВТСотрудникДата.Сотрудник = ВТСостояниеСотрудников.Сотрудник
		|				И ВТСотрудникДата.ДатаТабеля >= ВТСостояниеСотрудников.ПериодНачало
		|				И ВТСотрудникДата.ДатаТабеля <= ВТСостояниеСотрудников.ПериодКонец
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафикПоСостояниюСотрудников
		|			ПО (ИндивидуальныйГрафикПоСостояниюСотрудников.ГрафикРаботы = ВТСотрудникДата.Сотрудник)
		|				И (ИндивидуальныйГрафикПоСостояниюСотрудников.Дата = ВТСотрудникДата.ДатаТабеля)
		|				И (ВЫБОР
		|					КОГДА ВТСостояниеСотрудников.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|					КОГДА ВТСостояниеСотрудников.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|				КОНЕЦ = ИндивидуальныйГрафикПоСостояниюСотрудников.ВидУчетаВремени)
		|				И (ВТСостояниеСотрудников.ВидВремени ЕСТЬ НЕ NULL )
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикПоСостояниюСотрудников
		|			ПО (ГрафикПоСостояниюСотрудников.ГрафикРаботы = ВТСотрудникДата.ГрафикРаботы)
		|				И (ГрафикПоСостояниюСотрудников.Дата = ВТСотрудникДата.ДатаТабеля)
		|				И (ВЫБОР
		|					КОГДА ВТСостояниеСотрудников.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|					КОГДА ВТСостояниеСотрудников.ВидВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|				КОНЕЦ = ГрафикПоСостояниюСотрудников.ВидУчетаВремени)
		|				И (ВТСостояниеСотрудников.ВидВремени ЕСТЬ НЕ NULL )
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийПриемы
		|			ПО (РаботникиОрганизацийПриемы.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И (РаботникиОрганизацийПриемы.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
		|				И (РаботникиОрганизацийПриемы.Период <= ВТСотрудникДата.ДатаТабеля)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизацийУвольнения
		|			ПО (РаботникиОрганизацийУвольнения.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И (РаботникиОрганизацийУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафикПоРаботникам
		|			ПО (ИндивидуальныйГрафикПоРаботникам.ГрафикРаботы = ВТСотрудникДата.Сотрудник)
		|				И (ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение >= 0)
		|				И (ИндивидуальныйГрафикПоРаботникам.Дата = ВТСотрудникДата.ДатаТабеля)
		|				И (ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам))
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикПоРаботникам
		|			ПО (ГрафикПоРаботникам.ГрафикРаботы = ВТСотрудникДата.ГрафикРаботы)
		|				И (ГрафикПоРаботникам.Дата = ВТСотрудникДата.ДатаТабеля)
		|				И (ГрафикПоРаботникам.ВидУчетаВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
		|				И (ГрафикПоРаботникам.ВидУчетаВремени = ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени
		|					ИЛИ ИндивидуальныйГрафикПоРаботникам.ГрафикРаботы ЕСТЬ NULL )
		|				И ((НЕ(ГрафикПоРаботникам.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам))
		|						И ГрафикПоРаботникам.ОсновноеЗначение = 0)))
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияСотрудников КАК ПлановыеНачисленияСотрудников
		|			ПО (ПлановыеНачисленияСотрудников.Сотрудник = ВТСотрудникДата.Сотрудник)
		|				И (ПлановыеНачисленияСотрудников.ДатаТабеля = ВТСотрудникДата.ДатаТабеля)
		|	ГДЕ
		|		ВЫБОР
		|				КОГДА (ВТОсновныеНачисления.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
		|						ИЛИ ВТРабочеВремя.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)))
		|						И ВТОсновныеНачисления.ВидВремени ЕСТЬ НЕ NULL 
		|						И ВТРабочеВремя.ВидВремени ЕСТЬ НЕ NULL 
		|					ТОГДА ВТОсновныеНачисления.ВидВремени = ВТРабочеВремя.ВидВремени
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И ВЫБОР
		|				КОГДА (ВТОсновныеНачисления.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
		|						ИЛИ ВТРабочеВремя.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)))
		|						И ВТОсновныеНачисления.ВидВремени ЕСТЬ НЕ NULL 
		|						И ВТРабочеВремя.ВидВремени ЕСТЬ НЕ NULL 
		|					ТОГДА ВТОсновныеНачисления.ВидВремени = ВТРабочеВремя.ВидВремени
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И (РаботникиОрганизацийУвольнения.Период ЕСТЬ NULL 
		|				ИЛИ РаботникиОрганизацийУвольнения.Период > ВТСотрудникДата.ДатаТабеля)
		|		И ВЫБОР
		|				КОГДА ВТОсновныеНачисления.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
		|						И ЕСТЬNULL(ГрафикПоОсновнымНачислениям.ОсновноеЗначение, 0) = 0
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И (НЕ((НЕ ВЫБОР
		|							КОГДА ВТРабочеВремя.ВидВремени ЕСТЬ НЕ NULL 
		|								ТОГДА ВТРабочеВремя.ВидВремени
		|							КОГДА ВТОсновныеНачисления.ВидВремени ЕСТЬ НЕ NULL 
		|								ТОГДА ВЫБОР
		|										КОГДА ВТОсновныеНачисления.ВидВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы))
		|												И (ЕСТЬNULL(ГрафикПоОсновнымНачислениям.ОсновноеЗначение, 0) = 0
		|													И ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0)
		|											ТОГДА NULL
		|										КОГДА ВТОсновныеНачисления.ПеречислениеВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)
		|												И ВТОсновныеНачисления.ПеречислениеВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
		|												И (ЕСТЬNULL(ГрафикПоОсновнымНачислениям.ОсновноеЗначение, 0) = 0
		|													И ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0)
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|										ИНАЧЕ ВТОсновныеНачисления.ВидВремени
		|									КОНЕЦ
		|							КОГДА ВТСостояниеСотрудников.ВидВремени ЕСТЬ НЕ NULL 
		|								ТОГДА ВЫБОР
		|										КОГДА ГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0
		|												ИЛИ ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|										ИНАЧЕ ВТСостояниеСотрудников.ВидВремени
		|									КОНЕЦ
		|							КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ НЕ NULL 
		|								ТОГДА ВЫБОР
		|										КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|										КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|										КОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|										ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
		|									КОНЕЦ
		|							КОГДА ГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ НЕ NULL 
		|								ТОГДА ВЫБОР
		|										КОГДА ГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам)
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|										КОГДА ГрафикПоРаботникам.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам)
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|										КОГДА ГрафикПоРаботникам.ОсновноеЗначение = 0
		|											ТОГДА ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|										ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа)
		|									КОНЕЦ
		|							ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
		|						КОНЕЦ В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Праздники)))
		|					И ГрафикПоРаботникам.ВидУчетаВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоНочнымЧасам), ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоВечернимЧасам))))) КАК НеотфильтрованноеВремя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК Руководитель
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОРуководителя
		|			ПО Руководитель.ФизическоеЛицо = ФИОРуководителя.ФизЛицо
		|		ПО НеотфильтрованноеВремя.Организация = Руководитель.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыОрганизации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаОрганизации
		|			ПО РуководительКадровойСлужбыОрганизации.ФизическоеЛицо = ФИОКадровикаОрганизации.ФизЛицо
		|		ПО НеотфильтрованноеВремя.Организация = РуководительКадровойСлужбыОрганизации.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыПодразделения
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаПодразделения
		|			ПО РуководительКадровойСлужбыПодразделения.ФизическоеЛицо = ФИОКадровикаПодразделения.ФизЛицо
		|		ПО НеотфильтрованноеВремя.Организация = РуководительКадровойСлужбыПодразделения.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения < &КонецПериода
		|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделениеЗавершения
		|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение
		|			КОНЕЦ КАК Организация,
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения < &КонецПериода
		|							И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения
		|					ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность
		|				КОНЕЦ) КАК ДолжностьОтветственного,
		|			МАКСИМУМ(ЕСТЬNULL(ВЫБОР
		|						КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|							ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|						ИНАЧЕ """"
		|					КОНЕЦ + ВЫБОР
		|						КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|							ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "". ""
		|						ИНАЧЕ """"
		|					КОНЕЦ + ФИОФизЛицСрезПоследних.Фамилия, РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо)) КАК ФИООтветственного,
		|			МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК ИмяОтветственного,
		|			МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК ОтчествоОтветственного,
		|			МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК ФамилияОтветственного,
		|			МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо) КАК ФизлицоОтветственного
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|					&КонецПериода,
		|					Сотрудник.Физлицо = &Ответственный
		|						И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацийСрезПоследних
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОФизЛицСрезПоследних
		|				ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВЫБОР
		|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения < &КонецПериода
		|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделениеЗавершения
		|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение
		|			КОНЕЦ) КАК Ответственный
		|		ПО НеотфильтрованноеВремя.Организация = Ответственный.Организация
		|ГДЕ
		|	НеотфильтрованноеВремя.ВидВремени ЕСТЬ НЕ NULL ";
		ЗапросТабель.Текст = ЗапросТабель.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации, Организация, " + ?(ГруппироватьПодразделения, "ПодразделениеОрганизации,", "") + " СотрудникНаименование, Сотрудник, Должность, ДатаТабеля, ПолеСортировки, БуквенныйКод";
		
		ТекстШаблона = "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(2010, 1, 1) КАК ДатаТабеля,
		|	ДАТАВРЕМЯ(2010, 1, 1) КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТДатыТабеля";
		
		ЗапросТабель.Текст = СтрЗаменить(ЗапросТабель.Текст, ТекстШаблона, ТекстЗапросаДат);

		Если НЕ (ОтборПодразделения и НЕ ГруппироватьПодразделения и ТипЗнч(Подразделение) <> Тип("СписокЗначений")) тогда
			ЗапросТабель.Текст = СтрЗаменить(ЗапросТабель.Текст, "ВЫРАЗИТЬ(&Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК ПодразделениеОрганизации", "РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации")
   		КонецЕсли;
		
		Если ГруппироватьПодразделения ИЛИ ОтборПодразделения Тогда
			ЗапросТабель.Текст = СтрЗаменить(ЗапросТабель.Текст, "ПО НеотфильтрованноеВремя.Организация = Руководитель.СтруктурнаяЕдиница", "ПО НеотфильтрованноеВремя.ПодразделениеОрганизации = Руководитель.СтруктурнаяЕдиница");
			ЗапросТабель.Текст = СтрЗаменить(ЗапросТабель.Текст, "ПО НеотфильтрованноеВремя.Организация = РуководительКадровойСлужбыПодразделения.СтруктурнаяЕдиница", "ПО НеотфильтрованноеВремя.ПодразделениеОрганизации = РуководительКадровойСлужбыПодразделения.СтруктурнаяЕдиница");
		КонецЕсли;
		
		РезультатЗапроса = ЗапросТабель.Выполнить();
		
		ВыборкаПоРаботнику = РезультатЗапроса.Выбрать();
		
		СоответствиеЦелодневныхНевыходов = Новый Соответствие;
		СоответствиеЦелодневныхНевыходовЧасы = Новый Соответствие;
		ВидыВремениЗаДень = Новый Соответствие;
		ПредыдущаяДата = 0;
		// Выводим информационное сообщение, если табель формируется "вперед"
		//Если РабочаяДата < НачалоДня(КонецПериода) Тогда
		//	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		//	ОбработкаКомментариев.УдалитьСообщения();
		//	ОбработкаКомментариев.ДобавитьСообщение("Формирование табеля за неоконченный месяц", Перечисления.ВидыСообщений.Раздел);
		//	ОбработкаКомментариев.ДобавитьСообщение("При формировании табеля за будущий или текущий месяц, выводятся данные только до рабочей даты (" + Формат(РабочаяДата, "ДЛФ=ДД") + "). Изменить рабочую дату можно в меню ""Сервис/Параметры.""", Перечисления.ВидыСообщений.Информация);
		//	ОбработкаКомментариев.ПоказатьСообщения();
		//КонецЕсли;
		
		Если ГруппироватьПодразделения Тогда
			
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
				
				ОбластьДанныхШапка.Параметры.ДатаНач = Макс(НачалоМесяца(ВыборкаПоРаботнику.ПериодРегистрации), НачалоПериода);
				ОбластьДанныхШапка.Параметры.ДатаКон = Мин(КонецМесяца(ВыборкаПоРаботнику.ПериодРегистрации), КонецПериода);
				
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
					
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПодразделениеОрганизации") Цикл
						Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						НомерПП = 0;
						ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
						ОбластьДанныхШапка.Параметры.ИмяОрганизации = СОКРЛП(ВыборкаПоРаботнику.ИмяОрганизации);
						//Вадим
						//ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
						//ОбластьДанныхПодвал.Параметры.ФИООтветственного = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоОтветственного, ВыборкаПоРаботнику.ФамилияОтветственного, ВыборкаПоРаботнику.ИмяОтветственного, ВыборкаПоРаботнику.ОтчествоОтветственного);
						//ОбластьДанныхПодвал.Параметры.ФИОРуководителя   = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоРуководителя, ВыборкаПоРаботнику.ФамилияРуководителя, ВыборкаПоРаботнику.ИмяРуководителя, ВыборкаПоРаботнику.ОтчествоРуководителя);
						//ОбластьДанныхПодвал.Параметры.ФИОКадровика      = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоКадровика, ВыборкаПоРаботнику.ФамилияКадровика, ВыборкаПоРаботнику.ИмяКадровика, ВыборкаПоРаботнику.ОтчествоКадровика);
						///Вадим
						ДокументРезультат.Вывести(ОбластьДанныхШапка);
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Должность") Цикл
							Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
								Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
									/////Вадим 27.06.2013 8:57:15
								Если ИсключатьУволенныхНаКонецПериода  Тогда
									Если СотрудникУволен(ВыборкаПоРаботнику.Сотрудник,КонецПериода) тогда
										Продолжить;
									КонецЕсли;	
								КонецЕсли;
								
								////ВадимКонец

									НомерПП = НомерПП + 1;
									
									ДниПерваяПоловина  = 0;
									ЧасыПерваяПоловина = 0;
									ДниВтораяПоловина  = 0;
									ЧасыВтораяПоловина = 0;
									
									ПредыдущаяДата = Дата(1,1,1);
									
									Для Сч = 1 По ПараметровВстроке Цикл
										ОбластьДанныхСтрока.Параметры.Установить(Сч - 1,""); 
									КонецЦикла;
									СоответствиеЦелодневныхНевыходов.Очистить();
									СоответствиеЦелодневныхНевыходовЧасы.Очистить();
									
									ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
										/////Вадим 18.01.2013 14:59:08
								//ОбластьДанныхСтрока.Параметры.Работник = СокрП(ВыборкаПоРаботнику.СотрудникНаименование) + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность;
								ОбластьДанныхСтрока.Параметры.Работник = СокрП(ВыборкаПоРаботнику.Сотрудник) + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность;
								
								
								////ВадимКонец
									ОбластьДанныхСтрока.Параметры.ФизЛицо = ВыборкаПоРаботнику.Сотрудник;
									ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
									//+ Dansur  22.10.2013 11:57:19
									/////Вадим 22.01.2013 12:11:05
									прг_массивДат=Новый СписокЗначений;	
									////ВадимКонец
                                    //- Dansur  22.10.2013 11:57:22
									Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ДатаТабеля") Цикл
										НеВключаемВДниОтработано = Ложь; //Blik  251115 46282
										ЧасыПК=0;
										СимволДня = ""; 
										ОтработаноЧасовЗаДень = 0;
										ОтработаноЧасовЗаДеньСтр = "";
										НомерДня = Строка(День(ВыборкаПоРаботнику.ДатаТабеля));
										ПерваяПоловина = День(ВыборкаПоРаботнику.ДатаТабеля) <= 15;
										УчитыватьВыходнойДень = Истина;
										
										Пока ВыборкаПоРаботнику.Следующий() Цикл
											 ЧасыПК=0;
											Если НЕ ПредыдущаяДата = ВыборкаПоРаботнику.ДатаТабеля Тогда
												// Очищаем соответствие
												ВидыВремениЗаДень.Очистить();
											КонецЕсли;
											
											Если  ВыборкаПоРаботнику.ВидВремени = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени 
												И ВыборкаПоРаботнику.РабочееВремя Тогда
												ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
												Продолжить;
											КонецЕсли;
											
											Если ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Праздники Тогда
												УчитыватьВыходнойДень = Ложь;
											ИначеЕсли (ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни
													   ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Командировка) И НЕ УчитыватьВыходнойДень Тогда
												Продолжить;
											КонецЕсли;
											Если ВидыВремениЗаДень.Получить(ВыборкаПоРаботнику.ВидВремени) = Неопределено Тогда
												ОсновнойВидВремениПолучен = Ложь;
												БуквенныйКод = ВыборкаПоРаботнику.БуквенныйКод;
												СимволДня = СимволДня + "/" + БуквенныйКод;
											Иначе
												ОсновнойВидВремениПолучен = Истина;
											КонецЕсли;
											//Blik  46282 231115 н
											Если  ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации 
												Тогда
												ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
												Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов = 8 Тогда
													НеВключаемВДниОтработано= Истина;
												Иначе
													ЧасыПК = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
												КонецЕсли;
											КонецЕсли;
											//Blik 46282 231115 к
											
											// Обработка внутрисменных отклонений
											Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени <> NULL 
												И ВыборкаПоРаботнику.РабочееВремя
												И НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
												ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы) Тогда
												
												ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
												
												ЧасыВходятВЯвку = (ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени <> Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные)
												И (ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя);
												
												ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень - 
												?(ЧасыВходятВЯвку, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов, 0);
												БуквенныйКод = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениБуквенныйКод;
												СимволДня = СимволДня + "/" + БуквенныйКод;
												ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр +
												?(ОсновнойВидВремениПолучен, "", "/" + Строка(ВыборкаПоРаботнику.Часов - ?(ЧасыВходятВЯвку, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов, 0)))
												+ "/" + Строка(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
												Если Не ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя Тогда
													Если СоответствиеЦелодневныхНевыходов.Получить(БуквенныйКод) = Неопределено Тогда
														СоответствиеЦелодневныхНевыходов.Вставить(БуквенныйКод, 0);
														СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
													Иначе
														СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод,  ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(БуквенныйКод));
													КонецЕсли;
												КонецЕсли;										
											ИначеЕсли НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
												ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы) 
												И ВыборкаПоРаботнику.РабочееВремя 
												И НЕ ОсновнойВидВремениПолучен Тогда
												
												ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
												ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
											ИначеЕсли ВыборкаПоРаботнику.РабочееВремя И НЕ ОсновнойВидВремениПолучен Тогда
												ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
												//ИначеЕсли (НЕ ВыборкаПоРаботнику.РабочееВремя) И (ВыборкаПоРаботнику.Часов = 0) И (ВыборкаПоРаботнику.НеотработаноЧасов > 0) 
												//	И (ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Командировка) Тогда
												//	ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.НеотработаноЧасов);
												//	ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.НеотработаноЧасов;
											КонецЕсли;
											
											Если (НЕ ВыборкаПоРаботнику.РабочееВремя)
												//И ВыборкаПоРаботнику.Часов <> 0
												И (ВыборкаПоРаботнику.ВидВремени <> Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни) Тогда
												Если  СоответствиеЦелодневныхНевыходов.Получить(БуквенныйКод) = Неопределено Тогда
													СоответствиеЦелодневныхНевыходов.Вставить(БуквенныйКод, ?(ВыборкаПоРаботнику.НеотработаноЧасов <> 0, 1, 0));
													СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод, ВыборкаПоРаботнику.НеотработаноЧасов);
												Иначе
													СоответствиеЦелодневныхНевыходов.Вставить(БуквенныйКод,  ?(ВыборкаПоРаботнику.НеотработаноЧасов <> 0, 1, 0) + СоответствиеЦелодневныхНевыходов.Получить(БуквенныйКод));
													СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод, ВыборкаПоРаботнику.НеотработаноЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(БуквенныйКод));
												КонецЕсли;
											
												Если ОтработаноЧасовЗаДень > 0 И ВыборкаПоРаботнику.НеотработаноЧасов > 0 тогда
													ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.НеотработаноЧасов);
												КонецЕсли;
											КонецЕсли;
											
											ПредыдущаяДата = ВыборкаПоРаботнику.ДатаТабеля;
											//+ Dansur  22.10.2013 11:55:38
											/////Вадим 22.01.2013 12:11:26
											Если прг_массивДат.НайтиПоЗначению(ВыборкаПоРаботнику.ДатаТабеля)=Неопределено тогда
												прг_массивДат.Добавить(ВыборкаПоРаботнику.ДатаТабеля);
										    Конецесли;
										 	////ВадимКонец
											//- Dansur  22.10.2013 11:55:41
											
											Если ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Работа И ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов > 0 Тогда
												Если ВидыВремениЗаДень.Получить(ВыборкаПоРаботнику.ВидВремени) = Неопределено Тогда
													ВидыВремениЗаДень.Вставить(ВыборкаПоРаботнику.ВидВремени, ВыборкаПоРаботнику.Часов);	
												Иначе
													ВидыВремениЗаДень.Вставить(ВыборкаПоРаботнику.ВидВремени, ВидыВремениЗаДень.Получить(ВыборкаПоРаботнику.ВидВремени) - ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);	
												КонецЕсли;
											Иначе
												ВидыВремениЗаДень.Вставить(ВыборкаПоРаботнику.ВидВремени, ВыборкаПоРаботнику.Часов);	
											КонецЕсли;
											ВидыВремениЗаДень.Вставить(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
										КонецЦикла;	
										СимволДня = Сред(СимволДня, 2);
										ОтработаноЧасовЗаДеньСтр = Сред(ОтработаноЧасовЗаДеньСтр, 2);
										Если ВидыВремениЗаДень.Получить(Справочники.КлассификаторИспользованияРабочегоВремени.Работа) <> Неопределено
											И ВидыВремениЗаДень.Получить(Справочники.КлассификаторИспользованияРабочегоВремени.Работа) <= 0 
											И Лев(СимволДня, СтрДлина(Справочники.КлассификаторИспользованияРабочегоВремени.Работа.БуквенныйКод)) =  Справочники.КлассификаторИспользованияРабочегоВремени.Работа.БуквенныйКод
											Тогда
											Разд = Найти(СимволДня, "/");
											Если Разд > 1 Тогда
												СимволДня = Сред(СимволДня, Разд+1);
											КонецЕсли;
											Разд = Найти(ОтработаноЧасовЗаДеньСтр, "/");
											Если Разд > 1 Тогда
												ОтработаноЧасовЗаДеньСтр = Сред(ОтработаноЧасовЗаДеньСтр, Разд+1);
											КонецЕсли;
											
										КонецЕсли;
										ОбластьДанныхСтрока.Параметры["Символ"+НомерДня] = СимволДня;
										ОбластьДанныхСтрока.Параметры["ДополнительноеЗначение"+НомерДня] = Формат(ОтработаноЧасовЗаДеньСтр);
										
										Если ОтработаноЧасовЗаДень <> 0 и НеВключаемВДниОтработано=Ложь Тогда
											//Blik 251115 46282 добавлена проверка на невключение в отработано всего дней ПК
											Если ЧасыПК <> 0 Тогда
												Если ПерваяПоловина Тогда
													ДниПерваяПоловина = ДниПерваяПоловина + 1;
													ЧасыПерваяПоловина = ЧасыПерваяПоловина + ЧасыПК;
												Иначе
													ДниВтораяПоловина = ДниВтораяПоловина + 1;
													ЧасыВтораяПоловина = ЧасыВтораяПоловина + ЧасыПК;
												КонецЕсли; 	
											Иначе
												Если ПерваяПоловина Тогда
													ДниПерваяПоловина = ДниПерваяПоловина + 1;
													ЧасыПерваяПоловина = ЧасыПерваяПоловина + ОтработаноЧасовЗаДень;
												Иначе
													ДниВтораяПоловина = ДниВтораяПоловина + 1;
													ЧасыВтораяПоловина = ЧасыВтораяПоловина + ОтработаноЧасовЗаДень;
												КонецЕсли; 										
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
									
									//	заполняем раздел "Отработано за"
									ОбластьДанныхСтрока.Параметры.ДниПерваяПоловина  = ДниПерваяПоловина;
									ОбластьДанныхСтрока.Параметры.ЧасыПерваяПоловина = ЧасыПерваяПоловина;
									ОбластьДанныхСтрока.Параметры.ДниВтораяПоловина  = ДниВтораяПоловина;
									ОбластьДанныхСтрока.Параметры.ЧасыВтораяПоловина = ЧасыВтораяПоловина;
									ОбластьДанныхСтрока.Параметры.ДниЗаМесяц  = ДниПерваяПоловина + ДниВтораяПоловина;
									ОбластьДанныхСтрока.Параметры.ЧасыЗаМесяц = ЧасыПерваяПоловина + ЧасыВтораяПоловина;
									
									// заполняем раздел "Неявки по причинам"
									//+ Dansur  22.10.2013 11:17:52
									/////Вадим 18.01.2013 11:38:27
									СписокРаботСверхНормы=ПолучитьСписокРаботСверхНормы(НачалоПериода,КонецПериода,ОбластьДанныхСтрока.Параметры.ФизЛицо,прг_массивДат);
									Авт_СчВидОплаты = 0;
									Для каждого Элемент Из СписокРаботСверхНормы Цикл
										Авт_СчВидОплаты = Авт_СчВидОплаты + 1;
										ОбластьДанныхСтрока.Параметры["ПРГ_ВидОплатыКод" + Строка(Авт_СчВидОплаты)] = Элемент.код;
										
										ОбластьДанныхСтрока.Параметры["ПРГ_ВидОплатыДниЧасы" + Строка(Авт_СчВидОплаты)] = "(" + Элемент.Количество+ ")";
									КонецЦикла;
									
									СписокВыходных=получитьтаблицунеявок(НачалоПериода,КонецПериода,ОбластьДанныхСтрока.Параметры.ФизЛицо,прг_массивДат);
									Авт_СчВидОплаты = 0;
									Для каждого Элемент Из СписокВыходных Цикл
										Авт_СчВидОплаты = Авт_СчВидОплаты + 1;
										ОбластьДанныхСтрока.Параметры["НеявкаКод" + Строка(Авт_СчВидОплаты)] = Элемент.код;
										
										ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(Авт_СчВидОплаты)] = "(" + Элемент.Количество+ ")";
									КонецЦикла;

									ПроверкаОТпускПраздники(НачалоПериода,КонецПериода,ОбластьДанныхСтрока.Параметры.ФизЛицо,ОбластьДанныхСтрока.Параметры);
									
									
									
									//СчНеявок = 0;
									//Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
									//	Если (Элемент.Значение > 0) ИЛИ СоответствиеЦелодневныхНевыходовЧасы.Получить(Элемент.Ключ) > 0 Тогда
									//		СчНеявок = СчНеявок + 1;
									//		ОбластьДанныхСтрока.Параметры["НеявкаКод" + Строка(СчНеявок)] = Элемент.Ключ;
									//		КоличествоЧасов = Строка(СоответствиеЦелодневныхНевыходовЧасы.Получить(Элемент.Ключ));
									//		Если КоличествоЧасов <> "0" Тогда
									//			ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = Формат(Элемент.Значение) + "(" + КоличествоЧасов + ")";
									//		Иначе
									//			ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = Формат(Элемент.Значение);
									//		КонецЕсли;
									//	КонецЕсли;
									//КонецЦикла; 
									//
									/////ВадимКонец
									//- Dansur  22.10.2013 11:17:39
									// Проверим, уместится ли строка на странице или надо открывать новую страницу
									Если Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхСтрока) Тогда
										ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
										ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
									КонецЕсли;
									
									ДокументРезультат.Вывести(ОбластьДанныхСтрока);
									
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
						Если Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхПодвал) Тогда
							ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
							ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
							ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
						КонецЕсли;
						ДокументРезультат.Вывести(ОбластьДанныхПодвал);
					КонецЦикла;
				КонецЦикла;
				
			КонецЦикла;	
			
		Иначе
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
				
				ОбластьДанныхШапка.Параметры.ДатаНач = Макс(НачалоМесяца(ВыборкаПоРаботнику.ПериодРегистрации), НачалоПериода);
				ОбластьДанныхШапка.Параметры.ДатаКон = Мин(КонецМесяца(ВыборкаПоРаботнику.ПериодРегистрации), КонецПериода);
				
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
					
					Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					НомерПП = 0;
					ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
					ОбластьДанныхШапка.Параметры.ИмяОрганизации = СОКРЛП(ВыборкаПоРаботнику.ИмяОрганизации);
					ОбластьДанныхШапка.Параметры.ИмяПодразделения = ?(ОтборПодразделения, Подразделение, "");
					ОбластьДанныхШапка.Параметры.ДатаЗаполнения = ?(Не ЗначениеЗаполнено(ДатаЗаполнения),"",?(ТипЗнч(ДатаЗаполнения) = Тип("СтандартнаяДатаНачала"), ДатаЗаполнения.Дата, ДатаЗаполнения));
					ОбластьДанныхШапка.Параметры.НомерДокумента = НомерДокумента;
					ДокументРезультат.Вывести(ОбластьДанныхШапка);
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Должность") Цикл
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
							Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
								
								/////Вадим 27.06.2013 8:57:15
								Если ИсключатьУволенныхНаКонецПериода  Тогда
									Если СотрудникУволен(ВыборкаПоРаботнику.Сотрудник,КонецПериода) тогда
										Продолжить;
									КонецЕсли;	
								КонецЕсли;
								
								////ВадимКонец
								
								
								
								НомерПП = НомерПП + 1;
								
								ДниПерваяПоловина  = 0;
								ЧасыПерваяПоловина = 0;
								ДниВтораяПоловина  = 0;
								ЧасыВтораяПоловина = 0;
								
								ПредыдущаяДата = Дата(1,1,1);
								
								Для Сч = 1 По ПараметровВстроке Цикл
									ОбластьДанныхСтрока.Параметры.Установить(Сч - 1,""); 
								КонецЦикла;
 								СоответствиеЦелодневныхНевыходов.Очистить();
								СоответствиеЦелодневныхНевыходовЧасы.Очистить();
								ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
								/////Вадим 18.01.2013 14:59:08
								//ОбластьДанныхСтрока.Параметры.Работник = СокрП(ВыборкаПоРаботнику.СотрудникНаименование) + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность;
								ОбластьДанныхСтрока.Параметры.Работник = СокрП(ВыборкаПоРаботнику.Сотрудник) + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность;
								////ВадимКонец
								ОбластьДанныхСтрока.Параметры.ФизЛицо = ВыборкаПоРаботнику.Сотрудник;
								ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
								/////Вадим 17.07.2013 13:49:54
								//ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
								
								//ОбластьДанныхПодвал.Параметры.ФИООтветственного = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоОтветственного, ВыборкаПоРаботнику.ФамилияОтветственного, ВыборкаПоРаботнику.ИмяОтветственного, ВыборкаПоРаботнику.ОтчествоОтветственного);
								//ОбластьДанныхПодвал.Параметры.ФИОРуководителя   = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоРуководителя, ВыборкаПоРаботнику.ФамилияРуководителя, ВыборкаПоРаботнику.ИмяРуководителя, ВыборкаПоРаботнику.ОтчествоРуководителя);
								//ОбластьДанныхПодвал.Параметры.ФИОКадровика      = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоКадровика, ВыборкаПоРаботнику.ФамилияКадровика, ВыборкаПоРаботнику.ИмяКадровика, ВыборкаПоРаботнику.ОтчествоКадровика);
												////ВадимКонец
								
																	/////Вадим 22.01.2013 12:11:05
									прг_массивДат=Новый СписокЗначений;	
									////ВадимКонец
								Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ДатаТабеля") Цикл
									НеВключаемВДниОтработано = Ложь; //Blik  251115 46282
									ЧасыПК=0;
									СимволДня = ""; ОтработаноЧасовЗаДень = 0;
									ОтработаноЧасовЗаДеньСтр = "";
									
									НомерДня = Строка(День(ВыборкаПоРаботнику.ДатаТабеля));
									ПерваяПоловина = День(ВыборкаПоРаботнику.ДатаТабеля) <= 15;
									УчитыватьВыходнойДень = Истина;
									
									Пока ВыборкаПоРаботнику.Следующий() Цикл
										
										Если НЕ ПредыдущаяДата = ВыборкаПоРаботнику.ДатаТабеля Тогда
											// Очищаем соответствие
											ВидыВремениЗаДень.Очистить();
										КонецЕсли;
										
										Если  ВыборкаПоРаботнику.ВидВремени = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени 
											И ВыборкаПоРаботнику.РабочееВремя Тогда
											ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
											Продолжить;
										КонецЕсли;
										
										Если ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Праздники Тогда
											УчитыватьВыходнойДень = Ложь;
										ИначеЕсли (ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни
												   ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Командировка) И НЕ УчитыватьВыходнойДень Тогда
											Продолжить;
										КонецЕсли;
										
										Если ВидыВремениЗаДень.Получить(ВыборкаПоРаботнику.ВидВремени) = Неопределено Тогда
											ОсновнойВидВремениПолучен = Ложь;
											БуквенныйКод = ВыборкаПоРаботнику.БуквенныйКод;
											СимволДня = СимволДня + "/" + БуквенныйКод;
										Иначе
											ОсновнойВидВремениПолучен = Истина;
										КонецЕсли;
										//Blik  46282 231115 н
										Если  ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПовышениеКвалификации 
											 Тогда
											 ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
											 Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов = 8 Тогда
												 НеВключаемВДниОтработано= Истина;
											 Иначе
												 ЧасыПК = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
											 КонецЕсли;
										КонецЕсли;
                                        //Blik 46282 231115 к
										// Обработка внутрисменных отклонений
										Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени <> NULL 
											И ВыборкаПоРаботнику.РабочееВремя
											И НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
											ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы) Тогда
											
											
											ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
											
											
											ЧасыВходятВЯвку = (ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени <> Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные)
											И (ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя);
											
											Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени
												= Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные Тогда
												ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
												ЧасыВходятВЯвку = Ложь;
											ИначеЕсли ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя Тогда
												ЧасыВходятВЯвку = Истина;
												ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень - ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
											Иначе
												ЧасыВходятВЯвку = Ложь;
											КонецЕсли;
											//ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень - 
											//	?(ЧасыВходятВЯвку, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов, 0);
											БуквенныйКод = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениБуквенныйКод;
											СимволДня = СимволДня + "/" + БуквенныйКод;
											ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + 
											?(ОсновнойВидВремениПолучен, "", "/" + Строка(ВыборкаПоРаботнику.Часов - ?(ЧасыВходятВЯвку, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов, 0)))
											+ "/" + Строка(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
											
											Если Не ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремениРабочееВремя Тогда	
												Если СоответствиеЦелодневныхНевыходов.Получить(БуквенныйКод) = Неопределено Тогда
													СоответствиеЦелодневныхНевыходов.Вставить(БуквенныйКод, 0);
													СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
												Иначе
													СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод,  ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(БуквенныйКод));
												КонецЕсли;
											КонецЕсли;
										ИначеЕсли НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
											ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы) 
											И ВыборкаПоРаботнику.РабочееВремя 
											И НЕ ОсновнойВидВремениПолучен Тогда
											
											ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
											ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
										ИначеЕсли ВыборкаПоРаботнику.РабочееВремя И НЕ ОсновнойВидВремениПолучен Тогда
											ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
											//ИначеЕсли (НЕ ВыборкаПоРаботнику.РабочееВремя) И (ВыборкаПоРаботнику.Часов = 0) И (ВыборкаПоРаботнику.НеотработаноЧасов > 0) 
											//	И (ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Командировка) Тогда
											//	ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.НеотработаноЧасов);
											//	ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.НеотработаноЧасов;
										КонецЕсли;
										
										Если (НЕ ВыборкаПоРаботнику.РабочееВремя)
											И ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени = NULL
											И (ВыборкаПоРаботнику.ВидВремени <> Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни) Тогда
											
											Если СоответствиеЦелодневныхНевыходов.Получить(БуквенныйКод) = Неопределено Тогда
												СоответствиеЦелодневныхНевыходов.Вставить(БуквенныйКод, ?(ВыборкаПоРаботнику.НеотработаноЧасов <> 0, 1, 0));
												СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод, ВыборкаПоРаботнику.НеотработаноЧасов);
											Иначе
												СоответствиеЦелодневныхНевыходов.Вставить(БуквенныйКод,  ?(ВыборкаПоРаботнику.НеотработаноЧасов <> 0, 1, 0) + СоответствиеЦелодневныхНевыходов.Получить(БуквенныйКод));
												СоответствиеЦелодневныхНевыходовЧасы.Вставить(БуквенныйКод, ВыборкаПоРаботнику.НеотработаноЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(БуквенныйКод));
											КонецЕсли;
											
											Если ОтработаноЧасовЗаДень > 0 И ВыборкаПоРаботнику.НеотработаноЧасов > 0 тогда
												ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.НеотработаноЧасов);
											КонецЕсли;
											
										КонецЕсли;
										/////Вадим 22.01.2013 12:11:26
										Если прг_массивДат.НайтиПоЗначению(ВыборкаПоРаботнику.ДатаТабеля)=Неопределено тогда
											прг_массивДат.Добавить(ВыборкаПоРаботнику.ДатаТабеля);
									    Конецесли;
									 	////ВадимКонец
										ПредыдущаяДата = ВыборкаПоРаботнику.ДатаТабеля;
										Если ВыборкаПоРаботнику.ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Работа И ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов > 0 Тогда
											Если ВидыВремениЗаДень.Получить(ВыборкаПоРаботнику.ВидВремени) = Неопределено Тогда
												ВидыВремениЗаДень.Вставить(ВыборкаПоРаботнику.ВидВремени, ВыборкаПоРаботнику.Часов);	
											Иначе
												ВидыВремениЗаДень.Вставить(ВыборкаПоРаботнику.ВидВремени, ВидыВремениЗаДень.Получить(ВыборкаПоРаботнику.ВидВремени) - ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);	
											КонецЕсли;
										Иначе
											ВидыВремениЗаДень.Вставить(ВыборкаПоРаботнику.ВидВремени, ВыборкаПоРаботнику.Часов);	
										КонецЕсли;
										ВидыВремениЗаДень.Вставить(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
										
										
									КонецЦикла;	
									СимволДня = Сред(СимволДня, 2);
									ОтработаноЧасовЗаДеньСтр = Сред(ОтработаноЧасовЗаДеньСтр, 2);
									Если ВидыВремениЗаДень.Получить(Справочники.КлассификаторИспользованияРабочегоВремени.Работа) <> Неопределено
										И ВидыВремениЗаДень.Получить(Справочники.КлассификаторИспользованияРабочегоВремени.Работа) <= 0 
										И Лев(СимволДня, СтрДлина(Справочники.КлассификаторИспользованияРабочегоВремени.Работа.БуквенныйКод)) =  Справочники.КлассификаторИспользованияРабочегоВремени.Работа.БуквенныйКод
										Тогда
										Разд = Найти(СимволДня, "/");
										Если Разд > 1 Тогда
											СимволДня = Сред(СимволДня, Разд+1);
										КонецЕсли;
										Разд = Найти(ОтработаноЧасовЗаДеньСтр, "/");
										Если Разд > 1 Тогда
											ОтработаноЧасовЗаДеньСтр = Сред(ОтработаноЧасовЗаДеньСтр, Разд+1);
										КонецЕсли;
										
									КонецЕсли;
									ОбластьДанныхСтрока.Параметры["Символ"+НомерДня] = СимволДня;
									ОбластьДанныхСтрока.Параметры["ДополнительноеЗначение"+НомерДня] = Формат(ОтработаноЧасовЗаДеньСтр);
									
									Если ОтработаноЧасовЗаДень <> 0 и НеВключаемВДниОтработано=Ложь Тогда 
										//Blik 251115 46282 добавлена проверка на невключение в отработано всего дней ПК
										Если ЧасыПК <> 0 Тогда
											 Если ПерваяПоловина Тогда
												ДниПерваяПоловина = ДниПерваяПоловина + 1;
												ЧасыПерваяПоловина = ЧасыПерваяПоловина + ЧасыПК;
											Иначе
												ДниВтораяПоловина = ДниВтораяПоловина + 1;
												ЧасыВтораяПоловина = ЧасыВтораяПоловина + ЧасыПК;
											КонецЕсли; 	
										Иначе
											Если ПерваяПоловина Тогда
												ДниПерваяПоловина = ДниПерваяПоловина + 1;
												ЧасыПерваяПоловина = ЧасыПерваяПоловина + ОтработаноЧасовЗаДень;
											Иначе
												ДниВтораяПоловина = ДниВтораяПоловина + 1;
												ЧасыВтораяПоловина = ЧасыВтораяПоловина + ОтработаноЧасовЗаДень;
											КонецЕсли; 										
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								
								//	заполняем раздел "Отработано за"
								ОбластьДанныхСтрока.Параметры.ДниПерваяПоловина  = ДниПерваяПоловина;
								ОбластьДанныхСтрока.Параметры.ЧасыПерваяПоловина = ЧасыПерваяПоловина;
								ОбластьДанныхСтрока.Параметры.ДниВтораяПоловина  = ДниВтораяПоловина;
								ОбластьДанныхСтрока.Параметры.ЧасыВтораяПоловина = ЧасыВтораяПоловина;
								ОбластьДанныхСтрока.Параметры.ДниЗаМесяц  = ДниПерваяПоловина + ДниВтораяПоловина;
								ОбластьДанныхСтрока.Параметры.ЧасыЗаМесяц = ЧасыПерваяПоловина + ЧасыВтораяПоловина;
								
								// заполняем раздел "Неявки по причинам"
								/////Вадим 18.01.2013 11:38:27
								СписокРаботСверхНормы=ПолучитьСписокРаботСверхНормы(НачалоПериода,КонецПериода,ОбластьДанныхСтрока.Параметры.ФизЛицо,прг_массивДат);
								Авт_СчВидОплаты = 0;
								Для каждого Элемент Из СписокРаботСверхНормы Цикл
									Авт_СчВидОплаты = Авт_СчВидОплаты + 1;
									ОбластьДанныхСтрока.Параметры["ПРГ_ВидОплатыКод" + Строка(Авт_СчВидОплаты)] = Элемент.код;
									
									ОбластьДанныхСтрока.Параметры["ПРГ_ВидОплатыДниЧасы" + Строка(Авт_СчВидОплаты)] = "(" + Элемент.Количество+ ")";
								КонецЦикла;
								
								СписокВыходных=получитьтаблицунеявок(НачалоПериода,КонецПериода,ОбластьДанныхСтрока.Параметры.ФизЛицо,прг_массивДат);
								Авт_СчВидОплаты = 0;
								Для каждого Элемент Из СписокВыходных Цикл
									Авт_СчВидОплаты = Авт_СчВидОплаты + 1;
									ОбластьДанныхСтрока.Параметры["НеявкаКод" + Строка(Авт_СчВидОплаты)] = Элемент.код;
									
									ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(Авт_СчВидОплаты)] = "(" + Элемент.Количество+ ")";
								КонецЦикла;

								ПроверкаОТпускПраздники(НачалоПериода,КонецПериода,ОбластьДанныхСтрока.Параметры.ФизЛицо,ОбластьДанныхСтрока.Параметры);
								
								
								
								//СчНеявок = 0;
								//Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
								//	//Если (Элемент.Значение > 0) ИЛИ СоответствиеЦелодневныхНевыходовЧасы.Получить(Элемент.Ключ) > 0 Тогда
								//	СчНеявок = СчНеявок + 1;
								//	ОбластьДанныхСтрока.Параметры["НеявкаКод" + Строка(СчНеявок)] = Элемент.Ключ;
								//	КоличествоЧасов = Строка(СоответствиеЦелодневныхНевыходовЧасы.Получить(Элемент.Ключ));
								//	Если КоличествоЧасов <> "0" Тогда
								//		ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = формат(Элемент.Значение) + "(" + КоличествоЧасов + ")";
								//	Иначе
								//		ОбластьДанныхСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = формат(Элемент.Значение);
								//	КонецЕсли;
								//	//КонецЕсли;
								//КонецЦикла; 
								/////ВадимКонец
								// Проверим, уместится ли строка на странице или надо открывать новую страницу
								Если Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхСтрока) Тогда
									ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
									ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
								КонецЕсли;
								
								ДокументРезультат.Вывести(ОбластьДанныхСтрока);
								
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
				Если Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхПодвал) Тогда
					ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
					ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
				КонецЕсли;
				ДокументРезультат.Вывести(ОбластьДанныхПодвал);
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Режим = "Бланк" Тогда 
		
		ЗапросТабель.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.Сотрудник КАК Справочник.СотрудникиОрганизаций) КАК Сотрудник,
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.Организация КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(&Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК ПодразделениеОрганизации,
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.Должность КАК Справочник.ДолжностиОрганизаций) КАК Должность,
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.ГрафикРаботы КАК Справочник.ГрафикиРаботы) КАК ГрафикРаботы,
		|	РаботникиОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
		|	РаботникиОрганизаций.ДатаКалендаря КАК ДатаСр
		|ПОМЕСТИТЬ ВТТаблицаРаботниковОрганизации
		|ИЗ
		|	&ТаблицаРаботниковОрганизации КАК РаботникиОрганизаций
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОрганизаций.ПериодРегистрации КАК ПериодРегистрации,
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Код КАК ТабельныйНомер,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
		|			КОГДА ФИОФизЛицСрезПоследних.Имя = """"
		|				ТОГДА """"
		|			ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ФИОФизЛицСрезПоследних.Отчество = """"
		|				ТОГДА """"
		|			ИНАЧЕ ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
		|		КОНЕЦ, РаботникиОрганизаций.Сотрудник.Физлицо) КАК СотрудникНаименование,
		|	РаботникиОрганизаций.Организация КАК Организация,
		|	ВЫРАЗИТЬ(РаботникиОрганизаций.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК ИмяОрганизации,
		|	РаботникиОрганизаций.Организация.КодПоОКПО КАК КодПоОКПО,
		|	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	РаботникиОрганизаций.Должность КАК Должность,
		|	Руководитель.Должность КАК ДолжностьРуководителя,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОРуководителя.Имя, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОРуководителя.Имя, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ВЫБОР
		|			КОГДА ПОДСТРОКА(ФИОРуководителя.Отчество, 1, 1) <> """"
		|				ТОГДА ПОДСТРОКА(ФИОРуководителя.Отчество, 1, 1) + "". ""
		|			ИНАЧЕ """"
		|		КОНЕЦ + ФИОРуководителя.Фамилия, ФИОРуководителя.ФизЛицо) КАК ФИОРуководителя,
		|	ФИОРуководителя.Имя КАК ИмяРуководителя,
		|	ФИОРуководителя.Фамилия КАК ФамилияРуководителя,
		|	ФИОРуководителя.Отчество КАК ОтчествоРуководителя,
		|	ФИОРуководителя.ФизЛицо КАК ФизЛицоРуководителя,
		|	ЕСТЬNULL(РуководительКадровойСлужбыПодразделения.Должность, РуководительКадровойСлужбыОрганизации.Должность) КАК ДолжностьКадровика,
		|	ВЫБОР
		|		КОГДА ФИОКадровикаПодразделения.Фамилия ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(ВЫБОР
		|						КОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Имя, 1, 1) <> """"
		|							ТОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Имя, 1, 1) + "". ""
		|						ИНАЧЕ """"
		|					КОНЕЦ + ВЫБОР
		|						КОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Отчество, 1, 1) <> """"
		|							ТОГДА ПОДСТРОКА(ФИОКадровикаОрганизации.Отчество, 1, 1) + "". ""
		|						ИНАЧЕ """"
		|					КОНЕЦ + ФИОКадровикаОрганизации.Фамилия, РуководительКадровойСлужбыОрганизации.ФизическоеЛицо)
		|		ИНАЧЕ ЕСТЬNULL(ВЫБОР
		|					КОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Имя, 1, 1) <> """"
		|						ТОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Имя, 1, 1) + "". ""
		|					ИНАЧЕ """"
		|				КОНЕЦ + ВЫБОР
		|					КОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Отчество, 1, 1) <> """"
		|						ТОГДА ПОДСТРОКА(ФИОКадровикаПодразделения.Отчество, 1, 1) + "". ""
		|					ИНАЧЕ """"
		|				КОНЕЦ + ФИОКадровикаПодразделения.Фамилия, РуководительКадровойСлужбыПодразделения.ФизическоеЛицо)
		|	КОНЕЦ КАК ФИОКадровика,
		|	ВЫБОР
		|		КОГДА ФИОКадровикаПодразделения.Имя ЕСТЬ NULL 
		|			ТОГДА ФИОКадровикаОрганизации.Имя
		|		ИНАЧЕ ФИОКадровикаПодразделения.Имя
		|	КОНЕЦ КАК ИмяКадровика,
		|	ВЫБОР
		|		КОГДА ФИОКадровикаПодразделения.Фамилия ЕСТЬ NULL 
		|			ТОГДА ФИОКадровикаОрганизации.Фамилия
		|		ИНАЧЕ ФИОКадровикаПодразделения.Фамилия
		|	КОНЕЦ КАК ФамилияКадровика,
		|	ВЫБОР
		|		КОГДА ФИОКадровикаПодразделения.Отчество ЕСТЬ NULL 
		|			ТОГДА ФИОКадровикаОрганизации.Отчество
		|		ИНАЧЕ ФИОКадровикаПодразделения.Отчество
		|	КОНЕЦ КАК ОтчествоКадровика,
		|	ВЫБОР
		|		КОГДА РуководительКадровойСлужбыПодразделения.ФизическоеЛицо ЕСТЬ NULL 
		|			ТОГДА РуководительКадровойСлужбыОрганизации.ФизическоеЛицо
		|		ИНАЧЕ РуководительКадровойСлужбыПодразделения.ФизическоеЛицо
		|	КОНЕЦ КАК ФизЛицоКадровика,
		|	Ответственный.ИмяОтветственного КАК ИмяОтветственного,
		|	Ответственный.ФамилияОтветственного КАК ФамилияОтветственного,
		|	Ответственный.ОтчествоОтветственного КАК ОтчествоОтветственного,
		|	Ответственный.ФизЛицоОтветственного КАК ФизЛицоОтветственного,
		|	Ответственный.ФИООтветственного КАК ФИООтветственного,
		|	Ответственный.ДолжностьОтветственного КАК ДолжностьОтветственного,
		|	РаботникиОрганизаций.ПодразделениеОрганизации.Наименование КАК ИмяПодразделения
		|ИЗ
		|	ВТТаблицаРаботниковОрганизации КАК РаботникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&КонецПериода,
		|				ФизЛицо В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						СотрудникиОрганизаций.Физлицо
		|					ИЗ
		|						Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|					ГДЕ
		|						&УсловиеПоРаботникам)) КАК ФИОФизЛицСрезПоследних
		|		ПО (ФИОФизЛицСрезПоследних.ФизЛицо = РаботникиОрганизаций.Сотрудник.Физлицо)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК Руководитель
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОРуководителя
		|			ПО Руководитель.ФизическоеЛицо = ФИОРуководителя.ФизЛицо
		|		ПО (&ДополнительнаяСвязь)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыОрганизации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаОрганизации
		|			ПО РуководительКадровойСлужбыОрганизации.ФизическоеЛицо = ФИОКадровикаОрганизации.ФизЛицо
		|		ПО РаботникиОрганизаций.Организация = РуководительКадровойСлужбыОрганизации.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыПодразделения
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаПодразделения
		|			ПО РуководительКадровойСлужбыПодразделения.ФизическоеЛицо = ФИОКадровикаПодразделения.ФизЛицо
		|		ПО РаботникиОрганизаций.ПодразделениеОрганизации = РуководительКадровойСлужбыПодразделения.СтруктурнаяЕдиница
		|			И (&ОтборПодразделения)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ВЫБОР
		|					КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения < &КонецПериода
		|							И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения
		|					ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность
		|				КОНЕЦ) КАК ДолжностьОтветственного,
		|			МАКСИМУМ(ЕСТЬNULL(ВЫБОР
		|						КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
		|							ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "". ""
		|						ИНАЧЕ """"
		|					КОНЕЦ + ВЫБОР
		|						КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
		|							ТОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "". ""
		|						ИНАЧЕ """"
		|					КОНЕЦ + ФИОФизЛицСрезПоследних.Фамилия, РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо)) КАК ФИООтветственного,
		|			МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК ИмяОтветственного,
		|			МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК ОтчествоОтветственного,
		|			МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК ФамилияОтветственного,
		|			МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо) КАК ФизЛицоОтветственного,
		|			ВЫБОР
		|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения < &КонецПериода
		|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделениеЗавершения
		|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение
		|			КОНЕЦ КАК Организация
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|					&КонецПериода,
		|					Сотрудник.Физлицо = &Ответственный
		|						И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацийСрезПоследних
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОФизЛицСрезПоследних
		|				ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВЫБОР
		|				КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения < &КонецПериода
		|						И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделениеЗавершения
		|				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение
		|			КОНЕЦ) КАК Ответственный
		|		ПО РаботникиОрганизаций.Организация = Ответственный.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецПериода, ) КАК РаботникиОрганизацийСрезПоследних
		|		ПО РаботникиОрганизаций.Сотрудник = РаботникиОрганизацийСрезПоследних.Сотрудник
		|ГДЕ
		|	ИСТИНА
		|	И &УсловиеВЗапрос
		|	И (НЕ(РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|				ИЛИ РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &КонецПериода
		|					И РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостоянияЗавершения = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))";
		ЗапросТабель.Текст = ЗапросТабель.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации, Организация, " + ПорядокГруппировки + " СотрудникНаименование, Сотрудник";
		
		ЗапросТабель.Текст = СтрЗаменить(ЗапросТабель.Текст, "И &УсловиеВЗапрос", СтрЗаменить(УсловиеВЗапрос, "%Таблица%", "РаботникиОрганизаций"));
		ЗапросТабель.Текст = СтрЗаменить(ЗапросТабель.Текст, "&УсловиеПоРаботникам", ?(ПустаяСтрока(УсловиеПоРаботникам),?(ПустаяСтрока(УсловиеНаОрганизации),"ИСТИНА",УсловиеНаОрганизации),СтрЗаменить(УсловиеПоРаботникам,"Сотрудник","Ссылка")));
		ЗапросТабель.Текст = СтрЗаменить(ЗапросТабель.Текст, "&ОтборПодразделения", ?(НЕ (ГруппироватьПодразделения ИЛИ ОтборПодразделения), "ЛОЖЬ", "ИСТИНА"));
		Если ГруппироватьПодразделения ИЛИ ОтборПодразделения Тогда
			ЗапросТабель.Текст = СтрЗаменить(ЗапросТабель.Текст,"&ДополнительнаяСвязь", "РаботникиОрганизаций.ПодразделениеОрганизации = Руководитель.СтруктурнаяЕдиница")
		Иначе
			ЗапросТабель.Текст = СтрЗаменить(ЗапросТабель.Текст,"&ДополнительнаяСвязь", "РаботникиОрганизаций.Организация = Руководитель.СтруктурнаяЕдиница")
		КонецЕсли;
		Если НЕ (ОтборПодразделения и НЕ ГруппироватьПодразделения и ТипЗнч(Подразделение) <> Тип("СписокЗначений")) тогда
			ЗапросТабель.Текст = СтрЗаменить(ЗапросТабель.Текст, "ВЫРАЗИТЬ(&Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК ПодразделениеОрганизации", "РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации")
		КонецЕсли;
		ВыборкаПоРаботнику = ЗапросТабель.Выполнить().Выбрать();
		
		Если ГруппироватьПодразделения Тогда
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
				
				ОбластьДанныхШапка.Параметры.ДатаНач = НачалоМесяца(ВыборкаПоРаботнику.ПериодРегистрации);
				ОбластьДанныхШапка.Параметры.ДатаКон = КонецМесяца(ВыборкаПоРаботнику.ПериодРегистрации);
				
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПодразделениеОрганизации") Цикл
						
						Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						НомерПП = 0;
						ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
						ОбластьДанныхШапка.Параметры.ИмяОрганизации = СОКРЛП(ВыборкаПоРаботнику.ИмяОрганизации);
						/////Вадим 17.07.2013 13:50:52
						///ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
						
						//ОбластьДанныхПодвал.Параметры.ФИООтветственного = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоОтветственного, ВыборкаПоРаботнику.ФамилияОтветственного, ВыборкаПоРаботнику.ИмяОтветственного, ВыборкаПоРаботнику.ОтчествоОтветственного);
						//ОбластьДанныхПодвал.Параметры.ФИОРуководителя   = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоРуководителя, ВыборкаПоРаботнику.ФамилияРуководителя, ВыборкаПоРаботнику.ИмяРуководителя, ВыборкаПоРаботнику.ОтчествоРуководителя);
						//ОбластьДанныхПодвал.Параметры.ФИОКадровика      = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоКадровика, ВыборкаПоРаботнику.ФамилияКадровика, ВыборкаПоРаботнику.ИмяКадровика, ВыборкаПоРаботнику.ОтчествоКадровика);
 						////ВадимКонец
						
												
						ДокументРезультат.Вывести(ОбластьДанныхШапка);
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Должность") Цикл
							Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
								Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
									
									НомерПП = НомерПП + 1;
									
									ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
										/////Вадим 18.01.2013 14:59:08
								//ОбластьДанныхСтрока.Параметры.Работник = СокрП(ВыборкаПоРаботнику.СотрудникНаименование) + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность;
								ОбластьДанныхСтрока.Параметры.Работник = СокрП(ВыборкаПоРаботнику.Сотрудник) + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность;
								
								
								////ВадимКонец
									ОбластьДанныхСтрока.Параметры.ФизЛицо = ВыборкаПоРаботнику.Сотрудник;
									ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
									
									// Проверим, уместится ли строка на странице или надо открывать новую страницу
									Если Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхСтрока) Тогда
										ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
										ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
									КонецЕсли;
									ДокументРезультат.Вывести(ОбластьДанныхСтрока);
									
								КонецЦикла; 
							КонецЦикла; 
						КонецЦикла; 
						Если Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхПодвал) Тогда
							ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
							ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
							ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
						КонецЕсли;
						ДокументРезультат.Вывести(ОбластьДанныхПодвал);
						
					КонецЦикла; 
				КонецЦикла; 
			КонецЦикла; 
		Иначе
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
				
				ОбластьДанныхШапка.Параметры.ДатаНач = НачалоМесяца(ВыборкаПоРаботнику.ПериодРегистрации);
				ОбластьДанныхШапка.Параметры.ДатаКон = КонецМесяца(ВыборкаПоРаботнику.ПериодРегистрации);
				
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
					
					Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					НомерПП = 0;
					ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
					ОбластьДанныхШапка.Параметры.ИмяОрганизации = СОКРЛП(ВыборкаПоРаботнику.ИмяОрганизации);
					ОбластьДанныхШапка.Параметры.ИмяПодразделения = "";
					/////Вадим 17.07.2013 13:51:33
				//ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
				//	ОбластьДанныхПодвал.Параметры.ФИООтветственного = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоОтветственного, ВыборкаПоРаботнику.ФамилияОтветственного, ВыборкаПоРаботнику.ИмяОтветственного, ВыборкаПоРаботнику.ОтчествоОтветственного);
				//	ОбластьДанныхПодвал.Параметры.ФИОРуководителя   = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоРуководителя, ВыборкаПоРаботнику.ФамилияРуководителя, ВыборкаПоРаботнику.ИмяРуководителя, ВыборкаПоРаботнику.ОтчествоРуководителя);
				//	ОбластьДанныхПодвал.Параметры.ФИОКадровика      = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(ВыборкаПоРаботнику.ФизЛицоКадровика, ВыборкаПоРаботнику.ФамилияКадровика, ВыборкаПоРаботнику.ИмяКадровика, ВыборкаПоРаботнику.ОтчествоКадровика);
					////ВадимКонец
					ДокументРезультат.Вывести(ОбластьДанныхШапка);
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Должность") Цикл
						
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
							Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
								
								НомерПП = НомерПП + 1;
								
								ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
									/////Вадим 18.01.2013 14:59:08
								//ОбластьДанныхСтрока.Параметры.Работник = СокрП(ВыборкаПоРаботнику.СотрудникНаименование) + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность;
								ОбластьДанныхСтрока.Параметры.Работник = СокрП(ВыборкаПоРаботнику.Сотрудник) + ", " + Символы.ПС + ВыборкаПоРаботнику.Должность;
								
								
								////ВадимКонец
								ОбластьДанныхСтрока.Параметры.ФизЛицо = ВыборкаПоРаботнику.Сотрудник;
								ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
								
								// Проверим, уместится ли строка на странице или надо открывать новую страницу
								Если Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхСтрока) Тогда
									ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
									ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
								КонецЕсли;
								ДокументРезультат.Вывести(ОбластьДанныхСтрока);
								
							КонецЦикла; 
						КонецЦикла; 
					КонецЦикла; 
					Если Не ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ОбластьДанныхПодвал) Тогда
						ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
						ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
					КонецЕсли;
					ДокументРезультат.Вывести(ОбластьДанныхПодвал);
					
				КонецЦикла; 
			КонецЦикла; 
		КонецЕсли;
		
		Если ДокументРезультат.ВысотаТаблицы = 0 Тогда
			
			Если ОтборОрганизации и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
				ОбластьДанныхШапка.Параметры.ИмяОрганизации = СОКРЛП(Организация.НаименованиеПолное);
				ОбластьДанныхШапка.Параметры.КодПоОКПО = Организация.КодПоОКПО;
			КонецЕсли;
			Если ОтборПодразделения и ТипЗнч(Организация) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				ОбластьДанныхШапка.Параметры.ИмяПодразделения = Подразделение.Наименование;
			КонецЕсли;
			
			ОбластьДанныхСтрока.Параметры.Работник = " " + Символы.ПС + " ";
			ВыводимыеОбласти = Новый Массив();
			ВыводимыеОбласти.Добавить(ОбластьДанныхСтрока);
			ВыводимыеОбласти.Добавить(ОбластьДанныхПодвал);
			ДокументРезультат.Вывести(ОбластьДанныхШапка);
			ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
			Для Сч = 1 По ПараметровВстроке Цикл
				ОбластьДанныхСтрока.Параметры.Установить(Сч - 1,""); 
			КонецЦикла;
			Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументРезультат, ВыводимыеОбласти, Ложь) Цикл
				ДокументРезультат.Вывести(ОбластьДанныхСтрока);
			КонецЦикла;
			ДокументРезультат.Вывести(ОбластьДанныхПодвал);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьОтчет()

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВозвращаемоеСообщениеОбОшибке = Неопределено) Экспорт
	
	ТиповыеОтчеты.СохранитьПараметрыТабличногоДокумента(Результат, СохраненнаяНастройка);
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ЗначениеПанелипользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ЭтотОбъект);
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	ГруппироватьПодразделения = ложь;
	ПараметрГруппироватьПодразделения = ТиповыеОтчеты.ПолучитьПараметр(КомпоновщикНастроек, "ГруппироватьПодразделения");
	Если ПараметрГруппироватьПодразделения <> Неопределено тогда
		ГруппироватьПодразделения = ПараметрГруппироватьПодразделения.Значение или (ЗначениеПанелипользователя <> Неопределено и ЗначениеПанелипользователя.Свойство("ГруппироватьПодразделения") и ЗначениеПанелипользователя.ГруппироватьПодразделения);
	КонецЕсли;	
	
	ПараметрДатаЗаполнения = ТиповыеОтчеты.ПолучитьПараметр(КомпоновщикНастроек, "ДатаЗаполнения");
	Если ПараметрДатаЗаполнения <> Неопределено тогда
		ДатаЗаполнения = ПараметрДатаЗаполнения.Значение;
	КонецЕсли;	
	
	ПараметрНомерДокумента = ТиповыеОтчеты.ПолучитьПараметр(КомпоновщикНастроек, "НомерДокумента");
	Если ПараметрНомерДокумента <> Неопределено тогда
		НомерДокумента = ПараметрНомерДокумента.Значение;
	КонецЕсли;	
	
	Ответственный = Справочники.Пользователи.ПустаяСсылка();
	ПараметрОтветственный = ТиповыеОтчеты.ПолучитьПараметр(КомпоновщикНастроек, "ОтветственноеЛицо");
	Если ПараметрОтветственный <> Неопределено тогда
		Ответственный = ПараметрОтветственный.Значение;
	КонецЕсли;	
	
	ПараметрРежим = ТиповыеОтчеты.ПолучитьПараметр(КомпоновщикНастроек, "Режим");
	Если ПараметрРежим <> Неопределено тогда
		Режим = ПараметрРежим.Значение;
	КонецЕсли;	
	
	Если Режим = "" или Режим = Неопределено тогда
		Режим = "Табель";
	КонецЕсли;
	
	НачалоПериода = '00010101';
	КонецПериода  = '00010101';
	
	ПараметрНачалоПериода = ТиповыеОтчеты.ПолучитьПараметр(КомпоновщикНастроек, "НачалоПериода");
	Если ПараметрНачалоПериода <> Неопределено тогда
		НачалоПериода = Дата(ПараметрНачалоПериода.Значение);
	КонецЕсли;	
	
	Если НачалоПериода = '00010101' тогда
		НачалоПериода = НачалоМесяца(ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
	КонецЕсли;
	
	ПараметрКонецПериода = ТиповыеОтчеты.ПолучитьПараметр(КомпоновщикНастроек, "КонецПериода");
	Если ПараметрКонецПериода <> Неопределено тогда
		КонецПериода = Дата(ПараметрКонецПериода.Значение);
	КонецЕсли;	
	
	Если КонецПериода = '00010101' тогда
		КонецПериода = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	КонецЕсли;
	////Вадим
	//Если НачалоПериода > РабочаяДата тогда
	//	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	//	ОбработкаКомментариев.УдалитьСообщения();
	//	ОбработкаКомментариев.ДобавитьСообщение("Формирование табеля за будущие периоды", Перечисления.ВидыСообщений.Раздел);
	//	ОбработкаКомментариев.ДобавитьСообщение("Табель за будущий по отношению к рабочей дате (" + Формат(РабочаяДата, "ДЛФ=ДД") + ") месяц не формируется. Изменить рабочую дату можно в меню ""Сервис/Параметры.""", Перечисления.ВидыСообщений.Информация);
	//	ОбработкаКомментариев.ПоказатьСообщения();
	//	Возврат Результат;
	//Иначе
		///ВадимКонец
	//	Если КонецПериода > РабочаяДата тогда
	//	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	//	ОбработкаКомментариев.УдалитьСообщения();
	//	ОбработкаКомментариев.ДобавитьСообщение("Формирование табеля за неоконченный месяц", Перечисления.ВидыСообщений.Раздел);
	//	ОбработкаКомментариев.ДобавитьСообщение("При формировании табеля за будущий или текущий месяц, выводятся данные только до рабочей даты (" + Формат(РабочаяДата, "ДЛФ=ДД") + "). Изменить рабочую дату можно в меню ""Сервис/Параметры.""", Перечисления.ВидыСообщений.Информация);
	//	ОбработкаКомментариев.ПоказатьСообщения();
	//КонецЕсли;
	//Вадим
	//КонецПериода = Мин(ОбщегоНазначенияЗК.ПолучитьРабочуюДату(), КонецПериода);
	
	// Получение списка работников
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() > 0 тогда
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		Возврат Результат;
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек,);
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Сотрудник");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Организация");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ПодразделениеОрганизации");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Должность");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ГрафикРаботы");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ПериодРегистрации");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ДатаКалендаря");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаЗначений =  Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СписокРаботников = Новый СписокЗначений;
	СписокРаботников.ЗагрузитьЗначения(ТаблицаЗначений.ВыгрузитьКолонку("Сотрудник"));
	
	СформироватьМакет(Результат, Режим, НачалоПериода, КонецПериода, СписокРаботников, ТаблицаЗначений, Ответственный, ГруппироватьПодразделения, ВозвращаемоеСообщениеОбОшибке);	
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
	ТиповыеОтчеты.ВосстановитьПараметрыТабличногоДокумента(Результат, СохраненнаяНастройка);
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Возврат Результат;
	
	
КонецФункции

Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);
	
	// Считываение структуры настроек отчета
	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СтруктураНатроек = Новый Структура("ДополнительныеНастройкиОтчета ,МинимальныйПериодОтчета", истина, "Месяц");
	Возврат СтруктураНатроек;
КонецФункции

// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
КонецПроцедуры

// Восстановление настройки печати табличного документа.
//
// Параметры:
//   ТабличныйДокумент – табличный документ.
//
Процедура УстановитьНастройкуТабличногоДокументаПоУмолчанию(ТабличныйДокумент) Экспорт
	
	ТабличныйДокумент.ПолеСверху    = 10;
	ТабличныйДокумент.ПолеСлева     = 10;
	ТабличныйДокумент.ПолеСправа    = 10;
	ТабличныйДокумент.ПолеСнизу     = 10;
	ТабличныйДокумент.МасштабПечати = 100;
	ТабличныйДокумент.АвтоМасштаб   = истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

Функция ПолучитьДополнительныеНастройкиОтчета() Экспорт
	МассивДополнительныхНастроек = Новый Массив;
	МассивДополнительныхНастроек.Добавить(Новый Структура("Имя, Заголовок, ЗначениеПоУмолчанию", "ГруппироватьПодразделения", "Выводить отдельные списки работников по подразделениям", ложь));
	Возврат МассивДополнительныхНастроек;
КонецФункции	

#КонецЕсли
/////Вадим 17.01.2013 11:09:31
Функция ПолучитьСписокРаботСверхНормы(НачалоПериода,КонецПериода,сотрудник,прг_массивДат)
	//  Оплата праздничных и выходных дней
	//1_Доплата за ночные часы
	//Оплата сверхурочных часов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	AVT_РаботаСверхНормы.ВидРасчета,
	|	СУММА(AVT_РаботаСверхНормы.Часов) КАК Часов,
	|	СУММА(AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.ЧасовПолуторных) КАК ЧасовПолуторных,
	|	СУММА(AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.ЧасовДвойных) КАК ЧасовДвойных,
	|	ВЫБОР
	|		КОГДА AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.ЧасовПолуторных ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК сверхурочка
	|ИЗ
	|	РегистрНакопления.AVT_РаботаСверхНормы КАК AVT_РаботаСверхНормы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.AVT_РаботаВСверхурочныеЧасы.РаботникиОрганизации КАК AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации
	|		ПО AVT_РаботаСверхНормы.Регистратор = AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.Ссылка
	|			И AVT_РаботаСверхНормы.НомерСтроки = AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.НомерСтроки
	|ГДЕ
	//|	AVT_РаботаСверхНормы.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачало, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаОкончания, ДЕНЬ)
	|	AVT_РаботаСверхНормы.Период в(&прг_массивДат)
	|	И НЕ AVT_РаботаСверхНормы.Часов = 0
	|	И AVT_РаботаСверхНормы.Сотрудник = &Сотрудник
	|	И AVT_РаботаСверхНормы.ВидРасчета <> &ВидРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	AVT_РаботаСверхНормы.ВидРасчета,
	|	ВЫБОР
	|		КОГДА AVT_РаботаВСверхурочныеЧасыРаботникиОрганизации.ЧасовПолуторных ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";

	Запрос.УстановитьПараметр("ДатаНачало", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецПериода);
	Запрос.УстановитьПараметр("Сотрудник", сотрудник);
	Запрос.УстановитьПараметр("прг_массивДат", прг_массивДат);
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаНочныеЧасы);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ТЗ=Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Код");
	тз.Колонки.Добавить("Количество");
	
	Пока Выборка.Следующий() Цикл
		Если  Выборка.сверхурочка тогда
			Если не Выборка.ЧасовПолуторных =0 тогда
				нов=тз.Добавить();
				нов.код=Выборка.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.БуквенныйКод+" 1,5";
				нов.количество=Выборка.ЧасовПолуторных;
			Конецесли;
		    Если не Выборка.ЧасовДвойных =0 тогда
				нов=тз.Добавить();
				нов.код=Выборка.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.БуквенныйКод+" 2";
				нов.количество=Выборка.ЧасовДвойных;
			Конецесли;
			
		иначе
			нов=тз.Добавить();
			нов.код=Выборка.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.БуквенныйКод;
			нов.количество=Выборка.Часов;
		Конецесли;	
		
		
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени,
	|	СУММА(РабочееВремяРаботниковОрганизаций.Дней) КАК Дней,
	|	СУММА(РабочееВремяРаботниковОрганизаций.Часов) КАК Часов
	|ИЗ
	|	РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
	|ГДЕ
	|	РабочееВремяРаботниковОрганизаций.Сотрудник = &Сотрудник
	//|	И РабочееВремяРаботниковОрганизаций.Период МЕЖДУ &ДатаНачало И &ДатаОкончания
	|	И РабочееВремяРаботниковОрганизаций.Период в(&прг_массивДат)
	|	И РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени";
	Запрос.УстановитьПараметр("ДатаНачало", НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецПериода);
	Запрос.УстановитьПараметр("Сотрудник", сотрудник);
	Запрос.УстановитьПараметр("прг_массивДат", прг_массивДат);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		нов=тз.Добавить();
		нов.код=Выборка.ВидИспользованияРабочегоВремени.БуквенныйКод;
		нов.количество=Выборка.Часов;

	КонецЦикла;

	// 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРГ_ОтражениеВремениОтсутствияОбороты.ВидИРВ.БуквенныйКод КАК БуквенныйКод,
	|	СУММА(ПРГ_ОтражениеВремениОтсутствияОбороты.ЧасовОборот) КАК Часов
	|ИЗ
	|	РегистрНакопления.ПРГ_ОтражениеВремениОтсутствия.Обороты КАК ПРГ_ОтражениеВремениОтсутствияОбороты
	|ГДЕ
	|	ПРГ_ОтражениеВремениОтсутствияОбороты.Сотрудник = &Сотрудник
	|	И ПРГ_ОтражениеВремениОтсутствияОбороты.Дата В(&Дата)
	|	И ПРГ_ОтражениеВремениОтсутствияОбороты.ВидИРВ = &ВидИРВ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПРГ_ОтражениеВремениОтсутствияОбороты.ВидИРВ.БуквенныйКод";
	Запрос.УстановитьПараметр("ВидИРВ", Справочники.КлассификаторИспользованияРабочегоВремени.НайтиПоНаименованию("Медицинский Осмотр"));
	Запрос.УстановитьПараметр("Дата", прг_массивДат);
	Запрос.УстановитьПараметр("Сотрудник",сотрудник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		нов=тз.Добавить();
		нов.код=Выборка.БуквенныйКод;
		нов.количество=Выборка.Часов;
 	КонецЦикла;

	
	
	
	тз.Сортировать("Код");
	возврат тз;
	
	
КонецФункции 
// ПолучитьСписокРаботСверхНормы(НачалоПериода,КонецПериода,ОбластьДанныхСтрока.Параметры.ФизЛицо)() ВадимКонец

/////Вадим 21.01.2013 9:49:22
Функция получитьтаблицунеявок(НачалоПериода,КонецПериода,сотрудник,прг_массивДат)
	Запрос = Новый Запрос;
	
	ТекстЗапросаДат = 
	"ВЫБРАТЬ
	|	ДАТАВРЕМЯ(" + Формат(Год(прг_массивДат[0].Значение), "ЧГ=4") + ", " + Месяц(прг_массивДат[0].Значение) + " , " + День(прг_массивДат[0].Значение) + ") КАК ДатаТабеля,
	|	ДАТАВРЕМЯ(" + Формат(Год(прг_массивДат[0].Значение), "ЧГ=4") + ", " + Месяц(прг_массивДат[0].Значение) + " , 1) КАК ПериодРегистрации
	|ПОМЕСТИТЬ ВТДатыТабеля 
	|	";           
	ДатаВОтчете = НачалоПериода + 86400;
	//Пока ДатаВОтчете <= НачалоДня(КонецПериода) Цикл
	для сч=1 по прг_массивДат.количество()-1 цикл
		//НомерДня    = День(ДатаВОтчете);
		//НомерМесяца = Месяц(ДатаВОтчете);
		//НомерГода   = Год(ДатаВОтчете);
		НомерДня    = День(прг_массивДат[сч].Значение);
		НомерМесяца = Месяц(прг_массивДат[сч].Значение);
		НомерГода   = Год(прг_массивДат[сч].Значение);
		ТекстЗапросаДат = ТекстЗапросаДат + 
		"ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4")+ ", " + НомерМесяца + " ," + НомерДня + "),
		|  ДАТАВРЕМЯ(" + Формат(НомерГода, "ЧГ=4") + ", " + НомерМесяца + " , 1) КАК ПериодРегистрации
		|	";
		ДатаВОтчете = ДатаВОтчете + 86400;
	КонецЦикла;

	
	Запрос.Текст =	"ВЫБРАТЬ
	              	|	ДАТАВРЕМЯ(2010, 1, 1) КАК ДатаТабеля,
	              	|	ДАТАВРЕМЯ(2010, 1, 1) КАК ПериодРегистрации
	              	|ПОМЕСТИТЬ ВТДатыТабеля
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	ВТДатыТабеля.ДатаТабеля,
	              	|	ВТДатыТабеля.ПериодРегистрации,
	              	|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени,
	              	|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени.БуквенныйКод,
	              	|	AVT_РаботаСверхНормы.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени,
	              	|	AVT_РаботаСверхНормы.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.БуквенныйКод,
	              	|	AVT_РаботаСверхНормы.Часов,
	              	|	1 КАК колдней,
	              	|	ВЫБОР
	              	|		КОГДА РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени ЕСТЬ НЕ NULL 
	              	|			ТОГДА РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени
	              	|		ИНАЧЕ ВЫБОР
	              	|				КОГДА AVT_РаботаСверхНормы.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени ЕСТЬ НЕ NULL 
	              	|					ТОГДА AVT_РаботаСверхНормы.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
	              	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ВыходныеДни)
	              	|			КОНЕЦ
	              	|	КОНЕЦ КАК Поле1
	              	|ПОМЕСТИТЬ ВТИтог
	              	|ИЗ
	              	|	ВТДатыТабеля КАК ВТДатыТабеля
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
	              	|		ПО ВТДатыТабеля.ДатаТабеля = РабочееВремяРаботниковОрганизаций.Период
	              	|			И (РабочееВремяРаботниковОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	              	|			И (РабочееВремяРаботниковОрганизаций.Сотрудник = &Сотрудник)
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.AVT_РаботаСверхНормы КАК AVT_РаботаСверхНормы
	              	|		ПО ВТДатыТабеля.ДатаТабеля = AVT_РаботаСверхНормы.Период
	              	|			И (AVT_РаботаСверхНормы.Сотрудник = &Сотрудник)
	              	|			И (AVT_РаботаСверхНормы.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	              	|			И (НЕ AVT_РаботаСверхНормы.Часов = 0)
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ
	              	|	СУММА(ВТИтог.колдней) КАК колдней,
	              	|	ВТИтог.Поле1 КАК ВидИспользованияРабочегоВремени,
	              	|	ВТИтог.Поле1.БуквенныйКод КАК БуквенныйКод
	              	|ИЗ
	              	|	ВТИтог КАК ВТИтог
	              	|ГДЕ
	              	|	НЕ ВТИтог.Поле1.РабочееВремя
	              	|
	              	|СГРУППИРОВАТЬ ПО
	              	|	ВТИтог.Поле1,
	              	|	ВТИтог.Поле1.БуквенныйКод";
	
	ТекстШаблона = "ВЫБРАТЬ
	              	|	ДАТАВРЕМЯ(2010, 1, 1) КАК ДатаТабеля,
	              	|	ДАТАВРЕМЯ(2010, 1, 1) КАК ПериодРегистрации
	              	|ПОМЕСТИТЬ ВТДатыТабеля";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстШаблона, ТекстЗапросаДат);
	
	
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("Сотрудник", сотрудник);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ТЗ=Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Код");
	тз.Колонки.Добавить("Количество");

	Пока Выборка.Следующий() Цикл
		Если СокрЛП(Выборка.БуквенныйКод)="МО" тогда
			продолжить;
		КонецЕсли;	
		нов=тз.Добавить();
		нов.Код=Выборка.БуквенныйКод;
		нов.Количество=Выборка.колдней;
		
	КонецЦикла;
	тз.Сортировать("Код");
	возврат тз;
	
КонецФункции 
// () ВадимКонец

///Вадим 04.03.2013 13:14:48
Процедура ПроверкаОТпускПраздники(НачалоПериода,КонецПериода,сотрудник,параметры)
    Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря
	|ПОМЕСТИТЬ Праздники
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоПериода И КОНЕЦПЕРИОДА(&Конецпериода, ДЕНЬ)
	|	И РегламентированныйПроизводственныйКалендарь.AVT_ПроизводственныйКалендарь = &AVT_ПроизводственныйКалендарь
	|	И РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТ_отпускПоБеременностиИродам
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Праздники.ДатаКалендаря,
	|	СостояниеРаботниковОрганизацийСрезПоследних.Период,
	|	СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник,
	|	ДОБАВИТЬКДАТЕ(СостояниеРаботниковОрганизацийСрезПоследних.ПериодЗавершения, ДЕНЬ, -1) КАК ПериодЗавершения
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	Праздники КАК Праздники
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций.СрезПоследних(&Конецпериода, ) КАК СостояниеРаботниковОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеРаботниковОрганизаций КАК СостояниеРаботниковОрганизацийСрезПоследних
	|		ПО (СостояниеРаботниковОрганизацийСрезПоследних.Состояние В (&Состояние))
	|			И (НЕ СостояниеРаботниковОрганизацийСрезПоследних.ВидДополнительногоОтпуска В
	|					(ВЫБРАТЬ
	|						выб.Ссылка
	|					ИЗ
	|						ВТ_отпускПоБеременностиИродам КАК выб))
	|			И (Праздники.ДатаКалендаря МЕЖДУ СостояниеРаботниковОрганизацийСрезПоследних.Период И ДОБАВИТЬКДАТЕ(СостояниеРаботниковОрганизацийСрезПоследних.ПериодЗавершения, ДЕНЬ, -1))
	|			И (СостояниеРаботниковОрганизацийСрезПоследних.Сотрудник В (&СписокСотрудников))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Итог.ДатаКалендаря,
	|	ВТ_Итог.Период,
	|	ВТ_Итог.Сотрудник,
	|	ВТ_Итог.ПериодЗавершения
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|ГДЕ
	|	НЕ ВТ_Итог.Сотрудник ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("AVT_ПроизводственныйКалендарь", ПолучитьАВТКалендарьСотрудника(сотрудник,КонецПериода));
    Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияРаботникаОрганизации.ОтпускЕжегодный);
	Запрос.УстановитьПараметр("СписокСотрудников", сотрудник);

	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДатаЧисло = день(ВыборкаДетальныеЗаписи.ДатаКалендаря);
		параметры["Символ"+ДатаЧисло]= "В";
		параметры["ДополнительноеЗначение"+ДатаЧисло]= 0;
			
		
		
	КонецЦикла;
	
	

	
	
	

КонецПроцедуры

/////Вадим 25.11.2013 9:53:06  бп 
Функция ПолучитьАВТКалендарьСотрудника(Сотрудник,ДатаСреза)
    
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы.AVT_ПроизводственныйКалендарь как AVT_ПроизводственныйКалендарь
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&КонецПериода, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних";

	Запрос.УстановитьПараметр("КонецПериода", ДатаСреза);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		возврат ВыборкаДетальныеЗаписи.AVT_ПроизводственныйКалендарь;
	иначе	
		возврат Справочники.AVT_ПроизводственныеКалендари.НайтиПоНаименованию("Кал-рь служащих - пятидневка");
	КонецЕсли; 

	

	

КонецФункции 
// ПолучитьАВТКалендарьСотрудника() ВадимКонец



/////Вадим 27.06.2013 8:59:23
Функция СотрудникУволен(Сотрудник,КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации,
		|	РаботникиОрганизацийСрезПоследних.Должность
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = &ПричинаИзмененияСостояния";

	Запрос.УстановитьПараметр("Дата", КонецПериода);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ПричинаИзмененияСостояния", Перечисления.ПричиныИзмененияСостояния.Увольнение);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат истина; 
	иначе	
		Возврат ложь;
	КонецЕсли;
	

КонецФункции 
// СотрудникУволен(ВыборкаПоРаботнику.Сотрудник,КонецПериода)() ВадимКонец


Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;


