#Если Клиент Тогда
	
// Функция возвращает совокупность данных о физическом лице в виде структуры, 
// В совокупность данных входит ФИО, должность в заданной организации, 
// паспортные данные и др.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой
//                 определяется должность и подразделение работника
//  ФизЛицо      - СправочникСсылка.ФизическиеЛица - физическое лицо,
//                 по которому возвращается совокупность данных
//  ДатаСреза    - Дата - дата, на которую считываются данные
//
// Возвращаемое значение:
//  Структура    - Структура с совокупностью данных о физическом лице:
//                 - Фамилия
//                 - Имя
//                 - Отчетсво
//                 - Представление (Фамилия И.О.)
//                 - Подразделение
//                 - ДокументВид
//                 - ДокументСерия
//                 - ДокументНомер
//                 - ДокументДатаВыдачи
//                 - ДокументКемВыдан
//                 - ДокументКодПодразделения
//
Функция ДанныеФизЛица(ФизЛицо, ДатаСреза) Экспорт
	
	Результат = Новый Структура("Фамилия, Имя, Отчество, Представление, 
								|ТабельныйНомер, Должность, ПодразделениеОрганизации, 
								|ДокументВид, ДокументСерия, ДокументНомер,  
								|ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПодразделения");

	ЗапросПоЛицам = Новый Запрос();
	ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
	ЗапросПоЛицам.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросПоЛицам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения,
	|	РаботникиСрезПоследних.Подразделение,
	|	РаботникиСрезПоследних.Должность,
	|	РаботникиСрезПоследних.УдалитьТабельныйНомер КАК ТабельныйНомер
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних КАК РаботникиСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = РаботникиСрезПоследних.ФизЛицо";
	
	Данные = ЗапросПоЛицам.Выполнить().Выбрать();
	Если Данные.Следующий() тогда

		ЗаполнитьЗначенияСвойств(Результат,Данные);
		Результат.Представление = ПолучитьФамилиюИмяОтчество(Данные.Фамилия, Данные.Имя, Данные.Отчество);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // ДанныеФизЛица

// Функция формирует фамилию и инициалы
//
// Параметры
//  Фамилия  - фамилия физ. лица.
//  Имя      - имя физ. лица.
//  Отчество - отчество физ. лица.
//
// Возвращаемое значение 
//  Фамилия, имя, отчество одной строкой.
//
Функция ПолучитьФамилиюИмяОтчество(Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	Возврат ?(НЕ ПустаяСтрока(Фамилия), Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + 
			?(НЕ ПустаяСтрока(Отчество) , 
			Лев(Отчество,1)+".", ""), ""), "");

КонецФункции // ПолучитьФамилиюИмяОтчество()

// Процедура формирует табличный документ с обложкой инвентарной книги.
//
// Параметры:
//  ДокументРезультат - табличный документ, в который выводится
//                      обложка инвентарной книги.
//
// Возвращаемое значение:
//  Нет.
//
Процедура СформироватьОбложкуИнвентарнойКнигиОС(ДокументРезультат) Экспорт
	
	ДатаОтбора = ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, Неопределено);
	
	ДанныеОтветственного = ДанныеФизЛица(Ответственный, ДатаОтбора);
	
	ДокументРезультат.Очистить();
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСверху         = 20;
	ДокументРезультат.ПолеСнизу          = 20;
	ДокументРезультат.ПолеСлева          = 10;
	ДокументРезультат.ПолеСправа         = 10;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентарнаяКнигаОС_Обложка";
	
	Макет = ПолучитьМакет("Обложка");
	Макет.Параметры.Период                           = " с " + ?(НЕ ЗначениеЗаполнено(НачалоПериода), """____"" ___________ ______ г.", Формат(НачалоПериода, "ДЛФ=DD")) + " по " + ?(НЕ ЗначениеЗаполнено(КонецПериода), """____"" ___________ ______ г.", Формат(КонецПериода, "ДЛФ=DD"));
	Макет.Параметры.НаименованиеПодразделения        = ?(ЗначениеЗаполнено(Подразделение), Подразделение.Наименование, "");  
	Макет.Параметры.КодПодразделения                 = ?(ЗначениеЗаполнено(Подразделение), Подразделение.Код, "");
	Макет.Параметры.Должность                        = ДанныеОтветственного.Должность;
	Макет.Параметры.ФамилияИО                        = ДанныеОтветственного.Представление;
	Макет.Параметры.ТабельныйНомер                   = ДанныеОтветственного.ТабельныйНомер;
	
	ДокументРезультат.Вывести(Макет);

	ДокументРезультат.ТолькоПросмотр = Истина;
	
КонецПроцедуры // СформироватьОбложку()

// Процедура формирует табличный документ со страницами инвентарной книги.
//
// Параметры:
//  ДокументРезультат - табличный документ, в который выводятся
//                      страницы инвентарной книги.
//
// Возвращаемое значение:
//  Нет.
//
Процедура СформироватьСтраницыИнвентарнойКнигиОС(ДокументРезультат) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НачалоПериода", ?(ОбщегоНазначения.ПустаяДата(НачалоПериода), НачалоПериода, НачалоДня(НачалоПериода)));
	Запрос.УстановитьПараметр("КонецПериода",  ?(ОбщегоНазначения.ПустаяДата(КонецПериода),  КонецПериода,  КонецДня(КонецПериода)));
	Запрос.УстановитьПараметр("Подразделение", Подразделение);	
	Запрос.УстановитьПараметр("МОЛ",           МОЛ);
	
	Если НЕ ОбщегоНазначения.ПустаяДата(НачалоПериода)
	   И НЕ ОбщегоНазначения.ПустаяДата(КонецПериода) Тогда
	   
	   ОтборПоПериоду = "ГДЕ СобытияОС.Период МЕЖДУ &НачалоПериода И &КонецПериода";
	   
	ИначеЕсли НЕ ОбщегоНазначения.ПустаяДата(НачалоПериода) Тогда
		
	   ОтборПоПериоду = "ГДЕ СобытияОС.Период >= &НачалоПериода";
	   
	ИначеЕсли НЕ ОбщегоНазначения.ПустаяДата(КонецПериода) Тогда
		
	   ОтборПоПериоду = "ГДЕ СобытияОС.Период <= &КонецПериода";
	   
	Иначе
	   
	   ОтборПоПериоду = "";
	   
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СрезПоследнихПоРегистрамСведенийИУУ.ОсновноеСредство.Наименование КАК ОсновноеСредствоНаименование,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ОсновноеСредство КАК ОсновноеСредствоСсылка,
	|	ПРЕДСТАВЛЕНИЕ(СрезПоследнихПоРегистрамСведенийИУУ.Документ) КАК ПредставлениеДокумента,
	|	СрезПоследнихПоРегистрамСведенийИУУ.Документ КАК Документ,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ТипДокумента КАК ТипДокумента,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ДатаДокумента КАК ДатаДокумента,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ПричинаСписания КАК ПричинаСписания,
	|	СрезПоследнихПоРегистрамСведенийИУУ.СписыватьПриПринятииКУчету КАК СписыватьПриПринятииКУчету,
	|	СрезПоследнихПоРегистрамСведенийИУУ.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ПоследнееМОЛ КАК ПоследнееМОЛ,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ПоследнееМОЛ.Представление КАК ПоследнееМОЛПредставление,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ПредпоследнееМОЛ КАК ПредпоследнееМОЛ,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ПредпоследнееМОЛ.Представление КАК ПредпоследнееМОЛПредставление,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ПоследнееМестонахождение КАК ПоследнееМестонахождение,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ПоследнееМестонахождение.Представление КАК ПоследнееМестонахождениеПредставление,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ПредпоследнееМестонахождение КАК ПредпоследнееМестонахождение,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ПредпоследнееМестонахождение.Представление КАК ПредпоследнееМестонахождениеПредставление,
	|	СостоянияОС.ДатаСостояния КАК ДатаПринятияКУчету,
	|	СостоянияОС.Регистратор КАК ДокументПринятияКУчету,
	|	ВосстановительнаяСтоимостьОС.СтоимостьКонечныйОстаток КАК ВосстановительнаяСтоимость,
	|	НачисленнаяАмортизацияИлиИзносОС.АмортизацияКонечныйОстаток КАК НачисленнаяАмортизация,
	|	АмортизацияИлиИзносПоДокументу.АмортизацияПриход КАК АмортизацияПоДокументу,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ДатаПоследнегоДвиженияВосстановительнаяСтоимость,
	|	СрезПоследнихПоРегистрамСведенийИУУ.ДатаПоследнегоДвиженияНачисленнаяАмортизацияИлиИзнос
	|ИЗ
	|	(ВЫБРАТЬ
	|		СрезПоследнихПоРегистрамСведений.ОсновноеСредство КАК ОсновноеСредство,
	|		СрезПоследнихПоРегистрамСведений.Документ КАК Документ,
	|		СрезПоследнихПоРегистрамСведений.ТипДокумента КАК ТипДокумента,
	|		СрезПоследнихПоРегистрамСведений.ДатаДокумента КАК ДатаДокумента,
	|		СрезПоследнихПоРегистрамСведений.ДатаДвиженийБухгалтерии КАК ДатаДвиженийБухгалтерии,
	|		СрезПоследнихПоРегистрамСведений.ПричинаСписания КАК ПричинаСписания,
	|		СрезПоследнихПоРегистрамСведений.СписыватьПриПринятииКУчету КАК СписыватьПриПринятииКУчету,
	|		СрезПоследнихПоРегистрамСведений.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|		СрезПоследнихПоРегистрамСведений.ОсновноеСредство.Код КАК ИнвентарныйНомер,
	|		СрезПоследнихПоРегистрамСведений.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|		СрезПоследнихПоРегистрамСведений.ПоследнееМОЛ КАК ПоследнееМОЛ,
	|		СрезПоследнихПоРегистрамСведений.ПредпоследнееМОЛ КАК ПредпоследнееМОЛ,
	|		СрезПоследнихПоРегистрамСведений.ПоследнееМестонахождение КАК ПоследнееМестонахождение,
	|		СрезПоследнихПоРегистрамСведений.ПредпоследнееМестонахождение КАК ПредпоследнееМестонахождение,
	|		МАКСИМУМ(ВосстановительнаяСтоимостьОС.Период) КАК ДатаПоследнегоДвиженияВосстановительнаяСтоимость,
	|		МАКСИМУМ(НачисленнаяАмортизацияИлиИзносОС.Период) КАК ДатаПоследнегоДвиженияНачисленнаяАмортизацияИлиИзнос
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДатыПоследнихДвиженийПоРегистрамСведений.ОсновноеСредство КАК ОсновноеСредство,
	|			ДатыПоследнихДвиженийПоРегистрамСведений.Документ КАК Документ,
	|			ДатыПоследнихДвиженийПоРегистрамСведений.ТипДокумента КАК ТипДокумента,
	|			ДатыПоследнихДвиженийПоРегистрамСведений.ДатаДокумента КАК ДатаДокумента,
	|			ДатыПоследнихДвиженийПоРегистрамСведений.ДатаДвиженийБухгалтерии КАК ДатаДвиженийБухгалтерии,
	|			ДатыПоследнихДвиженийПоРегистрамСведений.ПричинаСписания КАК ПричинаСписания,
	|			ДатыПоследнихДвиженийПоРегистрамСведений.СписыватьПриПринятииКУчету КАК СписыватьПриПринятииКУчету,
	|			ПараметрыАмортизацииОС.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|			ПервоначальныеСведенияОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|			МестонахождениеОСПоследнее.МОЛ КАК ПоследнееМОЛ,
	|			МестонахождениеОСПоследнее.Местонахождение КАК ПоследнееМестонахождение,
	|			МестонахождениеОСПредпоследнее.МОЛ КАК ПредпоследнееМОЛ,
	|			МестонахождениеОСПредпоследнее.Местонахождение КАК ПредпоследнееМестонахождение
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ДвиженияОС.ОсновноеСредство КАК ОсновноеСредство,
	|				ДвиженияОС.Документ КАК Документ,
	|				ДвиженияОС.ТипДокумента КАК ТипДокумента,
	|				ДвиженияОС.ДатаДокумента КАК ДатаДокумента,
	|				ДвиженияОС.ДатаДвиженийБухгалтерии КАК ДатаДвиженийБухгалтерии,
	|				ДвиженияОС.ПричинаСписания КАК ПричинаСписания,
	|				ДвиженияОС.СписыватьПриПринятииКУчету КАК СписыватьПриПринятииКУчету,
	|				МАКСИМУМ(ПервоначальныеСведенияОС.Период) КАК ДатаПоследнегоПервоначальныеСведенияОС,
	|				МАКСИМУМ(ПараметрыАмортизацииОС.Период) КАК ДатаПоследнегоПараметрыАмортизацииОС,
	|				МАКСИМУМ(МестонахождениеОСПоследнее.Период) КАК ДатаПоследнегоМестонахождениеОС,
	|				МАКСИМУМ(МестонахождениеОСПредпоследнее.Период) КАК ДатаПредпоследнегоМестонахождениеОС
	|			ИЗ
	|				(ВЫБРАТЬ
	|					СобытияОС.ОсновноеСредство КАК ОсновноеСредство,
	|					Документы.Ссылка КАК Документ,
	|					Документы.ТипДокумента КАК ТипДокумента,
	|					Документы.ПричинаСписания КАК ПричинаСписания,
	|					Документы.СписыватьПриПринятииКУчету КАК СписыватьПриПринятииКУчету,
	|					СобытияОС.Период КАК ДатаДокумента,
	|					Документы.ДатаДвиженийБухгалтерии КАК ДатаДвиженийБухгалтерии
	|				ИЗ
	|					РегистрСведений.СобытияОС КАК СобытияОС
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							ПринятиеКУчетуОС.Ссылка КАК Ссылка,
	|							ПринятиеКУчетуОС.Дата КАК ДатаДвиженийБухгалтерии,
	|							""ПринятиеКУчетуОС"" КАК ТипДокумента,
	|							"""" КАК ПричинаСписания,
	|							ПринятиеКУчетуОС.СписыватьПриПринятииКУчету КАК СписыватьПриПринятииКУчету
	|						ИЗ
	|							Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|						
	|						ОБЪЕДИНИТЬ ВСЕ
	|						
	|						ВЫБРАТЬ
	|							ПеремещениеОС.Ссылка,
	|							ПеремещениеОС.Дата,
	|							""ПеремещениеОС"",
	|							"""",
	|							NULL
	|						ИЗ
	|							Документ.ПеремещениеОС КАК ПеремещениеОС
	|						
	|						ОБЪЕДИНИТЬ ВСЕ
	|						
	|						ВЫБРАТЬ
	|							ПередачаОС.Ссылка,
	|							ПередачаОС.ДокПодготовкаКПередачеОС.Дата,
	|							""ПередачаОС"",
	|							"""",
	|							NULL
	|						ИЗ
	|							Документ.ПередачаОС КАК ПередачаОС
	|							ГДЕ ПередачаОС.ДокПодготовкаКПередачеОС ССЫЛКА Документ.ПодготовкаКПередачеОС
	|						
	|						ОБЪЕДИНИТЬ ВСЕ
	|						
	|						ВЫБРАТЬ
	|							ПередачаОС.Ссылка,
	|							ПередачаОС.Дата,
	|							""ПередачаОС"",
	|							"""",
	|							NULL
	|						ИЗ
	|							Документ.ПередачаОС КАК ПередачаОС
	|							ГДЕ НЕ ПередачаОС.ДокПодготовкаКПередачеОС ССЫЛКА Документ.ПодготовкаКПередачеОС
	|						
	|						ОБЪЕДИНИТЬ ВСЕ
	|						
	|						ВЫБРАТЬ
	|							СписаниеОС.Ссылка,
	|							СписаниеОС.Дата,
	|							""СписаниеОС"",
	|							СписаниеОС.ПричинаСписания.Представление,
	|							NULL
	|						ИЗ
	|							Документ.СписаниеОС КАК СписаниеОС) КАК Документы
	|						ПО СобытияОС.Регистратор = Документы.Ссылка
	|
	|" + ОтборПоПериоду + "
	|				   ) КАК ДвиженияОС
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|					ПО ДвиженияОС.ДатаДокумента >= ПервоначальныеСведенияОС.Период
	|						И ДвиженияОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС КАК МестонахождениеОСПоследнее
	|					ПО ДвиженияОС.ДатаДокумента >= МестонахождениеОСПоследнее.Период
	|						И ДвиженияОС.ОсновноеСредство = МестонахождениеОСПоследнее.ОсновноеСредство
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОС КАК ПараметрыАмортизацииОС
	|					ПО ДвиженияОС.ДатаДокумента >= ПараметрыАмортизацииОС.Период
	|						И ДвиженияОС.ОсновноеСредство = ПараметрыАмортизацииОС.ОсновноеСредство
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС КАК МестонахождениеОСПредпоследнее
	|					ПО ДвиженияОС.ОсновноеСредство = МестонахождениеОСПредпоследнее.ОсновноеСредство
	|						И ДвиженияОС.ДатаДокумента > МестонахождениеОСПредпоследнее.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ДвиженияОС.ОсновноеСредство,
	|				ДвиженияОС.Документ,
	|				ДвиженияОС.ТипДокумента,
	|				ДвиженияОС.ДатаДокумента,
	|				ДвиженияОС.СписыватьПриПринятииКУчету,
	|				ДвиженияОС.ДатаДвиженийБухгалтерии,
	|				ДвиженияОС.ПричинаСписания) КАК ДатыПоследнихДвиженийПоРегистрамСведений
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС КАК МестонахождениеОСПоследнее
	|				ПО ДатыПоследнихДвиженийПоРегистрамСведений.ОсновноеСредство = МестонахождениеОСПоследнее.ОсновноеСредство
	|					И ДатыПоследнихДвиженийПоРегистрамСведений.ДатаПоследнегоМестонахождениеОС = МестонахождениеОСПоследнее.Период
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС КАК МестонахождениеОСПредпоследнее
	|				ПО ДатыПоследнихДвиженийПоРегистрамСведений.ОсновноеСредство = МестонахождениеОСПредпоследнее.ОсновноеСредство
	|					И ДатыПоследнихДвиженийПоРегистрамСведений.ДатаПредпоследнегоМестонахождениеОС = МестонахождениеОСПредпоследнее.Период
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОС КАК ПараметрыАмортизацииОС
	|				ПО ДатыПоследнихДвиженийПоРегистрамСведений.ОсновноеСредство = ПараметрыАмортизацииОС.ОсновноеСредство
	|					И ДатыПоследнихДвиженийПоРегистрамСведений.ДатаПоследнегоПараметрыАмортизацииОС = ПараметрыАмортизацииОС.Период
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|				ПО ДатыПоследнихДвиженийПоРегистрамСведений.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|					И ДатыПоследнихДвиженийПоРегистрамСведений.ДатаПоследнегоПервоначальныеСведенияОС = ПервоначальныеСведенияОС.Период) КАК СрезПоследнихПоРегистрамСведений
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Запись, , ) КАК НачисленнаяАмортизацияИлиИзносОС
	|			ПО СрезПоследнихПоРегистрамСведений.ОсновноеСредство = НачисленнаяАмортизацияИлиИзносОС.ОсновноеСредство
	|				И СрезПоследнихПоРегистрамСведений.ДатаДвиженийБухгалтерии > НачисленнаяАмортизацияИлиИзносОС.Период
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Запись, , ) КАК ВосстановительнаяСтоимостьОС
	|			ПО СрезПоследнихПоРегистрамСведений.ОсновноеСредство = ВосстановительнаяСтоимостьОС.ОсновноеСредство
	|				И СрезПоследнихПоРегистрамСведений.ДатаДвиженийБухгалтерии > ВосстановительнаяСтоимостьОС.Период
	|				И НЕ (ВосстановительнаяСтоимостьОС.Регистратор ССЫЛКА Документ.АмортизацияОС)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СрезПоследнихПоРегистрамСведений.ОсновноеСредство,
	|		СрезПоследнихПоРегистрамСведений.Документ,
	|		СрезПоследнихПоРегистрамСведений.ТипДокумента,
	|		СрезПоследнихПоРегистрамСведений.ДатаДокумента,
	|		СрезПоследнихПоРегистрамСведений.ДатаДвиженийБухгалтерии,
	|		СрезПоследнихПоРегистрамСведений.ПричинаСписания,
	|		СрезПоследнихПоРегистрамСведений.СписыватьПриПринятииКУчету,
	|		СрезПоследнихПоРегистрамСведений.СрокПолезногоИспользования,
	|		СрезПоследнихПоРегистрамСведений.ОсновноеСредство.Код,
	|		СрезПоследнихПоРегистрамСведений.ПервоначальнаяСтоимость,
	|		СрезПоследнихПоРегистрамСведений.ПоследнееМОЛ,
	|		СрезПоследнихПоРегистрамСведений.ПредпоследнееМОЛ,
	|		СрезПоследнихПоРегистрамСведений.ПоследнееМестонахождение,
	|		СрезПоследнихПоРегистрамСведений.ПредпоследнееМестонахождение) КАК СрезПоследнихПоРегистрамСведенийИУУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОС КАК СостоянияОС
	|		ПО СрезПоследнихПоРегистрамСведенийИУУ.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|			И (СостоянияОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Запись, , ) КАК ВосстановительнаяСтоимостьОС
	|		ПО СрезПоследнихПоРегистрамСведенийИУУ.ОсновноеСредство = ВосстановительнаяСтоимостьОС.ОсновноеСредство
	|			И ВосстановительнаяСтоимостьОС.Период = СрезПоследнихПоРегистрамСведенийИУУ.ДатаПоследнегоДвиженияВосстановительнаяСтоимость
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Запись, , ) КАК НачисленнаяАмортизацияИлиИзносОС
	|		ПО СрезПоследнихПоРегистрамСведенийИУУ.ОсновноеСредство = НачисленнаяАмортизацияИлиИзносОС.ОсновноеСредство
	|			И НачисленнаяАмортизацияИлиИзносОС.Период = СрезПоследнихПоРегистрамСведенийИУУ.ДатаПоследнегоДвиженияНачисленнаяАмортизацияИлиИзнос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Запись, , ) КАК АмортизацияИлиИзносПоДокументу
	|		ПО СрезПоследнихПоРегистрамСведенийИУУ.ОсновноеСредство = АмортизацияИлиИзносПоДокументу.ОсновноеСредство
	|			И СрезПоследнихПоРегистрамСведенийИУУ.ДатаДвиженийБухгалтерии = АмортизацияИлиИзносПоДокументу.Период
	|			И (АмортизацияИлиИзносПоДокументу.АмортизацияПриход > 0)
	|" + ?((ЗначениеЗаполнено(Подразделение)) ИЛИ (ЗначениеЗаполнено(МОЛ)), "ГДЕ " ,"") + ?(НЕ ЗначениеЗаполнено(Подразделение), "", "СрезПоследнихПоРегистрамСведенийИУУ.ПоследнееМестонахождение = &Подразделение ИЛИ СрезПоследнихПоРегистрамСведенийИУУ.ПредпоследнееМестонахождение = &Подразделение") + 
			   ?(НЕ ЗначениеЗаполнено(МОЛ), "", ?(НЕ ЗначениеЗаполнено(Подразделение), "", " И ") + "СрезПоследнихПоРегистрамСведенийИУУ.ПоследнееМОЛ = &МОЛ ИЛИ СрезПоследнихПоРегистрамСведенийИУУ.ПредпоследнееМОЛ = &МОЛ") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента";

	Выборка = Запрос.Выполнить().Выбрать();
	
	// Заполнение таблицы строк инвентарной книги.
	
	СтрокиИнвентарнойКниги = Новый ТаблицаЗначений();
	СтрокиИнвентарнойКниги.Колонки.Добавить("ДокументСсылка");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ОсновноеСредствоСсылка");	
	СтрокиИнвентарнойКниги.Колонки.Добавить("ОсновноеСредство");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ИнвентарныйНомер");
	СтрокиИнвентарнойКниги.Колонки.Добавить("СрокПолезногоИспользования");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПервоначальнаяСтоимость");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоПредставлениеДокумента");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоДатаПринятияКУчету");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоДокументПринятияКУчету");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоПодразделение");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоМОЛ");
	СтрокиИнвентарнойКниги.Колонки.Добавить("НачисленнаяАмортизацияИлиИзнос");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ОстаточнаяСтоимость");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПеремещениеИлиВыбытиеПредставлениеДокумента");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПеремещениеИлиВыбытиеПодразделение");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПеремещениеИлиВыбытиеМОЛ");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПеремещениеИлиВыбытиеПричинаВыбытия");
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаИнвентарнойКниги = СтрокиИнвентарнойКниги.Добавить();
		
		СтрокаИнвентарнойКниги.ОсновноеСредствоСсылка                          = Выборка.ОсновноеСредствоСсылка;
		//СтрокаИнвентарнойКниги.ОсновноеСредство                                = ?(НЕ ЗначениеЗаполнено(Выборка.ОсновноеСредствоНаименованиеПолное), Выборка.ОсновноеСредствоНаименование, Выборка.ОсновноеСредствоНаименованиеПолное);
		СтрокаИнвентарнойКниги.ОсновноеСредство                                = Выборка.ОсновноеСредствоНаименование;
		СтрокаИнвентарнойКниги.ИнвентарныйНомер                                = Выборка.ИнвентарныйНомер;
		СтрокаИнвентарнойКниги.СрокПолезногоИспользования                      = Выборка.СрокПолезногоИспользования;
		СтрокаИнвентарнойКниги.ДокументСсылка                                  = Выборка.Документ;
		
		Если Выборка.ТипДокумента = "ПринятиеКУчетуОС" Тогда
			
			// Четная страница.
			СтрокаИнвентарнойКниги.ПоступилоПредставлениеДокумента             = Выборка.ПредставлениеДокумента;
			СтрокаИнвентарнойКниги.ПоступилоДатаПринятияКУчету                 = Выборка.ДатаПринятияКУчету;
			СтрокаИнвентарнойКниги.ПоступилоДокументПринятияКУчету             = Выборка.ДокументПринятияКУчету;
			СтрокаИнвентарнойКниги.ПоступилоПодразделение                      = Выборка.ПоследнееМестонахождениеПредставление;
			СтрокаИнвентарнойКниги.ПоступилоМОЛ                                = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.ПоследнееМОЛПредставление);
			СтрокаИнвентарнойКниги.ПервоначальнаяСтоимость                     = Выборка.ПервоначальнаяСтоимость;
			СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос              = 0;
			
			// Нечетная страница.
			СтрокаИнвентарнойКниги.ОстаточнаяСтоимость                         = ?(Выборка.СписыватьПриПринятииКУчету,
																				   0,
																				   Выборка.ПервоначальнаяСтоимость);
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПредставлениеДокумента = "";
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПодразделение          = "";
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеМОЛ                    = "";
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПричинаВыбытия         = "";
			
		ИначеЕсли Выборка.ТипДокумента = "ПеремещениеОС" И Выборка.ПоследнееМестонахождение = Подразделение Тогда
			
			// Четная страница.
			СтрокаИнвентарнойКниги.ПоступилоПредставлениеДокумента             = Выборка.ПредставлениеДокумента;
			СтрокаИнвентарнойКниги.ПоступилоДатаПринятияКУчету                 = Выборка.ДатаПринятияКУчету;
			СтрокаИнвентарнойКниги.ПоступилоДокументПринятияКУчету             = "";
			СтрокаИнвентарнойКниги.ПоступилоПодразделение                      = Выборка.ПоследнееМестонахождениеПредставление;
			СтрокаИнвентарнойКниги.ПоступилоМОЛ                                = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.ПоследнееМОЛПредставление);
			СтрокаИнвентарнойКниги.ПервоначальнаяСтоимость                     = Выборка.ВосстановительнаяСтоимость;
			СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос              = ?(Выборка.НачисленнаяАмортизация <> NULL, Выборка.НачисленнаяАмортизация, 0) 
																				 + ?(Выборка.АмортизацияПоДокументу <> NULL, Выборка.АмортизацияПоДокументу, 0);
			
			// Нечетная страница.
			СтрокаИнвентарнойКниги.ОстаточнаяСтоимость                         = ?(Выборка.ВосстановительнаяСтоимость <> NULL, Выборка.ВосстановительнаяСтоимость, 0) - СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос;
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПредставлениеДокумента = Выборка.ПредставлениеДокумента;			
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПодразделение          = Выборка.ПредпоследнееМестонахождениеПредставление;
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеМОЛ                    = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.ПредпоследнееМОЛПредставление);
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПричинаВыбытия         = "";
			
		Иначе                                                         
			
			// Четная страница.
			СтрокаИнвентарнойКниги.ПоступилоПредставлениеДокумента             = "";
			СтрокаИнвентарнойКниги.ПоступилоДатаПринятияКУчету                 = "";
			СтрокаИнвентарнойКниги.ПоступилоДокументПринятияКУчету             = Неопределено;
			СтрокаИнвентарнойКниги.ПоступилоПодразделение                      = "";
			СтрокаИнвентарнойКниги.ПоступилоМОЛ                                = "";
			СтрокаИнвентарнойКниги.ПервоначальнаяСтоимость                     = Выборка.ВосстановительнаяСтоимость;
			СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос              = ?(Выборка.НачисленнаяАмортизация <> NULL, Выборка.НачисленнаяАмортизация, 0)
																				 + ?(Выборка.АмортизацияПоДокументу <> NULL, Выборка.АмортизацияПоДокументу, 0);
			
			// Нечетная страница.
			СтрокаИнвентарнойКниги.ОстаточнаяСтоимость                         = ?(Выборка.ВосстановительнаяСтоимость <> NULL, Выборка.ВосстановительнаяСтоимость, 0) - СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос;
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПредставлениеДокумента = Выборка.ПредставлениеДокумента;			
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПодразделение          = Выборка.ПоследнееМестонахождениеПредставление;
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеМОЛ                    = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.ПоследнееМОЛПредставление);
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПричинаВыбытия         = Выборка.ПричинаСписания;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод страниц инвентарной книги.
	                    
	ДокументРезультат.Очистить();
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСверху         = 20;
	ДокументРезультат.ПолеСнизу          = 20;
	ДокументРезультат.ПолеСлева          = 10;
	ДокументРезультат.ПолеСправа         = 10;
	ДокументРезультат.ФиксацияСлева      = 3;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентарнаяКнигаОС_Обложка";
	
	Макет = ПолучитьМакет("Страницы");
	
	НомерЧетнойСтраницы   = 2;
	НомерНечетнойСтраницы = НомерЧетнойСтраницы + 1;
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.НомерЧетнойСтраницы   = НомерЧетнойСтраницы;
	Шапка.Параметры.НомерНечетнойСтраницы = НомерНечетнойСтраницы;	
	ДокументРезультат.Вывести(Шапка);
	
	Подвал = Макет.ПолучитьОбласть("Подвал");
	
	Для Каждого СтрокаИнвентарнойКниги Из СтрокиИнвентарнойКниги Цикл
		
		Строка = Макет.ПолучитьОбласть("Строка");
				
		Строка.Параметры.Заполнить(СтрокаИнвентарнойКниги);
		Строка.Параметры.НомерСтроки = СтрокиИнвентарнойКниги.Индекс(СтрокаИнвентарнойКниги) + 1;
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(Строка);
		СтрокаСПодвалом.Добавить(Подвал);

		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаСПодвалом) Тогда
			
			ДокументРезультат.Вывести(Подвал);
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();

			НомерЧетнойСтраницы   = НомерЧетнойСтраницы + 2;
			НомерНечетнойСтраницы = НомерНечетнойСтраницы + 2;
			
			Шапка = Макет.ПолучитьОбласть("Шапка");
			Шапка.Параметры.НомерЧетнойСтраницы   = НомерЧетнойСтраницы;
			Шапка.Параметры.НомерНечетнойСтраницы = НомерНечетнойСтраницы;
			ДокументРезультат.Вывести(Шапка);
			
		КонецЕсли;

		ДокументРезультат.Вывести(Строка);
		
	КонецЦикла;

	ДокументРезультат.Вывести(Подвал);
	
	ДокументРезультат.ТолькоПросмотр = Истина;
	
КонецПроцедуры // СформироватьСтраницы()

#КонецЕсли
