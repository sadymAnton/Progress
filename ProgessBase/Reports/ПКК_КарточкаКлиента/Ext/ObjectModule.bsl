#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает АВС-каласс контрагента отчета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка - класс контрагента отчета
//
Функция ПолучитьАВСКласс()

	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ABCКлассификацияПокупателейСрезПоследних.ABCКлассПокупателя КАК ABCКласс
	|ИЗ
	|	РегистрСведений.ABCКлассификацияПокупателей.СрезПоследних(&ДатаСреза, Контрагент = &Контрагент) КАК ABCКлассификацияПокупателейСрезПоследних
	|";
	
	Запрос.УстановитьПараметр("ДатаСреза", ?(КонецПериода = '00010101000000', Неопределено, КонецПериода));
	Запрос.УстановитьПараметр("Контрагент", КонтрагентОтчета);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		Возврат "Не задан";
	Иначе
		Если НЕ ЗначениеЗаполнено(ТаблицаЗапроса[0].ABCКласс) Тогда
			Возврат "Не задан";
		Иначе
			Возврат Строка(ТаблицаЗапроса[0].ABCКласс);
		КонецЕсли; 
	КонецЕсли; 

КонецФункции // ПолучитьАВСКласс()

// Функция возвращает стадию взаимоотношений с контрагентом отчета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка - стадия взаимоотношений с контрагентом отчета
//
Функция ПолучитьСтадиюВзаимоотношений()

	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтадииВзаимоотношенийСПокупателямиСрезПоследних.Стадия КАК Стадия,
	|	СтадииВзаимоотношенийСПокупателямиСрезПоследних.КлассПостоянногоПокупателя КАК КлассПостоянногоПокупателя
	|ИЗ
	|	РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(&ДатаСреза, Контрагент = &Контрагент) КАК СтадииВзаимоотношенийСПокупателямиСрезПоследних
	|";
	
	Запрос.УстановитьПараметр("ДатаСреза", ?(КонецПериода = '00010101000000', Неопределено, КонецПериода));
	Запрос.УстановитьПараметр("Контрагент", КонтрагентОтчета);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		Возврат "Не задана";
	Иначе
		Если НЕ ЗначениеЗаполнено(ТаблицаЗапроса[0].Стадия) Тогда
			Возврат "Не задана";
		Иначе
			Возврат (Строка(ТаблицаЗапроса[0].Стадия) + ?(ЗначениеЗаполнено(ТаблицаЗапроса[0].КлассПостоянногоПокупателя), (", " + Строка(ТаблицаЗапроса[0].КлассПостоянногоПокупателя)), ""));
		КонецЕсли; 
	КонецЕсли; 

КонецФункции // ПолучитьСтадиюВзаимоотношений()

// Функция возвращает источник информации при обращении контрагента отчета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка - стадия взаимоотношений с контрагентом отчета
//
Функция ПолучитьИсточникИнформацииПриОбращении()
	
	СтруктураИсточника = РегистрыСведений.ИсточникИнформацииПриОбращении.ПолучитьПоследнее(?(КонецПериода = '00010101000000', Неопределено, КонецПериода), Новый Структура("Контрагент",КонтрагентОтчета));
	ИсточникРегистра  = СтруктураИсточника.ИсточникИнформации;
	
	Если ЗначениеЗаполнено(ИсточникРегистра) Тогда
		ИсточникИнформации = ИсточникРегистра;
	Иначе
		ИсточникИнформации = "Не указан";
	КонецЕсли;
	
	Возврат ИсточникИнформации;
КонецФункции // ПолучитьИсточникИнформацииПриОбращении()

// Функция оределяет надежность поставщика - контрагента отчета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка, надежность поставщика
//
Функция ОпределитьНадежностьПоставщика()

	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НадежностьПоставщиковСрезПоследних.Надежность
	|ИЗ
	|	РегистрСведений.НадежностьПоставщиков.СрезПоследних(&ДатаСреза, Контрагент = &Контрагент) КАК НадежностьПоставщиковСрезПоследних
	|";
	
	Запрос.УстановитьПараметр("ДатаСреза", ?(КонецПериода = '00010101000000', Неопределено, КонецПериода));
	Запрос.УстановитьПараметр("Контрагент", КонтрагентОтчета);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() = 0 Тогда
		Возврат "Не задана";
	Иначе
		Если НЕ ЗначениеЗаполнено(ТаблицаЗапроса[0].Надежность) Тогда
			Возврат "Не задана";
		Иначе
			Возврат Строка(ТаблицаЗапроса[0].Надежность);
		КонецЕсли; 
	КонецЕсли; 

КонецФункции // ОпределитьНадежностьПоставщика(КонтрагентОтчета)

//Функция определяет контактных лиц контрагента
//Параметры:
//Контрагент - СправочникСсылка.Контрагенты, по которому происходит отбор
//ВыбТипКЛ - Тип контактного лица
//Возвращается таблица значений с колонками
//КонтактноеЛицо, ДолжностьКЛ
Функция ПолучитьКонтакныхЛицКонтрагента()
	
	Запрос = Новый Запрос();

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛица.Ссылка                           КАК КонтактноеЛицо,
	|	КонтактныеЛицаКонтрагентов.Должность            КАК Должность,
	|	КонтактныеЛицаКонтрагентов.РольКонтактногоЛица  КАК Роль,
	|	КонтактныеЛица.Фамилия                          КАК Фамилия,
	|	КонтактныеЛица.Имя                              КАК Имя,
	|	КонтактныеЛица.Отчество                         КАК Отчество
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|ПО
	|	КонтактныеЛицаКонтрагентов.КонтактноеЛицо = КонтактныеЛица.Ссылка
	|
	|ГДЕ
	|	КонтактныеЛицаКонтрагентов.Владелец = &ВыбКонтрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактныеЛица.Наименование ВОЗР
	|";

	Запрос.УстановитьПараметр("ВыбКонтрагент", КонтрагентОтчета);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьКонтакныхЛицКонтрагента()

//Возвращает таблицу значений с данными о контактной информации по заданным параметрам
//
Функция ПолучитьДанныеКонтактнойИнформации(Объект, ТипИнформации = Неопределено, ВидИнформации = Неопределено)

	Запрос = Новый Запрос;
	
	СтрокаВиртуальныхПараметров = "КонтактнаяИнформация.Объект = &Объект";
	
	Если ТипИнформации <> Неопределено Тогда
		СтрокаВиртуальныхПараметров = СтрокаВиртуальныхПараметров + " И КонтактнаяИнформация.Тип = &Тип";
		Запрос.УстановитьПараметр("Тип", ТипИнформации);
	КонецЕсли; 
	Если ВидИнформации <> Неопределено Тогда
		СтрокаВиртуальныхПараметров = СтрокаВиртуальныхПараметров + " И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид", ВидИнформации);
	КонецЕсли; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект        КАК Объект,
	|	КонтактнаяИнформация.Вид           КАК Вид,
	|	КонтактнаяИнформация.Тип           КАК Тип,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|ГДЕ
	|	" + СтрокаВиртуальныхПараметров + "
	|";
	
	Запрос.УстановитьПараметр("ДатаСреза", ?(КонецПериода = '00010101000000', Неопределено, КонецПериода));
	Запрос.УстановитьПараметр("Объект"   , Объект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеКонтактнойИнформации()

// Функция возвращает данные о принадлежности объекта к категориям
//
// Переметры
//  ВыбОбъект - анализируемый объект
//
// Возвращаемое значение
//  ТаблицаЗапроса - таблица значений с данными о принадлежности
//   объекта к категориям
Функция ПрочитатьКатегорииОбъекта()

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("НазначениеКатегорий",   ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	Запрос.УстановитьПараметр("ОбъектОтбораКатегорий", КонтрагентОтчета);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ  РАЗЛИЧНЫЕ
	|	КатегорииОбъектов.ПометкаУдаления                            КАК ПометкаУдаления,
	|	КатегорииОбъектов.Ссылка                                     КАК Категория,
	|
	|	ВЫБОР КОГДА
	|		РегистрСведений.КатегорииОбъектов.Объект ЕСТЬ НЕ NULL
	|	ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ                                                        КАК Принадлежность
	|
	|
	|ИЗ
	|// Отбираются категории, предназначенные для заданного типа объектов.
	|	(
	|	ВЫБРАТЬ 
	|		Справочник.КатегорииОбъектов.Ссылка          КАК Ссылка,
	|		Справочник.КатегорииОбъектов.ПометкаУдаления КАК ПометкаУдаления
	|
	|	ИЗ
	|		Справочник.КатегорииОбъектов
	|
	|	ГДЕ
	|		Справочник.КатегорииОбъектов.НазначениеКатегории В ( &НазначениеКатегорий )
	|
	|	)                                                            КАК КатегорииОбъектов
	|
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|// Присоединяются категории, назначенные для заданного объекта.
	|	РегистрСведений.КатегорииОбъектов
	|ПО
	|	РегистрСведений.КатегорииОбъектов.Категория = КатегорииОбъектов.Ссылка
	|	И
	|	РегистрСведений.КатегорииОбъектов.Объект = &ОбъектОтбораКатегорий
	|
	|ГДЕ
	|     (РегистрСведений.КатегорииОбъектов.Объект ЕСТЬ НЕ NULL) и (КатегорииОбъектов.ПометкаУдаления = Ложь)
	|УПОРЯДОЧИТЬ ПО
	|	КатегорииОбъектов.Ссылка.Наименование
	|";


	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

// Функция свойства и значения свойст объекта
//
// Переметры
//  ВыбОбъект - анализируемый объект
//
// Возвращаемое значение
//  ТаблицаЗапроса - таблица значений с данными о всойствах объекта
Функция ПрочитатьСвойстваИЗначенияОбъекта()

	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("НазначениеСвойств",       ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты);
	Запрос.УстановитьПараметр("ОбъектОтбораЗначений",    КонтрагентОтчета);
	Запрос.УстановитьПараметр("СписокНазначенийСвойств", КонтрагентОтчета);

	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СвойстваОбъектов.ПометкаУдаления                            КАК ПометкаУдаления,
	|	СвойстваОбъектов.Ссылка                                     КАК Свойство,
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение            КАК Значение
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ 
	|		ПланВидовХарактеристик.СвойстваОбъектов.Ссылка          КАК Ссылка,
	|		ПланВидовХарактеристик.СвойстваОбъектов.ПометкаУдаления КАК ПометкаУдаления
	|
	|	ИЗ
	|		ПланВидовХарактеристик.СвойстваОбъектов
	|
	|	ГДЕ
	|		ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства В ( &НазначениеСвойств )
	|
	|	)                                                           КАК СвойстваОбъектов
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЗначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.ЗначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
	|	И
	|	РегистрСведений.ЗначенияСвойствОбъектов.Объект = &ОбъектОтбораЗначений
	|
	|ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ
	|	РегистрСведений.НазначенияСвойствОбъектов
	|ПО
	|	РегистрСведений.НазначенияСвойствОбъектов.Свойство = СвойстваОбъектов.Ссылка
	|	И
	|	РегистрСведений.ЗначенияСвойствОбъектов.Значение ЕСТЬ NULL
	|
	|ГДЕ
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект ЕСТЬ NULL
	|	ИЛИ
	|	РегистрСведений.НазначенияСвойствОбъектов.Объект = &СписокНазначенийСвойств
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваОбъектов.Ссылка.Наименование
	|";

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗапроса;

КонецФункции

Функция  ПолучитьЗапретОтгрузки()
		
	ЗапретОтгрузки = Новый Структура("Запрет,Причина,Вид");
	
	ДанныеПоСтатусу = РегистрыСведений.ПКК_ПричиныБлокировкиОтгрузки.СрезПоследних(КонецПериода, Новый Структура("Контрагент", КонтрагентОтчета));
	
	Если ДанныеПоСтатусу.Количество() = 0 Тогда
		    ЗапретОтгрузки.Запрет = "Нет";
			ЗапретОтгрузки.Причина = Справочники.ПКК_ПричиныБлокировкиОтгрузки.НеБлокирован;
			ЗапретОтгрузки.Вид = "Не заполненна";
	Иначе
		Если ДанныеПоСтатусу[0].ПричинаБлокировкиОтгрузки = Справочники.ПКК_ПричиныБлокировкиОтгрузки.НеБлокирован Тогда
			ЗапретОтгрузки.Запрет = "Нет";
			ЗапретОтгрузки.Причина = Справочники.ПКК_ПричиныБлокировкиОтгрузки.НеБлокирован;
			ЗапретОтгрузки.Вид = "Авто";
		ИначеЕсли ДанныеПоСтатусу[0].ПричинаБлокировкиОтгрузки = Справочники.ПКК_ПричиныБлокировкиОтгрузки.ПросроченнаяДЗ Тогда
			ЗапретОтгрузки.Запрет = "Да";
			ЗапретОтгрузки.Причина = Справочники.ПКК_ПричиныБлокировкиОтгрузки.ПросроченнаяДЗ;
			ЗапретОтгрузки.Вид = "Авто";	
		Иначе
			ЗапретОтгрузки.Запрет = "Да";
			ЗапретОтгрузки.Причина = ДанныеПоСтатусу[0].ПричинаБлокировкиОтгрузки;
			ЗапретОтгрузки.Вид = "ручная";	
		КонецЕсли;
	КонецЕсли;
			
	Возврат ЗапретОтгрузки;
	
КонецФункции 

Функция ПолучитьПродажи()
	
	Продажи = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПродажиОбороты.СтоимостьОборот + ПродажиОбороты.НДСОборот как Продажи,
		|	ПродажиОбороты.НДСОборот
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода, , Контрагент = &Контрагент) КАК ПродажиОбороты";

	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Контрагент", КонтрагентОтчета);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Продажи = ВыборкаДетальныеЗаписи.Продажи
	КонецЦикла;



	Возврат Продажи;
	
КонецФункции



// Процедура заполняет поле табличного документа
//
// Переметры
//  Таб - поле табличного документа
//  ПорядковыйНомер - порядковый номер выводимого параметра
//  Имя - строка, имя выводимого параметра
//
// Возвращаемое значение
//  НЕТ
Процедура ВывестиДанные(Таб, ПорядковыйНомер, Имя)
	
	//Общая информация
	
	Макет = ПолучитьМакет("Макет");

	Если Имя = "ОбщиеДанные" Тогда
		Секция = Макет.ПолучитьОбласть("Шапка_Общие");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		Секция = Макет.ПолучитьОбласть("Строка_Общие");
		Если ЗначениеЗаполнено(КонтрагентОтчета.ЮрФизЛицо) Тогда
			Если КонтрагентОтчета.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				Секция.Параметры.ЮрФизЛицо = "Юридическое лицо";
			Иначе //Физическое лицо
				Секция.Параметры.ЮрФизЛицо = "Физическое лицо";
			КонецЕсли; 
		Иначе
			Секция.Параметры.ЮрФизЛицо = "Не задано";
		КонецЕсли; 

		Если ЗначениеЗаполнено(КонтрагентОтчета.ГоловнойКонтрагент) Тогда
			СтрокаГоловногоКонтрагента = Строка(КонтрагентОтчета.ГоловнойКонтрагент);
			Если ЗначениеЗаполнено(КонтрагентОтчета.ГоловнойКонтрагент.ЮрФизЛицо) Тогда
				Если КонтрагентОтчета.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
					СтрокаГоловногоКонтрагента = СтрокаГоловногоКонтрагента + " (Юридическое лицо)";
				Иначе //Физическое лицо
					СтрокаГоловногоКонтрагента = СтрокаГоловногоКонтрагента + " (Физическое лицо)";
				КонецЕсли; 
			КонецЕсли; 
			Секция.Параметры.ГоловнойКонтрагент = СтрокаГоловногоКонтрагента;
			Секция.Области.ГоловнойКонтрагент.Расшифровка = КонтрагентОтчета.ГоловнойКонтрагент;
		Иначе
			Секция.Параметры.ГоловнойКонтрагент = "Не задан";
		КонецЕсли;
		
		СтрокаВидовДеятельности = "";
		Для каждого ВидДеятельности Из КонтрагентОтчета.ВидыДеятельности Цикл
			Если НЕ ПустаяСтрока(СтрокаВидовДеятельности) Тогда
				СтрокаВидовДеятельности = СтрокаВидовДеятельности + ", ";
			КонецЕсли;
			СтрокаВидовДеятельности = СтрокаВидовДеятельности + ВидДеятельности.ВидДеятельности.Наименование;
		КонецЦикла;
		
		Секция.Параметры.ВидыДеятельности = СокрЛП(СтрокаВидовДеятельности);
		
		МассивКатегорий = ПрочитатьКатегорииОбъекта().ВыгрузитьКолонку("Категория");
		СтрокаКатегорий = "";
		Для а=0 По (МассивКатегорий.Количество()-1) Цикл
			Если а=0 Тогда
				СтрокаКатегорий = СтрокаКатегорий + Строка(СокрЛП(МассивКатегорий[а].Наименование));
			Иначе
				СтрокаКатегорий = СтрокаКатегорий + ", " + Символы.ПС + Строка(СокрЛП(МассивКатегорий[а].Наименование));
			КонецЕсли; 
		КонецЦикла; 
		Секция.Параметры.СтрокаКатегорий = СокрЛП(СтрокаКатегорий);
		
		Секция.Параметры.ПолноеНаименование = СокрЛП(КонтрагентОтчета.НаименованиеПолное);
		
		Секция.Параметры.Вывеска = СокрЛП(КонтрагентОтчета.НСИ_Вывеска);
		
		Таб.Вывести(Секция,2);

		Секция = Макет.ПолучитьОбласть("Шапка_ИнформацияКонтрагента");
		Таб.Вывести(Секция, 2);

		Если КонтрагентОтчета.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда //Юридическое лицо
			
			Секция = Макет.ПолучитьОбласть("ИнформацияЮрЛицо");
			Секция.Параметры.ИНН       = КонтрагентОтчета.ИНН;
			Секция.Параметры.КПП       = КонтрагентОтчета.КПП;
			Секция.Параметры.КодПоОКПО = КонтрагентОтчета.КодПоОКПО;
			
		Иначе //Физическое лицо
			
			Секция = Макет.ПолучитьОбласть("ИнформацияФизЛицо");
			Секция.Параметры.ИНН                = КонтрагентОтчета.ИНН;
			Секция.Параметры.ДокументУдЛичность = КонтрагентОтчета.ДокументУдостоверяющийЛичность;
			
		КонецЕсли; 
		
		ЮрАдрес   = ПолучитьДанныеКонтактнойИнформации(КонтрагентОтчета, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Секция.Параметры.ЮрАдрес   = ?(ЮрАдрес.Количество() = 0, "", ЮрАдрес[0].Представление);
		ФактАдрес = ПолучитьДанныеКонтактнойИнформации(КонтрагентОтчета, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		Секция.Параметры.ФактАдрес = ?(ФактАдрес.Количество() = 0, "", ФактАдрес[0].Представление);
		Телефон   = ПолучитьДанныеКонтактнойИнформации(КонтрагентОтчета, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		Секция.Параметры.Телефон   = ?(Телефон.Количество() = 0, "", Телефон[0].Представление);
		
		Таб.Вывести(Секция,3);

		Если ЗначениеЗаполнено(КонтрагентОтчета.ОсновнойБанковскийСчет) тогда
			Секция = Макет.ПолучитьОбласть("БанкКонтрагента");
			Секция.Параметры.НомерСчета = КонтрагентОтчета.ОсновнойБанковскийСчет.НомерСчета;
			Если ЗначениеЗаполнено(КонтрагентОтчета.ОсновнойБанковскийСчет.Банк) Тогда
				Секция.Параметры.Банк       = КонтрагентОтчета.ОсновнойБанковскийСчет.Банк.ПолноеНаименование() + " " + КонтрагентОтчета.ОсновнойБанковскийСчет.Банк.Город;
				Секция.Параметры.Бик        = КонтрагентОтчета.ОсновнойБанковскийСчет.Банк.Код;
				Секция.Параметры.КорСчет    = КонтрагентОтчета.ОсновнойБанковскийСчет.Банк.КоррСчет;
			КонецЕсли; 
			Таб.Вывести(Секция,3);
		КонецЕсли;

		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);
		
	ИначеЕсли Имя = "РежимРаботы" Тогда
		
		//Режим работы
		Секция = Макет.ПолучитьОбласть("Шапка_РежимРаботы");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		Секция = Макет.ПолучитьОбласть("Строка_РежимРаботы");
		Секция.Параметры.График = ?(ПустаяСтрока(КонтрагентОтчета.РасписаниеРаботыСтрокой), "Не задан", КонтрагентОтчета.РасписаниеРаботыСтрокой);
		Таб.Вывести(Секция,2);

		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);

	ИначеЕсли Имя = "КонтИнф" Тогда
		
		//Контактная информация контрагента
		Секция = Макет.ПолучитьОбласть("Шапка_КонтактнаяИнформация");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);

		ТЗКонтИнф = ПолучитьДанныеКонтактнойИнформации(КонтрагентОтчета);
		ТЗКонтИнф.Сортировать("Тип ВОЗР");
		ПрошлыйТип = Неопределено;
		Для каждого СтрокаКИ Из ТЗКонтИнф Цикл
			Если ПрошлыйТип <> СтрокаКИ.Тип Тогда
				Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
				Таб.Вывести(Секция, 2);
				СекцияКИ_Тип = Макет.ПолучитьОбласть("КонтИнфТип");
				СекцияКИ_Тип.Параметры.ТипКИ = СтрокаКИ.Тип;
				Таб.Вывести(СекцияКИ_Тип,2);
			КонецЕсли; 
			Секция = Макет.ПолучитьОбласть("Строка_КонтактнаяИнформация");
			Секция.Параметры.ВидКИ = ?(ТипЗнч(СтрокаКИ.Вид)=Тип("Строка"),СокрЛП(СтрокаКИ.Вид),СтрокаКИ.Вид.Наименование);
			Секция.Параметры.Значение = СтрокаКИ.Представление;
			Таб.Вывести(Секция,2);
			ПрошлыйТип = СтрокаКИ.Тип;
		КонецЦикла; 

		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);

	ИначеЕсли Имя = "КонтЛица" Тогда
		
		//Контактные лица контрагента
		Секция = Макет.ПолучитьОбласть("Шапка_КонтактныеЛица");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		ТаблицаКЛ = ПолучитьКонтакныхЛицКонтрагента();
		Ном=0;
		Для каждого СтрокаКЛ Из ТаблицаКЛ Цикл
			Ном=Ном+1;
			Секция = Макет.ПолучитьОбласть("Строка_КонтактныеЛица");
			ПредставлениеКонтактногоЛица = СокрЛП(СтрокаКЛ.Фамилия) + " "+ СокрЛП(СтрокаКЛ.Имя) + " " + СокрЛП(СтрокаКЛ.Отчество);
			Если НЕ ПустаяСтрока(СтрокаКЛ.Должность) Тогда
				ПредставлениеКонтактногоЛица = ПредставлениеКонтактногоЛица + ", " + СокрЛП(СтрокаКЛ.Должность);
			КонецЕсли; 
			Если ЗначениеЗаполнено(СтрокаКЛ.Роль) Тогда
				ПредставлениеКонтактногоЛица = ПредставлениеКонтактногоЛица + " (роль: " + СокрЛП(СтрокаКЛ.Роль) + ")";
			КонецЕсли; 
			Секция.Параметры.ПредставлениеКонтактногоЛица   = ПредставлениеКонтактногоЛица;
			Секция.Области.ПредставлениеКонтактногоЛица.Расшифровка = СтрокаКЛ.КонтактноеЛицо;
			Таб.Вывести(Секция,2);

			//Если ВыводитьДопКонтИнф Тогда
				ТЗКонтИнф = ПолучитьДанныеКонтактнойИнформации(СтрокаКЛ.КонтактноеЛицо);
				ТЗКонтИнф.Сортировать("Тип ВОЗР");
				ПрошлыйТип = Неопределено;
				Для каждого СтрокаКИ Из ТЗКонтИнф Цикл
					Если ПрошлыйТип <> СтрокаКИ.Тип Тогда
						Если ПрошлыйТип <> Неопределено Тогда
							Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
							Таб.Вывести(Секция);
						КонецЕсли; 
						СекцияКИ_Тип = Макет.ПолучитьОбласть("КонтИнфТип");
						СекцияКИ_Тип.Параметры.ТипКИ = СтрокаКИ.Тип;
						Таб.Вывести(СекцияКИ_Тип,2);
					КонецЕсли; 
					СекцияКИ = Макет.ПолучитьОбласть("КонтИнф_КонтактныеЛица");
					СекцияКИ.Параметры.ВидКИ = ?(ТипЗнч(СтрокаКИ.Вид)=Тип("Строка"),СокрЛП(СтрокаКИ.Вид),СтрокаКИ.Вид.Наименование);
					СекцияКИ.Параметры.Значение = СтрокаКИ.Представление;
					Таб.Вывести(СекцияКИ,3);
					ПрошлыйТип = СтрокаКИ.Тип;
				КонецЦикла; 
				Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
				Таб.Вывести(Секция, 2);
			//КонецЕсли; 
			
		КонецЦикла; 

		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);

	ИначеЕсли Имя = "СвойстваИЗначения" Тогда
		
		//ПрочаяИнформация по свойствам
		ТаблицаСвойств = ПрочитатьСвойстваИЗначенияОбъекта();
		Секция = Макет.ПолучитьОбласть("Шапка_Свойства");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		Секция = Макет.ПолучитьОбласть("Строка_Свойства");
		Ном=0;
		Для каждого СтрокаСвойств Из ТаблицаСвойств Цикл
			Ном=Ном+1;
			Секция.Параметры.ИмяСвойства = ""+Ном+". "+СтрокаСвойств.Свойство.Наименование;
			Секция.Параметры.ЗначениеСвойства = ""+СтрокаСвойств.Значение;
			Таб.Вывести(Секция,2);
		КонецЦикла; 

		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);
		
	ИначеЕсли Имя = "ПараметрыПоставщикаПокупателя" Тогда
		
		Секция = Макет.ПолучитьОбласть("Шапка_ПараметрыПоставщикаПокупателя");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		
		Если КонтрагентОтчета.Поставщик Тогда
			
			Секция = Макет.ПолучитьОбласть("Шапка_ПараметрыПоставщика");
			Таб.Вывести(Секция,2);
			
			Секция = Макет.ПолучитьОбласть("Строка_ПараметрыПоставщика");
			Секция.Параметры.Надежность           = ОпределитьНадежностьПоставщика();
			Секция.Параметры.СрокВыполненияЗаказа = КонтрагентОтчета.СрокВыполненияЗаказаПоставщиком;
			Таб.Вывести(Секция,2);
			
			Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
			Таб.Вывести(Секция, 2);

		КонецЕсли; 
		
		Если КонтрагентОтчета.Покупатель Тогда
			
			Секция = Макет.ПолучитьОбласть("Шапка_ПараметрыПокупателя");
			Таб.Вывести(Секция,2);
			
			Секция = Макет.ПолучитьОбласть("Строка_ПараметрыПокупателя");
			Секция.Параметры.ИсточникИнформации    = ПолучитьИсточникИнформацииПриОбращении();
			Секция.Параметры.АВСКласс              = ПолучитьАВСКласс();
			Секция.Параметры.СтадияВзаимоотношений = ПолучитьСтадиюВзаимоотношений();
			Секция.Параметры.Менеджер = ?(КонтрагентОтчета.ОсновнойМенеджерПокупателя.Пустая(),"НЕТ",СокрЛП(КонтрагентОтчета.ОсновнойМенеджерПокупателя.Наименование));
			Таб.Вывести(Секция,2);
			
			Если ЗначениеЗаполнено(КонтрагентОтчета.ОсновнойМенеджерПокупателя) И ЗначениеЗаполнено(КонтрагентОтчета.ОсновнойМенеджерПокупателя.ФизЛицо) Тогда
				
				Секция = Макет.ПолучитьОбласть("Шапка_КонтИнф_Менеджер");
				Таб.Вывести(Секция,3);
				
				ТЗКонтИнф = ПолучитьДанныеКонтактнойИнформации(КонтрагентОтчета.ОсновнойМенеджерПокупателя.ФизЛицо);
				ТЗКонтИнф.Сортировать("Тип ВОЗР");
				ПрошлыйТип = Неопределено;
				Для каждого СтрокаКИ Из ТЗКонтИнф Цикл
					Если ПрошлыйТип <> СтрокаКИ.Тип Тогда
						Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
						Таб.Вывести(Секция);
						СекцияКИ_Тип = Макет.ПолучитьОбласть("КонтИнфТип");
						СекцияКИ_Тип.Параметры.ТипКИ = СтрокаКИ.Тип;
						Таб.Вывести(СекцияКИ_Тип,3);
					КонецЕсли; 
					СекцияКИ_Менеджер = Макет.ПолучитьОбласть("КонтИнф_Менеджер");
					СекцияКИ_Менеджер.Параметры.ВидКИ = СокрЛП(СтрокаКИ.Вид);
					СекцияКИ_Менеджер.Параметры.Значение = СтрокаКИ.Представление;
					Таб.Вывести(СекцияКИ_Менеджер,3);
					ПрошлыйТип = СтрокаКИ.Тип;
				КонецЦикла; 
				
			КонецЕсли; 

			Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
			Таб.Вывести(Секция, 2);
			
		КонецЕсли; 
			
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция);


	ИначеЕсли Имя = "КоммИнф" Тогда
		
		Секция = Макет.ПолучитьОбласть("Шапка_КоммИнф");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		
		Секция = Макет.ПолучитьОбласть("Строка_КоммИнф");
		
		Секция.Параметры.Дивизион				= СокрЛП(КонтрагентОтчета.Дивизион);
		Секция.Параметры.КатегорияКлиента		= СокрЛП(КонтрагентОтчета.НСИ_КаналПродаж);
		Секция.Параметры.Команда                = СокрЛП(КонтрагентОтчета.НСИ_ТорговаяКоманда);
		Секция.Параметры.ТорговыйПредставитель	= СокрЛП(КонтрагентОтчета.ОсновнойМенеджерПокупателя);
		Таб.Вывести(Секция, 2);
		
		//Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		//Таб.Вывести(Секция, 2);
		
		
	//ИначеЕсли Имя = "КредИнф" Тогда
		
		//Секция = Макет.ПолучитьОбласть("Шапка_КредИнф");
		//Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		//Таб.Вывести(Секция,1);
		
		Секция = Макет.ПолучитьОбласть("Строка_КредИнф");

		Секция.Параметры.ТипКлиента				= СокрЛП(КонтрагентОтчета.НСИ_ВидПродажи);
		Секция.Параметры.ТекСтатус				= СокрЛП(ПолучитьАВСКласс());			
		ЗапретОтгрузки = ПолучитьЗапретОтгрузки();		
		//+bolshevykh@a-prof.ru 10.03.2015 12:54
		//Секция.Параметры.ЗапретОтгрузки			= СокрЛП(ЗапретОтгрузки.Запрет);				
		//-bolshevykh@a-prof.ru
		Секция.Параметры.ПричинаЗапретаОтгрузки	=  СокрЛП(ЗапретОтгрузки.Причина)+" ("+СокрЛП(ЗапретОтгрузки.Вид)+")";						
		
		ДанныеПоСтатусуДЗ = РегистрыСведений.ПКК_СтатусыДЗ.СрезПоследних(КонецПериода, Новый Структура("Контрагент", КонтрагентОтчета));
		Если ДанныеПоСтатусуДЗ.Количество() = 0 Тогда
			Секция.Параметры.СтатусДЗ	=  СокрЛП(Справочники.ПКК_СтатусыДебиторскойЗадолженности.НеПроблемная);						
		Иначе
			Секция.Параметры.СтатусДЗ	=  СокрЛП(ДанныеПоСтатусуДЗ[0].СтатусДЗ);						
		КонецЕсли;
		
		ДанныеПоКредитномуЛимиту= РегистрыСведений.ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежа.СрезПоследних(КонецПериода, Новый Структура("Объект", КонтрагентОтчета));
		Если ДанныеПоКредитномуЛимиту.Количество() > 0  и ДанныеПоКредитномуЛимиту[0].КонтролироватьСуммуЗадолженности = истина тогда
			Секция.Параметры.КредитныйЛимит			= СокрЛП(ДанныеПоКредитномуЛимиту[0].ДопустимаяСуммаЗадолженности);		
			Секция.Параметры.МетодОплаты			= СокрЛП("Кредит");				
		КонецЕсли;
		
		Таб.Вывести(Секция,2);
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция, 2);
		
		//Выведем отчет по дебиторской задолженности по срокам долга
		Отчет = Отчеты.АП_ДебиторскаяЗадолженностьПоСрокамДолга.Создать();
		Форма = Отчет.ПолучитьФорму();
		Форма.ОтчетОбъект.УстановитьНачальныеНастройки();
		
		Если ПравоДоступа("Чтение",Метаданные.РегистрыСведений.ПКК_НастройкаПодсистемыКредитногоКонтроля) Тогда
			ДанныеНастройки = РегистрыСведений.ПКК_НастройкаПодсистемыКредитногоКонтроля.СрезПоследних(КонецПериода);
			Если ДанныеНастройки.Количество() > 0 Тогда
				ИнтервалДляОтчета = ДанныеНастройки[0].ИнтервалДЗ;
			КонецЕсли;
		КонецЕсли;
		Форма.ОтчетОбъект.Интервал = ИнтервалДляОтчета;
		Форма.ОтчетОбъект.УниверсальныйОтчет.ДатаКон = ТекущаяДата();
		Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"].Использование = Истина;
		Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"].ВидСравнения = ВидСравнения.Равно;
		Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"].Значение = КонтрагентОтчета;
		Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.ВыводитьЗаголовокОтчета = Ложь;
		
		ПострОтчета = Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета;
		
		ПострОтчета.ИзмеренияСтроки.Очистить();
		ПострОтчета.ИзмеренияСтроки.Добавить(ПострОтчета.ДоступныеПоля.МенеджерПокупателя.ПутьКДанным,,ТипИзмеренияПостроителяОтчета.Элементы);
		ПострОтчета.ИзмеренияСтроки.Добавить(ПострОтчета.ДоступныеПоля.Контрагент.ПутьКДанным,,ТипИзмеренияПостроителяОтчета.Элементы);
		ПострОтчета.ИзмеренияСтроки.Добавить(ПострОтчета.ДоступныеПоля.ДоговорКонтрагента.ПутьКДанным,,ТипИзмеренияПостроителяОтчета.Элементы);
		
		ПострОтчета.ВыбранныеПоля.Очистить();
		ПострОтчета.ВыбранныеПоля.Добавить(ПострОтчета.ДоступныеПоля.Регистратор.ПутьКДанным);
		ПострОтчета.ВыбранныеПоля.Добавить(ПострОтчета.ДоступныеПоля.Дата.ПутьКДанным);
		ПострОтчета.ВыбранныеПоля.Добавить(ПострОтчета.ДоступныеПоля.ДатаОплаты.ПутьКДанным);
		ПострОтчета.ВыбранныеПоля.Добавить(ПострОтчета.ДоступныеПоля.ДнейПросрочено.ПутьКДанным);
		ПострОтчета.ВыбранныеПоля.Добавить(ПострОтчета.ДоступныеПоля.Отсрочка.ПутьКДанным);
		
		УслОформление  = ПострОтчета.УсловноеОформление.Добавить("Дата","Дата");
		УслОформление.Использование 										  = Истина;
		Область = УслОформление.Область.Добавить("Дата","Дата",ТипОбластиОформления.Поле);
		УслОформление.ОФормление.Формат.Значение					 = "ДФ=dd.MM.yyyy";
		УслОформление.ОФормление.Формат.Использование 				 = Истина;
		УслОформление.ОФормление.ГоризонтальноеПоложение.Значение = ГоризонтальноеПоложение.Центр;
		УслОформление.ОФормление.ГоризонтальноеПоложение.Использование = истина;


		Форма.ОтчетОбъект.УниверсальныйОтчет.Показатели.Строки[0].Строки[4].Использование = Истина;
			
		Форма.ОбновитьОтчет();
		Таб.Вывести(Форма.ЭлементыФормы.ПолеТабличногоДокументаРезультат, 2);
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция, 2);
		
	ИначеЕсли Имя = "ПрайсЛисты" Тогда
		
		Секция = Макет.ПолучитьОбласть("Шапка_ПрайсЛисты");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		
		Секция = Макет.ПолучитьОбласть("ОтступСтрока|ОтступКолонка");
		Таб.Вывести(Секция,2);
		
		Отчет = Отчеты.ПЦ_ПрайсЛистКлиентов.Создать();
		ФормаОтчета = Отчет.ПолучитьФорму();
		
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Контрагент")).Поле;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = КонтрагентОтчета;
		НовыйЭлементОтбора.Использование = Истина;
		
		ПараметрПериод = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
		Если ПараметрПериод <> Неопределено Тогда
			ПараметрПериод.Значение = КонецДня(КонецПериода);
			ПараметрПериод.Использование = Истина;
		КонецЕсли;	
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Использование = Истина;
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
		
		ПолеКомпоновки = Отчет.КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле=Новый ПолеКомпоновкиДанных("Номенклатура");
		
		ТабПрайсЛисты = Новый табличныйдокумент;
		ТиповыеОтчеты.ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(Отчет, ФормаОтчета);
		Отчет.СформироватьОтчет(ТабПрайсЛисты,,Ложь);
		Таб.Присоединить(ТабПрайсЛисты, 2);
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция, 2);
		
	ИначеЕсли Имя = "ГарПисьма" Тогда
		
		Секция = Макет.ПолучитьОбласть("Шапка_ГарПисьма");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		
		Секция = Макет.ПолучитьОбласть("ОтступСтрока|ОтступКолонка");
		Таб.Вывести(Секция,2);

		Отчет = Отчеты.ПКК_ГарантийныеПисьма.Создать();
		
		ФормаОтчета = Отчет.ПолучитьФорму();
		
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Контрагент")).Поле;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = КонтрагентОтчета;
		НовыйЭлементОтбора.Использование = Истина;
		
		ПараметрНачалоПериода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		ПараметрКонецПериода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		
		Если ПараметрКонецПериода <> Неопределено Тогда
			ПараметрКонецПериода.Значение = КонецДня(КонецПериода);
			ПараметрКонецПериода.Использование = Истина;
		КонецЕсли;	
		
		Если ПараметрНачалоПериода <> Неопределено Тогда
			//{22.06.2015 Островерхий заявка №40354 
			//ПараметрНачалоПериода.Значение = НачалоДня(НачалоПериода);
			ПараметрНачалоПериода.Значение = ВернутьНачалоПериодаДляОтчетаГарантийныхПисем(КонтрагентОтчета,НачалоДня(НачалоПериода),КонецДня(КонецПериода));
			//22.06.2015 Островерхий}
			ПараметрНачалоПериода.Использование = Истина;
		КонецЕсли;	
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Использование = Истина;
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;

		ТабГарПисьма = Новый табличныйдокумент;
		ТиповыеОтчеты.ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(Отчет, ФормаОтчета);
		Отчет.СформироватьОтчет(ТабГарПисьма,,Ложь);
		Таб.Присоединить(ТабГарПисьма, 2);
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция, 2);
		
	ИначеЕсли Имя = "Продажи" Тогда
		
		Секция = Макет.ПолучитьОбласть("Шапка_Продажи");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		
		Секция = Макет.ПолучитьОбласть("ОтступСтрока|ОтступКолонка");
		Таб.Вывести(Секция,2);

		Отчет = Отчеты.ПродажиСКД.Создать();
		ФормаОтчета = Отчет.ПолучитьФорму();
		СхемаКомпоновкиДанных = Отчет.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Контрагент")).Поле;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = КонтрагентОтчета;
		НовыйЭлементОтбора.Использование = Истина;
		
		ПараметрПериод = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодФормированияОтчета"));
		Если ПараметрПериод <> Неопределено Тогда
			ПараметрПериод.Значение.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
			ПараметрПериод.Значение.ДатаНачала  = НачалоДня(НачалоПериода);
			ПараметрПериод.Значение.ДатаОкончания = КонецДня(КонецПериода);
			ПараметрПериод.Использование = Истина;
		КонецЕсли;	
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Использование = Истина;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьПараметрыДанных").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьПараметрыДанных").Использование = Истина;

		
		ТекНастройкиКомпоновщика = Отчет.КомпоновщикНастроек.Настройки;
		ТекНастройкиКомпоновщика.Структура.Очистить();

		//Проекты
		ГруппировкаПоПроект = ТекНастройкиКомпоновщика.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаПоПроект.Имя = "ТоварнаяКатегория";
		ГруппировкаПоПроект.Использование = Истина;

		ПолеГруппировкаПоПроект = ГруппировкаПоПроект.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
		ПолеГруппировкаПоПроект.Использование      = Истина;
		ПолеГруппировкаПоПроект.Поле               = Новый ПолеКомпоновкиДанных("Проекты");
		ПолеГруппировкаПоПроект.ТипГруппировки	= ТипГруппировкиКомпоновкиДанных.Иерархия;
		ПолеГруппировкаПоПроект.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;

		АвтоПоле = ГруппировкаПоПроект.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных")); 
		АвтоПоле.Использование = Истина;

        //Тов категория
		ГруппировкаПоТК = ГруппировкаПоПроект.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаПоТК.Имя = "ТоварнаяКатегория";
		ГруппировкаПоТК.Использование = Истина;

		ПолеГруппировкаПоТК = ГруппировкаПоТК.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
		ПолеГруппировкаПоТК.Использование      = Истина;
		ПолеГруппировкаПоТК.Поле               = Новый ПолеКомпоновкиДанных("ТоварнаяКатегория");
		ПолеГруппировкаПоТК.ТипГруппировки		= ТипГруппировкиКомпоновкиДанных.Иерархия;
		ПолеГруппировкаПоТК.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;

		АвтоПоле = ГруппировкаПоТК.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных")); 
		АвтоПоле.Использование = Истина;

		//Брендообъем
		ГруппировкаПоТГ = ГруппировкаПоТК.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаПоТГ.Имя = "Брендообъем";
		ГруппировкаПоТГ.Использование = Истина;

		ПолеГруппировкаПоТГ = ГруппировкаПоТГ.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
		ПолеГруппировкаПоТГ.Использование      = Истина;
		ПолеГруппировкаПоТГ.Поле               = Новый ПолеКомпоновкиДанных("Брендообъем");
		ПолеГруппировкаПоТГ.ТипГруппировки		= ТипГруппировкиКомпоновкиДанных.Иерархия;
		ПолеГруппировкаПоТГ.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;

		АвтоПоле = ГруппировкаПоТГ.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных")); 
		АвтоПоле.Использование = Истина;

		
		
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки, ДанныеРасшифровки);
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки);

		//Очищаем поле табличного документа
		Результат = ФормаОтчета.ЭлементыФормы.Результат;
		Результат.Очистить();
		
		ФормаОтчета.СкомпоноватьРезультат(Результат);

		Таб.Присоединить(ФормаОтчета.ЭлементыФормы.Результат, 2);
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция, 2);
	
	ИначеЕсли Имя = "Прогноз" Тогда
		
		Секция = Макет.ПолучитьОбласть("Шапка_Прогноз");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		
		Секция = Макет.ПолучитьОбласть("ОтступСтрока|ОтступКолонка");
		Таб.Вывести(Секция,2);
		
		Отчет = Отчеты.ПланыПродаж.Создать();
		Форма = Отчет.ПолучитьФорму();
		Форма.ОтчетОбъект.УстановитьНачальныеНастройки();
		Форма.ОтчетОбъект.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("RUR");
		Форма.ОтчетОбъект.УниверсальныйОтчет.ДатаКон = КонецДня(КонецПериода);
		Форма.ОтчетОбъект.УниверсальныйОтчет.ДатаНач = НачалоДня(НачалоПериода);
		Если Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор.Найти("Контрагент") = неопределено тогда
			ЭлементОтбора = Отчет.УниверсальныйОтчет.ПостроительОтчета.Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
			ЭлементОтбора.Значение = КонтрагентОтчета;
		иначе 
			Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"].Использование = Истина;
			Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"].ВидСравнения = ВидСравнения.Равно;
			Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"].Значение = КонтрагентОтчета;
		КонецЕсли;
		

		ЗапросСценарий = Новый Запрос;
		ЗапросСценарий.Текст = 
			"ВЫБРАТЬ
			|	ПКК_СценарийДляПолученияПлановСрезПоследних.Сценарий
			|ИЗ
			|	РегистрСведений.ПКК_СценарийДляПолученияПланов.СрезПоследних(&КонДата, ) КАК ПКК_СценарийДляПолученияПлановСрезПоследних";

		ЗапросСценарий.УстановитьПараметр("КонДата", КонецДня(КонецПериода));

		РезультатСценарий = ЗапросСценарий.Выполнить();

		ВыборкаДетальныеЗаписиСценарий = РезультатСценарий.Выбрать();

		Если ВыборкаДетальныеЗаписиСценарий.Следующий() тогда
			Если Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор.Найти("Сценарий") = неопределено тогда
				ЭлементОтбора = Отчет.УниверсальныйОтчет.ПостроительОтчета.Отбор.Добавить("Сценарий");
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
				ЭлементОтбора.Значение = ВыборкаДетальныеЗаписиСценарий.Сценарий;
			иначе 
				Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Сценарий"].Использование = Истина;
				Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Сценарий"].ВидСравнения = ВидСравнения.Равно;
				Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Сценарий"].Значение = ВыборкаДетальныеЗаписиСценарий.Сценарий;
			КонецЕсли;
		КонецЕсли;
		
		Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.ВыводитьЗаголовокОтчета = Ложь;
		Форма.ОбновитьОтчет();
		Таб.Вывести(Форма.ЭлементыФормы.ПолеТабличногоДокументаРезультат, 2);
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция, 2);
		
	ИначеЕсли Имя = "Договора" Тогда
		
		Секция = Макет.ПолучитьОбласть("Шапка_Договора");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		
		Секция = Макет.ПолучитьОбласть("ОтступСтрока|ОтступКолонка");
		Таб.Вывести(Секция,2);
		
		Отчет = Отчеты.ПКК_СписокДопДоговоровИСоглашений.Создать();
		
		ФормаОтчета = Отчет.ПолучитьФорму();
		
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Контрагент")).Поле;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = КонтрагентОтчета;
		НовыйЭлементОтбора.Использование = Истина;
		
		ПараметрКонецПериода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		Если ПараметрКонецПериода <> Неопределено Тогда
			ПараметрКонецПериода.Значение = КонецДня(КонецПериода);
			ПараметрКонецПериода.Использование = Истина;
		КонецЕсли;	
		
		ПараметрНачалоПериода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		Если ПараметрНачалоПериода <> Неопределено Тогда
			ПараметрНачалоПериода.Значение = НачалоДня(НачалоПериода);
			ПараметрНачалоПериода.Использование = Истина;
		КонецЕсли;	
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Использование = Истина;
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;

		ТабДоговора = Новый табличныйдокумент;
		ТиповыеОтчеты.ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(Отчет, ФормаОтчета);
		Отчет.СформироватьОтчет(ТабДоговора,,Ложь);
		Таб.Присоединить(ТабДоговора, 2);
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция, 2);
		
	ИначеЕсли Имя = "РасчетВалПрибыли" Тогда
		
		Секция = Макет.ПолучитьОбласть("Шапка_РасчетВалПрибыли");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		
		Секция = Макет.ПолучитьОбласть("ОтступСтрока|ОтступКолонка");
		Таб.Вывести(Секция,2);
		
		Отчет = Отчеты.ВаловаяПрибыль.Создать();
		Форма = Отчет.ПолучитьФорму();
		Форма.ОтчетОбъект.УстановитьНачальныеНастройки();
		Форма.ОтчетОбъект.УниверсальныйОтчет.ДатаНач = НачалоДня(НачалоПериода);
		Форма.ОтчетОбъект.УниверсальныйОтчет.ДатаКон = КонецДня(КонецПериода);
		Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Покупатель"].Использование = Истина;
		Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Покупатель"].ВидСравнения = ВидСравнения.Равно;
		Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Покупатель"].Значение = КонтрагентОтчета;
		Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.ВыводитьЗаголовокОтчета = Ложь;
		Форма.ОбновитьОтчет();
		Таб.Вывести(Форма.ЭлементыФормы.ПолеТабличногоДокументаРезультат, 2);
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция, 2);
	ИначеЕсли Имя = "БюджетВыручки" Тогда
		
		Секция = Макет.ПолучитьОбласть("Шапка_БюджетВыручки");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		
		Секция = Макет.ПолучитьОбласть("ОтступСтрока|ОтступКолонка");
		Таб.Вывести(Секция,2);
		
		Отчет = Отчеты.ППП_БюджетВыручки.Создать();
		
		ФормаОтчета = Отчет.ПолучитьФорму();
		
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Контрагент")).Поле;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = КонтрагентОтчета;
		НовыйЭлементОтбора.Использование = Истина;
		
		ПараметрКонецПериода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		Если ПараметрКонецПериода <> Неопределено Тогда
			ПараметрКонецПериода.Значение = КонецДня(КонецПериода);
			ПараметрКонецПериода.Использование = Истина;
		КонецЕсли;	
		
		ПараметрНачалоПериода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		Если ПараметрНачалоПериода <> Неопределено Тогда
			ПараметрНачалоПериода.Значение = НачалоДня(НачалоПериода);
			ПараметрНачалоПериода.Использование = Истина;
		КонецЕсли;	
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Использование = Истина;
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;

		ТабДоговора = Новый табличныйдокумент;
		ТиповыеОтчеты.ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(Отчет, ФормаОтчета);
		
		Отчет.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля[4].Оформление.Элементы[12].Значение = "ЧДЦ=2";
		Отчет.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля[4].Оформление.Элементы[12].Использование = истина;

		Отчет.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля[5].Оформление.Элементы[12].Значение = "ЧДЦ=2";
		Отчет.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля[5].Оформление.Элементы[12].Использование = истина;

		Отчет.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля[7].Оформление.Элементы[12].Значение = "ЧДЦ=2";
		Отчет.СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля[7].Оформление.Элементы[12].Использование = истина;

		Отчет.СформироватьОтчет(ТабДоговора,,Ложь);
		Таб.Присоединить(ТабДоговора, 2);
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция, 2);
	ИначеЕсли Имя = "АнализДвиженияДенежныхСредств" Тогда
		
		Секция = Макет.ПолучитьОбласть("Шапка_АнализДвиженияДенежныхСредств");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		
		Секция = Макет.ПолучитьОбласть("ОтступСтрока|ОтступКолонка");
		Таб.Вывести(Секция,2);
		
		Отчет = Отчеты.АнализДвиженияДенежныхСредств.Создать();
		Форма = Отчет.ПолучитьФорму();
		Форма.ОтчетОбъект.УстановитьНачальныеНастройки();
		
		Форма.ОтчетОбъект.УниверсальныйОтчет.ДатаНач = НачалоДня(НачалоПериода);
		Форма.ОтчетОбъект.УниверсальныйОтчет.ДатаКон = КонецДня(КонецПериода);
		Если Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор.Найти("Контрагент") = неопределено тогда
			ЭлементОтбора = Отчет.УниверсальныйОтчет.ПостроительОтчета.Отбор.Добавить("Контрагент");
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
			ЭлементОтбора.Значение = КонтрагентОтчета;
		иначе 
			Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"].Использование = Истина;
			Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"].ВидСравнения = ВидСравнения.Равно;
			Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"].Значение = КонтрагентОтчета;
		КонецЕсли;
		Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.ВыводитьЗаголовокОтчета = Ложь;
		
		ПострОтчета = Форма.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета;
		
		ПострОтчета.ИзмеренияСтроки.Очистить();
		ПострОтчета.ИзмеренияСтроки.Добавить(ПострОтчета.ДоступныеПоля.Контрагент.ПутьКДанным,,ТипИзмеренияПостроителяОтчета.Элементы);
		
		ПострОтчета.ИзмеренияКолонки.Очистить();
		ПострОтчета.ИзмеренияКолонки.Добавить(ПострОтчета.ДоступныеПоля.ПериодНеделя.ПутьКДанным,,ТипИзмеренияПостроителяОтчета.Элементы);
		
		Форма.ОтчетОбъект.УниверсальныйОтчет.Показатели.Строки[0].Строки[1].Использование = Истина;
		Форма.ОтчетОбъект.УниверсальныйОтчет.Показатели.Строки[0].Строки[2].Использование = Ложь;
		Форма.ОтчетОбъект.УниверсальныйОтчет.Показатели.Строки[1].Использование = Ложь;
		
		Форма.ОбновитьОтчет();
		Таб.Вывести(Форма.ЭлементыФормы.ПолеТабличногоДокументаРезультат, 2);
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция, 2);
	ИначеЕсли Имя = "ОтчетПоКлиентамИДоговорам" Тогда
		
		Секция = Макет.ПолучитьОбласть("Шапка_ОтчетПоКлиентамИДоговорам");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		
		Секция = Макет.ПолучитьОбласть("ОтступСтрока|ОтступКолонка");
		Таб.Вывести(Секция,2);
		
		Отчет = Отчеты.НСИ_ОтчетПоКЛиентам.Создать();
		
		ФормаОтчета = Отчет.ПолучитьФорму();
		
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Контрагент")).Поле;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = КонтрагентОтчета;
		НовыйЭлементОтбора.Использование = Истина;
		
		НовыйЭлементОтбора =  Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("ДатаДоговора")).Поле;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		НовыйЭлементОтбора.ПравоеЗначение = КонецДня(КонецПериода);
		НовыйЭлементОтбора.Использование = Истина;
		
		НовыйЭлементОтбораГруппа1 = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НовыйЭлементОтбораГруппа1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		НовыйЭлементОтбораГруппа1.Использование = Истина;
		
		
			НовыйЭлементОтбораГруппа2 = НовыйЭлементОтбораГруппа1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НовыйЭлементОтбораГруппа2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
			НовыйЭлементОтбораГруппа2.Использование = Истина;
				НовыйЭлементОтбора = НовыйЭлементОтбораГруппа2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Датарасторжения")).Поле;
				НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НовыйЭлементОтбора.ПравоеЗначение = Дата(01,01,01);
				НовыйЭлементОтбора.Использование = Истина;
				
				НовыйЭлементОтбора = НовыйЭлементОтбораГруппа2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Датарасторжения")).Поле;
				НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				НовыйЭлементОтбора.ПравоеЗначение = НачалоДня(НачалоПериода);
				НовыйЭлементОтбора.Использование = Истина;
				
			НовыйЭлементОтбораГруппа3 = НовыйЭлементОтбораГруппа1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НовыйЭлементОтбораГруппа3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
			НовыйЭлементОтбораГруппа3.Использование = Истина;
			
				НовыйЭлементОтбора = НовыйЭлементОтбораГруппа3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("СрокДействияДоговора")).Поле;
				НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				НовыйЭлементОтбора.ПравоеЗначение = Дата(01,01,01);
				НовыйЭлементОтбора.Использование = Истина;
				
				НовыйЭлементОтбора = НовыйЭлементОтбораГруппа3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("СрокДействияДоговора")).Поле;
				НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				НовыйЭлементОтбора.ПравоеЗначение = НачалоДня(НачалоПериода);
				НовыйЭлементОтбора.Использование = Истина;
		
		ПараметрКонецПериода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		Если ПараметрКонецПериода <> Неопределено Тогда
			ПараметрКонецПериода.Значение = КонецДня(КонецПериода);
			ПараметрКонецПериода.Использование = Истина;
		КонецЕсли;	
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Использование = Истина;
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;

		ТекНастройкиКомпоновщика = Отчет.КомпоновщикНастроек.Настройки;
		ТекНастройкиКомпоновщика.Структура.Очистить();

		ГруппировкаДетальныеЗаписи = ТекНастройкиКомпоновщика.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ГруппировкаДетальныеЗаписи.Использование = Истина;
		
		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента");
		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("ВидДоговора");
		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("ФормаДоговора");
		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("ВалютаВзаиморасчетов");
		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("ПредметДоговора");
		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("НомерДоговора");
		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("ДатаДоговора");
		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("СрокДействияДоговора");
		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("ДатаРасторжения");
		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("СуммаПоДоговору");
		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("ДопустимоеЧислоДнейЗадолженности");
		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("ПересчитыватьЦеныПриОтгрузке");

		ПолеКомпоновки = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	    ПолеКомпоновки.Использование =Истина;
	    ПолеКомпоновки.Заголовок ="Вид взаиморасчетов" ;
	    ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента.ВидВзаиморасчетов") ;
		
		ТабДоговора = Новый табличныйдокумент;
		ТиповыеОтчеты.ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(Отчет, ФормаОтчета);
		Отчет.СформироватьОтчет(ТабДоговора,,Ложь);
		Таб.Присоединить(ТабДоговора, 2);
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция, 2);
	ИначеЕсли Имя = "КредитнаяИстория" Тогда
		
		Секция = Макет.ПолучитьОбласть("Шапка_КредитнаяИстория");
		Секция.Параметры.ПорядковыйНомер = ПорядковыйНомер;
		Таб.Вывести(Секция,1);
		
		Секция = Макет.ПолучитьОбласть("ОтступСтрока|ОтступКолонка");
		Таб.Вывести(Секция,2);
		
		Отчет = Отчеты.ПКК_КредитнаяИстория.Создать();
		
		ФормаОтчета = Отчет.ПолучитьФорму();
		
		НовыйЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Контрагент")).Поле;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = КонтрагентОтчета;
		НовыйЭлементОтбора.Использование = Истина;
		
		ПараметрКонецПериода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		Если ПараметрКонецПериода <> Неопределено Тогда
			ПараметрКонецПериода.Значение = КонецДня(КонецПериода);
			ПараметрКонецПериода.Использование = Истина;
		КонецЕсли;	
		
		ПараметрНачалоПериода = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		Если ПараметрНачалоПериода <> Неопределено Тогда
			ПараметрНачалоПериода.Значение = НачалоДня(НачалоПериода);
			ПараметрНачалоПериода.Использование = Истина;
		КонецЕсли;	
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьЗаголовок").Использование = Истина;
		
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		Отчет.КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор").Использование = Истина;

		ТабДоговора = Новый табличныйдокумент;
		ТиповыеОтчеты.ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(Отчет, ФормаОтчета);
		Отчет.СформироватьОтчет(ТабДоговора,,Ложь);
		Таб.Присоединить(ТабДоговора, 2);
		
		Секция = Макет.ПолучитьОбласть("ПустаяСтрока");
		Таб.Вывести(Секция, 2);
	КонецЕсли; 
	
	Таб.Область("C2").ШиринаКолонки  = 40;
	Таб.Область("C3").ШиринаКолонки  = 14;
	Таб.Область("C4").ШиринаКолонки  = 14;
	Таб.Область("C5").ШиринаКолонки  = 14;
	Таб.Область("C6").ШиринаКолонки  = 14;
	Таб.Область("C7").ШиринаКолонки  = 14;
	//+bolshevykh@a-prof.ru 10.03.2015 12:55
	Для сч = 8 по Таб.ШиринаТаблицы цикл	
		Таб.Область("C"+СокрЛП(сч)).ШиринаКолонки  = 14;
	КонецЦикла;
	//-bolshevykh@a-prof.ru

	
КонецПроцедуры // ВывестиОбщиеДанные()

// Процедура формирует отчет
//
// Переметры
//  Таб - поле табличного документа
//
// Возвращаемое значение
//  НЕТ
Процедура СформироватьОтчет(Таб) Экспорт

	Если НЕ ЗначениеЗаполнено(КонтрагентОтчета) Тогда
		Предупреждение("Выберите контрагента!");
		Возврат;
	КонецЕсли;
	
	Если КонтрагентОтчета.ЭтоГруппа Тогда
		Предупреждение("Отчет нельзя формировать по группе элементов!");
		Возврат;
	КонецЕсли; 
	
	Таб.Очистить();

	Макет = ПолучитьМакет("Макет");
	Таб.НачатьАвтогруппировкуСтрок();
	//Шапка
	Секция = Макет.ПолучитьОбласть("Шапка");
	Секция.Параметры.ПечВыбКонтрагент = КонтрагентОтчета.Наименование;
	Секция.Параметры.КодКонтрагента = СокрЛП(КонтрагентОтчета.Код);
	Секция.Параметры.Период = Формат(НачалоПериода,"ДФ=dd.MM.yyyy")+" - "+Формат(КонецПериода,"ДФ=dd.MM.yyyy");
	Таб.Вывести(Секция,1);

	ПрядковыйНомер = 0;
	Для а=0 По СписокНастроек.Количество()-1 Цикл
		Если НЕ СписокНастроек[а].Пометка Тогда
			Продолжить;
		КонецЕсли; 
		ПрядковыйНомер = ПрядковыйНомер + 1;
		ВывестиДанные(Таб, ПрядковыйНомер, СписокНастроек[а].Значение);
	КонецЦикла; 
	
	Таб.ЗакончитьАвтогруппировкуСтрок();
	
	Таб.ПоказатьУровеньГруппировокСтрок(10);

	Таб.ТолькоПросмотр = Истина;
	Таб.Показать();

КонецПроцедуры

Функция ВернутьНачалоПериодаДляОтчетаГарантийныхПисем(Контрагент,НачалоПериода,КонецПериода)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПКК_ГарантийныеПисьмаОбороты.Контрагент,
		|	МИНИМУМ(ПКК_ГарантийныеПисьмаОбороты.ГарантийноеПисьмо.ДатаВходящегоДокумента) КАК ГарантийноеПисьмоДатаВходящегоДокумента
		|ИЗ
		|	РегистрНакопления.ПКК_ГарантийныеПисьма.Обороты(&НачалоПериода, &КонецПериода, Регистратор, Контрагент = &Контрагент) КАК ПКК_ГарантийныеПисьмаОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ПКК_ГарантийныеПисьмаОбороты.Контрагент";

	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	
		Возврат ВыборкаДетальныеЗаписи.ГарантийноеПисьмоДатаВходящегоДокумента;		
	
	КонецЕсли;  
	
	Возврат НачалоПериода;
	
КонецФункции

СписокНастроек.Добавить("ОбщиеДанные","Общие данные контрагента" ,Истина);
СписокНастроек.Добавить("КонтИнф","Контактная информация контрагента"  ,Истина);
СписокНастроек.Добавить("РежимРаботы","Режим работы контрагента"  ,Истина);
СписокНастроек.Добавить("ПараметрыПоставщикаПокупателя","Параметры поставщика и покупателя",Истина);
СписокНастроек.Добавить("КонтЛица","Контактные лица контрагента"  ,Истина);
СписокНастроек.Добавить("КоммИнф","Коммерческая информация"  ,Истина);
//СписокНастроек.Добавить("КредИнф","Кредитная информация"  ,Истина);
СписокНастроек.Добавить("ПрайсЛисты","Прайс-листы"  ,Ложь);
СписокНастроек.Добавить("АнализДвиженияДенежныхСредств","Анализ движения денежных средств",Истина);
СписокНастроек.Добавить("ГарПисьма","Гарантийные Письма"  ,Истина);
СписокНастроек.Добавить("Продажи","Продажи"  ,Истина);
СписокНастроек.Добавить("Прогноз","Прогноз продаж"  ,Истина);
СписокНастроек.Добавить("ОтчетПоКлиентамИДоговорам","Активные договора и соглашения"  ,Истина);
СписокНастроек.Добавить("Договора","Реестр договоров и соглашений"  ,Ложь);
СписокНастроек.Добавить("РасчетВалПрибыли","Расчет валовой прибыли"  , Ложь);
СписокНастроек.Добавить("СвойстваИЗначения","Прочие свойства и значения контрагента" ,Истина);
СписокНастроек.Добавить("БюджетВыручки","Бюджет выручки"  ,Ложь);
СписокНастроек.Добавить("КредитнаяИстория","Кредитная история"  ,Истина);

#КонецЕсли
