
////////////////////////////////////////////////////////////////////////////////                                                                                                        
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ  

Процедура ЗаполнитьТаблицуФилиалов(Подразделения, Филиал, ТаблицаФилиалов);
	
	Выборка = Подразделения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока Выборка.Следующий() Цикл
		Стр = Филиалы.Добавить();
		Стр.Подразделение =                      Выборка.Подразделение;
		Стр.Филиал        = ?(Выборка.ЭтоФилиал, Выборка.Подразделение, Филиал);
		ЗаполнитьТаблицуФилиалов(Выборка, Стр.Филиал, ТаблицаФилиалов);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет табличную часть "Филиалц" информацией о филиалах и их подразделениях
//
Процедура ВыполнитьПервоначальныеЗаполнения()
	
	ТипКолонки = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
	
	ТаблицаФилиалов = Новый ТаблицаЗначений;
	ТаблицаФилиалов.Колонки.Добавить("Подразделение", ТипКолонки);
	ТаблицаФилиалов.Колонки.Добавить("Филиал",        ТипКолонки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК БУЛЕВО), ЛОЖЬ) КАК ЭтоФилиал
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО ПодразделенияОрганизаций.Ссылка = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство = &AVT_Филиал)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("AVT_Филиал", ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("Филиал"));
	Результат = Запрос.Выполнить();
	ЗаполнитьТаблицуФилиалов(Результат, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), ТаблицаФилиалов);

КонецПроцедуры // ВыполнитьПервоначальныеЗаполнения()

//Возвращает значение пользовательской настройки
//Параметры:
//ИмяПараметра - имя параметра данных
//
Функция НастройкаПараметра(ИмяПараметра)

	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
		Если ПараметрПользовательскойНастройки <> Неопределено Тогда
			Возврат ПараметрПользовательскойНастройки;
		Иначе
			Возврат ПараметрДанных;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;

КонецФункции

Процедура УстановитьОтбор(ИмяОтбора, ЗначениеОтбора, ВидСравнения)
	
	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		
		Отбор = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОтбора);
		Отбор.ВидСравнения   = ВидСравнения;
		Отбор.ПравоеЗначение = ЗначениеОтбора;
		Отбор.Использование  = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаПоРезервам";
	
	МассивЗаголовковРесурсов = Новый Массив;
	
	Настройки = СхемаКомпоновкиДанных.ВариантыНастроек[0].Настройки;
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	НастройкиОтчета = КомпоновщикНастроек.Настройки;
	
	// Параметры
	Параметр = НастройкаПараметра("парМесяц");
	Параметр.Использование = Истина;
	Параметр.Значение = НачалоМесяца(НачалоПериода);
	//
	//Параметр = НастройкаПараметра("КонецПериода");
	//Параметр.Использование = Истина;
	//Параметр.Значение = КонецМесяца(КонецПериода);
	//
	Параметр = НастройкаПараметра("парОрганизация");
	Параметр.Использование = Истина;
	Параметр.Значение = Организация;
	
	// Отбор
	//КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	//УстановитьОтбор("ПодразделениеОрганизации", Подразделение, ВидСравненияКомпоновкиДанных.ВИерархии);
	
	//Для Каждого ЭлементВыбора Из НастройкиОтчета.Выбор.Элементы Цикл

	//	Если Не ТипЗнч(ЭлементВыбора) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
	//		Продолжить;
	//	КонецЕсли;

	//	Если СхемаКомпоновкиданных.ПоляИтога.Найти(ЭлементВыбора.Поле) <> Неопределено Тогда
	//		Если Не ПустаяСтрока(ЭлементВыбора.Заголовок) Тогда
	//			МассивЗаголовковРесурсов.Добавить(ЭлементВыбора.Заголовок);
	//		Иначе
	//			ПолеНабораДанных = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Поля.найти(ЭлементВыбора.Поле);
	//			Если ПолеНабораДанных <> Неопределено Тогда
	//				МассивЗаголовковРесурсов.Добавить(ПолеНабораДанных.Заголовок);
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;

	//КонецЦикла;

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

	//Для Каждого ТекМакет Из МакетКомпоновки.Макеты Цикл

	//	Если ТипЗнч(ТекМакет.Макет) <> Тип("МакетОбластиКомпоновкиДанных") Тогда
	//		Продолжить;
	//	КонецЕсли;

	//	Для Каждого СтрокаТаблицыКомпоновки Из ТекМакет.Макет Цикл
	//		Для Каждого ЯчейкаТаблицыОбластиКомпоновки Из СтрокаТаблицыКомпоновки.Ячейки Цикл
	//			Для Каждого Элемент Из ЯчейкаТаблицыОбластиКомпоновки.Элементы Цикл
	//				Если МассивЗаголовковРесурсов.Найти(Элемент.Значение) <> Неопределено Тогда

	//					Параметр = ЯчейкаТаблицыОбластиКомпоновки.Оформление.Элементы.Найти(Новый ПараметрКомпоновкиДанных("ГоризонтальноеПоложение"));
	//					Параметр.Значение = ГоризонтальноеПоложение.Центр;
	//					Параметр.Использование = Истина;

	//				КонецЕсли;
	//			КонецЦикла;
	//		КонецЦикла;
	//	КонецЦикла;

	//КонецЦикла;

	ВнешниеДанные = Новый Структура("ФилиалыКомпании", Филиалы.Выгрузить());
			
	//Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,ВнешниеДанные , ДанныеРасшифровки, Истина);

	//Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	//Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	ТаблицаЗафиксирована = Ложь;

	ДокументРезультат.ФиксацияСверху = 0;
	//Основной цикл вывода отчета
	Пока Истина Цикл
		//Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();

		Если ЭлементРезультата = Неопределено Тогда
			//Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
		Иначе
			// Зафиксируем шапку
			Если  Не ТаблицаЗафиксирована 
				  И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 
				  И ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) <> Тип("ДиаграммаКомпоновкиДанных") Тогда

				ТаблицаЗафиксирована = Истина;
				ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы;

			КонецЕсли;
			//Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		КонецЕсли;
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();
		
КонецПроцедуры

// Инициализация обработки
ВыполнитьПервоначальныеЗаполнения();