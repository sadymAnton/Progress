////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ЭлементыНастройки    Экспорт; // Массив элементов структуры СКД         
Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета
Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю
Перем СоответствиеНаборовДанныхИЗапросов;

#Если ТолстыйКлиентОбычноеПриложение Тогда

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 
// 

// Сохранение настроек схемы компоновки
//
Процедура СохранитьНастройку() Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

// Инициализация отчета
//
// Параметры:
//  Нет.
//
Процедура ИнициализацияОтчета() Экспорт
	
	ТиповыеОтчеты.ИнициализацияТиповогоОтчета(ЭтотОбъект);
	
КонецПроцедуры //ИнициализацияОтчета()


// Заполнение параметров отчета по элементу справочника из переменной СохраненнаяНастройка.
//
Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

// Формирование отчета в табличный документ
// 
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = истина) Экспорт
	
	Если ДанныеРасшифровки = Неопределено тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КонецЕсли;
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	УправлениеОтчетамиЗК.УстановитьЗапросыСКДПоСоответсвию(СхемаКомпоновкиДанных.НаборыДанных, СоответствиеНаборовДанныхИЗапросов);
	Возврат Результат;
	
КонецФункции

// Настройка отчета 
//
Процедура Настроить(Отбор, КомпоновщикНастроекОсновногоОтчета = Неопределено) Экспорт
	
	ТиповыеОтчеты.НастроитьТиповойОтчет(ЭтотОбъект, Отбор, КомпоновщикНастроекОсновногоОтчета);
	
КонецПроцедуры

// Запоминание элементов структуры отчета компоновщика настроек
//
Процедура ЗапомнитьНастройку() Экспорт 
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() <> 0 тогда
		Если ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) <> Тип("ТаблицаКомпоновкиДанных") тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыНастройки[0] = КомпоновщикНастроек.Настройки.Структура[0].Колонки[0];
	ЭлементыНастройки[1] = КомпоновщикНастроек.Настройки.Структура[0].Колонки[1];
	ЭлементыНастройки[2] = КомпоновщикНастроек.Настройки.Структура[0].Колонки[2];
	ЭлементыНастройки[3] = КомпоновщикНастроек.Настройки.Структура[0].Колонки[1].Структура[0];
	
	КомпоновщикНастроек.Настройки.Структура[0].Колонки.Удалить(ЭлементыНастройки[0]);
	КомпоновщикНастроек.Настройки.Структура[0].Колонки.Удалить(ЭлементыНастройки[1]);
	КомпоновщикНастроек.Настройки.Структура[0].Колонки.Удалить(ЭлементыНастройки[2]);
	
КонецПроцедуры

// Добавление настройки структуры в колонки таблицы
//
Процедура ВосстановитьНастройку() Экспорт  
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() <> 0 тогда
		Если ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) <> Тип("ТаблицаКомпоновкиДанных") тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементГруппировки = КомпоновщикНастроек.Настройки.Структура[0].Колонки.Добавить();
	ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(ЭлементГруппировки, ЭлементыНастройки[0]);
	
	ЭлементГруппировки = КомпоновщикНастроек.Настройки.Структура[0].Колонки.Добавить();
	ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(ЭлементГруппировки, ЭлементыНастройки[1]);
	
	//ЭлементГруппировки = ЭлементГруппировки.Структура.Добавить();
	//ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(ЭлементГруппировки, ЭлементыНастройки[3]);
	
	ЭлементГруппировки = КомпоновщикНастроек.Настройки.Структура[0].Колонки.Добавить();
	ТиповыеОтчеты.СкопироватьНастройкиКомпоновкиДанных(ЭлементГруппировки, ЭлементыНастройки[2]);
	
КонецПроцедуры

// Доработка компоновщика отчета перед выводом
//
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЕстьГруппировкаПоПериодуРегистрации"));
	ЗначениеПараметра.Значение = ПрисутствуетПолеПериодРегистрацииВГруппировке();
	ЗначениеПараметра.Использование = Истина;
	
	// Если в выбранные поля добавлены поле нумерации в группе или сквозной нумерации в группе перенесем данные 
	// поля в самую нижнюю группировку строк отчета.
	ГруппировкаДляВремени = Неопределено;
	УдаляемыеПоля = Новый Массив;
	
	Для каждого ВыбранноеПоле из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если ТипЗнч(ВыбранноеПоле) <> Тип("ГруппаВыбранныхПолейКомпоновкиДанных") тогда
			Если ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля.НомерПоПорядкуВГруппировке") или ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("SystemFields.GroupSerialNumber") тогда
				ПоследнийЭлементСтруктуры = НайтиПоследнийЭлементСтруктурыСтрок(КомпоновщикНастроек.Настройки.Структура[0].Строки);
				Если ПоследнийЭлементСтруктуры <> Неопределено тогда
					ЭлементВыбранногоПоля = ПоследнийЭлементСтруктуры.Выбор.Элементы.Вставить(0,Тип("ВыбранноеПолеКомпоновкиДанных"));
					ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля.НомерПоПорядкуВГруппировке");
				КонецЕсли;
				
			ИначеЕсли ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля.НомерПоПорядку") или ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("SystemFields.SerialNumber") тогда
				ПоследнийЭлементСтруктуры = НайтиПоследнийЭлементСтруктурыСтрок(КомпоновщикНастроек.Настройки.Структура[0].Строки);
				Если ПоследнийЭлементСтруктуры <> Неопределено тогда
					ЭлементВыбранногоПоля = ПоследнийЭлементСтруктуры.Выбор.Элементы.Вставить(0,Тип("ВыбранноеПолеКомпоновкиДанных"));
					ЭлементВыбранногоПоля.Поле = Новый ПолеКомпоновкиДанных("СистемныеПоля.НомерПоПорядку");
				КонецЕсли;
			ИначеЕсли ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтработаноДней") 
				или ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтработаноЧасов")
				или ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ОплаченоДней")
				или ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ОплаченоЧасов")
				тогда
				Если КомпоновщикНастроек.Настройки.Структура.Количество() > 0 и ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") тогда
					Если КомпоновщикНастроек.Настройки.Структура[0].Колонки.Количество() > 0 и ГруппировкаДляВремени = Неопределено тогда
						ГруппировкаДляВремени = КомпоновщикНастроек.Настройки.Структура[0].Колонки.Вставить(0);
						ГруппировкаДляВремени.Использование = Истина;
						
						ПолеГруппировки = ГруппировкаДляВремени.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Группа");
						ПолеГруппировки.Использование = Истина;
						
						ПолеВыбора = ГруппировкаДляВремени.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Группа");
						ПолеВыбора.Использование = Истина;
						
						ТиповыеОтчеты.ДобавитьОтбор(ГруппировкаДляВремени.Отбор, "Группа", "Всего начислено");
						
						УсловноеОформление = ГруппировкаДляВремени.УсловноеОформление.Элементы.Добавить();
						УсловноеОформление.Использование = Истина;
						
						ПолеОформления = УсловноеОформление.Поля.Элементы.Добавить();
						ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Группа");
						ПолеОформления.Использование = Истина;
						
						ПараметрОформелния = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Text"));
						ПараметрОформелния.Использование = Истина;
						ПараметрОформелния.Значение = "Отработанное время";
						
						ПараметрОформелния = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("BackColor"));
						ПараметрОформелния.Использование = Истина;
						ПараметрОформелния.Значение = ЦветаСтиля.ЦветФонаФормы;
						
						ПараметрОформелния = УсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Font"));
						ПараметрОформелния.Использование = Истина;
						ПараметрОформелния.Значение =  Новый Шрифт(ПараметрОформелния.Значение, "Verdana", ,истина);
						
					КонецЕсли;
					Если ГруппировкаДляВремени <> Неопределено тогда
						ПолеВыбора = ГруппировкаДляВремени.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						ПолеВыбора.Поле = ВыбранноеПоле.Поле;
						УдаляемыеПоля.Добавить(ВыбранноеПоле);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ГруппировкаДляВремени <> Неопределено тогда
		Для каждого ПолеВыбора из УдаляемыеПоля Цикл
			КомпоновщикНастроек.Настройки.Выбор.Элементы.Удалить(ПолеВыбора);
		КонецЦикла;
	КонецЕсли;
	
	// Отключим строку итогов, если расшифровывается конечное или начальное сальдо
	//
	МассивОтборов = ТиповыеОтчеты.ПолучитьЭлементыОтбора(КомпоновщикНастроек);
	
	Для каждого ЭлементОтбора из МассивОтборов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.Использование 
		   и ЭлементОтбора.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно 
		   и (ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ИмяВидаРасчета") или ЭлементОтбора.ПравоеЗначение = "Конечное сальдо" или ЭлементОтбора.ПравоеЗначение = "Начальное сальдо")
		   и (ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИмяВидаРасчета") или ЭлементОтбора.ЛевоеЗначение = "Конечное сальдо" или ЭлементОтбора.ЛевоеЗначение = "Начальное сальдо")
		    тогда
			ТиповыеОтчеты.УстановитьПараметрВывода(КомпоновщикНастроек, "VerticalOverallPlacement", РасположениеИтоговКомпоновкиДанных.Нет);
		КонецЕсли;
	КонецЦикла;
	
	//Отключим строки итогов выше 
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	Если ПараметрНачалоПериода = Неопределено или ПараметрКонецПериода = Неопределено тогда
		Возврат;
	Иначе
		НачалоПериода = ?(ПараметрНачалоПериода.Значение <> Неопределено, Дата(ПараметрНачалоПериода.Значение), '00010101');
		КонецПериода  = ?(ПараметрКонецПериода.Значение <> Неопределено, Дата(ПараметрКонецПериода.Значение), '00010101');
		Если НачалоПериода = '00010101'  тогда
			НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		Если КонецПериода = '00010101' тогда
			КонецПериода = КонецМесяца(ТекущаяДата());
		КонецЕсли;
		ПараметрКонецПериода.Использование = Истина;
		ПараметрНачалоПериода.Использование = Истина;
		
		ПараметрКонецПериода.Значение  = КонецПериода;
		ПараметрНачалоПериода.Значение = НачалоПериода;
	КонецЕсли;
	
	Если НачалоПериода <> Неопределено и КонецПериода <> Неопределено тогда
		УправлениеОтчетамиЗК.ЗаменитьВСКДТекстЗапросКалендаря(СхемаКомпоновкиДанных, НачалоПериода, КонецПериода, СоответствиеНаборовДанныхИЗапросов);
	КонецЕсли;
КонецПроцедуры

Функция НайтиПоследнийЭлементСтруктурыСтрок(Строки) 
	
	Если Строки.Количество() = 0 тогда
		Возврат Неопределено;
	Иначе
		ЭлементСтруктуры = Строки[0];
	КонецЕсли;
	Пока ЭлементСтруктуры.Структура.Количество() <> 0 Цикл
		ЭлементСтруктуры = ЭлементСтруктуры.Структура[0];
	КонецЦикла;
	
	Возврат ЭлементСтруктуры;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Возвращает значение истина, если в элементах структур отчета присутствует поле Период регистрации
//
Функция ПрисутствуетПолеПериодРегистрацииВГруппировке()
	
	ЕстьГруппировка = ложь;
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() <> 0 тогда
		
		Если Тип(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") тогда
			
			Если КомпоновщикНастроек.Настройки.Структура[0].Строки.Количество() > 0 тогда
				ЕстьГруппировка = НайтиПериодРегистрации(КомпоновщикНастроек.Настройки.Структура[0].Строки[0]);
			КонецЕсли;
			
		ИначеЕсли Тип(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ГруппировкаКомпоновкиДанных") тогда
			
			ЕстьГруппировка = НайтиПериодРегистрации(КомпоновщикНастроек.Настройки.Структура[0]);
			
		ИначеЕсли Тип(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных") тогда
			
			Если КомпоновщикНастроек.Настройки.Структура[0].Точки.Количество() <> 0 тогда
				
				ЕстьГруппировка = НайтиПериодРегистрации(КомпоновщикНастроек.Настройки.Структура[0].Точки[0]) ИЛИ НайтиПериодРегистрации(КомпоновщикНастроек.Настройки.Структура[0].Серии[0]);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьГруппировка;
	
КонецФункции //ПрисутствуетПолеПериодРегистрацииВГруппировке()

// Функция возвращает значение истина, если в группировках элементов структуры присутствует поле "Период регистрации"
//
Функция НайтиПериодРегистрации(Структура)
	
	ЕстьПоле = ложь;
	
	Если ТипЗнч(Структура) <> Тип("ГруппировкаКомпоновкиДанных")
       и ТипЗнч(Структура) <> Тип("ГруппировкаТаблицыКомпоновкиДанных")
	   и ТипЗнч(Структура) <> Тип("ГруппировкаДиаграммыКомпоновкиДанных") тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеПериодРегистрации = Новый ПолеКомпоновкиДанных("ПериодРегистрации");
	
	Для каждого ПолеГруппировки из Структура.ПоляГруппировки.Элементы Цикл
		
		Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеПериодРегистрации тогда
			
			ЕстьПоле = истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПоле И Структура.Структура.Количество() <> 0 тогда
		
		ЕстьПоле = НайтиПериодРегистрации(Структура.Структура[0]);
		
	КонецЕсли;
	
	Возврат ЕстьПоле;
	
КонецФункции //НайтиПериодРегистрации()

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	СписокПолейПодстановкиОтборовПоУмолчанию.Вставить("Организация", "ОсновнаяОрганизация");
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию,
	|СписокДоступныхПредопределенныхНастроек,
	|МинимальныйПериодОтчета", 
	ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию,, "Месяц");

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
ЭлементыНастройки = Новый Массив(4);

#КонецЕсли

