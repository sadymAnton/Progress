Перем СохраненнаяНастройка   Экспорт; // Текущий вариант отчета
Перем ТаблицаВариантовОтчета Экспорт; // Таблица вариантов доступных текущему пользователю


Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	Если ПроизвольныйОтчет.Пустая() Тогда 
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран произвольный отчет");
		Возврат Ложь;
	КонецЕсли;
	
	ТипРезультата = ТипЗнч(Результат);
	Если ТипРезультата = Тип("ТаблицаЗначений") ИЛИ ТипРезультата = Тип("ДеревоЗначений") Тогда
		ВыводВТабличныйДокумент = Ложь;
	Иначе
		ВыводВТабличныйДокумент = Истина;
	КонецЕсли; 
	
	// Получим копию настройки компоновщика, т.к. настройки меняются при формировании отчета
	НастройкаПоУмолчанию = КомпоновщикНастроек.ПолучитьНастройки();
	
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	// Получим копию схемы, т.к. она модифицируется при формировании отчета
	СхемаОтчетаХранилище = Новый ХранилищеЗначения(СхемаКомпоновкиДанных);
	СхемаОтчета 		 = СхемаОтчетаХранилище.Получить();
	
	ТиповыеОтчеты.ДоработатьТиповойОтчетПередВыводом(ЭтотОбъект, КомпоновщикНастроек);
	ПроцедурыПроизвольныхОтчетов.ДоработатьАналитическийОтчетПередВыводом(ЭтотОбъект, КомпоновщикНастроек, СхемаОтчета);
	КомпоновщикНастроек.Восстановить();
	
	Настройки 		 = КомпоновщикНастроек.ПолучитьНастройки();
	ОтчетСформирован = Ложь;
	
	Попытка
		
		// Получим данные источников данных (для наборов данных - объект)
		ВнешниеНаборыДанных = ПроцедурыПроизвольныхОтчетов.ПолучитьДанныеИсточников(
			ПроизвольныйОтчет.ИсточникиДанных,
			ПроизвольныйОтчет.ПараметрыИсточниковДанных,
			Настройки,
			СхемаОтчета);
		Если ВнешниеНаборыДанных = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаПоУмолчанию); // восстановим настройки компоновщика
			Возврат Ложь;
		КонецЕсли; 
		
		МакетКомпоновки = ПроцедурыПроизвольныхОтчетов.ПолучитьМакетКомпоновки(
			ЭтотОбъект,
			СхемаОтчета,
			КомпоновщикНастроек,
			ДанныеРасшифровки,
			ВнешниеНаборыДанных,
			ВыводВТабличныйДокумент);
		ТиповыеОтчеты.ДополнитьМакетыМакетаКомпоновкиРасшифровкойРесурсов(МакетКомпоновки, КомпоновщикНастроек);
		
		//Создадим и инициализируем процессор компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		Если ВнешниеНаборыДанных.Количество() = 0 Тогда
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки, Истина);
		Иначе
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
		КонецЕсли;
		
		Если ТипЗнч(Результат) = Тип("Строка") Тогда
			ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат);
		Иначе
		
			//Создадим и инициализируем процессор вывода результата
			Если ВыводВТабличныйДокумент Тогда
				
				//Очистим табличный документ - результат
				Результат.Очистить();
				
				ТиповыеОтчеты.ВыводЗаголовкаТиповогоОтчета(ЭтотОбъект, Результат, ВыводВФормуОтчета);
				
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
				ПроцессорВывода.УстановитьДокумент(Результат);
				
			Иначе
				
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
				ПроцессорВывода.УстановитьОбъект(Результат);
				
			КонецЕсли; 
			
			//Обозначим начало вывода
			ПроцессорВывода.НачатьВывод();
			
			//Основной цикл вывода отчета
			Пока Истина Цикл
				
				#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				#КонецЕсли
				
				//Получим следующий элемент результата компоновки
				ЭлементРезультата = ПроцессорКомпоновки.Следующий();
				
				Если ЭлементРезультата = Неопределено Тогда
					//Следующий элемент не получен - заканчиваем цикл вывода
					Прервать;
				Иначе
					//Элемент получен - выведем его при помощи процессора вывода
					ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
				КонецЕсли;
				
			КонецЦикла;
					
			//Обозначем завершение вывода
			ПроцессорВывода.ЗакончитьВывод();
			ОтчетСформирован = Истина;
			
		КонецЕсли;
	
	Исключение
		
		ПричинаОшибки = ТиповыеОтчеты.ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке());
		#Если Клиент Тогда
		Предупреждение("Отчет не сформирован" + Символы.ПС + ПричинаОшибки);
		#Иначе
		ОбщегоНазначения.Сообщение("Отчет не сформирован: " + ПроизвольныйОтчет + Символы.ПС + ПричинаОшибки);
		#КонецЕсли
		
	КонецПопытки;
	
	#Если Клиент тогда
	Если ВыводВТабличныйДокумент Тогда
		ТиповыеОтчеты.УправлениеОтображениемЗаголовкаТиповогоОтчета(ЭтотОбъект, Результат);
	КонецЕсли;
	#КонецЕсли
	
	ТиповыеОтчеты.ИнициализироватьКомпоновщикНастроек(ЭтотОбъект, СхемаОтчета);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаПоУмолчанию); // восстановим настройки компоновщика
	
	Возврат ОтчетСформирован;
	
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	
	// Не сохраняем вид произвольного отчета, т.к. он может измениться
	СтруктураНастроек.Удалить("ВидПроизвольногоОтчета");
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	// Считываение структуры настроек отчета
 	Если НЕ СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если СтруктураНастроек <> Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;

	// Получим вид произвольного отчета
	Если ПроизвольныйОтчет.Пустая() Тогда
		ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПустаяСсылка();
	Иначе
		ВидПроизвольногоОтчета = ПроизвольныйОтчет.ВидПроизвольногоОтчета;
	КонецЕсли;
	
КонецПроцедуры // ПрименитьНастройку()


Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНастроек = Новый Структура;
	Возврат СтруктураНастроек;
	
КонецФункции // ПолучитьПараметрыИсполненияОтчета()

Функция ПолучитьДополнительныеНастройкиОтчета() Экспорт
	
	МассивДополнительныхНастроек = Новый Массив;
	Возврат МассивДополнительныхНастроек;
	
КонецФункции // ПолучитьДополнительныеНастройкиОтчета()

Процедура УстановитьПроизвольныйОтчет(ПроизвольныйОтчетСсылка, СохраненнаяНастройкаСсылка = Неопределено,
									  ФормаОтчета = Неопределено, ВосстановитьНастройкуПоумолчанию = Истина) Экспорт
	
	ПроизвольныйОтчет = ПроизвольныйОтчетСсылка;
	
	Если СохраненнаяНастройкаСсылка = Неопределено Тогда
		СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();
	Иначе
		СохраненнаяНастройка = СохраненнаяНастройкаСсылка;
	КонецЕсли;
	
	ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(ЭтотОбъект, ФормаОтчета));
	ПараметрыПанелиПользователя 	   = Новый ХранилищеЗначения(ТиповыеОтчеты.ПолучитьПараметрыПанелиПользователяПоУмолчанию(ЭтотОбъект));
	
	Если ПроизвольныйОтчет.Пустая() ИЛИ ПроизвольныйОтчет.ЭтоГруппа Тогда
		СхемаКомпоновкиДанных  = Новый СхемаКомпоновкиДанных;
		ВидПроизвольногоОтчета = Перечисления.ВидыПроизвольныхОтчетов.ПустаяСсылка();
	Иначе	
		СхемаКомпоновкиДанных  = ПроизвольныйОтчет.СхемаКомпоновкиДанных.Получить();
		ВидПроизвольногоОтчета = ПроизвольныйОтчет.ВидПроизвольногоОтчета;
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ТиповыеОтчеты.ОбновитьТаблицуДоступныхНастроекПользователю(ЭтотОбъект);
	
	Если ФормаОтчета <> Неопределено Тогда
		ФормаОтчета.КомпоновщикНастроекПользователя.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КонецЕсли; 
	
	#Если Клиент Тогда
	ТиповыеОтчеты.УстановитьВариантПоУмолчанию(ЭтотОбъект, ФормаОтчета);
	#КонецЕсли
		
	Если СохраненнаяНастройка.Пустая() Тогда
		ТиповыеОтчеты.ПрименитьНастройкуПользователяНастройкиОтчета(ЭтотОбъект);
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Иначе
		ПрименитьНастройку();
		ТиповыеОтчеты.ПрименитьНастройкуПользователяНастройкиОтчета(ЭтотОбъект);
	КонецЕсли;
	
	#Если Клиент Тогда
	Если ФормаОтчета <> Неопределено Тогда
		
		ТиповыеОтчеты.ОбработкаФормыПослеПримененияНастройки(ЭтотОбъект, ФормаОтчета);
		
		// Нарисуем кнопки выбора настроек на верхней панели
		ТиповыеОтчеты.ОбновитьКнопкиВыбораНастроек(ФормаОтчета, ЭтотОбъект, ФормаОтчета.ПредставлениеНастройки, ФормаОтчета.РежимРедактированияНастройки);
		
	КонецЕсли; 
	#КонецЕсли
		
КонецПроцедуры // УстановитьПроизвольныйОтчет()

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		ПараметрКонецПериода.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДоработатьКомпоновщикПередВыводом()

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли


СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
