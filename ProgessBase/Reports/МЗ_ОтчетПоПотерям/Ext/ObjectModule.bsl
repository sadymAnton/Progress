#Если Клиент Тогда
	Перем ВыводитьВремя;	
	Перем ТаблИтоговаяРазвернуто;
	Перем ТаблИтого Экспорт;
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА
	
	Функция ПолучитьТекстЗапросаНастройки(БезОтбора = Ложь)
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Продукция,
		//|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Ссылка КАК Регистратор,
		//|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Номенклатура КАК Материал,
		|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Ссылка КАК Регистратор," + ?(ГруппировкаНоменклатуры,"
		|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Номенклатура.ГруппировкаНоменклатуры КАК Материал,", "
		|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Номенклатура КАК Материал,") + "
		|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Спецификация,
		|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Ссылка.Подразделение КАК Линия,
		|	0 КАК Выработано,
		|	0 КАК ВыработаноТонн,
		|	0 КАК Рецептура,
		|	0 КАК ФактическийРасход,
		|	0 КАК КоличествоПотери,
		|	0 КАК РецептураСумма,
		|	0 КАК ФактическийРасходСумма,
		|	0 КАК ПотериСумма,
		|	0 КАК ПроцентПотерь,
		|	0 КАК ВыработаноПозиция,
		|	0 КАК ВыработаноТоннПозиция,
		|	"""" КАК РасчетаСВ,
		|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Ссылка.Подразделение.Родитель КАК Цех,
		|	0 КАК БрендоОбъем,
		|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Продукция.Код КАК КодГП,
		|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Номенклатура.Код КАК МатериалКод,
		|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаМатериалов,
		|	0 КАК БазисСВ,
		//|	ЕСТЬNULL(ПСО.Значение, ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Номенклатура.ПРГ_Базис) КАК БазисСВ,
		|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.СерияНоменклатуры.УЗ_ПроцентСухихВеществ КАК СВСерии,
		|	ОтчетПроизводстваЗаСменуРаспределениеМатериалов.СерияНоменклатуры КАК Серия,
		|ЛОЖЬ КАК Аналог
		|ПОМЕСТИТЬ ТаблИтого
		|ИЗ
		|	Документ.ОтчетПроизводстваЗаСмену.РаспределениеМатериалов КАК ОтчетПроизводстваЗаСменуРаспределениеМатериалов
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПРГ_ПериодическиеСвойстваОбъектов КАК ПСО
		//|		ПО ОтчетПроизводстваЗаСменуРаспределениеМатериалов.Номенклатура = ПСО.Объект
		//|		И ПСО.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СвойстваОбъектов.БазисСВ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблПлан.Продукция КАК Продукция,
		|	ПРЕДСТАВЛЕНИЕ(ТаблПлан.Продукция),
		|	ТаблПлан.Материал КАК Материал,
		|	ТаблПлан.МатериалКод КАК МатериалКод,
		|	ПРЕДСТАВЛЕНИЕ(ТаблПлан.Материал),
		|	ТаблПлан.Спецификация КАК Спецификация,
		|	ТаблПлан.Спецификация.КодВерсии КАК ВерсияСпецификации,
		|   ВЫРАЗИТЬ(ОсновныеСпецификацииНоменклатуры.Период КАК Дата) КАК ДатаУстановкиОсновнойСпецификации,
		|	ПРЕДСТАВЛЕНИЕ(ТаблПлан.Спецификация),
		|	ТаблПлан.Линия КАК Линия,
		|	ПРЕДСТАВЛЕНИЕ(ТаблПлан.Линия),
		//m_ionov@mail.ru 24.11.2016
		//Если продукция в КГ, то "выработано" не заполняем, а заполняем только "выработано тонн"
		//|	ТаблПлан.Выработано КАК Выработано,
		|	ВЫБОР КОГДА ТаблПлан.Продукция.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код = ""166"" ТОГДА 0 ИНАЧЕ ТаблПлан.Выработано КОНЕЦ КАК Выработано,
		//------- m_ionov@mail.ru -------
		|	ТаблПлан.ВыработаноТонн КАК ВыработаноТонн,
		|	ТаблПлан.Рецептура КАК Рецептура,
		|	ТаблПлан.ФактическийРасход КАК ФактическийРасход,
		|	ТаблПлан.КоличествоПотери КАК КоличествоПотери,
		|	ТаблПлан.РецептураСумма КАК РецептураСумма,
		|	ТаблПлан.ФактическийРасходСумма КАК ФактическийРасходСумма,
		|	ТаблПлан.ПотериСумма КАК ПотериСумма,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ТаблПлан.Рецептура = 0
		|				ТОГДА " + ?(ВыводитьСерии,"0","100") + "
		|			ИНАЧЕ ТаблПлан.КоличествоПотери / ТаблПлан.Рецептура * 100
		|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК ПроцентПотерь,
		|	ТаблПлан.Регистратор,
		|	ТаблПлан.Регистратор.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ТаблПлан.Регистратор),
		|	ТаблПлан.ВыработаноПозиция,
		|	ТаблПлан.ВыработаноТоннПозиция,
		|	ТаблПлан.РасчетаСВ,
		|	ТаблПлан.Цех КАК Цех,
		|	ТаблПлан.БрендоОбъем КАК БрендоРазмер,
		|	ТаблПлан.КодГП,
		|	ТаблПлан.ЕдиницаМатериалов,
		|	ТаблПлан.БазисСВ,
		|	ТаблПлан.СВСерии,
		|	ТаблПлан.Серия,
		|ТаблПлан.Аналог
		|{ВЫБРАТЬ
		|	Продукция.*,
		|	Материал.*,
		|	Спецификация.*,
		|	Линия.*,
		|	Выработано,
		|	ВыработаноТонн,
		|	Рецептура,
		|	ФактическийРасход,
		|	КоличествоПотери,
		|	РецептураСумма,
		|	ФактическийРасходСумма,
		|	ПотериСумма,
		|	ПроцентПотерь,
		|	Регистратор.*,
		|	РасчетаСВ,
		|	Регистратор.*,
		|	Дата,
		|	БрендоРазмер,
		|	Цех.*,
		|	КодГП,
		|	МатериалКод,
		|	ВерсияСпецификации,
		|	ДатаУстановкиОсновнойСпецификации,
		|	ЕдиницаМатериалов.*,
		|	БазисСВ,
		|	СВСерии,
		|	Серия.*,
		|ТаблПлан.Аналог}
		|ИЗ
		|	ТаблИтого КАК ТаблПлан
		|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних() КАК ОсновныеСпецификацииНоменклатуры
		|   ПО ОсновныеСпецификацииНоменклатуры.Номенклатура = ТаблПлан.Продукция
		|   И ОсновныеСпецификацииНоменклатуры.СпецификацияНоменклатуры = ТаблПлан.Спецификация
		|	И (ОсновныеСпецификацииНоменклатуры.Подразделение = ТаблПлан.Линия
		|		ИЛИ ОсновныеСпецификацииНоменклатуры.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
		|	)" + ?(БезОтбора, "", "
		
		|{ГДЕ
		|	ТаблПлан.Продукция.*,
		|	ТаблПлан.Материал.*,
		|	ТаблПлан.Спецификация.*,
		|	ТаблПлан.Линия.*,
		//|	ТаблПлан.Выработано,
		//|	ТаблПлан.ВыработаноТонн,
		//|	ТаблПлан.Рецептура,
		//|	ТаблПлан.ФактическийРасход,
		//|	ТаблПлан.КоличествоПотери,
		//|	ТаблПлан.РецептураСумма,
		//|	ТаблПлан.ФактическийРасходСумма,
		//|	ТаблПлан.ПотериСумма,
		//|	ТаблПлан.ПроцентПотерь,
		//|	ТаблПлан.Цех.*,
		//|	ТаблПлан.КодГП,
		//|	ТаблПлан.Спецификация.КодВерсии,
		//|	ОсновныеСпецификацииНоменклатуры.Период,
		//|	ТаблПлан.ЕдиницаМатериалов.*,
		//|	ТаблПлан.БазисСВ,
		|	ТаблПлан.Регистратор.*}") + "
		|{УПОРЯДОЧИТЬ ПО
		|	Продукция.*,
		|	Материал.*,
		|	Спецификация.*,
		|	Линия.*,
		|	Выработано,
		|	ВыработаноТонн,
		|	Рецептура,
		|	ФактическийРасход,
		|	КоличествоПотери,
		|	РецептураСумма,
		|	ФактическийРасходСумма,
		|	ПотериСумма,
		|	ПроцентПотерь,
		|	Регистратор.*,
		|	ВыработаноПозиция,
		|	ВыработаноТоннПозиция,
		|	РасчетаСВ,
		|	Дата,
		|	Цех.*,
		|	КодГП,
		|	МатериалКод,
		|	ВерсияСпецификации,
		|	ДатаУстановкиОсновнойСпецификации,
		|	ЕдиницаМатериалов.*,
		|	БазисСВ,
		|	СВСерии,
		|	Серия.*}
		|ИТОГИ
		|	СУММА(ТаблПлан.ВыработаноПозиция) КАК Выработано,
		|	СУММА(ТаблПлан.ВыработаноТоннПозиция) КАК ВыработаноТонн,
		|	СУММА(Рецептура),
		|	СУММА(ФактическийРасход),
		|	СУММА(КоличествоПотери),
		|	СУММА(РецептураСумма),
		|	СУММА(ФактическийРасходСумма),
		|	СУММА(ПотериСумма),
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА СУММА(Рецептура) = 0
		|				ТОГДА 100
		|			ИНАЧЕ СУММА(КоличествоПотери) / СУММА(Рецептура) * 100
		|		КОНЕЦ КАК ЧИСЛО(10, 2)) КАК ПроцентПотерь
		|ПО
		|	ОБЩИЕ,
		|	Продукция,
		|	Материал,
		|	Спецификация,
		|	Линия,
		|	Цех,
		|	БрендоРазмер
		|{ИТОГИ ПО
		|	Продукция.*,
		|	Материал.*,
		|	Спецификация.*,
		|	Линия.*,
		|	Регистратор.*,
		|	РасчетаСВ,
		|	Цех.*,
		|	БрендоРазмер,
		|	Серия.*}";
			
		
		возврат ТекстЗапроса;
	КонецФункции	
	
	// Процедура установки начальных настроек отчета по метаданным регистра накопления
	//
	Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
		
		// Настройка общих параметров универсального отчета
		
		// Содержит название отчета, которое будет выводиться в шапке.
		// Тип: Строка.
		// Пример:
		// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
		УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним) + "; " + ?(БезПересчетаПоСВ,"Данные без пересчета по СВ", "Данные с пересчетом по СВ")  + "; " + ?(ВыводитьСерии,"Данные с выводим серий", "Данные без вывода серий") + "; " + ?(БезУчетаСортаПоСырью,"Данные без учета сорта по сырью", "Данные с учетом сорта по сырью") + ?(СпецификацииНаДату = Дата("00010101"),"","; спецификации на дату " + СокрЛП(СпецификацииНаДату)); 
		
		// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
		// Тип: Булево.
		// Значение по умолчанию: Истина.
		// Пример:
		// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
		УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
		
		ТекстЗапроса = ПолучитьТекстЗапросаНастройки(Ложь);
		
		УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
		УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Очистить();
		
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("БрендоРазмер", "Брендо размер");
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ФактическийРасход", "Фактический расход");
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ФактическийРасходСумма", "Фактический расход, руб");
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПроцентПотерь", "Процент потерь");
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КоличествоПотери", "Количество потери");
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПотериСумма", "Потери, руб");
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Выработано", "Выработано");
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВыработаноТонн", "Выработано тонн");
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("МатериалКод", "Код материала");
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("РецептураСумма", "Рецептура, руб");
		
		
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаОплаты", "Дата оплаты");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДнейПросрочено", "Дней просрочено");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента", "Договор контрагента");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВалютаВзаиморасчетов", "Валюта взаиморасчетов");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("МенеджерПокупателя", "Менеджер покупателя");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ГоловнойКонтрагент", "Головной контрагент");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КаналТовародвижения", "Канал товародвижения");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЦеноваяГруппаКонтрагента", "Ценовая группа");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Регистратор", "Документ");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("НачОст", "Нач. Ост.");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Приход", "Приход");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Расход", "Расход");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КонОст", "Кон. Ост.");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Просрочено", "Просроченный долг");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Погашено", "Погашено");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Отсрочка", "Отсрочка");
		//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПроцентОтгрузки", "Процент суммы отгрузки");
		
		
		// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
		// Тип: Строка.
		// Пример:
		// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
		//УниверсальныйОтчет.ИмяРегистра = "РасчетыСКонтрагентами";
		
		// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
		// Тип: Булево.
		// Значение по умолчанию: Ложь.
		// Пример:
		// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
		
		// Содержит признак необходимости вывода в отчет общих итогов.
		// Тип: Булево.
		// Значение по умолчанию: Истина.
		// Пример:
		// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
		
		// Содержит признак необходимости вывода детальных записей в отчет.
		// Тип: Булево.
		// Значение по умолчанию: Ложь.
		// Пример:
		// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
		
		УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
		
		// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
		// Тип: Булево.
		// Значение по умолчанию: Истина.
		// Пример:
		// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
		
		// Содержит признак использования свойств и категорий при заполнении настроек отчета.
		// Тип: Булево.
		// Значение по умолчанию: Ложь.
		// Пример:
		УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Ложь;
		
		// Содержит признак использования простой формы настроек отчета без группировок колонок.
		// Тип: Булево.
		// Значение по умолчанию: Ложь.
		// Пример:
		УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
		
		// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
		// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
		// для реализации специфичных для данного отчета параметрических настроек.
		
		//МассивТипов = Новый Массив;
		//МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		//УниверсальныйОтчет.ДобавитьПолеГруппировка("Контрагент",  "ДоговорКонтрагента", "Владелец",    "Контрагент",  Новый ОписаниеТипов(МассивТипов));
		//
		//МассивТипов.Очистить();
		//МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
		//УниверсальныйОтчет.ДобавитьПолеГруппировка("Организация", "ДоговорКонтрагента", "Организация", "Организация", Новый ОписаниеТипов(МассивТипов));
		
		//УниверсальныйОтчет.ДобавитьПолеГруппировка("ВалютаВзаиморасчетов", "ДоговорКонтрагента", "ВалютаВзаиморасчетов", "Валюта взаиморасчетов");
		
		// Заполнение начальных настроек универсального отчета
		УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
		
		Если Не ГруппировкаНоменклатуры Тогда
			УниверсальныйОтчет.ДобавитьПоказатель("Выработано", "Выработано",Ложь,"ЧЦ=15; ЧДЦ=3","Суммы","Показатели");
			УниверсальныйОтчет.ДобавитьПоказатель("ВыработаноТонн", "Выработано тонн",Ложь,"ЧЦ=15; ЧДЦ=3","Суммы","Показатели");
		КонецЕсли;
		УниверсальныйОтчет.ДобавитьПоказатель("Рецептура", "Рецептура",Ложь,"ЧЦ=15; ЧДЦ=3","Суммы","Показатели");
		УниверсальныйОтчет.ДобавитьПоказатель("РецептураСумма", "Рецептура, руб",Ложь,"ЧЦ=15; ЧДЦ=2","Суммы","Показатели");
		УниверсальныйОтчет.ДобавитьПоказатель("ФактическийРасход", "Фактический расход",Ложь,"ЧЦ=15; ЧДЦ=3","Суммы","Показатели");
		УниверсальныйОтчет.ДобавитьПоказатель("ФактическийРасходСумма", "Фактический расход, руб",Ложь,"ЧЦ=15; ЧДЦ=2","Суммы","Показатели");
		УниверсальныйОтчет.ДобавитьПоказатель("КоличествоПотери", "Количество потерь",Ложь,"ЧЦ=15; ЧДЦ=3; ЧН=0","Суммы","Показатели");
		УниверсальныйОтчет.ДобавитьПоказатель("ПотериСумма", "Потери, руб",Ложь,"ЧЦ=15; ЧДЦ=2; ЧН=0","Суммы","Показатели");
		УниверсальныйОтчет.ДобавитьПоказатель("ПроцентПотерь", "Процент  потерь",Ложь,"ЧЦ=15; ЧДЦ=3; ЧН=0","Суммы","Показатели");
		УниверсальныйОтчет.Показатели.Строки[0].Использование = Истина;
		//
		//УниверсальныйОтчет.ДобавитьПоказатель("СуммаУпрОборот",,            Ложь,, "СуммаУпр");
		//УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовОборот",, Ложь,, "СуммаВзаиморасчетов");
		
		// Добавление предопределенных группировок строк отчета.
		// Необходимо вызывать для каждой добавляемой группировки строки.
		// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
		///УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Продукция");
		//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
		//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
		//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
		//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("МенеджерПокупателя"); 
		//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Регистратор");
		
		// Добавление предопределенных группировок колонок отчета.
		// Необходимо вызывать для каждой добавляемой группировки колонки.
		// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
		
		// Добавление предопределенных отборов отчета.
		// Необходимо вызывать для каждого добавляемого отбора.
		// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
		УниверсальныйОтчет.ДобавитьОтбор("Продукция");
		УниверсальныйОтчет.ДобавитьОтбор("Материал");
		УниверсальныйОтчет.ДобавитьОтбор("Спецификация");
		УниверсальныйОтчет.ДобавитьОтбор("Линия");
		
		///УниверсальныйОтчет.ДобавитьОтбор("РасчетыВозврат");
						
		УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета,истина);
		// Добавление предопределенных полей порядка отчета.
		// Необходимо вызывать для каждого добавляемого поля порядка.
		//УниверсальныйОтчет.ДобавитьПорядок("Дата"); //пока убираем
		УниверсальныйОтчет.ДобавитьПорядок("Регистратор");
		//УниверсальныйОтчет.ДобавитьПорядок("ДатаОплаты");
		
		// Установка связи подчиненных и родительских полей
		// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
		
		// Установка связи полей и измерений
		// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
		
		// Добавление дополнительных полей
		// Необходимо вызывать для каждого добавляемого дополнительного поля.
		// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
		Если Не ГруппировкаНоменклатуры Тогда
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("Продукция.Код",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("Продукция",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("Линия",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("Выработано",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("ВыработаноТонн",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
			
		
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("МатериалКод",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		КонецЕсли;
		
		УниверсальныйОтчет.ДобавитьДополнительноеПоле("Материал",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		Если Не ГруппировкаНоменклатуры Тогда
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("Материал.ЕдиницаХраненияОстатков",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		
		
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("РасчетаСВ",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("БазисСВ",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
			Если ВыводитьСерии Тогда
				УниверсальныйОтчет.ДобавитьДополнительноеПоле("СВСерии",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
				УниверсальныйОтчет.ДобавитьДополнительноеПоле("Серия",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
			КонецЕсли;
		КонецЕсли;
		
		УниверсальныйОтчет.ДобавитьДополнительноеПоле("Рецептура",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		УниверсальныйОтчет.ДобавитьДополнительноеПоле("РецептураСумма",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		УниверсальныйОтчет.ДобавитьДополнительноеПоле("ФактическийРасход",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		УниверсальныйОтчет.ДобавитьДополнительноеПоле("ФактическийРасходСумма",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		УниверсальныйОтчет.ДобавитьДополнительноеПоле("КоличествоПотери",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		УниверсальныйОтчет.ДобавитьДополнительноеПоле("ПотериСумма",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		УниверсальныйОтчет.ДобавитьДополнительноеПоле("ПроцентПотерь",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		
		Если Не ГруппировкаНоменклатуры Тогда
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("Спецификация",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("Регистратор",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("Дата",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("БрендоРазмер",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
			УниверсальныйОтчет.ДобавитьДополнительноеПоле("Цех",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		КонецЕсли;
		
		
		УслОформление  = УниверсальныйОтчет.ПостроительОтчета.УсловноеОформление.Добавить("ПисатьНули","0");
		УслОформление.Использование 										  = Истина;
		Область = УслОформление.Область.Добавить("Рецептура","Рецептура",ТипОбластиОформления.Поле);
		Область = УслОформление.Область.Добавить("ФактическийРасход","ФактическийРасход",ТипОбластиОформления.Поле);
		Область = УслОформление.Область.Добавить("КоличествоПотери","КоличествоПотери",ТипОбластиОформления.Поле);
		Область = УслОформление.Область.Добавить("РецептураСумма","РецептураСумма",ТипОбластиОформления.Поле);
		Область = УслОформление.Область.Добавить("ФактическийРасходСумма","ФактическийРасходСумма",ТипОбластиОформления.Поле);
		Область = УслОформление.Область.Добавить("ПотериСумма","ПотериСумма",ТипОбластиОформления.Поле);
		Область = УслОформление.Область.Добавить("ПроцентПотерь","ПроцентПотерь",ТипОбластиОформления.Поле);
		УслОформление.ОФормление.Формат.Значение					  = "ЧН=0";
		УслОформление.ОФормление.Формат.Использование 				   = Истина;
		
		УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Аналог", "Использован аналог");
		УниверсальныйОтчет.ДобавитьДополнительноеПоле("Аналог");
		
		//УниверсальныйОтчет.ДобавитьДополнительноеПоле("ДатаОплаты",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		//УниверсальныйОтчет.ДобавитьДополнительноеПоле("ДнейПросрочено",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
		
		//УслОформление  = УниверсальныйОтчет.ПостроительОтчета.УсловноеОформление.Добавить("ДатаОплаты","Дата оплаты");
		////УслОформление.ОФормление  = Новый НастройкаОформления();
		//УслОформление.Использование 										  = Истина;
		//Область = УслОформление.Область.Добавить("ДатаОплаты","Дата оплаты",ТипОбластиОформления.Поле);
		//УслОформление.ОФормление.Формат.Значение					 = "ДФ=dd.MM.yyyy";
		//УслОформление.ОФормление.Формат.Использование 				 = Истина;
		//УслОформление.ОФормление.ГоризонтальноеПоложение.Значение = ГоризонтальноеПоложение.Центр;
		//УслОформление.ОФормление.ГоризонтальноеПоложение.Использование = истина;
		//
		//
		//УслОформление  = УниверсальныйОтчет.ПостроительОтчета.УсловноеОформление.Добавить("ДнейПросрочено","Дней просрочено");
		////УслОформление.ОФормление  = Новый НастройкаОформления();
		//УслОформление.Использование 								= Истина;
		//Область = УслОформление.Область.Добавить("ДнейПросрочено","Дней просрочено",ТипОбластиОформления.Поле);
		//
		//УслОформление.ОФормление.Формат.Значение					 = "ЧЦ=4";
		//УслОформление.ОФормление.Формат.Использование 				 = Истина;
		//УслОформление.ОФормление.ГоризонтальноеПоложение.Значение = ГоризонтальноеПоложение.Центр;
		//УслОформление.ОФормление.ГоризонтальноеПоложение.Использование = истина;
		//
		//УслОформление.Использование 								= Истина;
		//Область = УслОформление.Область.Добавить("ПроцентОтгрузки","Процент суммы отгрузки",ТипОбластиОформления.Поле);
		//УслОформление.ОФормление.Формат.Значение					  = "ЧЦ=4";
		//УслОформление.ОФормление.Формат.Использование 				   = Ложь;
		//УслОформление.ОФормление.ГоризонтальноеПоложение.Значение 	   = ГоризонтальноеПоложение.Центр;
		//УслОформление.ОФормление.ГоризонтальноеПоложение.Использование = истина;
		//
		
		//УслОформление.ОФормление
		
	КонецПроцедуры // УстановитьНачальныеНастройки()
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
	Функция ПолучитьТекстЗапроса_РегистрыБУХ()
		возврат "ВЫБРАТЬ
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация КАК Организация,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
		|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
		|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Расход,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
		|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
		|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Приход,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
		|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
		|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ - ВЫБОР
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
		|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
		|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КонОст,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период < &Дата1
		|				ТОГДА ВЫБОР
		|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
		|							ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
		|							ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПриходНач,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период < &Дата1
		|				ТОГДА ВЫБОР
		|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
		|							ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
		|							ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РасходНач,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период < &Дата1
		|				ТОГДА ВЫБОР
		|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период < &Дата1
		|							ТОГДА ВЫБОР
		|									КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|											И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
		|										ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|									КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|											И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
		|										ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 0
		|					КОНЕЦ - ВЫБОР
		|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
		|							ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
		|							ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачОст
		|ПОМЕСТИТЬ ТаблКонтр
		|ИЗ
		|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
		|ГДЕ
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Активность
		|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период <= &Дата2
		|	//И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент.Код = ""52878""
		|{ГДЕ
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.*,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент.*,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация.*,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК Валюта}
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
		|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
		|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ - ВЫБОР
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
		|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
		|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ) <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ДоговорКонтрагента,
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДатаДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДатаДок
		|		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период
		|	КОНЕЦ КАК Дата,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.Владелец КАК Контрагент,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
		|	ВЫБОР
		|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДокументДвиж <> &ПустойДокумент
		|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДокументДвиж
		|		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор
		|	КОНЕЦ КАК Регистратор,
		|	ВЫБОР
		|		КОГДА НЕ РеализацияТоваровУслуг.ДатаОплаты ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА РеализацияТоваровУслуг.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА РеализацияТоваровУслуг.Дата
		|					ИНАЧЕ РеализацияТоваровУслуг.ДатаОплаты
		|				КОНЕЦ
		|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДатаОплатыДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДатаОплатыДок
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДатаДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДатаДок
		|				ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период
		|			КОНЕЦ
		|	КОНЕЦ КАК ДатаОплаты,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
		|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
		|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Приход,
		|	СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаРег) КАК СуммаРег,
		|	СУММА(ВЫБОР
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
		|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
		|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Расход,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация КАК Организация,
		|	ТаблКонтр.Расход КАК ИтогоРасход,
		|	ТаблКонтр.Приход КАК ИтогоПриход,
		|	СУММА(ТаблКонтр.ПриходНач) КАК ИтогоПриходНач,
		|	СУММА(ТаблКонтр.РасходНач) КАК ИтогоРасходНач
		|ИЗ
		|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор = РеализацияТоваровУслуг.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
		|		ПО РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация = ТаблКонтр.Организация
		|			И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
		|			И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов = ТаблКонтр.Валюта
		|ГДЕ
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Активность
		|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период <= &Дата2
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДатаДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДатаДок
		|		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период
		|	КОНЕЦ,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.Владелец,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДокументДвиж <> &ПустойДокумент
		|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДокументДвиж
		|		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА НЕ РеализацияТоваровУслуг.ДатаОплаты ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА РеализацияТоваровУслуг.ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|						ТОГДА РеализацияТоваровУслуг.Дата
		|					ИНАЧЕ РеализацияТоваровУслуг.ДатаОплаты
		|				КОНЕЦ
		|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДатаОплатыДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДатаОплатыДок
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДатаДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДатаДок
		|				ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период
		|			КОНЕЦ
		|	КОНЕЦ,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
		|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация,
		|	ТаблКонтр.Расход,
		|	ТаблКонтр.Приход
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	ДоговорКонтрагента,
		|	Валюта,
		|	ДатаОплаты,
		|	Дата,
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблКонтр";
	КонецФункции
	
	Функция ПолучитьТекстЗапроса()
		возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
		|	СУММА(ВЫБОР
		|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|							ТОГДА 0
		|						ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|					КОНЕЦ
		|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|		КОНЕЦ) КАК ПриходКон,
		|	СУММА(ВЫБОР
		|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|							ТОГДА 0
		|						ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|					КОНЕЦ
		|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|		КОНЕЦ) КАК РасходКон,
		|	СУММА(ВЫБОР
		|			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА ВЫБОР
		|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|										ТОГДА 0
		|									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|								КОНЕЦ
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|							ТОГДА ВЫБОР
		|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|										ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПриходНач,
		|	СУММА(ВЫБОР
		|			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|							ТОГДА ВЫБОР
		|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|										ТОГДА 0
		|									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|								КОНЕЦ
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА ВЫБОР
		|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|										ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РасходНач,
		|	СУММА(ВЫБОР
		|			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА ВЫБОР
		|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|										ТОГДА 0
		|									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|								КОНЕЦ
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|							ТОГДА ВЫБОР
		|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|										ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Приход,
		|	СУММА(ВЫБОР
		|			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|							ТОГДА ВЫБОР
		|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|										ТОГДА 0
		|									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|								КОНЕЦ
		|						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|							ТОГДА ВЫБОР
		|									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|										ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Расход
		|ПОМЕСТИТЬ ТаблКонтр
		|{ВЫБРАТЬ
		|	Организация.*,
		|	ДоговорКонтрагента.*,
		|	Контрагент.*}
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
		|	И ВзаиморасчетыСКонтрагентами.Активность
		|	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
		|{ГДЕ
		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*,
		|	ВзаиморасчетыСКонтрагентами.Контрагент.*,
		|	ВзаиморасчетыСКонтрагентами.Организация.*,
		|	ВзаиморасчетыСКонтрагентами.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
		|	ВзаиморасчетыСКонтрагентами.Контрагент.ЦеноваяГруппаКонтрагента.* КАК ЦеноваяГруппаКонтрагента,
		|	ВзаиморасчетыСКонтрагентами.Контрагент.КаналТовародвижения.* КАК КаналТовародвижения,
		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов,
		|	ВзаиморасчетыСКонтрагентами.Контрагент.Проект.* КАК Проект}
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСКонтрагентами.Организация,
		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
		|	ВзаиморасчетыСКонтрагентами.Контрагент
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					ТОГДА ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|								ТОГДА 0
		|							ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|						КОНЕЦ
		|				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					ТОГДА ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|								ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|			КОНЕЦ - ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|					ТОГДА ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|								ТОГДА 0
		|							ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|						КОНЕЦ
		|				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					ТОГДА ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|								ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|			КОНЕЦ) <> 0
		|		ИЛИ СУММА(ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
		|					ТОГДА ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|								ТОГДА ВЫБОР
		|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|											ТОГДА 0
		|										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|									КОНЕЦ
		|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|								ТОГДА ВЫБОР
		|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|											ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|										ИНАЧЕ 0
		|									КОНЕЦ
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ - ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
		|					ТОГДА ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|								ТОГДА ВЫБОР
		|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|											ТОГДА 0
		|										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|									КОНЕЦ
		|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|								ТОГДА ВЫБОР
		|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|											ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|										ИНАЧЕ 0
		|									КОНЕЦ
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> 0
		|		ИЛИ СУММА(ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
		|					ТОГДА ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|								ТОГДА ВЫБОР
		|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|											ТОГДА 0
		|										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|									КОНЕЦ
		|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|								ТОГДА ВЫБОР
		|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|											ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|										ИНАЧЕ 0
		|									КОНЕЦ
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> 0
		|		ИЛИ СУММА(ВЫБОР
		|				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
		|					ТОГДА ВЫБОР
		|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|								ТОГДА ВЫБОР
		|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|											ТОГДА 0
		|										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|									КОНЕЦ
		|							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|								ТОГДА ВЫБОР
		|										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|											ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|										ИНАЧЕ 0
		|									КОНЕЦ
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ) <> 0)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ДоговорКонтрагента,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
		|	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.ДатаДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ВзаиморасчетыСКонтрагентами.ДатаДок
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
		|	КОНЕЦ КАК Дата,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.ДокументДвиж <> &ПустойДокумент
		|			ТОГДА ВзаиморасчетыСКонтрагентами.ДокументДвиж
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
		|	КОНЕЦ КАК Регистратор,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.ДатаОплатыДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ВзаиморасчетыСКонтрагентами.ДатаОплатыДок
		|		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА РеализацияТоваровУслуг.ДатаОплаты
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
		|	КОНЕЦ КАК ДатаОплаты,
		|	СУММА(ВЫБОР
		|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0
		|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Приход,
		|	СУММА(ВЫБОР
		|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0
		|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
		|				ТОГДА ВЫБОР
		|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Расход,
		|	ВзаиморасчетыСКонтрагентами.ПроцентСуммыДок КАК ПроцентОтгрузки,
		|	НАЧАЛОПЕРИОДА(ВЫБОР
		|			КОГДА ВзаиморасчетыСКонтрагентами.ДатаДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА ВзаиморасчетыСКонтрагентами.ДатаДок
		|			ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
		|		КОНЕЦ, МЕСЯЦ) КАК ПериодПогашения
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = РеализацияТоваровУслуг.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
		|		ПО ВзаиморасчетыСКонтрагентами.Организация = ТаблКонтр.Организация
		|			И ВзаиморасчетыСКонтрагентами.Контрагент = ТаблКонтр.Контрагент
		|			И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
		|	И ВзаиморасчетыСКонтрагентами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ВзаиморасчетыСКонтрагентами.Организация,
		|	ВзаиморасчетыСКонтрагентами.Контрагент,
		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.ДатаДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ВзаиморасчетыСКонтрагентами.ДатаДок
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.ДокументДвиж <> &ПустойДокумент
		|			ТОГДА ВзаиморасчетыСКонтрагентами.ДокументДвиж
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВзаиморасчетыСКонтрагентами.ДатаОплатыДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ВзаиморасчетыСКонтрагентами.ДатаОплатыДок
		|		КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|			ТОГДА РеализацияТоваровУслуг.ДатаОплаты
		|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
		|	КОНЕЦ,
		|	ВзаиморасчетыСКонтрагентами.ПроцентСуммыДок,
		|	НАЧАЛОПЕРИОДА(ВЫБОР
		|			КОГДА ВзаиморасчетыСКонтрагентами.ДатаДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА ВзаиморасчетыСКонтрагентами.ДатаДок
		|			ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
		|		КОНЕЦ, МЕСЯЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	ДоговорКонтрагента,
		|	ДатаОплаты,
		|	Дата,
		|	Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблКонтр";
		
	КонецФункции
	
	//Функция ПолучитьТекстЗапросИтоговый()
	//	
	//	возврат ПолучитьТекстЗапросаНастройки(2);
	//			
	//КонецФункции
	
	Функция ПолучитьРасчитаннуюДебиторку1()
		
		ОписЧисла = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
		ОписДата  = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
		
		ТаблИтого = Новый ТаблицаЗначений;
		ТаблИтого.Колонки.Добавить("Дата",ОписДата);
		ТаблИтого.Колонки.Добавить("ДатаОплаты",ОписДата);
		ТаблИтого.Колонки.Добавить("ДнейПросрочено",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
		
		ТаблИтого.Колонки.Добавить("Отсрочка",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
		ТаблИтого.Колонки.Добавить("ПроцентОтгрузки",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		
		
		ТаблИтого.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблИтого.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблИтого.Колонки.Добавить("ДоговорКонтрагента",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблИтого.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблИтого.Колонки.Добавить("Регистратор",Документы.ТипВсеСсылки());
		
		
		ТаблИтого.Колонки.Добавить("НачОст",ОписЧисла);
		ТаблИтого.Колонки.Добавить("Приход",ОписЧисла);
		ТаблИтого.Колонки.Добавить("Расход",ОписЧисла);
		ТаблИтого.Колонки.Добавить("КонОст",ОписЧисла);
		ТаблИтого.Колонки.Добавить("Погашено",ОписЧисла);
		ТаблИтого.Колонки.Добавить("Просрочено",ОписЧисла);
		
		//ТаблРасч 
		
		
		
		
		
		Дата1 = НачалоДня(УниверсальныйОтчет.ДатаНач);
		Дата2 = КонецДня(УниверсальныйОтчет.ДатаКон);
		
		ТекВремя = ТекущаяДата();
		
		ПостроительЗапроса = Новый ПостроительЗапроса;
		ПостроительЗапроса.Текст = ПолучитьТекстЗапроса();
		
		ПостроительЗапроса.Параметры.Вставить("Дата1",Дата1);
		ПостроительЗапроса.Параметры.Вставить("Дата2",Дата2);
		ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
		
		МассивВидовДоговоров = Новый Массив;
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ПостроительЗапроса.Параметры.Вставить("ВидДоговора",МассивВидовДоговоров);
		
		ДопустимыеОтборы 	=  Новый Массив;
		ДопустимыеОтборы.Добавить("договорконтрагента");
		ДопустимыеОтборы.Добавить("контрагент");
		ДопустимыеОтборы.Добавить("организация");
		ДопустимыеОтборы.Добавить("менеджерпокупателя");
		ДопустимыеОтборы.Добавить("ценоваягруппаконтрагента");
		ДопустимыеОтборы.Добавить("каналтовародвижения");
		ДопустимыеОтборы.Добавить("валютавзаиморасчетов");
		ДопустимыеОтборы.Добавить("проект");
		
		
		
		ТекОрганизация 		   = Неопределено;
		ТекКонтрагент  		   = Неопределено;
		ТекДоговорКонтрагента  = Неопределено;
		ТекВалюта			   = Неопределено;
		
		Для каждого ТекОтбор ИЗ УниверсальныйОтчет.ПостроительОтчета.Отбор Цикл
			ПутьКДанным = 	НРег(ТекОтбор.ПутьКДанным);
			Если ПустаяСтрока(ПутьКДанным) Тогда
				продолжить;
			КонецЕсли;	
			Нашли = Ложь;
			Для Каждого ТекЭл Из ДопустимыеОтборы Цикл
				Если СтрДлина(ТекЭл) = СтрДлина(ПутьКДанным) и Лев(ПутьКДанным,СтрДлина(ТекЭл)) = ТекЭл Тогда
					Нашли = Истина;
					прервать;
				ИначеЕсли Лев(ПутьКДанным,СтрДлина(ТекЭл)+1) = ТекЭл+"."  Тогда
					Нашли = Истина;
					прервать;
				КонецЕсли;	
			КонеЦцикла;	
			Если Не Нашли Тогда продолжить; КонецЕсли;
			Если ТекОтбор.Использование Тогда
				НашОтбор = ПостроительЗапроса.Отбор.Добавить(ТекОтбор.ПутьКданным,ТекОтбор.Имя,ТекОтбор.Представление);
				НашОтбор.Использование  = ТекОтбор.Использование;
				НашОтбор.ВидСравнения   = ТекОтбор.ВидСравнения;
				Если ТипЗнч(ТекОтбор.Значение)  = Тип("СписокЗначений") Тогда
					Список = Новый СписокЗначений;
					Список.ЗагрузитьЗначения(ТекОтбор.Значение.ВыгрузитьЗначения());
					НашОтбор.Значение       = Список;
				Иначе
					НашОтбор.Значение       = ТекОтбор.Значение;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		//	ПостроительЗапроса.Отбор.Добавить();
		
		ПостроительЗапроса.Выполнить();	
		РезЗапроса 			   = ПостроительЗапроса.Результат;
		ДатаДляРасчетаПроср    = НачалоДня(Дата2);
		Если ВыводитьВремя Тогда
			Сообщить("Получен результат" + (ТекущаяДата()-ТекВремя));
		КонецЕсли;	
		
		ВыборкаДетальная 	   = РезЗапроса.Выбрать();
		Если ВыводитьВремя Тогда
			Сообщить("Полученв Выборка" + (ТекущаяДата()-ТекВремя));
		КонецЕсли;	
		
		ТекСтрока =  Неопределено;
		Пока ВыборкаДетальная.Следующий() Цикл
			ОбработкаПрерыванияПользователя();
			ИзмГруппировка = Ложь;
			Если ТекОрганизация <>ВыборкаДетальная.Организация Тогда
				ТекОрганизация  = ВыборкаДетальная.Организация;
				ИзмГруппировка = Истина;
			КонецЕсли;	
			
			Если ТекКонтрагент <>ВыборкаДетальная.Контрагент Тогда
				ТекКонтрагент  = ВыборкаДетальная.Контрагент;
				ИзмГруппировка = Истина;
			КонецЕсли;	
			
			Если ТекДоговорКонтрагента <> ВыборкаДетальная.ДоговорКонтрагента Тогда
				ТекДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
				ИзмГруппировка 		 = Истина;
			КонецЕсли;	
			
			//Если ТекВалюта <> ВыборкаДетальная.Валюта Тогда
			//	ТекВалюта       = ВыборкаДетальная.Валюта;
			//	ИзмГруппировка = Истина;
			//КонецЕсли;	
			
			Если ИзмГруппировка Тогда
				ИтогКонОст 	   	   = ВыборкаДетальная.ПриходКон - ВыборкаДетальная.РасходКон;
				
				ИтогоРасход  	   = ВыборкаДетальная.РасходКон;
				ИтогоПриход  	   = ВыборкаДетальная.ПриходКон;
				
				ИтогоРасходНач   = ВыборкаДетальная.РасходНач;
				ИтогоПриходНач   = ВыборкаДетальная.ПриходНач;
				
				ИтогНачОст 		= ИтогоПриходНач - ИтогоРасходНач;
				
				ЗнакКонОст  	   = ?(ИтогКонОст > 0,1,-1);
				ЗнакНачОст  	   = ?(ИтогНачОст > 0,1,-1);
				ИзмГруппировка 	= Ложь;
				Если Не ТаблИтоговаяРазвернуто Тогда
					ТекСтрока = ТаблИтого.Добавить();
				КонецЕсли;
			КонецЕсли; 
			
			КонОст = 0;
			НачОст = 0;
			Приход = 0;
			Расход = 0;
			
			Если ЗнакКонОст = 1 Тогда
				КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
				ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
			Иначе // знак -1
				КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
				ИтогоПриход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
			КонецЕсли;	  
			
			Если ЗнакНачОст = 1 Тогда
				НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
				ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
			Иначе	
				НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
				ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
			КонецЕсли;
			
			Если ВыборкаДетальная.Дата < Дата1 Тогда
				Приход = 0;
				Расход = 0;
			ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
				Приход = ВыборкаДетальная.Приход;
				Расход = ВыборкаДетальная.Расход;
				НачОст = 0;
			КонецЕсли;	   
			
			Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
				продолжить;
			КонецЕсли;  
			
			Погашено   = 0;
			ДатаОплаты  = '00010101';
			Если Приход > 0 или НачОст > 0 или КонОст > 0 Тогда
				ДатаОплаты   =  ВыборкаДетальная.ДатаОплаты;
				Если ДатаОплаты  = '00010101' Тогда
					ДатаОплаты = ВыборкаДетальная.Дата;
				КонецЕсли;	  
				Погашено = НачОст+Приход-КонОст;
			КонецЕсли; 
			
			ДнейПросрочено = 0;
			Если ДатаОплаты<>'00010101' и ДатаОплаты < ДатаДляРасчетаПроср и КонОст >0 Тогда
				ДнейПросрочено = (ДатаДляРасчетаПроср-НачалоДня(ДатаОплаты))/(3600*24);
			КонецЕсли; 
			
			Отсрочка 		 = 0;
			Если  ДатаОплаты <> '00010101' и (НачОст >0 или Приход>0 или КонОст > 0) Тогда
				Отсрочка    = (НачалоДня(ДатаОплаты) - НачалоДня(ВыборкаДетальная.Дата))/(3600*24);
			КонецЕсли;	  
			
			
			Если ТаблИтоговаяРазвернуто Тогда
				НоваяСтрока 	   				  = ТаблИтого.Добавить();
				НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
				НоваяСтрока.ДатаОплаты		  	  = ДатаОплаты; //?(Приход>0 или НачОст>0,ВыборкаДетальная.ДатаОплаты,'00010101');
				НоваяСтрока.Регистратор 		  = ВыборкаДетальная.Регистратор;
				НоваяСтрока.ДнейПросрочено	  	  = ДнейПросрочено;
			Иначе
				НоваяСтрока 					  = ТекСтрока;
			КонецЕсли;
			
			НоваяСтрока.Организация		  = ВыборкаДетальная.Организация;
			НоваяСтрока.Контрагент		  = ВыборкаДетальная.Контрагент;
			НоваяСтрока.ДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
			
			Если ДнейПросрочено > 0 Тогда
				НоваяСтрока.Просрочено			  = НоваяСтрока.Просрочено + КонОст;
			КонецЕсли;	  
			
			НоваяСтрока.ПроцентОтгрузки 	  = ВыборкаДетальная.ПроцентОтгрузки;
			Если НоваяСтрока.ПроцентОтгрузки 	<= 0 и (Приход > 0 или НачОст >0) Тогда
				НоваяСтрока.ПроцентОтгрузки   = 100;
			КонецЕсли;	
			НоваяСтрока.Отсрочка			  = Отсрочка;
			
			НоваяСтрока.НачОст			  = НоваяСтрока.НачОст + НачОст;
			НоваяСтрока.Приход			  = НоваяСтрока.Приход + Приход;
			НоваяСтрока.Расход			  = НоваяСтрока.Расход + Расход;
			НоваяСтрока.КонОст			  = НоваяСтрока.КонОст + КонОст;
			НоваяСтрока.Погашено 			  = НоваяСтрока.Погашено + Погашено;
			
		КонецЦикла; 
		Если ВыводитьВремя Тогда
			Сообщить("Обсчет дебиторки "+(ТекущаяДата()-ТекВремя));
		КонецЕсли;	
		возврат ТаблИтого;
	КонецФункции	
	
	Процедура ДобавитьРасчВТаблИтого(ТаблРасч,ТаблИтого,ВсегоРасходНач,ВсегоПриходНач,ВсегоРасходКон,ВсегоПриходКон,Дата1,Дата2,ТаблИтоговаяРазвернуто);
		Если ТаблРасч.Количество() = 0 Тогда
			возврат;
		КонецЕсли;	
		
		ЗнакКонОст = ?(ВсегоПриходКон-ВсегоРасходКон>0,1,-1);
		ЗнакНачОст = ?(ВсегоПриходНач-ВсегоРасходНач>0,1,-1);
		
		ИтогоРасход	   =  ВсегоРасходКон;
		ИтогоПриход    =  ВсегоПриходКон;
		
		ИтогоРасходНач 		= ВсегоРасходНач; 
		ИтогоПриходНач 		= ВсегоПриходНач;
		ДатаДляРасчетаПроср = НачалоДня(Дата2);
		
		НСТаблИтого  		= Неопределено;
		
		Для Каждого ТекСтрока Из ТаблРасч Цикл
			КонОст = 0;
			НачОст = 0;
			Приход = 0;
			Расход = 0;
			
			Если ЗнакКонОст = 1 Тогда
				КонОст	      = Макс(ТекСтрока.Приход - ИтогоРасход,0);
				ИтогоРасход    = Макс(ИтогоРасход - ТекСтрока.Приход,0);
			Иначе // знак -1
				КонОст	      = Макс(ТекСтрока.Расход - ИтогоПриход,0)*-1;
				ИтогоПриход    = Макс(ИтогоПриход 	   - ТекСтрока.Расход,0);
			КонецЕсли;	  
			
			Если ЗнакНачОст = 1 Тогда
				НачОст 	   	   = Макс(ТекСтрока.Приход - ИтогоРасходНач,0);
				ИтогоРасходНач = Макс(ИтогоРасходНач - ТекСтрока.Приход,0);
			Иначе	
				НачОст 	   	   = Макс(ТекСтрока.Расход - ИтогоПриходНач,0)*-1;
				ИтогоПриходНач = Макс(ИтогоПриходНач 	- ТекСтрока.Расход,0);
			КонецЕсли;
			
			Если ТекСтрока.Дата < Дата1 Тогда
				Приход = 0;
				Расход = 0;
			ИначеЕсли ТекСтрока.Дата <= Дата2 Тогда
				Приход = ТекСтрока.Приход;
				Расход = ТекСтрока.Расход;
				НачОст = 0;
			КонецЕсли;	   
			
			Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
				продолжить;
			КонецЕсли;  
			
			Погашено   = 0;
			ДатаОплаты  = '00010101';
			Если Приход > 0 или НачОст > 0 или КонОст > 0 Тогда
				ДатаОплаты   =  ТекСтрока.ДатаОплаты;
				Если ДатаОплаты  = '00010101' Тогда
					ДатаОплаты = ТекСтрока.Дата;
				КонецЕсли;	  
				Погашено = НачОст+Приход-КонОст;
			КонецЕсли; 
			
			ДнейПросрочено = 0;
			Если ДатаОплаты<>'00010101' и ДатаОплаты < ДатаДляРасчетаПроср и КонОст >0 Тогда
				ДнейПросрочено = (ДатаДляРасчетаПроср-НачалоДня(ДатаОплаты))/(3600*24);
			КонецЕсли; 
			
			Отсрочка 		 = 0;
			Если  ДатаОплаты <> '00010101' и (НачОст >0 или Приход>0 или КонОст > 0) Тогда
				Отсрочка    = (НачалоДня(ДатаОплаты) - НачалоДня(ТекСтрока.Дата))/(3600*24);
			КонецЕсли;
			
			Если ТаблИтоговаяРазвернуто Тогда
				НоваяСтрока 	   				  = ТаблИтого.Добавить();
				НоваяСтрока.Дата 				  = ТекСтрока.Дата;
				НоваяСтрока.ДатаОплаты		  	  = ДатаОплаты; //?(Приход>0 или НачОст>0,ВыборкаДетальная.ДатаОплаты,'00010101');
				НоваяСтрока.Регистратор 		  = ТекСтрока.Регистратор;
				НоваяСтрока.ДнейПросрочено	  	  = ДнейПросрочено;
			Иначе
				Если НСТаблИтого = Неопределено Тогда
					НСТаблИтого = ТаблИтого.Добавить();
				КонецЕсли;	
				НоваяСтрока 					  = НСТаблИтого;
			КонецЕсли;
			
			НоваяСтрока.Организация		  = ТекСтрока.Организация;
			НоваяСтрока.Контрагент		  = ТекСтрока.Контрагент;
			НоваяСтрока.ДоговорКонтрагента  = ТекСтрока.ДоговорКонтрагента;
			
			Если ДнейПросрочено > 0 Тогда
				НоваяСтрока.Просрочено	  = НоваяСтрока.Просрочено + КонОст;
			КонецЕсли;	  
			
			НоваяСтрока.ПроцентОтгрузки 	  = ТекСтрока.ПроцентОтгрузки;
			Если НоваяСтрока.ПроцентОтгрузки 	<= 0 и (Приход > 0 или НачОст >0) Тогда
				НоваяСтрока.ПроцентОтгрузки   = 100;
			КонецЕсли;	
			НоваяСтрока.Отсрочка			  = Отсрочка;
			
			НоваяСтрока.НачОст			  = НоваяСтрока.НачОст + НачОст;
			НоваяСтрока.Приход			  = НоваяСтрока.Приход + Приход;
			НоваяСтрока.Расход			  = НоваяСтрока.Расход + Расход;
			НоваяСтрока.КонОст			  = НоваяСтрока.КонОст + КонОст;
			НоваяСтрока.Погашено 			  = НоваяСтрока.Погашено + Погашено;
			НоваяСтрока.ПериодПогашения      = ТекСтрока.ПериодПогашения;
			
			
		КонецЦикла;	
		ТаблРасч.Очистить();
	КонецПроцедуры	
	
	Функция ПолучитьРасчитаннуюДебиторку()
		
		ОписЧисла = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
		ОписДата  = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
		
		ТаблИтого = Новый ТаблицаЗначений;
		ТаблИтого.Колонки.Добавить("Дата",ОписДата);
		ТаблИтого.Колонки.Добавить("ДатаОплаты",ОписДата);
		ТаблИтого.Колонки.Добавить("ДнейПросрочено",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
		ТаблИтого.Колонки.Добавить("ПериодПогашения",ОписДата);
		
		ТаблИтого.Колонки.Добавить("Отсрочка",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
		ТаблИтого.Колонки.Добавить("ПроцентОтгрузки",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		
		
		ТаблИтого.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблИтого.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблИтого.Колонки.Добавить("ДоговорКонтрагента",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблИтого.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблИтого.Колонки.Добавить("Регистратор",Документы.ТипВсеСсылки());
		
		
		ТаблИтого.Колонки.Добавить("НачОст",ОписЧисла);
		ТаблИтого.Колонки.Добавить("Приход",ОписЧисла);
		ТаблИтого.Колонки.Добавить("Расход",ОписЧисла);
		ТаблИтого.Колонки.Добавить("КонОст",ОписЧисла);
		ТаблИтого.Колонки.Добавить("Погашено",ОписЧисла);
		ТаблИтого.Колонки.Добавить("Просрочено",ОписЧисла);
		
		//ТаблРасч 
		ТаблРасч   = Новый ТаблицаЗначений;
		ТаблРасч.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблРасч.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблРасч.Колонки.Добавить("ДоговорКонтрагента",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблРасч.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблРасч.Колонки.Добавить("Регистратор",Документы.ТипВсеСсылки());
		
		ТаблРасч.Колонки.Добавить("Дата",ОписДата);
		ТаблРасч.Колонки.Добавить("ДатаОплаты",ОписДата);
		ТаблРасч.Колонки.Добавить("ПериодПогашения",ОписДата);
		ТаблРасч.Колонки.Добавить("ДнейПросрочено",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
		
		ТаблРасч.Колонки.Добавить("Отсрочка",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
		ТаблРасч.Колонки.Добавить("ПроцентОтгрузки",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		
		ТаблРасч.Колонки.Добавить("Приход",ОписЧисла);
		ТаблРасч.Колонки.Добавить("Расход",ОписЧисла);
		
		
		
		Дата1 = НачалоДня(УниверсальныйОтчет.ДатаНач);
		Дата2 = КонецДня(УниверсальныйОтчет.ДатаКон);
		
		ТекВремя = ТекущаяДата();
		
		ПостроительЗапроса = Новый ПостроительЗапроса;
		ПостроительЗапроса.Текст = ПолучитьТекстЗапроса();
		
		ПостроительЗапроса.Параметры.Вставить("Дата1",Дата1);
		ПостроительЗапроса.Параметры.Вставить("Дата2",Дата2);
		ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
		
		МассивВидовДоговоров = Новый Массив;
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		ПостроительЗапроса.Параметры.Вставить("ВидДоговора",МассивВидовДоговоров);
		
		ДопустимыеОтборы 	=  Новый Массив;
		ДопустимыеОтборы.Добавить("договорконтрагента");
		ДопустимыеОтборы.Добавить("контрагент");
		ДопустимыеОтборы.Добавить("организация");
		ДопустимыеОтборы.Добавить("менеджерпокупателя");
		ДопустимыеОтборы.Добавить("ценоваягруппаконтрагента");
		ДопустимыеОтборы.Добавить("каналтовародвижения");
		ДопустимыеОтборы.Добавить("валютавзаиморасчетов");
		ДопустимыеОтборы.Добавить("проект");
		
		
		
		ТекОрганизация 		   = Неопределено;
		ТекКонтрагент  		   = Неопределено;
		ТекДоговорКонтрагента  = Неопределено;
		ТекВалюта			   = Неопределено;
		
		
		
		Для каждого ТекОтбор ИЗ УниверсальныйОтчет.ПостроительОтчета.Отбор Цикл
			ПутьКДанным = 	НРег(ТекОтбор.ПутьКДанным);
			Если ПустаяСтрока(ПутьКДанным) Тогда
				продолжить;
			КонецЕсли;	
			Нашли = Ложь;
			Для Каждого ТекЭл Из ДопустимыеОтборы Цикл
				Если СтрДлина(ТекЭл) = СтрДлина(ПутьКДанным) и Лев(ПутьКДанным,СтрДлина(ТекЭл)) = ТекЭл Тогда
					Нашли = Истина;
					прервать;
				ИначеЕсли Лев(ПутьКДанным,СтрДлина(ТекЭл)+1) = ТекЭл+"."  Тогда
					Нашли = Истина;
					прервать;
				КонецЕсли;	
			КонеЦцикла;	
			Если Не Нашли Тогда продолжить; КонецЕсли;
			Если ТекОтбор.Использование Тогда
				НашОтбор = ПостроительЗапроса.Отбор.Добавить(ТекОтбор.ПутьКданным,ТекОтбор.Имя,ТекОтбор.Представление);
				НашОтбор.Использование  = ТекОтбор.Использование;
				НашОтбор.ВидСравнения   = ТекОтбор.ВидСравнения;
				Если ТипЗнч(ТекОтбор.Значение)  = Тип("СписокЗначений") Тогда
					Список = Новый СписокЗначений;
					Список.ЗагрузитьЗначения(ТекОтбор.Значение.ВыгрузитьЗначения());
					НашОтбор.Значение       = Список;
				Иначе
					НашОтбор.Значение       = ТекОтбор.Значение;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
		
		//	ПостроительЗапроса.Отбор.Добавить();
		
		ПостроительЗапроса.Выполнить();	
		РезЗапроса 			   = ПостроительЗапроса.Результат;
		ДатаДляРасчетаПроср    = НачалоДня(Дата2);
		Если ВыводитьВремя Тогда
			Сообщить("Получен результат" + (ТекущаяДата()-ТекВремя));
		КонецЕсли;	
		
		ВыборкаДетальная 	   = РезЗапроса.Выбрать();
		Если ВыводитьВремя Тогда
			Сообщить("Полученв Выборка" + (ТекущаяДата()-ТекВремя));
		КонецЕсли;	
		
		ВсегоРасходНач    = 0;
		ВсегоПриходНач    = 0;
		ВсегоРасходКон    = 0;
		ВсегоПриходКон	= 0;
		
		
		ТекСтрока =  Неопределено;
		Пока ВыборкаДетальная.Следующий() Цикл
			ОбработкаПрерыванияПользователя();
			ИзмГруппировка = Ложь;
			Если ТекОрганизация <>ВыборкаДетальная.Организация Тогда
				ТекОрганизация  = ВыборкаДетальная.Организация;
				ИзмГруппировка = Истина;
			КонецЕсли;	
			
			Если ТекКонтрагент <>ВыборкаДетальная.Контрагент Тогда
				ТекКонтрагент  = ВыборкаДетальная.Контрагент;
				ИзмГруппировка = Истина;
			КонецЕсли;	
			
			Если ТекДоговорКонтрагента <> ВыборкаДетальная.ДоговорКонтрагента Тогда
				ТекДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
				ИзмГруппировка 		 = Истина;
			КонецЕсли;	
			
			Если ИзмГруппировка Тогда
				
				
				ДобавитьРасчВТаблИтого(ТаблРасч,ТаблИтого,ВсегоРасходНач,ВсегоПриходНач,ВсегоРасходКон,ВсегоПриходКон,Дата1,Дата2,ТаблИтоговаяРазвернуто);
				
				ТаблРасч.Очистить();
				ВсегоРасходНач    = 0;
				ВсегоПриходНач    = 0;
				ВсегоРасходКон    = 0;
				ВсегоПриходКон	= 0;
				ИзмГруппировка 	= Ложь;
				
			КонецЕсли; 
			
			Приход = ВыборкаДетальная.Приход;
			Расход = ВыборкаДетальная.Расход;
			
			Если (Приход = 0 и Расход = 0) или (Приход = Расход) Тогда
				продолжить;
			КонецЕсли;
			Если Приход > 0 и Расход > 0 Тогда
				Если Приход > Расход Тогда
					Приход = Приход-Расход;
					Расход = 0;
				Иначе	  
					Расход = Расход - Приход;
					Приход = 0;
				КонецЕсли; 
			КонецЕсли; 
			
			ДатаДок = ВыборкаДетальная.Дата;
			
			Если ДатаДок < Дата1 Тогда
				ВсегоРасходНач    = ВсегоРасходНач+Расход;
				ВсегоПриходНач    = ВсегоПриходНач+Приход;
				ВсегоРасходКон    = ВсегоРасходКон+Расход;
				ВсегоПриходКон    = ВсегоПриходКон+Приход;
			ИначеЕсли ДатаДок <= Дата2 Тогда
				ВсегоРасходКон    = ВсегоРасходКон+Расход;
				ВсегоПриходКон    = ВсегоПриходКон+Приход;
			Иначе
				продолжить; //когда это интересно возможно	  
			КонецЕсли; 
			
			НС					    = ТаблРасч.Добавить();
			НС.Организация			= ВыборкаДетальная.Организация;
			НС.Контрагент				= ВыборкаДетальная.Контрагент;
			НС.ДоговорКонтрагента		= ВыборкаДетальная.ДоговорКонтрагента;
			
			НС.Регистратор		    = ВыборкаДетальная.Регистратор;
			НС.ПериодПогашения  		= ВыборкаДетальная.ПериодПогашения;
			
			НС.Дата					= ДатаДок;
			НС.ДатаОплаты				= ВыборкаДетальная.ДатаОплаты;
			НС.ПроцентОтгрузки		= ВыборкаДетальная.ПроцентОтгрузки;
			
			НС.Приход				= Приход;
			НС.Расход				= Расход;
			продолжить;	  
		КонецЦикла; 
		
		ДобавитьРасчВТаблИтого(ТаблРасч,ТаблИтого,ВсегоРасходНач,ВсегоПриходНач,ВсегоРасходКон,ВсегоПриходКон,Дата1,Дата2,ТаблИтоговаяРазвернуто);
		
		Если ВыводитьВремя Тогда
			Сообщить("Обсчет дебиторки "+(ТекущаяДата()-ТекВремя));
		КонецЕсли;	
		
		возврат ТаблИтого;
	КонецФункции	
	
	
	Функция ОпределитьСвернутоРазвернуто(ПострОтчета)
		
		Результат = Ложь;
		МассПолей = Новый Массив;
		// влюбом случае рассчитывать по детальным записям
		МассПолей.Добавить("Регистратор");
		Для Каждого ТекЭлем Из МассПолей Цикл
			Если ПострОтчета.ВыбранныеПоля.Найти(ТекЭлем) <> Неопределено Тогда
				возврат Истина;
			КонецЕслИ;
			Если ПострОтчета.ИзмеренияСтроки.Найти(ТекЭлем) <> Неопределено Тогда
				возврат Истина;
			КонецЕслИ;
		КонецЦикла;	  
		
		//обязателен признак детальные записи
		Если Не УниверсальныйОтчет.ВыводитьДетальныеЗаписи  Тогда
			возврат Ложь;
		КонецЕсли;
		
		МассПолей.Очистить();
		МассПолей.Добавить("Дата");
		МассПолей.Добавить("ДатаОплаты");
		МассПолей.Добавить("ДнейПросрочено");
		
		Для Каждого ТекЭлем Из МассПолей Цикл
			Если ПострОтчета.ВыбранныеПоля.Найти(ТекЭлем) <> Неопределено Тогда
				возврат Истина;
			КонецЕслИ;
			Если ПострОтчета.ИзмеренияСтроки.Найти(ТекЭлем) <> Неопределено Тогда
				возврат Истина;
			КонецЕслИ;
		КонецЦикла;	  
		возврат ложь;
	КонецФункции
	
	
	Процедура ЗаполнитьОформление(Заполняем,Исходная)
		
		Заполняем.ЦветТекста = Исходная.ЦветТекста;
		Заполняем.ЦветФона   = Исходная.ЦветФона;
		Заполняем.ЦветУзора  = Исходная.ЦветУзора;
		Заполняем.ЦветРамки  = Исходная.ЦветРамки;
		
		Заполняем.ГраницаСверху  = Исходная.ГраницаСверху;
		Заполняем.ГраницаСлева  = Исходная.ГраницаСлева;
		Заполняем.ГраницаСправа = Исходная.ГраницаСправа;
		Заполняем.ГраницаСнизу  = Исходная.ГраницаСнизу;
		
		Заполняем.Шрифт		  = Исходная.Шрифт;
		Заполняем.Узор		  	  = Исходная.Узор;
		Заполняем.ВертикальноеПоложение = ВертикальноеПоложение.Центр; 
		Заполняем.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить
		
	КонецПроцедуры
	
	
	Процедура ЗаполнитьПоСтруктуреУслОформление(Заполняем,СтруктУсловнОформления,ПутьКДанным="")
		Если СтруктУсловнОформления <> Неопределено Тогда
			Если ПутьКДанным <> "" Тогда
				НайдЗнч  = СтруктУсловнОформления.Получить(ПутьКДанным); //Неопределено;
				
				//Если СтруктУсловнОформления.Свойство(ПутьКДанным,НайдЗнч) Тогда
				Если НайдЗнч <> Неопределено  Тогда
					Если НайдЗнч.АвтоОтступ.Использование Тогда
						Заполняем.АвтоОтступ = НайдЗнч.АвтоОтступ.Значение;
					КонецЕсли;	
					Если  НайдЗнч.ВертикальноеПоложение.Использование  Тогда
						Заполняем.ВертикальноеПоложение = НайдЗнч.ВертикальноеПоложение.Значение;
					КонецЕсли;	
					Если НайдЗнч.ГоризонтальноеПоложение.Использование Тогда
						Заполняем.ГоризонтальноеПоложение  = НайдЗнч.ГоризонтальноеПоложение.Значение;
					КонецЕсли;	
					Если НайдЗнч.ОриентацияТекста.Использование Тогда
						Заполняем.ОриентацияТекста = НайдЗнч.ОриентацияТекста.Значение;
					КонецЕсли;	
					Если НайдЗнч.Отступ.Использование Тогда
						Заполняем.Отступ = НайдЗнч.Отступ.Значение;
					КонецЕсли;	
					Если НайдЗнч.Текст.Использование Тогда
						Заполняем.Текст = НайдЗнч.Текст.Значение;
					КонецЕсли;	
					Если НайдЗнч.Формат.Использование Тогда
						Заполняем.Формат = НайдЗнч.Формат.Значение;
					КонецЕсли;	
					Если НайдЗнч.ЦветТекста.Использование Тогда
						Заполняем.ЦветТекста = НайдЗнч.ЦветТекста.Значение;
					КонецЕсли;	
					Если НайдЗнч.ЦветФона.Использование Тогда
						Заполняем.ЦветФона = НайдЗнч.ЦветФона.Значение;
					КонецЕсли;	  
					Если НайдЗнч.Шрифт.Использование Тогда
						Заполняем.Шрифт = НайдЗнч.Шрифт.Значение;
					КонецЕсли;		
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
	КонецПроцедуры	
	
	Процедура ЗаполнитьОформлениеСУчетомОформления(Заполняем,Исходная,СтруктУсловнОформления,ПутьКДанным="")
		
		Заполняем.ЦветТекста = Исходная.ЦветТекста;
		Заполняем.ЦветФона   = Исходная.ЦветФона;
		Заполняем.ЦветУзора  = Исходная.ЦветУзора;
		Заполняем.ЦветРамки  = Исходная.ЦветРамки;
		
		Заполняем.ГраницаСверху  = Исходная.ГраницаСверху;
		Заполняем.ГраницаСлева  = Исходная.ГраницаСлева;
		Заполняем.ГраницаСправа = Исходная.ГраницаСправа;
		Заполняем.ГраницаСнизу  = Исходная.ГраницаСнизу;
		
		Заполняем.Шрифт		  = Исходная.Шрифт;
		Заполняем.Узор		  	  = Исходная.Узор;
		Заполняем.ВертикальноеПоложение = ВертикальноеПоложение.Центр; 
		Заполняем.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		
		ЗаполнитьПоСтруктуреУслОформление(Заполняем,СтруктУсловнОформления,ПутьКДанным);
	КонецПроцедуры
	
	Процедура ЗаполнитьОформлениеГруппировки(Заполняем,Исходная1,Исходная2,НомерГруппировки,СтруктУсловнОформления,ПутьКДанным="")
		Если НомерГруппировки = 1 Тогда
			Исходная = Исходная1;
		Иначе
			Исходная = Исходная2;
		КонецЕсли;
		
		Заполняем.ЦветТекста = Исходная.ЦветТекста;
		Заполняем.ЦветФона   = Исходная.ЦветФона;
		Заполняем.ЦветУзора  = Исходная.ЦветУзора;
		Заполняем.ЦветРамки  = Исходная.ЦветРамки;
		
		Заполняем.ГраницаСверху  = Исходная.ГраницаСверху;
		Заполняем.ГраницаСлева  = Исходная.ГраницаСлева;
		Заполняем.ГраницаСправа = Исходная.ГраницаСправа;
		Заполняем.ГраницаСнизу  = Исходная.ГраницаСнизу;
		
		Заполняем.Шрифт		  = Исходная.Шрифт;
		Заполняем.Узор		  	  = Исходная.Узор;
		Заполняем.ВертикальноеПоложение = ВертикальноеПоложение.Центр; 
		Заполняем.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		
		ЗаполнитьПоСтруктуреУслОформление(Заполняем,СтруктУсловнОформления,ПутьКДанным);
	КонецПроцедуры
	
	Функция ОпределитьВозможностьРасшировки(Имя,ПостроительИтоговый)
		Поле = ПостроительИтоговый.ДоступныеПоля.Найти(Имя);
		Если Поле <> Неопределено Тогда
			Типы = Поле.типЗначения.Типы();
			Если Типы.Количество() = 1 Тогда
				Если Типы[0] = Тип("Строка") Тогда
					возврат Ложь;
				ИначеЕсли Типы[0] = Тип("Число") Тогда
					возврат Ложь;
				ИначеЕсли Типы[0] = Тип("Дата") Тогда
					возврат Ложь;
				КонецЕслИ;	
			КонецЕсли;	
		КонецЕсли;	
		возврат Истина;
	КонецФункции	
	
	Функция ПолучитьИмяИлиПредставление(_Макет,ИмяОбласти,Имя)
		ТекОбласть = _Макет.ПолучитьОбласть(ИмяОбласти);
		Если ТекОбласть = Неопределено Тогда
			возврат Имя;
		Иначе
			Попытка
				//ТекОбласть.Параметры.Установить(Имя+"Представление",1);
				Знч = ТекОбласть.Параметры[Имя+"Представление"];
				возврат Имя+"Представление";
			исключение	
				возврат Имя;	
			КонецПопытки;		
		КонецЕсли;	
	КонецФункции	
	
	Процедура ОформитьМакетИхреньМакет(РезЗапрос,ПостроительИтоговый,ПолучаемыйМакет)
		/// получаем оформленный макет
		
		МакетОформления = ПолучитьМакетОформления(?(УниверсальныйОтчет.ВариантОформления = Неопределено, СтандартноеОформление.Интерфейс, УниверсальныйОтчет.ВариантОформления));
		
		ОбластьШапкаТаблицы = МакетОформления.Области.Найти("ШапкаТаблицы");
		
		Если ТипЗнч(ОбластьШапкаТаблицы) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
			ОбластьШапкаТаблицы.Шрифт = Новый Шрифт(ОбластьШапкаТаблицы.Шрифт,, 8);
			
		КонецЕсли;
		
		ОбластьЗаголовок = МакетОформления.Области.Найти("Заголовок");
		
		Если ТипЗнч(ОбластьЗаголовок) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			
			ОбластьЗаголовок.Шрифт = Новый Шрифт(ОбластьШапкаТаблицы.Шрифт,, 8, Ложь, Ложь, Ложь);
			
		КонецЕсли;
		
		//МакетОформления.Показать();
		
		ТабМакет = Новый ТабличныйДокумент;
		
		//1 определяем количество групировок
		КолИзмСтрок  =  ПостроительИтоговый.ИзмеренияСтроки.Количество();
		ПостроительИтоговый.Макет = Неопределено;
		МакетДляВычисленийПараметров = ПостроительИтоговый.Макет;
		//МакетДляВычисленийПараметров.Показать();
		
		//СоотвествиеПолей = Новый Соответствие;
		//Для Каждого ТекИзмер Из ПостроительИтоговый.ИзмеренияСтроки Цикл
		//		//ТекИзмер.
		//	
		//КонецЦикла;	
		
		
		//ПостроительИтоговый.Макет.Показать();
		
		
		
		
		СтруктУсловнОформления = Новый Соответствие;
		Для Каждого ТекЭлемент Из ПостроительИтоговый.УсловноеОформление Цикл
			Если ТекЭлемент.Использование Тогда
				Для Каждого ТекОбласть  Из ТекЭлемент.Область Цикл
					СтруктУсловнОформления.Вставить(ТекОбласть.ПутьКданным,ТекЭлемент.Оформление);
				КонецЦикла;	
			КонецЕсли;	
		КонеЦцикла;	
		
		
		НачСтрока  = 4;
		Начинаем   = НачСтрока;
		НачСтолбец = 2;
		БазоваяШирина = 22.75;
		БазаоваШиринаПоказ 	  = 15.00;
		БазоваяШиринаДеталей  = 19.00;
		
		ШиринаДоСтолбца = 2;
		
		//1. Сделаем ширину до
		Для к = 1 По НачСтолбец Цикл
			ТекОбласть = ТабМакет.Область(,к,,к);
			ТекОбласть.ШиринаКолонки = ШиринаДоСтолбца; 
		КонецЦикла;	
		//ТабМакет.Область(,НачСтолбец,,НачСтолбец).ШиринаКолонки = 34.63;
		
		//2. Рисуем шапку
		//определяем реквизиты до и после группировок и совмещенные
		ТаблРеквГруппДо = Новый ТаблицаЗначений;
		ТаблРеквГруппДо.Колонки.Добавить("Имя");
		ТаблРеквГруппДо.Колонки.Добавить("ИмяГруппировки");
		ТаблРеквГруппДо.Колонки.Добавить("Поле");
		ТаблРеквГруппДо.Колонки.Добавить("Параметр");
		ТаблРеквГруппДо.Колонки.Добавить("ПолеГруппировки");
		
		ТаблРеквГруппПосле  = ТаблРеквГруппДо.Скопировать();
		ТаблРеквГруппВместе = ТаблРеквГруппДо.Скопировать();
		ТаблРеквГруппВместе.Колонки.Добавить("Положение");
		
		ТаблДетЗаписей      = Новый ТаблицаЗначений;
		ТаблДетЗаписей.Колонки.Добавить("Имя");
		ТаблДетЗаписей.Колонки.Добавить("Поле");
		ТаблДетЗаписей.Колонки.Добавить("Параметр"); 
		
		СоответсвиеПарИзм = Новый Соответствие;
		Для Каждого ТекИзм Из ПостроительИтоговый.ИзмеренияСтроки Цикл
			СоответсвиеПарИзм.Вставить(ТекИзм.Имя,ПолучитьИмяИлиПредставление(МакетДляВычисленийПараметров,ТекИзм.Имя,ТекИзм.Имя));
		КонецЦикла;	
		
		
		Если УниверсальныйОтчет.мРазмещениеПоложениеВыбранныхПолей <> Неопределено Тогда
			Для Каждого ТекПолеДет  Из УниверсальныйОтчет.мРазмещениеПоложениеВыбранныхПолей Цикл
				_ТекПоле  = ПостроительИтоговый.ВыбранныеПоля.Найти(ТекПолеДет.Ключ);
				Если _ТекПоле = Неопределено Тогда
					продолжить;
				КонецЕсли;	
				
				ПутьКданным = _ТекПоле.ПутьКДанным;
				Если ПустаяСтрока(ПутьКданным) Тогда
					//пока необрабатываем
					продолжить;
				КонецЕсли;	
				
				ПозТочки = Найти(ПутьКданным,".");
				Если ПозТочки > 0 Тогда // вполне возможно реквизит группировки
					ВозмИмяГруппировки = Лев(ПутьКданным,ПозТочки-1);
					ПолеГруппировки 	= ПостроительИтоговый.ИзмеренияСтроки.Найти(ВозмИмяГруппировки);
					Если ПолеГруппировки <> Неопределено Тогда
						Если ТекПолеДет.Значение.Размещение = ТипРазмещенияРеквизитовИзмерений.Вместе 
							или ТекПолеДет.Значение.Размещение = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями Тогда
							//либо вместо группировки
							НС  	  			 = ТаблРеквГруппВместе.Добавить();
							НС.Имя  			 = _ТекПоле.Имя;
							НС.Поле 			 = _ТекПоле;
							НС.ИмяГруппировки  = ВозмИмяГруппировки;
							НС.ПолеГруппировки = ПолеГруппировки;
							НС.Положение	     = ТекПолеДет.Значение.Положение;
							НС.Параметр   	 = ПолучитьИмяИлиПредставление(МакетДляВычисленийПараметров,ПолеГруппировки.Имя,_ТекПоле.Имя);
							
						Иначе
							// Если 
							Если ТекПолеДет.Значение.Положение =  "После группировки" Тогда
								НС 	  			 = ТаблРеквГруппПосле.Добавить();
							Иначе
								НС 	  			 = ТаблРеквГруппДо.Добавить();
							КонецЕсли; 
							НС.Имя  			 = _ТекПоле.Имя;
							НС.Поле 			 = _ТекПоле;
							НС.ИмяГруппировки  = ВозмИмяГруппировки;
							НС.ПолеГруппировки = ПолеГруппировки;
							НС.Параметр   	 = ПолучитьИмяИлиПредставление(МакетДляВычисленийПараметров,ПолеГруппировки.Имя,_ТекПоле.Имя);
						КонецЕсли;	 
						
					Иначе //детальная запись
						Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи Тогда
							Поле = ПостроительИтоговый.ВыбранныеПоля.Найти(_ТекПоле.Имя);
							Если Поле <> Неопределено Тогда
								НС 	 = ТаблДетЗаписей.Добавить();
								НС.Имя  = Поле.Имя;
								НС.Поле = Поле;
							КонецЕсли;	
						КонецЕсли;	 
					КонецЕсли;	 
					//dgjkyt djpvj;yj 
				Иначе //только детальная запись
					Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи Тогда
						Поле = ПостроительИтоговый.ВыбранныеПоля.Найти(_ТекПоле.Имя);
						Если Поле <> Неопределено Тогда
							НС 	 = ТаблДетЗаписей.Добавить();
							НС.Имя  = Поле.Имя;
							НС.Поле = Поле;
							НС.Параметр   		= ПолучитьИмяИлиПредставление(МакетДляВычисленийПараметров,"Детали",Поле.Имя);
						КонецЕсли;	
					КонецЕсли;	 
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		
		//проверим детальные записи
		МаксСтрокШапки =1;
		Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи Тогда
			Если ТаблДетЗаписей.Количество()>0 Тогда
				МаксСтрокШапки = Макс(МаксСтрокШапки,1);
			КонецЕсли;	
		КонецЕсли;	
		//проверим показатели //пока делаем показатели вложен 2;
		//уровень
		УпровеньПоказ = 1;
		Для Каждого _ТекЗначение1 ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
			ТекСтроки = _ТекЗначение1.Строки;
			Для каждого _ТекЗначение2 Из _ТекЗначение1.Строки Цикл
				МаксСтрокШапки = Макс(МаксСтрокШапки,2);
				УпровеньПоказ = 2;
				прервать;
			КонецЦикла; 
		КонецЦикла;	
		
		Если ПостроительИтоговый.ИзмеренияСтроки.Количество() > 0 Тогда
			МаксСтрокШапки = Макс(МаксСтрокШапки,ПостроительИтоговый.ИзмеренияСтроки.Количество()
			+?(УниверсальныйОтчет.ВыводитьДетальныеЗаписи,1,0));
		КонецЕсли;	
		
		ТекКолонка = НачСтолбец;
		//2.1 измерения пройдемся
		//2.1.2 Выводим реквизиты группировок у которых положение пееред группировкой
		//
		ТекКолДеталей = 0;
		МакетШапкиТаблицы = МакетОформления.ПолучитьОбласть("ШапкаТаблицы").Область(1,,1);
		КолВоГруппировок = ПостроительИтоговый.ИзмеренияСтроки.Количество();
		Если КолВоГруппировок > 0 и ТаблРеквГруппДо.Количество() > 0 Тогда
			БылоЧтоТо = Ложь;
			Для каждого ТекСтрока Из ТаблРеквГруппДо Цикл
				Увеличиваем = 0;
				Для к = 1 По ПостроительИтоговый.ИзмеренияСтроки.Количество() Цикл
					ТекПоле 	= ПостроительИтоговый.ИзмеренияСтроки[к-1];
					ТекОбласть = ТабМакет.Область(Начинаем+к,ТекКолонка,Начинаем+к,ТекКолонка);
					Если ТекПоле.Имя = ТекСтрока.ИмяГруппировки Тогда
						ТекОбласть.Текст = ТекСтрока.Поле.Представление;
						Увеличиваем = 1;
					КонецЕсли; 
					ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
					//детали 
				КонецЦикла;	
				Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи и ТаблДетЗаписей.Количество()>0 и Увеличиваем>0 Тогда
					ТекОбласть		  = ТабМакет.Область(Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+1,ТекКолонка,Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+1,ТекКолонка);
					Если ТекКолДеталей < ТаблДетЗаписей.Количество() Тогда
						ТекОбласть.Текст  =	ТаблДетЗаписей[ТекКолДеталей].Поле.Представление;
						ТекКолДеталей 	  = ТекКолДеталей+1;
					КонецЕсли;	
					ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
				КонецЕсли;	
				ТекОбласть		  = ТабМакет.Область(,ТекКолонка,,ТекКолонка);			
				ТекОбласть.ШиринаКолонки = БазоваяШирина;
				ТекКолонка = ТекКолонка + Увеличиваем; 
				//фиксируем колонки 
				//22,75
			КонецЦикла;	
		КонецЕсли;	
		
		//2.1.3 Выводим сами измерениия
		Для к = 1 По ПостроительИтоговый.ИзмеренияСтроки.Количество() Цикл
			ТекПоле = ПостроительИтоговый.ИзмеренияСтроки[к-1];
			
			//начинаем заполнение
			НайдРекв = ТаблРеквГруппВместе.НайтиСтроки(Новый Структура("ИмяГруппировки",ТекПоле.Имя));
			ГрупировкаБудет = Истина;
			//Для м = 0 По НайдРекв.Количество() - 1 Цикл
			//	Если НайдРекв.Положение = "Вместо группировки" Тогда
			//   	 ГрупировкаБудет = Ложь;
			//	КонецЕсли; 
			//КонецЦикла; 
			
			//то что перед группировкой
			Зап = "";
			ЗаголовокГруппировки = "";
			Для м = 0 По НайдРекв.Количество() - 1 Цикл
				Если НайдРекв[м].Положение = "Перед группировкой" Тогда
					ЗаголовокГруппировки  = ЗаголовокГруппировки +Зап + НайдРекв[м].Поле.Представление;
					Зап = ", ";
				КонецЕсли; 
			КонецЦикла; 
			
			Для м = 0 По НайдРекв.Количество() - 1 Цикл
				Если НайдРекв[м].Положение = "Вместо группировки" Тогда
					ЗаголовокГруппировки  = ЗаголовокГруппировки +Зап +  НайдРекв[м].Поле.Представление;
					Зап = ", ";
					ГрупировкаБудет = Ложь;
				КонецЕсли; 
			КонецЦикла; 
			
			Если ГрупировкаБудет Тогда
				ЗаголовокГруппировки  = ЗаголовокГруппировки +Зап + ТекПоле.Представление;
				Зап = ", ";
			КонецЕсли;
			
			Для м = 0 По НайдРекв.Количество() - 1 Цикл
				Если НайдРекв[м].Положение = "После группировки" Тогда
					ЗаголовокГруппировки  = ЗаголовокГруппировки +Зап + НайдРекв[м].Поле.Представление;
					Зап = ", ";
				КонецЕсли; 
			КонецЦикла; 
			
			Если к =  ПостроительИтоговый.ИзмеренияСтроки.Количество() и ТаблДетЗаписей.Количество() = 0 Тогда
				ТекОбласть = ТабМакет.Область(Начинаем+к,ТекКолонка,Начинаем+МаксСтрокШапки,ТекКолонка);
				ТекОбласть.Объединить();
			Иначе
				ТекОбласть = ТабМакет.Область(Начинаем+к,ТекКолонка,Начинаем+к,ТекКолонка);
			КонецЕсли; 
			
			ТекОбласть.Текст 	= ЗаголовокГруппировки;
			ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
			
			ТекОбласть		  = ТабМакет.Область(,ТекКолонка,,ТекКолонка);			
			ТекОбласть.ШиринаКолонки = БазоваяШирина;
			
			//детали 
		КонецЦикла;	
		Если ПостроительИтоговый.ИзмеренияСтроки.Количество() > 0 Тогда
			Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи и ТаблДетЗаписей.Количество()>0 Тогда
				ТекОбласть = ТабМакет.Область(Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+1,ТекКолонка,Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+1,ТекКолонка);
				Если ТекКолДеталей < ТаблДетЗаписей.Количество() Тогда
					ТекОбласть.Текст  =	ТаблДетЗаписей[ТекКолДеталей].Поле.Представление;
					ТекКолДеталей 	  = ТекКолДеталей+1;
				КонецЕсли;	
				ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
			КонецЕсли;	
			ТекКолонка = ТекКолонка+1;
		КонецЕсли;	
		
		//2.1.4 Выводим реквизиты группировок у которых положение после группировки
		МакетШапкиТаблицы = МакетОформления.ПолучитьОбласть("ШапкаТаблицы").Область(1,,1);
		КолВоГруппировок = ПостроительИтоговый.ИзмеренияСтроки.Количество();
		Если КолВоГруппировок > 0 и ТаблРеквГруппПосле.Количество() > 0 Тогда
			БылоЧтоТо = Ложь;
			Для каждого ТекСтрока Из ТаблРеквГруппПосле Цикл
				Увеличиваем = 0;
				Для к = 1 По ПостроительИтоговый.ИзмеренияСтроки.Количество() Цикл
					ТекПоле 	= ПостроительИтоговый.ИзмеренияСтроки[к-1];
					ТекОбласть = ТабМакет.Область(Начинаем+к,ТекКолонка,Начинаем+к,ТекКолонка);
					Если ТекПоле.Имя = ТекСтрока.ИмяГруппировки Тогда
						ТекОбласть.Текст = ТекСтрока.Поле.Представление;
						Увеличиваем = 1;
					КонецЕсли; 
					ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
				КонецЦикла;	
				
				//детали 
				Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи и ТаблДетЗаписей.Количество()>0 и Увеличиваем > 0 Тогда
					ТекОбласть = ТабМакет.Область(Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+1,ТекКолонка,Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+1,ТекКолонка);
					Если ТекКолДеталей < ТаблДетЗаписей.Количество() Тогда
						ТекОбласть.Текст  =	ТаблДетЗаписей[ТекКолДеталей].Поле.Представление;
						ТекКолДеталей 	  = ТекКолДеталей+1;
					КонецЕсли;	
					ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
				КонецЕсли;	
				
				ТекОбласть		  = ТабМакет.Область(,ТекКолонка,,ТекКолонка);			
				ТекОбласть.ШиринаКолонки = БазоваяШирина;
				
				ТекКолонка = ТекКолонка + Увеличиваем; 
			КонецЦикла;	
		КонецЕсли;	
		
		//2.2. пройдемся по деталям
		Если ТекКолДеталей < ТаблДетЗаписей.Количество() Тогда
			Для м = ТекКолДеталей По ТаблДетЗаписей.Количество()-1 Цикл
				Для к = 1 По ПостроительИтоговый.ИзмеренияСтроки.Количество() Цикл
					ТекОбласть = ТабМакет.Область(Начинаем+к,ТекКолонка,Начинаем+к,ТекКолонка);
					ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
				КонецЦикла;	
				Если ПостроительИтоговый.ИзмеренияСтроки.Количество() = 0 Тогда
					Если МаксСтрокШапки > 1 Тогда
						ТекОбласть = ТабМакет.Область(Начинаем+1,ТекКолонка,Начинаем+МаксСтрокШапки,ТекКолонка);
						ТекОбласть.Объединить();
					Иначе
						ТекОбласть = ТабМакет.Область(Начинаем+1,ТекКолонка,Начинаем+1,ТекКолонка);
					КонецЕсли;
				Иначе
					ТекОбласть = ТабМакет.Область(Начинаем+к,ТекКолонка,Начинаем+к,ТекКолонка);
				КонецЕсли;	
				
				
				ТекОбласть.Текст = ТаблДетЗаписей[м].Поле.Представление;
				ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
				ТекКолДеталей = ТекКолДеталей + 1;
				ТекОбласть 	  = ТабМакет.Область(,ТекКолонка,,ТекКолонка);
				ТекОбласть.ШиринаКолонки = БазоваяШиринаДеталей;
				ТекКолонка    = ТекКолонка    + 1;
			КонецЦикла;	
		КонецЕсли;	
		
		//2.3 пошли по показателям
		Для Каждого _ТекЗначение1 ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
			Если _ТекЗначение1.Использование =  2 Тогда
				КолВоИспПодч = 0;
				Для каждого _ТекЗначение2 Из _ТекЗначение1.Строки Цикл
					Если _ТекЗначение2.Использование Тогда
						КолВоИспПодч = КолВоИспПодч+1;
					КонецЕсли;	  
				КонецЦикла; 
				Если КолВоИспПодч > 0 Тогда
					ТекОбласть = ТабМакет.Область(Начинаем+1,ТекКолонка,Начинаем+1,ТекКолонка+КолВоИспПодч-1);
					ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
					ТекОбласть.ГоризонтальноеПоложение 	= ГоризонтальноеПоложение.Центр; 
					
					ТекОбласть.Объединить();
					ТекОбласть.Текст   = _ТекЗначение1.Представление;
					///ТекОбласть = ТабМакет.Область(Начинаем+1,ТекКолонка,Начинаем+1,ТекКолонка);
					н = 0;
					Для каждого _ТекЗначение2 Из _ТекЗначение1.Строки Цикл
						Если _ТекЗначение2.Использование Тогда
							ТекОбласть  = ТабМакет.Область(Начинаем+2,ТекКолонка+н,Начинаем+МаксСтрокШапки,ТекКолонка+н);
							ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
							ТекОбласть.Объединить();
							ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр; 
							ТекОбласть.Текст    = _ТекЗначение2.Представление;
							ТекОбласть  = ТабМакет.Область(,ТекКолонка+н,,ТекКолонка+н);
							ТекОбласть.ШиринаКолонки = БазаоваШиринаПоказ;
							н = н + 1;
							//КолВоИспПодч = КолВоИспПодч+1;
						КонецЕсли;	  
					КонецЦикла; 
				КонецЕсли;	  
				//второй шаг проставляем столбцы
			КонецЕсли;	
		КонецЦикла;	
		
		//2.4 задаем имя области
		ТекОбласть  = ТабМакет.Область(Начинаем+1,,Начинаем+МаксСтрокШапки,);
		ТекОбласть.Имя = "ШапкаТаблицы";
		
		
		//3   Выводим групировки и детальные записи
		//3.1 групировки
		//
		Начинаем   = Начинаем+МаксСтрокШапки+1; 
		ТекКолонка = НачСтолбец;
		
		Если ПостроительИтоговый.ИзмеренияСтроки.Количество() > 0 Тогда
			МакетПервойГруппировки = МакетОформления.ПолучитьОбласть("ГруппировкаУровень1").Область(2,,2);
			МакетГруппировки       = МакетОформления.ПолучитьОбласть("Группировка").Область(1,,1);
			НомерГруппировки  	   = 0;
			Для Каждого ТекИзмерен Из ПостроительИтоговый.ИзмеренияСтроки Цикл
				НомерГруппировки = НомерГруппировки + 1;
				//а группировки до
				ТекКолонка = НачСтолбец;
				н = 0;
				Для каждого ТекСтрока Из ТаблРеквГруппДо Цикл
					ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки,ТекКолонка,Начинаем+НомерГруппировки,ТекКолонка);
					Если ТекСтрока.ИмяГруппировки  = ТекИзмерен.Имя Тогда
						ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
						ТекОбласть.Параметр	=  ТекСтрока.Параметр;//ТекСтрока.Имя;
						ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
						ТекОбласть.ПараметрРасшифровки      =  "Расшифровка";//ТекСтрока.Имя;
						ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,СтруктУсловнОформления,ТекСтрока.Поле.ПутьКДанным);  
					Иначе
						ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,Неопределено);  
					КонецЕсли;	  
					
					ТекКолонка = ТекКолонка+1;
				КонецЦикла;	  
				//б сама группировка
				//начинаем заполнение
				НайдРекв = ТаблРеквГруппВместе.НайтиСтроки(Новый Структура("ИмяГруппировки",ТекИзмерен.Имя));
				ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки,ТекКолонка,Начинаем+НомерГруппировки,ТекКолонка);
				ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,СтруктУсловнОформления,ТекИзмерен.ПутьКДанным);
				Если НайдРекв.Количество() > 0 или Истина Тогда
					ГрупировкаБудет = Истина;
					
					МассПарметров   = Новый Массив;
					Для м = 0 По НайдРекв.Количество() - 1 Цикл
						Если НайдРекв[м].Положение = "Перед группировкой" Тогда
							МассПарметров.Добавить(НайдРекв[м]);
						КонецЕсли; 
					КонецЦикла; 
					
					Для м = 0 По НайдРекв.Количество() - 1 Цикл
						Если НайдРекв[м].Положение = "Вместо группировки" Тогда
							МассПарметров.Добавить(НайдРекв[м]);
							ГрупировкаБудет = Ложь;
						КонецЕсли; 
					КонецЦикла; 
					
					Если ГрупировкаБудет Тогда
						//МассПарметров.Добавить(ТекИзмерен);
						МассПарметров.Добавить(Новый Структура("Поле,Параметр",ТекИзмерен,СоответсвиеПарИзм[ТекИзмерен.Имя]))
						
					КонецЕсли;	  
					
					Для м = 0 По НайдРекв.Количество() - 1 Цикл
						Если НайдРекв[м].Положение = "После группировки" Тогда
							МассПарметров.Добавить(НайдРекв[м]);
						КонецЕсли; 
					КонецЦикла; 
					
					
					Если  МассПарметров.Количество()= 1 Тогда
						ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
						ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
						ТекОбласть.ПараметрРасшифровки       = "Расшифровка"; //ТекИзмерен.Имя;
						Если ГрупировкаБудет Тогда
							ТекОбласть.Параметр	= МассПарметров[0].Параметр;
						Иначе	  
							ТекОбласть.Параметр	= МассПарметров[0].Параметр;
							
						КонецЕсли;
						ТекОбласть.АвтоОтступ = НомерГруппировки-1;
					Иначе
						шбл  = "";  Зап = "";
						для Каждого км из МассПарметров Цикл
							шбл	= шбл+Зап +"["+км.Параметр+"]";
							Зап = ", ";
						КонецЦикла;	  
						ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
						ТекОбласть.Параметр	= шбл;
						ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
						ТекОбласть.ПараметрРасшифровки       =  "Расшифровка"; //ТекИзмерен.Имя;
						ТекОбласть.АвтоОтступ = НомерГруппировки-1;
					КонецЕсли;	   
					ТекКолонка = ТекКолонка + 1;
				КонецЕсли; // группировка и реквизиты	   
				
				н = 0;
				Для каждого ТекСтрока Из ТаблРеквГруппПосле Цикл
					ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки,ТекКолонка,Начинаем+НомерГруппировки,ТекКолонка);
					Если ТекСтрока.ИмяГруппировки  = ТекИзмерен.Имя Тогда
						ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
						ТекОбласть.Параметр	= ТекСтрока.Параметр;//ТекСтрока.Имя;
						ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
						ТекОбласть.ПараметрРасшифровки      =  "Расшифровка";//ТекСтрока.Имя;
						ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,СтруктУсловнОформления,ТекСтрока.Поле.ПутьКДанным);  
					Иначе
						ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,Неопределено);  
					КонецЕсли;	  
					
					ТекКолонка = ТекКолонка+1;
				КонецЦикла;	  
				
				//детальные записи
				КолВоПустыхДополнительно =  Макс(ТаблРеквГруппДо.Количество()+ТаблРеквГруппПосле.Количество()+1,ТаблДетЗаписей.Количество());
				Если КолВоПустыхДополнительно+НачСтолбец > ТекКолонка Тогда
					Пока ТекКолонка <КолВоПустыхДополнительно+НачСтолбец  Цикл
						ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки,ТекКолонка,Начинаем+НомерГруппировки,ТекКолонка);
						ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,Неопределено);
						ТекКолонка=ТекКолонка+1;
					КонецЦикла;	
				КонецЕсли;	
				
				
				//показатели
				Для Каждого _ТекЗначение1 ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
					Если _ТекЗначение1.Использование = 2 Тогда
						ТекСтроки = _ТекЗначение1.Строки;
						Для каждого _ТекЗначение2 Из _ТекЗначение1.Строки Цикл
							Если _ТекЗначение2.Использование Тогда
								ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки,ТекКолонка,Начинаем+НомерГруппировки,ТекКолонка);
								ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
								ТекОбласть.Параметр	= _ТекЗначение2.Имя;
								ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
								ТекОбласть.ПараметрРасшифровки      = "Расшифровка";
								
								ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
								Если Не ПустаяСтрока(_ТекЗначение2.ФорматнаяСтрока) Тогда
									ТекОбласть.Формат =  _ТекЗначение2.ФорматнаяСтрока;
								КонецЕсли;
								Если УниверсальныйОтчет.ОтрицательноеКрасным Тогда
									ТекОбласть.ВыделятьОтрицательные = Истина;
								КонецЕсли;	
								
								ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,СтруктУсловнОформления,_ТекЗначение2.Имя);
								ТекКолонка = ТекКолонка+1;
							КонецЕсли;		  
							//МаксСтрокШапки = Макс(МаксСтрокШапки,2);
							//УпровеньПоказ = 2;
						КонецЦикла; 
					КонецЕсли;		  
				КонецЦикла;	
				
				Если НомерГруппировки = 1 Тогда
					ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки-1,,Начинаем+НомерГруппировки-1,);
					ТекОбласть.ВысотаСтроки =  МакетОформления.ПолучитьОбласть("ГруппировкаУровень1").Область(1,,1).ВысотаСтроки;
					ТекОбласть 			    = ТабМакет.Область(Начинаем+НомерГруппировки-1,,Начинаем+НомерГруппировки,);
				Иначе
					ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки,,Начинаем+НомерГруппировки,);
				КонецЕсли;	
				ТекОбласть.Имя = "Группировка"+Формат(НомерГруппировки,"ЧГ=");
			КонецЦикла;	
			
		КонецЕсли;	
		
		//3.2 Детальные записи
		ТекКолонка   = НачСтолбец;
		Начинаем     = Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+2;
		Если ТаблДетЗаписей.Количество() > 0 Тогда
			МакетДеталей = МакетОформления.ПолучитьОбласть("Детали").Область(1,,1);
			КолВоПустыхДополнительно = Макс(ТаблРеквГруппДо.Количество()+ТаблРеквГруппПосле.Количество()+1,ТаблДетЗаписей.Количество());
			м = 0;
			Пока м < КолВоПустыхДополнительно Цикл
				ТекОбласть = ТабМакет.Область(Начинаем,ТекКолонка,Начинаем,ТекКолонка); 
				Если м < ТаблДетЗаписей.Количество() Тогда
					ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
					ТекОбласть.Параметр	= ТаблДетЗаписей[м].Параметр;//ТаблДетЗаписей[м].Имя;
					Если ОпределитьВозможностьРасшировки(ТаблДетЗаписей[м].Имя,ПостроительИтоговый) Тогда
						ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
						ТекОбласть.ПараметрРасшифровки      = ТаблДетЗаписей[м].Имя;
					КонецЕсли; 
					
					
					Если м = ТаблРеквГруппДо.Количество()  Тогда
						Если  ПостроительИтоговый.ИзмеренияСтроки.Количество() > 0 Тогда
							ТекОбласть.АвтоОтступ = ПостроительИтоговый.ИзмеренияСтроки.Количество()+1;
						КонецЕсли;	
					КонецЕсли; 
				КонецЕсли;	
				ТекКолонка = ТекКолонка+1;
				//ЗаполнитьОформление(ТекОбласть,МакетДеталей);
				Если м < ТаблДетЗаписей.Количество() Тогда
					ЗаполнитьОформлениеСУчетомОформления(ТекОбласть,МакетДеталей,СтруктУсловнОформления,ТаблДетЗаписей[м].Поле.ПутьКДанным);
				Иначе
					ЗаполнитьОформлениеСУчетомОформления(ТекОбласть,МакетДеталей,СтруктУсловнОформления);
				КонецЕсли;	
				м = м+ 1;
			КонецЦикла; 
			
			//показатели
			Для Каждого _ТекЗначение1 ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
				Если _ТекЗначение1.Использование = 2 Тогда
					ТекСтроки = _ТекЗначение1.Строки;
					Для каждого _ТекЗначение2 Из _ТекЗначение1.Строки Цикл
						Если _ТекЗначение2.Использование Тогда
							ТекОбласть = ТабМакет.Область(Начинаем,ТекКолонка,Начинаем,ТекКолонка);
							ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
							ТекОбласть.Параметр	= _ТекЗначение2.Имя;
							
							ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
							ТекОбласть.ПараметрРасшифровки      = "Расшифровка";
							
							ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							Если Не ПустаяСтрока(_ТекЗначение2.ФорматнаяСтрока) Тогда
								ТекОбласть.Формат =  _ТекЗначение2.ФорматнаяСтрока;
							КонецЕсли;
							Если УниверсальныйОтчет.ОтрицательноеКрасным Тогда
								ТекОбласть.ВыделятьОтрицательные = Истина;
							КонецЕсли;	
							//ЗаполнитьОформление(ТекОбласть,МакетДеталей);
							ЗаполнитьОформлениеСУчетомОформления(ТекОбласть,МакетДеталей,СтруктУсловнОформления, _ТекЗначение2.Имя);
							ТекКолонка = ТекКолонка+1;
						КонецЕсли;		  
						//МаксСтрокШапки = Макс(МаксСтрокШапки,2);
						//УпровеньПоказ = 2;
					КонецЦикла; 
				КонецЕсли;		  
			КонецЦикла;	
			
			ТекОбласть = ТабМакет.Область(Начинаем,,Начинаем);
			ТекОбласть.Имя = "Детали";
			
			//Для м = 0 По КолВоПустыхДополнительно Цикл
		КонецЕсли;	
		
		//5 выводим общие итоги	
		Начинаем = Начинаем + 3;
		ТекКолонка = НачСтолбец;
		Если УниверсальныйОтчет.ВыводитьОбщиеИтоги Тогда
			КолВоПустыхДополнительно = Макс(ТаблРеквГруппДо.Количество()+ТаблРеквГруппПосле.Количество()+1,ТаблДетЗаписей.Количество());
			МакетИтогов				 = МакетОформления.ПолучитьОбласть("ОбщиеИтоги").Область(2,,2);
			ТекОбласть				 = ТабМакет.Область(Начинаем,ТекКолонка,Начинаем,ТекКолонка+КолВоПустыхДополнительно-1);
			ТекОбласть.Объединить();
			ТекОбласть.Текст = "Итоги";
			ЗаполнитьОформление(ТекОбласть,МакетИтогов);
			ТекКолонка  = ТекКолонка + КолВоПустыхДополнительно;
			Для Каждого _ТекЗначение1 ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
				Если _ТекЗначение1.Использование = 2 Тогда
					ТекСтроки = _ТекЗначение1.Строки;
					Для каждого _ТекЗначение2 Из _ТекЗначение1.Строки Цикл
						Если _ТекЗначение2.Использование Тогда
							ТекОбласть = ТабМакет.Область(Начинаем,ТекКолонка,Начинаем,ТекКолонка);
							ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
							ТекОбласть.Параметр	= _ТекЗначение2.Имя;
							ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							Если Не ПустаяСтрока(_ТекЗначение2.ФорматнаяСтрока) Тогда
								ТекОбласть.Формат =  _ТекЗначение2.ФорматнаяСтрока;
							КонецЕсли;
							Если УниверсальныйОтчет.ОтрицательноеКрасным Тогда
								ТекОбласть.ВыделятьОтрицательные = Истина;
							КонецЕсли;	
							//ЗаполнитьОформление(ТекОбласть,МакетИтогов);
							ЗаполнитьОформлениеСУчетомОформления(ТекОбласть,МакетИтогов,СтруктУсловнОформления, _ТекЗначение2.Имя);
							ТекКолонка = ТекКолонка+1;
						КонецЕсли;		  
						//МаксСтрокШапки = Макс(МаксСтрокШапки,2);
						//УпровеньПоказ = 2;
					КонецЦикла; 
				КонецЕсли;		  
			КонецЦикла;	
			
			ТекОбласть 				= ТабМакет.Область(Начинаем-1,,Начинаем-1,);
			ТекОбласть.ВысотаСтроки = МакетОформления.ПолучитьОбласть("ОбщиеИтоги").Область(1,,1).ВысотаСтроки;
			ТекОбласть				= ТабМакет.Область(Начинаем-1,,Начинаем,);
			ТекОбласть.Имя 			= "ОбщиеИтоги";
		КонецЕсли;	
		
		
		ПолучаемыйМакет  = ТабМакет;
		//	ПолучаемыйМакет.Показать();
		
		
		
		//мРазмещениеПоложениеВыбранныхПолей
		МассивДетЗаписей = Новый Массив;
		//Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи Тогда
		//	//получим поля детальных записей
		//	
		//	Для Каждого ТекПоле Из ПостроительИтоговый.ВыбранныеПоля Цикл
		//		Если ПостроительИтоговый.ИзмеренияСтроки.Найти(ТекПоле.Имя) <> Неопределено Тогда // это измерение
		//			
		//		Иначе	
		//			Для Каждого ТекПок Из УниверсальныйОтчет.Показатели Цикл
		//				
		//			Конеццикла;	
		//		КонецЕсли;	
		//	КонецЦикла;	
		//КонецЕсли;	
		
		//ОбластьГрупп = 
		
		НачинаемГрупп = Начинаем+3;
		
		//Для к = 1 По ПостроительИтоговый.ИзмеренияСтроки.Количество() Цикл
		//	  
		//	  ТекОбласть = ТабМакет.Область(Начинаем+к,,Начинаем+к);
		//	  ТекОбласть.Имя = "Группировка"+Формат(к,"ЧГ=");
		//	  
		//КонецЦикла;	
		
		//	ТабМакет.Показать();
		
		//ТабМакет.Имя
		
		
		
	КонецПроцедуры	
	
	Функция СформироватьРасшифровку(ТаблОбластей,КолВо)
		Результат = Новый Структура("Расшифровка",Новый Структура);
		Для к = 1 По КолВо Цикл
			Результат.Расшифровка.Вставить(ТаблОбластей[к-1].ИмяГруппировки,ТаблОбластей[к-1].ЗначениеГруппировки);
		КонецЦикла;	
		возврат Результат;
	КонецФункции	
	
	Процедура ВывестиРезЗапроса(Выборка,ТаблОбластей,ТабличныйДокумент,Уровень,ИндексДеталей,Счетчик,КоличествоЗаписей)
		//Расшифровка = Неопределено;
		РасшифровкаДеталей = Неопределено;
		Пока Выборка.Следующий() Цикл
			Область  = Неопределено;
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись и ИндексДеталей >=0 Тогда
				Область = ТаблОбластей[ИндексДеталей].Область;
				Если РасшифровкаДеталей = Неопределено и Уровень > 1 Тогда
					РасшифровкаДеталей = СформироватьРасшифровку(ТаблОбластей,Уровень-1);
				КонецЕсли; 
				Если РасшифровкаДеталей <> Неопределено Тогда
					Область.Параметры.Заполнить(РасшифровкаДеталей);
				КонецЕсли; 
				//ПолучаемыйМакет.ПолучитьОбласть("Детали");
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
				Область = ТаблОбластей[Уровень-1].Область;
				ТаблОбластей[Уровень-1].ЗначениеГруппировки = Выборка[ТаблОбластей[Уровень-1].ИмяГруппировки];
				Область.Параметры.Заполнить(СформироватьРасшифровку(ТаблОбластей,Уровень));
				//Область = ПолучаемыйМакет.ПолучитьОбласть("Группировка"+(Уровень));
			КонецЕсли;	
			
			Если Область <> Неопределено Тогда  
				Область.Параметры.Заполнить(Выборка);
				ВыводОбласть = ТабличныйДокумент.Вывести(Область);
			КонецЕсли;		
			
			Счетчик = Счетчик + 1;	
			ВывестиРезЗапроса(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам),ТаблОбластей,ТабличныйДокумент,Уровень+1,ИндексДеталей,Счетчик,КоличествоЗаписей);	
			Если Счетчик % 200 = 0 Тогда
				Состояние("Запись "+Счетчик);
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецПроцедуры	
	
	Процедура ВывестиДанныеВТабличнДокумент(ТабличныйДокумент,ПолучаемыйМакет,ПостроительИтоговый,РезЗапрос)
		
		ТаблОбластей = Новый ТаблицаЗначений;
		ТаблОбластей.Колонки.Добавить("Имя");
		ТаблОбластей.Колонки.Добавить("Область");
		ТаблОбластей.Индексы.Добавить("Имя");
		
		ТаблОбластей.Колонки.Добавить("ИмяГруппировки");
		ТаблОбластей.Колонки.Добавить("ЗначениеГруппировки");
		
		н = 0;
		Для Каждого ТекИзмер Из ПостроительИтоговый.ИзмеренияСтроки Цикл
			н = н +1;
			Имя 	= "Группировка"+н;
			НС = ТаблОбластей.Добавить();
			НС.Имя = Имя;
			НС.Область  = ПолучаемыйМакет.ПолучитьОбласть(Имя);
			НС.ИмяГруппировки = ТекИзмер.Имя;
		КонецЦикла;
		
		ИндексДеталей = -1;
		Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи Тогда
			НС = ТаблОбластей.Добавить();
			НС.Имя = "Детали";
			НС.Область  = ПолучаемыйМакет.ПолучитьОбласть("Детали");
			ИндексДеталей = ТаблОбластей.Индекс(НС);
		КонецЕсли; 
		
		
		ТабличныйДокумент.Очистить();
		ОблШапкиТаблицы = ПолучаемыйМакет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОблШапкиТаблицы);
		Если ПостроительИтоговый.ИзмеренияСтроки.Количество() > 0 Тогда
			Если ПостроительИтоговый.ВыводитьОбщиеИтоги  Тогда
				Выборка = РезЗапрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Выборка.Следующий();
				Область  = ПолучаемыйМакет.ПолучитьОбласть("ОбщиеИтоги");
				Область.Параметры.Заполнить(Выборка);
				КолВоЗап = Выборка.Количество();
				ВывестиРезЗапроса(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам),ТаблОбластей,ТабличныйДокумент,1,ИндексДеталей,1,КолВоЗап);
				ТабличныйДокумент.Вывести(Область);
			Иначе		
				Выборка = РезЗапрос.Выбрать();
				КолВоЗап = Выборка.Количество();
				ВывестиРезЗапроса(Выборка.Выбрать(),ТаблОбластей,ТабличныйДокумент,1,ИндексДеталей,1,КолВоЗап);
			КонецЕсли;
		Иначе
			Если ПостроительИтоговый.ВыводитьОбщиеИтоги  Тогда
				Выборка = РезЗапрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Выборка.Следующий();
				Область  = ПолучаемыйМакет.ПолучитьОбласть("ОбщиеИтоги");
				Область.Параметры.Заполнить(Выборка);
				
				КолВоЗап = Выборка.Количество();
				ВывестиРезЗапроса(Выборка.Выбрать(),ТаблОбластей,ТабличныйДокумент,0,ИндексДеталей,1,КолВоЗап);
				ТабличныйДокумент.Вывести(Область);
			Иначе		
				Выборка = РезЗапрос.Выбрать();
				КолВоЗап = Выборка.Количество();
				ВывестиРезЗапроса(Выборка.Выбрать(),ТаблОбластей,ТабличныйДокумент,0,ИндексДеталей,1,КолВоЗап);
			КонецЕсли;
		КонецЕсли;
		УниверсальныйОтчет.РасчетШириныКолонок(ТабличныйДокумент);
	КонецПроцедуры	  
	
	Функция ПолучитьИнформПоЦехам()
		ТаблЦехов = Новый ТаблицаЗначений;
		ТаблЦехов.Колонки.Добавить("Лининя",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
		ТаблЦехов.Колонки.Добавить("Цех",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Подразделения.Ссылка,
		|	Подразделения.Представление
		|ИЗ
		|	Справочник.Подразделения КАК Подразделения
		|ГДЕ
		|	Подразделения.Ссылка В ИЕРАРХИИ(&Ссылка)");
		
		МассивЦехов = Новый Массив;
		МассивЦехов.Добавить(Справочники.Подразделения.НайтиПоКоду("ЗПЛ0111").Ссылка);
		МассивЦехов.Добавить(Справочники.Подразделения.НайтиПоКоду("ЗПЛ_0504").Ссылка);
		МассивЦехов.Добавить(Справочники.Подразделения.НайтиПоКоду("ЗПЛ_0105_").Ссылка);
		МассивЦехов.Добавить(Справочники.Подразделения.НайтиПоКоду("ЗПЛ_0503").Ссылка);
		
		
		Для каждого ТекЭлем из МассивЦехов Цикл
			Запрос.УстановитьПараметр("Ссылка",ТекЭлем);
			ТаблПодр =  Запрос.Выполнить().Выгрузить();
			Для Каждого ТекСтрока Из ТаблПодр Цикл
				Если ТекСтрока.Ссылка =  ТекЭлем Тогда
					продолжить;
				КонецЕсли;	
				НоваяСтрока = ТаблЦехов.Добавить();
				НоваяСтрока.Лининя  = ТекСтрока.Ссылка;
				НоваяСтрока.Цех		= ТекЭлем;
			КонецЦикла;	
		КонецЦикла;	
		возврат ТаблЦехов;						
	КонецФункции	  
	
	Функция ПолучитьТаблПотерь()
		
		ТаблЦехов =	ПолучитьИнформПоЦехам();
		
		//ТаблЦехов.ВыбратьСтроку();
		
		Дата1 = ?(УниверсальныйОтчет.ДатаНач ='00010101',УниверсальныйОтчет.ДатаНач,  НачалоДня(УниверсальныйОтчет.ДатаНач));
		Дата2 = ?(УниверсальныйОтчет.ДатаКон ='00010101','39991231',КонецДня(УниверсальныйОтчет.ДатаКон));
		
		
		ПЗ  = Новый ПостроительЗапроса;
		
		ПЗ.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		           |	ПартииТоваровНаСкладахБухгалтерскийУчет.Номенклатура,
		           |	ВЫБОР
		           |		КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену
		           |			ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор
		           |		ИНАЧЕ ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументДвижения
		           |	КОНЕЦ КАК РегистраторСеб,
		           |	СУММА(ПартииТоваровНаСкладахБухгалтерскийУчет.Стоимость) КАК Стоимость,
		           |	СУММА(ПартииТоваровНаСкладахБухгалтерскийУчет.Количество) КАК Количество
		           |ПОМЕСТИТЬ ТабСеб
		           |ИЗ
		           |	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладахБухгалтерскийУчет
		           |ГДЕ
		           |	ПартииТоваровНаСкладахБухгалтерскийУчет.Период МЕЖДУ &Дата1 И &ДатаСеб2
		           |	И (ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену
		           |			ИЛИ ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументДвижения ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
		           |
		           |СГРУППИРОВАТЬ ПО
		           |	ПартииТоваровНаСкладахБухгалтерскийУчет.Номенклатура,
		           |	ВЫБОР
		           |		КОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену
		           |			ТОГДА ПартииТоваровНаСкладахБухгалтерскийУчет.Регистратор
		           |		ИНАЧЕ ПартииТоваровНаСкладахБухгалтерскийУчет.ДокументДвижения
		           |	КОНЕЦ
		           |;
		           |
		           |////////////////////////////////////////////////////////////////////////////////
		           |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		           |	Прод.Номенклатура КАК Номенклатура,
				   //m_ionov@mail.ru 21.04.2017
				   |	Прод.СерияНоменклатуры КАК СерияНоменклатуры,
				   //------- m_ionov@mail.ru -------
		           |	Прод.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		           |	СУММА(Прод.Количество * Прод.Коэффициент) КАК Количество,
		           |	СУММА(Прод.Номенклатура.ЕдиницаХраненияОстатков.ПРГ_Нетто * Прод.Количество * Прод.Коэффициент / 1000) КАК КоличествоВыпущеноТонн,
		           |	Прод.Спецификация КАК Спецификация,
		           |	Прод.Ссылка КАК Ссылка
		           |ПОМЕСТИТЬ ТаблОтчетПроизводства
		           |ИЗ
		           |	Документ.ОтчетПроизводстваЗаСмену.Продукция КАК Прод
		           |ГДЕ
		           |	Прод.Ссылка.Проведен
		           |	И Прод.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
		           |
		           |СГРУППИРОВАТЬ ПО
		           |	Прод.Номенклатура,
				   //m_ionov@mail.ru 21.04.2017
				   |	Прод.СерияНоменклатуры,
				   //------- m_ionov@mail.ru -------
		           |	Прод.НоменклатурнаяГруппа,
		           |	Прод.Спецификация,
		           |	Прод.Ссылка
		           |;
		           |
		           |////////////////////////////////////////////////////////////////////////////////
		           |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		           |	Прод.Номенклатура КАК Продукция,
				   //m_ionov@mail.ru 21.04.2017
				   |	Прод.СерияНоменклатуры КАК СерияПродукции,
				   //------- m_ionov@mail.ru -------
		           |	Прод.Количество КАК Количество,
		           |	Прод.Спецификация КАК Спецификация,
		           |	РаспредМатериалов.Номенклатура КАК Материал,
		           |	СУММА(РаспредМатериалов.Количество * РаспредМатериалов.Коэффициент) КАК КоличествоМатериалов,
		           |	ВЫБОР
		           |		КОГДА РаспредМатериалов.Номенклатура.ВидНоменклатуры В (&СпВидовНоменклатурПоСериям)
		           |			ТОГДА РаспредМатериалов.СерияНоменклатуры.УЗ_ПроцентСухихВеществ
		           |		ИНАЧЕ 0
		           |	КОНЕЦ КАК СВСерии,
		           |	ВЫБОР
		           |		КОГДА РаспредМатериалов.Номенклатура.ВидНоменклатуры В (&СпВидовНоменклатурПоСериям)
		           |			ТОГДА РаспредМатериалов.СерияНоменклатуры
		           |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		           |	КОНЕЦ КАК Серия,
		           |	Прод.Ссылка КАК Регистратор,
		           |	Прод.Ссылка.Дата КАК Дата,
		           |	Прод.Номенклатура.Код КАК КодГП,
		           |	Прод.КоличествоВыпущеноТонн КАК КоличествоВыпущеноТонн,
		           |	Прод.Ссылка.Подразделение КАК Линия,
		           |	РаспредМатериалов.Продукция.ЕдиницаХраненияОстатков.Объем КАК БрендоОбъем,
		           |	РаспредМатериалов.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаМатериалов,
		           |	РаспредМатериалов.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		           |	СУММА(ЕСТЬNULL(ТабСеб.Стоимость, 0)) КАК Себестоимость,
		           |	СУММА(ЕСТЬNULL(ТабСеб.Количество, 0)) КАК КолВоСебестоимость
		           |ПОМЕСТИТЬ ТаблПлан
		           |ИЗ
		           |	ТаблОтчетПроизводства КАК Прод
		           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		           |			РаспредМатериалов.Номенклатура КАК Номенклатура,
		           |			РаспредМатериалов.Количество КАК Количество,
		           |			РаспредМатериалов.Коэффициент КАК Коэффициент,
		           |			РаспредМатериалов.СерияНоменклатуры КАК СерияНоменклатуры,
		           |			РаспредМатериалов.Продукция КАК Продукция,
				   //m_ionov@mail.ru 21.04.2017
				   |			РаспредМатериалов.СерияПродукции КАК СерияПродукции,
				   //------- m_ionov@mail.ru -------
		           |			РаспредМатериалов.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		           |			РаспредМатериалов.Спецификация КАК Спецификация,
		           |			РаспредМатериалов.Ссылка КАК Ссылка
		           |		ИЗ
		           |			Документ.ОтчетПроизводстваЗаСмену.РаспределениеМатериаловДо КАК РаспредМатериалов
		           |		ГДЕ
		           |			РаспредМатериалов.Ссылка.Проведен
		           |			И РаспредМатериалов.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
		           |			И РаспредМатериалов.Ссылка.ИспользоватьРаспределениеДО
		           |		
		           |		ОБЪЕДИНИТЬ
		           |		
		           |		ВЫБРАТЬ
		           |			РаспредМатериалов.Номенклатура,
		           |			РаспредМатериалов.Количество,
		           |			РаспредМатериалов.Коэффициент,
		           |			РаспредМатериалов.СерияНоменклатуры,
		           |			РаспредМатериалов.Продукция,
				   //m_ionov@mail.ru 21.04.2017
				   |			РаспредМатериалов.СерияПродукции КАК СерияПродукции,
				   //------- m_ionov@mail.ru -------
		           |			РаспредМатериалов.НоменклатурнаяГруппа,
		           |			РаспредМатериалов.Спецификация,
		           |			РаспредМатериалов.Ссылка
		           |		ИЗ
		           |			Документ.ОтчетПроизводстваЗаСмену.РаспределениеМатериалов КАК РаспредМатериалов
		           |		ГДЕ
		           |			РаспредМатериалов.Ссылка.Проведен
		           |			И РаспредМатериалов.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
		           |			И НЕ РаспредМатериалов.Ссылка.ИспользоватьРаспределениеДО) КАК РаспредМатериалов
		           |		ПО Прод.Ссылка = РаспредМатериалов.Ссылка
		           |			И Прод.Номенклатура = РаспредМатериалов.Продукция
				   //m_ionov@mail.ru 21.04.2017
				   |			И Прод.СерияНоменклатуры = РаспредМатериалов.СерияПродукции
				   //------- m_ionov@mail.ru -------
		           |			И Прод.НоменклатурнаяГруппа = РаспредМатериалов.НоменклатурнаяГруппа
		           |			И Прод.Спецификация = РаспредМатериалов.Спецификация
		           |		ЛЕВОЕ СОЕДИНЕНИЕ ТабСеб КАК ТабСеб
		           |		ПО (РаспредМатериалов.Номенклатура = ТабСеб.Номенклатура)
		           |			И (РаспредМатериалов.Ссылка = ТабСеб.РегистраторСеб)
		           |ГДЕ
		           |	Прод.Ссылка.Проведен
		           |	И Прод.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
		           |
		           |СГРУППИРОВАТЬ ПО
		           |	Прод.Номенклатура,
				   //m_ionov@mail.ru 21.04.2017
				   |	Прод.СерияНоменклатуры,
				   //------- m_ionov@mail.ru -------
		           |	Прод.Количество,
		           |	Прод.Спецификация,
		           |	РаспредМатериалов.Номенклатура,
		           |	ВЫБОР
		           |		КОГДА РаспредМатериалов.Номенклатура.ВидНоменклатуры В (&СпВидовНоменклатурПоСериям)
		           |			ТОГДА РаспредМатериалов.СерияНоменклатуры.УЗ_ПроцентСухихВеществ
		           |		ИНАЧЕ 0
		           |	КОНЕЦ,
		           |	ВЫБОР
		           |		КОГДА РаспредМатериалов.Номенклатура.ВидНоменклатуры В (&СпВидовНоменклатурПоСериям)
		           |			ТОГДА РаспредМатериалов.СерияНоменклатуры
		           |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		           |	КОНЕЦ,
		           |	Прод.Ссылка,
		           |	Прод.КоличествоВыпущеноТонн,
		           |	Прод.Ссылка.Дата,
		           |	Прод.Номенклатура.Код,
		           |	Прод.Ссылка.Подразделение,
		           |	РаспредМатериалов.Продукция.ЕдиницаХраненияОстатков.Объем,
		           |	РаспредМатериалов.Номенклатура.ЕдиницаХраненияОстатков,
		           |	РаспредМатериалов.Номенклатура.ВидНоменклатуры
		           |;
		           |
		           |////////////////////////////////////////////////////////////////////////////////
		           |ВЫБРАТЬ
		           |	ТаблПлан.Продукция КАК Продукция,
				   //m_ionov@mail.ru 21.04.2017
				   |	ТаблПлан.СерияПродукции КАК СерияПродукции,
				   //------- m_ionov@mail.ru -------
		           |	ТаблПлан.Количество КАК Количество,
		           |	ТаблПлан.Спецификация КАК Спецификация,
		           |	ТаблПлан.Материал,
		           |	СУММА(ТаблПлан.КоличествоМатериалов) КАК КоличествоМатериалов,
		           |	ТаблПлан.СВСерии,
		           |	ТаблПлан.Серия,
		           |	ТаблПлан.Регистратор КАК Регистратор,
		           |	ТаблПлан.Дата,
		           |	ТаблПлан.КодГП,
		           |	ТаблПлан.КоличествоВыпущеноТонн КАК КоличествоВыпущеноТонн,
		           |	ТаблПлан.Линия,
		           |	ТаблПлан.БрендоОбъем КАК БрендоОбъем,
		           |	ТаблПлан.ЕдиницаМатериалов,
		           |	ТаблПлан.ВидНоменклатуры,
		           |	СУММА(ТаблПлан.Себестоимость) КАК Себестоимость,
		           |	СУММА(ТаблПлан.КолВоСебестоимость) КАК КолВоСебестоимость
		           |ИЗ
		           |	ТаблПлан КАК ТаблПлан
		           |{ГДЕ
		           |	ТаблПлан.Продукция.*,
		           |	ТаблПлан.Материал.*,
		           |	ТаблПлан.Спецификация.*,
		           |	ТаблПлан.Линия.*,
		           |	ТаблПлан.Регистратор.*}
		           |
		           |СГРУППИРОВАТЬ ПО
		           |	ТаблПлан.Материал,
		           |	ТаблПлан.Продукция,
				   //m_ionov@mail.ru 21.04.2017
				   |	ТаблПлан.СерияПродукции,
				   //------- m_ionov@mail.ru -------
		           |	ТаблПлан.Спецификация,
		           |	ТаблПлан.ВидНоменклатуры,
		           |	ТаблПлан.ЕдиницаМатериалов,
		           |	ТаблПлан.Линия,
		           |	ТаблПлан.КодГП,
		           |	ТаблПлан.Дата,
		           |	ТаблПлан.Регистратор,
		           |	ТаблПлан.Серия,
		           |	ТаблПлан.Количество,
		           |	ТаблПлан.СВСерии,
		           |	ТаблПлан.КоличествоВыпущеноТонн,
		           |	ТаблПлан.БрендоОбъем
		           |ИТОГИ
		           |	МИНИМУМ(Количество),
		           |	МИНИМУМ(КоличествоВыпущеноТонн),
		           |	МИНИМУМ(БрендоОбъем)
		           |ПО
		           |	Регистратор,
		           |	Продукция,
				   //m_ionov@mail.ru 21.04.2017
				   |	СерияПродукции,
				   //------- m_ionov@mail.ru -------
		           |	Спецификация";
		
		ВидНоменклатурыВода  = Константы.ПРГ_ВидНоменклатурыВода.Получить();
		
		//ОтборПродукия = УниверсальныйОтчет.ПостроительОтчета.Отбор.Найти("Продукция");
		//Если ОтборПродукия <> Неопределено и ОтборПродукия.Использование Тогда
		//	ПолеОтбора = ПЗ.Отбор.Добавить("Номенклатура","Номенклатура");
		//	ПолеОтбора.Использование = Истина;
		//	ПолеОтбора.ВидСравнения  = ОтборПродукия.ВидСравнения;
		//	Если ОтборПродукия.ВидСравнения = ВидСравнения.ВСписке или ОтборПродукия.ВидСравнения = ВидСравнения.ВСпискеПоИерархии или  ОтборПродукия.ВидСравнения = ВидСравнения.НеВСписке Тогда
		//		НовыйСписок = Новый СписокЗначений;
		//		ПолеОтбора.Значение.ВыгрузитьЗначения(НовыйСписок);
		//		ПолеОтбора.Значение = НовыйСписок;
		//	Иначе	
		//		ПолеОтбора.Значение = ОтборПродукия.Значение;
		//	КонецЕсли;
		//КонецЕсли;	
		
		//пройдемся по отборам
		Для каждого ТекОтбор ИЗ  УниверсальныйОтчет.ПостроительОтчета.Отбор Цикл
			Если ТекОтбор.Использование Тогда
				Попытка
					НашОтбор = ПЗ.Отбор.Добавить(ТекОтбор.ПутьКданным,ТекОтбор.Имя,ТекОтбор.Представление);
					НашОтбор.Использование  = ТекОтбор.Использование;
					НашОтбор.ВидСравнения   = ТекОтбор.ВидСравнения;
					Если ТипЗнч(ТекОтбор.Значение)  = Тип("СписокЗначений") Тогда
						Список = Новый СписокЗначений;
						Список.ЗагрузитьЗначения(ТекОтбор.Значение.ВыгрузитьЗначения());
						НашОтбор.Значение       = Список;
					Иначе
						НашОтбор.Значение       = ТекОтбор.Значение;
					КонецЕсли;	
				Исключение
				КонецПопытки;	
			КонецЕсли;	
		КонецЦикла;
		
		Запрос = ПЗ.ПолучитьЗапрос();					  
		
		Запрос.УстановитьПараметр("Дата1",Дата1);
		Запрос.УстановитьПараметр("Дата2",Дата2);
		Запрос.УстановитьПараметр("ДатаСеб2",КонецМесяца(Дата2));
		
		Запрос.УстановитьПараметр("ВидДвижения",ВидДвиженияНакопления.Расход);
		 		 		
		МассивВидовВоспроизводства = Новый Массив;
		МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Закупка);
		МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка); 
		//m_ionov@mail.ru 14.10.2016
		//Добавляем анализ по ПФ
		//Но тогда исключим Купаж
		МассивВидовВоспроизводства.Добавить(Перечисления.ВидыВоспроизводстваНоменклатуры.Производство); 
		//------- m_ionov@mail.ru -------
		
		//ТекПотребности = Новый ТаблицаЗначений;
		//Если ГруппировкаНоменклатуры Тогда
		//	ТекПотребности.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.УЗ_ГруппировкаНоменклатуры"));
		//Иначе
		//	ТекПотребности.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		//КонецЕсли;
		//
		//ТекПотребности.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		//ТекПотребности.Колонки.Добавить("Спецификация",Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
		//ТекПотребности.Колонки.Добавить("Продукция",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		//ТекПотребности.Колонки.Добавить("ВариантРасчетаСВ",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
		//ТекПотребности.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,8)));
		
		ИсхПараметры = Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Количество,Спецификация");
		Параметры = Новый Структура;
		Параметры.Вставить("ДатаСпецификации", ?(СпецификацииНаДату = Дата("00010101"),КонецДня(Дата2),КонецДня(СпецификацииНаДату)));
		Параметры.Вставить("Отбор", Новый Структура("ВидВоспроизводства, ЭтоКупаж", МассивВидовВоспроизводства, Ложь));
		//m_ionov@mail.ru 15/02/2017
		//при разузлование должно быть ограничение по кол-ву уровней, как в отчете производства
		Параметры.Вставить("КоличествоУровнейРазузлования", 2);
		//m_ionov@mail.ru 22.02.2017
		//Забыл добавить параметр до первого ПФ
		Параметры.Вставить("ДоПервогоПФ", Истина);
		//----- m_ionov@mail.ru
		
		Результат = Новый Структура;
		Результат.Вставить("ИсходныеКомплектующие");
		
		ТипКолВа = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3));
		ТипСумма = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
		ТипДата = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты);
		
		ИтоговаяТаблица = Новый ТаблицаЗначений;
		ИтоговаяТаблица.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.ОтчетПроизводстваЗаСмену"));
		//ИтоговаяТаблица.Колонки.Добавить("Дата", ТипДата);
		ИтоговаяТаблица.Колонки.Добавить("Продукция",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ИтоговаяТаблица.Колонки.Добавить("Линия",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
		
		Если ГруппировкаНоменклатуры Тогда
			ИтоговаяТаблица.Колонки.Добавить("Материал",Новый ОписаниеТипов("СправочникСсылка.УЗ_ГруппировкаНоменклатуры"));
		Иначе
			ИтоговаяТаблица.Колонки.Добавить("Материал",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		КонецЕсли;
		
		ИтоговаяТаблица.Колонки.Добавить("МатериалКод",Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(100)));
		ИтоговаяТаблица.Колонки.Добавить("Спецификация",Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
		ИтоговаяТаблица.Колонки.Добавить("Серия",Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		
		//ИтоговаяТаблица.Колонки.Добавить("КодГП",Новый ОписаниеТипов("Строка"),,,,Новый КвалификаторыСтроки(Метаданные.Справочники.Номенклатура.ДлинаКода));
		//ИтоговаяТаблица.Колонки.Добавить("КодМатериала",Новый ОписаниеТипов("Строка"),,,,Новый КвалификаторыСтроки(Метаданные.Справочники.Номенклатура.ДлинаКода));
		//ИтоговаяТаблица.Колонки.Добавить("ЕдиницаМатериалов",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
				
		ИтоговаяТаблица.Колонки.Добавить("БазисСВ",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,4)));
		ИтоговаяТаблица.Колонки.Добавить("СВСерии",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,4)));
		ИтоговаяТаблица.Колонки.Добавить("ВариантРасчетаСВ",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1,0)));
		
		//ИтоговаяТаблица.Колонки.Добавить("КоличествоФакт",ТипКолВа);
		ИтоговаяТаблица.Колонки.Добавить("Выработано",ТипКолВа);
		ИтоговаяТаблица.Колонки.Добавить("ВыработаноТонн",ТипКолВа);
		
		ИтоговаяТаблица.Колонки.Добавить("Рецептура",ТипКолВа);
		ИтоговаяТаблица.Колонки.Добавить("ФактическийРасход",ТипКолВа);
		ИтоговаяТаблица.Колонки.Добавить("ФактическийРасходБезПересчета",ТипКолВа);
		ИтоговаяТаблица.Колонки.Добавить("КоличествоПотери",ТипКолВа); // что новенькое в сравнении плана с фактом
		ИтоговаяТаблица.Колонки.Добавить("ПроцентПотерь",ТипКолВа);
		//ИтоговаяТаблица.Колонки.Добавить("КоличествоПотери",ТипКолВа);
				
		ВспомогТабл = ИтоговаяТаблица.СкопироватьКолонки();
		ВспомогТабл.Колонки.Удалить("Материал");
		ВспомогТабл.Колонки.Добавить("Материал",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ВспомогТабл.Индексы.Добавить("Материал");
		
		ВспомогТабл.Колонки.Добавить("Себестоимость",ТипСумма);
		ВспомогТабл.Колонки.Добавить("КолВоСебестоимость",ТипСумма);
			
		//только итоговая 
		ИтоговаяТаблица.Колонки.Добавить("ВыработаноПозиция",ТипКолВа);
		ИтоговаяТаблица.Колонки.Добавить("ВыработаноТоннПозиция",ТипКолВа);
		ИтоговаяТаблица.Колонки.Добавить("РасчетаСВ",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
		ИтоговаяТаблица.Колонки.Добавить("Цех",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
		ИтоговаяТаблица.Колонки.Добавить("БрендоОбъем",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6,3)));
		
		ИтоговаяТаблица.Колонки.Добавить("РецептураСумма",ТипСумма);
		ИтоговаяТаблица.Колонки.Добавить("ФактическийРасходСумма",ТипСумма);
		ИтоговаяТаблица.Колонки.Добавить("ПотериСумма",ТипСумма);
		
		ВспомогТабл.Колонки.Добавить("Аналог", Новый ОписаниеТипов("Булево"));
		ИтоговаяТаблица.Колонки.Добавить("Аналог", Новый ОписаниеТипов("Булево"));
		
		ТаблНом = Новый ТаблицаЗначений;
		ТаблНом.Колонки.Добавить("Номенклатура");
		ТаблНом.Колонки.Добавить("ВариантРасчетаСВ");
		
		СпВидовНоменклатурПоСериям = Новый СписокЗначений;
		СпВидовНоменклатурПоСериям.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000012"));
		СпВидовНоменклатурПоСериям.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000006"));
		СпВидовНоменклатурПоСериям.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000011"));
		СпВидовНоменклатурПоСериям.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000013"));
		СпВидовНоменклатурПоСериям.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000010"));
		СпВидовНоменклатурПоСериям.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000004"));
		//m_ionov@mail.ru 19.10.2016
		//Добавили цельное молоко
		СпВидовНоменклатурПоСериям.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000042"));
		//m_ionov@mail.ru 24.11.2016
		//Добавили ПФ молочного производства
		СпВидовНоменклатурПоСериям.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000043"));
		//------- m_ionov@mail.ru -------

		Запрос.УстановитьПараметр("СпВидовНоменклатурПоСериям",СпВидовНоменклатурПоСериям);
		
		СпВидовНоменклатурСырье = Новый СписокЗначений;
		СпВидовНоменклатурСырье.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000012"));
		СпВидовНоменклатурСырье.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000006"));
		СпВидовНоменклатурСырье.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000011"));
		СпВидовНоменклатурСырье.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000013"));
		СпВидовНоменклатурСырье.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000010"));
		СпВидовНоменклатурСырье.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000004"));
		//m_ionov@mail.ru 19.10.2016
		//Добавили цельное молоко
		СпВидовНоменклатурСырье.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000042"));
		//Добавили ПФ молочного производства
		СпВидовНоменклатурСырье.Добавить(Справочники.ВидыНоменклатуры.НайтиПоКоду("000000043"));
		//------- m_ionov@mail.ru -------

		Запрос.УстановитьПараметр("СпВидовНоменклатурСырье",СпВидовНоменклатурСырье);
		
		ЗапросАналоги = Новый Запрос;
		ЗапросАналоги.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	АналогиНоменклатуры.Номенклатура,
		                      |	АналогиНоменклатуры.Аналог,
							  |	АналогиНоменклатуры.КоличествоАналога
		                      |ИЗ
		                      |	РегистрСведений.АналогиНоменклатуры КАК АналогиНоменклатуры
		                      |ГДЕ
		                      |	(АналогиНоменклатуры.Номенклатура = &Номенклатура
		                      |			ИЛИ АналогиНоменклатуры.Аналог = &Номенклатура)
		                      |	И (АналогиНоменклатуры.Продукция = &Продукция
		                      |			ИЛИ АналогиНоменклатуры.Продукция = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	АналогиНоменклатуры.Номенклатура.Код УБЫВ";
							  
		ЗапросПартии = Новый Запрос;
		ЗапросПартии.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                     |	ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.КоличествоОстаток Как Количество,
		                     |	ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.СтоимостьОстаток Как Стоимость
		                     |ИЗ
		                     |	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(&Дата, Номенклатура = &Номенклатура) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОстатки
		                     |ГДЕ
		                     |	ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.Номенклатура = &Номенклатура";
					 
									 
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // регистратор
		Пока Выборка.Следующий() Цикл
			ПВыборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // продукция
			ОбработкаПрерыванияПользователя();
			Пока ПВыборка.Следующий() Цикл
				СВыборка = ПВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // Серия продукции
			    Пока СВыборка.Следующий() Цикл
				ВтВыборка = СВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); // спецификация
				Пока ВтВыборка.Следующий() Цикл
					ОбработкаПрерыванияПользователя();
					
					//получим инфу по спецификации
					
					ИсхПараметры.Номенклатура 				= ВтВыборка.Продукция;
					ИсхПараметры.Количество					= ВтВыборка.Количество;
					Если СпецификацииНаДату = Дата("00010101") Тогда
						ИсхПараметры.Спецификация			    = ВтВыборка.Спецификация;
						
						//m.ionov@a-prof.ru 11.06.2014
						//Параметры.ДатаСпецификации				= ВтВыборка.Дата;
						Параметры.ДатаСпецификации				= КонецДня(ВтВыборка.Регистратор.Дата);
						//----m.ionov@a-prof.ru---
					Иначе
					    ИсхПараметры.Спецификация			    = ПРГ_ДопФункцииКлиентСервер.ОпределитьСпецификацию(ВтВыборка.Продукция, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), КонецДня(СпецификацииНаДату), ВтВыборка.Регистратор.Подразделение);
						
						Параметры.ДатаСпецификации				= КонецДня(СпецификацииНаДату);
					КонецЕсли;
					
					//m_ionov@mail.ru 11.10.2016
					КоэфициентПолнойСпецификации = 1;
					КоэфициентРаспределенияПоСВ = 1;
					//Если ИсхПараметры.Спецификация.ВидСпецификации = Перечисления.ВидыСпецификаций.Полная
					//	И ИсхПараметры.Спецификация.ВыходныеИзделия.Количество() > 1 Тогда
					//	
					//	ИтогБазаСВДляРаспределения = 0;
					//	Для Каждого СтрокаВыходногоИзделения Из ИсхПараметры.Спецификация.ВыходныеИзделия Цикл
					//		ИтогБазаСВДляРаспределения = ИтогБазаСВДляРаспределения + СтрокаВыходногоИзделения.Количество*СтрокаВыходногоИзделения.Номенклатура.ПРГ_Базис;
					//	КонецЦикла;
					//	
					//	СтрокаВыходногоИзделения = ИсхПараметры.Спецификация.ВыходныеИзделия.Найти(ВтВыборка.Продукция,"Номенклатура");
					//	Если Не СтрокаВыходногоИзделения = Неопределено И ИтогБазаСВДляРаспределения > 0 Тогда
					//		//КоэфициентРаспределенияПоСВ = СтрокаВыходногоИзделения.Количество*СтрокаВыходногоИзделения.Номенклатура.ПРГ_Базис/ИтогБазаСВДляРаспределения;	
					//		КоэфициентПолнойСпецификации = СтрокаВыходногоИзделения.Количество/ИсхПараметры.Спецификация.ВыходныеИзделия.Итог("Количество"); 
					//	КонецЕсли; 						
					//КонецЕсли;
					//------- m_ionov@mail.ru -------
					
					ВспомогТабл.Очистить();
					
					Если ТипЗнч(Результат.ИсходныеКомплектующие) = Тип("ТаблицаЗначений") Тогда			
						Результат.ИсходныеКомплектующие.Очистить();
					КонецЕсли;	
					
					
					МассивОшибок = РазузлованиеНоменклатуры.РазузловатьНоменклатуру(ИсхПараметры, Результат, Параметры,Истина,Ложь);
					
					Если МассивОшибок.Количество() > 0 Тогда
						
						Для каждого Ошибка из МассивОшибок Цикл
							
							Сообщить("Ошибка: " + Ошибка.Причина, Ошибка.СтатусОшибки);
							Сообщить(" Спецификация: " + Ошибка.Спецификация);
							Сообщить(" Номер строки: " + Ошибка.НомерСтроки);
							Сообщить(" Описание ошибки: " + Ошибка.ОписаниеОшибки);
							
						КонецЦикла;
					КонецЕсли;	
					
					
					Если Результат <> Неопределено Тогда
						Для каждого СтрокаРазузлования из Результат.ИсходныеКомплектующие Цикл
							
							НоваяСтрока 						    =  ВспомогТабл.Добавить();
							НоваяСтрока.Линия	                    =  ВтВыборка.Регистратор.Подразделение;
							
							НоваяСтрока.Материал				    =  СтрокаРазузлования.Номенклатура; 
							НоваяСтрока.МатериалКод		            =  Сред(СокрЛП(НоваяСтрока.Материал.Код), 2, СтрДлина(СокрЛП(НоваяСтрока.Материал.Код))-2);
														
							//НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаРазузлования.ХарактеристикаНоменклатуры;
							НоваяСтрока.Продукция				    =  ВтВыборка.Продукция;
							НоваяСтрока.ВариантРасчетаСВ			=  СтрокаРазузлования.ВариантРасчетаСВ;
							
							Если СпецификацииНаДату = Дата("00010101") Тогда
								НоваяСтрока.Спецификация				=  ВтВыборка.Спецификация;
							Иначе
								НоваяСтрока.Спецификация				=  ПРГ_ДопФункцииКлиентСервер.ОпределитьСпецификацию(ВтВыборка.Продукция, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), КонецДня(СпецификацииНаДату), НоваяСтрока.Линия);
							КонецЕсли;
							
							НоваяСтрока.Рецептура					=  СтрокаРазузлования.Количество*СтрокаРазузлования.Коэффициент*КоэфициентПолнойСпецификации*КоэфициентРаспределенияПоСВ;
							
							НоваяСтрока.БазисСВ     				=  ПРГ_Обработки.ПолучитьБазисСВ(СтрокаРазузлования.Номенклатура, ВтВыборка.Регистратор.Дата); // СтрокаРазузлования.Номенклатура.ПРГ_Базис;
														
							НоваяСтрока.Серия        				=  Справочники.СерииНоменклатуры.ПустаяСсылка();
							НоваяСтрока.СВСерии                     =  0;
							
						КонецЦикла;
					КонецЕсли;
					
					ВспомогТабл.Свернуть("Регистратор,Продукция,Линия,Материал,МатериалКод,Спецификация,Серия,БазисСВ,СВСерии,ВариантРасчетаСВ,Выработано,ВыработаноТонн,Аналог",
					"Рецептура,ФактическийРасход,ФактическийРасходБезПересчета,КоличествоПотери,ПроцентПотерь,Себестоимость,КолВоСебестоимость");
					
					ВспомогТабл.Колонки.Добавить("АналогНоменклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
					
					ТрВыборка = ВтВыборка.Выбрать(); // детальные записи факта
					
					// далее мы дополняем данные по спецификации данными факта
					Пока ТрВыборка.Следующий() Цикл
						
						ОбработкаПрерыванияПользователя();
						
						ТекНом = ТрВыборка.Материал;
												
						// ищем строку спецификации по номенклатуре факта и серии
						// т.к. в ВспомогТабл все серии пустые, то здесь найдется только не-сырье, имеющееся при этом в спецификации
						НайденныеСтроки = ВспомогТабл.НайтиСтроки(Новый Структура("Материал, Серия", ТекНом, ТрВыборка.Серия));
						
						Если НайденныеСтроки.Количество() = 0 Тогда
							
							// не нашли - значит, у нас либо сырье с серией, либо не-сырье, отсутствующее в спецификации
							// в обоих случаях в дальнейшем будем добавлять строки, а не использовать текущую
							СтрокаПоНоменклатуреСерии = Неопределено;
							
							// теперь нужно понять, какую номенклатуру из спецификации использовать для расчетов
							
							// сначала ищем просто по номенклатуре, если нашлось, то это сырье с серией, имеющееся в спецификации
							СтрокаРазулования = ВспомогТабл.Найти(ТекНом, "Материал");
							
							// если номенклатуру без серии тоже не нашли, нужно искать аналоги
							Если СтрокаРазулования = Неопределено Тогда
								
								ЗапросАналоги.УстановитьПараметр("Номенклатура", ТекНом);
								ЗапросАналоги.УстановитьПараметр("Продукция", ТрВыборка.Продукция);
								РезультатАналоги = ЗапросАналоги.Выполнить().Выбрать();
								
								Пока РезультатАналоги.Следующий() Цикл
									СтрокаРазулования = ВспомогТабл.Найти(РезультатАналоги.Номенклатура.Ссылка, "Материал");	
									Если СтрокаРазулования <> Неопределено И РезультатАналоги.Аналог = ТекНом Тогда // (раскомментировать для аналогов в одну сторону)
										ТекНом = СтрокаРазулования.Материал;
										Прервать;
									КонецЕсли;
									// закомментировать для аналогов в одну сторону
									//СтрокаРазулования = ВспомогТабл.Найти(РезультатАналоги.Аналог.Ссылка, "Материал");	
									//Если СтрокаРазулования <> Неопределено Тогда
									//	ТекНом = СтрокаРазулования.Материал;
									//	Прервать;
									//КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
							// на этом этапе если СтрокаРазулования не Неопределено, то это строка спецификации, по шаблону которой нужно создавать строки по сериям факта
							// а если Неопределено, то факт не определен в спецификации ни сам, ни по аналогам
							
						Иначе // не-сырье, которое есть в спецификации
							
							СтрокаПоНоменклатуреСерии = НайденныеСтроки[0];
							СтрокаРазулования = НайденныеСтроки[0];
							
						КонецЕсли;
						
						Если СтрокаПоНоменклатуреСерии <> Неопределено Тогда
							
							НоваяСтрока 	=  СтрокаПоНоменклатуреСерии;
							
							НоваяСтрока.БазисСВ = ПРГ_Обработки.ПолучитьБазисСВ(ТекНом, ТрВыборка.Регистратор.Дата); // ТекНом.ПРГ_Базис;
							
							НоваяСтрока.Серия  = ТрВыборка.Серия;
							НоваяСтрока.СВСерии = ТрВыборка.СВСерии;
							
							Если НоваяСтрока.ВариантРасчетаСВ > 0 и ТрВыборка.ВидНоменклатуры = ВидНоменклатурыВода Тогда
								НоваяСтрока.ВариантРасчетаСВ  = 0;
							КонецЕсли;
							
						Иначе
							// сырье с серией либо не-сырье, отсутствующее в спецификации
							// формируем новую строку по факту, опционально используя СтрокаРазулования для получения данных, общих между рецептурой и аналогом
							
							НоваяСтрока 			      = ВспомогТабл.Добавить();
							НоваяСтрока.Продукция 		  = ТрВыборка.Продукция;
							
							НоваяСтрока.Материал		  =  ТекНом;
							НоваяСтрока.МатериалКод		  =  Сред(СокрЛП(НоваяСтрока.Материал.Код), 2, СтрДлина(СокрЛП(НоваяСтрока.Материал.Код))-2);
							
							НоваяСтрока.Линия			  = ВтВыборка.Регистратор.Подразделение;
							
							Если СпецификацииНаДату = Дата("00010101") Тогда
								НоваяСтрока.Спецификация  =  ТрВыборка.Спецификация;
							Иначе
								НоваяСтрока.Спецификация  =  ПРГ_ДопФункцииКлиентСервер.ОпределитьСпецификацию(ТрВыборка.Продукция, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), КонецДня(СпецификацииНаДату), НоваяСтрока.Линия);
							КонецЕсли;
							 					
							НоваяСтрока.Рецептура     	  = 0;
							НоваяСтрока.ФактическийРасход = 0;
							НоваяСтрока.БазисСВ			  = ПРГ_Обработки.ПолучитьБазисСВ(ТекНом, ВтВыборка.Регистратор.Дата); // ТекНом.ПРГ_Базис;
							
							НоваяСтрока.ВариантРасчетаСВ  = -1;
							Если Не СтрокаРазулования = Неопределено Тогда
								НоваяСтрока.Аналог = ТекНом <> ТрВыборка.Материал;
								
								Если НоваяСтрока.Аналог Тогда
									НоваяСтрока.АналогНоменклатура = ТрВыборка.Материал;
								КонецЕсли;
								
								НоваяСтрока.ВариантРасчетаСВ  = СтрокаРазулования.ВариантРасчетаСВ;
								Если НоваяСтрока.ВариантРасчетаСВ > 0 и ТрВыборка.ВидНоменклатуры = ВидНоменклатурыВода Тогда
									НоваяСтрока.ВариантРасчетаСВ  = 0;
								КонецЕсли;
							КонецЕсли;								
							
							НоваяСтрока.Серия  = ТрВыборка.Серия;
							НоваяСтрока.СВСерии = ТрВыборка.СВСерии;
							
							// факт был с серией, а спецификация без серии - ставим себестоимость в строке по спецификации по факту
							Если Не ТрВыборка.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
								НайденныеСтроки = ВспомогТабл.НайтиСтроки(Новый Структура("Материал, Серия", ТекНом, Справочники.СерииНоменклатуры.ПустаяСсылка()));
								Если НайденныеСтроки.Количество() = 1 Тогда
									НайденныеСтроки[0].Себестоимость      = ТрВыборка.Себестоимость;
									НайденныеСтроки[0].КолВоСебестоимость = ТрВыборка.КолВоСебестоимость;	
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли; 
						//m.ionov@a-prof.ru 11.06.2014
						//Если (НоваяСтрока.ВариантРасчетаСВ > 0) И Не ВыводитьСерии Тогда
						//	Если НоваяСтрока.БазисСВ > 0 Тогда
						//		Если ТрВыборка.СВСерии = 0 и (НоваяСтрока.ВариантРасчетаСВ=1 или НоваяСтрока.ВариантРасчетаСВ=2) Тогда
						//			Сообщить("В отчете производства за смену "+ВтВыборка.Регистратор+" у  материала "+ ТрВыборка.Материал+ " в серии указано нулевое значение СВ ");
						//			НоваяСтрока.ФактическийРасход 			  = НоваяСтрока.ФактическийРасход			  + ТрВыборка.КоличествоМатериалов;
						//			НоваяСтрока.ФактическийРасходБезПересчета = НоваяСтрока.ФактическийРасходБезПересчета + ТрВыборка.КоличествоМатериалов;
						//		ИначеЕсли НоваяСтрока.ВариантРасчетаСВ = 1 Тогда
						//			НоваяСтрока.ФактическийРасход			   = НоваяСтрока.ФактическийРасход			   + ТрВыборка.КоличествоМатериалов * ТрВыборка.СВСерии / НоваяСтрока.БазисСВ; 
						//			НоваяСтрока.ФактическийРасходБезПересчета = НоваяСтрока.ФактическийРасходБезПересчета + ТрВыборка.КоличествоМатериалов;
						//		ИначеЕсли НоваяСтрока.ВариантРасчетаСВ = 2 Тогда	   
						//			Если НоваяСтрока.БазисСВ > ТрВыборка.СВСерии Тогда
						//				НоваяСтрока.ФактическийРасход      		 = НоваяСтрока.ФактическийРасход			 + ТрВыборка.КоличествоМатериалов * ТрВыборка.СВСерии / НоваяСтрока.БазисСВ; 
						//				НоваяСтрока.ФактическийРасходБезПересчета = НоваяСтрока.ФактическийРасходБезПересчета + ТрВыборка.КоличествоМатериалов;
						//			Иначе
						//				НоваяСтрока.ФактическийРасход 	  		 = НоваяСтрока.ФактическийРасход + ТрВыборка.КоличествоМатериалов;    
						//				НоваяСтрока.ФактическийРасходБезПересчета = НоваяСтрока.ФактическийРасходБезПересчета+ ТрВыборка.КоличествоМатериалов;
						//			КонецЕсли;	   
						//		Иначе
						//			НоваяСтрока.ФактическийРасход  = НоваяСтрока.ФактическийРасход+ ТрВыборка.КоличествоМатериалов;   
						//			НоваяСтрока.ФактическийРасходБезПересчета = НоваяСтрока.ФактическийРасходБезПересчета+ ТрВыборка.КоличествоМатериалов;
						//		КонецЕсли;	   
						//	Иначе
						//		НоваяСтрока.ФактическийРасход 			 = НоваяСтрока.ФактическийРасход + ТрВыборка.КоличествоМатериалов;  
						//		НоваяСтрока.ФактическийРасходБезПересчета = НоваяСтрока.ФактическийРасходБезПересчета+ ТрВыборка.КоличествоМатериалов;	
						//	КонецЕсли;	   
						//Иначе
						//	НоваяСтрока.ФактическийРасход 			 = НоваяСтрока.ФактическийРасход + ТрВыборка.КоличествоМатериалов;  
						//	НоваяСтрока.ФактическийРасходБезПересчета = НоваяСтрока.ФактическийРасходБезПересчета+ ТрВыборка.КоличествоМатериалов;
						//КонецЕсли; 
						НоваяСтрока.ФактическийРасход 			  = НоваяСтрока.ФактическийРасход              + ТрВыборка.КоличествоМатериалов;  
						НоваяСтрока.ФактическийРасходБезПересчета = НоваяСтрока.ФактическийРасходБезПересчета + ТрВыборка.КоличествоМатериалов;
						//----m.ionov@a-prof.ru---
						
						//Записали себестоимость
						НоваяСтрока.Себестоимость      = ТрВыборка.Себестоимость;
						НоваяСтрока.КолВоСебестоимость = ТрВыборка.КолВоСебестоимость;
					КонецЦикла;	 
					
					НайдЗнчЦеха = ТаблЦехов.Найти(ВтВыборка.Регистратор.Подразделение,"Лининя");
					
					//m.ionov@a-prof.ru 08.08.2014
					Если Не ВыводитьСерии Тогда
						//Нужно распределить план по сериям факта
						ВспомогТабл.Свернуть("Регистратор,Продукция,Линия,Материал,МатериалКод,Спецификация,Серия,БазисСВ,СВСерии,ВариантРасчетаСВ,Выработано,ВыработаноТонн,Аналог,АналогНоменклатура",
						"Рецептура,ФактическийРасход,ФактическийРасходБезПересчета,КоличествоПотери,ПроцентПотерь,Себестоимость,КолВоСебестоимость");
						
						ТабБезСерий = ВспомогТабл.Скопировать();
						ТабБезСерий.Свернуть("Регистратор,Продукция,Линия,Материал,МатериалКод,Спецификация",
						"Рецептура,ФактическийРасход,ФактическийРасходБезПересчета,КоличествоПотери,ПроцентПотерь,Себестоимость,КолВоСебестоимость");
						//План указан без серии, факт возможно с серией (а может без серии), если по одной строчке находим несколько в ВспомогТабл, то удаляем без серии, а план распределяем на с сериями
						Для Каждого СтрокаБезСерии Из ТабБезСерий Цикл
							
							Состояние("Распределение рецептуры по фактическим сериям " + СокрЛП(ТабБезСерий.Индекс(СтрокаБезСерии)) + "/" + СокрЛП(ТабБезСерий.Количество()));
							СтруктураПоискаСтрок = Новый Структура;
							СтруктураПоискаСтрок.Вставить("Регистратор", СтрокаБезСерии.Регистратор);
							СтруктураПоискаСтрок.Вставить("Продукция", СтрокаБезСерии.Продукция);
							СтруктураПоискаСтрок.Вставить("Линия", СтрокаБезСерии.Линия);
							СтруктураПоискаСтрок.Вставить("Материал", СтрокаБезСерии.Материал);
							СтруктураПоискаСтрок.Вставить("МатериалКод", СтрокаБезСерии.МатериалКод);
							СтруктураПоискаСтрок.Вставить("Спецификация", СтрокаБезСерии.Спецификация);
							
							СтрокиТаб = ВспомогТабл.НайтиСтроки(СтруктураПоискаСтрок);
							Если СтрокиТаб.Количество() <= 1 Тогда
								Продолжить;
							КонецЕсли;
							
							ИтогРасход = СтрокаБезСерии.ФактическийРасход;
							ИтогПлан = СтрокаБезСерии.Рецептура;
							ИтогПланРаспределели = ИтогПлан;
							
							Если ИтогПлан = 0 ИЛИ ИтогРасход = 0 Тогда
								//Нет смысла распределять
								Продолжить;
							КонецЕсли;
							
							Сч = 0;
							Пока Сч < СтрокиТаб.Количество() Цикл
								СтрокаТаб = СтрокиТаб[Сч];
								Если СтрокаТаб.ФактическийРасход = 0 Тогда
									ВспомогТабл.Удалить(СтрокаТаб);
								Иначе
									СтрокаТаб.Рецептура = ИтогПлан*СтрокаТаб.ФактическийРасход/ИтогРасход;
									ИтогПланРаспределели = ИтогПланРаспределели - СтрокаТаб.Рецептура;
								КонецЕсли;
								Сч = Сч + 1;
							КонецЦикла;
							СтрокаТаб.Рецептура = СтрокаТаб.Рецептура + ИтогПланРаспределели;
							
						КонецЦикла;
					КонецЕсли;
					//----m.ionov@a-prof.ru---
					
					//m_ionov@mail.ru 15.05.2017
					ВспомогТабл.Колонки.Добавить("СреднийСВСерии",ТипСумма);
					ВспомогТабл.Колонки.Добавить("ИтогоРасход",ТипСумма);
					//------- m_ionov@mail.ru -------
					
					Для каждого СтрокаТаблицы Из ВспомогТабл Цикл
						
						Если Не ЗначениеЗаполнено(СтрокаТаблицы.Серия) Тогда
							Продолжить;
						КонецЕсли;
						
						//m_ionov@mail.ru 15.05.2017
						//Нам необходимо найти средний СВ для расчета рецептуры
						//Для этого для каждой строки таблицы найдем все строки с нужным материалом, расчитаем для него средний СВ
						Если СтрокаТаблицы.СреднийСВСерии = 0 И СтрокаТаблицы.ФактическийРасход > 0
							И СтрокаТаблицы.ВариантРасчетаСВ = 1 Тогда
							СтрокиМатериалов = ВспомогТабл.НайтиСтроки(Новый Структура("Материал", СтрокаТаблицы.Материал));
							Сч = 0;
							ИтогоРасход = 0;
							ИтогоМассаСВ = 0;
							Пока Сч < СтрокиМатериалов.Количество() Цикл
								Если СтрокиМатериалов[Сч].СВСерии > 0 Тогда
									ИтогоМассаСВ = ИтогоМассаСВ + СтрокиМатериалов[Сч].СВСерии*СтрокиМатериалов[Сч].ФактическийРасход;
									ИтогоРасход = ИтогоРасход + СтрокиМатериалов[Сч].ФактическийРасход;
								КонецЕсли;
								Сч = Сч + 1;
							КонецЦикла;
							Если ИтогоРасход > 0 Тогда 
								СреднийСВСерии = Окр(ИтогоМассаСВ/ИтогоРасход,2);
								СтрокаТаблицы.СреднийСВСерии = СреднийСВСерии;
								СтрокаТаблицы.ИтогоРасход = ИтогоРасход;
								//Проставим средний СВ в остальных строках
								Сч = 0;
								Пока Сч < СтрокиМатериалов.Количество() Цикл
									Если СтрокиМатериалов[Сч].СВСерии > 0 Тогда
										СтрокиМатериалов[Сч].СреднийСВСерии = СреднийСВСерии;
										СтрокиМатериалов[Сч].ИтогоРасход = ИтогоРасход;
									КонецЕсли;
									Сч = Сч + 1;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
						//------- m_ionov@mail.ru -------
						
						/// Кунов О.В., 15.01.2015 - 35084
						// обработка случая, когда в одной спецификации указаны позиции номенклатуры, являющиеся аналогами друг друга
						// в этом случае количество по рецептуре по наборам аналогов нужно распределить пропорционально фактическому расходу
						
						Если Не ВыводитьСерии Тогда
							ЗапросАналоги.УстановитьПараметр("Номенклатура", СтрокаТаблицы.Материал);
							ЗапросАналоги.УстановитьПараметр("Продукция", СтрокаТаблицы.Продукция);
							
							АналогиТаблица = ЗапросАналоги.Выполнить().Выгрузить();
							
							АналогиСвернутые = АналогиТаблица.Скопировать();
							АналогиСвернутые.Свернуть("Номенклатура");
							
							Аналоги = АналогиСвернутые.ВыгрузитьКолонку("Номенклатура");
							
							СтрокиПоАналогам = Новый Массив;
							ИтогоАналогиПоРецептуре = 0;
							ИтогоАналогиФакт 		= 0;
							
							Для Каждого Аналог Из Аналоги Цикл
								Для Каждого СтрокаАналога Из ВспомогТабл.НайтиСтроки(Новый Структура("Материал", Аналог)) Цикл
									СтрокиПоАналогам.Добавить(СтрокаАналога);
									ИтогоАналогиПоРецептуре = ИтогоАналогиПоРецептуре 	+ СтрокаАналога.Рецептура;
									ИтогоАналогиФакт		= ИтогоАналогиФакт			+ СтрокаАналога.ФактическийРасход;
								КонецЦикла;
							КонецЦикла;
							
							Если ИтогоАналогиФакт > 0 Тогда
								Для Каждого СтрокаАналога Из СтрокиПоАналогам Цикл
									СтрокаАналога.Рецептура = ИтогоАналогиПоРецептуре * (СтрокаАналога.ФактическийРасход / ИтогоАналогиФакт);
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
						///
						
						/// Кунов О.В.
						// в случае, когда использован аналог и количество аналога по нормам не совпадает с количеством основной номенклатуры,
						// нужно пересчитать количество в рецептуре
						Если СтрокаТаблицы.Серия.Владелец <> СтрокаТаблицы.Материал Тогда
							ДанныеОбАналогах = РегистрыСведений.АналогиНоменклатуры.СоздатьНаборЗаписей();
							ДанныеОбАналогах.Отбор.Номенклатура.Установить(СтрокаТаблицы.Материал);
							ДанныеОбАналогах.Отбор.Аналог.Установить(СтрокаТаблицы.Серия.Владелец);
							ДанныеОбАналогах.Отбор.Продукция.Установить(СтрокаТаблицы.Продукция);
							ДанныеОбАналогах.Прочитать();
							Если ДанныеОбАналогах.Количество() = 0 Тогда
								ДанныеОбАналогах.Отбор.Продукция.Установить(Справочники.Номенклатура.ПустаяСсылка());
								ДанныеОбАналогах.Прочитать();
							КонецЕсли;
							Если ДанныеОбАналогах.Количество() > 0 Тогда
								СтрокаТаблицы.Рецептура = СтрокаТаблицы.Рецептура * ДанныеОбАналогах[0].КоличествоАналога;
								СтрокаТаблицы.Материал 	= СтрокаТаблицы.Серия.Владелец;
								СтрокаТаблицы.БазисСВ 	= ПРГ_Обработки.ПолучитьБазисСВ(СтрокаТаблицы.Материал, ВтВыборка.Регистратор.Дата);
							КонецЕсли;
						КонецЕсли;
						///
					
					КонецЦикла; 
					
					ВспомогТабл.Колонки.Добавить("РецептураСумма",ТипСумма);
					ВспомогТабл.Колонки.Добавить("ФактическийРасходСумма",ТипСумма);
					ВспомогТабл.Колонки.Добавить("ПотериСумма",ТипСумма);
															
					//m.ionov@a-prof.ru 11.06.2014
					ВремТабКодов = ВспомогТабл.Скопировать();
					Для каждого ТекСтрока Из ВспомогТабл Цикл
						НоваяСтрока = ТекСтрока;
						//ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
						
						//Для позиций у которых не получили списанную себестоимость, берем себестоимость из ---остатков---
						// теперь берем себестоимость из фактически списанного материала с тем же кодом (другого сорта).
						Если ТекСтрока.КолВоСебестоимость = 0 И Не НоваяСтрока.Материал.ВидНоменклатуры = ВидНоменклатурыВода Тогда
							/// Кунов О.В., 30.07.2015 - 42335
							СтрокиПоКоду = ВспомогТабл.НайтиСтроки(Новый Структура("МатериалКод", ТекСтрока.МатериалКод));
							
							СебестоимостьСумма = 0;
							СебестоимостьКоличество = 0;
							
							Для Каждого СтрокаПоКоду Из СтрокиПоКоду Цикл
								Если СтрокаПоКоду = ТекСтрока Тогда
									Продолжить;
								КонецЕсли;
								СебестоимостьСумма = СебестоимостьСумма + СтрокаПоКоду.Себестоимость;
								СебестоимостьКоличество = СебестоимостьКоличество + СтрокаПоКоду.КолвоСебестоимость;
							КонецЦикла;
							
							ТекСтрока.КолвоСебестоимость = СебестоимостьКоличество;
							ТекСтрока.Себестоимость = СебестоимостьСумма;
							///
							
							//Если СебестоимостьКоличество <> 0 Тогда
							//	Себестоимость = Окр(СебестоимостьСумма / СебестоимостьКоличество, 2);
							//	НоваяСтрока.РецептураСумма = НоваяСтрока.Рецептура * Себестоимость;
							//КонецЕсли;
							//
							//ДатаЗапросаПартии = КонецМесяца(ВтВыборка.Регистратор.Дата);
							//Пока ТекСтрока.КолВоСебестоимость = 0 И ДатаЗапросаПартии >= НачалоГода(ВтВыборка.Регистратор.Дата) Цикл
							//	ЗапросПартии.УстановитьПараметр("Номенклатура",НоваяСтрока.Материал);
							//	ЗапросПартии.УстановитьПараметр("Дата", ДатаЗапросаПартии);
							//	РезультатПартии = ЗапросПартии.Выполнить().Выбрать();
							//	
							//	Если РезультатПартии.Следующий() Тогда
							//		ТекСтрока.КолВоСебестоимость = РезультатПартии.Количество;	
							//		ТекСтрока.Себестоимость = РезультатПартии.Стоимость;	
							//	КонецЕсли;
							//
							//	ДатаЗапросаПартии = НачалоМесяца(ДатаЗапросаПартии) - 1;
							//КонецЦикла;
						КонецЕсли;
						
						//Если ГруппировкаНоменклатуры Тогда
						//	НоваяСтрока.Материал = ТекСтрока.Материал.ГруппировкаНоменклатуры;
						//	НоваяСтрока.МатериалКод = "";
						//Иначе
							Если Не БезУчетаСортаПоСырью Тогда
								НоваяСтрока.МатериалКод = СокрЛП(НоваяСтрока.Материал.Код);
								
							ИначеЕсли СпВидовНоменклатурСырье.НайтиПоЗначению(НоваяСтрока.Материал.ВидНоменклатуры) = Неопределено Тогда
								НоваяСтрока.МатериалКод = СокрЛП(НоваяСтрока.Материал.Код);
								
							Иначе
								МатериалКод		    =  Сред(СокрЛП(НоваяСтрока.Материал.Код), 2, СтрДлина(СокрЛП(НоваяСтрока.Материал.Код))-2);
								
								СтрокиКодов = ВремТабКодов.НайтиСтроки(Новый Структура("МатериалКод", МатериалКод));
								Если СтрокиКодов.Количество() < 1 Тогда
									НоваяСтрока.МатериалКод = СокрЛП(НоваяСтрока.Материал.Код);
								Иначе
									НоваяСтрока.Материал = СтрокиКодов[0].Материал;
									ТекстКода = "";
									Для Каждого СтрокаКода Из СтрокиКодов Цикл
										
										МатериалКод		    =  СокрЛП(СтрокаКода.Материал.Код);
										
										Если Найти(ТекстКода, МатериалКод) = 0 Тогда
											ТекстКода = ТекстКода + ?(Не ПустаяСтрока(ТекстКода),"; ","") + МатериалКод;
										КонецЕсли;
										
										Если НоваяСтрока.ВариантРасчетаСВ = -1 Тогда
											НоваяСтрока.ВариантРасчетаСВ = СтрокаКода.ВариантРасчетаСВ;
										КонецЕсли;
										
									КонецЦикла;
									НоваяСтрока.МатериалКод = ТекстКода;
								КонецЕсли;
							КонецЕсли;
						//КонецЕсли;
						
						Если (НоваяСтрока.ВариантРасчетаСВ > 0) И Не БезПересчетаПоСВ Тогда
							//Если НоваяСтрока.БазисСВ > 0 Тогда
							//	Если ТрВыборка.СВСерии = 0 и (НоваяСтрока.ВариантРасчетаСВ=1 или НоваяСтрока.ВариантРасчетаСВ=2) Тогда
							//		Сообщить("В отчете производства за смену "+ВтВыборка.Регистратор+" у  материала "+ НоваяСтрока.Материал+ " в серии указано нулевое значение СВ ");
							//	ИначеЕсли НоваяСтрока.ВариантРасчетаСВ = 1 Тогда
							//		//НоваяСтрока.ФактическийРасход			   = НоваяСтрока.ФактическийРасход * НоваяСтрока.СВСерии / НоваяСтрока.БазисСВ; 
							//		НоваяСтрока.Рецептура			   = НоваяСтрока.Рецептура * НоваяСтрока.СВСерии / НоваяСтрока.БазисСВ; 
							//	ИначеЕсли НоваяСтрока.ВариантРасчетаСВ = 2 Тогда	   
							//		Если НоваяСтрока.БазисСВ > НоваяСтрока.СВСерии Тогда
							//			//НоваяСтрока.ФактическийРасход      		 = НоваяСтрока.ФактическийРасход * НоваяСтрока.СВСерии / НоваяСтрока.БазисСВ; 
							//			НоваяСтрока.Рецептура      		 = НоваяСтрока.Рецептура * НоваяСтрока.СВСерии / НоваяСтрока.БазисСВ; 
							//			
							//		Иначе
							//			
							//		КонецЕсли;	   
							//	Иначе
							//		
							//	КонецЕсли;	   
							//Иначе
							//	
							//КонецЕсли;	
							//m.ionov@a-prof.ru 13.08.2014
							Если НоваяСтрока.БазисСВ > 0 И ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
								Если НоваяСтрока.СВСерии = 0 и (НоваяСтрока.ВариантРасчетаСВ = 1 или НоваяСтрока.ВариантРасчетаСВ = 2) Тогда
									Сообщить("В отчете производства за смену "+ВтВыборка.Регистратор+" у  материала "+ НоваяСтрока.Материал + " (код: " + СокрЛП(НоваяСтрока.МатериалКод) + ")" + " в серии ("+ СокрЛП(НоваяСтрока.Серия) +") указано нулевое значение СВ ");
								ИначеЕсли НоваяСтрока.ВариантРасчетаСВ = 1 Тогда
									//НоваяСтрока.ФактическийРасход			   = НоваяСтрока.ФактическийРасход * НоваяСтрока.СВСерии / НоваяСтрока.БазисСВ; 
									//m_ionov@mail.ru 21.04.2017
									//Для нормализованного молока и сливок кол-во по рецепту цельного молока считаем от СВ
									ТипПродукции = ПолучитьТипНоменклатуры(ВтВыборка.Регистратор.Дата, ВтВыборка.Продукция);
									Если ЗначениеЗаполнено(ВтВыборка.СерияПродукции) Тогда
										МассаСВПродукции = ВтВыборка.Количество*ВтВыборка.СерияПродукции.УЗ_ПроцентСухихВеществ;
									Иначе
										МассаСВПродукции = 0;
									КонецЕсли;
									
									Если МассаСВПродукции > 0 
										И (ТипПродукции = Перечисления.МЗ_ТипНоменклатуры.НормализованнаяСмесь
										ИЛИ ТипПродукции = Перечисления.МЗ_ТипНоменклатуры.Сливки)
										И ПолучитьТипНоменклатуры(ВтВыборка.Регистратор.Дата, НоваяСтрока.Материал) = Перечисления.МЗ_ТипНоменклатуры.СыроеМолоко
										И НоваяСтрока.СреднийСВСерии > 0 И НоваяСтрока.ИтогоРасход > 0 Тогда
										
										//m_ionov@mail.ru 15.05.2017
										//НоваяСтрока.Рецептура			   = МассаСВПродукции / НоваяСтрока.СВСерии; 
										//данные по выпуску продукции не разделяются по используемым материалам, поэтому 
										//необходимо в пропорции вычислять сколько МассыСВПродукции на конретный материал
										НоваяСтрока.Рецептура			   = (МассаСВПродукции / НоваяСтрока.СреднийСВСерии)*(НоваяСтрока.ФактическийРасход/НоваяСтрока.ИтогоРасход); 
										//------- m_ionov@mail.ru -------
									Иначе
									//------- m_ionov@mail.ru -------
                                    	НоваяСтрока.Рецептура			   = НоваяСтрока.Рецептура * НоваяСтрока.БазисСВ / НоваяСтрока.СВСерии; 
									КонецЕсли;
								ИначеЕсли НоваяСтрока.ВариантРасчетаСВ = 2 Тогда	   
									Если НоваяСтрока.БазисСВ > НоваяСтрока.СВСерии Тогда
										//НоваяСтрока.ФактическийРасход      		 = НоваяСтрока.ФактическийРасход * НоваяСтрока.СВСерии / НоваяСтрока.БазисСВ; 
										НоваяСтрока.Рецептура      		 = НоваяСтрока.Рецептура * НоваяСтрока.БазисСВ / НоваяСтрока.СВСерии; 
										
									Иначе
										
									КонецЕсли;	   
								Иначе
									
								КонецЕсли;	   
							Иначе
								
							КонецЕсли;
							//----m.ionov@a-prof.ru---
						Иначе
							
						КонецЕсли; 
						
						Если Не ТекСтрока.КолВоСебестоимость = 0 Тогда
							
							НоваяСтрока.КоличествоПотери  		  = НоваяСтрока.ФактическийРасход  - НоваяСтрока.Рецептура; 
							
							Себестоимость = Окр(ТекСтрока.Себестоимость/ТекСтрока.КолВоСебестоимость,2);
							
							НоваяСтрока.РецептураСумма = НоваяСтрока.Рецептура*Себестоимость;
							НоваяСтрока.ФактическийРасходСумма = НоваяСтрока.ФактическийРасход*Себестоимость;
							НоваяСтрока.ПотериСумма = НоваяСтрока.КоличествоПотери*Себестоимость;
							
						КонецЕсли;
						
                    КонецЦикла;					
					//----m.ionov@a-prof.ru---
					
					
					Если ВыводитьСерии Тогда
						ВспомогТабл.Свернуть("Регистратор,Продукция,Линия,Материал,МатериалКод,Спецификация,Серия,БазисСВ,ВариантРасчетаСВ,СВСерии,Выработано,ВыработаноТонн,Аналог,АналогНоменклатура",
							"Рецептура,ФактическийРасход,ФактическийРасходБезПересчета,КоличествоПотери,ПроцентПотерь,Себестоимость,КолВоСебестоимость,РецептураСумма,ФактическийРасходСумма,ПотериСумма");
												
					Иначе
						ВспомогТабл.Свернуть("Регистратор,Продукция,Линия,Материал,МатериалКод,Спецификация,БазисСВ,ВариантРасчетаСВ,Выработано,ВыработаноТонн,Аналог,АналогНоменклатура",
							"Рецептура,ФактическийРасход,ФактическийРасходБезПересчета,КоличествоПотери,ПроцентПотерь,Себестоимость,КолВоСебестоимость,РецептураСумма,ФактическийРасходСумма,ПотериСумма");
												
						ВспомогТабл.Колонки.Добавить("Серия",Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
						ВспомогТабл.Колонки.Добавить("СВСерии",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,4)));
						
					КонецЕсли;
								
					ПерваяПозиция = Истина;
					Для каждого ТекСтрока Из ВспомогТабл  Цикл
						
						/// Кунов О.В., 15.01.2015 - 35084
						// после всех манипуляций может получиться так, что по какой-то позиции расход по рецептуре и фактический равны нулю
						// такие позиции пропускаем
						Если ТекСтрока.Рецептура = 0 И ТекСтрока.ФактическийРасход = 0 Тогда
							Продолжить;
						КонецЕсли;
						///
						
						НоваяСтрока = ИтоговаяТаблица.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
						
						Если ГруппировкаНоменклатуры Тогда
							НоваяСтрока.Материал = ТекСтрока.Материал.ГруппировкаНоменклатуры;
							НоваяСтрока.МатериалКод = "";
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ТекСтрока.АналогНоменклатура) Тогда
							НоваяСтрока.Материал = ТекСтрока.АналогНоменклатура;
						КонецЕсли;
						
						////m.ionov@a-prof.ru 11.06.2014
						//Если ГруппировкаНоменклатуры Тогда
						//	НоваяСтрока.Материал = ТекСтрока.Материал.ГруппировкаНоменклатуры;
						//	НоваяСтрока.МатериалКод = "";
						//Иначе
						//	Если Не БезУчетаСортаПоСырью Тогда
						//		НоваяСтрока.МатериалКод = СокрЛП(НоваяСтрока.Материал.Код);
						//		
						//	ИначеЕсли СпВидовНоменклатурСырье.НайтиПоЗначению(НоваяСтрока.Материал.ВидНоменклатуры) = Неопределено Тогда
						//		НоваяСтрока.МатериалКод = СокрЛП(НоваяСтрока.Материал.Код);
						//		
						//	Иначе
						//		МатериалКод		    =  Лев(СокрЛП(НоваяСтрока.Материал.Код), СтрДлина(СокрЛП(НоваяСтрока.Материал.Код))-1);
						//		
						//		СтрокиКодов = ВспомогТабл.НайтиСтроки(Новый Структура("МатериалКод", МатериалКод));
						//		Если СтрокиКодов.Количество() < 1 Тогда
						//			НоваяСтрока.МатериалКод = СокрЛП(НоваяСтрока.Материал.Код);
						//		Иначе
						//			НоваяСтрока.Материал = СтрокиКодов[0].Материал;
						//			ТекстКода = "";
						//			Для Каждого СтрокаКода Из СтрокиКодов Цикл
						//				
						//				МатериалКод		    =  СокрЛП(СтрокаКода.Материал.Код);
						//				
						//				Если Найти(ТекстКода, МатериалКод) = 0 Тогда
						//					ТекстКода = ТекстКода + ?(Не ПустаяСтрока(ТекстКода),"; ","") + МатериалКод;
						//				КонецЕсли;
						//				
						//				Если НоваяСтрока.ВариантРасчетаСВ = -1 Тогда
						//					НоваяСтрока.ВариантРасчетаСВ = СтрокаКода.ВариантРасчетаСВ;
						//				КонецЕсли;
						//				
						//			КонецЦикла;
						//			НоваяСтрока.МатериалКод = ТекстКода;
						//		КонецЕсли;
						//	КонецЕсли;
						//КонецЕсли;
						////----m.ionov@a-prof.ru---
						
						НоваяСтрока.Регистратор	 = ВтВыборка.Регистратор;
						НоваяСтрока.Выработано   = ВтВыборка.Количество;
						НоваяСтрока.ВыработаноТонн   = ВтВыборка.КоличествоВыпущеноТонн;
						Если НайдЗнчЦеха <>  Неопределено Тогда
							НоваяСтрока.Цех = НайдЗнчЦеха.Цех;
						КонецЕсли;	
						НоваяСтрока.БрендоОбъем		= ВтВыборка.БрендоОбъем;
						
						Если ПерваяПозиция Тогда
							НоваяСтрока.ВыработаноПозиция  	   = ВтВыборка.Количество;
							НоваяСтрока.ВыработаноТоннПозиция  = ВтВыборка.КоличествоВыпущеноТонн;
							ПерваяПозиция = Ложь;
						КонецЕсли;	
																		
						НоваяСтрока.КоличествоПотери  		  = НоваяСтрока.ФактическийРасход  - НоваяСтрока.Рецептура; 
						
						Если ВыводитьСерии и (НоваяСтрока.Рецептура = 0 ИЛИ НоваяСтрока.ФактическийРасход = 0) Тогда
							НоваяСтрока.КоличествоПотери = 0;
						КонецЕсли;
						
						Если ГруппировкаНоменклатуры Тогда
							НоваяСтрока.РасчетаСВ = "";
						Иначе
							Если НоваяСтрока.ВариантРасчетаСВ = 1 Тогда
								НоваяСтрока.РасчетаСВ = "Пересч-ть на базис";
							иначеЕсли НоваяСтрока.ВариантРасчетаСВ = 2 Тогда
								НоваяСтрока.РасчетаСВ = "Факт+базис";
							иначеЕсли НоваяСтрока.ВариантРасчетаСВ = 3 Тогда
								НоваяСтрока.РасчетаСВ = "Не уч-ть конц.";
							иначеЕсли НоваяСтрока.ВариантРасчетаСВ = -1 Тогда
								НоваяСтрока.РасчетаСВ = "";
							иначе
								НоваяСтрока.РасчетаСВ = "Не пересч-ть";
							КонецЕсли;	
						КонецЕсли;
						
						Если НоваяСтрока.Рецептура = 0 Тогда
							НоваяСтрока.ПроцентПотерь =  ?(ВыводитьСерии,0,100);
						Иначе
						    НоваяСтрока.ПроцентПотерь =  НоваяСтрока.КоличествоПотери  /НоваяСтрока.Рецептура*100;
						КонецЕсли;
						
						//Если Не ТекСтрока.КолВоСебестоимость = 0 Тогда
						//	
						//	Себестоимость = Окр(ТекСтрока.Себестоимость/ТекСтрока.КолВоСебестоимость,2);
						//	
						//	НоваяСтрока.РецептураСумма = НоваяСтрока.Рецептура*Себестоимость;
						//	НоваяСтрока.ФактическийРасходСумма = НоваяСтрока.ФактическийРасход*Себестоимость;
						//	НоваяСтрока.ПотериСумма = НоваяСтрока.КоличествоПотери*Себестоимость;
						//КонецЕсли;	
												
					КонецЦикла; 		   
				КонецЦикла;	
			КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
		
		//ОтборПоНоменклатуре = Новый Массив;
		//ОтборПоНоменклатуреЭлемент = УниверсальныйОтчет.ПостроительОтчета.Отбор.Материал;
		//Если ОтборПоНоменклатуреЭлемент.ВидСравнения = ВидСравнения.Равно Тогда
		//	ОтборПоНоменклатуре.Добавить(ОтборПоНоменклатуреЭлемент.Значение);
		//ИначеЕсли ОтборПоНоменклатуреЭлемент.ВидСравнения = ВидСравнения.ВСписке Тогда
		//	ОтборПоНоменклатуре = ОтборПоНоменклатуреЭлемент.Значение.ВыгрузитьЗначения();
		//Иначе
		//	ОтборПоНоменклатуре = Неопределено;
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(ОтборПоНоменклатуре) Тогда
		//	СтрокиКУдалению = Новый Массив;
		//	Для Каждого СтрокаИтоговойТаблицы Из ИтоговаяТаблица Цикл
		//		ЗапросАналоги.УстановитьПараметр("Номенклатура", СтрокаИтоговойТаблицы.Материал);
		//		ЗапросАналоги.УстановитьПараметр("Продукция", СтрокаИтоговойТаблицы.Продукция);
		//		НоменклатураИАналоги = ЗапросАналоги.Выполнить().Выгрузить().ВыгрузитьКолонку("Аналог");
		//		Если ОтборПоНоменклатуре.Найти(СтрокаИтоговойТаблицы.Материал) <> Неопределено Тогда // найдена сама номенклатура
		//		Иначе
		//			Результат = Ложь;
		//			Для Каждого НоменклатураИАналогиЭлемент Из НоменклатураИАналоги Цикл
		//				Если ОтборПоНоменклатуре.Найти(НоменклатураИАналогиЭлемент) <> Неопределено Тогда
		//					Результат = Истина;
		//					Прервать;
		//				КонецЕсли;
		//			КонецЦикла;
		//			Если Не Результат Тогда
		//				СтрокиКУдалению.Добавить(СтрокаИтоговойТаблицы);
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЦикла;
		//	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		//		ИтоговаяТаблица.Удалить(СтрокаКУдалению);
		//	КонецЦикла;
		//КонецЕсли;
		
		Если ГруппировкаНоменклатуры Тогда
			ИтоговаяТаблица.Свернуть("Материал,МатериалКод",
				"Рецептура,ФактическийРасход,ФактическийРасходБезПересчета,КоличествоПотери,ПроцентПотерь,РецептураСумма,ФактическийРасходСумма,ПотериСумма");
				
				ИтоговаяТаблица.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.ОтчетПроизводстваЗаСмену"));
				ИтоговаяТаблица.Колонки.Добавить("Продукция",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
				ИтоговаяТаблица.Колонки.Добавить("Линия",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
				ИтоговаяТаблица.Колонки.Добавить("Спецификация",Новый ОписаниеТипов("СправочникСсылка.СпецификацииНоменклатуры"));
				ИтоговаяТаблица.Колонки.Добавить("Серия",Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
				ИтоговаяТаблица.Колонки.Добавить("БазисСВ",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,4)));
				
				ИтоговаяТаблица.Колонки.Добавить("СВСерии",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,4)));
				ИтоговаяТаблица.Колонки.Добавить("ВариантРасчетаСВ",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1,0)));
				
				ИтоговаяТаблица.Колонки.Добавить("РасчетаСВ",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(20)));
				ИтоговаяТаблица.Колонки.Добавить("Цех",Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
				ИтоговаяТаблица.Колонки.Добавить("БрендоОбъем",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6,3)));				
				
				ИтоговаяТаблица.Колонки.Добавить("Выработано",ТипКолВа);
				ИтоговаяТаблица.Колонки.Добавить("ВыработаноТонн",ТипКолВа);
				ИтоговаяТаблица.Колонки.Добавить("ВыработаноПозиция",ТипКолВа);
				ИтоговаяТаблица.Колонки.Добавить("ВыработаноТоннПозиция",ТипКолВа); 				
				
		Иначе
			Если ВыводитьСерии Тогда
				ИтоговаяТаблица.Свернуть("Регистратор,Продукция,Линия,Материал,МатериалКод,Спецификация,Серия,БазисСВ,СВСерии,ВариантРасчетаСВ,РасчетаСВ,Цех,БрендоОбъем,Выработано,ВыработаноТонн,ВыработаноПозиция,ВыработаноТоннПозиция,Аналог",
				"Рецептура,ФактическийРасход,ФактическийРасходБезПересчета,КоличествоПотери,ПроцентПотерь,РецептураСумма,ФактическийРасходСумма,ПотериСумма");
				
				ИтоговаяТаблица.Сортировать("Регистратор,Продукция,Линия,Материал,МатериалКод,Серия");
			Иначе
				ИтоговаяТаблица.Свернуть("Регистратор,Продукция,Линия,Материал,МатериалКод,Спецификация,БазисСВ,ВариантРасчетаСВ,РасчетаСВ,Цех,БрендоОбъем,Выработано,ВыработаноТонн,ВыработаноПозиция,ВыработаноТоннПозиция,Аналог",
				"Рецептура,ФактическийРасход,ФактическийРасходБезПересчета,КоличествоПотери,ПроцентПотерь,РецептураСумма,ФактическийРасходСумма,ПотериСумма");		
				
				ИтоговаяТаблица.Сортировать("Регистратор,Продукция,Линия,Материал,МатериалКод");
			КонецЕсли;
		КонецЕсли;
		
		
						
		возврат ИтоговаяТаблица;
		
	КонецФункции	  
	
	Процедура ОбсчитатьДебиторку(ТабличныйДокумент)
		//начало обсчета
		//конец обсчета
		//формирование вр таблиц
		
		ВыводитьВремя = Ложь;
		ТекВремя  = ТекущаяДата();
		
		СтарыйПостроитель   		= УниверсальныйОтчет.ПостроительОтчета;
		ТаблИтоговаяРазвернуто 	    = ОпределитьСвернутоРазвернуто(СтарыйПостроитель);
		
		ТаблИтого					= ПолучитьТаблПотерь(); //ПолучитьРасчитаннуюДебиторку();
		
		//  ТаблИтого.ВыбратьСтроку();
		//ТаблицаДанных				= ТаблИтого;
		//настройки старого построителя
		
		Найстройки 		  	    = СтарыйПостроитель.ПолучитьНастройки(Истина,Истина,Истина,Истина);
		
		//работа с итоговым построителем	  
		ПостроительИтоговый 			= Новый ПостроительОтчета;
		//ПостроительИтоговый.Текст 	= ПолучитьТекстЗапросИтоговый();
		ПостроительИтоговый.Текст 	= ПолучитьТекстЗапросаНастройки(Истина);
		
		ПостроительИтоговый.УстановитьНастройки(Найстройки,Истина,Ложь,Истина,Истина);
		ПостроительИтоговый.ИзмеренияСтроки.Очистить();
		Для каждого ТекИзмерение Из СтарыйПостроитель.ИзмеренияСтроки Цикл
			Поле = СтарыйПостроитель.ДоступныеПоля.Найти(ТекИзмерение.Имя);
			Если Поле <> Неопределено Тогда
				Если ПостроительИтоговый.ВыбранныеПоля.Найти(Поле.Имя) = Неопределено Тогда
					ПостроительИтоговый.ВыбранныеПоля.Добавить(Поле.ПутьКданным,Поле.Имя);
				КонецЕсли;	
			Иначе
				Если ПостроительИтоговый.ВыбранныеПоля.Найти(ТекИзмерение.Имя) = Неопределено Тогда
					ПостроительИтоговый.ВыбранныеПоля.Добавить(ТекИзмерение.ПутьКданным,ТекИзмерение.Имя);
				КонецЕслИ;	
			КонецЕсли;	
		КонецЦикла;	  
		
		Для каждого ТекГруппа ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
			Для Каждого ТекСтрока Из ТекГруппа.Строки Цикл
				Если ТекСтрока.Использование Тогда
					Если ПостроительИтоговый.ВыбранныеПоля.Найти(ТекСтрока.Имя) = Неопределено Тогда
						ПостроительИтоговый.ВыбранныеПоля.Добавить(ТекСтрока.Имя,ТекСтрока.Имя);
					КонецЕсли;	
				КонецЕсли;	   
			КонецЦикла;	  
		КонецЦикла;
		
		ПолеРегистраторЕсть = СтарыйПостроитель.ВыбранныеПоля.Найти("Регистратор") <> Неопределено;
				
		//работа со вспомог-й таблицей
		ЗапросВспомог =  Новый Запрос("ВЫБРАТЬ
		|  ТаблВсп.*
		|  Поместить  ТаблИтого                                   
		|ИЗ
		|	&ТаблИтого КАК ТаблВсп");
		
		ЗапросВспомог.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросВспомог.УстановитьПараметр("ТаблИтого",ТаблИтого);
		
		ЗапросВспомог.Выполнить();
		
		Для каждого ТекИзмерение Из СтарыйПостроитель.ИзмеренияСтроки Цикл
			Поле = ПостроительИтоговый.ИзмеренияСтроки.Добавить(ТекИзмерение.ПутьКДанным,ТекИзмерение.Имя,ТекИзмерение.ТипИзмерения);
			Поле.Представление =  ТекИзмерение.Представление;
		КонецЦикла; 
		
		Если СтарыйПостроитель.Порядок.Количество() > 0 Тогда
			ПостроительИтоговый.Порядок.Очистить();
			Для Каждого ТекПоле Из СтарыйПостроитель.Порядок Цикл
				Если ПустаяСтрока(ТекПоле.Имя) Тогда
					ПостроительИтоговый.Порядок.Добавить(ТекПоле.ПутьКданным,ТекПоле.ПутьКданным,ТекПоле.Представление,ТекПоле.Направление);
				Иначе  
					ПостроительИтоговый.Порядок.Добавить(ТекПоле .Имя,ТекПоле.Имя,ТекПоле.Представление,ТекПоле.Направление);
				КонецЕсли;	
				//Добавить(<Описание>, <Имя>, <Представление>, <Направление>) 
			КонецЦикла;	  
		Иначе	
			
		КонецЕсли; 
		
		//пройдемся по отборам
		Для каждого ТекОтбор ИЗ  СтарыйПостроитель.Отбор Цикл
			Если ТекОтбор.Использование Тогда
				Попытка
					НашОтбор = ПостроительИтоговый.Отбор.Добавить(ТекОтбор.ПутьКданным,ТекОтбор.Имя,ТекОтбор.Представление);
					НашОтбор.Использование  = ТекОтбор.Использование;
					НашОтбор.ВидСравнения   = ТекОтбор.ВидСравнения;
					Если ТипЗнч(ТекОтбор.Значение)  = Тип("СписокЗначений") Тогда
						Список = Новый СписокЗначений;
						Список.ЗагрузитьЗначения(ТекОтбор.Значение.ВыгрузитьЗначения());
						НашОтбор.Значение       = Список;
					Иначе
						НашОтбор.Значение       = ТекОтбор.Значение;
					КонецЕсли;	
				Исключение
				КонецПопытки;	
			КонецЕсли;	
		КонецЦикла;	   	
		
		ПостроительИтоговый.ВыводитьОбщиеИтоги  = УниверсальныйОтчет.ВыводитьОбщиеИтоги;
		ПостроительИтоговый.ВыводитьДетальныеЗаписи  = УниверсальныйОтчет.ВыводитьДетальныеЗаписи;
		ЗапросРезультат  	 					  = ПостроительИтоговый.ПолучитьЗапрос();
		ЗапросРезультат.МенеджерВременныхТаблиц = ЗапросВспомог.МенеджерВременныхТаблиц;
		
		ПозПакета = Найти(ЗапросРезультат.Текст,";");
		Если ПозПакета = 0 Тогда
			Сообщить("Сбой в отчете. Обратитесь к администратору");
			возврат;
		Иначе
			ЗапросРезультат.Текст = Сред(ЗапросРезультат.Текст,ПозПакета+1);
		КонецЕсли;	  
		
		РезЗапрос = ЗапросРезультат.Выполнить();
		//окончание формирование вр таблиц
		
		//**********************Начало изменений
		
		
		//ПолучаемыйМакет = Неопределено;
		УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей,ПостроительИтоговый,истина);	  
		УниверсальныйОтчет.ВывестиДанныеВТабличнДокумент(ТабличныйДокумент,ПостроительИтоговый,РезЗапрос,ЭтотОбъект);
		///ОформитьМакетИхреньМакет(РезЗапрос,ПостроительИтоговый,ПолучаемыйМакет);
		
		///ВывестиДанныеВТабличнДокумент(ТабличныйДокумент,ПолучаемыйМакет,ПостроительИтоговый,РезЗапрос);
		
		//ОформитьМакетИхреньМакет(РезЗапрос,ПостроительИтоговый,ПолучаемыйМакет)
		
		
		
		
		
		возврат;
		//**********************Конец изменений
		
		
		ИстДанных  				= Новый ОписаниеИсточникаДанных(РезЗапрос);
		Для Каждого ТекИзмерение  ИЗ  СтарыйПостроитель.ИзмеренияСтроки Цикл
			ТекКолонка = ИстДанных.Колонки[ТекИзмерение.Имя];
			ТекКолонка.Измерение = Истина;
		КонецЦикла;
		
		Для каждого ТекГруппа ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
			Для Каждого ТекСтрока Из ТекГруппа.Строки Цикл
				Если ТекСтрока.Использование Тогда
					ТекКолонка	   = ИстДанных.Колонки[ТекСтрока.Имя];
					ТекКолонка.Итог  = "Сумма("+ТекСтрока.Имя+")";
				КонецЕсли;	   
			КонецЦикла;	  
		КонецЦикла;	  	  
		
		//построитель в универсальный отчет
		НовыйПостроитель  			  = Новый ПостроительОтчета;
		НовыйПостроитель.ИсточникДанных = ИстДанных; 
		НовыйПостроитель.УстановитьНастройки(Найстройки,Ложь,Истина,Истина,Истина);
		//
		//начало убрать
		//ТабДок  = Новый ТабличныйДокумент;
		//
		//НовыйПостроитель.Выполнить();
		//НовыйПостроитель.Вывести(ТабДок);
		//
		//ТабДок.Показать();
		//конец убрать
		
		УниверсальныйОтчет.ПостроительОтчета = НовыйПостроитель;
		//добавляем показатели
		
		//Для каждого ТекИзмСтроки ИЗ СтарыйПостроитель.ИзмеренияСтроки Цикл
		//	НовыйПостроитель.ИзмеренияСтроки.Добавить(ТекИзмСтроки.ПутьКДанным,ТекИзмСтроки.Имя,ТекИзмСтроки.ТипИзмерения,ТекИзмСтроки.Макет,ТекИзмСтроки.МакетИерархии);
		//КонецЦикла; 
		Если  ПолеРегистраторЕсть Тогда
			УниверсальныйОтчет.мОбязательнаяСортировка = Новый Массив;
			УниверсальныйОтчет.мОбязательнаяСортировка.Добавить("Дата");
			УниверсальныйОтчет.мОбязательнаяСортировка.Добавить("Регистратор");
		Иначе
			УниверсальныйОтчет.мОбязательнаяСортировка = Неопределено;
		КонецЕсли;
		
		УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета,истина);
		УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);
		УниверсальныйОтчет.ПостроительОтчета = СтарыйПостроитель;
		
		// ТаблИтого.ВыбратьСтроку();
		Если ВыводитьВремя Тогда
			Сообщить("оконч Выборка" + (ТекущаяДата()-ТекВремя));
		КонецЕсли;	
		
		возврат;
		
		
		ИстДанных  					  = Новый ОписаниеИсточникаДанных(ТаблИтого);
		ИстДанных.Колонки.Организация.Измерение 		 = Истина;
		ИстДанных.Колонки.Контрагент.Измерение 		 = Истина;
		ИстДанных.Колонки.ДоговорКонтрагента.Измерение = Истина;
		ИстДанных.Колонки.Валюта.Измерение			 = Истина;
		ИстДанных.Колонки.Регистратор.Измерение 	  	 = Истина;
		
		ИстДанных.Колонки.НачОст.Итог			 		 = "Сумма(НачОст)";
		ИстДанных.Колонки.Приход.Итог			 		 = "Сумма(Приход)";
		ИстДанных.Колонки.Расход.Итог			 		 = "Сумма(Расход)";
		ИстДанных.Колонки.КонОст.Итог			 		 = "Сумма(КонОст)";
		//ИстДанных.Колонки.Расход.Итог 			     = Истина;
		//ИстДанных.Колонки.КонОст.Итог				 = Истина;
		ИстДанных.Колонки.Погашено.Итог	 	  	 	 =  "Сумма(Погашено)";
		ИстДанных.Колонки.Просрочено.Итог	 	  	 	 =  "Сумма(Просрочено)";
		
		
		//СтарыйПостроитель.Макет.Показать();
		
		НовыйПостроитель  			  = Новый ПостроительОтчета;
		НовыйПостроитель.ИсточникДанных = ИстДанных; 
		НовыйПостроитель.ИзмеренияСтроки.Очистить();
		НовыйПостроитель.ИзмеренияКолонки.Очистить();
		НовыйПостроитель.ВыбранныеПоля.Очистить();
		
		Найстройки 	= СтарыйПостроитель.ПолучитьНастройки(Истина,Истина,Истина,Истина);
		НовыйПостроитель.УстановитьНастройки(Найстройки,Ложь,Истина,Истина,Истина);
		
		УниверсальныйОтчет.ПостроительОтчета = НовыйПостроитель;
		//добавляем показатели
		
		УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета,истина);
		
		УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);
		УниверсальныйОтчет.ПостроительОтчета = СтарыйПостроитель;
		
		// ТаблИтого.ВыбратьСтроку();
		Если ВыводитьВремя Тогда
			Сообщить("оконч Выборка" + (ТекущаяДата()-ТекВремя));
		КонецЕсли;
		
		возврат;
		//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		//ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать(); //ОбходРезультатаЗапроса.ПоГруппировкам); //Выбрать(); //
		//Пока ВыборкаПоОрганизации.Следующий() Цикл
		//	ВыборкаПоКонтрагентам= ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//	Пока ВыборкаПоКонтрагентам.Следующий() Цикл
		//		 ВыборкаПоДоговорам  = ВыборкаПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//		 Пока ВыборкаПоДоговорам.Следующий() Цикл
		//			 ВыборкаПоВалютам = ВыборкаПоДоговорам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//			 Пока ВыборкаПоВалютам.Следующий() Цикл
		//				  КонОст 	   	   = ВыборкаПоВалютам.ИтогоРасход - ВыборкаПоВалютам.ИтогоПриход;
		//				  
		//				  ИтогоРасход  	   = ВыборкаПоВалютам.ИтогоРасход;
		//				  ИтогоПриход  	   = ВыборкаПоВалютам.ИтогоПриход;
		//				  
		//				  ИтогоРасходНач   = ВыборкаПоВалютам.ИтогоРасходНач;
		//				  ИтогоПриходНач   = ВыборкаПоВалютам.ИтогоПриходНач;
		//				  
		//				  НачОст 		   = ИтогоПриходНач - ИтогоРасходНач;
		//				  
		//				  ЗнакКонОст  	   = ?(КонОст > 0,1,-1);
		//				  ЗнакНачОст  	   = ?(НачОст > 0,1,-1);
		//				  
		//				  ВыборкаДетальная = ВыборкаПоВалютам.Выбрать();
		//				  Пока ВыборкаДетальная.Следующий() Цикл
		//					  Если ЗнакКонОст = 1 Тогда
		//						   КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
		//						   ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
		//					  Иначе // знак -1
		//						   КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
		//						   ИтогоРасход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
		//					  КонецЕсли;	  
		//					   
		//					  Если ЗнакНачОст = 1 Тогда
		//					   		НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
		//					   		ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
		//					  Иначе	
		//					   		НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
		//					   		ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
		//					  КонецЕсли;
		//					   
		//					  Если ВыборкаДетальная.Дата < Дата1 Тогда
		//						   Приход = 0;
		//						   Расход = 0;
		//					  ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
		//						   Приход = ВыборкаДетальная.Приход;
		//						   Расход = ВыборкаДетальная.Расход;
		//					  КонецЕсли;	   
		//					   
		//					  Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
		//						   продолжить;
		//					  КонецЕсли;  
		//					   
		//					  
		//					  НоваяСтрока 	   				  = ТаблИтого.Добавить();
		//					  НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
		//					  НоваяСтрока.ДатаОплаты		  = ВыборкаДетальная.ДатаОплаты;
		//					  НоваяСтрока.Организация		  = ВыборкаДетальная.Организация;
		//					  НоваяСтрока.Контрагент		  = ВыборкаДетальная.Контрагент;
		//					  НоваяСтрока.ДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
		//					  НоваяСтрока.Валюта			  = ВыборкаДетальная.Валюта;
		//					  НоваяСтрока.НачОст			  = НачОст;
		//					  НоваяСтрока.Приход			  = Приход;
		//					  НоваяСтрока.Расход			  = Расход;
		//					  НоваяСтрока.КонОст			  = КонОст;
		//					  
		//				  КонецЦикла; 
		//			 КонецЦикла; 
		//		 КонецЦикла; 
		//	КонецЦикла;	
		//КонецЦикла;	
		
		Если ВыводитьВремя Тогда
			Сообщить("Затрачено "+(ТекущаяДата()-ТекВремя));
		КонецЕслИ;	
		Сообщить(ТаблИтого.Количество());
		//ТаблИтого.ВыбратьСтроку();
	КонецПроцедуры	
	
	
	// Процедура формирования отчета
	//
	Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
		
		Если Не ВыводитьСерии Тогда
			Поле = УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("СВСерии");
			Если Не Поле = Неопределено Тогда
				УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(Поле);
			КонецЕсли;
			
			Поле = УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("Серия");
			Если Не Поле = Неопределено Тогда
				УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(Поле);
			КонецЕсли;
		КонецЕсли;
		
		Если ГруппировкаНоменклатуры Тогда
			Поле = УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("МатериалЕдиницаХраненияОстатков");
			Если Не Поле = Неопределено Тогда
				УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(Поле);
			КонецЕсли;
			
			Поле = УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("МатериалКод");
			Если Не Поле = Неопределено Тогда
				УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(Поле);
			КонецЕсли;
			
			Поле = УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("РасчетаСВ");
			Если Не Поле = Неопределено Тогда
				УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(Поле);
			КонецЕсли;
			
			Поле = УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Найти("БазисСВ");
			Если Не Поле = Неопределено Тогда
				УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(Поле);
			КонецЕсли;
			
		КонецЕсли;
		
		// Перед формирование отчета можно установить необходимые параметры универсального отчета.
		ОбсчитатьДебиторку(ТабличныйДокумент);
		
		возврат;
		
		УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);
		
	КонецПроцедуры // СформироватьОтчет()
	
	Функция ПолучитьТекстСправкиФормы() Экспорт
		
		Возврат "";
		
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
	
	// Процедура обработки расшифровки
	//
	Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
		
		// Дополнительные параметры в расшифровывающий отчет можно передать
		// посредством инициализации переменной "ДополнительныеПараметры".
		
		ДополнительныеПараметры = Неопределено;
		УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
		
	КонецПроцедуры // ОбработкаРасшифровки()
	
	// Формирует структуру для сохранения настроек отчета
	//
	Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
		
		УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
		
	КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()
	
	// Заполняет настройки отчета из структуры сохраненных настроек
	//
	Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
		
		Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
		
	КонецФункции // ВосстановитьНастройкиИзСтруктуры()
	
	Функция ПолучитьТипНоменклатуры(ДатаСреза, Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.Номенклатура,
	               |	МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних.ТипНоменклатуры
	               |ИЗ
	               |	РегистрСведений.МЗ_ДанныеДляРасчетаСебестоимости.СрезПоследних(&ДатаСреза, Номенклатура В (&Номенклатура)) КАК МЗ_ДанныеДляРасчетаСебестоимостиСрезПоследних";
	Запрос.УстановитьПараметр("ДатаСреза", НачалоДня(ДатаСреза));
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	                                                                                 
	РезЗапроса = Запрос.Выполнить().Выбрать();
	Если РезЗапроса.Следующий() Тогда
		Возврат РезЗапроса.ТипНоменклатуры;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
	
	// Содержит значение используемого режима ввода периода.
	// Тип: Число.
	// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
	// Значение по умолчанию: 0
	// Пример:
	// УниверсальныйОтчет.мРежимВводаПериода = 1;
	
#КонецЕсли