Перем мВалютаРегламентированногоУчета;

#Если Клиент Тогда
	
// процедура формирует и выводит отчет по движениям документа
Процедура СформироватьИВывестиОтчет() Экспорт
	
	ДокументДляВывода = Новый ТабличныйДокумент;
	ВозможностьПостроения = СформироватьОтчет(ДокументДляВывода);
	Если ВозможностьПостроения Тогда
		ДокументДляВывода.Показать("Справка-расчет """"Рублевая сумма документа в иностранной валюте""");
	КонецЕсли;	
	
КонецПроцедуры
	
Функция СформироватьОтчет(ДокументРезультат) Экспорт

	Если НЕ Документ.Проведен Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка-расчет формируется только по проведенным документам.");
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(Документ);
	
	//Определение необходимых параметров документа
	
	Если НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВБухгалтерскомУчете") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе не найден реквизит ""Отражать в бухгалтерском учете""");
		Возврат Ложь;
	ИначеЕсли НЕ СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка-расчет формируется только по документам, отраженным в бухгалтерском учете");
		Возврат Ложь;
	КонецЕсли;
	
	Если  СтруктураШапкиДокумента.Свойство("ВидДокумента") Тогда
		ВидДокумента = СтруктураШапкиДокумента.ВидДокумента;
	Иначе
		ВидДокумента = Документ.Метаданные().Имя;
	КонецЕсли;
	Если  СтруктураШапкиДокумента.Свойство("ВидОперации") Тогда
		ВидОперации = СтруктураШапкиДокумента.ВидОперации;
	Иначе
		ВидОперации = Неопределено;
	КонецЕсли;
	ПараметрыДвиженийДокумента = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента, ВидОперации);
	НаправлениеДвижения = ПараметрыДвиженийДокумента.Направление;
	Если НЕ (НаправлениеДвижения = "Поступление" ИЛИ НаправлениеДвижения = "Выбытие") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка-расчет формируется только по документам, отражающим операции приобретения или реализации");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.Свойство("ВалютаДокумента") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе не найден реквизит ""Валюта документа""");
		Возврат Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ВалютаДокумента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе не заполнен реквизит ""Валюта документа""");
		Возврат Ложь;
	ИначеЕсли СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка-расчет формируется только по документам в иностранной валюте");
		Возврат Ложь;
	КонецЕсли;
	
	ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
	
		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности 
			ИЛИ ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Справка-расчет формируется по операции реализации покупателю.");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = "ПоступлениеТоваровУслуг" Тогда
	
		Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
			Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Справка-расчет формируется по операции поступления от поставщика.");
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.Свойство("СчетУчетаРасчетовСКонтрагентом") Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе не найден реквизит ""Счет расчетов с контрагентом""");
		Возврат Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе не заполнен реквизит ""Счет расчетов с контрагентом""");
		Возврат Ложь;
	КонецЕсли;
	
	РасчетыВВалюте = НЕ ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	СтруктураКурса20071231 = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации КАК РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации
	|ГДЕ
	|	РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Регистратор = &Регистратор
	|	И РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации.Документ = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
	|ГДЕ
	|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор = &Регистратор
	|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Документ = НЕОПРЕДЕЛЕНО";
	Запрос.УстановитьПараметр("Регистратор", Документ);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОбщегоНазначения.СообщитьОбОшибке("Для формирования справки-расчета необходимо выполнить восстановление последовательностей расчетов по организации """ 
			+ СтруктураШапкиДокумента.Организация + """");
		Возврат Ложь;
	КонецЕсли;
	
	Если НаправлениеДвижения = "Поступление" Тогда
		НарушенаПоследовательность = НЕ Последовательности.РасчетыПоПриобретениюОрганизации.Проверить(
			Документ.МоментВремени(), Новый Структура("Организация", СтруктураШапкиДокумента.Организация));
		Если НарушенаПоследовательность Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Граница последовательности по приобретению находится ранее документа, данные справки-расчета могут быть неверными.",
				, , СтатусСообщения.Внимание);
		КонецЕсли;
	Иначе
		НарушенаПоследовательность = НЕ Последовательности.РасчетыПоРеализацииОрганизации.Проверить(
			Документ.МоментВремени(), Новый Структура("Организация", СтруктураШапкиДокумента.Организация));
		Если НарушенаПоследовательность Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Граница последовательности по реализации находится ранее документа, данные справки-расчета могут быть неверными.",
				, , СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Рег.Документ КАК ДокументАванса,
	|	Рег.ДатаОплаты КАК ДатаАванса,
	|	СУММА(Рег.СуммаВзаиморасчетов) КАК ВалютнаяСуммаОборот,
	|	СУММА(Рег.СуммаРег) КАК СуммаОборот
	|ИЗ
	|	РегистрНакопления.РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации КАК Рег
	|ГДЕ
	|	Рег.Регистратор = &Регистратор
	|	И Рег.Документ <> &Регистратор
	|	И Рег.СчетОплаты = &СчетУчетаРасчетовПоАвансам
	|
	|СГРУППИРОВАТЬ ПО
	|	Рег.Документ,
	|	Рег.ДатаОплаты";
	Запрос.УстановитьПараметр("СчетУчетаРасчетовПоАвансам", СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам);
	
	Если НаправлениеДвижения <> "Поступление" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыПоПриобретениюВУсловныхЕдиницахОрганизации", "РасчетыПоРеализацииВУсловныхЕдиницахОрганизации");
	КонецЕсли;
	Запрос.Текст       = ТекстЗапроса;
	Результат          = Запрос.Выполнить();
	СтрокиЗачетаАванса = Результат.Выгрузить();
	КурсДокумента      = ?(СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, СтруктураШапкиДокумента.КурсВзаиморасчетов);
	КратностьДокумента = ?(СтруктураШапкиДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
	
	СуммаДокументаВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтруктураШапкиДокумента.СуммаДокумента,
		СтруктураШапкиДокумента.ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов,
		КурсДокумента, СтруктураШапкиДокумента.КурсВзаиморасчетов,
		КратностьДокумента, СтруктураШапкиДокумента.КратностьВзаиморасчетов);
	
	ТаблицаАвансов = Новый ТаблицаЗначений();
	ТаблицаАвансов.Колонки.Добавить("Документ");
	ТаблицаАвансов.Колонки.Добавить("ДатаДокумента", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаАвансов.Колонки.Добавить("Сумма",		 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаАвансов.Колонки.Добавить("СуммаВал",	     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Если СтрокиЗачетаАванса.Количество() <> 0 Тогда
		
		//Заполнение таблицы значениями зачитываемых авансов.
		Для каждого СтрокаЗачетаАванса Из СтрокиЗачетаАванса Цикл
			
			ДокументАванса = СтрокаЗачетаАванса.ДокументАванса;
			ДатаАванса = СтрокаЗачетаАванса.ДатаАванса;
			
			СтрокаАвансов = ТаблицаАвансов.Добавить();
			
			СтрокаАвансов.Документ	     = ДокументАванса;
			СтрокаАвансов.ДатаДокумента = ДатаАванса;
			СтрокаАвансов.СуммаВал      = СтрокаЗачетаАванса.ВалютнаяСуммаОборот;
			
			// При расчетах в валюте:
			// - ранее 2008 года руб.сумма аванса определяется по курсу документа,
			// - в 2008 году при зачете аванса 2007 года руб.сумма аванса определяется по курсу на 31.12.2007.
			Если НЕ РасчетыВВалюте Тогда
				СтрокаАвансов.Сумма = СтрокаЗачетаАванса.СуммаОборот;
			ИначеЕсли СтруктураШапкиДокумента.Дата >= '20080101' И ДатаАванса >= '20080101' Тогда
				СтрокаАвансов.Сумма = СтрокаЗачетаАванса.СуммаОборот;
			ИначеЕсли СтруктураШапкиДокумента.Дата >= '20080101' И ДатаАванса < '20080101' Тогда
				Если СтруктураКурса20071231 = Неопределено Тогда
					СтруктураКурса20071231 = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, '20071231');
				КонецЕсли;
				СтрокаАвансов.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗачетаАванса.ВалютнаяСуммаОборот,
					ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
					СтруктураКурса20071231.Курс, 1,
					СтруктураКурса20071231.Кратность, 1);
			Иначе
				СтрокаАвансов.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаЗачетаАванса.ВалютнаяСуммаОборот,
					ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
					СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
					СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	ОбнаруженАванс = (ТаблицаАвансов.Количество() > 0);
	Если ОбнаруженАванс Тогда
		ТаблицаАвансов.Свернуть("ДатаДокумента, Документ", "Сумма, СуммаВал");
		ТаблицаАвансов.Сортировать("ДатаДокумента возр, Документ возр");
	КонецЕсли;
	
	СуммаПредоплатыВал = ТаблицаАвансов.Итог("СуммаВал");
	СуммаПредоплатыРуб = ТаблицаАвансов.Итог("Сумма");
	КурсПредоплаты     = ?(СуммаПредоплатыВал <> 0, Окр(СуммаПредоплатыРуб / СуммаПредоплатыВал, 4), 0);
	
	СуммаНеоплаченоВал = СуммаДокументаВал - СуммаПредоплатыВал;
	КурсДокумента = СтруктураШапкиДокумента.КурсВзаиморасчетов;
	
    // Определим рублевый эквивалент неоплаченной суммы
	
	Если СуммаНеоплаченоВал <> 0 Тогда
		Если СтруктураШапкиДокумента.ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		    // Документ выписан в валюте, рублевый остаток определяем по курсу расчетов
			СуммаНеоплаченоРуб = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНеоплаченоВал,
				ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
				СтруктураШапкиДокумента.КурсВзаиморасчетов, 1,
				СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
        Иначе
		    // Документ выписан в рублях (расчеты в у.е.), рублевый остаток определяем пропорционально валютному
			СуммаНеоплаченоРуб = Окр(СтруктураШапкиДокумента.СуммаДокумента * СуммаНеоплаченоВал/СуммаДокументаВал, 2);
		КонецЕсли;
	Иначе
		СуммаНеоплаченоРуб = 0;
	КонецЕсли; 
	
	СуммаДокументаРуб = СуммаПредоплатыРуб + СуммаНеоплаченоРуб;
	РасчетныйКурсВал  = ?(СуммаДокументаВал <> 0, Окр(СуммаДокументаРуб / СуммаДокументаВал, 4), 0);
	
	ДокументРезультат.Очистить();
	
	Макет = ПолучитьМакет("РублеваяСуммаДокументаВВалюте");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	
	ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата), "ПолноеНаименование,");
	ОбластьШапка.Параметры.ОрганизацияПредставление = ОрганизацияПредставление;
	
	ОбластьШапка.Параметры.Дата = Формат(СтруктураШапкиДокумента.Дата, "ДФ=dd.MM.yyyy");
	
	КонтрагентПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(СтруктураШапкиДокумента.Контрагент, СтруктураШапкиДокумента.Дата), "ПолноеНаименование,");
	ОбластьШапка.Параметры.КонтрагентПредставление	= КонтрагентПредставление;
	ОбластьШапка.Параметры.Контрагент				= СтруктураШапкиДокумента.Контрагент;
	
	ОбластьШапка.Параметры.ДокументПредставление	= Строка(СтруктураШапкиДокумента.Ссылка);
	ОбластьШапка.Параметры.ВалютаПредставление		= Строка(СтруктураШапкиДокумента.ВалютаДокумента);
	ОбластьШапка.Параметры.Документ 				= СтруктураШапкиДокумента.Ссылка;
	
	ДокументРезультат.Вывести(ОбластьШапка);
	
	ОбластьПоказатели = Макет.ПолучитьОбласть("Показатели");
	
	ОбластьПоказатели.Параметры.СуммаДокументаВал		= СуммаДокументаВал;
	ОбластьПоказатели.Параметры.СуммаПредоплатыВал		= СуммаПредоплатыВал;
	ОбластьПоказатели.Параметры.СуммаПредоплатыРуб		= СуммаПредоплатыРуб;
	ОбластьПоказатели.Параметры.КурсПредоплаты			= КурсПредоплаты;
	ОбластьПоказатели.Параметры.СуммаНеоплаченоВал		= СуммаНеоплаченоВал;
	ОбластьПоказатели.Параметры.КурсДокумента			= КурсДокумента;
	ОбластьПоказатели.Параметры.СуммаНеоплаченоРуб		= СуммаНеоплаченоРуб;
	ОбластьПоказатели.Параметры.СуммаДокументаРуб		= СуммаДокументаРуб;
	ОбластьПоказатели.Параметры.РасчетныйКурсВал		= РасчетныйКурсВал;
	
	ДокументРезультат.Вывести(ОбластьПоказатели);
	
	Если ОбнаруженАванс Тогда
		
		ДокументРезультат.Вывести(Макет.ПолучитьОбласть("ШапкаПредоплата"));
		
       	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаПредоплата");
		
		Для Каждого Аванс из ТаблицаАвансов Цикл
			ОбластьСтрока.Параметры.ДокументПредоплатыПредставление = Строка(Аванс.Документ);
			ОбластьСтрока.Параметры.СуммаПредоплатыВал = Аванс.СуммаВал;
			ОбластьСтрока.Параметры.СуммаПредоплатыРуб = Аванс.Сумма;
			ДокументРезультат.Вывести(ОбластьСтрока);
		КонецЦикла;
		
	   	ОбластьПодвалПредоплата = Макет.ПолучитьОбласть("ПодвалПредоплата");
		ОбластьПодвалПредоплата.Параметры.СуммаПредоплатыВал = СуммаПредоплатыВал;
		ОбластьПодвалПредоплата.Параметры.СуммаПредоплатыРуб = СуммаПредоплатыРуб;
		ДокументРезультат.Вывести(ОбластьПодвалПредоплата);
		
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ДокументРезультат.Вывести(ОбластьПодвал);
	
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
	ДокументРезультат.ОтображатьСетку     = Ложь;
	ДокументРезультат.ТолькоПросмотр      = Истина;
	ДокументРезультат.Автомасштаб         = Истина;

	Возврат Истина;
	
КонецФункции

#КонецЕсли 

мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");
