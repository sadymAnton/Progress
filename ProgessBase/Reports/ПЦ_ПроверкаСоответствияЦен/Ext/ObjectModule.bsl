Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	//++ Spl_Апроф 16.10.2014 (k.russkih@a-prof.ru)
	
	//#Если Клиент Тогда
	//	ЕстьОтборы = Ложь;
	//	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	//	
	//	Для i = 0 по ЭлементыОтбора.Количество()-1 Цикл
	//		ЭлементСтарый = ЭлементыОтбора.Получить(i);
	//		Если ЭлементСтарый.Использование Тогда
	//			ЕстьОтборы = Истина;
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	Если Не ЕстьОтборы Тогда
	//		Если Не Вопрос("Не установлены отборы в отчете, отчет по всем клиентам будет выполнятся несколько часов. Все равно продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
	//			Возврат Неопределено;
	//		КонецЕсли;
	//	КонецЕсли;
	//#КонецЕсли
	
	СтруктураВнешнихДанных = Новый Структура;
	СтруктураВнешнихДанных.Вставить("ТаблицаАдресаПоставки_ТипыЦен", СформируемТаблица_АдресаПоставки_ТипыЦен());
	//-- Spl_Апроф
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, СтруктураВнешнихДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
		
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Функция СформируемТаблица_АдресаПоставки_ТипыЦен()
	   	
	// Обработка механизма разузлования
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	мСхемаКомпоновки = ПолучитьМакет("СхемаКомпоновкиДанныхДляРасчета");
	
	НовыеНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		
	Для i = 0 по ЭлементыОтбора.Количество()-1 Цикл
		
		ЭлементСтарый = ЭлементыОтбора.Получить(i);
		
		ЭлементНовый = НовыеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементНовый.ВидСравнения   = ЭлементСтарый.ВидСравнения;
		ЭлементНовый.Использование  = ЭлементСтарый.Использование;
		ЭлементНовый.ЛевоеЗначение  = ЭлементСтарый.ЛевоеЗначение;
		ЭлементНовый.ПравоеЗначение = ЭлементСтарый.ПравоеЗначение;
		
	КонецЦикла; 
	
	//Доп. отбор
	//ТиповыеОтчеты.ДобавитьОтбор(НовыеНастройки.Отбор, "Заказ", СписокЗаказов, ВидСравненияКомпоновкиДанных.ВСписке);	
	
		
	//ДатаЦен = КонецДня(ТекущаяДата());
	//ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	//Если ПараметрНачалоПериода <> Неопределено Тогда
	//	
	//	мПараметрНачалоПериода = НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	//	Если мПараметрНачалоПериода <> Неопределено Тогда
	//		мПараметрНачалоПериода.Использование = Истина;
	//		//ДатаЦен = КонецДня(ПараметрНачалоПериода.Значение);
	//		мПараметрНачалоПериода.Значение = ПараметрНачалоПериода.Значение;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		
		мПараметрНачалоПериода = НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		Если мПараметрНачалоПериода <> Неопределено Тогда
			мПараметрНачалоПериода.Использование = Истина;
			мПараметрНачалоПериода.Значение = ПараметрНачалоПериода.Значение;
		Иначе
			мПараметрНачалоПериода = НовыеНастройки.ПараметрыДанных.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(мПараметрНачалоПериода, ПараметрНачалоПериода);
			//УстановитьЗначениеПараметра("НачалоПериода", ПараметрНачалоПериода.Значение);
		КонецЕсли;
				
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
				
		мПараметрКонецПериода = НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		Если мПараметрКонецПериода <> Неопределено Тогда
			мПараметрКонецПериода.Использование = Истина;
			мПараметрКонецПериода.Значение = ПараметрКонецПериода.Значение;
		Иначе
			мПараметрКонецПериода = НовыеНастройки.ПараметрыДанных.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(мПараметрКонецПериода, ПараметрКонецПериода);

		КонецЕсли;
		
	КонецЕсли;

	  	
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, ЭтотОбъект.КомпоновщикНастроек.Настройки,,, тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, НовыеНастройки,,, тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , );
				
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	//ДатаЦен = ТекущаяДата();
	
	//Результат.Колонки.Добавить("Регион");
	//Результат.Колонки.Добавить("КаналПродаж");
	//Результат.Колонки.Добавить("ПроектГП");
	//Результат.Колонки.Добавить("УсловиеПоставки");
	
	ВсегоКол = Результат.Количество();
	ОбработаноСтрок = 0;
	Сч = 0;
	Пока Сч < Результат.Количество() Цикл
		
		Строка = Результат[Сч];
		
		ОбработаноСтрок = ОбработаноСтрок + 1;
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			Состояние("Обработка результата запроса " + СокрЛП(ОбработаноСтрок) + "/" + СокрЛП(ВсегоКол));
		#КонецЕсли	
		
		Если Не ЗначениеЗаполнено(Строка.Контрагент) Тогда
			Результат.Удалить(Сч);
			Продолжить;
		КонецЕсли;
		
		//Строка.Регион = ?(ЗначениеЗаполнено(Строка.АдресПоставки),Строка.АдресПоставки.НСИ_Регион,Строка.Контрагент.НСИ_Регион);
		//Строка.ПроектГП = Строка.Номенклатура.Проект;
		//Строка.КаналПродаж = ?(ЗначениеЗаполнено(Строка.АдресПоставки),Строка.АдресПоставки.НСИ_КаналПродаж,Строка.Контрагент.НСИ_КаналПродаж);
		//Строка.УсловиеПоставки = ?(ЗначениеЗаполнено(Строка.АдресПоставки),Строка.АдресПоставки.НСИ_УсловияПоставки,Строка.Контрагент.НСИ_УсловияПоставки);
		
		//{25.01.2016 Островерхий заявка №б/н 
		ПЦ_ДатаЦены = ПЦ_Ценообразование.ПолучимДатуЦеныПоОтсрочкеПовышенияЦены(Строка.Накладная.Дата,
			Строка.Контрагент.Дивизион, Строка.АдресПоставки.НСИ_КаналПродаж, Строка.Контрагент, Строка.Регион, Строка.Контрагент.НСИ_Вывеска, 		
			Строка.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),Строка.ПроектГП, 
			Строка.Номенклатура.НСИ_ТоварнаяКатегория, Строка.Номенклатура.НСИ_Брендообъем,Строка.АдресПоставки); 
			
		ДатаЦен = ?(ПЦ_ДатаЦены = Дата(1,1,1), Строка.Накладная.Дата, ПЦ_ДатаЦены);	
		//25.01.2016 Островерхий}

		//{23.03.2016 Островерхий заявка №б/н 
		//СпТипЦен = ПЦ_Ценообразование.ПолучитьТипЦенПродажи(КонецДня(Строка.Накладная.Дата), 
		СпТипЦен = ПЦ_Ценообразование.ПолучитьТипЦенПродажи(КонецДня(ДатаЦен),
		//23.03.2016 Островерхий} 
		 
														Строка.Регион,
														Строка.ПроектГП,
														Строка.КаналПродаж,
														Строка.УсловиеПоставки,
														Строка.Контрагент,
														Справочники.ДоговорыКонтрагентов.ПустаяСсылка(),
														Строка.АдресПоставки,
														Строка.Номенклатура.НСИ_ТоварнаяКатегория,
														Строка.Номенклатура.НСИ_Брендообъем,
														Строка.Номенклатура,
														Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
		Если СпТипЦен.Количество() = 1 Тогда
			Строка.ТипЦены = СпТипЦен[0].Значение;
		ИначеЕсли СпТипЦен.Количество() = 0 Тогда
			Строка.ТипЦены = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
			//Результат.Удалить(Сч);
			//Продолжить;
		Иначе
			Строка.ТипЦены = СпТипЦен[0].Значение;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.ТипЦены) Тогда
			Строка.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Строка.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),
										Строка.ТипЦены, ДатаЦен, Строка.Номенклатура.ЕдиницаХраненияОстатков,
										Строка.Накладная.ВалютаДокумента, Строка.Накладная.КурсВзаиморасчетов, Строка.Накладная.КратностьВзаиморасчетов, ,
										Справочники.ДоговорыКонтрагентов.ПустаяСсылка(),
										Неопределено,
										Строка.АдресПоставки, 
										Строка.Контрагент);
			//Нужно привести к НДС у накладной
			Если Строка.ТипЦены.ЦенаВключаетНДС = Строка.Накладная.СуммаВключаетНДС Тогда
				//НДС совпадает
			Иначе
				Строка.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Строка.Цена,
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
						Строка.ТипЦены.ЦенаВключаетНДС,
						Строка.Накладная.УчитыватьНДС,
						Строка.Накладная.СуммаВключаетНДС,
						//m.ionov@a-prof.ru 04.03.2015
						УчетНДС.ПолучитьСтавкуНДС(Строка.СтавкаНДС));
						//УчетНДС.ПолучитьСтавкуНДС(Строка.Номенклатура.СтавкаНДС));
						//----m.ionov@a-prof.ru---
				Строка.Цена = Окр(Строка.Цена,2);
			КонецЕсли;
		Иначе
			Строка.Цена = 0;
		КонецЕсли;
		
	    Сч = Сч + 1;
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции

#КонецЕсли

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		ПараметрКонецПериода.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДоработатьКомпоновщикПередВыводом()

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
