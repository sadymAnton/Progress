Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	СтруктураНабораДанных = ПолучитьВнешнийНаборДанных();
	
	НаборДанных = СтруктураНабораДанных.НаборДанных;
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, НаборДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
	ОбластьЗаголовок = Результат.Области.Найти("Заголовок");
	ОбластьПоказателей = Результат.Область(ОбластьЗаголовок.Верх + 1,1);
	
	ТекстПоказателей = "Месяц: " + Формат(СтруктураНабораДанных.Период,"ДФ='ММММ гггг'") + " г.";
	ТекстПоказателей = ТекстПоказателей + Символы.ПС + "Организация: " + СтруктураНабораДанных.Организация;
	ТекстПоказателей = ТекстПоказателей + Символы.ПС + "Оценочное обязательство: " + СтруктураНабораДанных.Резерв;
	ТекстПоказателей = ТекстПоказателей + Символы.ПС + "Размер отчислений: " + Формат(СтруктураНабораДанных.ПроцентОтчислений,"ЧДЦ=2") + " %";
	
	ОбластьПоказателей.Текст = ТекстПоказателей;
	
	Возврат Результат;
		
КонецФункции

Функция ПолучитьВнешнийНаборДанных()
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	Организация = ЗначениеПараметра.Значение;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Резерв"));
	Резерв = ЗначениеПараметра.Значение;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("Дата") Тогда
		ПериодРегистрации = ЗначениеПараметра.Значение;
	Иначе
		ПериодРегистрации = ЗначениеПараметра.Значение.Дата;
	КонецЕсли; 
	
	СтруктураЗначенияПеременных = ОтражениеЗарплатыВРеглУчетеДополнительный.ПолучитьСтруктураПараметровПеременныхВеденияУчета(Организация, ПериодРегистрации);
	
	ПорядокРасчетаОценочныхОбязательств = СтруктураЗначенияПеременных.ОценочныеОбязательстваПорядокРасчета;
	ЕстьЕНВД = СтруктураЗначенияПеременных.ОрганизацияЯвляетсяПлательщикомЕНВД;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("парамПериодРегистрации",ПериодРегистрации);
	Запрос.УстановитьПараметр("ЕстьЕНВД", ЕстьЕНВД);
	Запрос.УстановитьПараметр("ПоВсемРезервам", Ложь);
	Запрос.УстановитьПараметр("Резерв", Резерв);
	
	Запрос.Текст = ОтражениеЗарплатыВРеглУчетеДополнительный.ПолучитьТекстЗапросаРасчетОценочныхОбязательств(ПорядокРасчетаОценочныхОбязательств);
	
	ТаблицаОтражения = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОтражения.Свернуть("ВидРасчета,ПроцентОтчислений","РазмерОтчислений,РазмерОтчисленийФССНесчастныеСлучаи,РазмерОтчисленийВзносы,Результат,РезультатВзносы,РезультатВзносыФССНесчастныеСлучаи");
	
	ПроцентОтчислений = 0;
	
	Если ТаблицаОтражения.Количество() > 0 Тогда
		
		ПроцентОтчислений =  ТаблицаОтражения[0].ПроцентОтчислений;
		
	КонецЕсли; 
	
	ВозвращаемаяСтруктура = Новый Структура("Период,Организация,Резерв,ПроцентОтчислений,НаборДанных",
			ПериодРегистрации,
			Организация,
			Резерв,
			ПроцентОтчислений,
			Новый Структура("ОценочныеОбязательства", ТаблицаОтражения));
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	СписокПолейПодстановкиОтборовПоУмолчанию.Вставить("Организация", "ОсновнаяОрганизация");
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию,
	|СписокДоступныхПредопределенныхНастроек,
	|МинимальныйПериодОтчета", 
	ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию,, "Месяц");

КонецФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

