Перем мВалютаРегламентированногоУчета Экспорт;
Перем ТаблДок;
Перем мТаблДокКонтрольный Экспорт;
Перем мРежимЗапросаИсточников; // 0 - все данные одим запросом, 1 - на каждый счет запрос пакета
Перем мРежимПакетногоЗапроса;
Перем мТаблицаПакетаЗапросов;
Перем мГруппаОрганизаций Экспорт;
Перем мМаксимальноеКоличествоГруппировокДинамическихСтрок;
Перем мОтчетВВалюте;
Перем мКурсНаКонец;
Перем мКурсНаКонецПрошлогоПериода;
Перем мСтек;
Перем мОрганизация;
Перем мТаблицаМакетов;
Перем мТаблицаКонтрольныхСчетов;
Перем мКонтрольныйРезультат;
Перем ТаблицаИсточников Экспорт;
Перем ТаблицаВыражений Экспорт;
Перем мДеревоДинамическихСтрок;
Перем ВыводИзмерение;
Перем мТекущаяСтраница;
Перем ПустышкаТаблицыЗначений;
Перем Макет;
Перем Вывод1,Вывод2,Вывод3,ВыводГ1,ВыводГ2,ВыводГ3;
Перем мТаблицаИмен;
Перем мТаблицаРегистровБухгалтерии Экспорт;
Перем МассивПериодов;
Перем мТаблицаИтогов;
Перем мШаблон;
Перем ДеревоСтрок;
Перем мСтрокаОбъединения;
Перем мПС;
Перем мПериодРасшифровки Экспорт;
Перем мЗначениеОтбораПоПодразделению;
Перем мВидСравненияОтбораПоПодразделению;
Перем мОтборПоПодразделению;
Перем мОтборПоПодразделениюСчет;
Перем мОтборПоПодразделениюКорСчет;
Перем мШаблонТаблицыИсточников;
Перем мТаблицаСпецсчетов;
Перем мТаблицаСпецостатков;
Перем мРежимПривязкиИсточникаКСтроке;
Перем мСтрокиСДинамическимиГруппировками;
Перем мНастройкаДинамическиеСтроки;
Перем мТаблицаДинамическихБлоков;
Перем мТаблицаДеревьевДругихОтчетов Экспорт;
//++ИС Куприянова Е.В. 30.05.2013
//строки, у которых пустые все подчиненные выводить не нужно
Перем СтрокиОтчета_в_Макет;
Перем Родитель_КОНТРОЛЬ;
//--ИС Куприянова Е.В. 30.05.2013

//Машков 01.07.2013 [000002580],[I-1С_КОРП-MSC-2013-00543]+++
Перем СохраненнаяНастройка Экспорт;
//Машков 01.07.2013 [000002580],[I-1С_КОРП-MSC-2013-00543]---

//++Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
Перем ТаблицаНастроекОформления;
//--Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222

/// ЭКСПОРТНЫЕ ФУНКЦИИ
Функция Печать(ОтборПоПодразделению, ЗначениеОтбораПоПодразделению, ВидСравненияОтбораПоПодразделению) Экспорт
	мОтборПоПодразделению = ОтборПоПодразделению;
	мВидСравненияОтбораПоПодразделению = ВидСравненияОтбораПоПодразделению;
	мЗначениеОтбораПоПодразделению = ЗначениеОтбораПоПодразделению;
	мНастройкаДинамическиеСтроки = Настройка.ДинамическиеСтроки;
	
	мТаблицаДеревьевДругихОтчетов = Новый ТаблицаЗначений;
	мТаблицаДеревьевДругихОтчетов.Колонки.Добавить("Настройка");
	мТаблицаДеревьевДругихОтчетов.Колонки.Добавить("ДеревоСтрок");
	мТаблицаДеревьевДругихОтчетов.Колонки.Добавить("ТаблицаВыражений");
	
//++ИС Куприянова Е.В. 30.05.2013
//строки, у которых пустые все подчиненные выводить не нужно
	Родитель_КОНТРОЛЬ = НЕОПРЕДЕЛЕНО;
	СтрокиОтчета_в_Макет = Новый ДеревоЗначений();
	СтрокиОтчета_в_Макет.Колонки.Добавить("СтрокаОтчета");
	СтрокиОтчета_в_Макет.Колонки.Добавить("НеНулевая");
	СтрокиОтчета_в_Макет.Колонки.Добавить("СтрокаВМакете");
	СтрокиОтчета_в_Макет.Колонки.Добавить("ОбластьВМакете");
//--ИС Куприянова Е.В. 30.05.2013
	
//++Куприянова Е.В. 14.08.2013 исправление критической ошибки		
//	мРежимПривязкиИсточникаКСтроке = Настройка.ДополнительныйОтборПоИзмерениям ИЛИ ОтборПоПодразделению ИЛИ мНастройкаДинамическиеСтроки;
	Если Настройка.ВидИсточника.РегистрБухгалтерии<>"isGAAP" Тогда
		мРежимПривязкиИсточникаКСтроке = Настройка.ДополнительныйОтборПоИзмерениям  ИЛИ мНастройкаДинамическиеСтроки;
	Иначе	
		мРежимПривязкиИсточникаКСтроке = Настройка.ДополнительныйОтборПоИзмерениям ИЛИ ОтборПоПодразделению ИЛИ мНастройкаДинамическиеСтроки;
	КонецЕсли;	
	МассивПодразделений = НЕОПРЕДЕЛЕНО;
	Если мВидСравненияОтбораПоПодразделению = ВидСравнения.ВИерархии ИЛИ
		мВидСравненияОтбораПоПодразделению = ВидСравнения.НеВИерархии 
						
	Тогда
		МассивПодразделений = Новый Массив();
		МассивПодразделений.Добавить(мЗначениеОтбораПоПодразделению);
	ИначеЕсли мВидСравненияОтбораПоПодразделению = ВидСравнения.ВСпискеПоИерархии ИЛИ 
			 мВидСравненияОтбораПоПодразделению = ВидСравнения.НеВСпискеПоИерархии 	
    Тогда
		МассивПодразделений = мЗначениеОтбораПоПодразделению.ВыгрузитьЗначения();
	КонецЕсли;
	Если МассивПодразделений<>НЕОПРЕДЕЛЕНО Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		                       |	ПодразделенияОрганизаций.Ссылка КАК Ссылка
		                       |ИЗ
		                       |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		                       |ГДЕ
		                       |	ПодразделенияОрганизаций.Ссылка В ИЕРАРХИИ(&МассивПодразделений)");
		Запрос.УстановитьПараметр("МассивПодразделений", МассивПодразделений);
		мЗначениеОтбораПоПодразделению = Новый СписокЗначений();
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			мЗначениеОтбораПоПодразделению.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;	
		Если мВидСравненияОтбораПоПодразделению = ВидСравнения.ВИерархии ИЛИ
			мВидСравненияОтбораПоПодразделению = ВидСравнения.ВСпискеПоИерархии
							
		Тогда
			мВидСравненияОтбораПоПодразделению = ВидСравнения.ВСписке;
		ИначеЕсли мВидСравненияОтбораПоПодразделению = ВидСравнения.НеВИерархии ИЛИ   
				 мВидСравненияОтбораПоПодразделению = ВидСравнения.НеВСпискеПоИерархии 	
	    Тогда
			мВидСравненияОтбораПоПодразделению = ВидСравнения.НеВСписке;
		КонецЕсли;
	КонецЕсли;	
//--Куприянова Е.В. 14.08.2013 исправление критической ошибки		
	
	мТаблДокКонтрольный = Неопределено;
	ТаблДок = Новый ТабличныйДокумент;
	мРежимЗапросаИсточников = РежимВыборкиДанных;
	Если НЕ ЗначениеЗаполнено(Настройка) Тогда
		Сообщить("Не выбрана настройка отчета!");
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ДатаКонца) Тогда
		Сообщить("Установите корректный интервал дат!");
		Возврат Неопределено;
	КонецЕсли;
	Если Настройка = Справочники.isНастройкиОтчетовПЭО.Отчет18_ОФ Тогда
		Отчет = Отчеты.isОтчетПоОСиАмортизации_ПЭО.Создать();
		Отчет.мфУстановитьНастройки(ДатаНачала, КонецДня(ДатаКонца), ?(мГруппаОрганизаций.Количество()>0, мГруппаОрганизаций, Организация), ЕдиницаИзмерения, ТочностьЕдиницыИзмерения);   //Машков 29.03.13 [000002363],[I-1С_КОРП-MSC-2012-01692] Добавил ЕдиницуИзмерения и точность
		Возврат Отчет.СформироватьОтчет();
	Иначе	
		Если ЦикловНет() Тогда
			мМаксимальноеКоличествоГруппировокДинамическихСтрок = РассчитатьМаксимальноеКоличествоГруппировокДинамическихСтрок();
			мОтчетВВалюте = ВалютаОтчета <> мВалютаРегламентированногоУчета И ЗначениеЗаполнено(ВалютаОтчета);
			мОрганизация = ?(мГруппаОрганизаций.Количество()>0,мГруппаОрганизаций,Организация);
			Если мОтчетВВалюте Тогда
				мКурсНаКонец = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОтчета, ДатаКонца).Курс; 
				мКурсНаКонецПрошлогоПериода = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОтчета, НачалоДня(ДатаНачала)-1).Курс; 
				Если мКурсНаКонец = 0 Тогда
					Сообщить("Не установлен курс валюты """+ВалютаОтчета+"""!");		
					Возврат ТаблДок;
				КонецЕсли;
			КонецЕсли;
			                                           
			//ОПТИМИЗАЦИЯ I-1С_КОРП-MSC-2013-00583 / 18.08.2013 Жилицкий
			КоличествоМесяцев = (Год(ДатаКонца) - Год(ДатаНачала))*12+Месяц(ДатаКонца) - Месяц(ДатаНачала)+1;
			Если НачалоМесяца(ДатаНачала) = ДатаНачала 
				И КонецМесяца(ДатаКонца) = КонецДня(ДатаКонца)
				И (КоличествоМесяцев = 1 или КоличествоМесяцев = 3 или КоличествоМесяцев = 6 или КоличествоМесяцев = 9 или КоличествоМесяцев = 12) Тогда
				Период = "с "+?(ЗначениеЗаполнено(ДатаНачала),Формат(ДатаНачала,"ДФ=dd.MM.yy")," .. ")+ " по "+?(ЗначениеЗаполнено(ДатаКонца),Формат(ДатаКонца,"ДФ=dd.MM.yy")," .. ");
				Параметры = "" + Настройка+ " / "+СокрЛП(Организация.Код) + " / " + Период + " / " + ?(РежимВыборкиДанных,"Минимизация по аналитике","Минимизация по запросам");
				
				Если Настройка.ВидИсточника.РегистрБухгалтерии="isGAAP" Тогда
					ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(Справочники.КлючевыеОперации.ОтчетГенераторОтчетовGAAP,Параметры);
				ИначеЕсли Настройка.Родитель.Наименование="Отчеты ПЭО" Тогда
					ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(Справочники.КлючевыеОперации.ОтчетГенераторОтчетовПЭО,Параметры);
				КонецЕсли; 
			КонецЕсли; 
			//ОПТИМИЗАЦИЯ I-1С_КОРП-MSC-2013-00583 / 18.08.2013 Жилицкий
	
			Если Настройка.ВидНастройки = 0 Тогда
				ПечатьКроссТаблицы();
			Иначе
				ПечатьПоМакету();
			КонецЕсли;
		Иначе
			Сообщить("Обнаружено зацикливание строк:",СтатусСообщения.ОченьВажное);
			Для каждого ТекСтр Из мСтек Цикл
			    Сообщить(ТекСтр.Наименование +"("+?(ТипЗнч(ТекСтр)=Тип("СправочникСсылка.isСтрокиОтчетовПЭО"),"Строка","Выражение")+")");
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
//++ИС Куприянова Е.В. 30.05.2013
//строки, у которых пустые все подчиненные выводить не нужно
//удаляем строки снизу вверх
	Если Настройка.ВидИсточника.РегистрБухгалтерии<>"isGAAP" Тогда
		Смещать = ТипСмещенияТабличногоДокумента.ПоВертикали;
		СтрокиСпрятать = СтрокиОтчета_в_Макет.Строки.НайтиСтроки(Новый Структура("НеНулевая", Ложь),Истина);
		Если СтрокиСпрятать.Количество()>0 Тогда
			ТаблицаУдалить = Новый ТаблицаЗначений();
			ТаблицаУдалить.Колонки.Добавить("ОбластьВМакете");
			ТаблицаУдалить.Колонки.Добавить("СтрокаВМакете");
			
			Для каждого СтрокаСпрятать ИЗ СтрокиСпрятать Цикл
				НС = ТаблицаУдалить.Добавить();
				НС.ОбластьВМакете = СтрокаСпрятать.ОбластьВМакете;
				НС.СтрокаВМакете = СтрокаСпрятать.СтрокаВМакете;
			КонецЦикла;
			ТаблицаУдалить.Сортировать("СтрокаВМакете Убыв");
			
			Для каждого СтрокаСпрятать ИЗ ТаблицаУдалить Цикл
				Область = СтрокаСпрятать.ОбластьВМакете;
				ТаблДок.УдалитьОбласть(Область, Смещать);
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
//--ИС Куприянова Е.В. 30.05.2013
	
	Возврат ТаблДок;
КонецФункции // 

/// ПРОЦЕДУРЫ ПЕЧАТИ
Процедура ПечатьПоМакету()
	
	СоздатьТаблицыМакетовИИмен();

	СоздатьИЗаполнитьТаблицуИсточников();
	СтруктураОтбора = Новый Структура("НомерСтраницы");
	Для каждого ТекМакет Из мТаблицаМакетов Цикл
		Макет = Новый ТабличныйДокумент;
		Если Настройка.ВидНастройки = 1 Тогда
			Макет.Вывести(ТекМакет.МакетДок.Получить());
			ЗаполнитьИменаМакета(Макет, ТекМакет.НомерСтраницы);
		Иначе	
			Если ТекМакет.ТаблицаСекций = Неопределено Тогда
				Продолжить;		
			КонецЕсли;

			Для каждого ТекСекция Из ТекМакет.ТаблицаСекций Цикл
				лМакет = Новый ТабличныйДокумент;
				лМакет.Вывести(ТекСекция.Макет);
				Если ТекСекция.ВидСекции = 0 Тогда
					ЗаполнитьИменаМакета(лМакет, ТекМакет.НомерСтраницы);
				Иначе	
					лМакет = ПолучитьМакетДинамическойСекции(ТекСекция, лМакет);
				КонецЕсли;
				Если лМакет <> Неопределено Тогда
					Макет.Вывести(лМакет);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ТекМакет.Макет = Макет;
	КонецЦикла;
	ТекМакет = мТаблицаМакетов.Найти(мТекущаяСтраница,"НомерСтраницы").Макет;
	ТаблДок.Вывести(ТекМакет);
КонецПроцедуры

Процедура ПечатьКроссТаблицы()
	мСчетаОборотов 		= Новый Массив;
	мСчетаОстатков 		= Новый Массив;
	мРесурсыОборотов 	= Новый Массив;
	мРесурсыОстатков 	= Новый Массив;
	мСтек 				= Новый Массив;
	мТаблицаКонтрольныхСчетов = Настройка.ТаблицаКонтроляЗаполнения.Выгрузить();
	мТаблицаДинамическихБлоков = Новый ТаблицаЗначений;
	мТаблицаДинамическихБлоков.Колонки.Добавить("ИмяТаблицы");
	мТаблицаДинамическихБлоков.Колонки.Добавить("Индекс");
	
	мКонтрольныйРезультат = Неопределено;

	Если мНастройкаДинамическиеСтроки Тогда
		УстановитьТаблицуДинамическихСтрок();
	КонецЕсли;
	Макет=ПолучитьМакет("Макет");

	ВывестиЗаголовок(ТаблДок,Макет);

	СоздатьИЗаполнитьТаблицуИсточников();
//++Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
	ТаблицаНастроекОформления =	ПолучитьНайстройкиОформления(Настройка);
//--Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
	
	ТаблДок.НачатьАвтогруппировкуСтрок();

	СтруктураИзмерений = Новый Структура;
	
	ДеревоСтрок= ПолучитьДеревоСтрокОтчета(Настройка);  
	ВывестиБлокСтрок(ДеревоСтрок, 0,ТаблицаИсточников,ТаблицаВыражений, СоздатьСтруктуруИтоговойКолонки(),СтруктураИзмерений);

	ТаблДок.ЗакончитьАвтогруппировкуСтрок();
	
	Если мКонтрольныйРезультат <> Неопределено Тогда
		ВывестиКонтрольныйДокумент();
	КонецЕсли;
КонецПроцедуры

/// ПРОЦЕДУРЫ ПОДГОТОВКИ ПЕЧАТИ КРОСС-ТАБЛИЦЫ

Процедура ВывестиБлокСтрок(ДеревоСтрок, Уровень,пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки, Знач СтруктураИзмерений)
	Если ТипЗнч(ДеревоСтрок) = Тип("СтрокаДереваЗначений") 
		ИЛИ ТипЗнч(ДеревоСтрок) = Тип("ДеревоЗначений") Тогда
		пДеревоСтрок = СкопироватьДеревоСтрок(ДеревоСтрок);
	КонецЕсли;
	МассивПериодов=isГенераторОтчетов.ПолучитьМассивПериодов(ДатаНачала,КонецДня(ДатаКонца),Периодичность);
	
	Если ВыводитьСтрокуИтогов Тогда
		мТаблицаИтогов = ПустышкаТаблицыЗначений.Скопировать();	
	КонецЕсли;
	
	Для каждого ТекСтр Из пДеревоСтрок.Строки Цикл
		лСтруктураИзмерений = СкопироватьСтруктуру(СтруктураИзмерений);
		ВывестиСтрокуИзТаблицыИсточников(Уровень, ТекСтр,"",пДеревоСтрок, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки, Уровень = 0, лСтруктураИзмерений);
	КонецЦикла;

	Если ВыводитьСтрокуИтогов Тогда
		Вывод = Макет.ПолучитьОбласть(?(ВыводитьКолонкуНомера,"Итого|Раз","Итого|Раз_1"));
		ТаблДок.Вывести(Вывод);
		
		мТаблицаИтогов.Свернуть("Период","Сумма");	
		мТаблицаИтогов.Сортировать("Период");

		Для каждого ТекПериод Из мТаблицаИтогов Цикл
			ВыводГ2.Параметры.Сумма = ТекПериод.Сумма;
			ТаблДок.Присоединить(ВыводГ2);
		КонецЦикла;
		
		Если ВыводитьКолонкуИтогов Тогда
			ВыводГ2.Параметры.Сумма = мТаблицаИтогов.Итог("Сумма");
			ТаблДок.Присоединить(ВыводГ2);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиСтрокуИзТаблицыИсточников(Уровень, СтрокаОтчета, НомерРодителя, пДеревоСтрок,пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки, ВсегдаВыводитьСтрокиОтчета, Знач СтруктураИзмерений)
	ВыводитьСамуСтроку = Истина; 
	ВыводитьСледующиеСтроки = Истина;
	ВыводитьДинамическиеГруппировки = Ложь;
	Если мНастройкаДинамическиеСтроки 
		И СтрокаОтчета.ДинамическаяСтрока 
		И СтрокаОтчета.КореньДинамическихГруппировок Тогда  
		
		ВыводитьДинамическиеГруппировки = Истина;
		
		Если СтрокаОтчета.ВыводитьТолькоВложенныеСтроки Тогда
			ВыводитьСамуСтроку = Ложь;
		КонецЕсли;
		
		Если НЕ СтрокаОтчета.ВыводитьИтогПоГруппировке Тогда
			ВыводитьСледующиеСтроки = Ложь;
		КонецЕсли;
		
		//Если СтрокаОтчета.ДинамическаяГруппировка 
		//	И НЕ ЗначениеЗаполнено(СтрокаОтчета.ИзмерениеДинамическойСтроки) 
		//	И СтрокаОтчета["НеВыводитьПустыеГруппировки"+Строка(СтрокаОтчета.НомерГруппировки)] Тогда
		//	Возврат;
		//КонецЕсли;
	КонецЕсли;
	
	Если СтрокаОтчета.Строки.Количество()=0 Тогда
		Вывод=Вывод1;
		ВыводС=Вывод2;
		ВыводИ=Вывод3;
	Иначе
		Вывод=ВыводГ1;
		ВыводС=ВыводГ2;
		ВыводИ=ВыводГ3;
	КонецЕсли;
	
	Если СтрокаОтчета.ТаблицаЗначений=Неопределено Тогда
		РассчитатьСтрокуОтчетаИзТаблицыИсточников(СтрокаОтчета, пДеревоСтрок, пТаблицаИсточников, пТаблицаВыражений);
	КонецЕсли;
	
	Если СтрокаОтчета.НеВыводитьПриПустомЗначении 
		И СтрокаОтчета.ТаблицаЗначений.Итог("Сумма")=0 Тогда
		Возврат;
	КонецЕсли;
//++ИС Куприянова Е.В. 30.05.2013
//строки, у которых пустые все подчиненные выводить не нужно
	Если СтрокаОтчета.Родитель = НЕОПРЕДЕЛЕНО Тогда
		СтрокаОтчета_в_Макет = СтрокиОтчета_в_Макет.Строки.Добавить();;
	Иначе	
		СтрокаОтчета_Родитель = СтрокиОтчета_в_Макет.Строки.Найти(СтрокаОтчета.Родитель, "СтрокаОтчета",Истина); 
		Если СтрокаОтчета_Родитель=НЕОПРЕДЕЛЕНО Тогда
			СтрокаОтчета_в_Макет = СтрокиОтчета_в_Макет.Строки.Добавить();;
		Иначе
			СтрокаОтчета_в_Макет = СтрокаОтчета_Родитель.Строки.Добавить();
		КонецЕсли;	
	КонецЕсли;	
	СтрокаОтчета_в_Макет.СтрокаОтчета = СтрокаОтчета;
	СтрокаОтчета_в_Макет.НеНулевая = Ложь;
	флЕстьСумма = Ложь;
//--ИС Куприянова Е.В. 30.05.2013
	
	Если СтрокаОтчета.ДинамическаяГруппировка Тогда
		Источник = Строка(СтрокаОтчета.ИзмерениеДинамическойСтроки);
	Иначе	
		Источник = ?(ЗначениеЗаполнено(СтрокаОтчета.Строка.НаименованиеДляПечати),
					СтрокаОтчета.Строка.НаименованиеДляПечати,СтрокаОтчета.Строка.Наименование);
	КонецЕсли;

	Вывод.Параметры.Источник=Источник;
	Вывод.Область(1,2).Отступ = СтрокаОтчета.Уровень();
	Если ВыводитьКолонкуНомера Тогда
		Номер=?(ЗначениеЗаполнено(НомерРодителя),НомерРодителя+".","")+Строка(СтрокаОтчета.Номер);
		Вывод.Параметры.Нпп=Номер;
	КонецЕсли;
	лУровень = Уровень;
	Если ВыводитьСамуСтроку Тогда
		лУровень = Уровень+1;
//++Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
//		ТаблДок.Вывести(Вывод,лУровень);
		ОбластьСтрокаВывели = ТаблДок.Вывести(Вывод,лУровень);
		УстановитьОформлениеОбласти(ОбластьСтрокаВывели, СтрокаОтчета.Строка, "Строка");
//--Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
		ВсегоПоСтроке = 0;
		Для Сч=0 По МассивПериодов.Количество()-1 Цикл
			ТекПериод=МассивПериодов[Сч];
			ПодстрокаПериода=СтрокаОтчета.ТаблицаЗначений.Найти(ТекПериод,"Период");
			Сумма = ?(ПодстрокаПериода=Неопределено,0,ПодстрокаПериода.Сумма);
			Если ВыводитьСтрокуИтогов И НЕ ЗначениеЗаполнено(СтрокаОтчета.Родитель) Тогда
				НоваяСтрокаИтогов = мТаблицаИтогов.Добавить();
				НоваяСтрокаИтогов.Период = ТекПериод;
				НоваяСтрокаИтогов.Сумма = Сумма;
			КонецЕсли;
//++ИС Куприянова Е.В. 30.05.2013
//строки, у которых пустые все подчиненные выводить не нужно
			флЕстьСумма = (флЕстьСумма	ИЛИ (Сумма<>0));		
//--ИС Куприянова Е.В. 30.05.2013
			ВсегоПоСтроке = ВсегоПоСтроке + Сумма;
			ВыводС.Параметры.Сумма = Сумма;
			Если СтрокаОтчета.Строка.СвояФорматнаяСтрока Тогда
				УстановитьФорматВыводаИндивидуально(ВыводС,СтрокаОтчета.Строка.ФорматнаяСтрока);		
			Иначе
				УстановитьФорматВывода(ВыводС);		
			КонецЕсли;
			Расшифровка = Новый Структура("Источник, Период",СтрокаОтчета.Строка,ТекПериод);
			Для каждого ТекИзмерение Из СтруктураИзмерений Цикл
				Расшифровка.Вставить(ТекИзмерение.Ключ, ТекИзмерение.Значение);
			КонецЦикла;
			ВыводС.Параметры.Расшифровка = Расшифровка;
//++Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
//			ТаблДок.Присоединить(ВыводС);
			ОбластьЗначениеВывели = ТаблДок.Присоединить(ВыводС);
			УстановитьОформлениеОбласти(ОбластьЗначениеВывели, СтрокаОтчета.Строка, "Значение", Сумма, ОбластьСтрокаВывели);
//--Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
		КонецЦикла;
		Если ВыводитьКолонкуИтогов Тогда
			Если СтрокаОтчета.Строка.СпособВычисленияКолонкиИтогов = 0  Тогда
				ВыводИ.Параметры.Сумма = ВсегоПоСтроке;
				НоваяСтрокаИтога = пСтруктураИтоговойКолонки.ИтоговаяКолонка.Добавить();
				НоваяСтрокаИтога.СтрокаОтчета = СтрокаОтчета.Строка;
				НоваяСтрокаИтога.Сумма = ВсегоПоСтроке;
			Иначе	
				ВыводИ.Параметры.Сумма = РассчитатьСуммуИтоговойКолонкиСтрокиОтчета(СтрокаОтчета.Строка,СтрокаОтчета.Строка.СпособВычисленияКолонкиИтогов, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки);
			КонецЕсли;
			Если СтрокаОтчета.Строка.СвояФорматнаяСтрока Тогда
				УстановитьФорматВыводаИндивидуально(ВыводИ,СтрокаОтчета.Строка.ФорматнаяСтрока);		
			Иначе
				УстановитьФорматВывода(ВыводИ);		
			КонецЕсли;
//++Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
//			ТаблДок.Присоединить(ВыводИ);
			ОбластьЗначениеВывели = ТаблДок.Присоединить(ВыводИ);
			УстановитьОформлениеОбласти(ОбластьЗначениеВывели, СтрокаОтчета.Строка, "Значение", ВыводИ.Параметры.Сумма, ОбластьСтрокаВывели);
//--Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
		КонецЕсли;
		лУровень = Уровень+1;
//++ИС Куприянова Е.В. 30.05.2013
//строки, у которых пустые все подчиненные выводить не нужно
		СтрокаОтчета_в_Макет.СтрокаВМакете = ТаблДок.ВысотаТаблицы;
		СтрокаОтчета_в_Макет.ОбластьВМакете = ТаблДок.Область(СтрокаОтчета_в_Макет.СтрокаВМакете, , СтрокаОтчета_в_Макет.СтрокаВМакете, );
		Если (Найти(ВРЕГ(Источник), "КОНТРОЛЬ")<>0) 
			И Родитель_КОНТРОЛЬ = НЕОПРЕДЕЛЕНО	
		Тогда
			Родитель_КОНТРОЛЬ = СтрокаОтчета_в_Макет.СтрокаОтчета.Строка;
		КонецЕсли;	
		СтрокаОтчета_в_Макет.НеНулевая = флЕстьСумма ИЛИ (СтрокаОтчета.Строки.Количество()=0) ИЛИ (Найти(ВРЕГ(Источник), "КОНТРОЛЬ")<>0);		
		Если СтрокаОтчета_в_Макет.Родитель <> НЕОПРЕДЕЛЕНО 
			И СтрокаОтчета_в_Макет.НеНулевая 
		Тогда
			СтрокаОтчета_в_Макет.Родитель.НеНулевая = Истина;
		ИначеЕсли СтрокаОтчета_в_Макет.Родитель <> НЕОПРЕДЕЛЕНО 
			И СтрокаОтчета_в_Макет.Родитель.НеНулевая
			И Родитель_КОНТРОЛЬ <> НЕОПРЕДЕЛЕНО
			И ЗначениеЗаполнено(СтрокаОтчета_в_Макет.СтрокаОтчета.Строка)
			И СтрокаОтчета_в_Макет.СтрокаОтчета.Строка.ПринадлежитЭлементу(Родитель_КОНТРОЛЬ)
		Тогда
//это для контрольной секции, которая должна выводиться всегда	
			СтрокаОтчета_в_Макет.НеНулевая = Истина;
		КонецЕсли;	
//--ИС Куприянова Е.В. 30.05.2013
	КонецЕсли;

	Если ВыводитьСледующиеСтроки Тогда
//		лУровень = Уровень+1;
		Для каждого ТекСтр Из СтрокаОтчета.Строки Цикл
			Если ТекСтр.Строка=СтрокаОтчета.Строка И НЕ ТекСтр.ДинамическаяСтрока Тогда
				Продолжить;
			КонецЕсли;
			ВывестиСтрокуИзТаблицыИсточников(лУровень, ТекСтр,Номер, пДеревоСтрок,пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки, ВсегдаВыводитьСтрокиОтчета,СтруктураИзмерений);
		КонецЦикла;
	КонецЕсли;
	
	Если мНастройкаДинамическиеСтроки 
		И СтрокаОтчета.ДинамическаяСтрока 
		И СтрокаОтчета.КореньДинамическихГруппировок Тогда  
		Для каждого ТекИзмерение Из мДеревоДинамическихСтрок.Строки Цикл
			Если СтрокаОтчета.НеВыводитьПустыеГруппировки1 И НЕ ЗначениеЗаполнено(ТекИзмерение.Измерение) Тогда
				Продолжить;			
			КонецЕсли;
//++ИС Куприянова Е.В. 27.06.2013 I-1С_КОРП-MSC-2013-00785
//отработка флага "НеВыводитьГруппировкуУровня"
			Если НеВыводитьГруппировкуУровня 
	        	И мМаксимальноеКоличествоГруппировокДинамическихСтрок = 1
			Тогда
				Продолжить;
			КонецЕсли;	
//++ИС Куприянова Е.В. 27.06.2013 I-1С_КОРП-MSC-2013-00785
			ВыводИзмерение.Параметры.Измерение = ТекИзмерение.Измерение;
			ТаблДок.Вывести(ВыводИзмерение,лУровень + 1);		
//++ИС Куприянова Е.В. 30.05.2013
//строки, у которых пустые все подчиненные выводить не нужно
			Если СтрокаОтчета.Родитель = НЕОПРЕДЕЛЕНО Тогда
				СтрокаОтчета_в_Макет = СтрокиОтчета_в_Макет.Строки.Добавить();;
			Иначе	
				СтрокаОтчета_Родитель = СтрокиОтчета_в_Макет.Строки.Найти(СтрокаОтчета.Родитель, "СтрокаОтчета",Истина); 
				Если СтрокаОтчета_Родитель=НЕОПРЕДЕЛЕНО Тогда
					СтрокаОтчета_в_Макет = СтрокиОтчета_в_Макет.Строки.Добавить();;
				Иначе
					СтрокаОтчета_в_Макет = СтрокаОтчета_Родитель.Строки.Добавить();
				КонецЕсли;	
			КонецЕсли;	
			СтрокаОтчета_в_Макет.СтрокаОтчета = СтрокаОтчета;
			СтрокаОтчета_в_Макет.НеНулевая = Ложь;
			СтрокаОтчета_в_Макет.СтрокаВМакете = ТаблДок.ВысотаТаблицы;
			СтрокаОтчета_в_Макет.ОбластьВМакете = ТаблДок.Область(СтрокаОтчета_в_Макет.СтрокаВМакете, , СтрокаОтчета_в_Макет.СтрокаВМакете, );
//--ИС Куприянова Е.В. 30.05.2013
			СтруктураИзмерений = Новый Структура;
			СтруктураИзмерений.Вставить("Измерение1",ТекИзмерение.Измерение);
			ВывестиБлокСтрок(СтрокаОтчета, лУровень + 1,ТекИзмерение.ТаблицаИсточников, ТекИзмерение.ТаблицаВыражений,СоздатьСтруктуруИтоговойКолонки(),СтруктураИзмерений);
//++ИС Куприянова Е.В. 30.05.2013
//строки, у которых пустые все подчиненные выводить не нужно
			Если ТаблДок.ВысотаТаблицы <> СтрокаОтчета_в_Макет.СтрокаВМакете Тогда
//что-то после группировки не вывели	
				Для счт = СтрокаОтчета_в_Макет.СтрокаВМакете+1 ПО ТаблДок.ВысотаТаблицы Цикл
	            	СтрокаВДереве = СтрокиОтчета_в_Макет.Строки.Найти(счт, "СтрокаВМакете",Истина); 	
					Если СтрокаВДереве <> Неопределено Тогда
						Если СтрокаВДереве.Ненулевая 
							И СтрокаВДереве.СтрокаОтчета.ТаблицаЗначений.Количество()>0
						Тогда	
							СтрокаОтчета_в_Макет.НеНулевая = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
				Если СтрокаОтчета_в_Макет.НеНулевая = Ложь Тогда
//что-то после группировки не вывели	
					Для счт = СтрокаОтчета_в_Макет.СтрокаВМакете+1 ПО ТаблДок.ВысотаТаблицы Цикл
						СтрокаВДереве = СтрокиОтчета_в_Макет.Строки.Найти(счт, "СтрокаВМакете",Истина); 	
						Если СтрокаВДереве <> Неопределено Тогда
							Если СтрокаВДереве.Ненулевая 
								И СтрокаВДереве.СтрокаОтчета.ТаблицаЗначений.Количество()=0
							Тогда
								СтрокаВДереве.Ненулевая  = Ложь;
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
//--ИС Куприянова Е.В. 30.05.2013
			Если мМаксимальноеКоличествоГруппировокДинамическихСтрок > 1 Тогда
//++ИС Куприянова Е.В. 27.06.2013 I-1С_КОРП-MSC-2013-00785
//отработка флага "НеВыводитьГруппировкуУровня"
				Если НеВыводитьГруппировкуУровня 
		        	И мМаксимальноеКоличествоГруппировокДинамическихСтрок = 2
				Тогда
					Продолжить;
				КонецЕсли;	
//++ИС Куприянова Е.В. 27.06.2013 I-1С_КОРП-MSC-2013-00785
				Для каждого ТекИзмерение2 Из ТекИзмерение.Строки Цикл
					Если СтрокаОтчета.НеВыводитьПустыеГруппировки2 И НЕ ЗначениеЗаполнено(ТекИзмерение2.Измерение) Тогда
						Продолжить;			
					КонецЕсли;
					ВыводИзмерение.Параметры.Измерение = ТекИзмерение2.Измерение;
					ТаблДок.Вывести(ВыводИзмерение,лУровень + 2);		
//++ИС Куприянова Е.В. 30.05.2013
//строки, у которых пустые все подчиненные выводить не нужно
					Если СтрокаОтчета.Родитель = НЕОПРЕДЕЛЕНО Тогда
						СтрокаОтчета_в_Макет = СтрокиОтчета_в_Макет.Строки.Добавить();;
					Иначе	
						СтрокаОтчета_Родитель = СтрокиОтчета_в_Макет.Строки.Найти(СтрокаОтчета.Родитель, "СтрокаОтчета",Истина); 
						Если СтрокаОтчета_Родитель=НЕОПРЕДЕЛЕНО Тогда
							СтрокаОтчета_в_Макет = СтрокиОтчета_в_Макет.Строки.Добавить();;
						Иначе
							СтрокаОтчета_в_Макет = СтрокаОтчета_Родитель.Строки.Добавить();
						КонецЕсли;	
					КонецЕсли;	
					СтрокаОтчета_в_Макет.СтрокаОтчета = СтрокаОтчета;
					СтрокаОтчета_в_Макет.НеНулевая = Ложь;
					СтрокаОтчета_в_Макет.СтрокаВМакете = ТаблДок.ВысотаТаблицы;
					СтрокаОтчета_в_Макет.ОбластьВМакете = ТаблДок.Область(СтрокаОтчета_в_Макет.СтрокаВМакете, , СтрокаОтчета_в_Макет.СтрокаВМакете, );
//--ИС Куприянова Е.В. 30.05.2013
					
					СтруктураИзмерений = Новый Структура;
					СтруктураИзмерений.Вставить("Измерение1",ТекИзмерение.Измерение);
					СтруктураИзмерений.Вставить("Измерение2",ТекИзмерение2.Измерение);
					ВывестиБлокСтрок(СтрокаОтчета, лУровень + 2,ТекИзмерение2.ТаблицаИсточников, ТекИзмерение2.ТаблицаВыражений,СоздатьСтруктуруИтоговойКолонки(),СтруктураИзмерений);
//++ИС Куприянова Е.В. 30.05.2013
//строки, у которых пустые все подчиненные выводить не нужно
					Если ТаблДок.ВысотаТаблицы <> СтрокаОтчета_в_Макет.СтрокаВМакете Тогда
//что-то после группировки не вывели	
						Для счт = СтрокаОтчета_в_Макет.СтрокаВМакете+1 ПО ТаблДок.ВысотаТаблицы Цикл
			            	СтрокаВДереве = СтрокиОтчета_в_Макет.Строки.Найти(счт, "СтрокаВМакете",Истина); 	
							Если СтрокаВДереве <> Неопределено Тогда
								Если СтрокаВДереве.Ненулевая 
									И СтрокаВДереве.СтрокаОтчета.ТаблицаЗначений.Количество()>0
								Тогда
									СтрокаОтчета_в_Макет.НеНулевая = Истина;
									Прервать;
								КонецЕсли;
							КонецЕсли;	
						КонецЦикла;
						Если СтрокаОтчета_в_Макет.НеНулевая = Ложь Тогда
//что-то после группировки не вывели	
							Для счт = СтрокаОтчета_в_Макет.СтрокаВМакете+1 ПО ТаблДок.ВысотаТаблицы Цикл
								СтрокаВДереве = СтрокиОтчета_в_Макет.Строки.Найти(счт, "СтрокаВМакете",Истина); 	
								Если СтрокаВДереве <> Неопределено Тогда
									Если СтрокаВДереве.Ненулевая 
										И СтрокаВДереве.СтрокаОтчета.ТаблицаЗначений.Количество()=0
									Тогда
										СтрокаВДереве.Ненулевая  = Ложь;
									КонецЕсли;
								КонецЕсли;	
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
//--ИС Куприянова Е.В. 30.05.2013
					
					Если мМаксимальноеКоличествоГруппировокДинамическихСтрок > 2 Тогда
//++ИС Куприянова Е.В. 27.06.2013 I-1С_КОРП-MSC-2013-00785
//отработка флага "НеВыводитьГруппировкуУровня"
						Если НеВыводитьГруппировкуУровня 
				        	И мМаксимальноеКоличествоГруппировокДинамическихСтрок = 3
						Тогда
							Продолжить;
						КонецЕсли;	
//++ИС Куприянова Е.В. 27.06.2013 I-1С_КОРП-MSC-2013-00785
						Для каждого ТекИзмерение3 Из ТекИзмерение2.Строки Цикл
							Если СтрокаОтчета.НеВыводитьПустыеГруппировки3 И НЕ ЗначениеЗаполнено(ТекИзмерение3.Измерение) Тогда
								Продолжить;			
							КонецЕсли;
							ВыводИзмерение.Параметры.Измерение = ТекИзмерение3.Измерение;
							СтруктураИзмерений = Новый Структура;
							СтруктураИзмерений.Вставить("Измерение1",ТекИзмерение.Измерение);
							СтруктураИзмерений.Вставить("Измерение2",ТекИзмерение2.Измерение);
							СтруктураИзмерений.Вставить("Измерение3",ТекИзмерение3.Измерение);
							ТаблДок.Вывести(ВыводИзмерение,лУровень + 3);		
//++ИС Куприянова Е.В. 30.05.2013
//строки, у которых пустые все подчиненные выводить не нужно
							Если СтрокаОтчета.Родитель = НЕОПРЕДЕЛЕНО Тогда
								СтрокаОтчета_в_Макет = СтрокиОтчета_в_Макет.Строки.Добавить();;
							Иначе	
								СтрокаОтчета_Родитель = СтрокиОтчета_в_Макет.Строки.Найти(СтрокаОтчета.Родитель, "СтрокаОтчета",Истина); 
								Если СтрокаОтчета_Родитель=НЕОПРЕДЕЛЕНО Тогда
									СтрокаОтчета_в_Макет = СтрокиОтчета_в_Макет.Строки.Добавить();;
								Иначе
									СтрокаОтчета_в_Макет = СтрокаОтчета_Родитель.Строки.Добавить();
								КонецЕсли;	
							КонецЕсли;	
							СтрокаОтчета_в_Макет.СтрокаОтчета = СтрокаОтчета;
							СтрокаОтчета_в_Макет.НеНулевая = Ложь;
							СтрокаОтчета_в_Макет.СтрокаВМакете = ТаблДок.ВысотаТаблицы;
							СтрокаОтчета_в_Макет.ОбластьВМакете = ТаблДок.Область(СтрокаОтчета_в_Макет.СтрокаВМакете, , СтрокаОтчета_в_Макет.СтрокаВМакете, );
//--ИС Куприянова Е.В. 30.05.2013
							
							ВывестиБлокСтрок(СтрокаОтчета, лУровень + 3,ТекИзмерение3.ТаблицаИсточников, ТекИзмерение3.ТаблицаВыражений,СоздатьСтруктуруИтоговойКолонки(), СтруктураИзмерений);
//++ИС Куприянова Е.В. 30.05.2013
//строки, у которых пустые все подчиненные выводить не нужно
							Если ТаблДок.ВысотаТаблицы <> СтрокаОтчета_в_Макет.СтрокаВМакете Тогда
//что-то после группировки не вывели	
								Для счт = СтрокаОтчета_в_Макет.СтрокаВМакете+1 ПО ТаблДок.ВысотаТаблицы Цикл
					            	СтрокаВДереве = СтрокиОтчета_в_Макет.Строки.Найти(счт, "СтрокаВМакете",Истина); 	
									Если СтрокаВДереве <> Неопределено Тогда
										Если СтрокаВДереве.Ненулевая 
											И СтрокаВДереве.СтрокаОтчета.ТаблицаЗначений.Количество()>0
										Тогда
											СтрокаОтчета_в_Макет.НеНулевая = Истина;
											Прервать;
										КонецЕсли;
									КонецЕсли;	
								КонецЦикла;
								Если СтрокаОтчета_в_Макет.НеНулевая = Ложь Тогда
//что-то после группировки не вывели	
									Для счт = СтрокаОтчета_в_Макет.СтрокаВМакете+1 ПО ТаблДок.ВысотаТаблицы Цикл
										СтрокаВДереве = СтрокиОтчета_в_Макет.Строки.Найти(счт, "СтрокаВМакете",Истина); 	
										Если СтрокаВДереве <> Неопределено Тогда
											Если СтрокаВДереве.Ненулевая 
												И СтрокаВДереве.СтрокаОтчета.ТаблицаЗначений.Количество()=0
											Тогда
												СтрокаВДереве.Ненулевая  = Ложь;
											КонецЕсли;
										КонецЕсли;	
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
//--ИС Куприянова Е.В. 30.05.2013
							
							Если мМаксимальноеКоличествоГруппировокДинамическихСтрок > 3 Тогда
//++ИС Куприянова Е.В. 27.06.2013 I-1С_КОРП-MSC-2013-00785
//отработка флага "НеВыводитьГруппировкуУровня"
								Если НеВыводитьГруппировкуУровня 
						        	И мМаксимальноеКоличествоГруппировокДинамическихСтрок = 4
								Тогда
									Продолжить;
								КонецЕсли;	
//++ИС Куприянова Е.В. 27.06.2013 I-1С_КОРП-MSC-2013-00785
								Для каждого ТекИзмерение4 Из ТекИзмерение3.Строки Цикл
									Если СтрокаОтчета.НеВыводитьПустыеГруппировки4 И НЕ ЗначениеЗаполнено(ТекИзмерение4.Измерение) Тогда
										Продолжить;			
									КонецЕсли;
									ВыводИзмерение.Параметры.Измерение = ТекИзмерение4.Измерение;
									СтруктураИзмерений = Новый Структура;
									СтруктураИзмерений.Вставить("Измерение1",ТекИзмерение.Измерение);
									СтруктураИзмерений.Вставить("Измерение2",ТекИзмерение2.Измерение);
									СтруктураИзмерений.Вставить("Измерение3",ТекИзмерение3.Измерение);
									СтруктураИзмерений.Вставить("Измерение4",ТекИзмерение4.Измерение);
									ТаблДок.Вывести(ВыводИзмерение,лУровень + 4);		
									ВывестиБлокСтрок(СтрокаОтчета, лУровень + 4,ТекИзмерение4.ТаблицаИсточников, ТекИзмерение4.ТаблицаВыражений,СоздатьСтруктуруИтоговойКолонки(), СтруктураИзмерений);
									Если мМаксимальноеКоличествоГруппировокДинамическихСтрок > 4 Тогда
										Для каждого ТекИзмерение5 Из ТекИзмерение4.Строки Цикл
											Если СтрокаОтчета.НеВыводитьПустыеГруппировки5 И НЕ ЗначениеЗаполнено(ТекИзмерение5.Измерение) Тогда
												Продолжить;			
											КонецЕсли;
											ВыводИзмерение.Параметры.Измерение = ТекИзмерение5.Измерение;
											СтруктураИзмерений = Новый Структура;
											СтруктураИзмерений.Вставить("Измерение1",ТекИзмерение.Измерение);
											СтруктураИзмерений.Вставить("Измерение2",ТекИзмерение2.Измерение);
											СтруктураИзмерений.Вставить("Измерение3",ТекИзмерение3.Измерение);
											СтруктураИзмерений.Вставить("Измерение4",ТекИзмерение4.Измерение);
											СтруктураИзмерений.Вставить("Измерение5",ТекИзмерение5.Измерение);
											ТаблДок.Вывести(ВыводИзмерение,лУровень + 5);		
											ВывестиБлокСтрок(СтрокаОтчета, лУровень + 5,ТекИзмерение5.ТаблицаИсточников, ТекИзмерение5.ТаблицаВыражений,СоздатьСтруктуруИтоговойКолонки(), СтруктураИзмерений);
										КонецЦикла;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
 	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДеревоСтрокОтчета(Настройка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Строки.Ссылка КАК Строка,
	|	Строки.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА Строки.Владелец.ДинамическиеСтроки
	|			ТОГДА Строки.КоличествоГруппировокВСтроке
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоГруппировок,
	|	Строки.НеВыводитьПустыеГруппировки1,
	|	Строки.НеВыводитьПустыеГруппировки2,
	|	Строки.НеВыводитьПустыеГруппировки3,
	|	Строки.НеВыводитьПустыеГруппировки4,
	|	Строки.НеВыводитьПустыеГруппировки5,
	|	Строки.НеВыводитьПриПустомЗначении,
	|	Строки.ВыводитьТолькоВложенныеСтроки,
	|	Строки.ВыводитьИтогПоГруппировке,
	|	НЕОПРЕДЕЛЕНО КАК ИзмерениеДинамическойСтроки,
	|	0 КАК НомерГруппировки,
	|	0 КАК РежимДинамическихСтрок,
	|	ВЫБОР
	|		КОГДА Строки.Владелец.ДинамическиеСтроки
	|				И Строки.КоличествоГруппировокВСтроке <> 0
	|				И 0 = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КореньДинамическихГруппировок,
	|	ВЫБОР
	|		КОГДА Строки.Владелец.ДинамическиеСтроки
	|				И Строки.КоличествоГруппировокВСтроке > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДинамическаяСтрока,
	|	ЛОЖЬ КАК ДинамическаяГруппировка
	|ИЗ
	|	Справочник.isСтрокиОтчетовПЭО КАК Строки
	|ГДЕ
	|	Строки.Владелец = &Настройка
	|	И НЕ Строки.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер
	|ИТОГИ ПО
	|	Строка ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Настройка",Настройка );
	ДеревоСтрок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ДеревоСтрок.Колонки.Добавить("ТаблицаЗначений");
	УстановитьРеквизитыИерархическихСтрок(ДеревоСтрок, "Строка");

	Возврат ДеревоСтрок;
КонецФункции // ()

Процедура УстановитьРеквизитыИерархическихСтрок(ДеревоСтрока, ИмяИерархическойКолонки)
	Сч = 0;
	Пока Сч < ДеревоСтрока.Строки.Количество() Цикл
		ТекСтр = ДеревоСтрока.Строки[Сч];
		Если ТипЗнч(ДеревоСтрока) = Тип("ДеревоЗначений") ТОгда 
			УстановитьРеквизитыИерархическихСтрок(ТекСтр, ИмяИерархическойКолонки);
			Сч = Сч +1;
		ИначеЕсли ТекСтр[ИмяИерархическойКолонки] = ДеревоСтрока[ИмяИерархическойКолонки] Тогда
			Если ТекСтр.Строки.Количество() = 1 Тогда
				ЗаполнитьЗначенияСвойств(ДеревоСтрока,ТекСтр.Строки[0],,"Строки");
			Иначе
				ЗаполнитьЗначенияСвойств(ДеревоСтрока,ТекСтр,,"Строки");
			КонецЕсли;
			ДеревоСтрока.Строки.Удалить(ТекСтр);
		Иначе
			Если ТекСтр.Строки.Количество() = 1 Тогда
				ЗаполнитьЗначенияСвойств(ТекСтр,ТекСтр.Строки[0],,"Строки");
				ТекСтр.Строки.Очистить();
			Иначе
				УстановитьРеквизитыИерархическихСтрок(ТекСтр, ИмяИерархическойКолонки);
			КонецЕсли;
			Сч = Сч +1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Обеспечивает подготовку таблицы строк, которые являются корнями динамических строк 
// необходима для сокращения времени расчета количества динамических группировок для строк
// нижнего уровня, используется функцией ПолучитьКоличествоДинамическихГруппировок 
//
Процедура УстановитьТаблицуДинамическихСтрок()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Настройка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	isСтрокиОтчетовПЭО.Ссылка КАК Строка,
	|	isСтрокиОтчетовПЭО.КоличествоГруппировокВСтроке,
	|	0 КАК РежимДинамическихСтрок
	|ИЗ
	|	Справочник.isСтрокиОтчетовПЭО КАК isСтрокиОтчетовПЭО
	|ГДЕ
	|	isСтрокиОтчетовПЭО.Владелец = &Владелец
	|	И isСтрокиОтчетовПЭО.КоличествоГруппировокВСтроке > 0";
    мСтрокиСДинамическимиГруппировками = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

Функция ПолучитьКоличествоДинамическихГруппировок(Строка)
	Для каждого ТекСтр Из мСтрокиСДинамическимиГруппировками Цикл
		Если Строка.ПринадлежитЭлементу(ТекСтр.Строка) Тогда
			Возврат ТекСтр.КоличествоГруппировокВСтроке;
		КонецЕсли;
	КонецЦикла;
	Возврат 0;	
КонецФункции // ()

Процедура ВывестиЗаголовок(ТаблДок,Макет)
	ПрефиксВыводаКолонки = ?(ВыводитьКолонкуНомера,"","_1");
	
	Вывод=Макет.ПолучитьОбласть("Заголовок|Раз"+ПрефиксВыводаКолонки);
	ДатаКон=КонецДня(ДатаКонца);
	Вывод.Параметры.Период=ПредставлениеПериода(ДатаНачала,ДатаКон);
	Вывод.Параметры.НаименованиеОтчета=Настройка.НаименованиеДляПечати;
	Вывод.Параметры.Организация=мОрганизация;
	ТаблДок.Вывести(Вывод);
	ТаблДок.ОтображатьСетку=Ложь;
	ТаблДок.ОтображатьЗаголовки=Ложь;
	ТаблДок.АвтоМасштаб=Истина;
	ТаблДок.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	
	Вывод1 = Макет.ПолучитьОбласть("Заг|Раз"+ПрефиксВыводаКолонки);
	//Вывод1.Параметры.ЕдиницаИзмерения = ПолучитьТекстЕдиницыИзмерения();
	ТаблДок.Вывести(Вывод1);
	Вывод2 = Макет.ПолучитьОбласть("Заг|Два");
	СоздатьПустышкуТаблицыЗначений(ДатаНачала,ДатаКон,Периодичность);
	//  *** вывод заголовока
	isГенераторОтчетов.ВывестиЗаголовокПериодами(ТаблДок,Вывод2,ДатаНачала,ДатаКон,Периодичность);
	Если ВыводитьКолонкуИтогов Тогда
		Вывод = Макет.ПолучитьОбласть("Заг|Три");;
		ТаблДок.Присоединить(Вывод);
	КонецЕсли;
  // ***

	ТаблДок.ФиксацияСверху=ТаблДок.ВысотаТаблицы;
	
	Вывод1=Макет.ПолучитьОбласть("Строка|Раз"+ПрефиксВыводаКолонки);
	Вывод2=Макет.ПолучитьОбласть("Строка|Два");
	Вывод3=Макет.ПолучитьОбласть("Строка|Три");
	ВыводГ1=Макет.ПолучитьОбласть("Группа|Раз"+ПрефиксВыводаКолонки);
	ВыводГ2=Макет.ПолучитьОбласть("Группа|Два");
	ВыводГ3=Макет.ПолучитьОбласть("Группа|Три");
	ВыводИзмерение=Макет.ПолучитьОбласть("Измерение");
	
	УстановитьФорматВывода(Вывод2);
	УстановитьФорматВывода(ВыводГ2);
	УстановитьФорматВывода(Вывод3);
	УстановитьФорматВывода(ВыводГ3);
	
КонецПроцедуры

Функция СоздатьСтруктуруИтоговойКолонки()
	Результат = Новый Структура;
	
	ИтоговаяКолонка = Новый ТаблицаЗначений;
	ИтоговаяКолонка.Колонки.Добавить("СтрокаОтчета");
	ИтоговаяКолонка.Колонки.Добавить("Сумма", ПолучитьОписаниеТипаРесурса());
	
	ВыраженияИтоговойКолонки = Новый ТаблицаЗначений;
	ВыраженияИтоговойКолонки.Колонки.Добавить("Выражение");
	ВыраженияИтоговойКолонки.Колонки.Добавить("Сумма", ПолучитьОписаниеТипаРесурса());
	
    Результат.Вставить("ИтоговаяКолонка",			ИтоговаяКолонка);
    Результат.Вставить("ВыраженияИтоговойКолонки",	ВыраженияИтоговойКолонки);
	
	Возврат Результат;
КонецФункции //

Процедура РассчитатьСтрокуОтчетаИзТаблицыИсточников(СтрокаОтчета, пДеревоСтрок, пТаблицаИсточников, пТаблицаВыражений)
	ПривязкаКод = ?(мРежимПривязкиИсточникаКСтроке,"С"+СтрокаОтчета.Строка.Код,"");
	Результат=мШаблон.Скопировать();
	Если СтрокаОтчета.Строка.Источники.Количество()=0 Тогда  // строка не имеет источников, ее состав определяется подстроками
		Для каждого ТекСтр Из СтрокаОтчета.Строки Цикл
			РассчитатьСтрокуОтчетаИзТаблицыИсточников(ТекСтр, пДеревоСтрок, пТаблицаИсточников, пТаблицаВыражений);
			ДобавитьСуммыВСтрокуТаблицы(Результат,ТекСтр.ТаблицаЗначений);
		КонецЦикла;
	ИначеЕсли СтрокаОтчета.Строка.Источники.Количество() > 0 Тогда   // строка имеет источники
		Для каждого ТекСтр Из СтрокаОтчета.Строка.Источники Цикл
			ПривязкаНомерСтроки = ТекСтр.НомерСтроки;
			лТаблицаИсточника=ПолучитьТаблицуИсточника(ТекСтр.ТипСтроки,ТекСтр.Источник,ПривязкаКод,ПривязкаНомерСтроки,пДеревоСтрок,пТаблицаИсточников, пТаблицаВыражений);	
			Если лТаблицаИсточника = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьСуммыВСтрокуТаблицы(Результат,лТаблицаИсточника,ТекСтр.Коэффициент);
			
			Если СтрокаОтчета.КоличествоГруппировок > 0 И Настройка.РежимДинамическихСтрок <> 0 Тогда
				Если ТекСтр.ТипСтроки = 2 Тогда
					ПривязкаКодВ = "В"+ТекСтр.Источник.Код;
					Для каждого ТекСтрВ Из ТекСтр.Источник.Источники Цикл
						ПривязкаНомерСтрокиВ = ТекСтрВ.НомерСтроки;
						лДеревоДинСтрок = ПолучитьДеревоДинамическихСтрокИсточника(ТекСтрВ.ТипСтроки,ТекСтрВ.Источник, ПривязкаКодВ, ПривязкаНомерСтрокиВ, пТаблицаИсточников, пТаблицаВыражений);	
						Если лДеревоДинСтрок <> Неопределено Тогда
							ДобавитьЗначенияВДинамическиеСтроки(СтрокаОтчета, лДеревоДинСтрок, ТекСтр.Коэффициент*ТекСтрВ.Коэффициент);
						КонецЕсли;
					КонецЦикла;
				Иначе
					лДеревоДинСтрок = ПолучитьДеревоДинамическихСтрокИсточника(ТекСтр.ТипСтроки,ТекСтр.Источник, ПривязкаКод, ПривязкаНомерСтроки, пТаблицаИсточников, пТаблицаВыражений);	
					Если лДеревоДинСтрок <> Неопределено Тогда
						ДобавитьЗначенияВДинамическиеСтроки(СтрокаОтчета, лДеревоДинСтрок, ТекСтр.Коэффициент);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	Иначе 
		Результат = ПустышкаТаблицыЗначений.Скопировать();
	КонецЕсли;
	
	Если СтрокаОтчета.Строка.Положительное Тогда
		Для каждого ТекСтр Из Результат Цикл
			Если ТекСтр.Сумма < 0 Тогда
				ТекСтр.Сумма = - ТекСтр.Сумма;
			КонецЕсли;							
		КонецЦикла;	
	КонецЕсли;                            
	СтрокаОтчета.ТаблицаЗначений=Результат;
	
	// дополняем дерево строк динамическими строками
	
КонецПроцедуры

Функция СкопироватьДеревоСтрок(ДеревоСтрок)
	Результат = Новый ДеревоЗначений;
	Колонки = ?(ТипЗнч(ДеревоСтрок)=Тип("ДеревоЗначений"), ДеревоСтрок.Колонки, ДеревоСтрок.Владелец().Колонки);
	Для каждого ТекКолонка Из Колонки Цикл
		Результат.Колонки.Добавить(ТекКолонка.Имя,ТекКолонка.ТипЗначения);
	КонецЦикла;
	СкопироватьСтрокиДерева(Результат.Строки, ДеревоСтрок.Строки);
	Возврат Результат;
КонецФункции // СкопироватьДеревоСтрок()

Функция СкопироватьСтруктуру(СтруктураИсточник)
	Результат = Новый Структура;
    Для каждого ТекСтр Из СтруктураИсточник Цикл
		Результат.Вставить(ТекСтр.Ключ, ТекСтр.Значение);	
	КонецЦикла;
	Возврат Результат;
КонецФункции // СкопироватьДеревоСтрок()

Процедура СкопироватьСтрокиДерева(СтрокиКонечные, СтрокиИсходные)
	Для каждого ТекСтр Из СтрокиИсходные Цикл
		НоваяСтрока = СтрокиКонечные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтр,,"ТаблицаЗначений");
		Если ТекСтр.Строки.Количество()>0 Тогда
			СкопироватьСтрокиДерева(НоваяСтрока.Строки, ТекСтр.Строки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция РассчитатьМаксимальноеКоличествоГруппировокДинамическихСтрок()
	Если Настройка.ВидНастройки = 2 
		ИЛИ Настройка.ВидНастройки = 0 И мНастройкаДинамическиеСтроки  Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Настройка", Настройка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(isСтрокиОтчетовПЭО.КоличествоГруппировокВСтроке) КАК КоличествоГруппировок
		|ИЗ
		|	Справочник.isСтрокиОтчетовПЭО КАК isСтрокиОтчетовПЭО
		|ГДЕ
		|	НЕ isСтрокиОтчетовПЭО.ПометкаУдаления
		|	И isСтрокиОтчетовПЭО.Владелец = &Настройка";
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат 1;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат макс(Выборка.КоличествоГруппировок,1);
		КонецЕсли;
	Иначе
		Возврат 1;
	КонецЕсли;
	

КонецФункции // РассчитатьМаксимальноеКоличествоГруппировокДинамическихСтрок()

Процедура СоздатьТаблицуСпецСчетов(ДатаНачала)
    мТаблицаСпецсчетов = Новый ТаблицаЗначений;
	мТаблицаСпецсчетов.Колонки.Добавить("Счет");
	мТаблицаСпецсчетов.Колонки.Добавить("ТипДебет", 	isГенераторОтчетов.ПолучитьОписаниеТиповЧисла(1,0));
	мТаблицаСпецсчетов.Колонки.Добавить("ТипКредит", 	isГенераторОтчетов.ПолучитьОписаниеТиповЧисла(1,0));
	мТаблицаСпецсчетов.Колонки.Добавить("Курс", 		isГенераторОтчетов.ПолучитьОписаниеТиповЧисла(10,4));
	
	КурсНаНачало = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаОтчета, ДатаНачала).Курс;
	Макет = ПолучитьМакет("СпецкурсыДляПересчетаВВалюту");
	Сч = 2;
	Пока Сч <= Макет.ВысотаТаблицы Цикл
		Счет = ПланыСчетов.Международный.НайтиПоКоду(Макет.Область(Сч,1,Сч,1).Текст);
		Если ЗначениеЗаполнено(Счет) Тогда
			Попытка
				Тип = Число(Макет.Область(Сч,3,Сч,3).Текст);
			Исключение
				Сч = Сч + 1;
				Продолжить;
			КонецПопытки; 	
			НоваяСтрока = мТаблицаСпецсчетов.Добавить();
			НоваяСтрока.Счет = Счет;
			НоваяСтрока.ТипДебет 	= Тип;
			НоваяСтрока.ТипКредит 	= Тип;
			НоваяСтрока.Курс 		= КурсНаНачало;
			
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	Если Настройка.СпециальныеКурсыВалют Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Настройка", 	Настройка);
		Запрос.УстановитьПараметр("Валюта", 	ВалютаОтчета);
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	isАлгоритмыПересчетаСуммПоказателейВВалюту.Счет,
		|	isАлгоритмыПересчетаСуммПоказателейВВалюту.ОборотПоДебету + 2 КАК ТипДебет,
		|	isАлгоритмыПересчетаСуммПоказателейВВалюту.ОборотПоКредиту + 2 КАК ТипКредит,
		|	ЕСТЬNULL(isКурсыВалютОтчетовGAAPСрезПоследних.Курс, КурсыВалютСрезПоследних.Курс) КАК Курс
		|ИЗ
		|	РегистрСведений.isАлгоритмыПересчетаСуммПоказателейВВалюту КАК isАлгоритмыПересчетаСуммПоказателейВВалюту
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.isКурсыВалютОтчетовGAAP.СрезПоследних(&ДатаНачала, Валюта = &Валюта) КАК isКурсыВалютОтчетовGAAPСрезПоследних
		|		ПО isАлгоритмыПересчетаСуммПоказателейВВалюту.Настройка = isКурсыВалютОтчетовGAAPСрезПоследних.Настройка
		|			И isАлгоритмыПересчетаСуммПоказателейВВалюту.Счет = isКурсыВалютОтчетовGAAPСрезПоследних.Счет,
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаНачала, Валюта = &Валюта) КАК КурсыВалютСрезПоследних
		|ГДЕ
		|	isАлгоритмыПересчетаСуммПоказателейВВалюту.Настройка = &Настройка";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтрокаТабл = мТаблицаСпецсчетов.Найти(Выборка.Счет,"Счет");
				Если СтрокаТабл = Неопределено Тогда
					ЗаполнитьЗначенияСвойств(мТаблицаСпецсчетов.Добавить(),Выборка);
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаТабл,Выборка);
				КонецЕсли;		
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПодСтрокиСтрокиОтчета(СтрокаОтчета, Знач пДеревоСтрок = Неопределено)
	Если пДеревоСтрок = Неопределено Тогда
	
		пДеревоСтрок = ДеревоСтрок;
	
	КонецЕсли;
	СтрокаДерева = пДеревоСтрок.Строки.Найти(СтрокаОтчета,"Строка",Истина);
	Возврат СтрокаДерева.Строки;		

КонецФункции // ()

/// ПРОЦЕДУРЫ ПОДГОТОВКИ ПЕЧАТИ КОНТРОЛЬНОГО ДОКУМЕНТА
Процедура ВывестиКонтрольныйДокумент()
	Если ПриКонтролеВыводитьКолонкуСтрок Тогда
		ТаблицаСоответствия = ПолучитьТаблицуВхожденияИсточниковВСтроки();
	КонецЕсли;
	мТаблДокКонтрольный = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Контрольный");
    Вывод = Макет.ПолучитьОбласть("Заголовок");
	мТаблДокКонтрольный.Вывести(Вывод);
	ВыводПок = Макет.ПолучитьОбласть("Строка");
	ВыводП = Макет.ПолучитьОбласть("Период");
	Вывод = Макет.ПолучитьОбласть(?(ПриКонтролеВыводитьКолонкуСтрок,"Источник1","Источник"));
	ВыборкаП = мКонтрольныйРезультат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период");
	мТаблДокКонтрольный.НачатьАвтогруппировкуСтрок();
	Сумма 				= 0;
	СуммаКонтрольная 	= 0;
	СтруктураОтбора = Новый Структура("Источник");
	Пока ВыборкаП.Следующий() Цикл
		ВыводП.Параметры.Период = ВыборкаП.Период;
		мТаблДокКонтрольный.Вывести(ВыводП,1);
		ВыборкаС = ВыборкаП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Счет");
		Пока ВыборкаС.Следующий() Цикл
			ВыборкаПок = ВыборкаС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Измерение");
			Пока ВыборкаПок.Следующий()  Цикл
				Если ВыборкаПок.Сумма = ВыборкаПок.СуммаКонтрольная И НЕ ПриКонтролеВыводитьВсеСтроки Тогда
					Продолжить;
				КонецЕсли;
				Сумма = Сумма + ВыборкаПок.Сумма;
				СуммаКонтрольная = СуммаКонтрольная + ВыборкаПок.СуммаКонтрольная;
				ВыводПок.Параметры.Заполнить(ВыборкаПок);
				мТаблДокКонтрольный.Вывести(ВыводПок,2);
				Выборка = ВыборкаПок.Выбрать();
				Пока Выборка.Следующий()  Цикл
					Если Выборка.Источник = NULL Тогда
						Продолжить;
					КонецЕсли;
					Вывод.Параметры.Заполнить(Выборка);
					Если ПриКонтролеВыводитьКолонкуСтрок Тогда
						СтруктураОтбора.Источник = Выборка.Источник;
						Мас = ТаблицаСоответствия.НайтиСтроки(СтруктураОтбора);
						СписокСтрок = Новый СписокЗначений;
						Для каждого ТекСтр Из Мас Цикл
							СписокСтрок.Добавить(ТекСтр.Строка);
						КонецЦикла;
						Вывод.Параметры.Строки = СписокСтрок;
					КонецЕсли;
					мТаблДокКонтрольный.Вывести(Вывод,3);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	мТаблДокКонтрольный.ЗакончитьАвтогруппировкуСтрок();
	Вывод = Макет.ПолучитьОбласть("Итог");
	Вывод.Параметры.Сумма = Сумма;
	Вывод.Параметры.СуммаКонтрольная = СуммаКонтрольная;
	мТаблДокКонтрольный.Вывести(Вывод,3);
КонецПроцедуры

/// ПРОЦЕДУРЫ ПОДГОТОВКИ ПЕЧАТИ ПО МАКЕТУ
Функция ПолучитьМакетДинамическойСекции(СтрокаСекции, Макет)
	Результат = Новый ТабличныйДокумент;
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Измерение");
	ТаблицаЗначений.Колонки.Добавить("Имя");
	ТаблицаЗначений.Колонки.Добавить("ИмяОбласти");
	ТаблицаЗначений.Колонки.Добавить("Значение");
	ТаблицаЗначений.Колонки.Добавить("ФорматнаяСтрока");
	ОбластьИзмерения = Макет.Области.Найти(СтрокаСекции.ИмяКолонкиГруппировки);
	Если ОбластьИзмерения.СодержитЗначение Тогда
		ОбластьИзмерения.СодержитЗначение = Ложь;
	КонецЕсли;
	
	Для каждого ТекИмя Из СтрокаСекции.ТаблицаРесурсов Цикл
		Если ТекИмя.Имя.ВидДанных <> 1 Тогда
			Сообщить("Некорректный вид имени колонки динамической секции!");
			Продолжить;
		КонецЕсли;
		Область = Макет.Области.Найти(ТекИмя.ИмяОбласти);
		Если Область.СодержитЗначение Тогда
			Область.СодержитЗначение = Ложь;
		КонецЕсли;

		Если НЕ Область.Защита Тогда
			Область.Защита = Истина;
		КонецЕсли;
		Для каждого ТекИсточник Из ТекИмя.Имя.Источники Цикл
			Если ТекИсточник.ТипСтроки <> 0 Тогда
				Сообщить("Некорректный тип источника колонки динамической секции!");
				Продолжить;
			КонецЕсли; 	
			СтрокаИсточника = ТаблицаИсточников.Найти(ТекИсточник.Источник,"Источник");
			ОбщаяФорматнаяСтрока = "ЧДЦ="+Строка(ТочностьЕдиницыИзмерения);
			Если СтрокаИсточника <> Неопределено Тогда
				Для каждого ТекСтр Из СтрокаИсточника.ТаблицаЗначений Цикл
					НоваяСтрока = ТаблицаЗначений.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтр);
					НоваяСтрока.Имя = ТекИмя.Имя;
					НоваяСтрока.ИмяОбласти = ТекИмя.ИмяОбласти;
					НоваяСтрока.ФорматнаяСтрока = ?(ТекИмя.Имя.СвояФорматнаяСтрока,ТекИмя.Имя.ФорматнаяСтрока,ОбщаяФорматнаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
    ТаблицаИзмерений = ТаблицаЗначений.Скопировать();
	ТаблицаИзмерений.Свернуть("Измерение","");
	СтруктураОтбора = Новый Структура("Измерение");
	Для каждого ТекИзмерение Из ТаблицаИзмерений Цикл
		Для каждого ТекРесурс Из СтрокаСекции.ТаблицаРесурсов Цикл
			Область = Макет.Области.Найти(ТекРесурс.ИмяОбласти);
			Область.Текст = Формат(0,Область.Формат);;
		КонецЦикла;
		
		СтруктураОтбора.Измерение = ТекИзмерение.Измерение;
		ОбластьИзмерения.Текст = ТекИзмерение.Измерение;	
		Мас = ТаблицаЗначений.НайтиСтроки(СтруктураОтбора);
		Для каждого ТекРесурс Из Мас Цикл
			ТекОбласть = Макет.Области.Найти(ТекРесурс.ИмяОбласти);
			ТекОбласть.Текст = Формат(ТекРесурс.Значение,ТекРесурс.ФорматнаяСтрока);
			//Если ЗначениеЗаполнено(ТекРесурс.ФорматнаяСтрока) Тогда
			//	УстановитьФорматОбластиМакетаИндивидуально(ТекОбласть, ТекРесурс.ФорматнаяСтрока);		
			//Иначе
			//	УстановитьФорматВыводаОбластиМакета(ТекОбласть);
			//КонецЕсли;
		КонецЦикла;
		Результат.Вывести(Макет);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ПолучитьМакетДинамическойСекции()

Процедура СоздатьТаблицыМакетовИИмен()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Настройка",Настройка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	isСтрокиОтчетовПЭО.Ссылка КАК Имя,
	|	isСтрокиОтчетовПЭО.Наименование,
	|	isСтрокиОтчетовПЭО.НомерСтраницы,
	|	isСтрокиОтчетовПЭО.ЗначениеПараметра,
	|	isСтрокиОтчетовПЭО.ВидДанных
	|ИЗ
	|	Справочник.isСтрокиОтчетовПЭО КАК isСтрокиОтчетовПЭО
	|ГДЕ
	|	isСтрокиОтчетовПЭО.Владелец = &Настройка";
	мТаблицаИмен = Запрос.Выполнить().Выгрузить();
	мТаблицаИмен.Колонки.Добавить("Значение");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	isНастройкиОтчетовПЭОМакеты.НомерСтраницы,
	|	isНастройкиОтчетовПЭОМакеты.Макет КАК МакетДок,
	|	isНастройкиОтчетовПЭОМакеты.Имя
	|ИЗ
	|	Справочник.isНастройкиОтчетовПЭО.Макеты КАК isНастройкиОтчетовПЭОМакеты
	|ГДЕ
	|	isНастройкиОтчетовПЭОМакеты.Ссылка = &Настройка";
	мТаблицаМакетов = Запрос.Выполнить().Выгрузить();
	мТаблицаМакетов.Колонки.Добавить("Макет");
	мТаблицаМакетов.Колонки.Добавить("Расшифровка");
	мТаблицаМакетов.Колонки.Добавить("Имена");
	Если Настройка.ВидНастройки = 2 Тогда
		СтруктураОтбора = Новый Структура("НомерСтраницы,Наименование");
		мТаблицаМакетов.Колонки.Добавить("ТаблицаСекций");
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	isСекцииОтчетов.НомерСтраницы КАК НомерСтраницы,
		|	isСекцииОтчетов.ВидСекции,
		|	isСекцииОтчетов.ИмяСекции,
		|	isСекцииОтчетов.НомерСекции КАК НомерСекции,
		|	isСекцииОтчетов.ИмяКолонкиГруппировки
		|ИЗ
		|	Справочник.isСекцииОтчетов КАК isСекцииОтчетов
		|ГДЕ
		|	isСекцииОтчетов.Владелец = &Настройка
		|	И (НЕ isСекцииОтчетов.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтраницы,
		|	НомерСекции
		|ИТОГИ ПО
		|	НомерСтраницы";
		ВыборкаСтраниц = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтраниц.Следующий() Цикл
			СтруктураОтбора.НомерСтраницы = ВыборкаСтраниц.НомерСтраницы;
			СтрокаСтраницы = мТаблицаМакетов.Найти(ВыборкаСтраниц.НомерСтраницы,"НомерСтраницы");
			Если СтрокаСтраницы = Неопределено Тогда
				Продолжить;		
			КонецЕсли;
			ТаблицаСекций = Новый ТаблицаЗначений;
			ТаблицаСекций.Колонки.Добавить("НомерСекции",			isГенераторОтчетов.ПолучитьОписаниеТиповЧисла(2,0));
			ТаблицаСекций.Колонки.Добавить("ВидСекции",				isГенераторОтчетов.ПолучитьОписаниеТиповЧисла(1,0));
			ТаблицаСекций.Колонки.Добавить("ИмяСекции",				isГенераторОтчетов.ПолучитьОписаниеТиповСтроки(50));
			ТаблицаСекций.Колонки.Добавить("ИмяКолонкиГруппировки",	isГенераторОтчетов.ПолучитьОписаниеТиповСтроки(50));
			ТаблицаСекций.Колонки.Добавить("Макет");
			ТаблицаСекций.Колонки.Добавить("ТаблицаРесурсов");
			Макет = СтрокаСтраницы.МакетДок.Получить();
		    Выборка = ВыборкаСтраниц.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСекция = ТаблицаСекций.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСекция,Выборка);
				НоваяСекция.Макет = Новый ТабличныйДокумент;
				МакетСекции = isГенераторОтчетов.ПолучитьМакетИзМакета(НоваяСекция.ИмяСекции,Макет);
				НоваяСекция.Макет.Вывести(МакетСекции);
				Если Выборка.ВидСекции = 1 Тогда
					ТаблицаРесурсов = Новый ТаблицаЗначений;
					ТаблицаРесурсов.Колонки.Добавить("ИмяОбласти",	isГенераторОтчетов.ПолучитьОписаниеТиповСтроки(50));
					ТаблицаРесурсов.Колонки.Добавить("Имя",			Новый ОписаниеТипов("СправочникСсылка.isСтрокиОтчетовПЭО"));
					НомерРесурса = 1;
					Для каждого ТекОбласть Из МакетСекции.Области Цикл
						Если ТекОбласть.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ 
							ТекОбласть.Имя = Выборка.ИмяКолонкиГруппировки Тогда
							Продолжить;						
						КонецЕсли;
						СтруктураОтбора.Наименование = ТекОбласть.Имя;
						Мас = мТаблицаИмен.НайтиСтроки(СтруктураОтбора);
						Если Мас.Количество() = 0 Тогда
							Продолжить;						
						КонецЕсли;
						НовыйРесурс = ТаблицаРесурсов.Добавить();
						НовыйРесурс.ИмяОбласти = ТекОбласть.Имя;
						НовыйРесурс.Имя = Мас[0].Имя;
					КонецЦикла;
					НоваяСекция.ТаблицаРесурсов = ТаблицаРесурсов;
				КонецЕсли;       
			КонецЦикла;
			СтрокаСтраницы.ТаблицаСекций = ТаблицаСекций;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИменаМакета(Макет, НомерСтраницы)
	СтруктураОтбора = Новый Структура("НомерСтраницы, Наименование", НомерСтраницы);

	Для каждого ТекОбласть Из Макет.Области Цикл

		СтруктураОтбора.Наименование = ТекОбласть.Имя;
		Мас = мТаблицаИмен.НайтиСтроки(СтруктураОтбора);
		Если Мас.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаИмениМакета = Мас[0];
		Если СтрокаИмениМакета.Значение = Неопределено Тогда
			Если СтрокаИмениМакета.ВидДанных = 1 Тогда         // это не параметр отчета
				РассчитатьСуммуИмениМакетаИзТаблицыИсточников(СтрокаИмениМакета);
			ИначеЕсли СтрокаИмениМакета.ВидДанных = 2 Тогда
				СтрокаИмениМакета.Значение = ПолучитьЗначениеПараметраОтчета(СтрокаИмениМакета.ЗначениеПараметра);
			ИначеЕсли СтрокаИмениМакета.ВидДанных = 3 Тогда
				СтрокаИмениМакета.Значение = ПолучитьЗначениеПараметраОтчета(СтрокаИмениМакета.ЗначениеПараметра);
			Иначе
				Сообщить("Неверный вид данных имени "+СтрокаИмениМакета.Имя);
			КонецЕсли;
		КонецЕсли;
		Значение = СтрокаИмениМакета.Значение;
		
		// убрать эту конструкцию после проверки возможности полного отказа от использования значений в ячейках
		Если ТипЗнч(Значение)<> Тип("Число") Тогда
			Если ТекОбласть.СодержитЗначение Тогда
				ТекОбласть.СодержитЗначение = Ложь;
			КонецЕсли;
			ТекОбласть.Текст = СтрокаИмениМакета.Значение;
		Иначе
			Если НЕ ТекОбласть.СодержитЗначение Тогда
				ТекОбласть.СодержитЗначение = Истина;
			КонецЕсли;
			Если СтрокаИмениМакета.Имя.СвояФорматнаяСтрока Тогда
				УстановитьФорматОбластиМакетаИндивидуально(ТекОбласть, СтрокаИмениМакета.Имя.ФорматнаяСтрока);		
			Иначе
				УстановитьФорматВыводаОбластиМакета(ТекОбласть);
			КонецЕсли;
			ТекОбласть.Значение = Значение;
			ТекОбласть.Расшифровка = СтрокаИмениМакета.Имя;
		КонецЕсли;
		Если НЕ ТекОбласть.Защита Тогда
			ТекОбласть.Защита = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПечатьМакета()

Процедура УстановитьФлагиДинамическихСекций()
	СтруктураОтбора = Новый Структура("Источник, ВидПериода");
	Для каждого ТекСтраница Из мТаблицаМакетов Цикл
		Для каждого ТекСекция Из ТекСтраница.ТаблицаСекций Цикл
			Если ТекСекция.ВидСекции = 1 Тогда
				Для каждого ТекРесурс Из ТекСекция.ТаблицаРесурсов Цикл
					Для каждого ТекИсточник Из ТекРесурс.Имя.Источники Цикл
						Если ТекИсточник.ТипСтроки <> 0 Тогда
							Сообщить("В источниках динамических секциях нельзя использовать ссылку на имена!");					
							Продолжить;
						КонецЕсли;		
						ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекИсточник);
						Мас = ТаблицаИсточников.НайтиСтроки(СтруктураОтбора);
						Если Мас.Количество() <> 0 Тогда
							Мас[0].ДинамическаяСекция = 1;						
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;		
			КонецЕсли;
			
		
		КонецЦикла;	
		
	
	КонецЦикла;
	

КонецПроцедуры

/// ПРОЦЕДУРЫ ПОЛУЧЕНИЯ ДАННЫХ ИЗ БД
Функция РассчитатьВыражение(Выражение, пДеревоСтрок, пТаблицаИсточников, пТаблицаВыражений)
	СтрокаВыражения = пТаблицаВыражений.Найти(Выражение,"Выражение");
	Если СтрокаВыражения = Неопределено Тогда
		СтрокаВыражения = пТаблицаВыражений.Добавить();
	Иначе
		Возврат СтрокаВыражения;
	КонецЕсли;
	ПривязкаКод = ?(мРежимПривязкиИсточникаКСтроке,"В"+Выражение.Код,"");
	СтрокаВыражения.Выражение = Выражение;
	Если Выражение.ВидВыражения = 0 Тогда  // сумматор
		Результат=Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Период",isГенераторОтчетов.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		Результат.Колонки.Добавить("Сумма",	ПолучитьОписаниеТипаРесурса());
		Для каждого ТекСтр Из Выражение.Источники Цикл
			ПривязкаНомерСтроки = ТекСтр.НомерСтроки;
			ТаблицаИсточника = ПолучитьТаблицуИсточника(ТекСтр.ТипСтроки,ТекСтр.Источник, ПривязкаКод, ПривязкаНомерСтроки, пДеревоСтрок, пТаблицаИсточников, пТаблицаВыражений);				
			ДобавитьСуммыВСтрокуТаблицы(Результат,ТаблицаИсточника,ТекСтр.Коэффициент);
		КонецЦикла;		
	Иначе	
	    Результат = ВычислитьВыражение(Выражение, пДеревоСтрок, пТаблицаИсточников, пТаблицаВыражений);
	КонецЕсли;
	СтрокаВыражения.ТаблицаЗначений = Результат;
	Возврат СтрокаВыражения;

КонецФункции // РассчитатьВыражение(ТекСтр.Источник)()

Процедура РассчитатьДеревоДинамическихСтрок(Узел, ВыборкаО, НомерГруппировки, КоличествоГруппировок, Периоды)
	ИмяИзмерения = "Измерение"+Строка(НомерГруппировки);
	Выборка = ВыборкаО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ИмяИзмерения);
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Узел.Строки.Добавить();
		НоваяСтрока.Измерение = Выборка[ИмяИзмерения];
		Таблица = мШаблон.Скопировать();
		ЗаполнитьТаблицуЗначенийИсточника(Выборка, Таблица, Периоды);
		НоваяСтрока.ТаблицаЗначений = Таблица;
		Если НомерГруппировки < КоличествоГруппировок Тогда
			РассчитатьДеревоДинамическихСтрок(НоваяСтрока, Выборка, НомерГруппировки+1, КоличествоГруппировок, Периоды)
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ()

Процедура ЗаполнитьТаблицуЗначенийИсточника(ВыборкаО, Таблица, Периоды)
	Выборка=ВыборкаО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Период");
	СтруктураОтбора = Новый Структура("Период");
	Если ВыборкаО.ЭтоОстаток Тогда					// обработка выборки по источникам остатков
		Для Сч=0 По Периоды.Количество()-1 Цикл 	// гоним по периодам
			Сумма=0;
			ТекПериод=Периоды[Сч];
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(ТекПериод,"Период") Тогда  // попытка найти строку выборки по периоду
				Сумма=Выборка.Сумма;   // нашли
			Иначе                  
				Выборка.Сбросить();     // не нашли
				Пока Выборка.Следующий() Цикл   // поиск ближайшей даты, которая > нужной
					Если Выборка.Период>ТекПериод Тогда
						Сумма=Выборка.Сумма;   // нашли
						Прервать;
					КонецЕсли;							
				КонецЦикла;
			КонецЕсли;
			СтруктураОтбора.Период=ТекПериод;
			ДобавитьЗначениеВТаблицу(Таблица,СтруктураОтбора,"Сумма",Сумма);
		КонецЦикла;
	Иначе
		Пока Выборка.Следующий() Цикл
			СтруктураОтбора.Период=Выборка.Период;
			ДобавитьЗначениеВТаблицу(Таблица,СтруктураОтбора,"Сумма",Выборка.Сумма);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДеревоДинамическихСтрок(Результат,УзелДерева, Уровень, ВидПериода)
	ИмяИзмерения = "Измерение"+Строка(Уровень);
	ВыборкаИзмерения = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,ИмяИзмерения);
	Пока ВыборкаИзмерения.Следующий() Цикл
		НоваяСтрока = УзелДерева.Строки.Найти(ВыборкаИзмерения[ИмяИзмерения]);
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = УзелДерева.Строки.Добавить();
			НоваяСтрока.Измерение = ВыборкаИзмерения[ИмяИзмерения];
			НоваяСтрока.ТаблицаИсточников = мШаблонТаблицыИсточников.Скопировать();
			НоваяСтрока.ТаблицаВыражений = СоздатьТаблицуВыражений();
		КонецЕсли;
		ВыборкаИ=ВыборкаИзмерения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Ид");
		РассчитатьТаблицуИсточников(ВыборкаИ,НоваяСтрока.ТаблицаИсточников, ВидПериода, Ложь);
		Если Уровень < мМаксимальноеКоличествоГруппировокДинамическихСтрок Тогда
			ЗаполнитьДеревоДинамическихСтрок(ВыборкаИзмерения,НоваяСтрока, Уровень+1, ВидПериода);			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// режим = 1 - выборка источников текущей настройки
// режим = 2 - выборка источников из других настроек 
//
Функция ПолучитьРезультатТаблицыИсточника(Режим, СписокОбъектов = Неопределено)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",				Настройка );
	Запрос.УстановитьПараметр("Режим",					Режим);
	Запрос.УстановитьПараметр("СписокОбъектов",			СписокОбъектов);
	Запрос.УстановитьПараметр("ПривязатьКСтрокеОтчета",	мРежимПривязкиИсточникаКСтроке);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаИсточников.Источник,
	|	ТаблицаИсточников.ВидПериода,
	|	ТаблицаИсточников.Источник.Владелец.РегистрБухгалтерии КАК РегистрБухгалтерии,
	|	ТаблицаИсточников.СпецИтоги КАК Специтоги,
	|	ВЫБОР
	|		КОГДА &ПривязатьКСтрокеОтчета
	|			ТОГДА ТаблицаИсточников.Привязка
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Привязка,
	|	ВЫБОР
	|		КОГДА &ПривязатьКСтрокеОтчета
	|			ТОГДА ТаблицаИсточников.НомерСтроки
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПривязкаНомерСтроки,
	|	ВЫБОР
	|		КОГДА &ПривязатьКСтрокеОтчета
	|			ТОГДА ТаблицаИсточников.ПривязкаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПривязкаКод,
	|	ТаблицаИсточников.ВидОтбораПоПодразделению,
	|	ТаблицаИсточников.КоличествоГруппировок,
	|	ТаблицаИсточников.НомерСубконто1,
	|	ТаблицаИсточников.НомерСубконто2,
	|	ТаблицаИсточников.НомерСубконто3,
	|	ТаблицаИсточников.НомерСубконто4,
	|	ТаблицаИсточников.НомерСубконто5,
	|	ТаблицаИсточников.РежимИспользованияОтбораПоИзмерениям,
	|	0 КАК РежимДинамическихСтрок,
	|	ВЫБОР
	|		КОГДА ТаблицаИсточников.КоличествоГруппировок > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КореньДинамическихГруппировок,
	|	ТаблицаИсточников.ВидИсточника КАК ВидИсточника,
	|	ТаблицаИсточников.ТипСтроки
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		isВыраженияОтчетовПЭОСумматор.Источник КАК Источник,
	|		isВыраженияОтчетовПЭОСумматор.ВидПериода КАК ВидПериода,
	|		isВыраженияОтчетовПЭОСумматор.Ссылка КАК Привязка,
	|		isВыраженияОтчетовПЭОСумматор.НомерСтроки КАК НомерСтроки,
	|		isВыраженияОтчетовПЭОСумматор.ВидОтбораПоПодразделению КАК ВидОтбораПоПодразделению,
	|		""В"" + isВыраженияОтчетовПЭОСумматор.Ссылка.Код КАК ПривязкаКод,
	|		isВыраженияОтчетовПЭОСумматор.Ссылка.КоличествоГруппировокВСтроке КАК КоличествоГруппировок,
	|		НЕОПРЕДЕЛЕНО КАК НомерСубконто1,
	|		НЕОПРЕДЕЛЕНО КАК НомерСубконто2,
	|		НЕОПРЕДЕЛЕНО КАК НомерСубконто3,
	|		НЕОПРЕДЕЛЕНО КАК НомерСубконто4,
	|		НЕОПРЕДЕЛЕНО КАК НомерСубконто5,
	|		isВыраженияОтчетовПЭОСумматор.РежимИспользованияОтбораПоИзмерениям КАК РежимИспользованияОтбораПоИзмерениям,
	|		ЛОЖЬ КАК СпецИтоги,
	|		isВыраженияОтчетовПЭОСумматор.ВидИсточника КАК ВидИсточника,
	|		isВыраженияОтчетовПЭОСумматор.ТипСтроки КАК ТипСтроки
	|	ИЗ
	|		Справочник.isВыраженияОтчетовПЭО.Источники КАК isВыраженияОтчетовПЭОСумматор
	|	ГДЕ
	|		НЕ isВыраженияОтчетовПЭОСумматор.Ссылка.ПометкаУдаления
	|		И ВЫБОР
	|				КОГДА &Режим = 0
	|					ТОГДА isВыраженияОтчетовПЭОСумматор.ТипСтроки = 0
	|				ИНАЧЕ isВыраженияОтчетовПЭОСумматор.ТипСтроки > 3
	|			КОНЕЦ
	|		И isВыраженияОтчетовПЭОСумматор.Ссылка.ВидВыражения = 0
	|		И isВыраженияОтчетовПЭОСумматор.Ссылка.Владелец = &Владелец
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		isВыраженияОтчетовПЭО.Источник1,
	|		isВыраженияОтчетовПЭО.ВидПериода1,
	|		isВыраженияОтчетовПЭО.Ссылка,
	|		-1,
	|		isВыраженияОтчетовПЭО.ВидОтбораПоПодразделению1,
	|		""В"" + isВыраженияОтчетовПЭО.Код,
	|		0,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		isВыраженияОтчетовПЭО.РежимИспользованияОтбораПоИзмерениям1,
	|		ЛОЖЬ,
	|		isВыраженияОтчетовПЭО.ВидИсточника1,
	|		isВыраженияОтчетовПЭО.ТипИсточника1
	|	ИЗ
	|		Справочник.isВыраженияОтчетовПЭО КАК isВыраженияОтчетовПЭО
	|	ГДЕ
	|		НЕ isВыраженияОтчетовПЭО.ПометкаУдаления
	|		И isВыраженияОтчетовПЭО.ВидВыражения = 1
	|		И ВЫБОР
	|				КОГДА &Режим = 0
	|					ТОГДА isВыраженияОтчетовПЭО.ТипИсточника1 = 0
	|				ИНАЧЕ isВыраженияОтчетовПЭО.ТипИсточника1 > 3
	|			КОНЕЦ
	|		И isВыраженияОтчетовПЭО.Владелец = &Владелец
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		isВыраженияОтчетовПЭО.Источник2,
	|		isВыраженияОтчетовПЭО.ВидПериода2,
	|		isВыраженияОтчетовПЭО.Ссылка,
	|		-2,
	|		isВыраженияОтчетовПЭО.ВидОтбораПоПодразделению2,
	|		""В"" + isВыраженияОтчетовПЭО.Код,
	|		0,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		isВыраженияОтчетовПЭО.РежимИспользованияОтбораПоИзмерениям2,
	|		ЛОЖЬ,
	|		isВыраженияОтчетовПЭО.ВидИсточника2,
	|		isВыраженияОтчетовПЭО.ТипИсточника2
	|	ИЗ
	|		Справочник.isВыраженияОтчетовПЭО КАК isВыраженияОтчетовПЭО
	|	ГДЕ
	|		НЕ isВыраженияОтчетовПЭО.ПометкаУдаления
	|		И isВыраженияОтчетовПЭО.ВидВыражения = 1
	|		И ВЫБОР
	|				КОГДА &Режим = 0
	|					ТОГДА isВыраженияОтчетовПЭО.ТипИсточника2 = 0
	|				ИНАЧЕ isВыраженияОтчетовПЭО.ТипИсточника2 > 3
	|			КОНЕЦ
	|		И isВыраженияОтчетовПЭО.Владелец = &Владелец
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		isСтрокиОтчетовПЭОИсточники.Источник,
	|		isСтрокиОтчетовПЭОИсточники.ВидПериода,
	|		isСтрокиОтчетовПЭОИсточники.Ссылка,
	|		isСтрокиОтчетовПЭОИсточники.НомерСтроки,
	|		isСтрокиОтчетовПЭОИсточники.ВидОтбораПоПодразделению,
	|		""С"" + isСтрокиОтчетовПЭОИсточники.Ссылка.Код,
	|		isСтрокиОтчетовПЭОИсточники.Ссылка.КоличествоГруппировокВСтроке,
	|		isСтрокиОтчетовПЭОИсточники.НомерСубконто1,
	|		isСтрокиОтчетовПЭОИсточники.НомерСубконто2,
	|		isСтрокиОтчетовПЭОИсточники.НомерСубконто3,
	|		isСтрокиОтчетовПЭОИсточники.НомерСубконто4,
	|		isСтрокиОтчетовПЭОИсточники.НомерСубконто5,
	|		isСтрокиОтчетовПЭОИсточники.РежимИспользованияОтбораПоИзмерениям,
	|		ВЫБОР
	|			КОГДА isСтрокиОтчетовПЭОИсточники.Ссылка.СпособВычисленияКолонкиИтогов = 2
	|					И isСтрокиОтчетовПЭОИсточники.Ссылка.ВидДанных = 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		isСтрокиОтчетовПЭОИсточники.ВидИсточника,
	|		isСтрокиОтчетовПЭОИсточники.ТипСтроки
	|	ИЗ
	|		Справочник.isСтрокиОтчетовПЭО.Источники КАК isСтрокиОтчетовПЭОИсточники
	|	ГДЕ
	|		НЕ isСтрокиОтчетовПЭОИсточники.Ссылка.ПометкаУдаления
	|		И ВЫБОР
	|				КОГДА &Режим = 0
	|					ТОГДА isСтрокиОтчетовПЭОИсточники.ТипСтроки = 0
	|				ИНАЧЕ isСтрокиОтчетовПЭОИсточники.ТипСтроки > 3
	|			КОНЕЦ
	|		И isСтрокиОтчетовПЭОИсточники.Ссылка.Владелец = &Владелец
	|		И isСтрокиОтчетовПЭОИсточники.Ссылка.ВидДанных <> 2) КАК ТаблицаИсточников
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИсточников.Источник,
	|	ТаблицаИсточников.ВидПериода,
	|	ТаблицаИсточников.Источник.Владелец.РегистрБухгалтерии,
	|	ТаблицаИсточников.ВидОтбораПоПодразделению,
	|	ТаблицаИсточников.КоличествоГруппировок,
	|	ТаблицаИсточников.НомерСубконто1,
	|	ТаблицаИсточников.НомерСубконто2,
	|	ТаблицаИсточников.НомерСубконто3,
	|	ТаблицаИсточников.НомерСубконто4,
	|	ТаблицаИсточников.НомерСубконто5,
	|	ТаблицаИсточников.РежимИспользованияОтбораПоИзмерениям,
	|	ТаблицаИсточников.СпецИтоги,
	|	ТаблицаИсточников.ВидИсточника,
	|	ТаблицаИсточников.ТипСтроки,
	|	ВЫБОР
	|		КОГДА &ПривязатьКСтрокеОтчета
	|			ТОГДА ТаблицаИсточников.Привязка
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПривязатьКСтрокеОтчета
	|			ТОГДА ТаблицаИсточников.НомерСтроки
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПривязатьКСтрокеОтчета
	|			ТОГДА ТаблицаИсточников.ПривязкаКод
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаИсточников.КоличествоГруппировок > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидИсточника";
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // ()

Процедура ДополнитьТаблицуИсточниковИзДругихОтчетов(Результат)
	ДопТаблица = ПолучитьРезультатТаблицыИсточника(1);
	Для каждого ТекСтр Из ДопТаблица Цикл
		ДобавитьИсточникиДругогоОтчета(ТекСтр.Источник, ТекСтр, Результат);	
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьИсточникиДругогоОтчета(Источник, СтрокаТаблицыИсточников, Результат)
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.isВыраженияОтчетовПЭО") 
		ИЛИ ТипЗнч(Источник) = Тип("СправочникСсылка.isСтрокиОтчетовПЭО") Тогда
		СтрокаДругогоОтчета = мТаблицаДеревьевДругихОтчетов.Найти(Источник.Владелец, "Настройка");
		Если СтрокаДругогоОтчета = Неопределено Тогда
			СтрокаДругогоОтчета = мТаблицаДеревьевДругихОтчетов.Добавить();
			СтрокаДругогоОтчета.Настройка = Источник.Владелец;
			СтрокаДругогоОтчета.ДеревоСтрок = ПолучитьДеревоСтрокОтчета(Источник.Владелец); 
			СтрокаДругогоОтчета.ТаблицаВыражений = СоздатьТаблицуВыражений();
		КонецЕсли;
		ДеревоСтрокИсточника = СтрокаДругогоОтчета.ДеревоСтрок;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.isИсточникиОтчетовПЭО") Тогда
		НоваяСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыИсточников);
		НоваяСтрока.Источник = Источник;
		НоваяСтрока.РегистрБухгалтерии = Источник.Владелец.РегистрБухгалтерии;
		Возврат НоваяСтрока;
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.isСтрокиОтчетовПЭО") Тогда     
		Если Источник.Источники.Количество()=0 Тогда
			Подстроки = ПолучитьПодСтрокиСтрокиОтчета(Источник, ДеревоСтрокИсточника);
			Для каждого ТекСтр Из Подстроки Цикл
				НоваяСтрока = ДобавитьИсточникиДругогоОтчета(ТекСтр.Строка, СтрокаТаблицыИсточников, Результат);
			КонецЦикла;
		Иначе	
			Для каждого ТекСтр Из Источник.Источники Цикл
				НоваяСтрока = ДобавитьИсточникиДругогоОтчета(ТекСтр.Источник, СтрокаТаблицыИсточников, Результат);
				Если НоваяСтрока <> Неопределено Тогда
					НоваяСтрока.РежимИспользованияОтбораПоИзмерениям = ТекСтр.РежимИспользованияОтбораПоИзмерениям;
					НоваяСтрока.СПецИтоги = Источник.СпособВычисленияКолонкиИтогов = 2 И Источник.ВидДанных = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.isВыраженияОтчетовПЭО") Тогда
		Если Источник.ВидВыражения = 0 Тогда
			Для каждого ТекСтр Из Источник.Источники Цикл
				НоваяСтрока =  ДобавитьИсточникиДругогоОтчета(ТекСтр.Источник, СтрокаТаблицыИсточников, Результат);
				Если НоваяСтрока <> Неопределено Тогда
					НоваяСтрока.РежимИспользованияОтбораПоИзмерениям = ТекСтр.РежимИспользованияОтбораПоИзмерениям;
					НоваяСтрока.СПецИтоги = Ложь;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяСтрока = ДобавитьИсточникиДругогоОтчета(Источник.Источник1, СтрокаТаблицыИсточников, Результат);
			Если НоваяСтрока <> Неопределено Тогда
				НоваяСтрока.РежимИспользованияОтбораПоИзмерениям = Источник.РежимИспользованияОтбораПоИзмерениям1;
				НоваяСтрока.СПецИтоги = Ложь;
			КонецЕсли;
			ДобавитьИсточникиДругогоОтчета(Источник.Источник2, СтрокаТаблицыИсточников, Результат);
			Если НоваяСтрока <> Неопределено Тогда
				НоваяСтрока.РежимИспользованияОтбораПоИзмерениям = Источник.РежимИспользованияОтбораПоИзмерениям2;
				НоваяСтрока.СПецИтоги = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция СоздатьТаблицуИсточников() Экспорт
	Результат = ПолучитьРезультатТаблицыИсточника(0);
	ДополнитьТаблицуИсточниковИзДругихОтчетов(Результат);
	Если Настройка.ВидНастройки <> 1 Тогда
		Результат.Колонки.Добавить("ТаблицаЗначений",Новый ОписаниеТипов("ТаблицаЗначений"));
	КонецЕсли;
	Результат.Колонки.Добавить("Значение", ПолучитьОписаниеТипаРесурса());
	Если Настройка.ВидНастройки = 0 Тогда
		Результат.Колонки.Добавить("ЗначениеИтоговойКолонки", ПолучитьОписаниеТипаРесурса());
	Иначе
		Результат.Колонки.Добавить("ДинамическаяСекция",isГенераторОтчетов.ПолучитьОписаниеТиповЧисла(1,0));
	КонецЕсли;

	Результат.Колонки.Добавить("ТаблицаРасшифровки", 		Новый ОписаниеТипов("ТаблицаЗначений"));
	Результат.Колонки.Добавить("ДеревоДинамическихСтрок", 	Новый ОписаниеТипов("ДеревоЗначений"));
	Результат.Колонки.Добавить("Ид", 						isГенераторОтчетов.ПолучитьОписаниеТиповЧисла(10,0));

	Для Сч = 1 По Результат.Количество() Цикл
		ТекСтр = Результат[Сч-1];
		ТекСтр.Ид = Сч;
		Если мНастройкаДинамическиеСтроки 
			И НЕ ТекСтр.КореньДинамическихГруппировок 
			И ТекСтр.КоличествоГруппировок = 0
			И ТипЗнч(ТекСтр.Привязка) = Тип("СправочникСсылка.isСтрокиОтчетовПЭО") Тогда
			ТекСтр.КоличествоГруппировок = ПолучитьКоличествоДинамическихГруппировок(ТекСтр.Привязка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции // 

Функция СоздатьТаблицуВыражений()
    Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Выражение",		 Новый ОписаниеТипов("СправочникСсылка.isВыраженияОтчетовПЭО"));
	Если Настройка.ВидНастройки  = 0 Тогда 
		Результат.Колонки.Добавить("ТаблицаЗначений",Новый ОписаниеТипов("ТаблицаЗначений"));
	Иначе	
		Результат.Колонки.Добавить("Значение",ПолучитьОписаниеТипаРесурса());
	КонецЕсли;
	
	
    Возврат Результат;
КонецФункции // СоздатьТаблицуВыражений()

Функция СоздатьТаблицуРегистровБухгалтерии(пНастройка) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",пНастройка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.РегистрБухгалтерии,
	|	ВложенныйЗапрос.ТипРегистра,
	|	ЛОЖЬ КАК ЕстьКорСчетОборотов,
	|	ВложенныйЗапрос.ВидПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА isСтрокиОтчетовПЭОИсточники.ТипСтроки > 3
	|				ТОГДА isСтрокиОтчетовПЭОИсточники.ВидИсточника
	|			ИНАЧЕ isСтрокиОтчетовПЭОИсточники.ВидИсточника.РегистрБухгалтерии
	|		КОНЕЦ КАК РегистрБухгалтерии,
	|		isСтрокиОтчетовПЭОИсточники.ВидИсточника.ТипРегистра КАК ТипРегистра,
	|		isСтрокиОтчетовПЭОИсточники.ВидПериода КАК ВидПериода
	|	ИЗ
	|		Справочник.isСтрокиОтчетовПЭО.Источники КАК isСтрокиОтчетовПЭОИсточники
	|	ГДЕ
	|		(isСтрокиОтчетовПЭОИсточники.ТипСтроки = 0
	|				ИЛИ isСтрокиОтчетовПЭОИсточники.ТипСтроки > 3)
	|		И НЕ isСтрокиОтчетовПЭОИсточники.Ссылка.ПометкаУдаления
	|		И isСтрокиОтчетовПЭОИсточники.Ссылка.Владелец = &Владелец
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА isВыраженияОтчетовПЭО.ТипИсточника1 > 3
	|				ТОГДА isВыраженияОтчетовПЭО.ВидИсточника1
	|			ИНАЧЕ isВыраженияОтчетовПЭО.ВидИсточника1.РегистрБухгалтерии
	|		КОНЕЦ,
	|		isВыраженияОтчетовПЭО.ВидИсточника1.ТипРегистра,
	|		isВыраженияОтчетовПЭО.ВидПериода1
	|	ИЗ
	|		Справочник.isВыраженияОтчетовПЭО КАК isВыраженияОтчетовПЭО
	|	ГДЕ
	|		НЕ isВыраженияОтчетовПЭО.ПометкаУдаления
	|		И isВыраженияОтчетовПЭО.ВидВыражения = 1
	|		И (isВыраженияОтчетовПЭО.ТипИсточника1 = 0
	|				ИЛИ isВыраженияОтчетовПЭО.ТипИсточника1 > 3)
	|		И isВыраженияОтчетовПЭО.Владелец = &Владелец
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА isВыраженияОтчетовПЭО.ТипИсточника2 > 3
	|				ТОГДА isВыраженияОтчетовПЭО.ВидИсточника2
	|			ИНАЧЕ isВыраженияОтчетовПЭО.ВидИсточника2.РегистрБухгалтерии
	|		КОНЕЦ,
	|		isВыраженияОтчетовПЭО.ВидИсточника2.ТипРегистра,
	|		isВыраженияОтчетовПЭО.ВидПериода2
	|	ИЗ
	|		Справочник.isВыраженияОтчетовПЭО КАК isВыраженияОтчетовПЭО
	|	ГДЕ
	|		НЕ isВыраженияОтчетовПЭО.ПометкаУдаления
	|		И isВыраженияОтчетовПЭО.ВидВыражения = 1
	|		И (isВыраженияОтчетовПЭО.ТипИсточника2 = 0
	|				ИЛИ isВыраженияОтчетовПЭО.ТипИсточника2 > 3)
	|		И isВыраженияОтчетовПЭО.Владелец = &Владелец
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА isВыраженияОтчетовПЭОСумматор.ТипСтроки > 3
	|				ТОГДА isВыраженияОтчетовПЭОСумматор.ВидИсточника
	|			ИНАЧЕ isВыраженияОтчетовПЭОСумматор.ВидИсточника.РегистрБухгалтерии
	|		КОНЕЦ,
	|		isВыраженияОтчетовПЭОСумматор.ВидИсточника.ТипРегистра,
	|		isВыраженияОтчетовПЭОСумматор.ВидПериода
	|	ИЗ
	|		Справочник.isВыраженияОтчетовПЭО.Источники КАК isВыраженияОтчетовПЭОСумматор
	|	ГДЕ
	|		НЕ isВыраженияОтчетовПЭОСумматор.Ссылка.ПометкаУдаления
	|		И (isВыраженияОтчетовПЭОСумматор.ТипСтроки = 0
	|				ИЛИ isВыраженияОтчетовПЭОСумматор.ТипСтроки > 3)
	|		И isВыраженияОтчетовПЭОСумматор.Ссылка.Владелец = &Владелец) КАК ВложенныйЗапрос";
	
	Результат = Запрос.Выполнить().Выгрузить();
	ДополнитьТаблицуРегистровИзИсточниковДругихОтчетов(Результат);
	
	Колонки = Результат.Колонки;
	
	// запросы пакета с аналитикой
	Колонки.Добавить("СчетаОборотов");
	Колонки.Добавить("СчетаОстатков");
	Колонки.Добавить("РесурсыОборотов");
	Колонки.Добавить("РесурсыОстатков");
	Колонки.Добавить("СубконтоОборотов");
	Колонки.Добавить("СубконтоОстатков");
	
	// запросы пакета без аналитики, но с корсчетами
	Колонки.Добавить("СчетаОборотовКор");
	Колонки.Добавить("РесурсыОборотовКор");
	Колонки.Добавить("СубконтоОборотовКор");
	Колонки.Добавить("СубконтоОстатковКор");
	
	// запросы пакета без аналитики и корсчетов
	Колонки.Добавить("СчетаОборотовБА");
	Колонки.Добавить("СчетаОстатковБА");
	Колонки.Добавить("РесурсыОборотовБА");
	Колонки.Добавить("РесурсыОстатковБА");
	Колонки.Добавить("СубконтоОборотовБА");
	Колонки.Добавить("СубконтоОстатковБА");
	Возврат Результат;
КонецФункции

Процедура ДополнитьТаблицуРегистровИзИсточниковДругихОтчетов(ТаблицаРегистров)
	// формируем таблицу регистров из источников, которые взяты из других отчетов
	ДопТаблица = ТаблицаРегистров.СкопироватьКолонки();
	Сч = 0;
	Пока Сч <= ТаблицаРегистров.Количество()-1 Цикл
		ТекРегистр = ТаблицаРегистров[Сч];
		Если ТипЗнч(ТекРегистр.РегистрБухгалтерии) = Тип("СправочникСсылка.isНастройкиОтчетовПЭО") Тогда
			ТаблицаДругогоОтчета = СоздатьТаблицуРегистровБухгалтерии(ТекРегистр.РегистрБухгалтерии);		
            isГенераторОтчетов.ДобавитьТаблицуКТаблице(ДопТаблица, ТаблицаДругогоОтчета);
			ТаблицаРегистров.Удалить(ТекРегистр);
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	ДопТаблица.Свернуть("РегистрБухгалтерии, ТипРегистра, ЕстьКорСчетОборотов, ВидПериода",""); 
	СтруктураОтбора = Новый Структура("РегистрБухгалтерии, ТипРегистра, ЕстьКорСчетОборотов, ВидПериода");
	
	Для каждого ТекСтр Из ДопТаблица Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекСтр);
		Мас = ТаблицаРегистров.НайтиСтроки(СтруктураОтбора);
		Если Мас.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаРегистров.Добавить(), ТекСтр);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТаблицуИсточниковИзРегистра(СтрокаРегистраБухгалтерии, ТаблицаРасшифровкиИсточников, СтруктураИзмерений) Экспорт
	УстановитьТекстУсловияОтбораПоПодразделению();
//	мРежимПакетногоЗапроса = мРежимЗапросаИсточников = 1 И СтрокаРегистраБухгалтерии.ТипРегистра = 0;
	мРежимПакетногоЗапроса = мРежимЗапросаИсточников = 1 И СтрокаРегистраБухгалтерии.ТипРегистра = 0 И Настройка.ВидНастройки <> 2;
	Если мРежимПакетногоЗапроса Тогда
		мТаблицаПакетаЗапросов = Новый ТаблицаЗначений;
		Колонки = мТаблицаПакетаЗапросов.Колонки;
		Колонки.Добавить("Счет");
		Колонки.Добавить("КорСчет");
		Колонки.Добавить("КорСчетНеРавно");
		Колонки.Добавить("ЭтоОстаток");
		Колонки.Добавить("ИмяТаблицы");
		Колонки.Добавить("Идентификатор");
		Колонки.Добавить("ИменаРесурсов", 	Новый ОписаниеТипов("Массив"));
		Колонки.Добавить("ИменаИзмерений", 	Новый ОписаниеТипов("Массив"));
		Колонки.Добавить("УсловиеОтбора");
	КонецЕсли;
	Запрос=Новый Запрос;

	РегистрБухгалтерии = СтрокаРегистраБухгалтерии.РегистрБухгалтерии;
	СтруктураПериода = ПолучитьСтруктуруПериодаЗапроса(СтрокаРегистраБухгалтерии.ВидПериода);
	Если мОтчетВВалюте Тогда
		СоздатьТаблицуСпецСчетов(СтруктураПериода.ДатаНачала);	
	КонецЕсли;
	Если ТаблицаРасшифровкиИсточников = Неопределено Тогда
		Мас = ТаблицаИсточников.НайтиСтроки(Новый Структура("РегистрБухгалтерии, ВидПериода",РегистрБухгалтерии, СтрокаРегистраБухгалтерии.ВидПериода));	
	Иначе	
		Мас = ТаблицаРасшифровкиИсточников.НайтиСтроки(Новый Структура("РегистрБухгалтерии, ВидПериода", РегистрБухгалтерии, СтрокаРегистраБухгалтерии.ВидПериода));	
		Если СтруктураИзмерений <> Неопределено Тогда
			Для каждого ТекИзм Из СтруктураИзмерений Цикл
				Запрос.УстановитьПараметр(ТекИзм.Ключ, ТекИзм.Значение);		
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Если Мас.Количество() = 0 Тогда
	
		ВОзврат;
	
	КонецЕсли;
	
	ТекстЗапроса				= "";
	ТекстЗапросаКонтрольный		= "";
	ТекстЗапросаСпецостатков 	= "";
	//++Жилицкий \ Оптимизация \ Уменьшение длины текста запроса через разбиение по частям
	МассивЗапросов = Новый массив;
	ИспользуемРазделение = Истина;
	ДанныеПоОборотамЕстьВВрТЗ = Ложь;
	МенЗапросов = новый МенеджерВременныхТаблиц;
	Для Сч=0 По Цел(Мас.Количество()/100) Цикл
		МассивЗапросов.Добавить();
	КонецЦикла; 
	//--Жилицкий \ Оптимизация \ Уменьшение длины текста запроса через разбиение по частям
	
	Для Сч=0 По Мас.Количество()-1 Цикл
		ИмяИсточника="Источник"+ПолучитьСуфиксПараметра(Сч+1);
		Если ТаблицаРасшифровкиИсточников = Неопределено Тогда
			СтрокаИсточника=Мас[Сч];
		Иначе	
			СтрокаИсточника = ТаблицаИсточников.НайтиСтроки(Новый Структура("Источник, ВидПериода, Привязка",Мас[Сч].Источник, 
						СтрокаРегистраБухгалтерии.ВидПериода, Мас[Сч].Привязка))[0];
		КонецЕсли;
		СтруктураЗапросов = СоздатьПодзапросВЗапросеИсточников(Запрос, СтрокаИсточника, ИмяИсточника, Сч+1,СтрокаРегистраБухгалтерии, ТаблицаРасшифровкиИсточников <> Неопределено, СтруктураИзмерений);
		Если НЕ ПустаяСтрока(СтруктураЗапросов.ЗапросОсновной) Тогда
			ДобавитьРеквизит(ТекстЗапроса,СтруктураЗапросов.ЗапросОсновной,мСтрокаОбъединения);
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураЗапросов.ЗапросКонтрольный) Тогда
			ДобавитьРеквизит(ТекстЗапросаКонтрольный,СтруктураЗапросов.ЗапросКонтрольный,мСтрокаОбъединения);
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураЗапросов.ЗапросСпецИтогов) Тогда
			ДобавитьРеквизит(ТекстЗапросаСпецостатков,СтруктураЗапросов.ЗапросСпецИтогов,мСтрокаОбъединения);
		КонецЕсли;
		
		//++Жилицкий
		Если ИспользуемРазделение Тогда
			Если Не ЗначениеЗаполнено(МассивЗапросов[Цел(Сч/100)]) Тогда
				ПозицияИЗ1 = Найти(СтруктураЗапросов.ЗапросОсновной," ИЗ ");
				ПозицияИЗ2 = Найти(СтруктураЗапросов.ЗапросОсновной,Символы.Таб+"ИЗ"+Символы.ПС);
				Если ПозицияИЗ1<>0 Тогда
					СтруктураЗапросов.ЗапросОсновной = (Лев(СтруктураЗапросов.ЗапросОсновной,ПозицияИЗ1) + "Поместить ВР_таблица"+Цел(Сч/100)+Символы.ПС+" ИЗ " + Прав(СтруктураЗапросов.ЗапросОсновной,СтрДлина(СтруктураЗапросов.ЗапросОсновной)-ПозицияИЗ1-3));
				ИначеЕсли ПозицияИЗ2<>0 Тогда	
					СтруктураЗапросов.ЗапросОсновной = (Лев(СтруктураЗапросов.ЗапросОсновной,ПозицияИЗ2) + "Поместить ВР_таблица"+Цел(Сч/100)+Символы.ПС+" ИЗ " + Прав(СтруктураЗапросов.ЗапросОсновной,СтрДлина(СтруктураЗапросов.ЗапросОсновной)-ПозицияИЗ2-3));
				Иначе
					ИспользуемРазделение = Ложь;
					Продолжить;
				КонецЕсли; 
				ДобавитьРеквизит(МассивЗапросов[Цел(Сч/100)],СтруктураЗапросов.ЗапросОсновной,мСтрокаОбъединения);
			Иначе
				ДобавитьРеквизит(МассивЗапросов[Цел(Сч/100)],СтруктураЗапросов.ЗапросОсновной,мСтрокаОбъединения);
			КонецЕсли; 
		КонецЕсли; 
		//++Жилицкий
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстЗапросаСпецостатков) Тогда
		ТекстЗапросаСпецостатков = Символы.ПС +
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Источник,
		|	Сумма(ВложенныйЗапрос.Сумма) КАК Сумма
		|ИЗ
		|	("+ТекстЗапросаСпецостатков+") КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО Источник
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|" + Символы.ПС;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстЗапросаКонтрольный) И Настройка.ВидНастройки = 0 Тогда
		Сч = 1;
		Для каждого ТекСтр Из мТаблицаКонтрольныхСчетов Цикл
			Если ТекСтр.НомерСубконто < 1 ИЛИ ТекСтр.НомерСубконто > 3 Тогда
				Продолжить;		
			КонецЕсли;
			ИмяСчета = "КСчет"+СокрЛП(Сч);
			Сч = Сч + 1;
			ИмяСубконто = "Субконто"+СокрЛП(ТекСтр.НомерСубконто);
			ЗапросКонтрольный = 
			" ВЫБРАТЬ 
			| 	Счет,
			| 	NULL,
			| 	"+ИмяСубконто+",
			| 	"+?(Периодичность<>7,"Период,","")+" 
			|	"+СокрЛп(ТекСтр.Ресурс)+?(ТекСтр.Функция = 0, "ОборотДт","ОборотКт")+", 
			|	0
			|	ИЗ ТаблицаОборотов ГДЕ Счет В ИЕРАРХИИ (&"+ИмяСчета+")";
			ДобавитьРеквизит(ТекстЗапросаКонтрольный,ЗапросКонтрольный,мСтрокаОбъединения);
			
			Если ТекСтр.Счет.ВидыСубконто[ТекСтр.НомерСубконто-1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.СтатьиЗатрат")) Тогда
				
				СтрокаФлажка = "isИспользуетсяНа"+Лев(ТекСтр.Счет.Код,2)+"Счете";				

				
				ТекстЗапросаПустышек =
				"ВЫБРАТЬ
				| 	&"+ИмяСчета+" КАК Счет,
				|	NULL КАК Источник,
				|	СтатьиЗатрат.Ссылка КАК Измерение,
				| 	"+?(Периодичность<>7,"ТаблицаПериодов.Период,","")+" 
//				|	ТаблицаПериодов.Период,
				|	0 КАК СуммаКонтрольная,
				|	0 КАК Сумма
				|ИЗ
				|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат,
				|	ТаблицаПериодов КАК ТаблицаПериодов
				|ГДЕ
				|	СтатьиЗатрат."+СтрокаФлажка+"
				|	И (НЕ СтатьиЗатрат.ПометкаУдаления)";
				ДобавитьРеквизит(ТекстЗапросаКонтрольный,ТекстЗапросаПустышек,мСтрокаОбъединения);
				
			
			КонецЕсли;
			
			Запрос.УстановитьПараметр(ИмяСчета,ТекСтр.Счет);
		КонецЦикла;	
		
		ТаблицаПериодов = Новый ТаблицаЗначений;
		ТаблицаПериодов.Колонки.Добавить("Период",isГенераторОтчетов.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		массивПериодов = isГенераторОтчетов.ПолучитьМассивПериодов(ДатаНачала,ДатаКонца,Периодичность);
		Для каждого ТекПериод Из МассивПериодов Цикл
			ТаблицаПериодов.Добавить().Период = ТекПериод;
		КонецЦикла;
		Запрос.УстановитьПараметр("ТаблицаПериодов",ТаблицаПериодов);
	    ТекстЗапросаКонтрольный = 
		" 
		|ВЫБРАТЬ
		|	ТаблицаПер.Период КАК Период
		|ПОМЕСТИТЬ ТаблицаПериодов
		|ИЗ
		|	&ТаблицаПериодов КАК ТаблицаПер
		|;
		|////////////////////////////////////////////////////////////////////////////////
		| ВЫБРАТЬ 
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.Источник,
		|	ВложенныйЗапрос.Измерение,
		| 	"+?(Периодичность<>7,"ВложенныйЗапрос.Период,","")+" 
//		|	ВложенныйЗапрос.Период,
		|	Сумма(ВложенныйЗапрос.Сумма) Как Сумма,
		|	Сумма(ВложенныйЗапрос.СуммаКонтрольная) Как СуммаКонтрольная ИЗ (
		| " + ТекстЗапросаКонтрольный+") Как ВложенныйЗапрос
		| СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Измерение,
		|	ВложенныйЗапрос.Источник,
		|	ВложенныйЗапрос.Период,
		|	ВложенныйЗапрос.Счет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Счет
		|ИТОГИ 
		|	Сумма(Сумма),
		|	Сумма(СуммаКонтрольная)
		|
		|ПО
		|	Период, Измерение, Счет
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
	
	КонецЕсли;
	СтрокаИтоговПоИзмерениям = "";

	Если Настройка.ДинамическиеСтроки И ТаблицаРасшифровкиИсточников = Неопределено Тогда
		Для Сч = 1 По мМаксимальноеКоличествоГруппировокДинамическихСтрок Цикл
			СтрокаИтоговПоИзмерениям = СтрокаИтоговПоИзмерениям + "Измерение"+Строка(Сч)+",";
		КонецЦикла;
	ИначеЕсли Настройка.ВидНастройки = 2 Тогда
		СтрокаИтоговПоИзмерениям = "Измерение1,";
	Иначе
		СтрокаИтоговПоИзмерениям = "";
	КонецЕсли;
	
	ЕстьПериод = Периодичность<>7 И ТаблицаРасшифровкиИсточников = Неопределено;
	
	Если ЕстьПериод Тогда
		СтрокаИтогов = ПериодДляЗапросаВИтогах(Периодичность);
	Иначе
		СтрокаИтогов = "";
	КонецЕсли;
	
	//++Жилицкий \ Оптимизация \ Уменьшение длины текста запроса через разбиение по частям
	Если ИспользуемРазделение Тогда
		Запрос.МенеджерВременныхТаблиц = МенЗапросов;
		Запрос.УстановитьПараметр("Подразделение",	мЗначениеОтбораПоПодразделению);
		Если ТаблицаРасшифровкиИсточников <> Неопределено И Настройка.ВидНастройки = 0  Тогда
			Запрос.УстановитьПараметр("ДатаНачала",		мПериодРасшифровки);
			Запрос.УстановитьПараметр("ДатаКонца",		isГенераторОтчетов.ПолучитьКонецПериода(мПериодРасшифровки,Периодичность));
		Иначе	
			Запрос.УстановитьПараметр("ДатаНачала",		СтруктураПериода.ДатаНачала);
			Запрос.УстановитьПараметр("ДатаКонца",		СтруктураПериода.ДатаКонца);
		КонецЕсли;
		Запрос.УстановитьПараметр("Организация",		мОрганизация);
		Запрос.УстановитьПараметр("СчетаОборотов",		СтрокаРегистраБухгалтерии.СчетаОборотов);
		Запрос.УстановитьПараметр("СчетаОстатков",		СтрокаРегистраБухгалтерии.СчетаОстатков);
		Запрос.УстановитьПараметр("СчетаОборотовБА",	СтрокаРегистраБухгалтерии.СчетаОборотовБА);
		Запрос.УстановитьПараметр("СчетаОстатковБА",	СтрокаРегистраБухгалтерии.СчетаОстатковБА);
		Запрос.УстановитьПараметр("СчетаОборотовКор",	СтрокаРегистраБухгалтерии.СчетаОборотовКор);
		
	
		Для каждого строчка Из МассивЗапросов Цикл
			
			Если СтрокаРегистраБухгалтерии.ТипРегистра = 0 и Не ДанныеПоОборотамЕстьВВрТЗ Тогда
				ТекстПакета = ПолучитьТекстПакетаЗапроса(СтрокаРегистраБухгалтерии, Запрос);
				строчка = ТекстПакета + мПС + строчка;
				ДанныеПоОборотамЕстьВВрТЗ = Истина;
			КонецЕсли;
			
			запрос.Текст = строчка;
			МассивРезультатов = Запрос.ВыполнитьПакет();
		КонецЦикла; 
		
		НовыйЗапрос = "";Инд=0;
		Для каждого строчка Из МассивЗапросов Цикл
			ДобавитьРеквизит(НовыйЗапрос,"Выбрать * из ВР_таблица"+Инд,мСтрокаОбъединения);
			Инд = Инд + 1;
		КонецЦикла; 
		ТекстЗапроса = НовыйЗапрос;
	КонецЕсли; 
	//--Жилицкий \ Оптимизация \ Уменьшение длины текста запроса через разбиение по частям	
	
	ТекстЗапроса=
	"ВЫБРАТЬ
	|"+?(ЕстьПериод," ВложенныйЗапрос.Период КАК Период,","")+"
	|	"+СтрокаИтоговПоИзмерениям+"
	|	ВложенныйЗапрос.Ид,
	|	ВложенныйЗапрос.Источник,
	|	ВложенныйЗапрос.ПривязкаКод,
	|	ВложенныйЗапрос.ПривязкаНомерСтроки,
	|	"+?(ТаблицаРасшифровкиИсточников <> Неопределено,"ВложенныйЗапрос.НомерСтроки,","")+"
	|	ВложенныйЗапрос.ЭтоОстаток,
	|	Сумма(ЕстьNull(ВложенныйЗапрос.Сумма,0)) КАК Сумма
	|ИЗ
	|	("+ТекстЗапроса+
	") КАК ВложенныйЗапрос
	| Сгруппировать по 
	|"+?(ЕстьПериод," ВложенныйЗапрос.Период,","")+"
	|	"+СтрокаИтоговПоИзмерениям+"
	|	ВложенныйЗапрос.Ид,
	|	ВложенныйЗапрос.Источник,
	|	ВложенныйЗапрос.ПривязкаКод,
	|	ВложенныйЗапрос.ПривязкаНомерСтроки,
	|	"+?(ТаблицаРасшифровкиИсточников <> Неопределено,"ВложенныйЗапрос.НомерСтроки,","")+"
	|	ВложенныйЗапрос.ЭтоОстаток
	|"+?(ЕстьПериод," УПОРЯДОЧИТЬ ПО Период","")+"
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	
//	|	Источник, ПривязкаКод, ПривязкаНомерСтроки,
	|	"+СтрокаИтоговПоИзмерениям+" Ид,
	|	"+?(ТаблицаРасшифровкиИсточников <> Неопределено,"НомерСтроки,","")+"
	|	ЭтоОстаток "+?(ЗначениеЗаполнено(СтрокаИтогов),","+СтрокаИтогов,"")+"
	|";
	
	//++Жилицкий \ Оптимизация \ Уменьшение длины текста запроса через разбиение по частям
	//Если данные пакета уже есть во временных таблицах, то пропускаем
	Если СтрокаРегистраБухгалтерии.ТипРегистра = 0 И не ДанныеПоОборотамЕстьВВрТЗ Тогда
		ТекстПакета = ПолучитьТекстПакетаЗапроса(СтрокаРегистраБухгалтерии, Запрос);
	Иначе
		ТекстПакета  = "";
	КонецЕсли;
	//--Жилицкий \ Оптимизация \ Уменьшение длины текста запроса через разбиение по частям
	Если СтрокаРегистраБухгалтерии.ТипРегистра = 0 Тогда
		СмещениеКонтрольный = 2;
		Если ЗначениеЗаполнено(ТекстЗапросаКонтрольный) Тогда
			ТекстПакета = ТекстПакета + ТекстЗапросаКонтрольный;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстЗапросаСпецостатков) Тогда
			ТекстПакета = ТекстПакета + ТекстЗапросаСпецостатков;
			СмещениеКонтрольный = 3;
		КонецЕсли;
		ТекстЗапроса = ТекстПакета + мПС + ТекстЗапроса;
		Если мОтчетВВалюте Тогда
        	ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаСВК.Период,
			|	ТаблицаСВК.Курс
			|ПОМЕСТИТЬ ТаблицаСВК
			|ИЗ
			|	&ТаблицаСВК КАК ТаблицаСВК
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаКДО.Период,
			|	ТаблицаКДО.Курс
			|ПОМЕСТИТЬ ТаблицаКДО
			|ИЗ
			|	&ТаблицаКДО КАК ТаблицаКДО
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|" + ТекстЗапроса;
			Запрос.УстановитьПараметр("ТаблицаСВК", isГенераторОтчетов.ПолучитьТаблицуСредневзвешенныхКурсов(ВалютаОтчета, СтруктураПериода.ДатаНачала,КонецДня(СтруктураПериода.ДатаКонца),1));
			Запрос.УстановитьПараметр("ТаблицаКДО", isГенераторОтчетов.ПолучитьТаблицуСредневзвешенныхКурсов(ВалютаОтчета, СтруктураПериода.ДатаНачала,КонецДня(СтруктураПериода.ДатаКонца),6));
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Подразделение",	мЗначениеОтбораПоПодразделению);
	Если ТаблицаРасшифровкиИсточников <> Неопределено И Настройка.ВидНастройки = 0  Тогда
		Запрос.УстановитьПараметр("ДатаНачала",		мПериодРасшифровки);
		Запрос.УстановитьПараметр("ДатаКонца",		isГенераторОтчетов.ПолучитьКонецПериода(мПериодРасшифровки,Периодичность));
	Иначе	
		Запрос.УстановитьПараметр("ДатаНачала",		СтруктураПериода.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКонца",		СтруктураПериода.ДатаКонца);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",		мОрганизация);
	Запрос.УстановитьПараметр("СчетаОборотов",		СтрокаРегистраБухгалтерии.СчетаОборотов);
	Запрос.УстановитьПараметр("СчетаОстатков",		СтрокаРегистраБухгалтерии.СчетаОстатков);
	Запрос.УстановитьПараметр("СчетаОборотовБА",	СтрокаРегистраБухгалтерии.СчетаОборотовБА);
	Запрос.УстановитьПараметр("СчетаОстатковБА",	СтрокаРегистраБухгалтерии.СчетаОстатковБА);
	Запрос.УстановитьПараметр("СчетаОборотовКор",	СтрокаРегистраБухгалтерии.СчетаОборотовКор);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[МассивРезультатов.Количество()-1];
	
	Если ТаблицаРасшифровкиИсточников = Неопределено Тогда
		Если Настройка.ДинамическиеСтроки И мСтрокиСДинамическимиГруппировками.Количество() > 0 Тогда
			ЗаполнитьДеревоДинамическихСтрок(Результат, мДеревоДинамическихСтрок, 1, СтрокаРегистраБухгалтерии.ВидПериода);	
		КонецЕсли;

		Если  ЗначениеЗаполнено(ТекстЗапросаКонтрольный) Тогда
			мКонтрольныйРезультат =  МассивРезультатов[МассивРезультатов.Количество()-СмещениеКонтрольный];
		КонецЕсли;
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(ТекстЗапросаСпецостатков) Тогда
		мТаблицаСпецостатков =  МассивРезультатов[МассивРезультатов.Количество()-2].Выгрузить();
	КонецЕсли;
	
	ВыборкаИ=Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Ид");
    РассчитатьТаблицуИсточников(ВыборкаИ, ТаблицаИсточников, СтрокаРегистраБухгалтерии.ВидПериода, ТаблицаРасшифровкиИсточников <> Неопределено);
	
КонецПроцедуры

Функция ПолучитьДетальнуюЗапись(Выборка)
	Результат = Выборка.Выбрать();
	Пока Результат.Следующий() Цикл
		Если Результат.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			Возврат Результат;		
		КонецЕсли;	
	КонецЦикла;
КонецФункции // ()

Функция РассчитатьТаблицуИсточников(ВыборкаИ, пТаблицаИсточников, ВидПериода, РежимРасшифровки)
	СтруктураОтбора=Новый Структура("Период");
	СтруктураОтбораГ=Новый Структура("Ид, ВидПериода");
	
	Периоды=isГенераторОтчетов.ПолучитьМассивПериодов(ДатаНачала,КонецДня(ДатаКонца),Периодичность);
	Пока ВыборкаИ.Следующий() Цикл
		СтруктураОтбораГ.Ид = ВыборкаИ.Ид;
		СтруктураОтбораГ.ВидПериода = ВидПериода;
		СтрокаИсточника=пТаблицаИсточников.НайтиСтроки(СтруктураОтбораГ)[0];
		Если РежимРасшифровки Тогда
			ВыборкаСтрок = ВыборкаИ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"НомерСтроки");
			ТаблицаРасшифровки = Новый ТаблицаЗначений;
			ТаблицаРасшифровки.Колонки.Добавить("Источник");
			ТаблицаРасшифровки.Колонки.Добавить("НомерСтроки");
			ТаблицаРасшифровки.Колонки.Добавить("Описание");
			ТаблицаРасшифровки.Колонки.Добавить("ВидПериода");
			ТаблицаРасшифровки.Колонки.Добавить("Значение");
			Пока ВыборкаСтрок.Следующий() Цикл
				Выборка = ПолучитьДетальнуюЗапись(ВыборкаСтрок);
				СтрокаРасшифровки = ТаблицаРасшифровки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, Выборка);
				СтрокаРасшифровки.ВидПериода = ВидПериода;
				СтрокаРасшифровки.Значение = ВыборкаСтрок.Сумма;
				Если Выборка.Источник.Владелец.ТипРегистра = 0 Тогда
					ТекФункция = Выборка.Источник.Источники[ВыборкаСтрок.НомерСтроки - 1];
					СтрокаРасшифровки.Описание = ПолучитьОписаниеФункции(ТекФункция, Выборка.Источник);
				Иначе
					СтрокаРасшифровки.Описание = ПолучитьОписаниеФункцииРегистраНакопления(Выборка.Источник);
				КонецЕсли;
			КонецЦикла;
			СтрокаИсточника.ТаблицаРасшифровки = ТаблицаРасшифровки;
		ИначеЕсли Настройка.ВидНастройки <> 0 Тогда
			СтрокаИсточника.Значение = ВыборкаИ.Сумма;
			Если СтрокаИсточника.ДинамическаяСекция = 1 Тогда
				ТаблицаЗначений = Новый ТаблицаЗначений;
				ТаблицаЗначений.Колонки.Добавить("Измерение");
				ТаблицаЗначений.Колонки.Добавить("Значение",ПолучитьОписаниеТипаРесурса());
				
				Выборка = ВыборкаИ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Измерение1");
				Пока Выборка.Следующий() Цикл
					Если Выборка.Сумма <> 0 Тогда
						НоваяСтрока = ТаблицаЗначений.Добавить();
						НоваяСтрока.Измерение = Выборка.Измерение1;
						НоваяСтрока.Значение = Выборка.Сумма;
					КонецЕсли;
				КонецЦикла;
			    СтрокаИсточника.ТаблицаЗначений = ТаблицаЗначений;
			КонецЕсли;
		Иначе	
			Таблица=мШаблон.Скопировать();
			Если Периодичность = 7 Тогда
				СтруктураОтбора.Период=ДатаНачала;
				ДобавитьЗначениеВТаблицу(Таблица,СтруктураОтбора,"Сумма",ВыборкаИ.Сумма);
			Иначе
				СтрокаИсточника.ЗначениеИтоговойКолонки = ВыборкаИ.Сумма;
				ВыборкаО=ВыборкаИ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"ЭтоОстаток");
				Пока ВыборкаО.Следующий() Цикл
					ЗаполнитьТаблицуЗначенийИсточника(ВыборкаО, Таблица, Периоды);
					Если СтрокаИсточника.КоличествоГруппировок <> 0 И СтрокаИсточника.РежимДинамическихСтрок <> 0 Тогда
						ДеревоДинамическихСтрок = Новый ДеревоЗначений;
						ДеревоДинамическихСтрок.Колонки.Добавить("Измерение");
						ДеревоДинамическихСтрок.Колонки.Добавить("ТаблицаЗначений",Новый ОписаниеТипов("ТаблицаЗначений"));
						
						РассчитатьДеревоДинамическихСтрок(ДеревоДинамическихСтрок, ВыборкаО, 1, СтрокаИсточника.КоличествоГруппировок, Периоды);
						СтрокаИсточника.ДеревоДинамическихСтрок=ДеревоДинамическихСтрок;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если РежимРасшифровки Тогда
				СтрокаИсточника.Значение=Таблица.Сумма;
			Иначе	
				СтрокаИсточника.ТаблицаЗначений=Таблица;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
КонецФункции // ()

Процедура СоздатьИЗаполнитьТаблицуИсточников()
	// *** создание служебных таблиц
	мШаблонТаблицыИсточников = СоздатьТаблицуИсточников();
  	ТаблицаИсточников = мШаблонТаблицыИсточников.Скопировать();
	Если Настройка.ВидНастройки = 2 Тогда
		УстановитьФлагиДинамическихСекций();	
	КонецЕсли;
  	ТаблицаВыражений=СоздатьТаблицуВыражений();
	
	мТаблицаРегистровБухгалтерии = СоздатьТаблицуРегистровБухгалтерии(Настройка);
	Если Настройка.ДинамическиеСтроки Тогда
		мДеревоДинамическихСтрок = Новый ДеревоЗначений;
		мДеревоДинамическихСтрок.Колонки.Добавить("Измерение");
		мДеревоДинамическихСтрок.Колонки.Добавить("ТаблицаИсточников");
		мДеревоДинамическихСтрок.Колонки.Добавить("ТаблицаВыражений");
	ИначеЕсли Настройка.ВидНастройки = 2 Тогда
		;
	КонецЕсли;
	
	Для каждого ТекРегистр Из мТаблицаРегистровБухгалтерии Цикл     
		ЗаполнитьТаблицуИсточниковИзРегистра(ТекРегистр, Неопределено, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПустышкуТаблицыЗначений(ДатаНачала,ДатаКонца,Периодичность)
	Результат=Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Период",isГенераторОтчетов.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("Сумма",	ПолучитьОписаниеТипаРесурса());
	Мас=isГенераторОтчетов.ПолучитьМассивПериодов(ДатаНачала,ДатаКонца,Периодичность);
	Для Сч=0 По Мас.Количество()-1 Цикл
		Результат.Добавить().Период = Мас[Сч];
	КонецЦикла;
	ПустышкаТаблицыЗначений = Результат;
КонецПроцедуры

Функция ПолучитьТаблицуИсточника(ТипИсточника,Источник, ПривязкаКод, ПривязкаНомерСтроки, пДеревоСтрок, пТаблицаИсточников, пТаблицаВыражений)
	СтруктураОтбора = Новый Структура("Источник", Источник);
	Если мРежимПривязкиИсточникаКСтроке Тогда
		СтруктураОтбора.Вставить("ПривязкаКод",ПривязкаКод);
		СтруктураОтбора.Вставить("ПривязкаНомерСтроки",ПривязкаНомерСтроки);
	КонецЕсли;
	
	Результат=Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Период",isГенераторОтчетов.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("Сумма",	ПолучитьОписаниеТипаРесурса());
	
	Табл = пТаблицаИсточников;

	Если ТипИсточника=0 Тогда  // это источник
//++Куприянова Е.В. 14.08.2013 исправление критической ошибки		
//		СтрокаИсточника=Табл.НайтиСтроки(СтруктураОтбора)[0];		
		НайденныеСтроки = Табл.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Сообщить("Источник "+Источник + "(код "+Источник.Код+") не настроен для отбора по подразделениям", СтатусСообщения.Важное);	
			Возврат Результат;
		КонецЕсли;	
		СтрокаИсточника=НайденныеСтроки[0];		
//--Куприянова Е.В. 14.08.2013 исправление критической ошибки		
		Если СтрокаИсточника.ТаблицаЗначений.Количество()=0 Тогда
		  Возврат Результат;
		Иначе	
		  Возврат СтрокаИсточника.ТаблицаЗначений;
		КонецЕсли;
	ИначеЕсли ТипИсточника=1 Тогда  // это строка
		ПодСтрока=isГенераторОтчетов.НайтиСтрокуДерева(Источник, пДеревоСтрок.Строки);
		Если ПодСтрока = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		Если ПодСтрока.ТаблицаЗначений=Неопределено Тогда
		  РассчитатьСтрокуОтчетаИзТаблицыИсточников(ПодСтрока,пДеревоСтрок, пТаблицаИсточников, пТаблицаВыражений);
		КонецЕсли;
		Возврат ПодСтрока.ТаблицаЗначений;
	ИначеЕсли ТипИсточника=4 Тогда  // это строка другого отчета
		СтрокаТаблицыНастроек = мТаблицаДеревьевДругихОтчетов.Найти(Источник.Владелец, "Настройка");
		ПодСтрока=isГенераторОтчетов.НайтиСтрокуДерева(Источник, СтрокаТаблицыНастроек.ДеревоСтрок.Строки);
		Если ПодСтрока = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		Если ПодСтрока.ТаблицаЗначений=Неопределено Тогда
		  РассчитатьСтрокуОтчетаИзТаблицыИсточников(ПодСтрока,СтрокаТаблицыНастроек.ДеревоСтрок, пТаблицаИсточников, СтрокаТаблицыНастроек.ТаблицаВыражений);
		КонецЕсли;
		Возврат ПодСтрока.ТаблицаЗначений;
	ИначеЕсли ТипИсточника=5 Тогда  // это выражение другого отчета
		СтрокаТаблицыНастроек = мТаблицаДеревьевДругихОтчетов.Найти(Источник.Владелец, "Настройка");
		СтрокаВыражения = СтрокаТаблицыНастроек.ТаблицаВыражений.Найти(Источник,"Выражение");
		Если СтрокаВыражения = Неопределено Тогда
		  СтрокаВыражения = РассчитатьВыражение(Источник,СтрокаТаблицыНастроек.ДеревоСтрок,пТаблицаИсточников, 
		  				СтрокаТаблицыНастроек.ТаблицаВыражений);
		КонецЕсли;
		Возврат СтрокаВыражения.ТаблицаЗначений;
	Иначе	 // это выражение
		СтрокаВыражения = пТаблицаВыражений.Найти(Источник,"Выражение");
		Если СтрокаВыражения = Неопределено Тогда
		  СтрокаВыражения = РассчитатьВыражение(Источник,пДеревоСтрок,пТаблицаИсточников, пТаблицаВыражений);
		КонецЕсли;
		Возврат СтрокаВыражения.ТаблицаЗначений;
	КонецЕсли;
КонецФункции // ()

Функция ПолучитьДеревоДинамическихСтрокИсточника(ТипИсточника,Источник, ПривязкаКод, ПривязкаНомерСтроки, пТаблицаИсточников, пТаблицаВыражений)
	СтруктураОтбора = Новый Структура("Источник", Источник);
	Если мРежимПривязкиИсточникаКСтроке Тогда
		СтруктураОтбора.Вставить("ПривязкаКод",ПривязкаКод);
		СтруктураОтбора.Вставить("ПривязкаНомерСтроки",ПривязкаНомерСтроки);
	КонецЕсли;
	
	Табл = пТаблицаИсточников;

	Если ТипИсточника=0 Тогда  // это источник
		Возврат Табл.НайтиСтроки(СтруктураОтбора)[0].ДеревоДинамическихСтрок;		
	ИначеЕсли ТипИсточника=1 Тогда  // это строка
		Возврат Неопределено;
	Иначе	 // это вражение
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ()

Процедура ДобавитьЗначенияВДинамическиеСтроки(СтрокаОтчета, ДеревоДинСтрок, Коэффициент)
	Для каждого ДинамическаяСтрока Из ДеревоДинСтрок.Строки Цикл
		ПодСтрокаОтчета = СтрокаОтчета.Строки.Найти(ДинамическаяСтрока.Измерение,"ИзмерениеДинамическойСтроки");
		Если ПодСтрокаОтчета = Неопределено Тогда
			ПодСтрокаОтчета = СтрокаОтчета.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ПодСтрокаОтчета, СтрокаОтчета,,"Уровень, ИзмерениеДинамическойСтроки,Номер,ТаблицаЗначений");
			ПодСтрокаОтчета.Уровень = СтрокаОтчета.Уровень + 1;
			ПодСтрокаОтчета.НомерГруппировки = ДинамическаяСтрока.Уровень()+1;
			ПодСтрокаОтчета.ИзмерениеДинамическойСтроки = ДинамическаяСтрока.Измерение;
			ПодСтрокаОтчета.ДинамическаяСтрока = Истина;
			ПодСтрокаОтчета.Номер = СтрокаОтчета.Строки.Количество();
		КонецЕсли;
		ДобавитьСуммыВСтрокуТаблицы(ПодСтрокаОтчета.ТаблицаЗначений,ДинамическаяСтрока.ТаблицаЗначений,Коэффициент);
		ДобавитьЗначенияВДинамическиеСтроки(ПодСтрокаОтчета, ДинамическаяСтрока, Коэффициент)
	КонецЦикла;
КонецПроцедуры

Функция РассчитатьСуммуИтоговойКолонкиСтрокиОтчета(СтрокаОтчета, СпособРасчета, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки)
	ИтоговаяКолонка = пСтруктураИтоговойКолонки.ИтоговаяКолонка.Найти(СтрокаОтчета, "СтрокаОтчета");
	
	Если ИтоговаяКолонка = Неопределено Тогда
		Результат = 0;
		Если СтрокаОтчета.Источники.Количество()=0 Тогда  // строка не имеет источников, ее состав определяется подстроками
			Подстроки = ПолучитьПодСтрокиСтрокиОтчета(СтрокаОтчета);
			Для каждого ТекСтр Из Подстроки Цикл
				Результат = Результат + РассчитатьСуммуИтоговойКолонкиСтрокиОтчета(ТекСтр.Строка, ТекСтр.Строка.СпособВычисленияКолонкиИтогов, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки);
			КонецЦикла;
		Иначе
			Для каждого ТекСтр Из СтрокаОтчета.Источники Цикл
				Если ТекСтр.ТипСтроки = 2 
					ИЛИ ТекСтр.ТипСтроки = 5 Тогда
					Если ТекСтр.Источник.ВидВыражения = 1 Тогда
						Результат = Результат + ВычислитьВыражениеДляИтоговойКолонки(ТекСтр.Источник, СпособРасчета, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки)
									* ТекСтр.Коэффициент;	
					Иначе	
						Результат = Результат + РассчитатьВыражениеДляИтоговойКолонки(ТекСтр.Источник, СпособРасчета, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки)
									* ТекСтр.Коэффициент;	
					КонецЕсли;			
					
				ИначеЕсли СпособРасчета = 1 Тогда
					Результат = Результат + РассчитатьСуммуИтоговойКолонкиСтрокиОтчета(ТекСтр.Источник, ТекСтр.Источник.СпособВычисленияКолонкиИтогов, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки)
								* ТекСтр.Коэффициент;	
				Иначе	
					Результат = Результат + ПолучитьСуммуИтоговойКолонкиИсточника(ТекСтр.ТипСтроки,ТекСтр.Источник,СпособРасчета,пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки)
								* ТекСтр.Коэффициент;	
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		Если СтрокаОтчета.Положительное И Результат < 0  Тогда
			Результат = - Результат;		
		КонецЕсли;
		ИтоговаяКолонка = пСтруктураИтоговойКолонки.ИтоговаяКолонка.Добавить();
		ИтоговаяКолонка.СтрокаОтчета = СтрокаОтчета;
		ИтоговаяКолонка.Сумма = Результат;
	КонецЕсли;
	
	ВОзврат ИтоговаяКолонка.Сумма;
КонецФункции

Функция ПолучитьТаблицуВхожденияИсточниковВСтроки()
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",Настройка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	isСтрокиОтчетовПЭОИсточники.Ссылка КАК Строка,
	|	isСтрокиОтчетовПЭОИсточники.Источник КАК Источник
	|ИЗ
	|	Справочник.isСтрокиОтчетовПЭО.Источники КАК isСтрокиОтчетовПЭОИсточники
	|ГДЕ
	|	isСтрокиОтчетовПЭОИсточники.ТипСтроки = 0
	|	И (НЕ isСтрокиОтчетовПЭОИсточники.Ссылка.ПометкаУдаления)
	|	И isСтрокиОтчетовПЭОИсточники.Ссылка.Владелец = &Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	isВыраженияОтчетовПЭОСумматор.Ссылка,
	|	isВыраженияОтчетовПЭОСумматор.Источник
	|ИЗ
	|	Справочник.isВыраженияОтчетовПЭО.Источники КАК isВыраженияОтчетовПЭОСумматор
	|ГДЕ
	|	isВыраженияОтчетовПЭОСумматор.Ссылка.Владелец = &Владелец
	|	И (НЕ isВыраженияОтчетовПЭОСумматор.Ссылка.ПометкаУдаления)
	|	И isВыраженияОтчетовПЭОСумматор.Ссылка.ВидВыражения = 0
	|	И isВыраженияОтчетовПЭОСумматор.ТипСтроки = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	isВыраженияОтчетовПЭО.Ссылка,
	|	isВыраженияОтчетовПЭО.Источник1
	|ИЗ
	|	Справочник.isВыраженияОтчетовПЭО КАК isВыраженияОтчетовПЭО
	|ГДЕ
	|	isВыраженияОтчетовПЭО.Владелец = &Владелец
	|	И (НЕ isВыраженияОтчетовПЭО.ПометкаУдаления)
	|	И isВыраженияОтчетовПЭО.ВидВыражения = 1
	|	И isВыраженияОтчетовПЭО.ТипИсточника1 = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	isВыраженияОтчетовПЭО.Ссылка,
	|	isВыраженияОтчетовПЭО.Источник2
	|ИЗ
	|	Справочник.isВыраженияОтчетовПЭО КАК isВыраженияОтчетовПЭО
	|ГДЕ
	|	isВыраженияОтчетовПЭО.Владелец = &Владелец
	|	И (НЕ isВыраженияОтчетовПЭО.ПометкаУдаления)
	|	И isВыраженияОтчетовПЭО.ВидВыражения = 1
	|	И isВыраженияОтчетовПЭО.ТипИсточника2 = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Источник";
	Возврат Запрос.Выполнить().Выгрузить();
	

КонецФункции // ПолучитьТаблицуВхожденияИсточниковВСтроки()

Процедура РассчитатьСуммуИмениМакетаИзТаблицыИсточников(СтрокаИмениМакета)
	Результат = 0;
	Если СтрокаИмениМакета.Имя.Источники.Количество()=0 Тогда  // строка не имеет источников, ее состав определяется подстроками
    	Результат = 0;
	Иначе
		ПривязкаКод = ?(мРежимПривязкиИсточникаКСтроке,"С"+СтрокаИмениМакета.Имя.Код,"");
		
		Для каждого ТекСтр Из СтрокаИмениМакета.Имя.Источники Цикл   
			Значение = ПолучитьЗначениеИсточника(ТекСтр.ТипСтроки, ТекСтр.Источник, ПривязкаКод, ТекСтр.НомерСтроки, ТекСтр.ВидПериода);
			Если ТипЗнч(Значение) = Тип("Число") Тогда
				Результат = Результат + Значение*ТекСтр.Коэффициент;	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	Если СтрокаИмениМакета.Имя.Положительное И Результат < 0 Тогда
		Результат = - Результат;	
	КонецЕсли;
	СтрокаИмениМакета.Значение = Результат;
КонецПроцедуры

Функция ПолучитьЗначениеПараметраОтчета(КодПараметра) Экспорт
	Если ТипЗнч(КодПараметра) = Тип("Число") Тогда
		лДатаКонца = КонецДня(ДатаКонца);
		Если КодПараметра = 0 Тогда
			Возврат	ДатаФормированияОтчета;
		ИначеЕсли КодПараметра = 1 Тогда
			Возврат	ПредставлениеПериода(ДатаНачала,лДатаКонца);
		ИначеЕсли КодПараметра = 3 Тогда
			Возврат	ДатаНачала;
		ИначеЕсли КодПараметра = 4 Тогда
			Возврат	лДатаКонца;
		ИначеЕсли КодПараметра = 5 Тогда
//++Куприянова Е.В. 09.08.2013 I-1С_КОРП-MSC-2013-00779			
//			Возврат	Организация.НаименованиеСокращенное;
			Если мГруппаОрганизаций.Количество()=0 ИЛИ мГруппаОрганизаций.Количество()=1 Тогда
				Возврат	Организация.НаименованиеСокращенное;
			Иначе
				Возврат	мГруппаОрганизаций[0].Значение.ГоловнаяОрганизация.НаименованиеСокращенное;
			КонецЕсли;
//--Куприянова Е.В. 09.08.2013 I-1С_КОРП-MSC-2013-00779			
		ИначеЕсли КодПараметра = 6 Тогда
			Возврат	ВалютаОтчета.НаименованиеПолное;
		ИначеЕсли КодПараметра = 7 Тогда
			Возврат	ПолучитьЕдиницуИзмеренияДляВалюты();
		Иначе
			ВОзврат "...";
		
		КонецЕсли;	
	Иначе
		СтрокаПараметра = ПараметрыОтчета.Найти(КодПараметра,"Параметр");
		Возврат ?(СтрокаПараметра = Неопределено, 0, СтрокаПараметра.Значение)
	КонецЕсли;
	

КонецФункции // ПолучитьЗначениеПараметраОтчета()

// расчет итоговой колонки для сумматора
Функция РассчитатьВыражениеДляИтоговойКолонки(Выражение, СпособРасчета, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки)
	СтрокаВыражения = пСтруктураИтоговойКолонки.ВыраженияИтоговойКолонки.Найти(Выражение,"Выражение");
	Если СтрокаВыражения = Неопределено Тогда
		СтрокаВыражения = пСтруктураИтоговойКолонки.ВыраженияИтоговойКолонки.Добавить();
		СтрокаВыражения.Выражение = Выражение;
		
		Если Выражение.ВидВыражения = 0 Тогда  // сумматор
			Результат = 0;

			Для каждого ТекСтр Из Выражение.Источники Цикл
				Результат = Результат + ПолучитьСуммуИтоговойКолонкиИсточника(ТекСтр.ТипСтроки,ТекСтр.Источник, СпособРасчета, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки);				
			КонецЦикла;		
		Иначе	
		    Результат = ВычислитьВыражениеДляИтоговойКолонки(Выражение, СпособРасчета, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки);
		КонецЕсли;
		СтрокаВыражения.Сумма = Результат;
	КонецЕсли;
	
	Возврат СтрокаВыражения.Сумма;

КонецФункции // РассчитатьВыражение(ТекСтр.Источник)()

// расчет итоговой колонки для вычисления
Функция ВычислитьВыражениеДляИтоговойКолонки(Выражение, СпособРасчета, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки)
	
	Сумма1 = ПолучитьСуммуИтоговойКолонкиИсточника(Выражение.ТипИсточника1, Выражение.Источник1, СпособРасчета, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки);	
	
	Сумма2 = ПолучитьСуммуИтоговойКолонкиИсточника(Выражение.ТипИсточника2, Выражение.Источник2, СпособРасчета, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки);	
	
	Возврат ВычислитьСтрокуПериодаВыражения(Выражение, Сумма1, Сумма2);
КонецФункции // ()

Функция ВычислитьВыражение(Выражение, пДеревоСтрок, пТаблицаИсточников, пТаблицаВыражений)
	ПривязкаКод = ?(мРежимПривязкиИсточникаКСтроке,"В"+Выражение.Код,"");
	
	ТИ = ПолучитьТаблицуИсточника(Выражение.ТипИсточника1, Выражение.Источник1, ПривязкаКод, -1, пДеревоСтрок, пТаблицаИсточников, пТаблицаВыражений);
	Если ТИ = Неопределено Тогда
		Возврат 0;	
	КонецЕсли;
	Результат = ТИ.Скопировать();	
	Результат.Колонки["Сумма"].Имя = "Сумма1";
	Результат.Колонки.Добавить("Сумма2",	ПолучитьОписаниеТипаРесурса());
	
	ТИ = ПолучитьТаблицуИсточника(Выражение.ТипИсточника2, Выражение.Источник2, ПривязкаКод, -2, пДеревоСтрок, пТаблицаИсточников, пТаблицаВыражений);
	Если ТИ = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	Таблица2 = ТИ.Скопировать();	
	Таблица2.Колонки["Сумма"].Имя = "Сумма2";
	
	Для каждого ТекСтр Из Таблица2 Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(),ТекСтр);
	КонецЦикла;
	Результат.Свернуть("Период","Сумма1,Сумма2");
	Результат.Колонки.Добавить("Сумма",	ПолучитьОписаниеТипаРесурса());
	
	Для каждого ТекСтр Из Результат Цикл
		ТекСтр.Сумма = ВычислитьСтрокуПериодаВыражения(Выражение, ТекСтр.Сумма1, ТекСтр.Сумма2);
	КонецЦикла;

	Результат.Свернуть("Период","Сумма");
	Возврат Результат;
КонецФункции // ()

Функция ВычислитьВыражениеДляМакета(Выражение)
	ПривязкаКод = ?(мРежимПривязкиИсточникаКСтроке,"В"+Выражение.Код,"");
	Операнд1 = ПолучитьЗначениеИсточника(Выражение.ТипИсточника1, Выражение.Источник1,ПривязкаКод,-1, Выражение.ВидПериода1);	
	Операнд2 = ПолучитьЗначениеИсточника(Выражение.ТипИсточника2, Выражение.Источник2,ПривязкаКод,-2, Выражение.ВидПериода2);	
	
	Возврат ВычислитьСтрокуПериодаВыражения(Выражение, Операнд1, Операнд2);
КонецФункции // ()

Функция ВычислитьСтрокуПериодаВыражения(Выражение,Сумма1, Сумма2) Экспорт
	Если Выражение.Операция = 1 Тогда
		Возврат Сумма1 * Сумма2 * Выражение.Коэффициент1 * Выражение.Коэффициент2;	
	ИначеЕсли Выражение.Операция = 0 Тогда
		Если Сумма2 = 0 ИЛИ Выражение.Коэффициент2 = 0 Тогда
			Возврат 0;
		Иначе
			Возврат (Сумма1 * Выражение.Коэффициент1) / (Сумма2 * Выражение.Коэффициент2);	
		КонецЕсли;
	КонецЕсли;	
КонецФункции // ()

Функция ПолучитьСуммуИтоговойКолонкиИсточника(ТипИсточника,Источник, СпособРасчета, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки)
	
	Табл = пТаблицаИсточников;

	Если ТипИсточника = 0 Тогда  // это источник
		СтрокаИсточника=Табл.Найти(Источник,"Источник");		
		Если СтрокаИсточника.ТаблицаЗначений.Количество()=0 Тогда
			Возврат 0;
		ИначеЕсли СпособРасчета = 2 Тогда
			Если мТаблицаСпецостатков = Неопределено Тогда
//				Возврат 0;
				Возврат СтрокаИсточника.ТаблицаЗначений.Итог("Сумма");
			Иначе	
				Возврат мТаблицаСпецостатков.Найти(Источник,"Источник").Сумма;
			КонецЕсли;
		Иначе	
			Возврат СтрокаИсточника.ТаблицаЗначений.Итог("Сумма");
		КонецЕсли;
//++ИС Куприянова Е.В. 31.05.2013
//исправление критической ошибки, сюда попадает также ТипИсточника = 4
//это строка др. отчета
//	ИначеЕсли ТипИсточника = 1 Тогда  // это строка
	ИначеЕсли ТипИсточника = 1 
    	ИЛИ ТипИсточника = 4
	Тогда  // это строка
//--ИС Куприянова Е.В. 31.05.2013
		ПодСтрока = пСтруктураИтоговойКолонки.ИтоговаяКолонка.Найти(Источник, "СтрокаОтчета");
		Если ПодСтрока = Неопределено Тогда
			Возврат РассчитатьСуммуИтоговойКолонкиСтрокиОтчета(Источник, Источник.СпособВычисленияКолонкиИтогов, пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки);
		Иначе
			Возврат ПодСтрока.Сумма;
		КонецЕсли;
	Иначе	 // это вражение
		Возврат РассчитатьВыражениеДляИтоговойКолонки(Источник,СпособРасчета,пТаблицаИсточников, пТаблицаВыражений, пСтруктураИтоговойКолонки);
	КонецЕсли;
КонецФункции // ()

Функция ПолучитьЗначениеИсточника(ТипИсточника,Источник,ПривязкаКод,ПривязкаНомерСтроки,ВидПериода)
	Результат = 0;
	
	Табл = ТаблицаИсточников;

	Если ТипИсточника=0 Тогда  // это источник
		СтруктураОтбора = Новый Структура ("Источник, ВидПериода",Источник,ВидПериода);
		Если мРежимПривязкиИсточникаКСтроке Тогда
			СтруктураОтбора.Вставить("ПривязкаКод",ПривязкаКод);		
			СтруктураОтбора.Вставить("ПривязкаНомерСтроки",ПривязкаНомерСтроки);		
		КонецЕсли;
		Мас=Табл.НайтиСтроки(СтруктураОтбора);		
	  	Возврат Мас[0].Значение;
	ИначеЕсли ТипИсточника=1 Тогда  // это имя
		СтрокаИмениМакета=мТаблицаИмен.Найти(Источник, "Имя");
		Если СтрокаИмениМакета.Значение = Неопределено Тогда
			СтрокаИмениМакета = мТаблицаИмен.Добавить();
			СтрокаИмениМакета.Имя = Источник;
			РассчитатьСуммуИмениМакетаИзТаблицыИсточников(СтрокаИмениМакета);
		КонецЕсли;
		Возврат СтрокаИмениМакета.Значение;
	ИначеЕсли ТипИсточника=2 Тогда 	
		СтрокаВыражения = ТаблицаВыражений.Найти(Источник,"Выражение");
		Если СтрокаВыражения = Неопределено Тогда
		  СтрокаВыражения = РассчитатьВыражениеДляМакета(Источник);
		КонецЕсли;
		Возврат СтрокаВыражения.Значение;
	ИначеЕсли ТипИсточника=3 Тогда 
		Возврат ПолучитьЗначениеПараметраОтчета(Источник);
	КонецЕсли;
	
КонецФункции // ()

Функция РассчитатьВыражениеДляМакета(Выражение)
	СтрокаВыражения = ТаблицаВыражений.Найти(Выражение,"Выражение");
	Если СтрокаВыражения <> Неопределено Тогда
		Возврат СтрокаВыражения;
	КонецЕсли;
	СтрокаВыражения = ТаблицаВыражений.Добавить();
	СтрокаВыражения.Выражение = Выражение;
	Если Выражение.ВидВыражения = 0 Тогда  // сумматор
		ПривязкаКод = ?(мРежимПривязкиИсточникаКСтроке,"В" + Выражение.Код,"");
		Результат = 0;
		Для каждого ТекСтр Из Выражение.Источники Цикл
			Результат = Результат + ПолучитьЗначениеИсточника(ТекСтр.ТипСтроки,ТекСтр.Источник, ПривязкаКод, ТекСтр.НомерСтроки, ТекСтр.ВидПериода)*ТекСтр.Коэффициент;				
		КонецЦикла;		
	Иначе	
	    Результат = ВычислитьВыражениеДляМакета(Выражение);
	КонецЕсли;
	СтрокаВыражения.Значение = Результат;
	Возврат СтрокаВыражения;

КонецФункции // РассчитатьВыражение(ТекСтр.Источник)()

///////////////////////////////// ПРОЦЕДУРЫ ПОДГОТОВКИ ТЕКСТА ЗАПРОСА
Функция НуженЗапросКонтрольный(ПодстрокаИсточника, Отбор)
	Если Настройка.КонтрольПолнотыЗаполнения Тогда
		СтрокаКонтрольная = мТаблицаКонтрольныхСчетов.Найти(ПодстрокаИсточника.Счет, "Счет");
		Если СтрокаКонтрольная <> Неопределено И ЗначениеЗаполнено(СтрокаКонтрольная.НомерСубконто)  
			И СтрокаКонтрольная.Функция + 1 = ПодстрокаИсточника.ТипИсточника 
			И СтрокаКонтрольная.Ресурс = ПодстрокаИсточника.Ресурс Тогда
			Если ТипЗнч(СтрокаКонтрольная.НомерСубконто) = Тип("Строка") Тогда
				ИмяСубконто = СтрокаКонтрольная.НомерСубконто;
			Иначе	
				ИмяСубконто = "Субконто"+СокрЛП(СтрокаКонтрольная.НомерСубконто);
			КонецЕсли;
			Возврат ИмяСубконто;
			
			//Для каждого ТекОтбор Из Отбор Цикл
			//	Если Лев(ТекОтбор.ПутьКДанным,9) = ИмяСубконто Тогда
			//		Возврат ИмяСубконто;
			//	КонецЕсли;						
			//КонецЦикла;
		КонецЕсли;
	КонецЕсли;
    Возврат "";
КонецФункции // ()

Функция СписокСчетов(Счета)
	Результат = "";
//++Куприянова 23.06.2013
//исправление критической ошибки
//	СписокСчетов = Счета.Получить();	
	Если ТипЗнч(Счета) = Тип("СписокЗначений") Тогда
		СписокСчетов = Счета;
	Иначе 
		СписокСчетов = Счета.Получить();	
	КонецЕсли;	
//--Куприянова 23.06.2013
	Если ТипЗнч(СписокСчетов) = Тип("СписокЗначений") И СписокСчетов.Количество() > 0 Тогда
		Для каждого ТекСчет Из СписокСчетов Цикл
			ДобавитьРеквизит(Результат, ТекСчет.Значение.Код,",");		
		КонецЦикла;	
	КонецЕсли;
	ВОзврат Результат;
КонецФункции // ()

Функция ПолучитьОписаниеОтбора(Счет, СтрокаФункции, РегистрБухгалтерии, ЭтоКорСчет) Экспорт    
	Результат = "";
	НП = ?(ЭтоКорСчет,СтрокаФункции.НастройкиПостроителяКорСчет.Получить(),СтрокаФункции.НастройкиПостроителяСчет.Получить());
	Если ТипЗнч(НП) = Тип("НастройкиПостроителяОтчета") Тогда
		ПосОт = Новый ПостроительОтчета;
		isГенераторОтчетов.ЗаполнитьНастройкиПостроителя(РегистрБухгалтерии, Счет, СтрокаФункции.Ресурс,ПосОт,ЭтоКорСчет);
		ПосОт.Параметры.Вставить("Счет",Счет);
		ПосОт.ЗаполнитьНастройки();
		ПосОт.УстановитьНастройки(НП);
		Результат = ПолучитьОписаниеСоставаОтбора(ПосОт.Отбор);
	КонецЕсли;
	
    Возврат Результат;
КонецФункции

Функция ПолучитьОписаниеФункции(СтрокаФункции, Источник) Экспорт
	Результат = "";

	Результат = isГенераторОтчетов.ПолучитьИмяФункцииИсточника(СтрокаФункции.ТипИсточника, Источник.Владелец);
	ЭтоОстаток = isГенераторОтчетов.ЭтоФункцияОстатка(СтрокаФункции.ТипИсточника);

	Счет = СтрокаФункции.Счет;
	Если ЗначениеЗаполнено(Счет) Тогда
		Если ЭтоОстаток Тогда
			Результат = Результат + " по счету "+Счет;
		Иначе	
			Результат = Результат + " счета "+Счет;
		КонецЕсли;
		СтрокаОтбора = ПолучитьОписаниеОтбора(Счет, СтрокаФункции, Источник.Владелец.РегистрБухгалтерии, Ложь);
		Если ЗначениеЗаполнено(СтрокаОтбора) Тогда
			Результат = Результат + " с отбором "+СтрокаОтбора;		
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЭтоОстаток Тогда
		Счет = Неопределено;
		Если СтрокаФункции.КорСчетВСписке Тогда
			КорСчета = СтрокаФункции.КорСчетСписок.Получить();
			Если ТипЗнч(КорСчета) = Тип("СписокЗначений") И КорСчета.Количество() > 0 Тогда
//++Куприянова 23.06.2013
//исправление критической ошибки
//				Счет = СтрокаФункции.КорСчетСписок[0].Значение;		
				Счет = КорСчета[0].Значение;		
//--Куприянова 23.06.2013
				СтрокаСчета = СписокСчетов(КорСчета);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаФункции.КорСчет) Тогда 	
			Счет = СтрокаФункции.КорСчет;
			СтрокаСчета = Счет.Код;
		КонецЕсли;

		Если Счет <> Неопределено Тогда
			Результат = Результат + ?(СтрокаФункции.КорСчетНеРавно," не","")+" по кор.счету "+СтрокаСчета;

			СтрокаОтбора = ПолучитьОписаниеОтбора(Счет, СтрокаФункции, Источник.Владелец.РегистрБухгалтерии, Истина);
			Если ЗначениеЗаполнено(СтрокаОтбора) Тогда
				Результат = Результат + " с отбором "+СтрокаОтбора;		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
КонецФункции // ()

Функция ПолучитьОписаниеФункцииРегистраНакопления(Источник) Экспорт
	Результат = "";

	Результат = isГенераторОтчетов.ПолучитьИмяФункцииИсточника(Источник.ФункцияРегистра, Источник.Владелец) +
			" по регистру " + Источник.Владелец;
	ЭтоОстаток = isГенераторОтчетов.ЭтоФункцияОстатка(Источник.ФункцияРегистра);
	СтрокаОтбора = ПолучитьОписаниеОтбораПоРегиструНакопления(Источник, ЭтоОстаток);
	Если ЗначениеЗаполнено(СтрокаОтбора) Тогда
		Результат = Результат + " с отбором "+СтрокаОтбора;		
	КонецЕсли;

	Возврат Результат;
КонецФункции // ()

Функция ПолучитьОписаниеОтбораПоРегиструНакопления(Источник, ЭтоОстаток) Экспорт    
	Результат = "";
	НП = Источник.НастройкиПостроителяРегистраНакопления.Получить();
	РегистрБухгалтерии = Источник.Владелец.РегистрБухгалтерии;
	Если ТипЗнч(НП) = Тип("НастройкиПостроителяОтчета") Тогда
		ПосОт = Новый ПостроительОтчета;
		isГенераторОтчетов.ЗаполнитьНастройкиПостроителяДляРегистраНакопления(РегистрБухгалтерии, ПосОт, НЕ ЭтоОстаток);
		ПосОт.ЗаполнитьНастройки();
		ПосОт.УстановитьНастройки(НП);
		Результат = ПолучитьОписаниеСоставаОтбора(ПосОт.Отбор);
	КонецЕсли;
	
    Возврат Результат;
КонецФункции

Функция ПолучитьОписаниеСоставаОтбора(Отбор)
	Результат = "";
	Для каждого ТекОтбор Из Отбор Цикл
		Если ТекОтбор.Использование Тогда
			Если ТекОтбор.ВидСравнения = ВидСравнения.ВСписке ИЛИ ТекОтбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии 
				ИЛИ ТекОтбор.ВидСравнения = ВидСравнения.НеВСписке ИЛИ ТекОтбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии  Тогда
				СтрокаЗначений = "";
				Для каждого ТекСтр Из ТекОтбор.Значение Цикл
				    ДобавитьРеквизит(СтрокаЗначений, Строка(ТекСтр.Значение),", ");
					СтрокаОтбора = ТекОтбор.Представление+" "+ТекОтбор.ВидСравнения+" "+СтрокаЗначений;
				КонецЦикла;
			Иначе	
				СтрокаОтбора = ТекОтбор.Представление+" "+ТекОтбор.ВидСравнения+" "+ТекОтбор.Значение;
			КонецЕсли;
			ДобавитьРеквизит(Результат,СтрокаОтбора," И ");
		КонецЕсли;		
	КонецЦикла;
	Возврат Результат;
КонецФункции // ()

Функция ЭтоИсточникОстатка(ТипРегистра, ТипИсточника)
	Если ТипРегистра = 0 Тогда
		Возврат ТипИсточника<>1 И ТипИсточника<>2;
	Иначе	
		Возврат ТипИсточника=1 ИЛИ ТипИсточника=3;
	КонецЕсли;
КонецФункции // ЭтоОстаток()

Функция ПериодДляЗапроса(Периодичность) Экспорт
	Если Периодичность=1 Тогда
		ПериодичностьСтр="Месяц";
	ИначеЕсли Периодичность=2 Тогда
		ПериодичностьСтр="Квартал";
	ИначеЕсли Периодичность=3 Тогда
		ПериодичностьСтр="Полугодие";
	ИначеЕсли Периодичность=4 Тогда
		ПериодичностьСтр="Год";
	ИначеЕсли Периодичность=5 Тогда
		ПериодичностьСтр="Неделя";
	ИначеЕсли Периодичность=6 Тогда
		ПериодичностьСтр="День";
	ИначеЕсли Периодичность=7 Тогда
		ПериодичностьСтр="Период";
	КонецЕсли;
	Возврат ПериодичностьСтр;
КонецФункции // 

Функция ПериодДляЗапросаВИтогах(Периодичность) Экспорт
	Если Периодичность=1 Тогда
		
		ПериодичностьСтр="Период ПЕРИОДАМИ(Месяц, , )";
	ИначеЕсли Периодичность=2 Тогда
		ПериодичностьСтр="Период ПЕРИОДАМИ(Квартал, , )";
	ИначеЕсли Периодичность=3 Тогда
		ПериодичностьСтр="Период ПЕРИОДАМИ(Полугодие, , )";
	ИначеЕсли Периодичность=4 Тогда
		ПериодичностьСтр="Период ПЕРИОДАМИ(Год, , )";
	ИначеЕсли Периодичность=5 Тогда
		ПериодичностьСтр="Период ПЕРИОДАМИ(Неделя, , )";
	ИначеЕсли Периодичность=6 Тогда
		ПериодичностьСтр="Период ПЕРИОДАМИ(День, , )";
	ИначеЕсли Периодичность=7 Тогда
		ПериодичностьСтр="";
	КонецЕсли;
	Возврат ПериодичностьСтр;
КонецФункции // 

Функция ПолучитьИмяСубконто(ПутьКДанным)
	Поз = Найти(ПутьКДанным,".");
    Если Поз = 0 Тогда
	    Возврат ПутьКДанным;
	Иначе	
		Возврат Лев(ПутьКДанным,Поз - 1);
	КонецЕсли;
	

КонецФункции // ()

Процедура УстановитьТекстУсловияОтбораПоПодразделению()
	Если НЕ ЗначениеЗаполнено(мВидСравненияОтбораПоПодразделению) Тогда
		мВидСравненияОтбораПоПодразделению = ВидСравнения.Равно;
	КонецЕсли;
	Префикс1="";
	Префикс2="";
	Префикс0="";
	Префикс="";
	ОпределитьПрефексыСтрокиОтбора(мВидСравненияОтбораПоПодразделению,Префикс0,Префикс,Префикс1,Префикс2)	;
	мОтборПоПодразделениюСчет 	= Префикс0 + "Подразделение" 	+ Префикс + "Подразделение" + Префикс2;
	мОтборПоПодразделениюКорСчет 		= Префикс0 + "ПодразделениеКор" + Префикс + "Подразделение" + Префикс2;
КонецПроцедуры

Процедура ДобавитьЗначениеВТаблицуПараметровРегистраБухгалтерии(СтрокаРегистра, ИмяТаблицы, Значение)
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Зн = ВРег(Значение);
		Если Зн = "NULL" Тогда
			Возврат;	
		ИначеЕсли Найти(ИмяТаблицы,"Субконто") > 0 Тогда
			Зн = ПолучитьИмяСубконто(Зн);
		КонецЕсли;
	Иначе
		Зн = Значение;
	КонецЕсли;
	Если СтрокаРегистра[ИмяТаблицы] = Неопределено Тогда
		МассивЗначений = Новый Массив;
		СтрокаРегистра[ИмяТаблицы] = МассивЗначений;
	Иначе
		МассивЗначений = СтрокаРегистра[ИмяТаблицы];
	КонецЕсли;
	
	Если МассивЗначений.Найти(Зн) = Неопределено Тогда
		МассивЗначений.Добавить(Зн);
	КонецЕсли;
КонецПроцедуры

// алгоритм определения строки пересчета
// если это начальный остаток, то курс счета берется из строки таблицы спецсчета
// если это конечный остаток, то курс определяется из следующего
// 		строка таблицы спецсчетов неопределена - курс на конец периода отчета
//		строка таблицы есть, строка пересчета пустая - расчет по курсу выполняется отдельным запросом 
// если это оборот, то курс определяется из следующего
// 		строка таблицы спецсчетов неопределена - курс на конец периода отчета
//		строка таблицы есть, строка пересчета пустая - расчет по курсу выполняется отдельным запросом 
//
Функция ПолучитьСтрокуПересчетаВВалюту(Счет, СтрокаСпецСчета, ФункцияСтроки)
	Если мОтчетВВалюте Тогда
		РезультатКонец = ПолучитьСтрокуПересчетаВВалютуПоФиксированномуКурса(ФункцияСтроки);
		Возврат ?(СтрокаСпецСчета = Неопределено,РезультатКонец, "/"+Формат(СтрокаСпецСчета.Курс,"ЧДЦ=4; ЧРД=.; ЧГ=0"));
		//Если СтрокаСпецСчета = Неопределено Тогда
		//	Возврат РезультатКонец;
		//ИначеЕсли ФункцияСтроки = Неопределено Тогда
		//	
		//
		//КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции // ПолучитьСтрокуПересчетаВВалюту(ПодстрокаИсточника.Счет)()

Функция ПолучитьСтрокуПересчетаВВалютуПоФиксированномуКурса(ФункцияСтроки)
	Если Настройка.СдвинутьДатуКурсаВалютыНаНачалоПериода И ФункцияСтроки >= 3 И ФункцияСтроки <= 5 Тогда 	    // НАЧОСТАТОК
		Курс = мКурсНаКонецПрошлогоПериода;
	Иначе
		Курс = мКурсНаКонец;
	КонецЕсли;
	Возврат "/"+Формат(Курс,"ЧДЦ=4; ЧРД=.")
КонецФункции // ()

Функция ПолучитьИмяТаблицыПакета(ЭтоОстаток, Счет, КорСчет, СтруктураОтбора)
	Результат = Новый Структура("ИмяТаблицыПакета, ИменаРесурсов, ИменаСчетов, ИменаСубконто");
	Если ЭтоОстаток Тогда
		Если ЗначениеЗаполнено(СтруктураОтбора.ОтборПоСчету) Тогда
			Результат.ИмяТаблицыПакета 	= "ТаблицаОстатков";			
			Результат.ИменаРесурсов 	= "РесурсыОстатков";
			Результат.ИменаСчетов 		= "СчетаОстатков";
			Результат.ИменаСубконто 	= "СубконтоОстатков";
		Иначе	
			Результат.ИмяТаблицыПакета 	= "ТаблицаОстатковБА";			
			Результат.ИменаРесурсов 	= "РесурсыОстатковБА";
			Результат.ИменаСчетов	 	= "СчетаОстатковБА";
			Результат.ИменаСубконто 	= "СубконтоОстатковБА";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СтруктураОтбора.ОтборПоСчету) ИЛИ (ЗначениеЗаполнено(КорСчет) И ЗначениеЗаполнено(СтруктураОтбора.ОтборПоКорСчету)) Тогда
			Результат.ИмяТаблицыПакета 	= "ТаблицаОборотов";			
			Результат.ИменаРесурсов 	= "РесурсыОборотов";
			Результат.ИменаСчетов	 	= "СчетаОборотов";
			Результат.ИменаСубконто 	= "СубконтоОборотов";
		ИначеЕсли ЗначениеЗаполнено(КорСчет) Тогда
			Результат.ИмяТаблицыПакета 	= "ТаблицаОборотовКор";			
			Результат.ИменаРесурсов 	= "РесурсыОборотовКор";
			Результат.ИменаСчетов	 	= "СчетаОборотовКор";
			Результат.ИменаСубконто 	= "СубконтоОборотовКор";
		Иначе
			Результат.ИмяТаблицыПакета 	= "ТаблицаОборотовБА";			
			Результат.ИменаРесурсов 	= "РесурсыОборотовБА";
			Результат.ИменаСчетов	 	= "СчетаОборотовБА";
			Результат.ИменаСубконто 	= "СубконтоОборотовБА";
		КонецЕсли;
	КонецЕсли;
    Возврат Результат;
КонецФункции // ()

Функция ПолучитьСтрокуТаблицыСпецсчетов(Счет)
	Результат = Неопределено;
	Если мОтчетВВалюте Тогда
		Результат = мТаблицаСпецсчетов.Найти(Счет,"Счет");
		Если Результат = Неопределено Тогда
			Родитель = Счет.Родитель;
			Пока ЗначениеЗаполнено(Родитель) И Результат = Неопределено Цикл
				Результат = мТаблицаСпецсчетов.Найти(Родитель,"Счет");
				Родитель = Родитель.Родитель;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции // ()

Функция ПолучитьИмяГруппировкиДинамическойСтроки(НомерИзмерения, СтрокаИсточника)
	Умолчание = "Субконто"+Строка(НомерИзмерения);
	СтрокаИзмерения = СтрокаИсточника["НомерСубконто" + Строка(НомерИзмерения)];
	Если НЕ ЗначениеЗаполнено(СтрокаИзмерения) Тогда	
//++ Куприянова 20.06.2013
//исправление ошибки
//		ПодРез = Умолчание;	
		ПодРез = "NULL";	
//-- Куприянова 20.06.2013		
	Иначе
		Если ТипЗнч(СтрокаИзмерения) = Тип("Строка") Тогда
			ПодРез = СтрокаИзмерения;
		Иначе	
			ПодРез = "Субконто"+СокрЛП(СтрокаИзмерения);
		КонецЕсли;
	КонецЕсли;
	Возврат Подрез;
КонецФункции // ()

Функция ПолучитьИмяТаблицыПакетаДляСчета(ЭтоОстаток, Счет, КорСчет, КорСчетНеРавно,	ОтборПоСчету,ОтборПоКорСчету,ИмяРесурса, СтрокаИсточника)
	ЗначениеКор = ?(НЕ ЗначениеЗаполнено(КорСчет) ИЛИ ЭтоОстаток,Неопределено,КорСчет);
	
	Идентификатор = "#" + СтрЗаменить(Счет.Код,".","_");

	Если ЗначениеКор = Неопределено Тогда
		Идентификатор = Идентификатор + "#";  // добавили знак для уникальности строки без корсчетов
	Иначе
		Если КорСчетНеРавно = Истина Тогда
			Идентификатор = Идентификатор + "НЕ";  
		КонецЕсли;
		Если ТипЗнч(ЗначениеКор) = Тип("СписокЗначений") Тогда	
			Для каждого ТекЭл Из ЗначениеКор Цикл
				Идентификатор = Идентификатор + "#" + СтрЗаменить(ТекЭл.Значение.Код,".","_");
			КонецЦикла;			
		Иначе
			Идентификатор = Идентификатор + "#" + СтрЗаменить(ЗначениеКор.Код,".","_");
		КонецЕсли;
	КонецЕсли;
	
	ИменаИзмерений = Новый Массив;
	Если Настройка.ВидНастройки = 2 
		И СтрокаИсточника.ДинамическаяСекция = 1 Тогда
		ИменаИзмерений.Добавить(ПолучитьИмяСубконто(ПолучитьИмяГруппировкиДинамическойСтроки(1, СтрокаИсточника)));
	ИначеЕсли Настройка.ВидНастройки = 0 И Настройка.ДинамическиеСтроки Тогда
		КолГруппировок = СтрокаИсточника.КоличествоГруппировок;
		Для НомерИзмерения = 1 По КолГруппировок Цикл
			ИменаИзмерений.Добавить(ВРЕГ(ПолучитьИмяСубконто(ПолучитьИмяГруппировкиДинамическойСтроки(НомерИзмерения, СтрокаИсточника))));
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ТекЭл Из ИменаИзмерений Цикл
		Идентификатор = Идентификатор + "#" + ТекЭл;
	КонецЦикла;
	
	СтрокаТаблицы = мТаблицаПакетаЗапросов.Найти(Идентификатор, "Идентификатор");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = мТаблицаПакетаЗапросов.Добавить();
		СтрокаТаблицы.Идентификатор = Идентификатор;
		СтрокаТаблицы.Счет 			= Счет;
		СтрокаТаблицы.КорСчет 		= ЗначениеКор;
		СтрокаТаблицы.КорСчетНеРавно = КорСчетНеРавно;
		СтрокаТаблицы.ЭтоОстаток 	= ЭтоОстаток;
		СтрокаТаблицы.ИмяТаблицы 	= "Таблица"+Строка(мТаблицаПакетаЗапросов.Количество());
		СтрокаТаблицы.ИменаИзмерений = ИменаИзмерений;
		//Для каждого ТекЭл Из ИменаИзмерений Цикл
		//	СтрокаТаблицы.ИменаИзмерений.Добавить(ТекЭл);
		//КонецЦикла;
	КонецЕсли;
	
	УсловиеОтбора = "ИСТИНА ";
	Если ЗначениеЗаполнено(ОтборПоСчету) Тогда
		УсловиеОтбора = УсловиеОтбора + ОтборПоСчету ;
		ДополнитьИзмеренияИзОтбора(ОтборПоСчету, СтрокаТаблицы.ИменаИзмерений);
	КонецЕсли;
	Если ЗначениеКор <> Неопределено 
		И ЗначениеЗаполнено(ОтборПоКорСчету) Тогда
		УсловиеОтбора =  УсловиеОтбора + ОтборПоКорСчету;
		ДополнитьИзмеренияИзОтбора(ОтборПоКорСчету, СтрокаТаблицы.ИменаИзмерений);
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ДобавитьРеквизит(СтрокаТаблицы.УсловиеОтбора, УсловиеОтбора, " ИЛИ " + мПС);
	КонецЕсли;
    Если СтрокаТаблицы.ИменаРесурсов.Найти(ИмяРесурса)=Неопределено Тогда
		СтрокаТаблицы.ИменаРесурсов.Добавить(ИмяРесурса);
	КонецЕсли;
	
	///+++ aseroshtanov 05.03.13
	///устранена ошибка: при формировании отчета по оборотам и остаткам и оборотам 
	///признак (этоОстаток) брался только с первой таблицы, 
	ЭтоОстаток_ = СтрокаТаблицы.ЭтоОстаток;
	СтрокаТаблицы.ЭтоОстаток = Макс(ЭтоОстаток,ЭтоОстаток_);
	///--- aseroshtanov 05.03.13
	
	Возврат СтрокаТаблицы.ИмяТаблицы;
КонецФункции // ()

Процедура ДополнитьИзмеренияИзОтбора(УсловиеОтбора, МассивИмен)
	СтрокаПоиска = ВРег(УсловиеОтбора);
	ИмяКор1 = "КОРСУБКОНТО1";
	ИмяКор2 = "КОРСУБКОНТО2";
	ИмяКор3 = "КОРСУБКОНТО3";
	ПозицияКор1 = Найти(СтрокаПоиска,ИмяКор1);
	ПозицияКор2 = Найти(СтрокаПоиска,ИмяКор2);
	ПозицияКор3 = Найти(СтрокаПоиска,ИмяКор3);
	Если ПозицияКор1 > 0 И МассивИмен.Найти(ИмяКор1) = Неопределено Тогда
		МассивИмен.Добавить(ИмяКор1);
	КонецЕсли;
	
	Если ПозицияКор2 > 0 И МассивИмен.Найти(ИмяКор2) = Неопределено Тогда
		МассивИмен.Добавить(ИмяКор2);
	КонецЕсли;
	
	Если ПозицияКор3 > 0 И МассивИмен.Найти(ИмяКор3) = Неопределено Тогда
		МассивИмен.Добавить(ИмяКор2);
	КонецЕсли;
	
	Имя = "СУБКОНТО1";
	Позиция = Найти(СтрокаПоиска,Имя);
	Если Позиция > 0 И Позиция <> ПозицияКор1+3 И МассивИмен.Найти(Имя) = Неопределено Тогда
		МассивИмен.Добавить(Имя);
	КонецЕсли;

	Имя = "СУБКОНТО2";
	Позиция = Найти(СтрокаПоиска,Имя);
	Если Позиция > 0 И Позиция <> ПозицияКор2+3 И МассивИмен.Найти(Имя) = Неопределено Тогда
		МассивИмен.Добавить(Имя);
	КонецЕсли;

	Имя = "СУБКОНТО3";
	Позиция = Найти(СтрокаПоиска,Имя);
	Если Позиция > 0 И Позиция <> ПозицияКор3+3 И МассивИмен.Найти(Имя) = Неопределено Тогда
		МассивИмен.Добавить(Имя);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьЗапросПоСпецсчету(СтрокаСпецсчета, Запрос,СтрокаИсточника,ИмяИсточника,ПодСтрокаИсточника,СуфиксПараметра,Коэффициент,СтрокаРегистраБухгалтерии, РежимРасшифровки, СтруктураИзмерений)
	ОбщийК=ПодстрокаИсточника.Коэффициент*Коэффициент;
	ЭтоОстаток = ЭтоИсточникОстатка(СтрокаИсточника.Источник.Владелец.ТипРегистра,ПодСтрокаИсточника.ТипИсточника);
	ПериодСтр=ПериодДляЗапроса(Периодичность);
	ИмяКоэффициента="Коэффициент"+СуфиксПараметра;
	ИмяСчета="Счет"+СуфиксПараметра;
	Запрос.УстановитьПараметр(ИмяСчета,ПодстрокаИсточника.Счет);
	Запрос.УстановитьПараметр(ИмяКоэффициента,ОбщийК);
	Регистр=Настройка.ВидИсточника.РегистрБухгалтерии;
	
	СтруктураОтборовПоСубконто = ПолучитьСтрокуОтбораПоИсточнику(СтрокаРегистраБухгалтерии,ПодСтрокаИсточника,Запрос,СуфиксПараметра,ЭтоОстаток);
	СчетГруппа=СчетЯвляетсяГруппой(ПодстрокаИсточника.Счет);
	ОтборПоСубконто = СтруктураОтборовПоСубконто.ОтборПоСчету;
	Если РежимРасшифровки И СтруктураИзмерений <> Неопределено Тогда
		Для каждого ТекИзмерение Из СтруктураИзмерений Цикл
			ОтборПоСубконто = ОтборПоСубконто + " И " + ТекИзмерение.Ключ + " = &" + ТекИзмерение.Ключ;	
		КонецЦикла;
	КонецЕсли;
	КурсНаКонецСтрока = Формат(мКурсНаКонец,"ЧДЦ=4; ЧРД=.");
	КурсНаНачалоСтрока = Формат(СтрокаСпецсчета.Курс,"ЧДЦ=4; ЧРД=.");
	ИмяТаблицыДт 	= ?(СтрокаСпецсчета.ТипДебет = 2, 	"ТаблицаСВК","ТаблицаКДО");
	ИмяТаблицыКт 	= ?(СтрокаСпецсчета.ТипКредит = 2,	"ТаблицаСВК","ТаблицаКДО");
	ПериодичностьДт = ?(СтрокаСпецсчета.ТипДебет = 2,	"Месяц","День");
	ПериодичностьКт = ?(СтрокаСпецсчета.ТипКредит = 2,	"Месяц","День");

		
	Если Настройка.ВидНастройки = 2 Тогда
		Если СтрокаИсточника.ДинамическаяСекция = 1 Тогда
//////////////////////!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! проверить
			ИСГ = ПолучитьСтрокуЗапросаДинамическихСтрок(СтрокаИсточника,СтрокаРегистраБухгалтерии, "ТаблицаСВК");
			ИмяСубконтоГруппировки = ИСГ+" КАК Измерение,";
		Иначе
			ИмяСубконтоГруппировки = "NULL КАК Измерение,";
		КонецЕсли;
	Иначе
		ИмяСубконтоГруппировки = "";
	КонецЕсли;
	Если ЭтоОстаток Тогда
		Ресурс=ПодстрокаИсточника.Ресурс;
		Если ПодСтрокаИсточника.ТипИсточника=0 Тогда      // остаток на конец
			ПодстрокаСуммы = "ВложенныйЗапрос.Сумма КАК Сумма";
		ИначеЕсли ПодСтрокаИсточника.ТипИсточника=6 Тогда // остаток по Кт на конец 
			Если ПодСтрокаИсточника.Счет.Вид = ВидСчета.АктивноПассивный Тогда
				ПодстрокаСуммы =
				"ВЫБОР КОГДА ВложенныйЗапрос.Сумма < 0 ТОГДА - ВложенныйЗапрос.Сумма ИНАЧЕ 0 КОНЕЦ *&"+ИмяКоэффициента+" КАК Сумма";
			ИначеЕсли ПодСтрокаИсточника.Счет.Вид = ВидСчета.Активный Тогда
				ПодстрокаСуммы = "0 КАК Сумма";
			ИначеЕсли ПодСтрокаИсточника.Счет.Вид = ВидСчета.Пассивный Тогда
				ПодстрокаСуммы = "- ВложенныйЗапрос.Сумма *&"+ИмяКоэффициента+" КАК Сумма";
			КонецЕсли;
		ИначеЕсли ПодСтрокаИсточника.ТипИсточника=7 Тогда // остаток по Дт на конец 
			Если ПодСтрокаИсточника.Счет.Вид = ВидСчета.АктивноПассивный Тогда
				ПодстрокаСуммы =
				"ВЫБОР КОГДА ВложенныйЗапрос.Сумма > 0 ТОГДА ВложенныйЗапрос.Сумма ИНАЧЕ 0 КОНЕЦ *&"+ИмяКоэффициента+" КАК Сумма";
			ИначеЕсли ПодСтрокаИсточника.Счет.Вид = ВидСчета.Пассивный Тогда
				ПодстрокаСуммы = "0 КАК Сумма";
			ИначеЕсли ПодСтрокаИсточника.Счет.Вид = ВидСчета.Активный Тогда
				ПодстрокаСуммы = "ВложенныйЗапрос.Сумма *&"+ИмяКоэффициента+" КАК Сумма";
			КонецЕсли;
		КонецЕсли;
		
		Результат = 
		"ВЫБРАТЬ
		|	"+Формат(СтрокаИсточника.Ид, "ЧГ=0")+" КАК Ид,
		|	"""+СтрокаИсточника.ПривязкаКод+""" КАК ПривязкаКод,
		|	"+Строка(СтрокаИсточника.ПривязкаНомерСтроки)+" КАК ПривязкаНомерСтроки,
		| 	" + ИмяСубконтоГруппировки + " 
		| 	" + ?(РежимРасшифровки,Строка(ПодстрокаИсточника.НомерСтроки) + " КАК НомерСтроки,","") + " 
		| 	&" + ИмяИсточника + " КАК Источник, 
		|	ИСТИНА КАК ЭтоОстаток, 
		|	" + ПодстрокаСуммы + " 
		|ИЗ 
		|
		|(ВЫБРАТЬ
		|	Сумма(ЕстьNUll(ВложенныйЗапрос.Сумма,0))КАК Сумма
		| ИЗ (
		|		ВЫБРАТЬ
		|		естьNull(Остаток."+Ресурс+"НачальныйОстаток,0) / " + КурсНаНачалоСтрока + " КАК Сумма
		|		ИЗ
		|		РегистрБухгалтерии.Международный.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, , , Счет В ИЕРАРХИИ (&" + ИмяСчета + "), , Организация В (&Организация) " + ОтборПоСубконто + ") КАК Остаток
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	СУММА(ЕстьNull(ВложенныйЗапрос.Сумма,0)) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		МеждународныйОбороты."+Ресурс+"ОборотДт / ЕСТЬNULL(Таблица.Курс, "+КурсНаКонецСтрока+") КАК Сумма
		|	ИЗ
		|		РегистрБухгалтерии.Международный.Обороты(&ДатаНачала, &ДатаКонца, "+ПериодичностьДт+", Счет В ИЕРАРХИИ (&"+ИмяСчета+"), ,  Организация В (&Организация) "+ОтборПоСубконто+", , ) КАК МеждународныйОбороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицыДт + " КАК Таблица
		|			ПО (НАЧАЛОПЕРИОДА(МеждународныйОбороты.Период, МЕСЯЦ) = Таблица.Период)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		- МеждународныйОбороты."+Ресурс+"ОборотКт / ЕСТЬNULL(Таблица.Курс, "+КурсНаКонецСтрока+")
		|	ИЗ
		|		РегистрБухгалтерии.Международный.Обороты(&ДатаНачала, &ДатаКонца, "+ПериодичностьДт+", Счет В ИЕРАРХИИ (&"+ИмяСчета+"), ,  Организация В (&Организация) "+ОтборПоСубконто+", , ) КАК МеждународныйОбороты
		|			ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицыКт + " КАК Таблица
		|			ПО (НАЧАЛОПЕРИОДА(МеждународныйОбороты.Период, "+ПериодичностьКт+") = Таблица.Период)) КАК ВложенныйЗапрос) КАК ВложенныйЗапрос
		|	) КАК ВложенныйЗапрос";
		
	Иначе	
		КорСчет = ?(ПодСтрокаИсточника.КорСчетВСписке,ПодСтрокаИсточника.КорСчетСписок.Получить(),ПодСтрокаИсточника.КорСчет);
		Если ЗначениеЗаполнено(КорСчет) Тогда
			ИмяКорСчета = "КорСчет"+СуфиксПараметра;
			Запрос.УстановитьПараметр(ИмяКорСчета, ПодстрокаИсточника.КорСчет);
			УсловиеКорСчета = "КорСчет в иерархии (&"+ИмяКорСчета+") ";
			ОтборПоКорсубконто = СтруктураОтборовПоСубконто.ОтборПоКорСчету;
			Если ПодСтрокаИсточника.КорСчетНеРавно Тогда
				УсловиеКорСчета = "(НЕ " + УсловиеКорСчета+")";
				ОтборПоКорсубконто = "";
			КонецЕсли;
		Иначе
			УсловиеКорСчета = "";
		КонецЕсли;
		
		Ресурс = ПодстрокаИсточника.Ресурс+?(ПодСтрокаИсточника.ТипИсточника=1,"ОборотДт","ОборотКт");
		ИмяТаблицы = ?(ПодСтрокаИсточника.ТипИсточника=1,ИмяТаблицыДт,ИмяТаблицыКт);
		ПериодичностьСтр = ?(ПодСтрокаИсточника.ТипИсточника=1, ПериодичностьДт, ПериодичностьКт);
        Результат = 
		"ВЫБРАТЬ
		|	"+Формат(СтрокаИсточника.Ид, "ЧГ=0")+" КАК Ид,
		|	"""+СтрокаИсточника.ПривязкаКод+""" КАК ПривязкаКод,
		|	"+Строка(СтрокаИсточника.ПривязкаНомерСтроки)+" КАК ПривязкаНомерСтроки,
		| 	"+ИмяСубконтоГруппировки+" 
		| 	"+?(РежимРасшифровки,Строка(ПодстрокаИсточника.НомерСтроки)+" КАК НомерСтроки,","")+" 
		| 	&"+ИмяИсточника+" КАК Источник, 
		|	ЛОЖЬ КАК ЭтоОстаток, 
		|	СУММА(ЕСТЬNULL(МеждународныйОбороты."+Ресурс+", 0) / ЕСТЬNULL(Таблица.Курс, "+КурсНаКонецСтрока+")*&"+ИмяКоэффициента+") КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Международный.Обороты(&ДатаНачала, &ДатаКонца, "+ПериодичностьСтр+", Счет В ИЕРАРХИИ (&"+ИмяСчета+"), , Организация В (&Организация) "+ОтборПоСубконто + " " + ОтборПоКорсубконто+",
		|	" +УсловиеКорСчета+", ) КАК МеждународныйОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяТаблицы + " КАК Таблица
		|		ПО (НАЧАЛОПЕРИОДА(МеждународныйОбороты.Период, "+ПериодичностьСтр+") = Таблица.Период)";
		
		
	КонецЕсли;   
	
	Возврат Результат;
КонецФункции // ПолучитьЗапросПоСпецсчету()

Функция ПолучитьСтрокуЗапросаДинамическихСтрок(СтрокаИсточника,СтрокаРегистраБухгалтерии, ИменаСубконто)
	Рез = "";
	КолГруппировок = ?(СтрокаИсточника.КореньДинамическихГруппировок И СтрокаИсточника.РежимДинамическихСтрок = 0, 0,
				СтрокаИсточника.КоличествоГруппировок);
	Для НомерИзмерения = 1 По мМаксимальноеКоличествоГруппировокДинамическихСтрок Цикл
		Умолчание = "Субконто"+Строка(НомерИзмерения);
		СтрокаИзмерения = СтрокаИсточника["НомерСубконто" + Строка(НомерИзмерения)];
		Если НомерИзмерения > КолГруппировок Тогда	
			ПодРез = "NULL";	
		Иначе
			ПодРез = ПолучитьИмяГруппировкиДинамическойСтроки(НомерИзмерения, СтрокаИсточника);
		КонецЕсли;
		Если ПодРез <> "NULL" Тогда
			Если НЕ мРежимПакетногоЗапроса И ИменаСубконто <> Неопределено Тогда
				ДобавитьЗначениеВТаблицуПараметровРегистраБухгалтерии(СтрокаРегистраБухгалтерии, ИменаСубконто,ПодРез);
			КонецЕсли;
//				ДобавитьЗначениеВТаблицуПараметровРегистраБухгалтерии(СтрокаРегистраБухгалтерии, ИменаСубконто,ПолучитьИмяСубконто(ПодРез));
		КонецЕсли;
		Рез = Рез + ПодРез + " КАК Измерение"+Строка(НомерИзмерения)+",";
	КонецЦикла;
	Возврат Рез;
КонецФункции // ()

Функция ПолучитьСтрокуЗапросаДинамическихСтрокРегистраНакопления(СтрокаИсточника)
	Рез = "";
	КоличествоИзмеренийСтроки = ?(СтрокаИсточника.КореньДинамическихГруппировок И СтрокаИсточника.РежимДинамическихСтрок = 0, 0,
									СтрокаИсточника.КоличествоГруппировок);
	Для НомерИзмерения = 1 По мМаксимальноеКоличествоГруппировокДинамическихСтрок Цикл
		Умолчание = НомерИзмерения;
		СтрокаИзмерения = СтрокаИсточника["НомерСубконто" + Строка(НомерИзмерения)];
		Если НомерИзмерения > КоличествоИзмеренийСтроки Тогда	
			ПодРез = "NULL";	
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаИзмерения) Тогда	
			ПодРез = Метаданные.РегистрыНакопления[СтрокаИсточника.Источник.Владелец.РегистрБухгалтерии].Измерения[НомерИзмерения-1].Имя;
		Иначе
			Если ТипЗнч(СтрокаИзмерения) = Тип("Строка") Тогда
				ПодРез = СтрокаИзмерения;
			Иначе	
				ПодРез = Метаданные.РегистрыНакопления[СтрокаИсточника.Источник.Владелец.РегистрБухгалтерии].Измерения[СтрокаИзмерения-1].Имя;
			КонецЕсли;
		КонецЕсли;
		Рез = Рез + ПодРез + " КАК Измерение"+Строка(НомерИзмерения)+",";
	КонецЦикла;
	Возврат Рез;
КонецФункции // ()

Процедура ДополнитьУсловиеОтбораПоПараметрам(УсловиеОтбора, УсловиеПараметров, ТипСчета)
	Если ТипСчета = "Счет" И УсловиеОтбора = 1
			ИЛИ ТипСчета <> "Счет" И УсловиеОтбора = 0 Тогда
		Возврат;		
	КонецЕсли;
	
	Если мОтборПоПодразделению И Настройка.ОтборПоПодразделению Тогда
		Если ТипСчета = "Счет" Тогда
			УсловиеОтбора = УсловиеОтбора + " И " + мОтборПоПодразделениюСчет;
		Иначе	
			УсловиеОтбора = УсловиеОтбора + " И " + мОтборПоПодразделениюКорСчет;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЗапросСпецИтогов(ЗапросОсновной, РегистрБухгалтерии)
	Если Найти(ЗапросОсновной,"ТаблицаОстатков") > 0 Тогда
		Возврат СтрЗаменить(ЗапросОсновной,"ТаблицаОстатков",
		"РегистрБухгалтерии."+РегистрБухгалтерии+".ОстаткиИОбороты(&ДатаНачала, &ДатаКонца,,,,, Организация В (&Организация))");		
	Иначе	
		Возврат СтрЗаменить(ЗапросОсновной,"ТаблицаОборотов",
		"РегистрБухгалтерии."+РегистрБухгалтерии+".Обороты(&ДатаНачала, &ДатаКонца,,, , Организация В (&Организация) , , )");
	КонецЕсли;
КонецФункции // ()

Функция ПолучитьСтрокуОтбораПоИзмерениямДляРасшифроки(СтрокаИсточника, СтруктураИзмерений)
	Рез = "";
	КоличествоИзмеренийСтроки = ?(Настройка.РежимДинамическихСтрок = 0,мМаксимальноеКоличествоГруппировокДинамическихСтрок,СтрокаИсточника.КоличествоГруппировок);
	Для НомерИзмерения = 1 По мМаксимальноеКоличествоГруппировокДинамическихСтрок Цикл
		ИмяПараметра = "Измерение"+Строка(НомерИзмерения);
		Если СтруктураИзмерений.Свойство(ИмяПараметра) Тогда
			Умолчание = НомерИзмерения;
			СтрокаИзмерения = СтрокаИсточника["НомерСубконто" + Строка(НомерИзмерения)];
			Если НЕ ЗначениеЗаполнено(СтрокаИзмерения) Тогда	
				Если СтрокаИсточника.Источник.Владелец.ТипРегистра = 0 Тогда
					ПодРез = "Субконто"+Строка(НомерИзмерения);
				Иначе	
					ПодРез = Метаданные.РегистрыНакопления[СтрокаИсточника.Источник.Владелец.РегистрБухгалтерии].Измерения[НомерИзмерения-1].Имя;
				КонецЕсли;
			Иначе
				Если ТипЗнч(СтрокаИзмерения) = Тип("Строка") Тогда
					ПодРез = СтрокаИзмерения;
				Иначе	
					Если СтрокаИсточника.Источник.Владелец.ТипРегистра = 0 Тогда
						ПодРез = "Субконто"+Строка(СтрокаИзмерения);
					Иначе	
						ПодРез = Метаданные.РегистрыНакопления[СтрокаИсточника.Источник.Владелец.РегистрБухгалтерии].Измерения[СтрокаИзмерения-1].Имя;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ДобавитьРеквизит(Рез, ПодРез + " = &" + ИмяПараметра," И ");
		КонецЕсли;
	КонецЦикла;
	Возврат Рез;
КонецФункции // ()

// возвращает строку отбора из построителя отчета по счету и корсчету источника
// инициирует параметры запроса
//
// Параметры
//  ПодстрокаИсточника  - Строка табличной части "Источники"
//  Запрос				- объект типа запрос
//  ИндексИсточника		- Число - номер источника в таблице источников
//  ИндексПодисточника	- Число - номер строки табличной части "Источники" источника
//
// Возвращаемое значение:
//   Отбор   - таблица отборов по счету
//
Функция ПолучитьСтрокуОтбораПоИсточнику(СтрокаРегистраБухгалтерии,ПодстрокаИсточника,Запрос, СуфиксПараметра, ЭтоОстаток)
	СтруктураРезультата = Новый Структура("ОтборПоСчету,ОтборПоКорсчету,ИмяСубконтоКонтрольный,
											|ОтборСубконто1,ОтборСубконто3,ОтборСубконто3","","","");

	Сч=0;
	Если ЗначениеЗаполнено(ПодстрокаИсточника.Счет) Тогда
		
		ПостроительОтчета=Новый ПостроительОтчета;
        Результат = "";
		isГенераторОтчетов.ЗаполнитьНастройкиПостроителя(СтрокаРегистраБухгалтерии.РегистрБухгалтерии, ПодстрокаИсточника.Счет, 
							ПодстрокаИсточника.Ресурс, ПостроительОтчета, Ложь);
		ПостроительОтчета.ЗаполнитьНастройки();
		Сч=0;
		НП = ПодстрокаИсточника.НастройкиПостроителяСчет.Получить();
		Если ТипЗнч(НП) = Тип("НастройкиПостроителяОтчета") Тогда
			ПостроительОтчета.УстановитьНастройки(НП);
		КонецЕсли;
		Если НЕ ЭтоОстаток Тогда
			СтруктураРезультата.ИмяСубконтоКонтрольный = НуженЗапросКонтрольный(ПодстрокаИсточника, ПостроительОтчета.Отбор);
		КонецЕсли;
		
		Для каждого ТекОтбор Из ПостроительОтчета.Отбор Цикл
			Если ТекОтбор.Использование Тогда
				ДобавитьЗначениеВТаблицуПараметровРегистраБухгалтерии(СтрокаРегистраБухгалтерии, ?(ЭтоОстаток,"СубконтоОстатков","СубконтоОборотов"), 
						ПолучитьИмяСубконто(ТекОтбор.ПутьКДанным));
				Если ТекОтбор.ВидСравнения=ВидСравнения.Интервал ИЛИ 
					ТекОтбор.ВидСравнения=ВидСравнения.ИнтервалВключаяГраницы ИЛИ 
					ТекОтбор.ВидСравнения=ВидСравнения.ИнтервалВключаяНачало ИЛИ 
					ТекОтбор.ВидСравнения=ВидСравнения.ИнтервалВключаяОкончание Тогда
					ИмяПараметра1="Параметр"+	СуфиксПараметра+СокрЛП(Сч);				
					ИмяПараметра2=ИмяПараметра2+СокрЛП(Сч)+"а";				
					Запрос.УстановитьПараметр(ИмяПараметра1,ТекОтбор.ЗначениеС);				
					Запрос.УстановитьПараметр(ИмяПараметра2,ТекОтбор.ЗначениеПо);				
					Интервал = Истина;
				Иначе
					ИмяПараметра1="Параметр"+	СуфиксПараметра+СокрЛП(Сч);				
					Запрос.УстановитьПараметр(ИмяПараметра1,ТекОтбор.Значение);				
					ИмяПараметра2=Неопределено;				
					Интервал = Истина;
				КонецЕсли;
				
				isГенераторОтчетов.Инк(Сч);
				ПодстрокаОтбора = ПолучитьСтрокуОтбора(ТекОтбор.ПутьКДанным,ТекОтбор.ВидСравнения,ИмяПараметра1,ИмяПараметра2);						
				Результат = Результат + " И " + ПодстрокаОтбора;
			КонецЕсли;		
		КонецЦикла;
		СтруктураРезультата.ОтборПоСчету = Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодстрокаИсточника.КорСчет) И
			 НЕ ЭтоИсточникОстатка(0, ПодстрокаИсточника.ТипИсточника) Тогда
        Результат = "";
		ПостроительОтчета=Новый ПостроительОтчета;
		isГенераторОтчетов.ЗаполнитьНастройкиПостроителя(СтрокаРегистраБухгалтерии.РегистрБухгалтерии,ПодстрокаИсточника.КорСчет,ПодстрокаИсточника.Ресурс,ПостроительОтчета,Истина);
		НП = ПодстрокаИсточника.НастройкиПостроителяКорСчет.Получить();
		Если ТипЗнч(НП) = Тип("НастройкиПостроителяОтчета") Тогда
			ПостроительОтчета.УстановитьНастройки(НП);
		КонецЕсли;
		Для каждого ТекОтбор Из ПостроительОтчета.Отбор Цикл
			Если ТекОтбор.Использование Тогда
				ДобавитьЗначениеВТаблицуПараметровРегистраБухгалтерии(СтрокаРегистраБухгалтерии, ?(ЭтоОстаток,"СубконтоОстатков","СубконтоОборотов"), 
					ПолучитьИмяСубконто(ТекОтбор.ПутьКДанным));
				Если ТекОтбор.ВидСравнения=ВидСравнения.Интервал ИЛИ 
					ТекОтбор.ВидСравнения=ВидСравнения.ИнтервалВключаяГраницы ИЛИ 
					ТекОтбор.ВидСравнения=ВидСравнения.ИнтервалВключаяНачало ИЛИ 
					ТекОтбор.ВидСравнения=ВидСравнения.ИнтервалВключаяОкончание Тогда
					ИмяПараметра1="Параметр"+СуфиксПараметра+СокрЛП(Сч);				
					ИмяПараметра2=ИмяПараметра2+"а";				
					Запрос.УстановитьПараметр(ИмяПараметра1,ТекОтбор.ЗначениеС);				
					Запрос.УстановитьПараметр(ИмяПараметра2,ТекОтбор.ЗначениеПо);				
				Иначе
					ИмяПараметра1="Параметр"+	СуфиксПараметра+СокрЛП(Сч);				
					Запрос.УстановитьПараметр(ИмяПараметра1,ТекОтбор.Значение);				
					ИмяПараметра2=Неопределено;				
				КонецЕсли;
				isГенераторОтчетов.Инк(Сч);
				ПодстрокаОтбора=ПолучитьСтрокуОтбора(ТекОтбор.ПутьКДанным,ТекОтбор.ВидСравнения,ИмяПараметра1,ИмяПараметра2);						
				Результат = Результат + " И " + ПодстрокаОтбора;
			КонецЕсли;		
		КонецЦикла;
		СтруктураРезультата.ОтборПоКорСчету = Результат;
	КонецЕсли;
	
	Возврат СтруктураРезультата;
КонецФункции

Процедура ОпределитьПрефексыСтрокиОтбора(ВидСр,Префикс0,Префикс,Префикс1,Префикс2)
	Префикс1="";
	Префикс2="";
	Префикс0="";
	Если ВидСр = ВидСравнения.ВСписке ИЛИ 
			 ВидСр = ВидСравнения.НеВСписке  Тогда
		Префикс = " В (&";
		Префикс2 = ")";
	ИначеЕсли ВидСр = ВидСравнения.ВИерархии ИЛИ
						ВидСр = ВидСравнения.НеВИерархии ИЛИ 
						ВидСр = ВидСравнения.ВСпискеПоИерархии ИЛИ 
						ВидСр = ВидСравнения.НеВСпискеПоИерархии 	Тогда
		Префикс = " В ИЕРАРХИИ (&";		
		Префикс2 = ")";
	ИначеЕсли ВидСр = ВидСравнения.Больше Тогда
		Префикс = " > &"	;
	ИначеЕсли ВидСр = ВидСравнения.БольшеИлиРавно	Тогда
		Префикс = " >= &"	;
	ИначеЕсли ВидСр = ВидСравнения.Меньше Тогда
		Префикс = " < &"	;
	ИначеЕсли ВидСр = ВидСравнения.МеньшеИлиРавно	Тогда
		Префикс = " <= &"	;
	ИначеЕсли ВидСр = ВидСравнения.НеРавно Тогда
		Префикс = " <> &"	;
	ИначеЕсли ВидСр = ВидСравнения.Равно	Тогда
		Префикс = " = &"	;
	ИначеЕсли ВидСр = ВидСравнения.Содержит ИЛИ
						ВидСр = ВидСравнения.НеСодержит Тогда
		Префикс = " Подобно &"	;
	ИначеЕсли ВидСр = ВидСравнения.ИнтервалВключаяГраницы	Тогда
		Префикс = " Между &"	;
		Префикс1 = " и &";
	ИначеЕсли ВидСр = ВидСравнения.Интервал	Тогда
		Префикс = " > &"	;
		Префикс1 = " И < &";
	ИначеЕсли ВидСр = ВидСравнения.ИнтервалВключаяНачало	Тогда
		Префикс = " >= &"	;
		Префикс1 = " И < &";
	ИначеЕсли ВидСр = ВидСравнения.ИнтервалВключаяОкончание	Тогда
		Префикс = " > &"	;
		Префикс1 = " И <= &";
	КонецЕсли;

	Если ВидСр = ВидСравнения.НеВСписке ИЛИ
			 ВидСр = ВидСравнения.НеВИерархии ИЛИ
			 ВидСр = ВидСравнения.НеВСпискеПоИерархии ИЛИ
			 ВидСр = ВидСравнения.НеСодержит Тогда
		isГенераторОтчетов.Инк(Префикс0,"НЕ (");	
		isГенераторОтчетов.Инк(Префикс2,")");
	КонецЕсли;
КонецПроцедуры

// Создает строку отбора для запроса по строке отбора
//
// Параметры
//  СтрокаОтбора  - строка объекта "Отбор"
//
// Возвращаемое значение:
//   Строка   - строка для подстановки в функцию виртуальной таблицы запроса
//
Функция ПолучитьСтрокуОтбора(ИмяПараметра,ВидСр,ИмяПараметра1,ИмяПараметра2=Неопределено)
	Результат = ИмяПараметра;
	Префикс1="";
	Префикс2="";
	Префикс0="";
	Префикс="";
	ОпределитьПрефексыСтрокиОтбора(ВидСр,Префикс0,Префикс,Префикс1,Префикс2)	;
	
	Результат = Префикс0 + Результат + Префикс + ИмяПараметра1;
	Если ИмяПараметра2<>Неопределено Тогда
		isГенераторОтчетов.Инк(Результат,ИмяПараметра2+Префикс1);
	КонецЕсли;
	isГенераторОтчетов.Инк(Результат,Префикс2);
	Возврат Результат;
КонецФункции // ПолучитьСтрокуОтбора()

// Создает идентификатор параметра для исользования в определении параметров запроса
//
// Параметры
//  ИндексСтроки  		- Число - номер источника в таблице источников
//  ИндексПодСтроки  	- Число - номер строки ТЧ "Источники"
//
// Возвращаемое значение:
//   Строка   
//
Функция ПолучитьСуфиксПараметра(ИндексСтроки,ИндексПодстроки=Неопределено)
	Если ИндексПодстроки=Неопределено Тогда
		Возврат Формат(ИндексСтроки, "ЧЦ=4; ЧН=; ЧВН=; ЧГ=0");				
	Иначе
		Возврат Формат(ИндексСтроки, "ЧЦ=4; ЧН=; ЧВН=; ЧГ=0")+Формат(ИндексПодстроки, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=0");				
	КонецЕсли;
КонецФункции // 

Функция ПолучитьСтрокуОтборИзОтбора(Отбор, Запрос, СуфиксПараметра, ПостСуфикс)
	Результат = "";
	Сч = 0;
	Для каждого ТекОтбор Из Отбор Цикл
		Если ТекОтбор.Использование Тогда
			Если ТекОтбор.ВидСравнения=ВидСравнения.Интервал ИЛИ 
				ТекОтбор.ВидСравнения=ВидСравнения.ИнтервалВключаяГраницы ИЛИ 
				ТекОтбор.ВидСравнения=ВидСравнения.ИнтервалВключаяНачало ИЛИ 
				ТекОтбор.ВидСравнения=ВидСравнения.ИнтервалВключаяОкончание Тогда
				ИмяПараметра1="Параметр" + СуфиксПараметра+ПостСуфикс+СокрЛП(Сч);				
				ИмяПараметра2=ИмяПараметра1+СокрЛП(Сч)+"а";				
				Запрос.УстановитьПараметр(ИмяПараметра1,ТекОтбор.ЗначениеС);				
				Запрос.УстановитьПараметр(ИмяПараметра2,ТекОтбор.ЗначениеПо);				
			Иначе
				ИмяПараметра1="Параметр"+	СуфиксПараметра+ПостСуфикс+СокрЛП(Сч);				
				Запрос.УстановитьПараметр(ИмяПараметра1,ТекОтбор.Значение);				
				ИмяПараметра2=Неопределено;				
			КонецЕсли;
			isГенераторОтчетов.Инк(Сч);
			ПодстрокаОтбора=ПолучитьСтрокуОтбора(ТекОтбор.ПутьКДанным,ТекОтбор.ВидСравнения,ИмяПараметра1,ИмяПараметра2);						
			ДобавитьРеквизит(Результат,ПодстрокаОтбора," И ");
		КонецЕсли;		
	КонецЦикла;
	Возврат Результат;
КонецФункции // ()

Функция ПолучитьСтрокуОтбораПоИсточникуРегистраНакопления(Запрос,СтрокаИсточника,СуфиксПараметра)
	лПот = isГенераторОтчетов.СоздатьПостроительОтчетаДляРегистраНакопления(СтрокаИсточника.РегистрБухгалтерии, СтрокаИсточника.Источник.НастройкиПостроителяРегистраНакопления);
	Результат = ПолучитьСтрокуОтборИзОтбора(лПот.Отбор, Запрос, СуфиксПараметра, "");

	Если мОтборПоПодразделению И Настройка.ОтборПоПодразделению 
		И лПот.ДоступныеПоля.Найти("Подразделение")<>Неопределено Тогда
		ДобавитьРеквизит(Результат, мОтборПоПодразделениюСчет," И ");
	КонецЕсли;
	Возврат Результат;
КонецФункции // ()

Функция ПолучитьСтрокуДополнительногоОтбораПоИзмерениям(СтрокаИсточника, Запрос, Индекс)
	Результат = "";
	Отбор = ПолучитьДополнительныйОтборПоИзмерениям(СтрокаИсточника);
	Если Отбор <> Неопределено Тогда
		Результат = ПолучитьСтрокуОтборИзОтбора(Отбор, Запрос, Индекс,"а"); 
	КонецЕсли;
    Возврат Результат;
КонецФункции // ()

Функция ПолучитьЗначениеДополнительногоОтбораПоИзмерениям(СтрокаИсточника)
	Результат = "";
	Отбор = ПолучитьДополнительныйОтборПоИзмерениям(СтрокаИсточника);
	Если Отбор <> Неопределено Тогда
		Для каждого ТекОтбор Из Отбор Цикл
			Если ТекОтбор.Использование 
				И ТипЗнч(ТекОтбор.Значение) = Тип("СправочникСсылка.Организации") Тогда
				Возврат ТекОтбор;
			ИначеЕсли ТекОтбор.Использование 
				И ТипЗнч(ТекОтбор.Значение) = Тип("СписокЗначений")
				И ТекОтбор.Значение.Количество()>0
				И ТипЗнч(ТекОтбор.Значение[0].Значение) = Тип("СправочникСсылка.Организации") Тогда
				Возврат ТекОтбор;
			КонецЕсли;
		КонецЦикла;; 
	КонецЕсли;
    Возврат Результат;
КонецФункции // ()

Функция ПолучитьДополнительныйОтборПоИзмерениям(СтрокаИсточника)
	Если СтрокаИсточника.ПривязкаНомерСтроки = -1 Тогда
		лНастройка = СтрокаИсточника.Привязка.ОтборПоИзмерениям1;		
	ИначеЕсли СтрокаИсточника.ПривязкаНомерСтроки = -2 Тогда
		лНастройка = СтрокаИсточника.Привязка.ОтборПоИзмерениям2;		
	Иначе	
		лНастройка = СтрокаИсточника.Привязка.Источники[СтрокаИсточника.ПривязкаНомерСтроки-1].ОтборПоИзмерениям;
	КонецЕсли;	
	Если ТипЗнч(лНастройка.Получить()) = Тип("НастройкиПостроителяОтчета") Тогда
		Если СтрокаИсточника.Источник.Владелец.ТипРегистра = 0 Тогда
			лПот = isГенераторОтчетов.СоздатьПостроительОтчетаДляИзмерений(СтрокаИсточника.РегистрБухгалтерии,лНастройка);
		Иначе		
			лПот = isГенераторОтчетов.СоздатьПостроительОтчетаДляРегистраНакопления(СтрокаИсточника.РегистрБухгалтерии,лНастройка);
		КонецЕсли;
		Возврат лПот.Отбор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции // ()

Функция СоздатьПодзапросПодисточника(Запрос,СтрокаИсточника,ИмяИсточника,ПодСтрокаИсточника,СуфиксПараметра,Коэффициент,СтрокаРегистраБухгалтерии, РежимРасшифровки, СтруктураИзмерений)
	СтруктураРезультата = Новый Структура("ЗапросОсновной,ЗапросКонтрольный","","");
	СтрокаСпецсчета = ПолучитьСтрокуТаблицыСпецсчетов(ПодстрокаИсточника.Счет);
	СтрокаПересчетаВВалюту = ПолучитьСтрокуПересчетаВВалюту(ПодстрокаИсточника.Счет, СтрокаСпецсчета, ПодСтрокаИсточника.ТипИсточника);
	ИмяКоэффициента="Коэффициент"+СуфиксПараметра;
	ИмяСчета="Счет"+СуфиксПараметра;
	ОбщийК=ПодстрокаИсточника.Коэффициент*Коэффициент;
	Запрос.УстановитьПараметр(ИмяСчета,ПодстрокаИсточника.Счет);
	Запрос.УстановитьПараметр(ИмяКоэффициента,ОбщийК);
	Если мОтчетВВалюте И СтрокаПересчетаВВалюту = "" Тогда
		Результат = ПолучитьЗапросПоСпецсчету(СтрокаСпецсчета, Запрос, СтрокаИсточника, ИмяИсточника, ПодСтрокаИсточника, СуфиксПараметра, Коэффициент, СтрокаРегистраБухгалтерии, РежимРасшифровки, СтруктураИзмерений);
	Иначе	
		Результат 		= "";
		РезультатДоп 	= "";

		РежимДопотбораПоИзмерениям = Ложь;

		СтрокаОбщегоОтбора = " Организация В (&Организация) ";

		Если Настройка.ДополнительныйОтборПоИзмерениям Тогда
			ОтборПоОрг = ПолучитьЗначениеДополнительногоОтбораПоИзмерениям(СтрокаИсточника);
			Если ОтборПоОрг<>"" Тогда
				ЗначениеОтбора 	= ОтборПоОрг.Значение;
				ВидСравн 	= ОтборПоОрг.ВидСравнения;
				ИмяПараметраОрг = "Организация"+СуфиксПараметра;
				Если СтрокаИсточника.РежимИспользованияОтбораПоИзмерениям = 2 Тогда
					СписокОрг = ПолучитьПересечениеОтборов(ЗначениеОтбора, ВидСравн);	
					Если СписокОрг.Количество() = 0 Тогда
						Возврат СтруктураРезультата;
					КонецЕсли;
					СтрокаОбщегоОтбора = " Организация В (&"+ИмяПараметраОрг+") "; 
					Запрос.УстановитьПараметр(ИмяПараметраОрг, СписокОрг);
					РежимДопотбораПоИзмерениям = Истина;
				ИначеЕсли СтрокаИсточника.РежимИспользованияОтбораПоИзмерениям = 3 Тогда
					СписокОрг = ПолучитьИсключениеОтборов(ЗначениеОтбора, ВидСравн);	
					Если СписокОрг.Количество() = 0 Тогда
						Возврат СтруктураРезультата;
					КонецЕсли;
					СтрокаОбщегоОтбора = " Организация В (&"+ИмяПараметраОрг+") "; 
					Запрос.УстановитьПараметр(ИмяПараметраОрг, СписокОрг);
					РежимДопотбораПоИзмерениям = Истина;
				Иначе
				    СтрокаДопотбора = ПолучитьСтрокуДополнительногоОтбораПоИзмерениям(СтрокаИсточника, Запрос, СуфиксПараметра);
					РежимДопотбораПоИзмерениям = СтрокаИсточника.РежимИспользованияОтбораПоИзмерениям = 1 
												ИЛИ НЕ ПустаяСтрока(СтрокаДопотбора);
					Если НЕ ПустаяСтрока(СтрокаДопотбора) Тогда
						Если СтрокаИсточника.РежимИспользованияОтбораПоИзмерениям = 0 Тогда
							ДобавитьРеквизит(СтрокаОбщегоОтбора, СтрокаДопотбора, " И ");
						Иначе	
							СтрокаОбщегоОтбора = СтрокаДопотбора;
						КонецЕсли;							
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЭтоОстаток = ЭтоИсточникОстатка(СтрокаИсточника.Источник.Владелец.ТипРегистра,ПодСтрокаИсточника.ТипИсточника);
		ЭтоОстатокСтр = ?(ЭтоОстаток,"Истина","Ложь");

		Регистр=Настройка.ВидИсточника.РегистрБухгалтерии;

		СтруктураОтборовПоСубконто = ПолучитьСтрокуОтбораПоИсточнику(СтрокаРегистраБухгалтерии,ПодСтрокаИсточника,Запрос,СуфиксПараметра,ЭтоОстаток);
		СчетГруппа=СчетЯвляетсяГруппой(ПодстрокаИсточника.Счет);

		ОтборПоСубконто = СтруктураОтборовПоСубконто.ОтборПоСчету;
		Если РежимРасшифровки И СтруктураИзмерений <> Неопределено Тогда
			ОтборПоСубконто = ОтборПоСубконто + " И " + ПолучитьСтрокуОтбораПоИзмерениямДляРасшифроки(СтрокаИсточника, СтруктураИзмерений);
		КонецЕсли;
		ДополнитьУсловиеОтбораПоПараметрам(ОтборПоСубконто, СтрокаИсточника.ВидОтбораПоПодразделению, "Счет");
		
		Если РежимРасшифровки Тогда
			ПериодСтр = "";
		Иначе
			ПериодСтр=ПериодДляЗапроса(Периодичность);
		КонецЕсли;

		Если ЭтоОстаток Тогда
			Если ПодСтрокаИсточника.ТипИсточника=0 Тогда
				ПодстрокаОстатка="КонечныйОстаток";
			ИначеЕсли ПодСтрокаИсточника.ТипИсточника=3 Тогда
				ПодстрокаОстатка="НачальныйОстаток";
			ИначеЕсли ПодСтрокаИсточника.ТипИсточника=4 Тогда
				ПодстрокаОстатка="НачальныйОстатокКт";
			ИначеЕсли ПодСтрокаИсточника.ТипИсточника=5 Тогда
				ПодстрокаОстатка="НачальныйОстатокДт";
			ИначеЕсли ПодСтрокаИсточника.ТипИсточника=6 Тогда
				ПодстрокаОстатка="КонечныйОстатокКт";
			ИначеЕсли ПодСтрокаИсточника.ТипИсточника=7 Тогда
				ПодстрокаОстатка="КонечныйОстатокДт";
			КонецЕсли;
			
			Ресурс=ПодстрокаИсточника.Ресурс+ПодстрокаОстатка;
			Если мРежимПакетногоЗапроса Тогда
				ИмяТаблицыПакета = ПолучитьИмяТаблицыПакетаДляСчета(ЭтоОстаток, ПодстрокаИсточника.Счет, Неопределено, Ложь, 
							ОтборПоСубконто,"",Ресурс,СтрокаИсточника); 
				СтрокаИз = " " +  ИмяТаблицыПакета + " ГДЕ ИСТИНА "+?(ЗначениеЗаполнено(ОтборПоСубконто), ОтборПоСубконто,"");
			ИначеЕсли РежимДопотбораПоИзмерениям Тогда
				СтрокаИз = "РегистрБухгалтерии."+СтрокаИсточника.Источник.Владелец.РегистрБухгалтерии+".ОстаткиИОбороты(&ДатаНачала, &ДатаКонца,"+ПериодСтр+", ,Счет В ИЕРАРХИИ (&"
							+ИмяСчета+"),,  " + СтрокаОбщегоОтбора + ОтборПоСубконто+" )";
			Иначе
				СтрИТП = ПолучитьИмяТаблицыПакета(ЭтоОстаток, ПодстрокаИсточника.Счет, "", СтруктураОтборовПоСубконто); 
				ИмяТаблицыПакета 	= СтрИТП.ИмяТаблицыПакета;			
				ИменаРесурсов 		= СтрИТП.ИменаРесурсов;
				ИменаСчетов         = СтрИТП.ИменаСчетов;
				ИменаСубконто       = СтрИТП.ИменаСубконто;
				
				ДобавитьЗначениеВТаблицуПараметровРегистраБухгалтерии(СтрокаРегистраБухгалтерии, ИменаРесурсов, Ресурс);
				ДобавитьЗначениеВТаблицуПараметровРегистраБухгалтерии(СтрокаРегистраБухгалтерии, ИменаСчетов, ПодстрокаИсточника.Счет);
				СтрокаИз = " " +  ИмяТаблицыПакета + " ГДЕ Счет в иерархии (&"+ИмяСчета+")"+?(ЗначениеЗаполнено(ОтборПоСубконто), ОтборПоСубконто,"");
			КонецЕсли;
			Если СтрокаИсточника.СпецИтоги Тогда
				СтрокаИзСпец = 				
				"РегистрБухгалтерии."+СтрокаИсточника.Источник.Владелец.РегистрБухгалтерии+".ОстаткиИОбороты(&ДатаНачала, &ДатаКонца,, ,Счет В ИЕРАРХИИ (&"
							+ИмяСчета+"),,  " + СтрокаОбщегоОтбора + ОтборПоСубконто+" )";
			КонецЕсли;
		Иначе	
			Ресурс=ПодстрокаИсточника.Ресурс+?(ПодСтрокаИсточника.ТипИсточника=1,"ОборотДт","ОборотКт");
			КорСчет = ?(ПодСтрокаИсточника.КорСчетВСписке,ПодСтрокаИсточника.КорСчетСписок.Получить(),ПодСтрокаИсточника.КорСчет);
			
			Если ЗначениеЗаполнено(КорСчет) Тогда
				ОтборПоКорСубконто = СтруктураОтборовПоСубконто.ОтборПоКорСчету;
				ДополнитьУсловиеОтбораПоПараметрам(ОтборПоКорСубконто, СтрокаИсточника.ВидОтбораПоПодразделению, "Счет");
				ИмяКорСчета = "КорСчет"+СуфиксПараметра;
//++Куприянова Е.В. 21.07.2013 ошибка 				
//				Запрос.УстановитьПараметр(ИмяКорСчета, ПодстрокаИсточника.КорСчет);
				Запрос.УстановитьПараметр(ИмяКорСчета, КорСчет);
//--Куприянова Е.В. 21.07.2013 ошибка 				

				УсловиеКорСчета = "КорСчет в иерархии (&"+ИмяКорСчета+") " ;
				Если ПодСтрокаИсточника.КорСчетНеРавно Тогда
					УсловиеКорСчета = "(НЕ " + УсловиеКорСчета+") ";
				КонецЕсли;
				ОтборПоКорСчетуСубконто = УсловиеКорСчета + ОтборПоКорСубконто;
			Иначе
				ОтборПоКорСубконто 		= "";
				ОтборПоКорСчетуСубконто = "";
				УсловиеКорСчета 		= "";
			КонецЕсли;
			
			
			СтрокаДопотбора = "";
			Если мРежимПакетногоЗапроса Тогда
				ИмяТаблицыПакета = ПолучитьИмяТаблицыПакетаДляСчета(ЭтоОстаток, ПодстрокаИсточника.Счет, КорСчет, ПодСтрокаИсточника.КорСчетНеРавно, 
							ОтборПоСубконто, ОтборПоКорСубконто, Ресурс, СтрокаИсточника); 
				СтрокаИз = " " + ИмяТаблицыПакета + " ГДЕ ИСТИНА " + ?(ЗначениеЗаполнено(ОтборПоКорСубконто),ОтборПоКорСубконто,"") 
						+ ?(ЗначениеЗаполнено(ОтборПоСубконто),ОтборПоСубконто,"");
			ИначеЕсли РежимДопотбораПоИзмерениям Тогда // тута выполняется прямой запрос по регистру без использования запросос пакета
                Если ЗначениеЗаполнено(ОтборПоСубконто) Тогда
					ДобавитьРеквизит(СтрокаОбщегоОтбора, ОтборПоСубконто, "");
				КонецЕсли;
                Если ЗначениеЗаполнено(ОтборПоКорСубконто) Тогда
					ДобавитьРеквизит(СтрокаОбщегоОтбора, ОтборПоКорСубконто, "");
				КонецЕсли;

				СтрокаИз = "РегистрБухгалтерии."+СтрокаИсточника.Источник.Владелец.РегистрБухгалтерии+".Обороты(&ДатаНачала, &ДатаКонца,"+ПериодСтр+",Счет В ИЕРАРХИИ (&"
							+ИмяСчета+"),,  " + СтрокаОбщегоОтбора + "," + УсловиеКорСчета + " )";
			Иначе	
				СтрИТП = ПолучитьИмяТаблицыПакета(ЭтоОстаток, ПодстрокаИсточника.Счет, КорСчет, СтруктураОтборовПоСубконто); 
				ИмяТаблицыПакета 	= СтрИТП.ИмяТаблицыПакета;			
				ИменаРесурсов 		= СтрИТП.ИменаРесурсов;
				ИменаСчетов         = СтрИТП.ИменаСчетов;
				ИменаСубконто       = СтрИТП.ИменаСубконто;
				ДобавитьЗначениеВТаблицуПараметровРегистраБухгалтерии(СтрокаРегистраБухгалтерии, ИменаРесурсов, Ресурс);
				ДобавитьЗначениеВТаблицуПараметровРегистраБухгалтерии(СтрокаРегистраБухгалтерии, ИменаСчетов, ПодстрокаИсточника.Счет);
				УсловиеСчета = "Счет В ИЕРАРХИИ (&"+ИмяСчета+") " + ОтборПоСубконто;
			//Жилицкий 04.01.2013 Оптимизация ГААП
				Если Настройка.Код = 12 И ИмяТаблицыПакета = "ТаблицаОборотов" Тогда
					
					Ресурс=ПодстрокаИсточника.Ресурс+"Оборот";
					ЭтоДт = ?(ПодСтрокаИсточника.ТипИсточника=1,Истина,Ложь);
					
					Если ЭтоДт Тогда
						ОтборПоСчДт="СчетДт В ИЕРАРХИИ (&"+ИмяСчета+") ";
						Если ЗначениеЗаполнено(КорСчет) Тогда
							ОтборПоСчКт = "СчетКт в иерархии (&"+ИмяКорСчета+") " ;
							Если ПодСтрокаИсточника.КорСчетНеРавно Тогда
								ОтборПоСчКт = "(НЕ " + ОтборПоСчКт+") ";
							КонецЕсли;
						КонецЕсли;
						
						ОтборПоСубДт=" Истина "+СтрЗаменить(ОтборПоСубконто,"Субконто","СубконтоДт");
						ОтборПоСубКт=" Истина "+СтрЗаменить(СтруктураОтборовПоСубконто.ОтборПоКорСчету,"КорСубконто","СубконтоКт");
					Иначе
						ОтборПоСчКт="СчетКт В ИЕРАРХИИ (&"+ИмяСчета+") ";
						Если ЗначениеЗаполнено(КорСчет) Тогда
							ОтборПоСчДт = "СчетДт в иерархии (&"+ИмяКорСчета+") " ;
							Если ПодСтрокаИсточника.КорСчетНеРавно Тогда
								ОтборПоСчДт = "(НЕ " + ОтборПоСчДт+") ";
							КонецЕсли;
						КонецЕсли;
						ОтборПоСубКт=" Истина "+СтрЗаменить(ОтборПоСубконто,"Субконто","СубконтоКт");
						ОтборПоСубДт=" Истина "+СтрЗаменить(СтруктураОтборовПоСубконто.ОтборПоКорСчету,"КорСубконто","СубконтоДт");						
					КонецЕсли;
					СтрокаИз = " РегистрБухгалтерии."+СтрокаИсточника.Источник.Владелец.РегистрБухгалтерии+".ОборотыДтКт(&ДатаНачала, &ДатаКонца, Период, "+ОтборПоСчДт+", , "+ОтборПоСчКт+", , Организация В (&Организация) И "+ОтборПоСубДт+" И "+ОтборПоСубКт+") КАК МеждународныйОборотыДтКт";
				Иначе
					СтрокаИз = " " + ИмяТаблицыПакета + " ГДЕ " + УсловиеСчета+?(ЗначениеЗаполнено(ОтборПоКорСчетуСубконто)," И "+ОтборПоКорСчетуСубконто,"");
				КонецЕсли;
			//Жилицкий 04.01.2013 Оптимизация ГААП
				Если ЗначениеЗаполнено(КорСчет) И ИмяТаблицыПакета = "ТаблицаОборотов" И СтрокаРегистраБухгалтерии.ЕстьКорСчетОборотов <> Истина Тогда
					СтрокаРегистраБухгалтерии.ЕстьКорСчетОборотов = Истина;
				КонецЕсли;
			КонецЕсли;

			Если СтрокаИсточника.СпецИтоги Тогда
				СтрокаИзСпец = СтрокаИз;				
			КонецЕсли;
			
		КонецЕсли;   
		Если Настройка.ВидНастройки = 2 Тогда
			Если СтрокаИсточника.ДинамическаяСекция = 1 Тогда
				ИСГ = ПолучитьИмяГруппировкиДинамическойСтроки(1, СтрокаИсточника);
				ИмяСубконтоГруппировки = ИСГ+" КАК Измерение1,";
				ДобавитьЗначениеВТаблицуПараметровРегистраБухгалтерии(СтрокаРегистраБухгалтерии, ИменаСубконто,ИСГ);
			Иначе
				ИмяСубконтоГруппировки = "NULL КАК Измерение1,";
			КонецЕсли;
		ИначеЕсли Настройка.ДинамическиеСтроки И НЕ РежимРасшифровки Тогда
			ИмяСубконтоГруппировки = ПолучитьСтрокуЗапросаДинамическихСтрок(СтрокаИсточника,СтрокаРегистраБухгалтерии, ИменаСубконто);
		Иначе
			ИмяСубконтоГруппировки = "";
		КонецЕсли;
		
		
		Результат=
		" ВЫБРАТЬ 
		|	"+Формат(СтрокаИсточника.Ид, "ЧГ=0")+" КАК Ид,
		|	"""+СтрокаИсточника.ПривязкаКод+""" КАК ПривязкаКод,
		|	"+Формат(СтрокаИсточника.ПривязкаНомерСтроки, "ЧГ=0")+" КАК ПривязкаНомерСтроки,
		| 	"+ИмяСубконтоГруппировки+" 
		| 	"+?(Периодичность<>7 И НЕ РежимРасшифровки,"Период,","")+" 
		| 	"+?(РежимРасшифровки,Формат(ПодстрокаИсточника.НомерСтроки, "ЧГ=0")+" КАК НомерСтроки,","")+" 
		| 	&"+ИмяИсточника+" КАК Источник, 
		|		"+ЭтоОстатокСтр+" КАК ЭтоОстаток, 
		|		ЕстьNull("+Ресурс+",0)*&"+ИмяКоэффициента+СтрокаПересчетаВВалюту+" КАК Сумма
		|	ИЗ
		|		"+СтрокаИз;
		
		Если СтрокаИсточника.Специтоги Тогда
			СтруктураРезультата.Вставить("РезультатСпец",
			" ВЫБРАТЬ 
			| 	&"+ИмяИсточника+" КАК Источник, 
			|		ЕстьNull("+Ресурс+",0)*&"+ИмяКоэффициента+СтрокаПересчетаВВалюту+" КАК Сумма
			|	ИЗ
			|		"+СтрокаИзСпец);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураОтборовПоСубконто.ИмяСубконтоКонтрольный) 
					И Настройка.ВидНастройки = 0 
					И НЕ РежимРасшифровки 
					И Периодичность<>7 
					И ВыводитьКонтрольныйОтчет Тогда
			РезультатДоп =
			" ВЫБРАТЬ 
			| 	&"+ИмяСчета+" КАК Счет,
			| 	&"+ИмяИсточника+" КАК Источник, 
			| 	"+СтруктураОтборовПоСубконто.ИмяСубконтоКонтрольный+" КАК Измерение, 
			| 	"+?(Периодичность<>7,"Период,","")+" 
			|	0 КАК СуммаКонтрольная, 
			|	ЕстьNull("+Ресурс+",0)*&"+ИмяКоэффициента+" КАК Сумма
			|	ИЗ
			|		"+СтрокаИз;
			

		КонецЕсли;
	КонецЕсли;
	
	СтруктураРезультата.ЗапросОсновной = Результат;
	СтруктураРезультата.ЗапросКонтрольный = РезультатДоп;
	Возврат СтруктураРезультата;
КонецФункции // 

Функция СоздатьПодзапросПоРегиструНакопления(Запрос, СтрокаИсточника, Индекс, ДляРасшифроки, СтруктураИзмерений)
	Регистр = СтрокаИсточника.Источник.Владелец.РегистрБухгалтерии;
	ОбщийОтбор = "";
	Если (НЕ Настройка.ДополнительныйОтборПоИзмерениям 
		ИЛИ НЕ СтрокаИсточника.РежимИспользованияОтбораПоИзмерениям <> 2 )
		И isГенераторОтчетов.ЕстьИзмерениеОрганизация(Регистр) Тогда
		ОбщийОтбор = "Организация В (&Организация)";
	КонецЕсли;
	
	Если Настройка.ДополнительныйОтборПоИзмерениям Тогда
		СтрокаДопОтбора = ПолучитьСтрокуДополнительногоОтбораПоИзмерениям(СтрокаИсточника, Запрос, Индекс);
		Если НЕ ПустаяСтрока(СтрокаДопОтбора) Тогда
	    	ДобавитьРеквизит(ОбщийОтбор, СтрокаДопОтбора, " И "); 
		КонецЕсли;
	КонецЕсли;
	
	ОтборПоИзмерениям=ПолучитьСтрокуОтбораПоИсточникуРегистраНакопления(Запрос,СтрокаИсточника,Индекс);
	ДобавитьРеквизит(ОбщийОтбор,ОтборПоИзмерениям," И "); 	
	ИмяИсточника="Источник"+ПолучитьСуфиксПараметра(Индекс);
	
    ЭтоОборотныйРегистр = isГенераторОтчетов.ЭтоРегистрНакопленияОборотный(Регистр);
	ФункцияРегистра = СтрокаИсточника.Источник.ФункцияРегистра;

	Префикс="";
	ЭтоОстаток = Ложь;
	Если ФункцияРегистра=0 Тогда
		ПодстрокаРесурса="Оборот";
	ИначеЕсли ФункцияРегистра = 1 Тогда
		ПодстрокаРесурса="НачальныйОстаток";
		ЭтоОстаток = Истина;
	ИначеЕсли ФункцияРегистра = 4 Тогда
		ПодстрокаРесурса="КонечныйОстаток";
		ЭтоОстаток = Истина;
	ИначеЕсли ФункцияРегистра = 2 Тогда
		ПодстрокаРесурса="Приход";
	ИначеЕсли ФункцияРегистра = 3 Тогда
		ПодстрокаРесурса="Расход";
	КонецЕсли;
	
	Ресурс = "";
	Сч = 1;
	Для каждого ТекРесурс Из СтрокаИсточника.Источник.Ресурсы Цикл
		ИмяРесурса = ТекРесурс.Ресурс+ПодстрокаРесурса;	
		Если мОтчетВВалюте Тогда
			ИмяРесурса = ИмяРесурса + ПолучитьСтрокуПересчетаВВалютуПоФиксированномуКурса(ФункцияРегистра);
		КонецЕсли;
		ИмяКоэффициента = "К" + Формат(Индекс, "ЧЦ=4; ЧВН=; ЧГ=")+Формат(Сч, "ЧЦ=2; ЧВН=");
	    ДобавитьРеквизит(Ресурс,ИмяРесурса+"*&"+ИмяКоэффициента," + ");
		Запрос.УстановитьПараметр(ИмяКоэффициента,ТекРесурс.Коэффициент);
	КонецЦикла;
	Ресурс = Ресурс + " КАК Сумма";
	Если ДляРасшифроки Тогда
		ПериодСтр = "";
	Иначе
		ПериодСтр=ПериодДляЗапроса(Периодичность);
	КонецЕсли;
	
	Если Настройка.ДинамическиеСтроки Тогда
		Если НЕ ДляРасшифроки Тогда
			СтрокаИзмерений = ПолучитьСтрокуЗапросаДинамическихСтрокРегистраНакопления(СтрокаИсточника);
		ИначеЕсли СтруктураИзмерений <> Неопределено Тогда
			СтрокаИзмерений = "";
			ДобавитьРеквизит(ОбщийОтбор, ПолучитьСтрокуОтбораПоИзмерениямДляРасшифроки(СтрокаИсточника, СтруктураИзмерений), " И ");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоОборотныйРегистр Тогда
		СтрокаИз=" ИЗ РегистрНакопления."+Регистр+".Обороты(&ДатаНачала, &ДатаКонца, "+ПериодСтр+", "+ОбщийОтбор+") КАК Регистр";
	Иначе	
		СтрокаИз=" ИЗ РегистрНакопления."+Регистр+".ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, "+ПериодСтр+", ,"+ОбщийОтбор+") КАК Регистр";
	КонецЕсли;
	
    ВОзврат "Выбрать 
			|"+Формат(СтрокаИсточника.Ид, "ЧГ=0")+" КАК Ид,
			|""" + СтрокаИсточника.ПривязкаКод+ """ КАК ПривязкаКод," + мПС
			+?(ДляРасшифроки,"1 КАК НомерСтроки,"+ мПС ,"")+ 
			+ СтрокаИсточника.ПривязкаНомерСтроки+ " КАК ПривязкаНомерСтроки," + мПС
			+ "&"+ИмяИсточника+ " КАК Источник," + мПС
			+ ?(Настройка.ДинамическиеСтроки И НЕ ДляРасшифроки, СтрокаИзмерений + мПС,"" ) 
			+ ?(НЕ ДляРасшифроки,?(Периодичность<>7,"НачалоПериода(Период,"+ПериодСтр+") КАК Период,","") + мПС,"")
			+ ?(ЭтоОстаток,"ИСТИНА КАК ЭтоОстаток,","ЛОЖЬ КАК ЭтоОстаток,") + мПС
			+ Ресурс + мПС 
			+ СтрокаИЗ;
КонецФункции 

// создает текст запроса и определяет параметры запроса по источнику
//
// Параметры
//  СтрокаИсточника - Строка из таблицы значения источников
//  Индекс  				- Число - порядковый номер источника, служит для нумерации параметров
//  Запрос  				- Запрос - объект типа Запрос, нужен для определения параметра подзапроса
//
// Возвращаемое значение:
//   Строка   - строка подзапроса
//
Функция СоздатьПодзапросВЗапросеИсточников(Запрос,СтрокаИсточника,ИмяИсточника,Индекс,СтрокаРегистраБухгалтерии, РежимРасшифровки, СтруктураИзмерений)
	Запрос.УстановитьПараметр(ИмяИсточника,СтрокаИсточника.Источник);
	Сч=1;
	СтруктураПодрезультата=Новый Структура("ЗапросОсновной,ЗапросКонтрольный,ЗапросСпецИтогов","","","");
	РИОИ = СтрокаИсточника.РежимИспользованияОтбораПоИзмерениям;
	Если СтрокаИсточника.СпецИтоги Тогда
		СтруктураПодрезультата.Вставить("ЗапросСпецИтогов","");
	КонецЕсли;
	Если СтрокаРегистраБухгалтерии.ТипРегистра = 1 Тогда
		
		СтруктураПодрезультата.ЗапросОсновной = СоздатьПодзапросПоРегиструНакопления(Запрос,СтрокаИсточника, Индекс, РежимРасшифровки, СтруктураИзмерений);	
	Иначе
		Для каждого ТекСтр Из СтрокаИсточника.Источник.Источники Цикл       
			ТекстЗапросаСтруктура=СоздатьПодзапросПодисточника(Запрос,СтрокаИсточника,ИмяИсточника,ТекСтр,ПолучитьСуфиксПараметра(Индекс+1,Сч),1,СтрокаРегистраБухгалтерии, РежимРасшифровки, СтруктураИзмерений);
			Если НЕ ПустаяСтрока(ТекстЗапросаСтруктура.ЗапросОсновной) Тогда
				ДобавитьРеквизит(СтруктураПодрезультата.ЗапросОсновной,ТекстЗапросаСтруктура.ЗапросОсновной,мСтрокаОбъединения);
			КонецЕсли;
			Если НЕ ПустаяСтрока(ТекстЗапросаСтруктура.ЗапросКонтрольный) Тогда
				ДобавитьРеквизит(СтруктураПодрезультата.ЗапросКонтрольный,ТекстЗапросаСтруктура.ЗапросКонтрольный,мСтрокаОбъединения);
			КонецЕсли;
			Если СтрокаИсточника.СпецИтоги Тогда
				ДобавитьРеквизит(СтруктураПодрезультата.ЗапросСпецИтогов,ТекстЗапросаСтруктура.РезультатСпец,мСтрокаОбъединения);
			КонецЕсли;
			isГенераторОтчетов.Инк(Сч);
		КонецЦикла;
	КонецЕсли;
	Возврат СтруктураПодрезультата;
КонецФункции // СоздатьПодзапросВЗапросеИсточников(СтрокаИсточника)

Функция ПолучитьТекстЗапросаПакета(СтрокаРегистраБухгалтерии, ИмяТаблицы)
	ПериодСтр=ПериодДляЗапроса(Периодичность);
	РегистрБухгалтерии = СтрокаРегистраБухгалтерии.РегистрБухгалтерии;
	
	Если ИмяТаблицы = "ТаблицаОстатков" Тогда
		Ресурсы 	= СтрокаРегистраБухгалтерии.РесурсыОстатков;	
		Счета 		= "СчетаОстатков"; 
		ЭтоОстаток 	= Истина;
		Субконто 	= СтрокаРегистраБухгалтерии.СубконтоОстатков;
	ИначеЕсли ИмяТаблицы = "ТаблицаОстатковБА" Тогда
		Ресурсы 	= СтрокаРегистраБухгалтерии.РесурсыОстатковБА;	
		Счета 		= "СчетаОстатковБА"; 
		ЭтоОстаток = Истина;
		Субконто 	= СтрокаРегистраБухгалтерии.СубконтоОстатковБА;
	ИначеЕсли ИмяТаблицы = "ТаблицаОборотов" Тогда
		Ресурсы 	= СтрокаРегистраБухгалтерии.РесурсыОборотов;	
		Счета 		= "СчетаОборотов"; 
		ЭтоОстаток = Ложь;
		Субконто 	= СтрокаРегистраБухгалтерии.СубконтоОборотов;
	ИначеЕсли ИмяТаблицы = "ТаблицаОборотовКор" Тогда
		Ресурсы 	= СтрокаРегистраБухгалтерии.РесурсыОборотовКор;	
		Счета 		= "СчетаОборотовКор"; 
		ЭтоОстаток = Ложь;
		Субконто 	= СтрокаРегистраБухгалтерии.СубконтоОборотовКор;
	ИначеЕсли ИмяТаблицы = "ТаблицаОборотовБА" Тогда
		Ресурсы 	= СтрокаРегистраБухгалтерии.РесурсыОборотовБА;	
		Счета 		= "СчетаОборотовБА"; 
		ЭтоОстаток = Ложь;
		Субконто 	= СтрокаРегистраБухгалтерии.СубконтоОборотовБА;
	КонецЕсли;
	
	СтрокаГруппировки = "Счет, Организация";
	Рез = 
	"ВЫБРАТЬ 
	|Счет,
	|Организация";
	Если Периодичность<>7 Тогда
		ДобавитьРеквизит(Рез,"Период",","+мПС);
		ДобавитьРеквизит(СтрокаГруппировки,"Период",", ");
	КонецЕсли;
	Если Настройка.ОтборПоПодразделению И мОтборПоПодразделению Тогда
		ДобавитьРеквизит(Рез,"Подразделение",","+мПС);
		ДобавитьРеквизит(СтрокаГруппировки,"Подразделение",", ");
	КонецЕсли;

	
	Если ЭтоОстаток Тогда
		ТаблицаРегистра = РегистрБухгалтерии+"ОстаткиИОбороты";
		
		Для каждого ТекСтр Из Метаданные.РегистрыБухгалтерии[РегистрБухгалтерии].Ресурсы Цикл
			Имя = ВРег(ТекСтр.Имя+"НачальныйОстаток");
			Если Ресурсы.Найти(Имя)<>Неопределено Тогда
				ДобавитьРеквизит(Рез, "Сумма(" + Имя +") КАК "+Имя,","+мПС);
			КонецЕсли;
			Имя = ВРег(ТекСтр.Имя+"НачальныйОстатокДт");
			Если Ресурсы.Найти(Имя)<>Неопределено Тогда
				ДобавитьРеквизит(Рез, "Сумма(" + Имя +") КАК "+Имя,","+мПС);
			КонецЕсли;
			Имя = ВРег(ТекСтр.Имя+"КонечныйОстаток");
			Если Ресурсы.Найти(Имя)<>Неопределено Тогда
				ДобавитьРеквизит(Рез, "Сумма(" + Имя +") КАК "+Имя,","+мПС);
			КонецЕсли;
			Имя = ВРег(ТекСтр.Имя+"КонечныйОстатокДт");
			Если Ресурсы.Найти(Имя)<>Неопределено Тогда
				ДобавитьРеквизит(Рез, "Сумма(" + Имя +") КАК "+Имя,","+мПС);
			КонецЕсли;
			Имя = ВРег(ТекСтр.Имя+"НачальныйОстатокКт");
			Если Ресурсы.Найти(Имя)<>Неопределено Тогда
				ДобавитьРеквизит(Рез, "Сумма(" + Имя +") КАК "+Имя,","+мПС);
			КонецЕсли;
			Имя = ВРег(ТекСтр.Имя+"КонечныйОстатокКт");
			Если Ресурсы.Найти(Имя)<>Неопределено Тогда
				ДобавитьРеквизит(Рез, "Сумма(" + Имя +") КАК "+Имя,","+мПС);
			КонецЕсли;
		КонецЦикла;
		
		Если Субконто <> Неопределено И Субконто.Количество() > 0 Тогда
			Для каждого ТекСуб Из Субконто Цикл
				ДобавитьРеквизит(Рез, ТекСуб,","+мПС);
				ДобавитьРеквизит(СтрокаГруппировки, ТекСуб, ", ");
			КонецЦикла;
		КонецЕсли;
		
		ДобавитьРеквизит(Рез, "ПОМЕСТИТЬ " + ИмяТаблицы + "
		|ИЗ
		|	РегистрБухгалтерии."+РегистрБухгалтерии+".ОстаткиИОбороты(&ДатаНачала, &ДатаКонца,"+ПериодСтр+", ,Счет В ИЕРАРХИИ (&" + Счета + "), ,  Организация В (&Организация) И Подразделение В (&Подразделение) ) КАК ТаблицаРегистра
		| СГРУППИРОВАТЬ ПО " + СтрокаГруппировки + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////",мПС);
		
		//++Жилицкий Оптимизация, перенес отбор из второстепенных таблиц в основную
		Если НЕ(Настройка.ОтборПоПодразделению И мОтборПоПодразделению) Тогда
			Рез = СтрЗаменить(Рез,"И Подразделение В (&Подразделение)","");
		КонецЕсли;
		//--Жилицкий Оптимизация, перенес отбор из второстепенных таблиц в основную
		
	Иначе	
		Если Настройка.ОтборПоПодразделению И мОтборПоПодразделению Тогда
			ДобавитьРеквизит(Рез,"ПодразделениеКор",","+мПС);
			ДобавитьРеквизит(СтрокаГруппировки, "ПодразделениеКор", ", ");
		КонецЕсли;
		ТаблицаРегистра = РегистрБухгалтерии+"Обороты";
		Для каждого ТекСтр Из Метаданные.РегистрыБухгалтерии[РегистрБухгалтерии].Ресурсы Цикл
			Имя = ВРЕГ(ТекСтр.Имя+"ОборотДт");
			Если Ресурсы.Найти(Имя)<>Неопределено Тогда
				ДобавитьРеквизит(Рез, "Сумма(" + Имя +") КАК "+Имя,","+мПС);
			КонецЕсли;
			Имя = ВРЕГ(ТекСтр.Имя+"ОборотКт");
			Если Ресурсы.Найти(Имя)<>Неопределено Тогда
				ДобавитьРеквизит(Рез, "Сумма(" + Имя +") КАК "+Имя,","+мПС);
			КонецЕсли;
		КонецЦикла;
		
		Если Субконто <> Неопределено И Субконто.Количество() > 0 Тогда
			Для каждого ТекСуб Из Субконто Цикл
				ДобавитьРеквизит(Рез, ТекСуб,","+мПС);
				ДобавитьРеквизит(СтрокаГруппировки, ТекСуб, ", ");
			КонецЦикла;
		КонецЕсли;
		
		Если ИмяТаблицы = "ТаблицаОборотов" И СтрокаРегистраБухгалтерии.ЕстьКорСчетОборотов = Истина 
			ИЛИ ИмяТаблицы = "ТаблицаОборотовКор" Тогда
			ДобавитьРеквизит(Рез, "КорСчет",","+мПС);
			ДобавитьРеквизит(СтрокаГруппировки, "КорСчет", ", ");
		КонецЕсли;
		ДобавитьРеквизит(Рез, "ПОМЕСТИТЬ " + ИмяТаблицы + "
		|ИЗ
		|	РегистрБухгалтерии."+РегистрБухгалтерии+".Обороты(&ДатаНачала, &ДатаКонца,"+ПериодСтр+", Счет В ИЕРАРХИИ (&" + Счета + "), , Организация В (&Организация) И Подразделение В (&Подразделение), , ) КАК ТаблицаРегистра
		| СГРУППИРОВАТЬ ПО " + СтрокаГруппировки + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////",мПС);
		
		//++Жилицкий Оптимизация, перенес отбор из второстепенных таблиц в основную
		Если НЕ(Настройка.ОтборПоПодразделению И мОтборПоПодразделению) Тогда
			Рез = СтрЗаменить(Рез,"И Подразделение В (&Подразделение)","");
		КонецЕсли;
		//--Жилицкий Оптимизация, перенес отбор из второстепенных таблиц в основную
		
	КонецЕсли;
Возврат Рез;
КонецФункции // ()

Функция ПолучитьТекстКонтрольногоЗапросДляПакетногоРежима(СтрокаРегистраБухгалтерии, Запрос)
	Если мТаблицаКонтрольныхСчетов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	ПериодСтр=ПериодДляЗапроса(Периодичность);
	РегистрБухгалтерии = СтрокаРегистраБухгалтерии.РегистрБухгалтерии;
	
	СтрокаГруппировки = "Счет, Организация";
	Рез = 
	"ВЫБРАТЬ 
	|Счет,
	|Организация";
	Если Периодичность<>7 Тогда
		ДобавитьРеквизит(Рез,"Период",","+мПС);
		ДобавитьРеквизит(СтрокаГруппировки,"Период",", ");
	КонецЕсли;
	
	Если Настройка.ОтборПоПодразделению И мОтборПоПодразделению Тогда
		ДобавитьРеквизит(Рез,"Подразделение",","+мПС);
		ДобавитьРеквизит(СтрокаГруппировки,"Подразделение",", ");
		ДобавитьРеквизит(Рез,"ПодразделениеКор",","+мПС);
		ДобавитьРеквизит(СтрокаГруппировки, "ПодразделениеКор", ", ");
	КонецЕсли;
	
	ТаблицаРегистра = РегистрБухгалтерии+"Обороты";
	
	ПромТаблица = мТаблицаКонтрольныхСчетов.Скопировать();
	ПромТаблица.Свернуть("Ресурс","");
	Для каждого ТекРесурс Из ПромТаблица Цикл
		Имя = ТекРесурс.Ресурс +"ОборотДт";
		ДобавитьРеквизит(Рез, "Сумма(" + Имя +") КАК "+Имя,","+мПС);
		Имя = ТекРесурс.Ресурс +"ОборотКт";
		ДобавитьРеквизит(Рез, "Сумма(" + Имя +") КАК "+Имя,","+мПС);
	КонецЦикла;
	
	ПромТаблица = мТаблицаКонтрольныхСчетов.Скопировать();
	ПромТаблица.Свернуть("НомерСубконто","");
	Для каждого ТекСубконто Из ПромТаблица Цикл
		ТекСуб = ?(ТипЗнч(ТекСубконто.НомерСубконто)=Тип("Число"), "Субконто"+ТекСубконто.НомерСубконто, ТекСубконто.НомерСубконто);
		ДобавитьРеквизит(Рез, ТекСуб,","+мПС);
		ДобавитьРеквизит(СтрокаГруппировки, ТекСуб, ", ");
	КонецЦикла;
	
	ПромТаблица = мТаблицаКонтрольныхСчетов.Скопировать();
	ПромТаблица.Свернуть("Счет","");
	МассивКонтрольныхСчетов = Новый Массив;
	Для каждого ТекСчет Из ПромТаблица Цикл
		МассивКонтрольныхСчетов.Добавить(ТекСчет.Счет);
	КонецЦикла;
	

	ДобавитьРеквизит(Рез, "ПОМЕСТИТЬ ТаблицаОборотов
	|ИЗ
	|	РегистрБухгалтерии."+РегистрБухгалтерии+".Обороты(&ДатаНачала, &ДатаКонца,"+ПериодСтр+", Счет В ИЕРАРХИИ (&КонтрольныеСчета), , Организация В (&Организация) , , ) КАК ТаблицаРегистра
	| СГРУППИРОВАТЬ ПО " + СтрокаГруппировки + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////",мПС);
	Запрос.УстановитьПараметр("КонтрольныеСчета", МассивКонтрольныхСчетов);
	Возврат Рез;
КонецФункции // ()

Функция ПолучитьТекстПакетаЗапроса(СтрокаРегистраБухгалтерии, Запрос)
	Рез = "";
	Если НЕ мРежимПакетногоЗапроса Тогда
		Если СтрокаРегистраБухгалтерии.СчетаОборотов <> Неопределено Тогда
		//Жилицкий 04.01.2013 Оптимизация ГААП
			Если Настройка.Код <> 12 Тогда
				ДобавитьРеквизит(Рез, ПолучитьТекстЗапросаПакета(СтрокаРегистраБухгалтерии,"ТаблицаОборотов"), мПС);
			КонецЕсли; 
		//Жилицкий 04.01.2013 Оптимизация ГААП
		КонецЕсли;
		
		Если СтрокаРегистраБухгалтерии.СчетаОборотовКор <> Неопределено Тогда
			ДобавитьРеквизит(Рез, ПолучитьТекстЗапросаПакета(СтрокаРегистраБухгалтерии,"ТаблицаОборотовКор"), мПС);
		КонецЕсли;
		
		Если СтрокаРегистраБухгалтерии.СчетаОборотовБА <> Неопределено Тогда
			ДобавитьРеквизит(Рез, ПолучитьТекстЗапросаПакета(СтрокаРегистраБухгалтерии,"ТаблицаОборотовБА"), мПС);
		КонецЕсли;
		
		Если СтрокаРегистраБухгалтерии.СчетаОстатков <> Неопределено Тогда
			ДобавитьРеквизит(Рез, ПолучитьТекстЗапросаПакета(СтрокаРегистраБухгалтерии,"ТаблицаОстатков"), мПС);
		КонецЕсли;

		Если СтрокаРегистраБухгалтерии.СчетаОстатковБА <> Неопределено Тогда
			ДобавитьРеквизит(Рез, ПолучитьТекстЗапросаПакета(СтрокаРегистраБухгалтерии,"ТаблицаОстатковБА"), мПС);
		КонецЕсли;
	Иначе	
		Если ВыводитьКонтрольныйОтчет И Настройка.ВидНастройки = 0 Тогда
			ДобавитьРеквизит(Рез, ПолучитьТекстКонтрольногоЗапросДляПакетногоРежима(СтрокаРегистраБухгалтерии, Запрос),мПС);
		КонецЕсли;
		ПериодСтр=ПериодДляЗапроса(Периодичность);
		РегистрБухгалтерии = СтрокаРегистраБухгалтерии.РегистрБухгалтерии;
		Для каждого ТекТабл Из мТаблицаПакетаЗапросов Цикл
			Счет 	= ТекТабл.ИмяТаблицы+"Счет";
			Запрос.УстановитьПараметр(Счет, ТекТабл.Счет);
			КорСчет = ТекТабл.ИмяТаблицы+"КорСчет";
			СтрокаГруппировки = "Организация";
			СтрокаТаблицы = 
			"ВЫБРАТЬ 
			|Организация";
			Если Периодичность<>7 Тогда
				ДобавитьРеквизит(СтрокаТаблицы,		"Период",","+мПС);
				ДобавитьРеквизит(СтрокаГруппировки,	"Период",", ");
			КонецЕсли;
			Если Настройка.ОтборПоПодразделению И мОтборПоПодразделению Тогда
				ДобавитьРеквизит(СтрокаТаблицы,"Подразделение",","+мПС);
				ДобавитьРеквизит(СтрокаГруппировки,	"Подразделение",", ");
			КонецЕсли;

			Для каждого ТекСтр Из ТекТабл.ИменаИзмерений Цикл
				ДобавитьРеквизит(СтрокаТаблицы, ТекСтр,","+мПС);
				ДобавитьРеквизит(СтрокаГруппировки,	ТекСтр,", ");
			КонецЦикла;

			Для каждого ТекСтр Из ТекТабл.ИменаРесурсов Цикл
				ДобавитьРеквизит(СтрокаТаблицы, "Сумма("+ТекСтр+") КАК " + ТекСтр,","+мПС);
			КонецЦикла;
			
			Если ТекТабл.ЭтоОстаток Тогда
				ТаблицаРегистра = РегистрБухгалтерии+"ОстаткиИОбороты";
				
				ДобавитьРеквизит(СтрокаТаблицы, "ПОМЕСТИТЬ " + ТекТабл.ИмяТаблицы + "
				|ИЗ
				|	РегистрБухгалтерии."+РегистрБухгалтерии+".ОстаткиИОбороты(&ДатаНачала, &ДатаКонца,"+ПериодСтр+", ,Счет В ИЕРАРХИИ (&" + Счет + "), ,  Организация В (&Организация) ) КАК ТаблицаРегистра
				|СГРУППИРОВАТЬ ПО 
				|" + СтрокаГруппировки + "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////",мПС);
			Иначе	
				Если Настройка.ОтборПоПодразделению И мОтборПоПодразделению Тогда
					ДобавитьРеквизит(СтрокаТаблицы,"ПодразделениеКор",","+мПС);
					ДобавитьРеквизит(СтрокаГруппировки,	"ПодразделениеКор",", ");
				КонецЕсли;
				ТаблицаРегистра = РегистрБухгалтерии+"Обороты";
				Если ЗначениеЗаполнено(ТекТабл.КорСчет) Тогда
					Запрос.УстановитьПараметр(КорСчет, ТекТабл.КорСчет);
					КорСчетСтр = "КорСчет В ИЕРАРХИИ (&" + КорСчет + ")";
					Если ТекТабл.КорСчетНеРавно = Истина Тогда
					
						КорСчетСтр = " (НЕ " + КорСчетСтр + ")";
					
					КонецЕсли;
				Иначе
					КорСчетСтр = "";
				КонецЕсли;
				ДобавитьРеквизит(СтрокаТаблицы, "ПОМЕСТИТЬ " + ТекТабл.ИмяТаблицы + "
				|ИЗ
				|	РегистрБухгалтерии."+РегистрБухгалтерии+".Обороты(&ДатаНачала, &ДатаКонца,"+ПериодСтр+", Счет В ИЕРАРХИИ (&" + Счет + "),,"
						+" Организация В (&Организация) И ("+ТекТабл.УсловиеОтбора+"),"+КорСчетСтр + ") КАК ТаблицаРегистра
				|
				|СГРУППИРОВАТЬ ПО 
				|" + СтрокаГруппировки + "
				|;
				|////////////////////////////////////////////////////////////////////////////////",мПС);
			КонецЕсли;
			
			ДобавитьРеквизит(Рез, СтрокаТаблицы, мПС);
		КонецЦикла;	
	КонецЕсли;

	Возврат Рез;
КонецФункции // 

/// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ
Процедура ДобавитьРеквизит(Стр,Реквизит,Разделитель=",")  Экспорт
//	Если ЗначениеЗаполнено(Стр) И Реквизит <> "" Тогда  Попов - в пьяном бреду наверно писана
	Если ЗначениеЗаполнено(Стр) Тогда
	    Если Реквизит <> "" Тогда
			Стр=Стр+Разделитель+Реквизит;
		КонецЕсли;
	Иначе
		Стр=Реквизит;
	КонецЕсли;
КонецПроцедуры

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура УстановитьФорматВывода(Вывод)
	ФорматируемаяОбласть = Вывод.ТекущаяОбласть;
	УстановитьФорматВыводаОбластиМакета(ФорматируемаяОбласть);
КонецПроцедуры // УстановитьФорматВывода()

Процедура УстановитьФорматОбластиМакетаИндивидуально(ФорматируемаяОбласть, ФорматнаяСтрока)
	ЧислоЕЗнак = isГенераторОтчетов.ПолучитьОписаниеТиповЧисла(18, 5);
	ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
	ФорматируемаяОбласть.Формат = ФорматнаяСтрока;
	ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
КонецПроцедуры // УстановитьФорматВывода()

Процедура УстановитьФорматВыводаИндивидуально(Вывод,ФорматнаяСтрока)
	ФорматируемаяОбласть = Вывод.ТекущаяОбласть;
	УстановитьФорматОбластиМакетаИндивидуально(ФорматируемаяОбласть, ФорматнаяСтрока);
КонецПроцедуры // УстановитьФорматВывода()

Процедура УстановитьФорматВыводаОбластиМакета(ФорматируемаяОбласть)
	Перем СтруктураГруппы;

	Если ЕдиницаИзмерения = Перечисления.isПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.isПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли ЕдиницаИзмерения = Перечисления.isПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
		мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;  

	ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
	ЧислоЕЗнак = isГенераторОтчетов.ПолучитьОписаниеТиповЧисла(15, 2);;
	Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
		ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
	КонецЕсли;
	ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
	ФорматируемаяОбласть.Формат = мСтрокаФормата;
	ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;

КонецПроцедуры // УстановитьФорматВывода()

Функция ЦикловНет()
	мСтек = Новый Массив;
 	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",Настройка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	isСтрокиОтчетовПЭО.Ссылка
	|	
	|ИЗ
	|	Справочник.isСтрокиОтчетовПЭО КАК isСтрокиОтчетовПЭО
	|ГДЕ
	|	(НЕ isСтрокиОтчетовПЭО.ПометкаУдаления)
	|	И isСтрокиОтчетовПЭО.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЦиклыЕсть(Выборка.Ссылка) Тогда
			Возврат Ложь;
		КонецЕсли;			
	КонецЦикла;
	Возврат Истина;
КонецФункции // ДублейНет()

Функция ЦиклыЕсть(Строка)
	мСтек.Вставить(0,Строка);
	Если ТипЗнч(Строка) = Тип("СправочникСсылка.isСтрокиОтчетовПЭО") Тогда
		Если Строка.Источники.Количество() = 0 Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Владелец",Настройка);
			Запрос.УстановитьПараметр("Родитель",Строка);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	isСтрокиОтчетовПЭО.Ссылка КАК Источник,
			|	1 КАК ТипСтроки
			|ИЗ
			|	Справочник.isСтрокиОтчетовПЭО КАК isСтрокиОтчетовПЭО
			|ГДЕ
			|	(НЕ isСтрокиОтчетовПЭО.ПометкаУдаления)
			|	И isСтрокиОтчетовПЭО.Владелец = &Владелец
			|	И isСтрокиОтчетовПЭО.Родитель = &Родитель";
			ТаблицаИсточников = Запрос.Выполнить().Выгрузить();
		Иначе	
			ТаблицаИсточников = Строка.Источники;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Строка) = Тип("СправочникСсылка.isВыраженияОтчетовПЭО") Тогда
		Если Строка.ВидВыражения = 0 Тогда
			ТаблицаИсточников = Строка.Источники;
		Иначе	
			Если Строка.ТипИсточника1 > 0 
				И (мСтек.Найти(Строка.Источник1) <> Неопределено 
				ИЛИ ЦиклыЕсть(Строка.Источник1)) 
				ИЛИ Строка.ТипИсточника2 > 0 
				И (мСтек.Найти(Строка.Источник2) <> Неопределено 
				ИЛИ ЦиклыЕсть(Строка.Источник2)) Тогда
				Возврат Истина;	
			Иначе
				мСтек.Удалить(0);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		мСтек.Удалить(0);
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ТекСтр Из ТаблицаИсточников Цикл
		Если ТекСтр.ТипСтроки > 0 
				И (мСтек.Найти(ТекСтр.Источник) <> Неопределено 
				ИЛИ ЦиклыЕсть(ТекСтр.Источник)) Тогда
			Возврат Истина;			
		КонецЕсли;
	КонецЦикла;
	мСтек.Удалить(0);
    Возврат Ложь;
КонецФункции // ()

Функция ПолучитьОписаниеТипаРесурса()
	Возврат isГенераторОтчетов.ПолучитьОписаниеТиповЧисла(18,5);	
КонецФункции // ()

Процедура ДобавитьСуммыВСтрокуТаблицы(ТаблицаРезультата,ТаблицаЗнач,К=1)
	Если ТаблицаРезультата = Неопределено Тогда
		ТаблицаРезультата = ТаблицаЗнач.СкопироватьКОлонки();
	КонецЕсли;
	Для каждого ТекСтр Из ТаблицаЗнач Цикл
		СтрокаРезультата=ТаблицаРезультата.Найти(ТекСтр.Период,"Период");
		Если СтрокаРезультата=Неопределено Тогда
			СтрокаРезультата=ТаблицаРезультата.Добавить();
			СтрокаРезультата.Период=ТекСтр.Период;
		КонецЕсли;
		isГенераторОтчетов.Инк(СтрокаРезультата.Сумма,ТекСтр.Сумма*К);
	КонецЦикла;	
КонецПроцедуры
                                                                               
Функция ПолучитьСтруктуруПериодаЗапроса(ВидПериода)
	Результат = Новый Структура("ДатаНачала,ДатаКонца");
	ДатаНач = ДатаНачала;
	ДатаКон = КонецМесяца(ДатаКонца);
	Период = РазностьДатВМесяцах(ДатаКон,ДатаНач);
	Если ВидПериода = 1 Тогда                                 // предыдущий период
		Результат.ДатаНачала = ДобавитьМесяц(ДатаНач,-Период);
		Результат.ДатаКонца = КонецМесяца(ДобавитьМесяц(ДатаКон,-Период));
	ИначеЕсли ВидПериода = 2 Тогда                           // период прошлого года
		Результат.ДатаНачала = ДобавитьМесяц(ДатаНач,12);
		Результат.ДатаКонца = КонецМесяца(ДобавитьМесяц(ДатаКон,12));
	Иначе
		Результат.ДатаНачала = ДатаНач;
		Результат.ДатаКонца = ДатаКон;
	КонецЕсли;
    Возврат Результат;
КонецФункции // ()

Процедура ДобавитьЗначениеВТаблицу(Таблица,СтруктураОтбора,ИмяПоля,Значение)
	Мас=Таблица.НайтиСтроки(СтруктураОтбора);
	Если Мас.Количество()=0 Тогда
	  Строка=Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(Строка,СтруктураОтбора);
		Строка[ИмяПоля]=0;
	Иначе
		Строка=Мас[0];
	КонецЕсли;
	isГенераторОтчетов.Инк(Строка[ИмяПоля],Значение);
КонецПроцедуры  // ДобавитьЗначениеВТаблицу(Таблица,СтруктураОтбора,ИмяПоля,Значение)

Функция ПолучитьЕдиницуИзмеренияДляВалюты()
	
	Если НЕ ЗначениеЗаполнено(ВалютаОтчета) ИЛИ ВалютаОтчета = мВалютаРегламентированногоУчета Тогда
		СписокВыбора = Новый СписокЗначений;
		isГенераторОтчетов.ЗаполнитьСписокЕдиницИзмеренийВОтчетах(СписокВыбора);

		СтрокаЕд = СписокВыбора.НайтиПоЗначению(ЕдиницаИзмерения);
		Возврат ?(СтрокаЕд = Неопределено, "...", СтрокаЕд.Представление);
	Иначе
		Если ЕдиницаИзмерения = Перечисления.isПорядкиОкругленияОтчетности.Окр1 Тогда
			Возврат "в " + ВалютаОтчета.Наименование;
		ИначеЕсли ЕдиницаИзмерения = Перечисления.isПорядкиОкругленияОтчетности.Окр1000 Тогда
			Возврат "в тысячах " + ВалютаОтчета.Наименование;
		ИначеЕсли ЕдиницаИзмерения = Перечисления.isПорядкиОкругленияОтчетности.Окр1000000 Тогда
			Возврат "в миллионах " + ВалютаОтчета.Наименование;
		Иначе	
			Возврат "...";
		КонецЕсли;
	
	КонецЕсли;
	

КонецФункции // ПолучитьЕдиницуИзмеренияДляВалюты()()

Функция ПолучитьИмяПараметраОтчета(КодПараметра) Экспорт
	Если ТипЗнч(КодПараметра) = Тип("Число") Тогда
		лДатаКонца = КонецДня(ДатаКонца);
		Если КодПараметра = 0 Тогда
			Возврат	"Дата формирования отчета";
		ИначеЕсли КодПараметра = 1 Тогда
			Возврат	"Период отчета";
		ИначеЕсли КодПараметра = 3 Тогда
			Возврат	"Дата начала периода отчета";
		ИначеЕсли КодПараметра = 4 Тогда
			Возврат	"Дата окончания периода отчета";;
		ИначеЕсли КодПараметра = 5 Тогда
			Возврат	"Наименование организации";
		Иначе
			ВОзврат "...";
		КонецЕсли;	
	Иначе
        Возврат КодПараметра.Наименование;
	КонецЕсли;
	

КонецФункции // ПолучитьЗначениеПараметраОтчета()

Функция РазностьДатВДнях(Дата1, Дата2)
	мДлинаСуток = 86400; // в секундах
	Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / мДлинаСуток);
КонецФункции

Функция РазностьДатВМесяцах(Дата1, Дата2)
	Мес1 = Год(Дата1)*12 + Месяц(Дата1);
	Мес2 = Год(Дата2)*12 + Месяц(Дата2);
	Возврат Мес1 - Мес2 + 1;
КонецФункции

// <Описание функции>
//
// Параметры
//  Счет  - ПланСчетовСсылка - проверяемый счет
//
// Возвращаемое значение:
//   Булево   - истина - счет имеет субсчета, ложь - счет не имеет субсчета
//
Функция СчетЯвляетсяГруппой(Счет)
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ПланСчетов.Ссылка
	|ИЗ
	|	ПланСчетов."+Счет.Метаданные().Имя+" КАК ПланСчетов
	|ГДЕ
	|	ПланСчетов.Ссылка В ИЕРАРХИИ(&Счет)";
	Запрос.УстановитьПараметр("Счет",Счет);
    Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции // СчетЯвляетсяГруппой()

/////////////////////////////////////////////////////////////////////////
/// ПРОЦЕДУРЫ ОБРАБОТКИ ДОПОЛНИТЕЛЬНОГО ОТБОРА ПО ОРГАНИЗАЦИИ

Функция ОсновнойИДопОтборРавны(Знач ЗначениеОтбора, Знач ВидСравн)
	ПодготовитьДополнительныйОтборКСравнению(ЗначениеОтбора, ВидСравн);	
	Если ТипЗнч(мОрганизация)=Тип("СправочникСсылка.Организации") 
		И ВидСравн = ВидСравнения.Равно Тогда  // основной отбор и дополнительный ссылки
		Возврат ЗначениеОтбора = Организация; 
	ИначеЕсли ТипЗнч(мОрганизация)=Тип("СправочникСсылка.Организации") 
		И ВидСравн = ВидСравнения.ВСписке Тогда //основной отбор ссылка, дополнительный список
		Возврат ЗначениеОтбора.НайтиПоЗначению(мОрганизация) <> Неопределено; // в допсписк есть осовной отбор
	ИначеЕсли ТипЗнч(мОрганизация)=Тип("СписокЗначений") 
		И ВидСравн = ВидСравнения.Равно Тогда //основной отбор список, дополнительный ссылка
		Возврат мОрганизация.НайтиПоЗначению(ЗначениеОтбора) <> Неопределено; //в осовном отборе есть допотбор
	ИначеЕсли ТипЗнч(мОрганизация)=Тип("СписокЗначений") 
		И ВидСравн = ВидСравнения.ВСписке Тогда //основной отбор список, дополнительный список
		Для каждого ТекОрг Из мОрганизация Цикл  // есть пересечение списоков
			Если ЗначениеОтбора.НайтиПоЗначению(ТекОрг.Значение)<>Неопределено Тогда
				Возврат Истина;			
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
		//Для каждого ТекОрг Из ЗначениеОтбора Цикл
		//	Если мОрганизация.НайтиПоЗначению(ТекОрг.Значение)=Неопределено Тогда
		//		Возврат Ложь;			
		//	КонецЕсли;
		//КонецЦикла;
	КонецЕсли;
	Возврат Истина;
КонецФункции // ()

Функция ПолучитьИсключениеОтборов(ЗначениеОтбора, ВидСравн)
	Результат = Новый СписокЗначений;
	ПодготовитьДополнительныйОтборКСравнению(ЗначениеОтбора, ВидСравн);	
	Если ТипЗнч(мОрганизация)=Тип("СправочникСсылка.Организации") 
		И ВидСравн = ВидСравнения.Равно
		И ЗначениеОтбора <> Организация Тогда // основной отбор и дополнительный ссылки
		Результат.Добавить(мОрганизация);			
	ИначеЕсли ТипЗнч(мОрганизация)=Тип("СправочникСсылка.Организации") 
		И ВидСравн = ВидСравнения.ВСписке 
		И ЗначениеОтбора.НайтиПоЗначению(мОрганизация)=Неопределено Тогда //основной отбор ссылка, дополнительный список
		Результат.Добавить(мОрганизация);			
	ИначеЕсли ТипЗнч(мОрганизация)=Тип("СписокЗначений") 
		И ВидСравн = ВидСравнения.Равно Тогда //основной отбор список, дополнительный ссылка
		Для каждого ТекОрг Из мОрганизация Цикл
			Если ТекОрг.Значение <> ЗначениеОтбора Тогда
				Результат.Добавить(ТекОрг.Значение);			
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(мОрганизация)=Тип("СписокЗначений") 
		И ВидСравн = ВидСравнения.ВСписке Тогда //основной отбор список, дополнительный список
		Для каждого ТекОрг Из мОрганизация Цикл
			Если ЗначениеОтбора.НайтиПоЗначению(ТекОрг.Значение)=Неопределено Тогда
				Результат.Добавить(ТекОрг.Значение);			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции // ()

Функция ПолучитьПересечениеОтборов(ЗначениеОтбора, ВидСравн)
	Результат = Новый СписокЗначений;
	ПодготовитьДополнительныйОтборКСравнению(ЗначениеОтбора, ВидСравн);	
	Если ТипЗнч(мОрганизация)=Тип("СправочникСсылка.Организации") 
		И ВидСравн = ВидСравнения.Равно
		И ЗначениеОтбора = мОрганизация Тогда // основной отбор и дополнительный ссылки
		Результат.Добавить(ЗначениеОтбора);			
	ИначеЕсли ТипЗнч(мОрганизация)=Тип("СправочникСсылка.Организации") 
		И ВидСравн = ВидСравнения.ВСписке
		И ЗначениеОтбора.НайтиПоЗначению(мОрганизация)<>Неопределено Тогда //основной отбор ссылка, дополнительный список
		Результат.Добавить(мОрганизация);			
	ИначеЕсли ТипЗнч(мОрганизация)=Тип("СписокЗначений") 
		И ВидСравн = ВидСравнения.Равно
		И мОрганизация.НайтиПоЗначению(ЗначениеОтбора)<>Неопределено Тогда //основной отбор список, дополнительный ссылка
		Результат.Добавить(ЗначениеОтбора);			
	ИначеЕсли ТипЗнч(мОрганизация)=Тип("СписокЗначений") 
		И ВидСравн = ВидСравнения.ВСписке Тогда //основной отбор список, дополнительный список
		Для каждого ТекОрг Из мОрганизация Цикл
			Если ЗначениеОтбора.НайтиПоЗначению(ТекОрг.Значение)<>Неопределено Тогда
				Результат.Добавить(ТекОрг.Значение);			
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции // ()

Процедура ПодготовитьДополнительныйОтборКСравнению(ЗначениеОтбора, ВидСравн)
	Если ВидСравн = ВидСравнения.НеВСписке
		ИЛИ ВидСравн = ВидСравнения.НеРавно 
		ИЛИ ВидСравн = ВидСравнения.НеВИерархии 
		ИЛИ ВидСравн = ВидСравнения.НеВСпискеПоИерархии Тогда
		Запрос=Новый Запрос("");
		Запрос.УстановитьПараметр("Ссылка", ЗначениеОтбора);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.Ссылка В (&Ссылка)
		|	И НЕ Организации.ПометкаУдаления";
		
		ЗначениеОтбора = Новый СписокЗначений;
		ЗначениеОтбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		ВидСравн = ВидСравнения.ВСписке;
	КонецЕсли;
	
	Если ВидСравн = ВидСравнения.ВИерархии Тогда
		ВидСравн = ВидСравнения.Равно;
	КонецЕсли;
	
	Если ВидСравн = ВидСравнения.ВСпискеПоИерархии Тогда
		ВидСравн = ВидСравнения.ВСписке;
	КонецЕсли;
	
КонецПроцедуры

//Машков 01.07.2013 [000002580],[I-1С_КОРП-MSC-2013-00543]+++
Процедура ПрименитьНастройку() Экспорт
	Если СохраненнаяНастройка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметров = СохраненнаяНастройка.ХранилищеНастроек.Получить();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПараметров);
КонецПроцедуры
//Машков 01.07.2013 [000002580],[I-1С_КОРП-MSC-2013-00543]---

//++Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
Функция ПолучитьНайстройкиОформления(НастройкаОтчета)
	тбзРезультат = Новый ТаблицаЗначений();
	тбзРезультат.Колонки.Добавить("СтрокаОтчета");
	тбзРезультат.Колонки.Добавить("Строка");
	тбзРезультат.Колонки.Добавить("Значение");
	тбзРезультат.Колонки.Добавить("Оформление");
	тбзРезультат.Колонки.Добавить("УсловиеЗначение");
	
//
	ПостроительОтчета_Оформление = Новый ПостроительОтчета();
	ПостроительОтчета_Оформление.Текст = "ВЫБРАТЬ
	                                     |	isСтрокиОтчетовПЭО.Ссылка КАК СтрокаОтчета,
	                                     |	ВЫРАЗИТЬ(0 КАК Число(15,2)) КАК Значение
	                                     |ИЗ
	                                     |	Справочник.isСтрокиОтчетовПЭО КАК isСтрокиОтчетовПЭО
	                                     |{ГДЕ
	                                     |	isСтрокиОтчетовПЭО.Владелец.*}";
	ПостроительОтчета_Оформление.ЗаполнитьНастройки();
	ОтборВладелец = ПостроительОтчета_Оформление.Отбор.Добавить("Владелец");
	ОтборВладелец.Значение = НастройкаОтчета.Ссылка;
	ОтборВладелец.ВидСравнения = ВидСравнения.Равно;
	ОтборВладелец.Использование = Истина;
	Поле_СтрокаОтчета = ПостроительОтчета_Оформление.ДоступныеПоля.Найти("СтрокаОтчета");
	Поле_СтрокаОтчета.Представление = "Строка отчета";
	НастройкиПостроителя_Оформление = НастройкаОтчета.НастройкаОформления.Получить();
	Если ТипЗнч(НастройкиПостроителя_Оформление) = Тип("НастройкиПостроителяОтчета") Тогда
		ПостроительОтчета_Оформление.УстановитьНастройки(НастройкиПостроителя_Оформление, Ложь, Ложь, Ложь, Ложь, Истина);
	КонецЕсли;	
	Для каждого СтрокаОформления ИЗ ПостроительОтчета_Оформление.УсловноеОформление Цикл
		Если СтрокаОформления.Использование Тогда
			НС = тбзРезультат.Добавить();
			НС.Строка	=	Истина;
			НС.Значение	=	Истина;
//Неопределено - применяется ко всем строкам отчета			
			НС.СтрокаОтчета	=	НЕОПРЕДЕЛЕНО;
//отбор
			УсловиеЗначение = "";
			ЕстьОтборСтрок = Ложь;
			УдалитьОтборыИзПотроителя(ПостроительОтчета_Оформление);
			Для каждого СтрокаОтбора ИЗ СтрокаОформления.Отбор Цикл
				Если НЕ СтрокаОтбора.Использование Тогда
					Продолжить;
				КонецЕсли;
				Если Найти(СтрокаОтбора.ПутьКДанным, "Значение")<>0 Тогда
					УсловиеЗначение = СокрЛП(СтрокаОтбора);
				КонецЕсли;	
				Если Найти(СтрокаОтбора.ПутьКДанным, "СтрокаОтчета")<>0 Тогда
//есть условие на строку, нужно собрать все строки отчета, удовлетворяющие условию					
					ДобавитьОтборВПостроитель(ПостроительОтчета_Оформление, СтрокаОтбора);
					ЕстьОтборСтрок = Истина;
				КонецЕсли;	
					
			КонецЦикла;	
			флПродублироватьСтроки = Ложь;
			Если ЕстьОтборСтрок = Истина Тогда
				СтрокиОтчета=ПолучитьВсеСтрокиОтчета_ПоУсловию(ПостроительОтчета_Оформление, НастройкаОтчета);
				Если СтрокиОтчета.Количество() = 0 Тогда
//ни одна строка не подходит по отбору, оформление не применяем
					тбзРезультат.Удалить(НС);
					Продолжить;
				ИначеЕсли  СтрокиОтчета.Количество() = 1 Тогда
					НС.СтрокаОтчета	=	СтрокиОтчета[0];
				Иначе
					НС.СтрокаОтчета	=	СтрокиОтчета[0];
					флПродублироватьСтроки = Истина;
				КонецЕсли;	
			КонецЕсли;	
//область
//если есть хотя бы одно значение в области, значит оформление действует для
//конкретной области
			флЗначение = НЕОПРЕДЕЛЕНО;
			флСтрокаОтчета = НЕОПРЕДЕЛЕНО;
			Для каждого Область ИЗ СтрокаОформления.Область Цикл
				Если Найти(Область.ПутьКДанным, "Значение")<>0 Тогда
					флЗначение = Истина;	
				КонецЕсли;	
				Если Найти(Область.ПутьКДанным, "СтрокаОтчета")<>0 Тогда
					флСтрокаОтчета = Истина;	
				КонецЕсли;	
			КонецЦикла;
			Если флСтрокаОтчета <> НЕОПРЕДЕЛЕНО ИЛИ  флЗначение <> НЕОПРЕДЕЛЕНО
			Тогда
				НС.Строка	=	(флСтрокаОтчета = Истина);
				НС.Значение	=	(флЗначение = Истина);
			КонецЕсли;
			НС.УсловиеЗначение	=	УсловиеЗначение;
//оформление

			НС.Оформление	=	СтрокаОформления.Оформление;
//проверка на дублирование
			Если флПродублироватьСтроки = Истина Тогда
	        	счт_Д = 1;
				Пока счт_Д<СтрокиОтчета.Количество()-1 Цикл
					НС_Дубль = 	тбзРезультат.Добавить();
					ЗаполнитьЗначенияСвойств(НС_Дубль, НС);
					НС_Дубль.СтрокаОтчета = СтрокиОтчета[счт_Д];
					счт_Д	=	счт_Д + 1;
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	Возврат(тбзРезультат);
КонецФункции	//	ПолучитьНайстройкиОформления() 	

Процедура УдалитьОтборыИзПотроителя(ПостроительОтчета_Оформление)
	счт=0;
	Пока счт<ПостроительОтчета_Оформление.Отбор.Количество() Цикл
		ПостроительОтчета_Оформление.Отбор.Удалить(0);
	КонецЦикла;	
КонецПроцедуры 	//	УдалитьОтборыИзПотроителя()
	
Процедура ДобавитьОтборВПостроитель(ПостроительОтчета_Оформление, СтрокаОтбора)
	Имя = ?(СтрокаОтбора.Имя = "", СтрокаОтбора.ПутьКДанным, СтрокаОтбора.Имя);
	ОтборПоле = ПостроительОтчета_Оформление.Отбор.Добавить(Имя);
//++Куприянова Е.В. 27.10.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
	ОтборПоле.ВидСравнения = СтрокаОтбора.ВидСравнения;
//--Куприянова Е.В. 27.10.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
	ОтборПоле.Значение = СтрокаОтбора.Значение;
	ОтборПоле.ЗначениеС = СтрокаОтбора.ЗначениеС;
	ОтборПоле.ЗначениеПо = СтрокаОтбора.ЗначениеПо;
//++Куприянова Е.В. 27.10.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
//	ОтборПоле.ВидСравнения = СтрокаОтбора.ВидСравнения;
//--Куприянова Е.В. 27.10.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
//	ОтборПоле.ПутьКДанным = СтрокаОтбора.ПутьКДанным;
	ОтборПоле.Использование = Истина;
КонецПроцедуры	//	ДобавитьОтборВПостроитель()	

Функция ПолучитьВсеСтрокиОтчета_ПоУсловию(ПостроительОтчета_Оформление, НастройкаОтчета)
	Результат = Новый Массив();
	Если ПостроительОтчета_Оформление.Отбор.Найти("Владелец")=НЕОПРЕДЕЛЕНО Тогда
		ОтборВладелец = ПостроительОтчета_Оформление.Отбор.Добавить("Владелец");
		ОтборВладелец.Значение = НастройкаОтчета.Ссылка;
		ОтборВладелец.ВидСравнения = ВидСравнения.Равно;
		ОтборВладелец.Использование = Истина;
	КонецЕсли;
	ПостроительОтчета_Оформление.Выполнить();
	Результат_Построитель = ПостроительОтчета_Оформление.Результат;
	Результат = Результат_Построитель.Выгрузить().ВыгрузитьКолонку("СтрокаОтчета");
	Возврат(Результат);
КонецФункции	//	ПолучитьВсеСтрокиОтчета_ПоУсловию()		

//++Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
Процедура УстановитьОформлениеОбласти(Область, СтрокаОтчета, Тип = "Строка", Знач Сумма=0, ОбластьСтрока=НЕОПРЕДЕЛЕНО)
	Если ТаблицаНастроекОформления.Количество()=0 Тогда
		Возврат;
	КонецЕсли;	 
//если по каким-то причинам сумма некое пустое значение, но не ноль, обнуляем	
	Если НЕ ЗначениеЗаполнено(Сумма) Тогда
		Сумма = 0;
	КонецЕсли;	
//сначала применим общие настройки для всех строк отчета	
	СтруктураОтбора = Новый Структура("СтрокаОтчета", НЕОПРЕДЕЛЕНО);
	//Если Тип = "Строка" Тогда
	//	СтруктураОтбора.Вставить("Строка", Истина);
	//ИначеЕсли Тип = "Значение" Тогда
	//	СтруктураОтбора.Вставить("Значение", Истина);
	//КонецЕсли;	
	СтрокиПодходят = ТаблицаНастроекОформления.НайтиСтроки(СтруктураОтбора);
	Для каждого Строка ИЗ СтрокиПодходят Цикл
		Если Тип = "Строка" И НЕ ЗначениеЗаполнено(Строка.УсловиеЗначение)  Тогда
//безусловно применяем оформление
			ПрименитьОформление(Область, Строка.Оформление);
		ИначеЕсли Тип = "Значение" Тогда	
			Если НЕ ЗначениеЗаполнено(Строка.УсловиеЗначение) Тогда
				Если Строка.Значение = Истина Тогда 
					ПрименитьОформление(Область, Строка.Оформление, Сумма);
				КонецЕсли;	
				Если Строка.Строка = Истина 
					И ОбластьСтрока <> НЕОПРЕДЕЛЕНО	
				Тогда
					ПрименитьОформление(ОбластьСтрока, Строка.Оформление, Сумма);
				КонецЕсли;	
			Иначе
//в колонке УсловиеЗначение может быть прописано доп. условие на сумму		
				Значение = Сумма;
				УсловиеВыполняется = Ложь;
				УсловиеЗначение = Строка.УсловиеЗначение;
				УсловиеЗначение = СтрЗаменить(УсловиеЗначение, """", "");
				Выполнить("УсловиеВыполняется = ("+УсловиеЗначение+");");
				Если УсловиеВыполняется Тогда
					Если Строка.Значение = Истина  Тогда
						ПрименитьОформление(Область, Строка.Оформление, Сумма);
					КонецЕсли;	
					Если Строка.Строка = Истина 
						И ОбластьСтрока <> НЕОПРЕДЕЛЕНО	
					Тогда
						ПрименитьОформление(ОбластьСтрока, Строка.Оформление, Сумма);
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
//теперь обработаем строки, для которых задано особое условие	
	СтруктураОтбора.Вставить("СтрокаОтчета", СтрокаОтчета);
	СтрокиПодходят = ТаблицаНастроекОформления.НайтиСтроки(СтруктураОтбора);
	Для каждого Строка ИЗ СтрокиПодходят Цикл
		Если Тип = "Строка" И НЕ ЗначениеЗаполнено(Строка.УсловиеЗначение) Тогда
//безусловно применяем оформление
			ПрименитьОформление(Область, Строка.Оформление);
		ИначеЕсли Тип = "Значение" Тогда	
			Если НЕ ЗначениеЗаполнено(Строка.УсловиеЗначение) Тогда
				Если Строка.Значение = Истина   Тогда
					ПрименитьОформление(Область, Строка.Оформление, Сумма);
				КонецЕсли;	
				Если Строка.Строка = Истина 
					И ОбластьСтрока <> НЕОПРЕДЕЛЕНО	
				Тогда
					ПрименитьОформление(ОбластьСтрока, Строка.Оформление, Сумма);
				КонецЕсли;	
			Иначе
//в колонке УсловиеЗначение может быть прописано доп. условие на сумму		
				Значение = Сумма;
				УсловиеВыполняется = Ложь;
				УсловиеЗначение = СокрЛП(Строка.УсловиеЗначение);
//уберем кавычки, запятые и пробелы между цифрами  в условии	
				УсловиеЗначение = ПреобразоватьУсловиеДляВыполнения(УсловиеЗначение);
				Выполнить("УсловиеВыполняется = ("+УсловиеЗначение+");");
				Если УсловиеВыполняется Тогда
					Если Строка.Значение = Истина Тогда 
						ПрименитьОформление(Область, Строка.Оформление, Сумма);
					КонецЕсли;	
					Если Строка.Строка = Истина 
						И ОбластьСтрока <> НЕОПРЕДЕЛЕНО	
					Тогда
						ПрименитьОформление(ОбластьСтрока, Строка.Оформление, Сумма);
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	//	УстановитьОформлениеОбласти()		

Процедура ПрименитьОформление(Область, Оформление, Значение = 0)
	Для каждого ЭлементОформления ИЗ Оформление Цикл
		Если ЭлементОформления.Использование Тогда
			ЗначениеОформления = ЭлементОформления.Значение;
			Если ЭлементОформления.Имя = "ЦветТекста" Тогда
				Область.ЦветТекста = ЗначениеОформления;
			ИначеЕсли  ЭлементОформления.Имя = "ЦветФона" Тогда 
				Область.ЦветФона = ЗначениеОформления;
			ИначеЕсли  ЭлементОформления.Имя = "Шрифт" Тогда 
				Область.Шрифт = ЗначениеОформления;
			ИначеЕсли  ЭлементОформления.Имя = "Формат" Тогда 
				Область.Текст = Формат(Значение, ЗначениеОформления);
			ИначеЕсли  ЭлементОформления.Имя = "ГоризонтальноеПоложение" Тогда 
				Область.ГоризонтальноеПоложение = ЗначениеОформления;
			ИначеЕсли  ЭлементОформления.Имя = "ВертикальноеПоложение" Тогда 
				Область.ВертикальноеПоложение = ЗначениеОформления;
			ИначеЕсли  ЭлементОформления.Имя = "ОриентацияТекста" Тогда 
				Область.ОриентацияТекста = ЗначениеОформления;
			ИначеЕсли  ЭлементОформления.Имя = "Отступ" Тогда 
				Область.Отступ = ЗначениеОформления;
			ИначеЕсли  ЭлементОформления.Имя = "АвтоОтступ" Тогда 
				Область.АвтоОтступ = ЗначениеОформления;
			ИначеЕсли  ЭлементОформления.Имя = "ВыделятьОтрицательные" Тогда 
				Область.ВыделятьОтрицательные = ЗначениеОформления;
			ИначеЕсли  ЭлементОформления.Имя = "Текст" Тогда 
//++Куприянова Е.В. 27.10.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
//				Область.Значение = ЗначениеОформления;
				Массив = Новый Массив();
				Массив.Добавить(Тип("Строка"));
				КвСтроки = Новый КвалификаторыСтроки(100);
				Область.ТипЗначения = Новый ОписаниеТипов(Область.ТипЗначения, Массив, , ,КвСтроки);
				Область.Значение = ЗначениеОформления;
//--Куприянова Е.В. 27.10.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	//	ПрименитьОфомление()	

//уберем кавычки, запятые и пробелы между цифрами  в условии	
Функция ПреобразоватьУсловиеДляВыполнения(УсловиеЗначение)
	Результат = УсловиеЗначение;
	Результат = СтрЗаменить(Результат, """", "");
	Результат = СокрЛП(СтрЗаменить(Результат, ",", "."));
	стрТолькоЦифры = "0123456789";  
//убираем пробелы между цифрами
	счт = 2;
	Пока счт<СтрДлина(Результат) Цикл
		ТекСимвол = Сред(Результат,счт,1);
		ПредСимвол = Сред(Результат,счт-1,1);
		СледСимвол = Сред(Результат,счт+1,1);
		Если (ТекСимвол = " "  ИЛИ ТекСимвол = Символ(160))
			И Найти(стрТолькоЦифры, ПредСимвол)<>0
			И Найти(стрТолькоЦифры, СледСимвол)<>0
		Тогда	
			Результат = СокрЛП(Лев(Результат, счт-1)+Сред(Результат,счт+1));
		Иначе
			счт = счт + 1;
		КонецЕсли;	
	КонецЦикла;	
	Возврат(Результат);			
КонецФункции	//	ПреобразоватьУсловиеДляВыполнения()
//--Куприянова Е.В. 29.09.2013	I-1С_КОРП-MSC-2013-00785 заявка №0Б-000222

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мШаблон=Новый ТаблицаЗначений;
мШаблон.Колонки.Добавить("Период",isГенераторОтчетов.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
мШаблон.Колонки.Добавить("Сумма",ПолучитьОписаниеТипаРесурса());
мТекущаяСтраница = 0;

Периодичность=1;
ДатаНачала=НачалоГода(ТекущаяДата());
ДатаКонца=КонецГода(ТекущаяДата());
мСтрокаОбъединения=Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ "+Символы.ПС;
мГруппаОрганизаций = Новый СписокЗначений;
мПС = Символы.ПС;
