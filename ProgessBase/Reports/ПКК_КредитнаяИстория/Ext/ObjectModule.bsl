Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	СтруктураВнешнихДанных = Новый Структура;
	СтруктураВнешнихДанных.Вставить("ТаблицаДанных", СформируемТаблица_ТаблицаДанных());
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета,СтруктураВнешнихДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
		
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Функция СформируемТаблица_ТаблицаДанных()
	
	//Сообщить("Начало "+ТекущаяДата());
	// Обработка механизма разузлования
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	мСхемаКомпоновки = ПолучитьМакет("СхемаКомпоновкиДанныхДляРасчета");
	
	НовыеНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	//СписокКонтрагентов = Новый СписокЗначений;
	
	Для i = 0 по ЭлементыОтбора.Количество()-1 Цикл
		
		ЭлементСтарый = ЭлементыОтбора.Получить(i);
		
		ЭлементНовый = НовыеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементНовый.ВидСравнения   = ЭлементСтарый.ВидСравнения;
		ЭлементНовый.Использование  = ЭлементСтарый.Использование;
		ЭлементНовый.ЛевоеЗначение  = ЭлементСтарый.ЛевоеЗначение;
		ЭлементНовый.ПравоеЗначение = ЭлементСтарый.ПравоеЗначение;
		
		//Если ЭлементНовый.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент") и ЭлементНовый.Использование  = Истина и (ЭлементНовый.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно или ЭлементНовый.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке) тогда
		//	СписокКонтрагентов.Добавить(ЭлементНовый.ПравоеЗначение);
		//КонецЕсли;
		
	КонецЦикла; 
	
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		
		мПараметрНачалоПериода = НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		Если мПараметрНачалоПериода <> Неопределено Тогда
			мПараметрНачалоПериода.Использование = Истина;
			мПараметрНачалоПериода.Значение = ПараметрНачалоПериода.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
				
		мПараметрКонецПериода = НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		Если мПараметрКонецПериода <> Неопределено Тогда
			мПараметрКонецПериода.Использование = Истина;
			мПараметрКонецПериода.Значение = ПараметрКонецПериода.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, ЭтотОбъект.КомпоновщикНастроек.Настройки,,, тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, НовыеНастройки,,, тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , );
	
		
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	СписокКонтрагентов = Результат.ВыгрузитьКолонку("Контрагент");
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	
	Результат = новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Валюта");
	Результат.Колонки.Добавить("НачальныйОстаток");
	Результат.Колонки.Добавить("ДатаДокумента");
	Результат.Колонки.Добавить("ДатаОплаты");
	Результат.Колонки.Добавить("ДоговорКонтрагента");
	Результат.Колонки.Добавить("Документ");
	Результат.Колонки.Добавить("Контрагент");
	Результат.Колонки.Добавить("НакладнаяДокумента");
	Результат.Колонки.Добавить("ОписаниеДокумента");
	Результат.Колонки.Добавить("ОписаниеОплаты");
	Результат.Колонки.Добавить("Оплата");
	Результат.Колонки.Добавить("СуммаОстаток");
	Результат.Колонки.Добавить("ПросрокОплаты");
	Результат.Колонки.Добавить("ДнейПросрокОплаты");
	Результат.Колонки.Добавить("СуммаДокумента");
	Результат.Колонки.Добавить("СуммаОплаты");
	Результат.Колонки.Добавить("СуммаДолга");
	Результат.Колонки.Добавить("СуммаПросроченногоДолга");
	Результат.Колонки.Добавить("ДатаОплатыПлан");
	Результат.Колонки.Добавить("ДатаОплатыФакт");
	
	
	
	//Если СписокКонтрагентов.Количество()> 0 тогда
		ОтборКонтрагент = "	И ВзаиморасчетыСКонтрагентами.Контрагент В(&СписокКонтрагентов)";
	//иначе
	//	ОтборКонтрагент = "";
	//	ЗапросКонтр = Новый Запрос;
	//	ЗапросКонтр.Текст = 
	//		"ВЫБРАТЬ
	//		|	ВзаиморасчетыСКонтрагентамиОстатки.Контрагент
	//		|ИЗ
	//		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&НачалоПериода, ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)) КАК ВзаиморасчетыСКонтрагентамиОстатки
	//		|ГДЕ
	//		|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток <> 0";

	//	ЗапросКонтр.УстановитьПараметр("НачалоПериода", ПараметрНачалоПериода.Значение);
	//	ЗапросКонтр.УстановитьПараметр("ВидДоговора", МассивВидовДоговоров);
	//	РезультатКонтр = ЗапросКонтр.Выполнить();
	//	СписокКонтрагентов = РезультатКонтр.Выгрузить();
	//КонецЕсли;
	
	ПустаяДата = '00010101';
	
	Состояние("Получаем начальные остатки");
	ТаблицаНачОстатки = ПКК_КредитныйКонтроль.ПолучитьПросроченнуюДебеторскуюЗадолженность_Таблица(СписокКонтрагентов, ПустаяДата, истина, ПустаяДата);
	
    //Приход за период
	Состояние("Получаем документы");
	ЗапросДокументы = Новый Запрос;
	ЗапросДокументы.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.Период КАК ДатаДокумента,
	|ВЫБОР
	|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
	|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1)
	|		ТОГДА ВзаиморасчетыСКонтрагентами.Регистратор.АП_ДатаОплаты
	|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	|КОНЕЦ КАК ДатаОплатыПлан,
	|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Документ,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	|	ВзаиморасчетыСКонтрагентами.Контрагент,
	|	ВзаиморасчетыСКонтрагентами.Регистратор.Комментарий КАК ОписаниеДокумента,
	|	ВЫБОР
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|							ТОГДА -ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	|						ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	|					КОНЕЦ
	|			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ВЫБОР
	|						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	|							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	|						ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	|					КОНЕЦ
	|		КОНЕЦ КАК СуммаДокумента,
	//|	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов КАК СуммаДокумента,
	|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	0 как НачальныйОстаток,
	//{24.08.2015 Островерхий заявка №42710 
	|	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет,
	|	ВзаиморасчетыСКонтрагентами.СуммаУпрЗачет,
	|	НАЧАЛОПЕРИОДА(ВЫБОР
	|		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	|		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	|	КОНЕЦ, МЕСЯЦ) КАК ДатаПериода,
	|	ВзаиморасчетыСКонтрагентами.Период,
	|	ВзаиморасчетыСКонтрагентами.Регистратор
	//24.08.2015 Островерхий} 
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|ГДЕ
	|	((ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				И ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0 )
	|			ИЛИ (ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0))
	//{16.10.2015 Островерхий заявка №41003 
	|	И ВзаиморасчетыСКонтрагентами.НеУчитВДебиторке = ЛОЖЬ 
	//16.10.2015 Островерхий} 
	|	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)"+ОтборКонтрагент+"
	//|	И (ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
	//|			ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	//|			ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеИсходящее
	//|			ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ВводНачальныхОстатковПоВзаиморасчетам
	//|			ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
	|	И (ВзаиморасчетыСКонтрагентами.Период >= &НачалоПериода)
	|	И (ВзаиморасчетыСКонтрагентами.Период <= &КонецПериода)
	//{02.08.2016 Островерхий заявка №55106 
	|	И ВзаиморасчетыСКонтрагентами.Активность 
	//02.08.2016 Островерхий} 
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент, ДоговорКонтрагента, ДатаПериода, ДатаОплатыПлан, ВзаиморасчетыСКонтрагентами.Период, ВзаиморасчетыСКонтрагентами.Регистратор";
	
	ЗапросДокументы.УстановитьПараметр("КонецПериода", ПараметрКонецПериода.Значение);
	ЗапросДокументы.УстановитьПараметр("НачалоПериода", ПустаяДата);
	ЗапросДокументы.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
		
	ЗапросДокументы.УстановитьПараметр("ВидДоговора", МассивВидовДоговоров);
	
	РезультатДокументы = ЗапросДокументы.Выполнить();
	ТаблицаДокументы = РезультатДокументы.Выгрузить();
	
	//Расход за период
	Состояние("Получаем оплату");
	ЗапросОплата = Новый Запрос;
	ЗапросОплата.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентами.Период КАК ДатаОплатыФакт,
		|	ВзаиморасчетыСКонтрагентами.Регистратор.Дата КАК ДатаОплаты,
		|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Оплата,
		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
		|	ВзаиморасчетыСКонтрагентами.Контрагент,
		|	ВзаиморасчетыСКонтрагентами.Регистратор.Комментарий КАК ОписаниеОплаты,
		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
		 //|	ВЫБОР
		 //   |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		 //   |				ТОГДА ВЫБОР
		 //   |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0
		 //   |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
		 //   |						ИНАЧЕ 0
		 //   |					КОНЕЦ
		 //   |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		 //   |				ТОГДА ВЫБОР
		 //   |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
		 //   |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
		 //   |						ИНАЧЕ 0
		 //   |					КОНЕЦ
		 //   |		КОНЕЦ КАК СуммаОплаты
		| 	ВЫБОР КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0 ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов*-1 КОНЕЦ КАК СуммаОплаты,
		//{24.08.2015 Островерхий заявка №42710 
		|	ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетовЗачет,
		|	ВзаиморасчетыСКонтрагентами.СуммаУпрЗачет 
		//24.08.2015 Островерхий} 
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	((ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				И ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0 )
		|			ИЛИ (ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0))
		//|	И (ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
		//|			ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
		//|			ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
		|	И ВзаиморасчетыСКонтрагентами.Период >= &НачалоПериода
		|	И ВзаиморасчетыСКонтрагентами.Период <= &КонецПериода
		|	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
		|	"+ОтборКонтрагент+"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,ДоговорКонтрагента,ДатаОплаты";

	ЗапросОплата.УстановитьПараметр("НачалоПериода", ПустаяДата);
	ЗапросОплата.УстановитьПараметр("КонецПериода", ПараметрКонецПериода.Значение);
	ЗапросОплата.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
	
	ЗапросОплата.УстановитьПараметр("ВидДоговора", МассивВидовДоговоров);
	
	РезультатОплата = ЗапросОплата.Выполнить();
	ТаблицаОплата = РезультатОплата.Выгрузить();
	
    сч = 1 ;
	КолДокум =  ТаблицаНачОстатки.Количество();
	Для каждого стрН из ТаблицаНачОстатки цикл
		Состояние("Обрабатываем начальные остатки "+СокрЛП(Сч)+" из "+СокрЛП(КолДокум));
		СтрДобавленная = ТаблицаДокументы.Добавить();
		СтрДобавленная.ДоговорКонтрагента = стрН.ДоговорКонтрагента;
		СтрДобавленная.Контрагент = стрН.Контрагент;
		СтрДобавленная.ДатаДокумента = стрН.Дата;
		СтрДобавленная.ДатаОплатыПлан = стрН.ДатаОплаты;
		СтрДобавленная.Документ  = стрН.Регистратор;
		СтрДобавленная.ОписаниеДокумента  = стрН.Регистратор.Комментарий;
		СтрДобавленная.НачальныйОстаток = стрН.НачОст;
		СтрДобавленная.СуммаДокумента = стрН.НачОст;
		СтрДобавленная.Валюта = стрН.ДоговорКонтрагента.ВалютаВзаиморасчетов;
        сч = сч+1 ;
	КонецЦикла;
	Состояние("Сортируем начальные остатки ");
	//{25.08.2015 Островерхий заявка №б/н 
	//ТаблицаДокументы.Сортировать("Контрагент,ДоговорКонтрагента,ДатаДокумента"); 
	ТаблицаДокументы.Сортировать("Контрагент, ДоговорКонтрагента, ДатаПериода, ДатаОплатыПлан");
	//25.08.2015 Островерхий} 
	КолДокум =  ТаблицаДокументы.Количество();
	Сч = 1;

	
	ТаблицаОплатПоДоговору = Новый ТаблицаЗначений;
	Для каждого СтрДокумент из ТаблицаДокументы цикл
		Состояние("Обрабатываем Документы "+ СокрЛП(Сч)+" из "+СокрЛП(КолДокум));
		Сч = Сч + 1;        
		
		//{24.08.2015 Островерхий заявка №42710 
		Если СтрДокумент.СуммаДокумента-СтрДокумент.СуммаВзаиморасчетовЗачет = 0 Тогда
			Продолжить;
		КонецЕсли; 
		//24.08.2015 Островерхий} 
		 
		СуммаОстаток = СтрДокумент.СуммаДокумента;
		ЕстьОплатаПоДокументу  = Ложь;
		
		Если ТаблицаОплатПоДоговору.Количество()=0 или СтрДокумент.ДоговорКонтрагента <> ТаблицаОплатПоДоговору[0].ДоговорКонтрагента Тогда
			ТаблицаОплатПоДоговору = ТаблицаОплата.НайтиСтроки(Новый Структура("ДоговорКонтрагента",СтрДокумент.ДоговорКонтрагента)); 
		КонецЕсли;
		
		Для каждого СтрОплата из ТаблицаОплатПоДоговору цикл
			
			//{24.08.2015 Островерхий заявка №42710 
			Если СтрОплата.СуммаОплаты-СтрОплата.СуммаВзаиморасчетовЗачет = 0 Тогда
				Продолжить;
			КонецЕсли; 
			//24.08.2015 Островерхий} 
			
			Если  СтрОплата.СуммаОплаты > 0 и СуммаОстаток >0
				тогда
				СтрРезультат = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрРезультат,СтрДокумент);
				ЗаполнитьЗначенияСвойств(СтрРезультат,СтрОплата);
				СтрРезультат.СуммаДокумента = 0;
				СтрРезультат.НачальныйОстаток = 0;
				Если СтрОплата.СуммаОплаты <= СуммаОстаток тогда
					СуммаОстаток = СуммаОстаток - СтрОплата.СуммаОплаты;
					СтрОплата.СуммаОплаты = 0; 
				Иначе
					СтрРезультат.СуммаОплаты = СуммаОстаток; 
					СтрОплата.СуммаОплаты = СтрОплата.СуммаОплаты - СуммаОстаток;
					СуммаОстаток = 0;
				КонецЕсли;
				СтрРезультат.ДнейПросрокОплаты = ((НачалоДня(СтрРезультат.ДатаОплаты) - НачалоДня(СтрРезультат.ДатаОплатыПлан))/86400);  
				ЕстьОплатаПоДокументу  = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОплатаПоДокументу  = Ложь тогда
			СтрРезультат = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрРезультат,СтрДокумент);
			СтрРезультат.СуммаДокумента = 0;
			СтрРезультат.НачальныйОстаток = 0;
		КонецЕсли;
		
		Если СтрДокумент.НачальныйОстаток <> 0 тогда
			СтрРезультат.НачальныйОстаток = СтрДокумент.СуммаДокумента;
		Иначе 
			СтрРезультат.СуммаДокумента = СтрДокумент.СуммаДокумента;
		КонецЕсли;
		СтрРезультат.СуммаДолга = СуммаОстаток;
		
		Если СтрРезультат.СуммаДолга  > 0 Тогда
			
			Если НачалоДня(ПараметрКонецПериода.Значение) < ТекущаяДата() тогда
				СтрРезультат.ДнейПросрокОплаты = ((НачалоДня(ПараметрКонецПериода.Значение) - НачалоДня(СтрРезультат.ДатаОплатыПлан))/86400);  
			иначе
				СтрРезультат.ДнейПросрокОплаты = ((НачалоДня(ТекущаяДата()) - НачалоДня(СтрРезультат.ДатаОплатыПлан))/86400);  
			КонецЕсли;
				
			Если СтрРезультат.ДнейПросрокОплаты > 0 Тогда
				СтрРезультат.СуммаПросроченногоДолга = СуммаОстаток;
			Иначе
				СтрРезультат.ДнейПросрокОплаты = 0;
			КонецЕсли;
		КонецЕсли;	
		
		Если СтрРезультат.ДнейПросрокОплаты <> неопределено и СтрРезультат.ДнейПросрокОплаты > 0 Тогда
			СтрРезультат.ПросрокОплаты = "Просроченная задолженность"; 
		ИначеЕсли СтрРезультат.СуммаДолга > 0 тогда 
			СтрРезультат.ПросрокОплаты = "Задолженность"; 
		КонецЕсли;		
	КонецЦикла;
	
	//Обрабатываем оставшиеся деньги оплаты 
	Состояние("Обрабатываем неучтенные оплаты");
	Для каждого СтрДокумент из ТаблицаОплата цикл
		Если СтрДокумент.СуммаОплаты > 0 тогда
			
			//{24.08.2015 Островерхий заявка №42710 
			Если СтрОплата.СуммаОплаты-СтрОплата.СуммаВзаиморасчетовЗачет = 0 Тогда
				Продолжить;
			КонецЕсли; 
			//24.08.2015 Островерхий}
			
			СтрРезультат = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрРезультат,СтрДокумент);
			СтрРезультат.СуммаДолга = - СтрДокумент.СуммаОплаты;
			СтрРезультат.ДатаДокумента = Дата(2999,12,31);
		КонецЕсли;
	КонецЦикла;
	
	//Удалим документы не входящие в период отчета
	тМассивУдаления = Новый Массив;
	
	Для каждого ТекСтрока Из Результат Цикл
		
		тПериод = ?(ТекСтрока.ДатаОплатыФакт=Неопределено,'00010101',ТекСтрока.ДатаОплатыФакт);

		Если НЕ (тПериод >= ПараметрНачалоПериода.Значение И тПериод <= ПараметрКонецПериода.Значение)
			И НЕ тПериод = '00010101' Тогда
		
			тМассивУдаления.Добавить(ТекСтрока);	
		
		КонецЕсли; 	
	
	КонецЦикла; 
	
	Для каждого ЭлементМассива Из тМассивУдаления Цикл
		Результат.Удалить(ЭлементМассива);	
	КонецЦикла; 
	
	//Сообщить("Конец "+ТекущаяДата());
	Возврат Результат;
	
КонецФункции


Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции

#КонецЕсли

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		ПараметрКонецПериода.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДоработатьКомпоновщикПередВыводом()

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
