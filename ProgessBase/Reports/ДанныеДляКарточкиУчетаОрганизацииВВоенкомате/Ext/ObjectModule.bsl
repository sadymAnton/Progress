Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю
	
Функция СформироватьОтчет(Результат, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
		
	ЗначениеПанелипользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ЭтотОбъект);
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	СписокОфицерскихЗваний	=	Новый СписокЗначений;
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.МладшийЛейтенант);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Лейтенант);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.СтаршийЛейтенант);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Капитан);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Майор);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Подполковник);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Полковник);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.ГенералМайор);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.ГенералЛейтенант);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.ГенералПолковник);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.ГенералАрмии);
	СписокОфицерскихЗваний.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.МаршалРоссийскойФедерации);
	
	СписокЗванийПрапорщиков	=	Новый СписокЗначений;
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Прапорщик);
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.СтаршийПрапорщик);
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.МладшийСержант);
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Сержант);
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.СтаршийСержант);
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Старшина);
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Рядовой);
	СписокЗванийПрапорщиков.Добавить(Справочники.ЗваниеГражданскогоВоинскогоУчета.Ефрейтор);
	
	СписокСолдатскихЗваний	=	Новый СписокЗначений;
	
	СписокГодныеКСлужбе = Новый СписокЗначений;
	СписокГодныеКСлужбе.Добавить(Перечисления.ГодностьКВоеннойСлужбе.Годен);
	СписокГодныеКСлужбе.Добавить(Перечисления.ГодностьКВоеннойСлужбе.ГоденСОграничениями);
	СписокГодныеКСлужбе.Добавить(Перечисления.ГодностьКВоеннойСлужбе.ОграниченноГоден);
	
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Офицеры",             СписокОфицерскихЗваний);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Прапорщики",          СписокЗванийПрапорщиков);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Солдаты",			 СписокСолдатскихЗваний);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "СписокГодныеКСлужбе", СписокГодныеКСлужбе);
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, "Организация", );
	
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ВсегоВЗапасе");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ВсегоВЗапасеЗабронировано");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ВсегоРаботающих");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "НегодныхВМирноеВремя");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "НезабронированноБезМобпредписаний");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "НезабронированноСМобпредписанием");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ВсегоВЗапасеНезабронировано");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ВсегоВЗапасеСМобпредписанием");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ОфицеровВЗапасе");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ОфицеровЗабронировано");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ПрапорщиковВЗапасе");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Призывников");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "СолдатВЗапасе");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Руководитель");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФИОРуководителя");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ФамилияИОРуководителя");
	ТиповыеОтчеты.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ДолжностьРуководителя");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаЗначений =  Новый ТаблицаЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ЗначениеПараметра <> Неопределено тогда
		Если Дата(ЗначениеПараметра.Значение) <> '00010101' тогда
			ДатаАктуальности = Дата(ЗначениеПараметра.Значение);
		Иначе
			ДатаАктуальности           = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
			ЗначениеПараметра.Значение = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
		КонецЕсли;
	Иначе
		ДатаАктуальности = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Макет = ПолучитьМакет("КарточкаУчета");
	ОбластьКарточка = Макет.ПолучитьОбласть("Лист1Карточки");
	Результат.Очистить();
	
	Для каждого ДанныеОрганизации из ТаблицаЗначений Цикл
		КодыОрганизации = ОбщегоНазначенияЗК.ПолучитьЗначенияРеквизитов(ДанныеОрганизации.Организация,"НаименованиеПолное,КодПоОКАТО,КодПоОКПО,НаименованиеОКОПФ,КодОКОПФ,НаименованиеОКФС,КодОКФС,КодОКВЭД,КодОКВЭД2,НаименованиеОКВЭД,НаименованиеОКВЭД2,ИНН,ОГРН");
		Если Не ЗначениеЗаполнено(КодыОрганизации.КодОКВЭД2) Тогда
			КодыОрганизации.КодОКВЭД2 = КодыОрганизации.КодОКВЭД
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КодыОрганизации.НаименованиеОКВЭД2) Тогда
			КодыОрганизации.НаименованиеОКВЭД2 = КодыОрганизации.НаименованиеОКВЭД
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры,ДанныеОрганизации);
		ЗаполнитьЗначенияСвойств(ОбластьКарточка.Параметры,КодыОрганизации);
		ОбластьКарточка.Параметры.ЕстьЗабронированные = ЗначениеЗаполнено(ДанныеОрганизации.ВсегоВЗапасеЗабронировано);
		ОбластьКарточка.Параметры.ДатаОтчета 		= Формат(ДатаАктуальности, "ДФ='дд ММММ гггг'");
		ОбластьКарточка.Параметры.ЮридическийАдрес	= УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ДанныеОрганизации.Организация,"Юридический");
		ОбластьКарточка.Параметры.ФактическийАдрес	= УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ДанныеОрганизации.Организация,"Фактический");
		ОбластьКарточка.Параметры.ПочтовыйАдрес		= УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ДанныеОрганизации.Организация,"Почтовый");
		Телефон = УправлениеКонтактнойИнформацией.ПолучитьТелефонИзКонтактнойИнформации(ДанныеОрганизации.Организация);
		ОбластьКарточка.Параметры.ФИОРуководителя	= ?(ЗначениеЗаполнено(ОбластьКарточка.Параметры.ФИОРуководителя), ОбластьКарточка.Параметры.ФИОРуководителя, "") + ?(ЗначениеЗаполнено(Телефон),", " + Телефон,"");
		Результат.Вывести(ОбластьКарточка);
		Если ТаблицаЗначений.Индекс(ДанныеОрганизации) <> ТаблицаЗначений.Количество()-1 тогда
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	КонецЦикла;
	
	//Параметры документа
	Результат.ПолеСверху = 0;
	Результат.ПолеСнизу = 0;
	Результат.ПолеСлева  = 0;
	Результат.ПолеСправа = 0;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Результат.Защита             = Ложь;
	Результат.ТолькоПросмотр     = Ложь;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	Возврат Результат;
		
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Процедура ПередВыводомЭлементРезультата(МакетКомпоновки, ПроцессорКомпоновки, ЭлементРезультата) Экспорт
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки, ПроцессорКомпоновки) Экспорт
	
	
КонецПроцедуры

Процедура ПриВыводеЗаголовкаОтчета(ОбластьЗаголовок) Экспорт
КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	СписокПолейПодстановкиОтборовПоУмолчанию.Вставить("Организация", "ОсновнаяОрганизация");
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию", 
	ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию);
КонецФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Настройка отчета при отработке расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
КонецПроцедуры

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

УправлениеОтчетами.ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных)
