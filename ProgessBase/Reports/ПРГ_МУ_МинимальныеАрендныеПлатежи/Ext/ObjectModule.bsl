
Функция СформироватьОтчетСтарая() Экспорт
	
	ТД = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Макет");
	СекцияОтчет = Макет.ПолучитьОбласть("Отчет");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДС_ГрафикПлатежей.Договор,
	|	ДС_ГрафикПлатежей.ДатаПлатежа,
	|	ДС_ГрафикПлатежей.СуммаПлатежаБезНДС,
	|	ДС_ГрафикПлатежей.FinanceCost
	|ПОМЕСТИТЬ втПлатежи
	|ИЗ
	|	РегистрСведений.ДС_ГрафикПлатежей КАК ДС_ГрафикПлатежей
	|ГДЕ
	|	ДС_ГрафикПлатежей.ДатаПлатежа > ВЫБОР
	|			КОГДА &ПредыдущийПериод < &Период
	|				ТОГДА &ПредыдущийПериод
	|			ИНАЧЕ &Период
	|		КОНЕЦ
	|	//%УсловиеДоговор%
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПлатежи.Договор,
	|	втПлатежи.ДатаПлатежа,
	|	ВЫБОР
	|		КОГДА втПлатежи.ДатаПлатежа МЕЖДУ ДОБАВИТЬКДАТЕ(&Период, СЕКУНДА, 1) И ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, 12)
	|			ТОГДА втПлатежи.СуммаПлатежаБезНДС * КурсыВалютТекущий.Курс
	|	КОНЕЦ КАК ТекущийДоГода,
	|	ВЫБОР
	|		КОГДА втПлатежи.ДатаПлатежа МЕЖДУ ДОБАВИТЬКДАТЕ(&Период, СЕКУНДА, 1) И ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, 12)
	|			ТОГДА втПлатежи.FinanceCost * КурсыВалютТекущий.Курс
	|	КОНЕЦ КАК ТекущийДоГодаФР,
	|	ВЫБОР
	|		КОГДА втПлатежи.ДатаПлатежа МЕЖДУ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, 12), СЕКУНДА, 1) И ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, 12 * 5)
	|			ТОГДА втПлатежи.СуммаПлатежаБезНДС * КурсыВалютТекущий.Курс
	|	КОНЕЦ КАК ТекущийОтГодаДоПяти,
	|	ВЫБОР
	|		КОГДА втПлатежи.ДатаПлатежа МЕЖДУ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, 12), СЕКУНДА, 1) И ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, 12 * 5)
	|			ТОГДА втПлатежи.FinanceCost * КурсыВалютТекущий.Курс
	|	КОНЕЦ КАК ТекущийОтГодаДоПятиФР,
	|	ВЫБОР
	|		КОГДА втПлатежи.ДатаПлатежа > ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, 12 * 5)
	|			ТОГДА втПлатежи.СуммаПлатежаБезНДС * КурсыВалютТекущий.Курс
	|	КОНЕЦ КАК ТекущийСвышеПяти,
	|	ВЫБОР
	|		КОГДА втПлатежи.ДатаПлатежа > ДОБАВИТЬКДАТЕ(&Период, МЕСЯЦ, 12 * 5)
	|			ТОГДА втПлатежи.FinanceCost * КурсыВалютТекущий.Курс
	|	КОНЕЦ КАК ТекущийСвышеПятиФР,
	|	ВЫБОР
	|		КОГДА втПлатежи.ДатаПлатежа МЕЖДУ ДОБАВИТЬКДАТЕ(&ПредыдущийПериод, СЕКУНДА, 1) И ДОБАВИТЬКДАТЕ(&ПредыдущийПериод, МЕСЯЦ, 12)
	|			ТОГДА втПлатежи.СуммаПлатежаБезНДС * КурсыВалютПредыдущий.Курс
	|	КОНЕЦ КАК ПредыдущийДоГода,
	|	ВЫБОР
	|		КОГДА втПлатежи.ДатаПлатежа МЕЖДУ ДОБАВИТЬКДАТЕ(&ПредыдущийПериод, СЕКУНДА, 1) И ДОБАВИТЬКДАТЕ(&ПредыдущийПериод, МЕСЯЦ, 12)
	|			ТОГДА втПлатежи.FinanceCost * КурсыВалютПредыдущий.Курс
	|	КОНЕЦ КАК ПредыдущийДоГодаФР,
	|	ВЫБОР
	|		КОГДА втПлатежи.ДатаПлатежа МЕЖДУ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ПредыдущийПериод, МЕСЯЦ, 12), СЕКУНДА, 1) И ДОБАВИТЬКДАТЕ(&ПредыдущийПериод, МЕСЯЦ, 12 * 5)
	|			ТОГДА втПлатежи.СуммаПлатежаБезНДС * КурсыВалютПредыдущий.Курс
	|	КОНЕЦ КАК ПредыдущийОтГодаДоПяти,
	|	ВЫБОР
	|		КОГДА втПлатежи.ДатаПлатежа МЕЖДУ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ПредыдущийПериод, МЕСЯЦ, 12), СЕКУНДА, 1) И ДОБАВИТЬКДАТЕ(&ПредыдущийПериод, МЕСЯЦ, 12 * 5)
	|			ТОГДА втПлатежи.FinanceCost * КурсыВалютПредыдущий.Курс
	|	КОНЕЦ КАК ПредыдущийОтГодаДоПятиФР,
	|	ВЫБОР
	|		КОГДА втПлатежи.ДатаПлатежа > ДОБАВИТЬКДАТЕ(&ПредыдущийПериод, МЕСЯЦ, 12 * 5)
	|			ТОГДА втПлатежи.СуммаПлатежаБезНДС * КурсыВалютПредыдущий.Курс
	|	КОНЕЦ КАК ПредыдущийСвышеПяти,
	|	ВЫБОР
	|		КОГДА втПлатежи.ДатаПлатежа > ДОБАВИТЬКДАТЕ(&ПредыдущийПериод, МЕСЯЦ, 12 * 5)
	|			ТОГДА втПлатежи.FinanceCost * КурсыВалютПредыдущий.Курс
	|	КОНЕЦ КАК ПредыдущийСвышеПятиФР
	|ПОМЕСТИТЬ втПлатежиПоПериодам
	|ИЗ
	|	втПлатежи КАК втПлатежи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ПериодКурс, ) КАК КурсыВалютТекущий
	|		ПО втПлатежи.Договор.ВалютаВзаиморасчетов = КурсыВалютТекущий.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ПредыдущийПериодКурс, ) КАК КурсыВалютПредыдущий
	|		ПО втПлатежи.Договор.ВалютаВзаиморасчетов = КурсыВалютПредыдущий.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийДоГода), 0) КАК ТекущийДоГода,
	|	-ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийДоГодаФР), 0) КАК ТекущийДоГодаФР,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийДоГода) - СУММА(втПлатежиПоПериодам.ТекущийДоГодаФР), 0) КАК ТекущийДоГодаПС,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийОтГодаДоПяти), 0) КАК ТекущийОтГодаДоПяти,
	|	-ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийОтГодаДоПятиФР), 0) КАК ТекущийОтГодаДоПятиФР,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийОтГодаДоПяти) - СУММА(втПлатежиПоПериодам.ТекущийОтГодаДоПятиФР), 0) КАК ТекущийОтГодаДоПятиПС,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийСвышеПяти), 0) КАК ТекущийСвышеПяти,
	|	-ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийСвышеПятиФР), 0) КАК ТекущийСвышеПятиФР,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийСвышеПяти) - СУММА(втПлатежиПоПериодам.ТекущийСвышеПятиФР), 0) КАК ТекущийСвышеПятиПС,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийДоГода), 0) + ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийОтГодаДоПяти), 0) + ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийСвышеПяти), 0) КАК ТекущийИтого,
	|	-(ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийДоГодаФР), 0) + ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийОтГодаДоПятиФР), 0) + ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийСвышеПятиФР), 0)) КАК ТекущийИтогоФР,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийДоГода) - СУММА(втПлатежиПоПериодам.ТекущийДоГодаФР), 0) + ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийОтГодаДоПяти) - СУММА(втПлатежиПоПериодам.ТекущийОтГодаДоПятиФР), 0) + ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ТекущийСвышеПяти) - СУММА(втПлатежиПоПериодам.ТекущийСвышеПятиФР), 0) КАК ТекущийИтогоПС,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийДоГода), 0) КАК ПредыдущийДоГода,
	|	-ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийДоГодаФР), 0) КАК ПредыдущийДоГодаФР,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийДоГода) - СУММА(втПлатежиПоПериодам.ПредыдущийДоГодаФР), 0) КАК ПредыдущийДоГодаПС,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийОтГодаДоПяти), 0) КАК ПредыдущийОтГодаДоПяти,
	|	-ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийОтГодаДоПятиФР), 0) КАК ПредыдущийОтГодаДоПятиФР,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийОтГодаДоПяти) - СУММА(втПлатежиПоПериодам.ПредыдущийОтГодаДоПятиФР), 0) КАК ПредыдущийОтГодаДоПятиПС,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийСвышеПяти), 0) КАК ПредыдущийСвышеПяти,
	|	-ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийСвышеПятиФР), 0) КАК ПредыдущийСвышеПятиФР,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийСвышеПяти) - СУММА(втПлатежиПоПериодам.ПредыдущийСвышеПятиФР), 0) КАК ПредыдущийСвышеПятиПС,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийДоГода), 0) + ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийОтГодаДоПяти), 0) + ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийСвышеПяти), 0) КАК ПредыдущийИтого,
	|	-(ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийДоГодаФР), 0) + ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийОтГодаДоПятиФР), 0) + ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийСвышеПятиФР), 0)) КАК ПредыдущийИтогоФР,
	|	ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийДоГода) - СУММА(втПлатежиПоПериодам.ПредыдущийДоГодаФР), 0) + ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийОтГодаДоПяти) - СУММА(втПлатежиПоПериодам.ПредыдущийОтГодаДоПятиФР), 0) + ЕСТЬNULL(СУММА(втПлатежиПоПериодам.ПредыдущийСвышеПяти) - СУММА(втПлатежиПоПериодам.ПредыдущийСвышеПятиФР), 0) КАК ПредыдущийИтогоПС
	|ИЗ
	|	втПлатежиПоПериодам КАК втПлатежиПоПериодам");
	
	Запрос.УстановитьПараметр("Период", 				ОтчетнаяДата + 24 * 3600);
	Запрос.УстановитьПараметр("ПредыдущийПериод", 		ПредыдущийОтчетныйПериод + 24 * 3600);
	Запрос.УстановитьПараметр("ПериодКурс",				ОтчетнаяДата);
	Запрос.УстановитьПараметр("ПредыдущийПериодКурс",	ПредыдущийОтчетныйПериод);
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Если ДоговорВидСравнения = ВидСравнения.Равно Тогда
			ТекстУсловияДоговор = " И ДС_ГрафикПлатежей.Договор = &Договор";
		ИначеЕсли ДоговорВидСравнения = ВидСравнения.ВСписке Тогда
			ТекстУсловияДоговор = " И ДС_ГрафикПлатежей.Договор В(&Договор)";
		Иначе
			ТекстУсловияДоговор = " И ДС_ГрафикПлатежей.Договор В ИЕРАРХИИ(&Договор)";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеДоговор%", ТекстУсловияДоговор);
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		СекцияОтчет.Параметры.Заполнить(Выборка);
		
		ТД.Вывести(СекцияОтчет);
		
	КонецЕсли;
	
	Возврат ТД;
	
КонецФункции


Функция СформироватьОтчет() Экспорт
	
	ТД = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГрафикПлатежей.Регистратор,
	|	ГрафикПлатежей.Договор,
	|	МИНИМУМ(ГрафикПлатежей.ДатаПлатежа) КАК НачалоПериода,
	|	МАКСИМУМ(ГрафикПлатежей.ДатаПлатежа) КАК КонецПериода
	|ПОМЕСТИТЬ втВсеПериоды
	|ИЗ
	|	РегистрСведений.ДС_ГрафикПлатежей КАК ГрафикПлатежей
	|ГДЕ
	|	ГрафикПлатежей.ДатаПлатежа <> &ПустаяДата
	|	И (ГрафикПлатежей.Регистратор.ДатаПринятияКУчету <= &ОтчетныйПериод
	|			ИЛИ ГрафикПлатежей.Регистратор.ДатаПринятияКУчету <= &ПредыдущийОтчетныйПериод)
	|//%УсловиеКонтрагент%
	|//%УсловиеДоговор%
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикПлатежей.Регистратор,
	|	ГрафикПлатежей.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеПериоды.Регистратор,
	|	втВсеПериоды.Договор,
	|	втВсеПериоды.НачалоПериода,
	|	втВсеПериоды.КонецПериода
	|ИЗ
	|	втВсеПериоды КАК втВсеПериоды
	|ГДЕ
	|	(&ОтчетныйПериод МЕЖДУ втВсеПериоды.НачалоПериода И втВсеПериоды.КонецПериода)
	|			ИЛИ (&ПредыдущийОтчетныйПериод МЕЖДУ втВсеПериоды.НачалоПериода И втВсеПериоды.КонецПериода)
	|			ИЛИ втВсеПериоды.Регистратор.ДатаПринятияКУчету <= &ОтчетныйПериод
	| 			ИЛИ втВсеПериоды.Регистратор.ДатаПринятияКУчету <= &ПредыдущийОтчетныйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втВсеПериоды");
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстУсловияКонтрагент = " И ГрафикПлатежей.Договор.Владелец = &Контрагент";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеКонтрагент%", ТекстУсловияКонтрагент);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Если ДоговорВидСравнения = ВидСравнения.Равно Тогда
			ТекстУсловияДоговор = " И ГрафикПлатежей.Договор = &Договор";
		ИначеЕсли ДоговорВидСравнения = ВидСравнения.ВСписке Тогда
			ТекстУсловияДоговор = " И ГрафикПлатежей.Договор В(&Договор)";
		Иначе
			ТекстУсловияДоговор = " И ГрафикПлатежей.Договор В ИЕРАРХИИ(&Договор)";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеДоговор%", ТекстУсловияДоговор);
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетнаяДата);
	Запрос.УстановитьПараметр("ПредыдущийОтчетныйПериод", ПредыдущийОтчетныйПериод);
	Запрос.УстановитьПараметр("Минимум", НачалоДня(Мин(ОтчетнаяДата, ПредыдущийОтчетныйПериод)));
	
	ПериодыДействия = Запрос.Выполнить().Выгрузить();
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("ПлатежТекущий1", 	ОписаниеТиповЧисло);
	Данные.Колонки.Добавить("ФРТекущий1", 		ОписаниеТиповЧисло);
	Данные.Колонки.Добавить("ПлатежТекущий2", 	ОписаниеТиповЧисло);
	Данные.Колонки.Добавить("ФРТекущий2", 		ОписаниеТиповЧисло);
	Данные.Колонки.Добавить("ПлатежТекущий3", 	ОписаниеТиповЧисло);
	Данные.Колонки.Добавить("ФРТекущий3", 		ОписаниеТиповЧисло);
	
	Данные.Колонки.Добавить("ПлатежПредыдущий1", 	ОписаниеТиповЧисло);
	Данные.Колонки.Добавить("ФРПредыдущий1", 		ОписаниеТиповЧисло);
	Данные.Колонки.Добавить("ПлатежПредыдущий2", 	ОписаниеТиповЧисло);
	Данные.Колонки.Добавить("ФРПредыдущий2", 		ОписаниеТиповЧисло);
	Данные.Колонки.Добавить("ПлатежПредыдущий3", 	ОписаниеТиповЧисло);
	Данные.Колонки.Добавить("ФРПредыдущий3", 		ОписаниеТиповЧисло);
	
	ЧерезГодОтОтчетной 		= ДобавитьМесяц(ОтчетнаяДата, 12);
	Через5ЛетОтОтчетной 	= ДобавитьМесяц(ОтчетнаяДата, 12*5);
	ЧерезГодОтПредыдущей 	= ДобавитьМесяц(ПредыдущийОтчетныйПериод, 12);
	Через5ЛетОтПредыдущей 	= ДобавитьМесяц(ПредыдущийОтчетныйПериод, 12*5);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДС_ГрафикПлатежей.ДатаПлатежа,
	|	ДС_ГрафикПлатежей.LeasePaymentProvided,
	|	ДС_ГрафикПлатежей.FinanceCost
	|ИЗ
	|	РегистрСведений.ДС_ГрафикПлатежей КАК ДС_ГрафикПлатежей
	|ГДЕ
	|	ДС_ГрафикПлатежей.Регистратор = &Регистратор
	|	И ДС_ГрафикПлатежей.ДатаПлатежа МЕЖДУ &НачалоПериода И &КонецПериода");
	
	ЗапросОстатокПоГрафику = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДС_ГрафикПлатежей.CurrentBalanceClosing КАК Сальдо
	|ИЗ
	|	РегистрСведений.ДС_ГрафикПлатежей КАК ДС_ГрафикПлатежей
	|ГДЕ
	|	ДС_ГрафикПлатежей.Договор = &Договор
	|	И ДС_ГрафикПлатежей.ДатаПлатежа <> &ПустаяДата
	|	И ДС_ГрафикПлатежей.ДатаПлатежа <= &ДатаОстатков
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДС_ГрафикПлатежей.ДатаПлатежа Убыв");
	
	ЗапросОстатокПоГрафику.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	
	Расшифровка = Новый Соответствие;
	
	Для Каждого СтрокаПериода Из ПериодыДействия Цикл
		
		Запрос.УстановитьПараметр("Регистратор", 	СтрокаПериода.Регистратор);
		Запрос.УстановитьПараметр("НачалоПериода", 	СтрокаПериода.НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", 	СтрокаПериода.КонецПериода);
		
		ДатаГрафика = СтрокаПериода.Регистратор.ДатаПринятияКУчету;
		
		СостояниеОС = РегистрыСведений.ОсновныеСредстваМеждународныйУчет.ПолучитьПоследнее(Новый Граница(КонецДня(ОтчетнаяДата), ВидГраницы.Включая), Новый Структура("ОсновноеСредство", СтрокаПериода.Регистратор.Объект));
		ВыбылоНаОтчетнуюДату = СостояниеОС.Состояние = Перечисления.ВидыСостоянийОС.СнятоСУчета;
		СостояниеОС = РегистрыСведений.ОсновныеСредстваМеждународныйУчет.ПолучитьПоследнее(Новый Граница(КонецДня(ПредыдущийОтчетныйПериод), ВидГраницы.Включая), Новый Структура("ОсновноеСредство", СтрокаПериода.Регистратор.Объект));
		ВыбылоНаПредыдущуюДату = СостояниеОС.Состояние = Перечисления.ВидыСостоянийОС.СнятоСУчета;
		
		ЗапросОстатокПоГрафику.УстановитьПараметр("Договор", СтрокаПериода.Договор);
		ЗапросОстатокПоГрафику.УстановитьПараметр("ДатаОстатков", ОтчетнаяДата);
		Выборка = ЗапросОстатокПоГрафику.Выполнить().Выбрать();
		СальдоНулевоеНаОтчетную = Выборка.Следующий() И Выборка.Сальдо = 0;
		ЗапросОстатокПоГрафику.УстановитьПараметр("ДатаОстатков", ПредыдущийОтчетныйПериод);
		Выборка = ЗапросОстатокПоГрафику.Выполнить().Выбрать();
		СальдоНулевоеНаПредыдущую = Выборка.Следующий() И Выборка.Сальдо = 0;
		
		КурсНаОтчетную = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПериода.Договор.ВалютаВзаиморасчетов, ОтчетнаяДата).Курс;
		КурсНаПредыдущую = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПериода.Договор.ВалютаВзаиморасчетов, ПредыдущийОтчетныйПериод).Курс;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаДанных 	= Данные.Добавить();
			ДатаПлатежа 	= Выборка.ДатаПлатежа;
			_Платеж 			= Выборка.LeasePaymentProvided;
			_ФР 				= -Выборка.FinanceCost;
			
			Платеж = Окр(_Платеж * КурсНаОтчетную, 2);
			ФР = Окр(_ФР * КурсНаОтчетную, 2);
			
			Если ДатаГрафика <= ОтчетнаяДата И Не ВыбылоНаОтчетнуюДату И Не СальдоНулевоеНаОтчетную Тогда
				Если ДатаПлатежа > ОтчетнаяДата И ДатаПлатежа <= ЧерезГодОтОтчетной Тогда
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, "ПлатежТекущий1", "ТекущийДоГода", 		Платеж, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, "ФРТекущий1", 	"ТекущийДоГодаФР", 		ФР, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, , 				"ТекущийИтого", 		Платеж, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, , 				"ТекущийИтогоФР", 		ФР, Расшифровка);
				ИначеЕсли ДатаПлатежа > ЧерезГодОтОтчетной И ДатаПлатежа <= Через5ЛетОтОтчетной Тогда
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, "ПлатежТекущий2", "ТекущийОтГодаДоПяти", 	Платеж, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, "ФРТекущий2", 	"ТекущийОтГодаДоПятиФР",ФР, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, , 				"ТекущийИтого", 		Платеж, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, , 				"ТекущийИтогоФР", 		ФР, Расшифровка);
				ИначеЕсли ДатаПлатежа > Через5ЛетОтОтчетной Тогда
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, "ПлатежТекущий3", "ТекущийСвышеПяти", 	Платеж, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, "ФРТекущий3", 	"ТекущийСвышеПятиФР", 	ФР, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, , 				"ТекущийИтого",			Платеж, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, , 				"ТекущийИтогоФР",		ФР, Расшифровка);
				КонецЕсли;
			КонецЕсли;
			
			Платеж = Окр(_Платеж * КурсНаПредыдущую, 2);
			ФР = Окр(_ФР * КурсНаПредыдущую, 2);
			
			Если ДатаГрафика <= ПредыдущийОтчетныйПериод И Не ВыбылоНаПредыдущуюДату И Не СальдоНулевоеНаПредыдущую Тогда
				Если ДатаПлатежа > ПредыдущийОтчетныйПериод И ДатаПлатежа <= ЧерезГодОтПредыдущей Тогда
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, "ПлатежПредыдущий1", 	"ПредыдущийДоГода", 		Платеж, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, "ФРПредыдущий1", 		"ПредыдущийДоГодаФР", 		ФР, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, , 					"ПредыдущийИтого",			Платеж, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, , 					"ПредыдущийИтогоФР", 		ФР, Расшифровка);
				ИначеЕсли ДатаПлатежа > ЧерезГодОтПредыдущей И ДатаПлатежа <= Через5ЛетОтПредыдущей Тогда
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, "ПлатежПредыдущий2", 	"ПредыдущийОтГодаДоПяти", 	Платеж, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, "ФРПредыдущий2", 		"ПредыдущийОтГодаДоПятиФР",	ФР, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, , 					"ПредыдущийИтого",			Платеж, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, , 					"ПредыдущийИтогоФР",		ФР, Расшифровка);
				ИначеЕсли ДатаПлатежа > Через5ЛетОтПредыдущей Тогда
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, "ПлатежПредыдущий3",	"ПредыдущийСвышеПяти", 		Платеж, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, "ФРПредыдущий3", 		"ПредыдущийСвышеПятиФР",	ФР, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, , 					"ПредыдущийИтого",			Платеж, Расшифровка);
					УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, , 					"ПредыдущийИтогоФР",		ФР, Расшифровка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Данные.Свернуть("", "ПлатежТекущий1, ПлатежТекущий2, ПлатежТекущий3, ПлатежПредыдущий1, ПлатежПредыдущий2, ПлатежПредыдущий3,
						| ФРТекущий1, ФРТекущий2, ФРТекущий3, ФРПредыдущий1, ФРПредыдущий2, ФРПредыдущий3");
	
	Макет = ПолучитьМакет("Макет");
	СекцияОтчет = Макет.ПолучитьОбласть("Отчет");
	
	Если Данные.Количество() > 0 Тогда
		
		СтрокаДанных = Данные[0];
		
		СекцияОтчет.Параметры.ТекущийДоГода 		= СтрокаДанных.ПлатежТекущий1;
		СекцияОтчет.Параметры.ТекущийОтГодаДоПяти 	= СтрокаДанных.ПлатежТекущий2;
		СекцияОтчет.Параметры.ТекущийСвышеПяти 		= СтрокаДанных.ПлатежТекущий3;
		СекцияОтчет.Параметры.ТекущийИтого			= СтрокаДанных.ПлатежТекущий1 + СтрокаДанных.ПлатежТекущий2 + СтрокаДанных.ПлатежТекущий3;
		
		СекцияОтчет.Параметры.ТекущийДоГодаФР 		= СтрокаДанных.ФРТекущий1;
		СекцияОтчет.Параметры.ТекущийОтГодаДоПятиФР = СтрокаДанных.ФРТекущий2;
		СекцияОтчет.Параметры.ТекущийСвышеПятиФР 	= СтрокаДанных.ФРТекущий3;
		СекцияОтчет.Параметры.ТекущийИтогоФР		= СтрокаДанных.ФРТекущий1 + СтрокаДанных.ФРТекущий2 + СтрокаДанных.ФРТекущий3;
		
		СекцияОтчет.Параметры.ТекущийДоГодаПС		= СтрокаДанных.ПлатежТекущий1 + СтрокаДанных.ФРТекущий1;
		СекцияОтчет.Параметры.ТекущийОтГодаДоПятиПС	= СтрокаДанных.ПлатежТекущий2 + СтрокаДанных.ФРТекущий2;
		СекцияОтчет.Параметры.ТекущийСвышеПятиПС	= СтрокаДанных.ПлатежТекущий3 + СтрокаДанных.ФРТекущий3;
		СекцияОтчет.Параметры.ТекущийИтогоПС		= (СтрокаДанных.ПлатежТекущий1 + СтрокаДанных.ФРТекущий1) + (СтрокаДанных.ПлатежТекущий2 + СтрокаДанных.ФРТекущий2) + (СтрокаДанных.ПлатежТекущий3 + СтрокаДанных.ФРТекущий3);
		
		СекцияОтчет.Параметры.ПредыдущийДоГода 			= СтрокаДанных.ПлатежПредыдущий1;
		СекцияОтчет.Параметры.ПредыдущийОтГодаДоПяти 	= СтрокаДанных.ПлатежПредыдущий2;
		СекцияОтчет.Параметры.ПредыдущийСвышеПяти 		= СтрокаДанных.ПлатежПредыдущий3;
		СекцияОтчет.Параметры.ПредыдущийИтого			= СтрокаДанных.ПлатежПредыдущий1 + СтрокаДанных.ПлатежПредыдущий2 + СтрокаДанных.ПлатежПредыдущий3;
		
		СекцияОтчет.Параметры.ПредыдущийДоГодаФР 		= СтрокаДанных.ФРПредыдущий1;
		СекцияОтчет.Параметры.ПредыдущийОтГодаДоПятиФР	= СтрокаДанных.ФРПредыдущий2;
		СекцияОтчет.Параметры.ПредыдущийСвышеПятиФР 	= СтрокаДанных.ФРПредыдущий3;
		СекцияОтчет.Параметры.ПредыдущийИтогоФР			= СтрокаДанных.ФРПредыдущий1 + СтрокаДанных.ФРПредыдущий2 + СтрокаДанных.ФРПредыдущий3;
		
		СекцияОтчет.Параметры.ПредыдущийДоГодаПС		= СтрокаДанных.ПлатежПредыдущий1 + СтрокаДанных.ФРПредыдущий1;
		СекцияОтчет.Параметры.ПредыдущийОтГодаДоПятиПС	= СтрокаДанных.ПлатежПредыдущий2 + СтрокаДанных.ФРПредыдущий2;
		СекцияОтчет.Параметры.ПредыдущийСвышеПятиПС		= СтрокаДанных.ПлатежПредыдущий3 + СтрокаДанных.ФРПредыдущий3;
		СекцияОтчет.Параметры.ПредыдущийИтогоПС			= (СтрокаДанных.ПлатежПредыдущий1 + СтрокаДанных.ФРПредыдущий1) + (СтрокаДанных.ПлатежПредыдущий2 + СтрокаДанных.ФРПредыдущий2) + (СтрокаДанных.ПлатежПредыдущий3 + СтрокаДанных.ФРПредыдущий3);
		
	КонецЕсли;
	
	// Шевченков 20170724	
	Макет1 = ПолучитьМакет("Макет1");
	СекцияОтчет1 = Макет1.ПолучитьОбласть("Отчет");
	
	ТД1 = Новый ТабличныйДокумент;
	
	//СчетаКраткосрочныеПлатеж = Новый Массив;
	//СчетаКраткосрочныеПлатеж.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.01.1"));
	//СчетаКраткосрочныеПлатеж.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.01.2"));
	//СчетаКраткосрочныеПлатеж.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.03.1"));
	//СчетаКраткосрочныеПлатеж.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.03.2"));	
	//
	//СчетаДолгосрочные = Новый Массив;
	//СчетаДолгосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.02.1"));	
	//СчетаДолгосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.02.2"));	
	//СчетаДолгосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.04.1"));
	//СчетаДолгосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.04.2"));
	
	мМассив1 = Новый Массив;
	мМассив1.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.01.1"));
	мМассив1.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.03.2"));
	
	мМассив2 = Новый Массив;
	мМассив2.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.АВ.1"));
	мМассив2.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.АВ.3"));
	мМассив2.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.АВ.4"));
	
	мМассив3 = Новый Массив;
	мМассив3.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.02.1"));
	мМассив3.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.02.2"));
	мМассив3.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.04.1"));
	мМассив3.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.04.2"));
	
	мТекущийДоГодаПС = ПолучитьОстатокПоСчету65(КонецДня(ОтчетнаяДата), мМассив1) - (ПолучитьОстатокПоСчету65(КонецДня(ОтчетнаяДата), мМассив2, Истина)) * 100 / 118;
	мТекущийОтГодаДоПятиПС = ПолучитьОстатокПоСчету65(КонецДня(ОтчетнаяДата), мМассив3);
	
	мПредыдущийДоГодаПС = ПолучитьОстатокПоСчету65(КонецДня(ПредыдущийОтчетныйПериод), мМассив1) - (ПолучитьОстатокПоСчету65(КонецДня(ПредыдущийОтчетныйПериод), мМассив2, Истина)) * 100 / 118;
	мПредыдущийОтГодаДоПятиПС = ПолучитьОстатокПоСчету65(КонецДня(ПредыдущийОтчетныйПериод), мМассив3);
	
	Если Данные.Количество() > 0 Тогда		
		
		СекцияОтчет1.Параметры.Заполнить(СекцияОтчет.Параметры);
		
		СекцияОтчет1.Параметры.ТекущийДоГода 		= СекцияОтчет.Параметры.ТекущийДоГода - (СекцияОтчет.Параметры.ТекущийДоГодаПС - мТекущийДоГодаПС);
		СекцияОтчет1.Параметры.ТекущийОтГодаДоПяти 	= СекцияОтчет.Параметры.ТекущийОтГодаДоПяти - (СекцияОтчет.Параметры.ТекущийОтГодаДоПятиПС - мТекущийОтГодаДоПятиПС);
		//СекцияОтчет1.Параметры.ТекущийСвышеПяти 	= СтрокаДанных.ПлатежТекущий3;
		СекцияОтчет1.Параметры.ТекущийИтого			= СекцияОтчет1.Параметры.ТекущийДоГода + СекцияОтчет1.Параметры.ТекущийОтГодаДоПяти + СекцияОтчет1.Параметры.ТекущийСвышеПяти;
		//
		//СекцияОтчет1.Параметры.ТекущийДоГодаФР 		= СтрокаДанных.ФРТекущий1;
		//СекцияОтчет1.Параметры.ТекущийОтГодаДоПятиФР = СтрокаДанных.ФРТекущий2;
		//СекцияОтчет1.Параметры.ТекущийСвышеПятиФР 	= СтрокаДанных.ФРТекущий3;
		//СекцияОтчет1.Параметры.ТекущийИтогоФР		= СтрокаДанных.ФРТекущий1 + СтрокаДанных.ФРТекущий2 + СтрокаДанных.ФРТекущий3;
		//
		СекцияОтчет1.Параметры.ТекущийДоГодаПС			= мТекущийДоГодаПС;
		СекцияОтчет1.Параметры.ТекущийОтГодаДоПятиПС	= мТекущийОтГодаДоПятиПС;
		//СекцияОтчет1.Параметры.ТекущийСвышеПятиПС	= СтрокаДанных.ПлатежТекущий3 + СтрокаДанных.ФРТекущий3;
		СекцияОтчет1.Параметры.ТекущийИтогоПС			= мТекущийДоГодаПС + мТекущийОтГодаДоПятиПС + (СтрокаДанных.ПлатежТекущий3 + СтрокаДанных.ФРТекущий3);
		//
		СекцияОтчет1.Параметры.ПредыдущийДоГода 		= СекцияОтчет.Параметры.ПредыдущийДоГода - (СекцияОтчет.Параметры.ПредыдущийДоГодаПС - мПредыдущийДоГодаПС);
		СекцияОтчет1.Параметры.ПредыдущийОтГодаДоПяти 	= СекцияОтчет.Параметры.ПредыдущийОтГодаДоПяти - (СекцияОтчет.Параметры.ПредыдущийОтГодаДоПятиПС - мПредыдущийОтГодаДоПятиПС);
		//СекцияОтчет1.Параметры.ПредыдущийСвышеПяти 	= СтрокаДанных.ПлатежПредыдущий3;
		СекцияОтчет1.Параметры.ПредыдущийИтого			= СекцияОтчет1.Параметры.ПредыдущийДоГода + СекцияОтчет1.Параметры.ПредыдущийОтГодаДоПяти + СекцияОтчет1.Параметры.ПредыдущийСвышеПяти;
		//
		//СекцияОтчет1.Параметры.ПредыдущийДоГодаФР 		= СтрокаДанных.ФРПредыдущий1;
		//СекцияОтчет1.Параметры.ПредыдущийОтГодаДоПятиФР	= СтрокаДанных.ФРПредыдущий2;
		//СекцияОтчет1.Параметры.ПредыдущийСвышеПятиФР 	= СтрокаДанных.ФРПредыдущий3;
		//СекцияОтчет1.Параметры.ПредыдущийИтогоФР			= СтрокаДанных.ФРПредыдущий1 + СтрокаДанных.ФРПредыдущий2 + СтрокаДанных.ФРПредыдущий3;
		//
		СекцияОтчет1.Параметры.ПредыдущийДоГодаПС			= мПредыдущийДоГодаПС;
		СекцияОтчет1.Параметры.ПредыдущийОтГодаДоПятиПС		= мПредыдущийОтГодаДоПятиПС;
		//СекцияОтчет1.Параметры.ПредыдущийСвышеПятиПС		= СтрокаДанных.ПлатежПредыдущий3 + СтрокаДанных.ФРПредыдущий3;
		СекцияОтчет1.Параметры.ПредыдущийИтогоПС			= мПредыдущийДоГодаПС + мПредыдущийОтГодаДоПятиПС + (СтрокаДанных.ПлатежПредыдущий3 + СтрокаДанных.ФРПредыдущий3);
		
	КонецЕсли;
	ТД1.Вывести(СекцияОтчет1);
	//	
	
	ТД.Вывести(СекцияОтчет);
	
	ТД_Сверка = СформироватьСверку(Расшифровка);
	
	ТД_Авансы = СформироватьСправкуПоАвансам(ТД_Сверка);
	
	Возврат Новый Структура("ТД_Отчет, ТД_Сверка, ТД_Авансы, Расшифровка, ТД1", ТД, ТД_Сверка.ТД, ТД_Авансы, Расшифровка, ТД1);
	
КонецФункции


Функция ПолучитьДанныеПоСчету65(Счета, ТаблицаЗадолженности, ДатаОстатков = Неопределено)
	
	Если ДатаОстатков = Неопределено Тогда
		ДатаОстатков = ОтчетнаяДата;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МеждународныйОстатки.Счет,
	|	МеждународныйОстатки.Субконто1,
	|	МеждународныйОстатки.Субконто2,
	|	МеждународныйОстатки.СуммаОстатокДт,
	|	МеждународныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Международный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (&Счета), &Субконто, ) КАК МеждународныйОстатки
	|ГДЕ Истина
	|//%УсловиеКонтрагент%
	|//%УсловиеДоговор%");
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ТекстУсловияКонтрагент = " И МеждународныйОстатки.Субконто2.Владелец = &Контрагент";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеКонтрагент%", ТекстУсловияКонтрагент);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Если ДоговорВидСравнения = ВидСравнения.Равно Тогда
			ТекстУсловияДоговор = " И МеждународныйОстатки.Субконто2 = &Договор";
		ИначеЕсли ДоговорВидСравнения = ВидСравнения.ВСписке Тогда
			ТекстУсловияДоговор = " И МеждународныйОстатки.Субконто2 В(&Договор)";
		Иначе
			ТекстУсловияДоговор = " И МеждународныйОстатки.Субконто2 В ИЕРАРХИИ(&Договор)";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеДоговор%", ТекстУсловияДоговор);
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли;
	
	Субконто = Новый Массив;
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты);
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Договоры);
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(КонецДня(ДатаОстатков), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Счета", Счета);
	Запрос.УстановитьПараметр("Субконто", Субконто);
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных Из Данные Цикл
		ДобавитьСтрокуДанныхЕслиНужно(Счета, ТаблицаЗадолженности, СтрокаДанных);
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции


Функция СформироватьСверку(Расшифровка)
	
	//Счета = Новый Массив;
	//Счета.Добавить(ПланыСчетов.Международный._РасчетыПоЛизингу);
	
	КраткосрочнаяЗадолженность = Новый ТаблицаЗначений;
	КраткосрочнаяЗадолженность.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	КраткосрочнаяЗадолженность.Колонки.Добавить("К", Новый ОписаниеТипов("Число"));
	КраткосрочнаяЗадолженность.Колонки.Добавить("СуммаПлатеж", Новый ОписаниеТипов("Число"));
	КраткосрочнаяЗадолженность.Колонки.Добавить("СуммаАванс", Новый ОписаниеТипов("Число"));
	КраткосрочнаяЗадолженность.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	ДолгосрочнаяЗадолженность = Новый ТаблицаЗначений;
	ДолгосрочнаяЗадолженность.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ДолгосрочнаяЗадолженность.Колонки.Добавить("К", Новый ОписаниеТипов("Число"));
	ДолгосрочнаяЗадолженность.Колонки.Добавить("СуммаПлатеж", Новый ОписаниеТипов("Число"));
	ДолгосрочнаяЗадолженность.Колонки.Добавить("СуммаАванс", Новый ОписаниеТипов("Число"));
	ДолгосрочнаяЗадолженность.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	ЗадолженностьПредыдущийПериодАванс = КраткосрочнаяЗадолженность.СкопироватьКолонки();
	
	СчетаКраткосрочные = Новый Массив;
	СчетаКраткосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.01.1"));
	СчетаКраткосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.01.2"));
	СчетаКраткосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.03.1"));
	СчетаКраткосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.03.2"));
	СчетаКраткосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.АВ.1"));
	СчетаКраткосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.АВ.2"));
	СчетаКраткосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.АВ.3"));
	СчетаКраткосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.АВ.4"));
	
	СчетаКраткосрочныеПлатеж = Новый Массив;
	СчетаКраткосрочныеПлатеж.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.01.1"));
	СчетаКраткосрочныеПлатеж.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.01.2"));
	СчетаКраткосрочныеПлатеж.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.03.1"));
	СчетаКраткосрочныеПлатеж.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.03.2"));	
	
	СчетаКраткосрочныеАванс = Новый Массив;
	СчетаКраткосрочныеАванс.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.АВ.1"));
	СчетаКраткосрочныеАванс.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.АВ.2"));
	СчетаКраткосрочныеАванс.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.АВ.3"));
	СчетаКраткосрочныеАванс.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.АВ.4"));	
	
	СчетаДолгосрочные = Новый Массив;
	СчетаДолгосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.02.1"));
	СчетаДолгосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.02.1"));
	СчетаДолгосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.04.1"));
	СчетаДолгосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.04.2"));
	СчетаДолгосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.05"));
	СчетаДолгосрочные.Добавить(ПланыСчетов.Международный.НайтиПоКоду("65.06"));
	
	ПолучитьДанныеПоСчету65(СчетаКраткосрочные, КраткосрочнаяЗадолженность);
	
	ПолучитьДанныеПоСчету65(СчетаДолгосрочные, ДолгосрочнаяЗадолженность);
	
	//Для Каждого СтрокаДанных Из Данные Цикл
	//	ДобавитьСтрокуДанныхЕслиНужно(СчетаДолгосрочные, ДолгосрочнаяЗадолженность, СтрокаДанных);
	//КонецЦикла;
	
	ТД = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("Сверка");
	
	Задолженность = КраткосрочнаяЗадолженность.Скопировать();
	Для Каждого СтрокаТаблицыИсточника Из ДолгосрочнаяЗадолженность Цикл
		ЗаполнитьЗначенияСвойств(Задолженность.Добавить(), СтрокаТаблицыИсточника);
	КонецЦикла;
	
	ВывестиЗадолженность(ТД, Макет, КраткосрочнаяЗадолженность, Расшифровка, Новый Структура("ТекущийДоГода, ТекущийДоГодаФР"), "Краткосрочная задолженность", СчетаКраткосрочные, СчетаКраткосрочныеПлатеж, СчетаКраткосрочныеАванс);
	
	ВывестиЗадолженность(ТД, Макет, ДолгосрочнаяЗадолженность, Расшифровка, Новый Структура("ТекущийОтГодаДоПяти, ТекущийОтГодаДоПятиФР, ТекущийСвышеПяти, ТекущийСвышеПятиФР"), "Долгосрочная задолженность", СчетаДолгосрочные, СчетаДолгосрочные, СчетаДолгосрочные);
	
	ПолучитьДанныеПоСчету65(СчетаКраткосрочныеАванс, ЗадолженностьПредыдущийПериодАванс, ПредыдущийОтчетныйПериод);	
	
	Возврат Новый Структура("ТД, Задолженность, ЗадолженностьПредыдущийПериодАванс", ТД, Задолженность, ЗадолженностьПредыдущийПериодАванс);
	
КонецФункции


Функция ДобавитьСтрокуДанныхЕслиНужно(Счета, ТаблицаЗадолженности, СтрокаДанных)
	
	Если Счета.Найти(СтрокаДанных.Счет) <> Неопределено Тогда
		СтрокаПоДоговору = ТаблицаЗадолженности.Найти(СтрокаДанных.Субконто2, "Договор");
		Если СтрокаПоДоговору = Неопределено Тогда
			СтрокаПоДоговору = ТаблицаЗадолженности.Добавить();
			ДоговорИзСтроки = СтрокаДанных.Субконто2;
			СтавкаНДС = ДоговорИзСтроки.ДС_СтавкаНДС;
			СтрокаПоДоговору.Договор = ДоговорИзСтроки;
			Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Или СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				СтрокаПоДоговору.К = 1;
			ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Или СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
				СтрокаПоДоговору.К = 100/118;
			Иначе
				СтрокаПоДоговору.К = 100/110;
			КонецЕсли;
			СтрокаПоДоговору.СуммаПлатеж = 0; СтрокаПоДоговору.СуммаАванс = 0; СтрокаПоДоговору.Сумма = 0;
		КонецЕсли;
		Если Найти(СтрокаДанных.Счет.Код, "АВ") > 0 Тогда
			СтрокаПоДоговору.СуммаАванс = СтрокаПоДоговору.СуммаАванс + СтрокаДанных.СуммаОстатокДт;
			//СтрокаПоДоговору.СуммаПлатеж = 0;
		Иначе
			//СтрокаПоДоговору.СуммаАванс = 0;
			СтрокаПоДоговору.СуммаПлатеж = СтрокаПоДоговору.СуммаПлатеж + СтрокаДанных.СуммаОстатокКт;
		КонецЕсли;
		СтрокаПоДоговору.Сумма = СтрокаПоДоговору.СуммаПлатеж - СтрокаПоДоговору.СуммаАванс;
	КонецЕсли;
	
КонецФункции


Функция ВывестиЗадолженность(ТД, Макет, ТаблицаЗадолженности, Расшифровка, СтруктураКлючейРасшифровки, СтрокаВидЗадолженности, Счета, СчетаПлатеж, СчетаАванс)
	
	ТаблицаЗадолженности.Свернуть("Договор", "СуммаПлатеж, СуммаАванс, Сумма");
	ТаблицаЗадолженности.Колонки.Добавить("СуммаПоРегистру");
	
	Для Каждого КлючЗначениеСтруктурыРасшифровки Из СтруктураКлючейРасшифровки Цикл
		Если Расшифровка[КлючЗначениеСтруктурыРасшифровки.Ключ] <> Неопределено Тогда
			Для Каждого КлючЗначение Из Расшифровка[КлючЗначениеСтруктурыРасшифровки.Ключ] Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаЗадолженности.Добавить(), Новый Структура("Договор, СуммаПоРегистру", КлючЗначение.Ключ, КлючЗначение.Значение));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗадолженности.Свернуть("Договор", "СуммаПоРегистру, СуммаПлатеж, СуммаАванс, Сумма");
	
	СекцияВидЗадолженности = Макет.ПолучитьОбласть("ВидЗадолженности");
	СекцияЗаголовок = Макет.ПолучитьОбласть("ЗаголовокК"); //+ Лев(СтрокаВидЗадолженности, 1));
	СекцияСтрокаСверки = Макет.ПолучитьОбласть("СтрокаСверкиК"); //+ Лев(СтрокаВидЗадолженности, 1));
	
	СекцияВидЗадолженности.Параметры.ВидЗадолженности = СтрокаВидЗадолженности;
	
	ТД.Вывести(СекцияВидЗадолженности);
	
	ТД.Вывести(СекцияЗаголовок);
	
	Для Каждого СтрокаЗадолженности Из ТаблицаЗадолженности Цикл
		
		СекцияСтрокаСверки.Параметры.Заполнить(Новый Структура("Договор, СуммаРегистр, СуммаПлатеж, СуммаАванс, СуммаМСФО, Разница",
			СтрокаЗадолженности.Договор, СтрокаЗадолженности.СуммаПоРегистру, СтрокаЗадолженности.СуммаПлатеж, СтрокаЗадолженности.СуммаАванс,
			СтрокаЗадолженности.Сумма, СтрокаЗадолженности.СуммаПоРегистру - СтрокаЗадолженности.Сумма
		));
		
		СекцияСтрокаСверки.Параметры.РасшифровкаСуммаРегистр = Новый Структура("СуммаРегистр, Счета", СтрокаЗадолженности.Договор, Счета);
		СекцияСтрокаСверки.Параметры.РасшифровкаСуммаМСФО = Новый Структура("СуммаМСФО, Счета", СтрокаЗадолженности.Договор, Счета);
		
		//Если СтрокаВидЗадолженности = "Краткосрочная задолженность" Тогда
			СекцияСтрокаСверки.Параметры.РасшифровкаСуммаПлатеж = Новый Структура("СуммаПлатеж, Счета", СтрокаЗадолженности.Договор, СчетаПлатеж);
		Если СтрокаЗадолженности.СуммаАванс > 0 Тогда
			СекцияСтрокаСверки.Параметры.РасшифровкаСуммаАванс = Новый Структура("СуммаАванс, Счета", СтрокаЗадолженности.Договор, СчетаАванс);
		КонецЕсли;
		//КонецЕсли;
		
		ТД.Вывести(СекцияСтрокаСверки);
		
	КонецЦикла;
	
КонецФункции


Функция СформироватьСправкуПоАвансам(ТД_Сверка)
	
	ТД = Новый ТабличныйДокумент;
	
	Данные = ТД_Сверка.Задолженность;
	
	Данные.Свернуть("К", "СуммаАванс");
	
	Для Каждого СтрокаДанных Из Данные Цикл
		СтрокаДанных.СуммаАванс = СтрокаДанных.СуммаАванс * СтрокаДанных.К;
	КонецЦикла;
	
	ТД.Область(2, 2).Текст = "Сумма авансовых платежей по лизингу без НДС: " + Формат(Данные.Итог("СуммаАванс"), "ЧДЦ=2; ЧН=");
	
	Данные = ТД_Сверка.ЗадолженностьПредыдущийПериодАванс;
	
	Данные.Свернуть("К", "СуммаАванс");
	
	Для Каждого СтрокаДанных Из Данные Цикл
		СтрокаДанных.СуммаАванс = СтрокаДанных.СуммаАванс * СтрокаДанных.К;
	КонецЦикла;
	
	ТД.Область(3, 2).Текст = "Сумма авансовых платежей по лизингу за пред. период без НДС: " + Формат(Данные.Итог("СуммаАванс"), "ЧДЦ=2; ЧН=");
	
	Возврат ТД;
	
КонецФункции


Процедура УстановитьДанныеИРасшифровку(СтрокаПериода, СтрокаДанных, СвойствоСтрокиДанных, СвойствоРасшифровки, Сумма, Расшифровка)
	
	Если СвойствоСтрокиДанных <> Неопределено Тогда
		СтрокаДанных[СвойствоСтрокиДанных] = Сумма;
	КонецЕсли;
	
	Если Расшифровка[СвойствоРасшифровки] = Неопределено Тогда
		Расшифровка[СвойствоРасшифровки] = Новый Соответствие;
	КонецЕсли;
	
	Если Расшифровка[СвойствоРасшифровки][СтрокаПериода.Договор] = Неопределено Тогда
		Расшифровка[СвойствоРасшифровки][СтрокаПериода.Договор] = 0;
	КонецЕсли;
	
	Расшифровка[СвойствоРасшифровки][СтрокаПериода.Договор] = Расшифровка[СвойствоРасшифровки][СтрокаПериода.Договор] + Сумма;
	
КонецПроцедуры


Функция ПолучитьОстатокПоСчету65(ДатаОстатков, СписокСчетов, ВернутьДТ = Ложь)
	
	Субконто = Новый Массив;
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Контрагенты);
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоМеждународные.Договоры);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	сумма(МеждународныйОстатки.СуммаОстатокДт) КАК СуммаОстатокДт,
	|	сумма(МеждународныйОстатки.СуммаОстатокКт) КАК СуммаОстатокКт,
	|	МеждународныйОстатки.Организация
	|ИЗ
	|	РегистрБухгалтерии.Международный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (&Счета), &Субконто, ) КАК МеждународныйОстатки
	|ГДЕ Истина
	|//%УсловиеКонтрагент%
	|//%УсловиеДоговор%
	| СГРУППИРОВАТЬ ПО Организация";
		
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ТекстУсловияКонтрагент = " И МеждународныйОстатки.Субконто2.Владелец = &Контрагент";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеКонтрагент%", ТекстУсловияКонтрагент);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Если ДоговорВидСравнения = ВидСравнения.Равно Тогда
			ТекстУсловияДоговор = " И МеждународныйОстатки.Субконто2 = &Договор";
		ИначеЕсли ДоговорВидСравнения = ВидСравнения.ВСписке Тогда
			ТекстУсловияДоговор = " И МеждународныйОстатки.Субконто2 В(&Договор)";
		Иначе
			ТекстУсловияДоговор = " И МеждународныйОстатки.Субконто2 В ИЕРАРХИИ(&Договор)";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//%УсловиеДоговор%", ТекстУсловияДоговор);
		Запрос.УстановитьПараметр("Договор", Договор);
	КонецЕсли;		

	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Субконто", Субконто);
	Запрос.УстановитьПараметр("Счета", СписокСчетов);

	Результат = Запрос.Выполнить();	

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ?(ВернутьДт, Результат.Выгрузить().Итог("СуммаОстатокДт"), Результат.Выгрузить().Итог("СуммаОстатокКт"));
	КонецЦикла;
	
	Возврат 0;
		
КонецФункции

