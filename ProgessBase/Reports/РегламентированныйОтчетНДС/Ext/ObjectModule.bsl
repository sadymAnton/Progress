// Хранит таблицу значений - состав показателей отчета.
Перем мТаблицаСоставПоказателей Экспорт;

// Хранит структуру - состав показателей отчета,
// значение которых автоматически заполняется по учетным данным.
Перем мСтруктураВариантыЗаполнения Экспорт;

// Хранит дерево значений - структуру листов отчета.
Перем мДеревоСтраницОтчета Экспорт;

// Хранит признак выбора печатных листов
Перем мЕстьВыбранные Экспорт;

// Хранит имя выбранной формы отчета
Перем мВыбраннаяФорма Экспорт;

// Хранит признак скопированной формы.
Перем мСкопированаФорма Экспорт;

// Хранит ссылку на документ, хранящий данные отчета
Перем мСохраненныйДок Экспорт;

Перем мВерсияФормы Экспорт;

// Следующие переменные хранят границы периода построения отчета
// и периодичность
Перем мДатаНачалаПериодаОтчета Экспорт;
Перем мДатаКонцаПериодаОтчета  Экспорт;

Перем мДатаНачалаАвтозаполнения Экспорт;
Перем мДатаКонцаАвтозаполнения  Экспорт;

Перем мПериодичность Экспорт;

// Переключатели
Перем мСчетчикСтраниц Экспорт; // флажок на форме выбора страниц, если Истина, то пересчет автоматический убрать
Перем мАвтоВыборКодов Экспорт; // для флажка "отключить выбор значений из списка"
Перем мПроверятьСоотношенияПриПечатиИВыгрузки Экспорт; // Флаг, для запуска КС

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мЗаписьЗапрещена Экспорт;

Перем мИнтервалАвтосохранения Экспорт;

Перем мРезультатПоиска Экспорт;// таблица с результатами поиска
Перем мСчетчикиСтраницПриПоиске Экспорт;// таблица со счетчиками номеров листов при поиске
Перем мТаблицаФормОтчета Экспорт;

Перем мЗаписываетсяНовыйДокумент Экспорт;
Перем мВариант Экспорт;

Перем мФормыИФорматы Экспорт;
Перем мВерсияОтчета Экспорт;

Перем мГруппаОрганизаций Экспорт;

Перем мПечатьБезШтрихкодаРазрешена Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СоздатьДеревоФормИФорматов()
	
	мФормыИФорматы = Новый ДеревоЗначений;
	мФормыИФорматы.Колонки.Добавить("Код");
	мФормыИФорматы.Колонки.Добавить("ДатаПриказа");
	мФормыИФорматы.Колонки.Добавить("НомерПриказа");
	мФормыИФорматы.Колонки.Добавить("ДатаНачалаДействия");
	мФормыИФорматы.Колонки.Добавить("ДатаОкончанияДействия");
	мФормыИФорматы.Колонки.Добавить("ИмяОбъекта");
	мФормыИФорматы.Колонки.Добавить("Описание");
	Возврат мФормыИФорматы;
	
КонецФункции

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
			ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', Описание = "")
	
	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
			ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "")
	
	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция СтрокаЧГ0(ИсходноеЧисло) Экспорт // враппер
	
	Возврат РегламентированнаяОтчетность.СтрокаЧГ0(ИсходноеЧисло);
	
КонецФункции

Процедура Инкр(ИнкрементируемоеЗначение) Экспорт
	
	ИнкрементируемоеЗначение = ИнкрементируемоеЗначение + 1;
	
КонецПроцедуры

Функция РазложитьФИО(Знач ФИОСтр) Экспорт
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок) Экспорт
	
	Результат = Ложь;
	
	Значения = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

Функция ЕстьПоказательПоМестуРазмещения(МестоРазмещенияДанных, АдресДанных) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		Результат = МестоРазмещенияДанных.Свойство(АдресДанных);
	Иначе
		// Это должны быть данные в поле табличного документа.
		Результат = МестоРазмещенияДанных.Области.Найти(АдресДанных) <> Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеИзМестаРазмещения(МестоРазмещенияДанных, АдресДанных) Экспорт
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		ЗначениеВСтруктуре = Неопределено;
		Если МестоРазмещенияДанных.Свойство(АдресДанных, ЗначениеВСтруктуре) Тогда
			Возврат ЗначениеВСтруктуре;
		Иначе
			ВызватьИсключение "Невозможно получить данные из структуры: поле " + АдресДанных + " не существует";
		КонецЕсли;
	Иначе
		// Это должны быть данные в поле табличного документа.
		Возврат МестоРазмещенияДанных.Области[АдресДанных].Значение;
	КонецЕсли;
	
КонецФункции

Процедура ПоместитьДанныеПоМестуРазмещения(МестоРазмещенияДанных, АдресДанных, ЗначениеДанных) Экспорт
	
	Если ТипЗнч(МестоРазмещенияДанных) = Тип("Структура") Тогда
		МестоРазмещенияДанных.Вставить(АдресДанных, ЗначениеДанных);
	Иначе
		МестоРазмещенияДанных.Области[АдресДанных].Значение = ЗначениеДанных;
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML(Макет) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция УдовлетворяетТребованиям_ДатаТип(Знач ПроверяемаяДата) Экспорт
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(ПроверяемаяДата) Тогда
		Если ТипЗнч(ПроверяемаяДата) <> Тип("Дата") Тогда
			День  = Число(Сред(ПроверяемаяДата, 1, 2));
			Месяц = Число(Сред(ПроверяемаяДата, 4, 2));
			Год   = Число(Сред(ПроверяемаяДата, 7, 4));
			ПроверяемаяДата = Дата(Год, Месяц, День);
		КонецЕсли;
		Результат = (ПроверяемаяДата >= '1900-01-01' И ПроверяемаяДата <= '2099-12-31');
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает показатели декларации по НДС
// Для версии отчета ФормаОтчета2009Кв4
Функция ПолучитьПоказателиРаздела3ФормаОтчета2009Кв4(ПараметрыОтчета) Экспорт
	
	Запрос = Новый Запрос;
	СтруктураПоказателейРаздела3 = Новый Структура;
		
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("СУчетомКорректировок", ПараметрыОтчета.СУчетомКорректировок);
	Запрос.УстановитьПараметр("ВесьОборотЗаПериод", ?(ПараметрыОтчета.Свойство("ВесьОборотЗаПериод"),ПараметрыОтчета.ВесьОборотЗаПериод, Ложь));
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", ПараметрыОтчета.КонецПериодаУчитываемыхКорректировок);
	
	// События	
	СобытиеРеализация = Новый СписокЗначений;
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
	СобытиеРеализация.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеРеализация", СобытиеРеализация);
	
	СобытиеПолученАванс = Новый СписокЗначений;
	СобытиеПолученАванс.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	Запрос.УстановитьПараметр("СобытиеПолученАванс", СобытиеПолученАванс);
	
	СобытиеНачисленНДС = Новый СписокЗначений;
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СобытиеНачисленНДС.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Запрос.УстановитьПараметр("СобытиеНачисленНДС", СобытиеНачисленНДС);
	
	СобытиеВосстановлениеНДС = Новый СписокЗначений;
	СобытиеВосстановлениеНДС.Добавить(Перечисления.СобытияПоНДСПродажи.ВосстановлениеНДС);
	Запрос.УстановитьПараметр("СобытиеВосстановлениеНДС", СобытиеВосстановлениеНДС);
	
	СобытиеПредъявленКВычетуНДС = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету);
	СобытиеПредъявленКВычетуНДС.Добавить(Перечисления.СобытияПоНДСПокупки.ВосстановленНДС);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС", СобытиеПредъявленКВычетуНДС);
	
	// Виды ценностей
	ВидыЦенностейНеРеализация = Новый СписокЗначений;
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностейНеРеализация.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	
	ВидыЦенностейСтр010_040 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейНеРеализация.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр010_040.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр010_040", ВидыЦенностейСтр010_040);
	
	ВидыЦенностейСтр060 = Новый СписокЗначений;
	ВидыЦенностейСтр060.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр060", ВидыЦенностейСтр060);
	
	ВидыЦенностейСтр070 = Новый СписокЗначений;
	ВидыЦенностейСтр070.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр070", ВидыЦенностейСтр070);
	
	ВидыЦенностейСтр080 =  Новый СписокЗначений;
	ВидыЦенностейСтр080.Добавить(Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр080", ВидыЦенностейСтр080);
	
	ВидыЦенностейСтр110 =  Новый СписокЗначений;
	ВидыЦенностейСтр110.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр110", ВидыЦенностейСтр110);
	
	ВидыЦенностейСтр140 =  Новый СписокЗначений;
	ВидыЦенностейСтр140.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр140", ВидыЦенностейСтр140);
	
	ВидыЦенностейСтр150 =  Новый СписокЗначений;
	ВидыЦенностейСтр150.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр150", ВидыЦенностейСтр150);
	
	ВидыЦенностейСтр160 =  Новый СписокЗначений;
	ВидыЦенностейСтр160.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр160", ВидыЦенностейСтр160);
	
	ВидыЦенностейСтр180 =  Новый СписокЗначений;
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
	ВидыЦенностейСтр180.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр180", ВидыЦенностейСтр180);
	
	ВидыЦенностейСтр200 =  Новый СписокЗначений;
	ВидыЦенностейСтр200.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр200", ВидыЦенностейСтр200);
	
	ВидыЦенностейСтр210 =  Новый СписокЗначений;
	ВидыЦенностейСтр210.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностейСтр210.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	ВидыЦенностейСтр210.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	Запрос.УстановитьПараметр("ВидыЦенностейСтр210", ВидыЦенностейСтр210);
	
	ВидыЦенностейСтр130 = Новый СписокЗначений;
	Для Каждого ВидЦенности Из Перечисления.ВидыЦенностей Цикл
		Если ВидыЦенностейСтр150.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр160.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр180.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр200.НайтиПоЗначению(ВидЦенности) = Неопределено 
			И ВидыЦенностейСтр210.НайтиПоЗначению(ВидЦенности) = Неопределено Тогда
			ВидыЦенностейСтр130.Добавить(ВидЦенности);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ВидыЦенностейСтр130", ВидыЦенностейСтр130);
	
	// Ставки НДС
	Запрос.УстановитьПараметр("СтавкаНДС10", 	 Перечисления.СтавкиНДС.НДС10);
	Запрос.УстановитьПараметр("СтавкаНДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	Запрос.УстановитьПараметр("СтавкаНДС18",	 Перечисления.СтавкиНДС.НДС18);
	Запрос.УстановитьПараметр("СтавкаНДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСЗаписиКнигиПродажОбороты.Событие,
	               |	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	               |	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	               |	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	               |	НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |ПОМЕСТИТЬ НДСЗаписиКнигиПродажОбороты
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Организация В (&Организация)
	               |				И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПродажОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НДСЗаписиКнигиПродажОбороты.Событие,
	               |	НДСЗаписиКнигиПродажОбороты.СтавкаНДС,
	               |	НДСЗаписиКнигиПродажОбороты.ВидЦенности,
	               |	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот,
	               |	НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериодаУчитываемыхКорректировок,
	               |			,
	               |			Организация В (&Организация)
	               |				И ВЫБОР
				   |					КОГДА &ВесьОборотЗаПериод = ИСТИНА
				   |						ТОГДА ЗаписьДополнительногоЛиста
	               |					КОГДА &СУчетомКорректировок = ИСТИНА
	               |						ТОГДА ЗаписьДополнительногоЛиста
	               |								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты";
				   
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	               |						И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300001003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	               |						И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300002003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	               |						И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС18_118)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300003003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеРеализация)
	               |						И НДСЗаписиКнигиПродажОбороты.СтавкаНДС В (&СтавкаНДС10_110)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр010_040)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300004003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр060)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300006003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеПолученАванс)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр070)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300007005,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр080)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот + НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300008003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеНачисленНДС)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр080)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300008005,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300009005,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПродажОбороты.Событие В (&СобытиеВосстановлениеНДС)
	               |						И НДСЗаписиКнигиПродажОбороты.ВидЦенности В (&ВидыЦенностейСтр110)
	               |					ТОГДА НДСЗаписиКнигиПродажОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300011005
	               |ИЗ
	               |	НДСЗаписиКнигиПродажОбороты КАК НДСЗаписиКнигиПродажОбороты";
	
	ПоказателиПоКнигеПродаж = Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НДСЗаписиКнигиПокупокОбороты.Событие,
	               |	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	               |	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	               |	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
	               |	НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |ПОМЕСТИТЬ НДСЗаписиКнигиПокупокОбороты
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Организация В (&Организация)
	               |				И (НЕ ЗаписьДополнительногоЛиста)) КАК НДСЗаписиКнигиПокупокОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НДСЗаписиКнигиПокупокОбороты.Событие,
	               |	НДСЗаписиКнигиПокупокОбороты.СтавкаНДС,
	               |	НДСЗаписиКнигиПокупокОбороты.ВидЦенности,
	               |	НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот,
	               |	НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |ИЗ
	               |	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериодаУчитываемыхКорректировок,
	               |			,
	               |			Организация В (&Организация)
	               |				И ВЫБОР
				   |					КОГДА &ВесьОборотЗаПериод = ИСТИНА
				   |						ТОГДА ЗаписьДополнительногоЛиста
	               |					КОГДА &СУчетомКорректировок = ИСТИНА
	               |						ТОГДА ЗаписьДополнительногоЛиста
	               |								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты";
				   
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр130)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300013003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр140)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300014003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр150)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300015003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр160)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300016003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр180)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300018003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр200)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300020003,
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(ВЫБОР
	               |				КОГДА НДСЗаписиКнигиПокупокОбороты.Событие В (&СобытиеПредъявленКВычетуНДС)
	               |						И НДСЗаписиКнигиПокупокОбороты.ВидЦенности В (&ВидыЦенностейСтр210)
	               |					ТОГДА НДСЗаписиКнигиПокупокОбороты.НДСОборот
	               |			КОНЕЦ КАК ЧИСЛО(15, 2))), 0) КАК П000300021003
	               |ИЗ
	               |	НДСЗаписиКнигиПокупокОбороты КАК НДСЗаписиКнигиПокупокОбороты";
				   
	ПоказателиПоКнигеПокупок = Запрос.Выполнить();
	
	СтруктураПоказателейРаздела3.Вставить("ПоказателиПоКнигеПокупок",	ПоказателиПоКнигеПокупок);
	СтруктураПоказателейРаздела3.Вставить("ПоказателиПоКнигеПродаж", 	ПоказателиПоКнигеПродаж);
	
	Возврат СтруктураПоказателейРаздела3;
	
КонецФункции

Функция ПолучитьПоказателиРаздела4ФормаОтчета2009Кв4(ПараметрыОтчета) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("СУчетомКорректировок", ПараметрыОтчета.СУчетомКорректировок);
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", ПараметрыОтчета.КонецПериодаУчитываемыхКорректировок);
	
	// События
	СобытиеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПодтвержденаСтавка0", СобытиеПодтвержденаСтавка0);
	
	СобытиеПредъявленКВычетуНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНДС0", СобытиеПредъявленКВычетуНДС0);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ЧИСЛО(15, 2)) КАК П000400000103_1
	|ПОМЕСТИТЬ НДСЗаписиКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И Событие В (&СобытиеПредъявленКВычетуНДС0)
	|				И НЕ ЗаписьДополнительногоЛиста) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ЧИСЛО(15, 2))
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериодаУчитываемыхКорректировок,
	|			,
	|			Организация В (&Организация)
	|				И Событие В (&СобытиеПредъявленКВычетуНДС0)
	|				И ВЫБОР
	|					КОГДА &СУчетомКорректировок = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупок.П000400000103_1), 0) КАК П000400000103_1
	|ИЗ
	|	НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок";
				   
	СуммаНалога = Запрос.Выполнить();

	Возврат Новый Структура("СуммаНалога", СуммаНалога);

КонецФункции

Функция ПолучитьПоказателиРаздела6ФормаОтчета2009Кв4(ПараметрыОтчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("СУчетомКорректировок", ПараметрыОтчета.СУчетомКорректировок);
	Запрос.УстановитьПараметр("КонецПериодаУчитываемыхКорректировок", ПараметрыОтчета.КонецПериодаУчитываемыхКорректировок);
	
	// События
	СобытиеНеПодтвержденаСтавка0 = Новый СписокЗначений;
	СобытиеНеПодтвержденаСтавка0.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеНеПодтвержденаСтавка0", СобытиеНеПодтвержденаСтавка0);

	СобытиеПредъявленКВычетуНеПодтвержденНДС0 = Новый СписокЗначений;
	СобытиеПредъявленКВычетуНеПодтвержденНДС0.Добавить(Перечисления.СобытияПоНДСПокупки.НеПодтвержденаСтавка0);
	Запрос.УстановитьПараметр("СобытиеПредъявленКВычетуНеПодтвержденНДС0", СобытиеПредъявленКВычетуНеПодтвержденНДС0);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК ЧИСЛО(15, 2))) КАК П000600000102_1,
	|	СУММА(ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.НДСОборот КАК ЧИСЛО(15, 2))) КАК П000600000103_1
	|ПОМЕСТИТЬ НДСЗаписиКнигиПродаж
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И НЕ ЗаписьДополнительногоЛиста
	|				И Событие В (&СобытиеНеПодтвержденаСтавка0)) КАК НДСЗаписиКнигиПродажОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК ЧИСЛО(15, 2))),
	|	СУММА(ВЫРАЗИТЬ(НДСЗаписиКнигиПродажОбороты.НДСОборот КАК ЧИСЛО(15, 2)))
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериодаУчитываемыхКорректировок,
	|			,
	|			Организация В (&Организация)
	|				И Событие В (&СобытиеНеПодтвержденаСтавка0)
	|				И ВЫБОР
	|					КОГДА &СУчетомКорректировок = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НДСЗаписиКнигиПродажОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродаж.П000600000102_1), 0) КАК П000600000102_1,
	|	ЕСТЬNULL(СУММА(НДСЗаписиКнигиПродаж.П000600000103_1), 0) КАК П000600000103_1
	|ИЗ
	|	НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж";
				   
	Начисления = Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ЧИСЛО(15, 2))) КАК П000600000104_1
	|ПОМЕСТИТЬ НДСЗаписиКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация В (&Организация)
	|				И НЕ ЗаписьДополнительногоЛиста
	|				И Событие В (&СобытиеПредъявленКВычетуНеПодтвержденНДС0)) КАК НДСЗаписиКнигиПокупокОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ВЫРАЗИТЬ(НДСЗаписиКнигиПокупокОбороты.НДСОборот КАК ЧИСЛО(15, 2)))
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериодаУчитываемыхКорректировок,
	|			,
	|			Организация В (&Организация)
	|				И Событие В (&СобытиеПредъявленКВычетуНеПодтвержденНДС0)
	|				И ВЫБОР
	|					КОГДА &СУчетомКорректировок = ИСТИНА
	|						ТОГДА ЗаписьДополнительногоЛиста
	|								И (КорректируемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) КАК НДСЗаписиКнигиПокупокОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(НДСЗаписиКнигиПокупок.П000600000104_1), 0) КАК П000600000104_1
	|ИЗ
	|	НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок";
				   
	Вычеты = Запрос.Выполнить();
	
	СтруктураПоказателейРаздела6 = Новый Структура;
	
	СтруктураПоказателейРаздела6.Вставить("Начисления",	Начисления);
	СтруктураПоказателейРаздела6.Вставить("Вычеты", 	Вычеты);
	
	Возврат СтруктураПоказателейРаздела6;
	
КонецФункции

мФормыИФорматы = СоздатьДеревоФормИФорматов();

ФормаОтчета2004Кв1 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151001", '2003-11-20', "БГ-3-03/644", "ФормаОтчета2004Кв1");
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2004Кв1, "3.00003");

ФормаОтчета2005Кв1 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151001", '2005-03-03', "31н", "ФормаОтчета2005Кв1");
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2005Кв1, "3.00004");

ФормаОтчета2006Кв1 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151001", '2005-12-28', "163н", "ФормаОтчета2006Кв1");
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2006Кв1, "3.00005");

ФормаОтчета2007Кв1_1 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151001", '2006-11-07', "136н", "ФормаОтчета2007Кв1", , '20071231');
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2007Кв1_1, "3.00006");

ФормаОтчета2007Кв1_2 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151001", '2007-11-21', "113н", "ФормаОтчета2007Кв1", '20080101', '20081231');
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2007Кв1_2, "3.00006");

ФормаОтчета2007Кв1_3 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151001", '2008-09-11', "94н", "ФормаОтчета2007Кв1", '20090101');
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2007Кв1_3, "3.00006");

ФормаОтчета2009Кв4_1 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151001", '2009-10-15', "104н", "ФормаОтчета2009Кв4", ,'20100331');
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2009Кв4_1, "5.01");

ФормаОтчета2009Кв4_2 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151001", '2010-04-21', "36н", "ФормаОтчета2009Кв4", '20100401', '20111231');
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2009Кв4_2, "5.01");

ФормаОтчета2009Кв4_3 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151001", '2012-04-17', "ММВ-7-6/244@", "ФормаОтчета2009Кв4", '20120101');
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2009Кв4_3, "5.02");
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2009Кв4_3, "5.03");

ФормаОтчета2015Кв1 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151001", '2014-10-29', "ММВ-7-3/558@", "ФормаОтчета2015Кв1", '20120101');
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2015Кв1, "5.04");

ФормаОтчета2017Кв1 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151001", '2016-12-20', "ММВ-7-3/696@", "ФормаОтчета2017Кв1");
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2017Кв1, "5.05");

мГруппаОрганизаций = Новый СписокЗначений;

ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

мТаблицаСоставПоказателей = Новый ТаблицаЗначений;
мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",     ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",   ОписаниеТиповСтрока50);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",     ОписаниеТиповСтрока50);
мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",     ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",      ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("ДопОписание",              ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("Обязательность",           ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);

мСтруктураВариантыЗаполнения = Новый Структура;

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

мТаблицаФормОтчета = Новый ТаблицаЗначений;
мТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
мТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
мТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
мТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2005Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение №1 к приказу Минфина РФ от 03.03.2005 г. №31н";
НоваяФорма.ДатаНачалоДействия = '2005-03-01';
НоваяФорма.ДатаКонецДействия  = '2006-01-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2004Кв1";
НоваяФорма.ОписаниеОтчета     = "Форма утверждена Приказом МНС России от 20.11.2003 г. №БГ-3-03/644";
НоваяФорма.ДатаНачалоДействия = '2004-01-01';
НоваяФорма.ДатаКонецДействия  = '2005-03-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2006Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение № 1 к приказу Минфина РФ от 28.12.2005 г. № 163н";
НоваяФорма.ДатаНачалоДействия = '2006-01-01';
НоваяФорма.ДатаКонецДействия  = '2006-12-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2007Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение № 1 к приказу Минфина РФ от 07.11.2006 г. № 136н";
НоваяФорма.ДатаНачалоДействия = '2007-01-01';
НоваяФорма.ДатаКонецДействия  = '2007-12-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2007Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение № 1 к приказу Минфина РФ от 07.11.2006 г. № 136н (в редакции приказа Минфина РФ от 21.11.2007 № 113н)";
НоваяФорма.ДатаНачалоДействия = '2008-01-01';
НоваяФорма.ДатаКонецДействия  = '2008-12-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2007Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение № 1 к приказу Минфина РФ от 07.11.2006 г. № 136н (в редакции приказов Минфина РФ от 21.11.2007 № 113н, от 11.09.08 № 94н)";
НоваяФорма.ДатаНачалоДействия = '2009-01-01';
НоваяФорма.ДатаКонецДействия  = '2009-09-30';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2009Кв4";
НоваяФорма.ОписаниеОтчета     = "Приложение № 1 к приказу Минфина РФ от 15.10.2009 г. № 104н";
НоваяФорма.ДатаНачалоДействия = '2009-10-01';
НоваяФорма.ДатаКонецДействия  = '2010-03-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2009Кв4";
НоваяФорма.ОписаниеОтчета     = "Приложение № 1 к приказу Минфина РФ от 15.10.2009 г. № 104н (в редакции приказа Минфина РФ от 21.04.2010 № 36н)";
НоваяФорма.ДатаНачалоДействия = '2010-04-01';
НоваяФорма.ДатаКонецДействия  = '2014-12-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2015Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение № 1 к приказу ФНС России от 29.10.2014 № ММВ-7-3/558@";
НоваяФорма.ДатаНачалоДействия = '2015-01-01';
НоваяФорма.ДатаКонецДействия  = '2016-12-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2017Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение № 1 к приказу ФНС России от 29.10.2014 № ММВ-7-3/558@ (в редакции приказа ФНС России от 20.12.2016 № ММВ-7-3/696@)";
НоваяФорма.ДатаНачалоДействия = '2017-01-01';

НоваяФорма.ДатаКонецДействия  = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
