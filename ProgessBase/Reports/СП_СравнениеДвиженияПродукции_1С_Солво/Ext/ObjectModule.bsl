
Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Перем СписокДокументов Экспорт;

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	//начало изменений Ожиганов 23.04.2015 37919 
	//табл = ПолучитьДвиженияТоваровСолво();
	//табл.ВыбратьСтроку();
	////конец изменений внешние файлы 
	
	//++ Spl_Апроф 12.12.2014 (k.russkih@a-prof.ru)
	ВнешниеНаборыДанных = Новый Структура();
	ВнешниеНаборыДанных.Вставить("Т_ТаблицаДвиженийСолво", ПолучитьДвиженияТоваровСолво());	
	//-- Spl_Апроф
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
		
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции

//начало изменений Ожиганов 22.04.2015 37919 
Функция  ПолучитьЗапросКОстаткам()
	//Blik 300816 56127 в запрос добавлена обработка закрытия претензии документом сторно накладной
	Результат = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	            |	ТоварыНаСкладахОбороты.Склад,
	            |	ТоварыНаСкладахОбороты.Номенклатура,
	            |	ВЫБОР
	            |		КОГДА ТоварыНаСкладахОбороты.КоличествоПриход < 0
	            |			ТОГДА 0
	            |		ИНАЧЕ ТоварыНаСкладахОбороты.КоличествоПриход
	            |	КОНЕЦ + ВЫБОР
	            |		КОГДА ТоварыНаСкладахОбороты.КоличествоРасход < 0
	            |			ТОГДА -1 * ТоварыНаСкладахОбороты.КоличествоРасход
	            |		ИНАЧЕ 0
	            |	КОНЕЦ КАК Приход1С,
	            |	ВЫБОР
	            |		КОГДА ТоварыНаСкладахОбороты.КоличествоРасход < 0
	            |			ТОГДА 0
	            |		ИНАЧЕ ТоварыНаСкладахОбороты.КоличествоРасход
	            |	КОНЕЦ + ВЫБОР
	            |		КОГДА ТоварыНаСкладахОбороты.КоличествоПриход < 0
	            |			ТОГДА -1 * ТоварыНаСкладахОбороты.КоличествоПриход
	            |		ИНАЧЕ 0
	            |	КОНЕЦ КАК Расход1С,
	            |	ВЫБОР
	            |		КОГДА ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	            |				ИЛИ ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	            |			ТОГДА ВЫБОР
	            |					КОГДА ТоварыНаСкладахОбороты.Регистратор.СП_ЗаданиеНаПодбор = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)
	            |						ТОГДА ТоварыНаСкладахОбороты.Регистратор
	            |					ИНАЧЕ ТоварыНаСкладахОбороты.Регистратор.СП_ЗаданиеНаПодбор
	            |				КОНЕЦ
	            |		КОГДА ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	            |			ТОГДА ВЫБОР
	            |					КОГДА ТоварыНаСкладахОбороты.Регистратор.ПР_Претензия <> ЗНАЧЕНИЕ(Документ.ПР_Претензия.ПустаяСсылка)
	            |						ТОГДА ТоварыНаСкладахОбороты.Регистратор.ПР_Претензия
	            |					ИНАЧЕ ТоварыНаСкладахОбороты.Регистратор
	            |				КОНЕЦ
	            |		КОГДА ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПРГ_СторноНакладной
	            |			ТОГДА ВЫБОР
	            |					КОГДА ТоварыНаСкладахОбороты.Регистратор.Претензия <> ЗНАЧЕНИЕ(Документ.ПР_Претензия.ПустаяСсылка)
	            |						ТОГДА ТоварыНаСкладахОбороты.Регистратор.Претензия
	            |					ИНАЧЕ ТоварыНаСкладахОбороты.Регистратор
	            |				КОНЕЦ
	            |		ИНАЧЕ ВЫБОР
	            |				КОГДА ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	            |						И ТоварыНаСкладахОбороты.Регистратор.СкладОтправитель.НСИ_ПодключенКSolvo
	            |						И НЕ ТоварыНаСкладахОбороты.Регистратор.СкладПолучатель.НСИ_ПодключенКSolvo
	            |					ТОГДА ВЫБОР
	            |							КОГДА ТоварыНаСкладахОбороты.Регистратор.СП_ЗаданиеНаПодбор = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)
	            |								ТОГДА ТоварыНаСкладахОбороты.Регистратор
	            |							ИНАЧЕ ТоварыНаСкладахОбороты.Регистратор.СП_ЗаданиеНаПодбор
	            |						КОНЕЦ
	            |				ИНАЧЕ ВЫБОР
	            |						КОГДА ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	            |								И ТоварыНаСкладахОбороты.Регистратор.ДокументОснование ССЫЛКА Документ.ВыпускПродукции
	            |							ТОГДА ВЫБОР
	            |									КОГДА ТоварыНаСкладахОбороты.Регистратор.ДокументОснование.СП_ЗаданиеНаСмену = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаСмену.ПустаяСсылка)
	            |										ТОГДА ТоварыНаСкладахОбороты.Регистратор
	            |									ИНАЧЕ ТоварыНаСкладахОбороты.Регистратор.ДокументОснование.СП_ЗаданиеНаСмену
	            |								КОНЕЦ
	            |						ИНАЧЕ ТоварыНаСкладахОбороты.Регистратор
	            |					КОНЕЦ
	            |			КОНЕЦ
	            |	КОНЕЦ КАК ДокументДвижения
	            |{ВЫБРАТЬ
	            |	Склад.*,
	            |	Номенклатура.*,
	            |	Приход1С,
	            |	Расход1С,
	            |	ДокументДвижения.*}
	            |ИЗ
	            |	РегистрНакопления.ТоварыНаСкладах.Обороты(
	            |			&Дата1,
	            |			&Дата2,
	            |			Регистратор,
	            |			Склад.НСИ_ПодключенКSolvo
	            |				И Номенклатура.ВидНоменклатуры.НСИ_ОбменССолво) КАК ТоварыНаСкладахОбороты
	            |{ГДЕ
	            |	ТоварыНаСкладахОбороты.Склад.*,
	            |	ТоварыНаСкладахОбороты.Номенклатура.*,
	            |	(ВЫБОР
	            |			КОГДА ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	            |					ИЛИ ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ТребованиеНакладная
	            |				ТОГДА ВЫБОР
	            |						КОГДА ТоварыНаСкладахОбороты.Регистратор.СП_ЗаданиеНаПодбор = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)
	            |							ТОГДА ТоварыНаСкладахОбороты.Регистратор
	            |						ИНАЧЕ ТоварыНаСкладахОбороты.Регистратор.СП_ЗаданиеНаПодбор
	            |					КОНЕЦ
	            |			КОГДА ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	            |				ТОГДА ВЫБОР
	            |						КОГДА ТоварыНаСкладахОбороты.Регистратор.ПР_Претензия <> ЗНАЧЕНИЕ(Документ.ПР_Претензия.ПустаяСсылка)
	            |							ТОГДА ТоварыНаСкладахОбороты.Регистратор.ПР_Претензия
	            |						ИНАЧЕ ТоварыНаСкладахОбороты.Регистратор
	            |					КОНЕЦ
	            |			КОГДА ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПРГ_СторноНакладной
	            |				ТОГДА ВЫБОР
	            |						КОГДА ТоварыНаСкладахОбороты.Регистратор.Претензия <> ЗНАЧЕНИЕ(Документ.ПР_Претензия.ПустаяСсылка)
	            |							ТОГДА ТоварыНаСкладахОбороты.Регистратор.Претензия
	            |						ИНАЧЕ ТоварыНаСкладахОбороты.Регистратор
	            |					КОНЕЦ
	            |			ИНАЧЕ ВЫБОР
	            |					КОГДА ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	            |							И ТоварыНаСкладахОбороты.Регистратор.СкладОтправитель.НСИ_ПодключенКSolvo
	            |							И НЕ ТоварыНаСкладахОбороты.Регистратор.СкладПолучатель.НСИ_ПодключенКSolvo
	            |						ТОГДА ВЫБОР
	            |								КОГДА ТоварыНаСкладахОбороты.Регистратор.СП_ЗаданиеНаПодбор = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаПодбор.ПустаяСсылка)
	            |									ТОГДА ТоварыНаСкладахОбороты.Регистратор
	            |								ИНАЧЕ ТоварыНаСкладахОбороты.Регистратор.СП_ЗаданиеНаПодбор
	            |							КОНЕЦ
	            |					ИНАЧЕ ВЫБОР
	            |							КОГДА ТоварыНаСкладахОбороты.Регистратор ССЫЛКА Документ.ПеремещениеТоваров
	            |									И ТоварыНаСкладахОбороты.Регистратор.ДокументОснование ССЫЛКА Документ.ВыпускПродукции
	            |								ТОГДА ВЫБОР
	            |										КОГДА ТоварыНаСкладахОбороты.Регистратор.ДокументОснование.СП_ЗаданиеНаСмену = ЗНАЧЕНИЕ(Документ.СП_ЗаданиеНаСмену.ПустаяСсылка)
	            |											ТОГДА ТоварыНаСкладахОбороты.Регистратор
	            |										ИНАЧЕ ТоварыНаСкладахОбороты.Регистратор.ДокументОснование.СП_ЗаданиеНаСмену
	            |									КОНЕЦ
	            |							ИНАЧЕ ТоварыНаСкладахОбороты.Регистратор
	            |						КОНЕЦ
	            |				КОНЕЦ
	            |		КОНЕЦ).* КАК ДокументДвижения}";
							 
		возврат Результат;					 
КонецФункции	

Функция ПолучитьСклад(КэшСклад,ЗапросСклад,сКод)
	Код = СокрЛп(скод);
	Если КэшСклад = Неопределено Тогда
		КэшСклад = Новый ТаблицаЗначений;
		КэшСклад.Колонки.Добавить("Код");
		КэшСклад.Колонки.Добавить("Ссылка");
		КэшСклад.Индексы.Добавить("Код");
	КонецЕсли;	
	
	Если ЗапросСклад = Неопределено тогда
		ЗапросСклад = Новый Запрос("ВЫБРАТЬ
		                           |	Склады.Ссылка,
		                           |	Склады.Код
		                           |ИЗ
		                           |	Справочник.Склады КАК Склады
		                           |ГДЕ
		                           |	НЕ Склады.ЭтоГруппа
		                           |	И Склады.Код = &Код");
	КонецЕсли;	
	
	НадЗнч =  КэшСклад.Найти(Код,"Код");
	Если НадЗнч = Неопределено Тогда
		ЗапросСклад.УстановитьПараметр("Код",Код);
		Выборка = ЗапросСклад.Выполнить().Выбрать();
		Ссылка = Справочники.Склады.ПустаяСсылка();
		Если Выборка.Следующий() Тогда
			Ссылка = Выборка.Ссылка;
		КонецЕсли;	
		
		НС 		  = КэшСклад.Добавить();
		НС.Код	  = Код;
		НС.Ссылка = Ссылка;
			
		возврат НС.Ссылка;
		
	Иначе
		возврат НадЗнч.Ссылка;
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьНоменклатуру(КэшНом,ЗапросНом,сКод,НомМаркер)
	Код = СокрЛп(скод);
	Если КэшНом = Неопределено Тогда
		КэшНом = Новый ТаблицаЗначений;
		КэшНом.Колонки.Добавить("Код");
		КэшНом.Колонки.Добавить("Ссылка");
		КэшНом.Колонки.Добавить("НомМаркер");
		КэшНом.Индексы.Добавить("Код");
	КонецЕсли;	
	
	Если ЗапросНом = Неопределено Тогда
		ЗапросНом =  Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                          |	Ном1.Ссылка,
		                          |	Ном1.Код,
		                          |	Ном2.Ссылка КАК НомМаркер
		                          |ИЗ
		                          |	Справочник.Номенклатура КАК Ном1
		                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Ном2
		                          |		ПО Ном1.НСИ_НоменклатураОбменаССолво = Ном2.Ссылка
		                          |			И Ном1.Ссылка <> Ном2.Ссылка
								  |			И НЕ Ном2.ЭтоГруппа
		                          |ГДЕ
		                          |	Ном1.Код = &Код
		                          |	И НЕ Ном1.ЭтоГруппа");
	КонецЕслИ;	
	
	НадЗнч =  КэшНом.Найти(Код,"Код");
	Если НадЗнч = Неопределено Тогда
		ЗапросНом.УстановитьПараметр("Код",Код);
		Выборка = ЗапросНом.Выполнить().Выбрать();
		Ссылка = Справочники.Номенклатура.ПустаяСсылка();
		врНомМаркер = Ссылка;
		Если Выборка.Следующий() Тогда
			Ссылка 		= Выборка.Ссылка;
			врНомМаркер = Выборка.НомМаркер;
		КонецЕсли;	
		
		НС 		  	   = КэшНом.Добавить();
		НС.Код	  	   = Код;
		НС.Ссылка 	   = Ссылка;
		НС.НомМаркер   = ?(ЗначениеЗаполнено(врНомМаркер),врНомМаркер,Ссылка);
		
		НомМаркер 	   = НС.НомМаркер;
		
		возврат НС.Ссылка;
		
	Иначе
		НомМаркер 	   = НадЗнч.НомМаркер;
		возврат НадЗнч.Ссылка;
	КонецЕсли;		
	
КонецФункции	

Функция НайтиУзел()
	ВыборкаПоУзлам = ПланыОбмена.АП_ОбменSolvo.Выбрать();
	Пока ВыборкаПоУзлам.Следующий() Цикл
		Если ВыборкаПоУзлам.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПоУзлам.Склады.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПоУзлам.ПриостановитьОбмен Тогда
			Продолжить;
		КонецЕсли;
		
		 возврат ВыборкаПоУзлам.Ссылка;
	 КонецЦикла;
	 возврат ПланыОбмена.АП_ОбменSolvo.ПустаяСсылка();
 КонецФункции
 
 Функция НайтиСтрокуВТаблОст(ТаблицаОстатков,СтруктПоиска,Склад,Номенклатура,ДокументДвижения)
	 
	 СтруктПоиска.Склад 	   	   = Склад;
	 СтруктПоиска.Номенклатура 	   = Номенклатура;
	 СтруктПоиска.ДокументДвижения = ДокументДвижения;
	 
	 НадЗнч = ТаблицаОстатков.НайтиСтроки(СтруктПоиска);
	 Если НадЗнч.Количество() = 0 Тогда
		 //Сообщить("Атас документ");
		 НадЗнч = ТаблицаОстатков.Добавить();
		 НадЗнч.ДокументДвижения    = ДокументДвижения;
		 НадЗнч.Склад 				= Склад;
		 НадЗнч.Номенклатура 		= Номенклатура;
		 НадЗнч.Приход1С 			= 0;
		 НадЗнч.Расход1С 			= 0;
		 НадЗнч.ПриходСолво 		= 0;
		 НадЗнч.РасходСолво			= 0;
		 
		 возврат НадЗнч;
		 
	 ИначеЕсли НадЗнч.Количество() = 1 Тогда
		 возврат НадЗнч[0];
	 Иначе
		 Сообщить("Найдено более чем две строки!!!");
	 КонецЕсли; 
	 
	 возврат НадЗнч;
КонецФункции 

Процедура ДобавитьОтборВПЗ(ИмяОтбора,ТекОтбор,СоотвОтборов,СоотвОтборовСписок,ПЗ)
	
				 Если СоотвОтборов[ТекОтбор.ВидСравнения] <>  Неопределено Тогда
						 ЭлОтбора = ПЗ.Отбор.Добавить(ИмяОтбора,ИмяОтбора);
						 ЭлОтбора.ВидСравнения = СоотвОтборов[ТекОтбор.ВидСравнения];
				 		 ЭлОтбора.Использование = Истина;
						 ЭлОтбора.Значение  = ТекОтбор.ПравоеЗначение;
				 ИначеЕсли СоотвОтборовСписок[ТекОтбор.ВидСравнения] <>  Неопределено Тогда
					 	 НовыйСписок = Новый СписокЗначений;
						 Для каждого ТекЭлем Из ТекОтбор.ПравоеЗначение  Цикл
							 НовыйСписок.Добавить(ТекЭлем.Значение);
						 КонецЦикла; 
						 ЭлОтбора = ПЗ.Отбор.Добавить(ИмяОтбора,ИмяОтбора);
						 ЭлОтбора.ВидСравнения = СоотвОтборовСписок[ТекОтбор.ВидСравнения];
				 		 ЭлОтбора.Использование = Истина;
						 ЭлОтбора.Значение  = НовыйСписок;
				 КонецЕсли;	
	
	
КонецПроцедуры	

Функция ПолучитьДвиженияТоваровСолво()
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	
	ТаблицаОстатков.Колонки.Добавить("Документ1С");
	ТаблицаОстатков.Колонки.Добавить("ДокументСолво");
	
	ТаблицаОстатков.Колонки.Добавить("СкладРасход");
	ТаблицаОстатков.Колонки.Добавить("СкладПриход");
	ТаблицаОстатков.Колонки.Добавить("НоменклатураРасход");
	ТаблицаОстатков.Колонки.Добавить("НоменклатураПриход");
	ТаблицаОстатков.Колонки.Добавить("РасходСолво");
	ТаблицаОстатков.Колонки.Добавить("ПриходСолво");

	ТаблицаОстатков.Колонки.Добавить("Расход1С");
	ТаблицаОстатков.Колонки.Добавить("Приход1С");	
	
	ТаблицаОстатков.Колонки.Добавить("ЕстьМаркер",Новый ОписаниеТипов("Булево"));
	
	
	
	мДатаНачалоПериода = НачалоМесяца(ТекущаяДата());
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		мДатаНачалоПериода = ?(ПараметрНачалоПериода.Значение = Дата(1,1,1),мДатаНачалоПериода,ПараметрНачалоПериода.Значение);
	КонецЕсли;
	
	мДатаКонецПериода = КонецМесяца(ТекущаяДата());
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		мДатаКонецПериода = ?(ПараметрКонецПериода.Значение = Дата(1,1,1), мДатаКонецПериода, ПараметрКонецПериода.Значение);
	КонецЕсли;
	//
	
    ПЗ = Новый ПостроительЗапроса;
	ПЗ.Текст = ПолучитьЗапросКОстаткам();
	ПЗ.Параметры.Вставить("Дата1",НачалоДня(мДатаНачалоПериода));
	ПЗ.Параметры.Вставить("Дата2",КонецДня(мДатаКонецПериода));
	
	ПолеСклад 		 = Новый ПолеКомпоновкиДанных("Склад"); 
	ПолеНоменклатура = Новый ПолеКомпоновкиДанных("Номенклатура");
	Документ1С 		 = Новый ПолеКомпоновкиДанных("Документ1С");
	
	СоотвОтборов   =  Новый Соответствие;
	СоотвОтборов.Вставить(ВидСравненияКомпоновкиДанных.Больше,ВидСравнения.Больше);
	СоотвОтборов.Вставить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно,ВидСравнения.БольшеИлиРавно);
	СоотвОтборов.Вставить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,ВидСравнения.МеньшеИлиРавно);
	СоотвОтборов.Вставить(ВидСравненияКомпоновкиДанных.ВИерархии,ВидСравнения.ВИерархии);
	СоотвОтборов.Вставить(ВидСравненияКомпоновкиДанных.НеВИерархии,ВидСравнения.НеВИерархии);
	СоотвОтборов.Вставить(ВидСравненияКомпоновкиДанных.Равно,ВидСравнения.Равно);
	СоотвОтборов.Вставить(ВидСравненияКомпоновкиДанных.НеРавно,ВидСравнения.НеРавно);
	СоотвОтборов.Вставить(ВидСравненияКомпоновкиДанных.Содержит,ВидСравнения.Содержит);
	
	СоотвОтборовСписок   =  Новый Соответствие;
	СоотвОтборовСписок.Вставить(ВидСравненияКомпоновкиДанных.НеВСписке,ВидСравнения.НеВСписке);
	СоотвОтборовСписок.Вставить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии,ВидСравнения.НеВСпискеПоИерархии);
	СоотвОтборовСписок.Вставить(ВидСравненияКомпоновкиДанных.ВСписке,ВидСравнения.ВСписке);
	СоотвОтборовСписок.Вставить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,ВидСравнения.ВСпискеПоИерархии);
	
	
	Для Каждого ТекОтбор Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТекОтбор.Использование Тогда
			Если ТекОтбор.ЛевоеЗначение = ПолеСклад Тогда
				ДобавитьОтборВПЗ("Склад",ТекОтбор,СоотвОтборов,СоотвОтборовСписок,ПЗ);
			ИначеЕсли ТекОтбор.ЛевоеЗначение = ПолеНоменклатура Тогда
				ДобавитьОтборВПЗ("Номенклатура",ТекОтбор,СоотвОтборов,СоотвОтборовСписок,ПЗ);
			ИначеЕсли ТекОтбор.ЛевоеЗначение = Документ1С Тогда
				ДобавитьОтборВПЗ("ДокументДвижения",ТекОтбор,СоотвОтборов,СоотвОтборовСписок,ПЗ);
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
	Состояние("Выполнение запроса к остаткам ");
	
	Запрос = ПЗ.ПолучитьЗапрос();
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	
	ТаблицаОстатков.Колонки.Добавить("РасходСолво",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	ТаблицаОстатков.Колонки.Добавить("ПриходСолво",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	ТаблицаОстатков.Колонки.Добавить("ДокументСолво");
	
	ТаблицаОстатков.Колонки.Добавить("ЕстьМаркер");
	ТаблицаОстатков.Индексы.Добавить("Склад,Номенклатура,ДокументДвижения");
	
	СтруктПоиска = Новый Структура("Склад,Номенклатура,ДокументДвижения");
	
	

	КэшНом	 	   = Неопределено;
	ЗапросНом	   = Неопределено;
	
	КэшСкладов	   = Неопределено;
	ЗапросСкладов  = Неопределено;
	
	ТаблДоков  =  ТаблицаОстатков.Скопировать(,"ДокументДвижения");
	ТаблДоков.Свернуть("ДокументДвижения");
	ТаблДоков.Колонки.Добавить("ИД");
	
	к = 0;
	Пока  к < ТаблДоков.Количество() Цикл
		Если Не ЗначениеЗаполнено(ТаблДоков[к].ДокументДвижения) Тогда
			ТаблДоков.Удалить(ТаблДоков[к]);
		Иначе
			к = к +1;
		КонецЕсли;	
	КонецЦикла;	
	
	ТекУзел = НайтиУзел();
	Если Не ЗначениеЗаполнено(ТекУзел) Тогда
		Сообщить("Узел не поределен");
		возврат ТаблицаОстатков;
	КонецЕсли;	
	
	Соединение = АП_ОбменСолво.УстановитьСоединение(ТекУзел);
	
	КэшДоков = Новый ТаблицаЗначений;
	КэшДоков.Колонки.Добавить("Док");
	КэшДоков.Колонки.Добавить("ИД");
	КэшДоков.Индексы.Добавить("Док");
	
	МаксКолВоДоков = 30;
	
	ПРГАДОДБ = Неопределено;
	к = 0;
	
	Состояние("Формируем таблицу движения продукции по данным Solvo");
	
	КолВоДоков = ТаблДоков.Количество();
	Пока к  < КолВоДоков Цикл
		ОбработкаПрерыванияПользователя();
		КэшДоков.Очистить();
		СтрокаДоков = "";
		Если к = КолВоДоков - 1 Тогда
			НС = КэшДоков.Добавить();
			НС.Док = ТаблДоков[к].ДокументДвижения;
			НС.ИД  = СокрЛП(ТаблДоков[к].ДокументДвижения.УникальныйИдентификатор());
			
			СтрокаДоков = ?(ПустаяСтрока(СтрокаДоков),"",",")+"'"+НС.ИД+"'";
			к = к + 1;
		Иначе
			Для м = 0 По МаксКолВоДоков - 1 Цикл
				Если к >= КолВоДоков - 1 Тогда
					прервать;
				КонецЕсли;
				НС = КэшДоков.Добавить();
				НС.Док = ТаблДоков[к].ДокументДвижения;
				НС.ИД  = СокрЛП(ТаблДоков[к].ДокументДвижения.УникальныйИдентификатор());
				
				СтрокаДоков = СтрокаДоков + ?(ПустаяСтрока(СтрокаДоков),"",",")+"'"+НС.ИД+"'";
				к = к + 1;
			КонецЦикла;	
		КонецЕсли;	
		
		Если ПустаяСтрока(СтрокаДоков) Тогда
			прервать;
		КонецЕсли;
		
		ТекстЗапроса = "select * from v_upload_move_prg where  DOC_ID in (" + СтрокаДоков + ")  order by MOVE_DATE"; //Получим остатки по доступным грузам
		Рез = АП_ОбменСолво.ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,ТекУзел,ПРГАДОДБ);
		Если Рез = Неопределено Тогда
			Сообщить(ОписаниеОшибки());
			Прервать;
		КонецЕсли;
		
		Если к % 100 = 0 Тогда
			Состояние("Формируем таблицу движения продукции по данным Solvo: "+к);
		КонецЕсли;	
		
		Пока Рез.EOF() = 0 Цикл
			
			 ОбработкаПрерыванияПользователя();
			 
			 КодДокумента1С = Рез.Fields("DOC_ID").Value;
			 НайдЗнч = КэшДоков.Найти(КодДокумента1С,"ИД");
			 Если НайдЗнч = Неопределено Тогда
				  Сообщить("Атас не найден документ "+КодДокумента1С);
				  Рез.MoveNext(); 
				  продолжить;
			 КонецЕсли; 
			 Документ1С = НайдЗнч.Док;
			 
			 мКоличество = ПолучитьЧисло(Рез.Fields("qty").Value);
			
			Если мКоличество = 0 Тогда
				Рез.MoveNext(); 
				Продолжить;
			КонецЕсли;
			
			
			ТипЗаказа = СокрЛП(Рез.Fields("TYPE").Value);
			 
			СкладПриход = ПолучитьСклад(КэшСкладов,ЗапросСкладов,СокрЛп(Рез.Fields("NEW_category").Value));
			СкладРасход = ПолучитьСклад(КэшСкладов,ЗапросСкладов,СокрЛп(Рез.Fields("OLD_category").Value));
			
			Если Не ЗначениеЗаполнено(СкладПриход) и СкладРасход = СкладПриход Тогда
				Рез.MoveNext();
				Продолжить;			
			КонецЕсли;	
			
			мЗначМаркера = Рез.Fields("MARKER").Value;
			Если мЗначМаркера = "-" Тогда
				НомМаркер = Неопределено;
				мНоменклатураРасхода = ПолучитьНоменклатуру(КэшНом,ЗапросНом,СокрЛп(Рез.Fields("OLD_sku_id").Value),НомМаркер);
				мНоменклатураПрихода = ПолучитьНоменклатуру(КэшНом,ЗапросНом,СокрЛп(Рез.Fields("NEW_sku_id").Value),НомМаркер);
			Иначе
				ЕстьМаркер = Истина;
				НомМаркер = Неопределено;
				мНоменклатураРасхода = ПолучитьНоменклатуру(КэшНом,ЗапросНом,СокрЛп(Рез.Fields("OLD_sku_id").Value),НомМаркер);
				мНоменклатураРасхода = НомМаркер;
				НомМаркер = Неопределено;
				мНоменклатураПрихода = ПолучитьНоменклатуру(КэшНом,ЗапросНом,СокрЛп(Рез.Fields("NEW_sku_id").Value),НомМаркер);
				мНоменклатураПрихода = НомМаркер;
				
			КонецЕсли;	
			
			
			Если Не ЗначениеЗаполнено(мНоменклатураПрихода) и мНоменклатураПрихода = мНоменклатураРасхода Тогда
				Рез.MoveNext();
				Продолжить;			
			КонецЕсли;
			
			ДокументСолво = Рез.Fields("HOST_ID").Value;
			Если мНоменклатураПрихода = мНоменклатураРасхода и СкладПриход = СкладРасход Тогда
				
				 НадЗнч  = НайтиСтрокуВТаблОст(ТаблицаОстатков,СтруктПоиска,СкладПриход,мНоменклатураПрихода,Документ1С);
				 
				 Если ТипЗаказа = "order"  Тогда
				 	 НадЗнч.РасходСолво   	    = НадЗнч.РасходСолво + мКоличество;
				 Иначе
					 НадЗнч.ПриходСолво   	    = НадЗнч.ПриходСолво + мКоличество;
				КонецЕсли;	
				
				 НадЗнч.ДокументСолво 	    = ДокументСолво;
				 НадЗнч.ЕстьМаркер 			= ЕстьМаркер;
				 
			Иначе
				
				Если ЗначениеЗаполнено(мНоменклатураПрихода) и  ЗначениеЗаполнено(СкладПриход) Тогда
					
						 НадЗнч  = НайтиСтрокуВТаблОст(ТаблицаОстатков,СтруктПоиска,СкладПриход,мНоменклатураПрихода,Документ1С);
					
						 Если мКоличество > 0  Тогда
							 НадЗнч.ПриходСолво   	    = НадЗнч.ПриходСолво + мКоличество;
						 Иначе
							 НадЗнч.РасходСолво   	    = НадЗнч.РасходСолво + -1*мКоличество;
						 КонецЕсли;	
						 
						 НадЗнч.ДокументСолво 	    = ДокументСолво;
						 НадЗнч.ЕстьМаркер 			= ЕстьМаркер;
				КонецЕсли;	
					 
				Если ЗначениеЗаполнено(мНоменклатураРасхода) и  ЗначениеЗаполнено(СкладРасход) Тогда
					
						 НадЗнч  = НайтиСтрокуВТаблОст(ТаблицаОстатков,СтруктПоиска,СкладРасход,мНоменклатураРасхода,Документ1С);
						 
						 Если мКоличество > 0  Тогда       // под вопросом
							 НадЗнч.РасходСолво   	    = НадЗнч.РасходСолво + мКоличество;
						 Иначе
							 НадЗнч.ПриходСолво   	    = НадЗнч.РасходСолво + -1* мКоличество;
						КонецЕсли;	
						
						 НадЗнч.ДокументСолво 	    = ДокументСолво;
						 НадЗнч.ЕстьМаркер 			= ЕстьМаркер;
				КонецЕсли;						 
				
			КонецЕсли;	
			
			Рез.MoveNext();
			 
			 
		КонецЦикла;
		

	КонецЦикла;	
	
	ТаблицаОстатков.Свернуть("Склад,Номенклатура,ДокументДвижения,ДокументСолво,ЕстьМаркер", "ПриходСолво,РасходСолво,Расход1С,Приход1С");
	
	Состояние();

	Возврат ТаблицаОстатков;


КонецФункции

Функция ПолучимНоменклатуруСолвоИзРеквизита_НСИ_НоменклатураОбменаССолво(Знач Номенклатура)
  			
	Если ЗначениеЗаполнено(Номенклатура.НСИ_НоменклатураОбменаССолво) Тогда		
		Номенклатура = Номенклатура.НСИ_НоменклатураОбменаССолво;
	КонецЕсли;	 
	
	Возврат Номенклатура;

КонецФункции

//Преобразует строку в число
Функция ПолучитьЧисло(Стр)
	Разделитель = ?(Найти(Строка(0.1),",") = 0, ".", ",");
	Рез = СтрЗаменить(Стр, ",", Разделитель);
	Рез = СтрЗаменить(Стр, ".", Разделитель);
	Рез = СтрЗаменить(Стр, Символы.НПП, "");
	Попытка
		Результат = Число(Рез);
	Исключение
		Результат = 0;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция ПолучимДокумент(ИД_Документа,КэшДокументов)
	Если КэшДокументов = Неопределено Тогда
		КэшДокументов = Новый ТаблицаЗначений;
		КэшДокументов.Колонки.Добавить("Док");
		КэшДокументов.Колонки.Добавить("ИД");
		КэшДокументов.Индексы.Добавить("ИД");
	КонецЕсли;	
	
	Найдзнч = КэшДокументов.Найти(ИД_Документа,"ИД");
	
	Если Найдзнч <> Неопределено Тогда
		возврат Найдзнч.Док;
	КонецЕсли;	
	

	НайденныйДокумент = Неопределено;
	
	Для каждого СтрокаМетаданных Из СписокДокументов Цикл						
		
		НайденныйДокумент = Документы[СтрокаМетаданных].ПолучитьСсылку(Новый УникальныйИдентификатор(ИД_Документа));						
		
		Если Не ПустаяСтрока(НайденныйДокумент.ВерсияДанных) Тогда
			прервать;
		КонецЕсли;	
		//Если НЕ НайденныйДокумент.ПолучитьОбъект() = Неопределено Тогда							
		//	Прервать;
		//КонецЕсли;
		
		НайденныйДокумент = Неопределено;
		
	КонецЦикла; 
	
	НС = КэшДокументов.Добавить();
	НС.Док = НайденныйДокумент;
	НС.ИД  = ИД_Документа;
	
	возврат НС.Док;
	///Возврат НайденныйДокумент;

КонецФункции // ()
 
#КонецЕсли

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		ПараметрКонецПериода.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДоработатьКомпоновщикПередВыводом()

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

СписокДокументов = Новый Массив;
СписокДокументов.Добавить("СП_ЗаданиеНаСмену");
СписокДокументов.Добавить("ПоступлениеТоваровУслуг");
СписокДокументов.Добавить("ПеремещениеТоваров");
СписокДокументов.Добавить("ПР_Претензия"); //Возврат
СписокДокументов.Добавить("КомплектацияНоменклатуры");
СписокДокументов.Добавить("ТребованиеНакладная");
СписокДокументов.Добавить("СписаниеТоваров");
СписокДокументов.Добавить("СП_ЗаданиеНаПодбор");
