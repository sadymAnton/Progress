
Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();	
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	//++ Spl_Апроф 12.12.2014 (k.russkih@a-prof.ru)
	ВнешниеНаборыДанных = Новый Структура();
	ВнешниеНаборыДанных.Вставить("ТаблицаОстатковСолво", ПолучитьОстаткиСолво());	
	//-- Spl_Апроф
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	Результат.ПоказатьУровеньГруппировокКолонок(0);
	
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции

Функция ПолучитьОстаткиСолво()
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаОстатков.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОстатков.Колонки.Добавить("СтатусСолво",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(255,ДопустимаяДлина.Переменная)));
	ТаблицаОстатков.Колонки.Добавить("ГруппаСолво",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(255,ДопустимаяДлина.Переменная)));
	ТаблицаОстатков.Колонки.Добавить("ОстатокСолво",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10)));
	ТаблицаОстатков.Колонки.Добавить("Остаток1С",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10)));
	ТаблицаОстатков.Колонки.Добавить("НоменклатураКод",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(255,ДопустимаяДлина.Переменная)));
	ТаблицаОстатков.Колонки.Добавить("СкладКод",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(255,ДопустимаяДлина.Переменная)));
	
	ВыборкаПоУзлам = ПланыОбмена.АП_ОбменSolvo.Выбрать();
	Пока ВыборкаПоУзлам.Следующий() Цикл
		Если ВыборкаПоУзлам.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПоУзлам.Склады.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаПоУзлам.ПриостановитьОбмен Тогда
			Продолжить;
		КонецЕсли;
		
		Узел = ВыборкаПоУзлам.Ссылка;
		
		Соединение = АП_ОбменСолво.УстановитьСоединение(Узел);
		
		
		//{30.09.2015 Островерхий заявка №б/н, основание письмо Овчинникова С. "FW: FW: Вьюшка остатки солво" 
		//ТекстЗапроса = "select * from XMLGATE_BALANCE where status in ('A','F','X','a','G')"; //Получим остатки по доступным грузам 
		ТекстЗапроса = "select * from XMLGATE_BALANCE where status in ('A','Q','W','R','E','L','B','a','H','-','C','Z','V','D','P','Y','S','O','M','G','X','U','T','F','J','I','K') AND qty <> 0"; //Получим остатки по доступным грузам
		//30.09.2015 Островерхий} 
		
		Рез = АП_ОбменСолво.ВыполнитьЗапрос(Соединение, ТекстЗапроса,,,,Узел);
		Если Рез = Неопределено Тогда
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецЕсли;
		//
		//Если АП_ОбменСолво.ПроверитьВозможностьФормированияПакета(Рез, Узел) = 1 Тогда
		//	Если ЗаданиеНаПодбор.Товары.Количество() = 0 Тогда 
		//		ЗаписьЖурналаРегистрации("Обмен с Solvo", УровеньЖурналаРегистрации.Предупреждение,,ЗаданиеНаПодбор, "Не удалось получить остатки по товарам");
		//		Возврат Истина;
		//	КонецЕсли;
		//КонецЕсли;
		
		СчСтрок = 0;
		Разделитель = ?(Найти(Строка(0.1),",") = 0, ".", ",");
		
		Пока Рез.EOF() = 0 Цикл
			
			ОбработкаПрерыванияПользователя();
			
			СчСтрок = СчСтрок + 1;
			
			Если СчСтрок % 300 = 0 Тогда
			
				Состояние("Формируем таблицу остатков по данным Solvo: "+СчСтрок);	
			
			КонецЕсли; 
			
			КодСклада = Рез.Fields("category").Value;
			
			//мСклад = Справочники.Склады.НайтиПоКоду(КодСклада);
			//Если мСклад.Пустая() Тогда
			//	Рез.MoveNext(); 
			//	Продолжить;
			//КонецЕсли;
			
			КодНоменклатуры = Рез.Fields("sku_id").Value;
			//мНоменклатура = Справочники.Номенклатура.НайтиПоКоду(КодНоменклатуры);
			//Если мНоменклатура.Пустая() Тогда
			//	Рез.MoveNext(); 
			//	Продолжить;
			//КонецЕсли;

			НоваяСтрока = ТаблицаОстатков.Добавить();
			
			//{30.09.2015 Островерхий заявка №б/н, основание письмо Овчинникова С. "FW: FW: Вьюшка остатки солво" 
			//НоваяСтрока.Склад = мСклад;
			//НоваяСтрока.Номенклатура = мНоменклатура;
			НоваяСтрока.СкладКод = КодСклада;
			НоваяСтрока.НоменклатураКод = КодНоменклатуры;
			//30.09.2015 Островерхий} 
						
			мКоличество = ПолучитьЧисло(Рез.Fields("qty").Value,Разделитель);
			
			//Если мКоличество = 0 Тогда
			//	Рез.MoveNext(); 
			//	Продолжить;
			//КонецЕсли;
			
			НоваяСтрока.ОстатокСолво = мКоличество;
			
			НоваяСтрока.Остаток1С = 0;
			НоваяСтрока.СтатусСолво = Рез.Fields("status").Value;
			НоваяСтрока.СтатусСолво = ?(НоваяСтрока.СтатусСолво="A","_A",НоваяСтрока.СтатусСолво);
			
			//{30.09.2015 Островерхий заявка №б/н, основание письмо Овчинникова С. "FW: FW: Вьюшка остатки солво" 
			//НоваяСтрока.ГруппаСолво = "Итого"; 
			Если НоваяСтрока.СтатусСолво = "_A"        
				ИЛИ НоваяСтрока.СтатусСолво = "F"
				ИЛИ НоваяСтрока.СтатусСолво = "X"
				ИЛИ НоваяСтрока.СтатусСолво = "a"
				ИЛИ НоваяСтрока.СтатусСолво = "G" Тогда
				НоваяСтрока.ГруппаСолво = "Итого";	
			Иначе
				НоваяСтрока.ГруппаСолво = "Прочее";	
			КонецЕсли; 
			//30.09.2015 Островерхий} 
			
			Рез.MoveNext(); 
		КонецЦикла;
	
	КонецЦикла; 
	
	//ТаблицаОстатков.Свернуть("Склад, Номенклатура,СтатусСолво,ГруппаСолво", "ОстатокСолво, Остаток1С");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВременнаяТаблица.Склад,
		|	ВременнаяТаблица.Номенклатура,
		|	ВременнаяТаблица.СтатусСолво,
		|	ВременнаяТаблица.ГруппаСолво,
		|	ВременнаяТаблица.ОстатокСолво КАК ОстатокСолво,
		|	ВременнаяТаблица.Остаток1С КАК Остаток1С,
		|	ВременнаяТаблица.СкладКод,
		|	ВременнаяТаблица.НоменклатураКод
		|ПОМЕСТИТЬ втОстатки
		|ИЗ
		|	&ВременнаяТаблица КАК ВременнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпрСклады.Ссылка КАК Склад,
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	втОстатки.СтатусСолво,
		|	втОстатки.ГруппаСолво,
		|	СУММА(втОстатки.ОстатокСолво) КАК ОстатокСолво,
		|	СУММА(втОстатки.Остаток1С) КАК Остаток1С,
		|	втОстатки.СкладКод,
		|	втОстатки.НоменклатураКод
		|ПОМЕСТИТЬ втСвернутая
		|ИЗ
		|	втОстатки КАК втОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО втОстатки.НоменклатураКод = СпрНоменклатура.Код
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
		|		ПО втОстатки.СкладКод = СпрСклады.Код
		|
		|СГРУППИРОВАТЬ ПО
		|	втОстатки.ГруппаСолво,
		|	втОстатки.СтатусСолво,
		|	втОстатки.СкладКод,
		|	втОстатки.НоменклатураКод,
		|	СпрСклады.Ссылка,
		|	СпрНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.СтатусСолво,
		|	ВложенныйЗапрос.ГруппаСолво,
		|	СУММА(ВложенныйЗапрос.ОстатокСолво) КАК ОстатокСолво,
		|	СУММА(ВложенныйЗапрос.Остаток1С) КАК Остаток1С
		|ИЗ
		|	(ВЫБРАТЬ
		|		втСвернутая.Склад КАК Склад,
		|		втСвернутая.Номенклатура КАК Номенклатура,
		|		ВЫБОР
		|			КОГДА втСвернутая.ГруппаСолво = ""Итого""
		|				ТОГДА ВЫБОР
		|						КОГДА НЕ втСвернутая.СтатусСолво = взИтого.Статус
		|							ТОГДА взИтого.Статус
		|						ИНАЧЕ втСвернутая.СтатусСолво
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НЕ втСвернутая.СтатусСолво = взПрочее.Статус
		|						ТОГДА взПрочее.Статус
		|					ИНАЧЕ втСвернутая.СтатусСолво
		|				КОНЕЦ
		|		КОНЕЦ КАК СтатусСолво,
		|		втСвернутая.ГруппаСолво КАК ГруппаСолво,
		|		СУММА(ВЫБОР
		|				КОГДА втСвернутая.ГруппаСолво = ""Итого""
		|					ТОГДА ВЫБОР
		|							КОГДА НЕ втСвернутая.СтатусСолво = взИтого.Статус
		|								ТОГДА 0
		|							ИНАЧЕ втСвернутая.ОстатокСолво
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА НЕ втСвернутая.СтатусСолво = взПрочее.Статус
		|							ТОГДА 0
		|						ИНАЧЕ втСвернутая.ОстатокСолво
		|					КОНЕЦ
		|			КОНЕЦ) КАК ОстатокСолво,
		|		СУММА(втСвернутая.Остаток1С) КАК Остаток1С
		|	ИЗ
		|		втСвернутая КАК втСвернутая
		|			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				""_A"" КАК Статус,
		|				""Итого"" КАК Группа
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""a"",
		|				""Итого""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""G"",
		|				""Итого""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""F"",
		|				""Итого""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""X"",
		|				""Итого"") КАК взИтого
		|			ПО втСвернутая.ГруппаСолво = взИтого.Группа
		|			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				""-"" КАК Статус,
		|				""Прочее"" КАК Группа
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""Q"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""W"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""R"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""E"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""L"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""B"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""H"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""C"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""Z"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""V"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""D"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""P"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""Y"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""S"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""O"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""M"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""U"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""T"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""J"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""I"",
		|				""Прочее""
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				""K"",
		|				""Прочее"") КАК взПрочее
		|			ПО втСвернутая.ГруппаСолво = взПрочее.Группа
		|	
		|	СГРУППИРОВАТЬ ПО
		|		втСвернутая.ГруппаСолво,
		|		втСвернутая.Склад,
		|		втСвернутая.Номенклатура,
		|		ВЫБОР
		|			КОГДА втСвернутая.ГруппаСолво = ""Итого""
		|				ТОГДА ВЫБОР
		|						КОГДА НЕ втСвернутая.СтатусСолво = взИтого.Статус
		|							ТОГДА взИтого.Статус
		|						ИНАЧЕ втСвернутая.СтатусСолво
		|					КОНЕЦ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА НЕ втСвернутая.СтатусСолво = взПрочее.Статус
		|						ТОГДА взПрочее.Статус
		|					ИНАЧЕ втСвернутая.СтатусСолво
		|				КОНЕЦ
		|		КОНЕЦ) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.СтатусСолво,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.ГруппаСолво,
		|	ВложенныйЗапрос.Склад";

	Запрос.УстановитьПараметр("ВременнаяТаблица",ТаблицаОстатков);	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОстатков;

КонецФункции

//Преобразует строку в число
Функция ПолучитьЧисло(Стр,Разделитель=",")
	
	Рез = СтрЗаменить(Стр, ",", Разделитель);
	Рез = СтрЗаменить(Стр, ".", Разделитель);
	Рез = СтрЗаменить(Стр, Символы.НПП, "");
	Попытка
		Результат = Число(Рез);
	Исключение
		Результат = 0;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

 

#КонецЕсли

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Использование = Истина;
		ПараметрНачалоПериода.Значение = Новый Граница(КонецДня(ПараметрНачалоПериода.Значение), ВидГраницы.Включая);
	КонецЕсли;
		
КонецПроцедуры // ДоработатьКомпоновщикПередВыводом()

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
