

Перем мДлинаСуток;
Перем ДатаАктуальности Экспорт;
Перем СохраненнаяНастройка Экспорт;
Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

Перем РеглВалюта;
// Запросы по данным
Перем КадровыеДанные, ИностраныйЯзык, Образование, ОбразованиеПослеВузовское, УченаяСтепень, УченыеЗвания, КадровыйРаботник, СписокПрисвоений; 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьДополнительныеНастройкиОтчета() Экспорт
	МассивДополнительныхНастроек = Новый Массив;
	МассивДополнительныхНастроек.Добавить(Новый Структура("Имя, Заголовок, ЗначениеПоУмолчанию", "Бланк", "Выводить бланк", истина));
	Возврат МассивДополнительныхНастроек;
КонецФункции	

Процедура СформироватьОтчет(ДокументРезультат, ЕстьОшибки = Неопределено, ВнешниеНаборыДанных = Неопределено) Экспорт
	
	
	ЗначениеПанелипользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ЭтотОбъект);
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	ДокументРезультат.Очистить();
	
	Если ЗначениеПанелиПользователя <> Неопределено И ЗначениеПанелиПользователя.Свойство("Бланк") И ЗначениеПанелиПользователя.Бланк тогда
		Макет = ПолучитьМакет("Т4_от_5_1_2004");
		Т4	= 	Макет.ПолучитьОбласть("Т4");
		ДокументРезультат.Вывести(Т4);
		Возврат;
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, "Сотрудник");
	ДокументРезультат.НачатьАвтогруппировкуСтрок();
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ЗначениеПараметра.Использование = истина;
	Если ЗначениеПараметра <> Неопределено тогда
		Если ЗначениеПараметра.Значение <> '00010101' тогда
			ДатаАктуальности = ЗначениеПараметра.Значение;
		Иначе
			ДатаАктуальности           = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
			ЗначениеПараметра.Значение = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
		КонецЕсли;
	Иначе
		ДатаАктуальности = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная);
	СписокЗначений.Добавить(Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная);
	СписокЗначений.Добавить(Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая);
	ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "ТарифнаяСтавкаОклад", СписокЗначений);
	
	КадровыйРаботник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	
	ЗначениеПараметраКадровыйРаботник  = ТиповыеОтчеты.ПолучитьПараметр(КомпоновщикНастроек, "КадровыйРаботник");
	
	Если ЗначениеПараметраКадровыйРаботник <> Неопределено тогда
		КадровыйРаботник = ЗначениеПараметраКадровыйРаботник.Значение;
		ЗначениеПараметраКадровыйРаботник.Использование = истина;
	КонецЕсли;
		
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДеревоДанных =  Новый ДеревоЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ДеревоДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	//СформироватьМакет(ДокументРезультат, ЕстьОшибки);
	
	//Получить список сотрудников
	СписокСотрудников = Новый СписокЗначений;
	СписокФизЛиц     = Новый СписокЗначений;
	
	ПолучитьСписокиФизЛицИСотрудников(ДеревоДанных.Строки, СписокСотрудников, СписокФизЛиц);
	
	//Сформировать запрос по сотрудникам
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Физлицо",		  СписокФизЛиц);
	Запрос.УстановитьПараметр("Сотрудник",		  СписокСотрудников);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизаций.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)
	|			ТОГДА ""Основная""
	|		ИНАЧЕ ""По совместительству""
	|	КОНЕЦ КАК ВидРаботы,
	|	СотрудникиОрганизаций.Код КАК ТабельныйНомер,
	|	СотрудникиОрганизаций.Физлицо.Наименование КАК Представление,
	|	СотрудникиОрганизаций.Физлицо.ДатаРождения КАК ДатаРождения,
	|	СотрудникиОрганизаций.Физлицо.Пол КАК Пол,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество,
	|	КонтактнаяИнформацияТелефон.Представление КАК Телефон,
	|	РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение КАК ОрганизацияПриема,
	|	РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение.НаименованиеПолное КАК НаименованиеОрганизации,
	|	РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизацииСрезПоследних.Должность КАК Должность,
	|	РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение.КодПоОКПО КАК КодПоОКПО,
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо.ИмеетНаучныеТруды, ЛОЖЬ) КАК ИмеетНаучныеТруды,
	|	ЕСТЬNULL(РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо.ИмеетИзобретения, ЛОЖЬ) КАК ИмеетИзобретения
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаАктуальности,
	|				Сотрудник В (&Сотрудник)
	|					И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК РаботникиОрганизацииСрезПоследних
	|		ПО СотрудникиОрганизаций.Ссылка = РаботникиОрганизацииСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо В (&ФизЛицо)) КАК ФИОФизЛицСрезПоследних
	|		ПО СотрудникиОрганизаций.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияАдрес
	|		ПО СотрудникиОрганизаций.Физлицо = КонтактнаяИнформацияАдрес.Объект
	|			И (КонтактнаяИнформацияАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформацияАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияАдрес1
	|		ПО СотрудникиОрганизаций.Физлицо = КонтактнаяИнформацияАдрес1.Объект
	|			И (КонтактнаяИнформацияАдрес1.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтактнаяИнформацияАдрес1.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформацияТелефон
	|		ПО СотрудникиОрганизаций.Физлицо = КонтактнаяИнформацияТелефон.Объект
	|			И (КонтактнаяИнформацияТелефон.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|			И (КонтактнаяИнформацияТелефон.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонФизЛица))
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка В(&Сотрудник)";
	
	КадровыеДанные = Запрос.Выполнить().Выбрать();

	// ОБРАЗОВАНИЕ
	СписокВысшееОбразование = Новый СписокЗначений;                    
	СписокВысшееОбразование.Добавить(Справочники.ВидыОбразованияФизЛиц.ВысшееОбразование);
	СписокВысшееОбразование.Добавить(Справочники.ВидыОбразованияФизЛиц.Бакалавриат);
	Запрос.УстановитьПараметр("СписокВысшееОбразование", СписокВысшееОбразование);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаОбразование.Ссылка КАК ФизЛицо,
	|	ФизическиеЛицаОбразование.УчебноеЗаведение.Наименование КАК УчебноеЗаведение,
	|	ФизическиеЛицаОбразование.ГодОкончания КАК ГодОкончания
	|ИЗ
	|	Справочник.ФизическиеЛица.Образование КАК ФизическиеЛицаОбразование
	|ГДЕ
	|	ФизическиеЛицаОбразование.Ссылка В (&Физлицо)
	|   И ФизическиеЛицаОбразование.ВидОбразования В (&СписокВысшееОбразование)";
						 
	Образование = Запрос.Выполнить().Выбрать();
	
	// ПОСЛЕ ВУЗОВСКОЕ ОБРАЗОВАНИЕ
	СписокПослеВузовскоеОбразование	=	Новый СписокЗначений;                    
	СписокПослеВузовскоеОбразование.Добавить(Справочники.ВидыОбразованияФизЛиц.АспирантураОрдинатураАдъюнктура);
	СписокПослеВузовскоеОбразование.Добавить(Справочники.ВидыОбразованияФизЛиц.Докторантура);
	СписокПослеВузовскоеОбразование.Добавить(Справочники.ВидыОбразованияФизЛиц.ПослевузовскоеОбразование);
	ПослевузовскоеОбразование = Справочники.ВидыОбразованияФизЛиц.НайтиПоНаименованию("Послевузовское образование");
	Если ЗначениеЗаполнено(ПослевузовскоеОбразование) Тогда
		СписокПослеВузовскоеОбразование.Добавить(ПослевузовскоеОбразование);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокПослеВузовскоеОбразование",	СписокПослеВузовскоеОбразование);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаОбразование.Ссылка КАК ФизЛицо,
	|	МАКСИМУМ(ФизическиеЛицаОбразование.ГодОкончания) КАК ГодОкончания
	|ПОМЕСТИТЬ ОбразованиеПоследняяСтрока
	|ИЗ
	|	Справочник.ФизическиеЛица.Образование КАК ФизическиеЛицаОбразование
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛицаОбразование.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаОбразование.Ссылка КАК ФизЛицо,
	|	ФизическиеЛицаОбразование.ВидОбразования.Наименование КАК ПослеВузовскоеОбразование,
	|	ФизическиеЛицаОбразование.Специальность.Наименование КАК СпеципльностьПоДокументу,
	|	ФизическиеЛицаОбразование.УчебноеЗаведение.Наименование КАК НаименованиеУчреждения,
	|	ФизическиеЛицаОбразование.ВидОбразования.Код КАК ПослеВузовскоеОбразованиеКодОКИН,
	|	ФизическиеЛицаОбразование.ГодОкончания КАК ДатаОкончания,
	|	ФизическиеЛицаОбразование.Диплом КАК ДокументОбОбразовании,
	|	ФизическиеЛицаОбразование.Квалификация КАК КвалификацияПоДокументу,
	|	ФизическиеЛицаОбразование.Специальность.Код КАК КодОКСО
	|ИЗ
	|	ОбразованиеПоследняяСтрока КАК ОбразованиеПоследняяСтрока
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.Образование КАК ФизическиеЛицаОбразование
	|		ПО (ОбразованиеПоследняяСтрока.ФизЛицо = ФизическиеЛицаОбразование.Ссылка
	|				ИЛИ ОбразованиеПоследняяСтрока.ГодОкончания = ФизическиеЛицаОбразование.ГодОкончания)
	|ГДЕ
	|	ФизическиеЛицаОбразование.Ссылка В(&Физлицо)
	|	И ФизическиеЛицаОбразование.ВидОбразования В(&СписокПослеВузовскоеОбразование)";
						 
	ОбразованиеПослеВузовское = Запрос.Выполнить().Выбрать();
	
	
	//УЧЕНАЯ СТЕПЕНЬ
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаУченыеСтепени.Ссылка КАК ФизЛицо,
	|	МАКСИМУМ(ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени) КАК ДатаПрисужденияУченойСтепени
	|ПОМЕСТИТЬ ОбразованиеПоследняяСтрокаУченаяСтепень
	|ИЗ
	|	Справочник.ФизическиеЛица.УченыеСтепени КАК ФизическиеЛицаУченыеСтепени
	|ГДЕ
	|	ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени <= &ДатаАктуальности
	|	И ФизическиеЛицаУченыеСтепени.Ссылка В(&ФизЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛицаУченыеСтепени.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаУченыеСтепени.Ссылка КАК ФизЛицо,
	|	ФизическиеЛицаУченыеСтепени.УченаяСтепень КАК УченаяСтепень,
	|	ФизическиеЛицаУченыеСтепени.УченаяСтепень.Код КАК КодОКИНУченойСтепени,
	|	ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени КАК ДатаПрисвоенияУченойСтепени,
	|	ФизическиеЛицаУченыеСтепени.ОтрасльНауки КАК ОтрасальНаукУченойСтепени,
	|	ФизическиеЛицаУченыеСтепени.ДиссертационныйСовет КАК ДесиртационныйСовет,
	|	ФизическиеЛицаУченыеСтепени.ДипломСерияНомер КАК ДипломСерияНомер,
	|	ФизическиеЛицаУченыеСтепени.ДипломВыданОрганизация КАК НаименованиеОрганизацииВыдавшейДиплом
	|ИЗ
	|	ОбразованиеПоследняяСтрокаУченаяСтепень КАК ОбразованиеПоследняяСтрока
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.УченыеСтепени КАК ФизическиеЛицаУченыеСтепени
	|		ПО ОбразованиеПоследняяСтрока.ФизЛицо = ФизическиеЛицаУченыеСтепени.Ссылка
	|			И ОбразованиеПоследняяСтрока.ДатаПрисужденияУченойСтепени = ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени
	|ГДЕ
	|	ФизическиеЛицаУченыеСтепени.Ссылка В(&Физлицо)";
						 
	УченаяСтепень = Запрос.Выполнить().Выбрать();
	
	//УЧЕНОЕ ЗВАНИЕ
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаУченыеЗвания.Ссылка КАК ФизЛицо,
	|	МАКСИМУМ(ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания) КАК ДатаПрисвоенияУченогоЗвания
	|ПОМЕСТИТЬ ОбразованиеПоследняяСтрокаУченоеЗвание
	|ИЗ
	|	Справочник.ФизическиеЛица.УченыеЗвания КАК ФизическиеЛицаУченыеЗвания
	|ГДЕ
	|	ФизическиеЛицаУченыеЗвания.Ссылка В(&Физлицо)
	|	И ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания <= &ДатаАктуальности
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛицаУченыеЗвания.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаУченыеЗвания.Ссылка КАК ФизЛицо,
	|	ФизическиеЛицаУченыеЗвания.УченоеЗвание КАК УченоеЗвание,
	|	ФизическиеЛицаУченыеЗвания.УченоеЗвание.Код КАК КодОКИНУченогоЗвания,
	|	ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания КАК ДатаПрисвоенияУченогоЗвания,
	|	ФизическиеЛицаУченыеЗвания.АттестатНомер КАК НомерАттестата,
	|	ФизическиеЛицаУченыеЗвания.АттестатСерия КАК СерияАттестат,
	|	ФизическиеЛицаУченыеЗвания.НаучнаяСпециальность КАК НаучнаяСпециальность,
	|	ФизическиеЛицаУченыеЗвания.НаучнаяСпециальность.Код КАК КодОКСОПоСпециальности,
	|	ФизическиеЛицаУченыеЗвания.АттестатВыданОрганизация КАК НаименованиеОрганизацииПрисвоившейУченоеЗвание
	|ИЗ
	|	ОбразованиеПоследняяСтрокаУченоеЗвание КАК ОбразованиеПоследняяСтрока
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.УченыеЗвания КАК ФизическиеЛицаУченыеЗвания
	|		ПО ОбразованиеПоследняяСтрока.ФизЛицо = ФизическиеЛицаУченыеЗвания.Ссылка
	|			И ОбразованиеПоследняяСтрока.ДатаПрисвоенияУченогоЗвания = ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания
	|ГДЕ
	|	ФизическиеЛицаУченыеЗвания.Ссылка В(&Физлицо)";
						 
	УченыеЗвания = Запрос.Выполнить().Выбрать();
	
	//Список присвоений
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени КАК Дата,
	|	ФизическиеЛицаУченыеСтепени.ДипломСерияНомер КАК СерияНомер,
	|	ФизическиеЛицаУченыеСтепени.ДипломВыданОрганизация КАК Наименованиеорганизации,
	|	ФизическиеЛицаУченыеСтепени.УченаяСтепень КАК СтепеньЗвание,
	|	ФизическиеЛицаУченыеСтепени.Ссылка КАК ФизЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица.УченыеСтепени КАК ФизическиеЛицаУченыеСтепени
	|ГДЕ
	|	ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени <= &ДатаАктуальности
	|	И ФизическиеЛицаУченыеСтепени.Ссылка В(&ФизЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания,
	|	ФизическиеЛицаУченыеЗвания.АттестатСерия + ФизическиеЛицаУченыеЗвания.АттестатНомер,
	|	ФизическиеЛицаУченыеЗвания.АттестатВыданОрганизация,
	|	ФизическиеЛицаУченыеЗвания.УченоеЗвание,
	|	ФизическиеЛицаУченыеЗвания.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица.УченыеЗвания КАК ФизическиеЛицаУченыеЗвания
	|ГДЕ
	|	ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания <= &ДатаАктуальности
	|	И ФизическиеЛицаУченыеЗвания.Ссылка В(&ФизЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
						 
	СписокПрисвоений = Запрос.Выполнить().Выбрать();
	
	
	Группировки = ТиповыеОтчеты.ПолучитьПоляГруппировок(КомпоновщикНастроек);
	ВывестиКарточки(ДокументРезультат, ДеревоДанных.Строки, 0, Группировки, ЕстьОшибки);
	
	ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
	//Параметры документа
	ДокументРезультат.ПолеСлева				= 0;
	ДокументРезультат.ПолеСправа			= 0;
	ДокументРезультат.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_Форма_Т4";
	ДокументРезультат.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб           = истина;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
КонецПроцедуры 

Процедура ПолучитьСписокиФизЛицИСотрудников(СтрокиДеревоДанных, СписокСотрудников, СписокФизЛиц)
	
	Для Каждого СтрокаДанных из СтрокиДеревоДанных Цикл
		Если СтрокаДанных.Сотрудник <> Неопределено тогда
			
			СписокСотрудников.Добавить(СтрокаДанных.Сотрудник);
			СписокФизЛиц.Добавить(СтрокаДанных.Сотрудник.ФизЛицо);
			
		ИначеЕсли СтрокаДанных.Строки.Количество() > 0 Тогда
			
			ПолучитьСписокиФизЛицИСотрудников(СтрокаДанных.Строки, СписокСотрудников, СписокФизЛиц);
			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры
	

Процедура ВывестиКарточки(ДокументРезультат, СтрокиДеревоДанных, Уровень, Группировки, ЕстьОшибки)
	
	//выбрать карточки
	Для каждого СтрокаДерева из СтрокиДеревоДанных Цикл
		ПолеГруппировки = Группировки.Получить(Уровень);
		Если Группировки.Получить(Уровень) <> Неопределено и Группировки.Получить(Уровень).Значение <> "Сотрудник" тогда 
			//Нарисовать группировку
			ВывестиГруппировку(ДокументРезультат, СтрокаДерева, Группировки.Получить(Уровень).Значение, Уровень);
			Если Группировки.Количество()-1 >= Уровень+1 И Группировки.Получить(Уровень+1).Значение = "Сотрудник" тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ВывестиКарточки(ДокументРезультат, СтрокаДерева.Строки, Уровень+1, Группировки, ЕстьОшибки);
		ИначеЕсли Группировки.Получить(Уровень) <> Неопределено и Группировки.Получить(Уровень).Значение = "Сотрудник" тогда
			//Нарисовать карточку физлица
			СформироватьМакет(ДокументРезультат, СтрокаДерева.Сотрудник, ЕстьОшибки, Уровень);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиГруппировку(ДокументРезультат, СтрокаДанных, Поле, Уровень)
	
	МакетГруппировки  = ПолучитьМакет("МакетГруппировки");
	ОбластьГрупировки = МакетГруппировки.ПолучитьОбласть("Группировка");
	
	ДоступноеПоле = ТиповыеОтчеты.ПолучитьДоступноеПоле(Новый ПолеКомпоновкиДанных(Поле), КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок);
	
	ОбластьГрупировки.Параметры.НазваниеПарметра = ДоступноеПоле.Заголовок;
	ОбластьГрупировки.Параметры.Значение = СтрокаДанных[СтрЗаменить(Поле, ".", "")];
	
	ДокументРезультат.Вывести(ОбластьГрупировки, Уровень+1);
	
КонецПроцедуры 

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//	ДокументРезультат - табличный документ, формируемый отчетом,
//	ЕстьОшибки - флаг того, что при формировании произошли ошибки
//
Процедура СформироватьМакет(ДокументРезультат, Работник, ЕстьОшибки, Уровень) Экспорт

 	Макет = ПолучитьМакет("Т4_от_5_1_2004");
	Т4    = Макет.ПолучитьОбласть("Т4");
	
	
	СтруктураПоискаФизЛицо = Новый Структура("ФизЛицо", Работник.ФизЛицо);
	СтруктураПоискаСотрудник = Новый Структура("Сотрудник", Работник);
	
	КадровыеДанные.Сбросить();
	Если КадровыеДанные.НайтиСледующий(СтруктураПоискаСотрудник) тогда
		
		Т4.Параметры.Заполнить(КадровыеДанные);
		Т4.Параметры.НаименованиеОрганизации = СокрЛП(КадровыеДанные.НаименованиеОрганизации);
		
		Если КадровыеДанные.Фамилия = NULL тогда
			ФИО		=	ОбщегоНазначенияЗК.РазложитьСтрокуВМассивПодстрок(КадровыеДанные.Представление, " ");
			Если ФИО.Количество()	>	0	тогда
				Фамилия	=	ФИО[0];
			КонецЕсли;
			Если ФИО.Количество()	>	1	тогда
				Имя		=	ФИО[1];
			КонецЕсли;
			Если ФИО.Количество()	>	2	тогда
				Отчество=	ФИО[2];
			КонецЕсли;
			// ФИО
			
			Т4.Параметры.Фамилия  = Фамилия;
			Т4.Параметры.Имя      = Имя;
			Т4.Параметры.Отчество = Отчество;
		КонецЕсли;
		Т4.Параметры.ПерваяБукваФамилии = Лев(Т4.Параметры.Фамилия, 1);
		
		//ИМЕЕТ / НЕ ИМЕЕТ
	
		НаучныеТрудыИмеет   = Т4.Область("НаучныеТрудыИмеет");
		НаучныеТрудыНеИмеет = Т4.Область("НаучныеТрудыНеИмеет");
		ИзобретенияИмеет    = Т4.Область("ИзобретенияИмеет");
		ИзобретенияНеИмеет  = Т4.Область("ИзобретенияНеИмеет");
		
		Если НЕ КадровыеДанные.ИмеетНаучныеТруды тогда
			НаучныеТрудыИмеет.Шрифт = Новый Шрифт(НаучныеТрудыИмеет.Шрифт, , , , , , истина) ;
		Иначе
			НаучныеТрудыНеИмеет.Шрифт = Новый Шрифт(НаучныеТрудыНеИмеет.Шрифт, , , , , , истина) ;
		КонецЕсли;
		
		Если НЕ КадровыеДанные.ИмеетИзобретения тогда
			ИзобретенияИмеет.Шрифт = Новый Шрифт(ИзобретенияИмеет.Шрифт, , , , , , истина) ;
		Иначе
			ИзобретенияНеИмеет.Шрифт = Новый Шрифт(ИзобретенияНеИмеет.Шрифт, , , , , , истина) ;
		КонецЕсли;
	КонецЕсли;

	Образование.Сбросить();
	Пока Образование.НайтиСледующий(СтруктураПоискаФизЛицо) Цикл
		Т4.Параметры["ВысшееОбразование"]     = Образование.УчебноеЗаведение + ", " + Формат(Образование.ГодОкончания, "ЧЦ=4; ЧГ=");
	КонецЦикла;
	
	ОбразованиеПослеВузовское.Сбросить();
	Пока ОбразованиеПослеВузовское.НайтиСледующий(СтруктураПоискаФизЛицо) Цикл
		Т4.Параметры.Заполнить(ОбразованиеПослеВузовское);
	КонецЦикла;
	
	УченаяСтепень.Сбросить();
	Пока УченаяСтепень.НайтиСледующий(СтруктураПоискаФизЛицо) Цикл
		Т4.Параметры.Заполнить(УченаяСтепень);
		Т4.Параметры.НомерСерияДатаДиплома = УченаяСтепень.ДипломСерияНомер + ", " + ФОРМАТ(УченаяСтепень.ДатаПрисвоенияУченойСтепени, "ДФ=dd.MM.yyyy")
	КонецЦикла;
	
	УченыеЗвания.Сбросить();
	Пока УченыеЗвания.НайтиСледующий(СтруктураПоискаФизЛицо) Цикл
		Т4.Параметры.Заполнить(УченыеЗвания);
	КонецЦикла;
	
	//СТАЖИ
	ВыводитьДатуСтажа = Ложь;
	ВидСтажа = Новый СписокЗначений;
	ВидСтажа.Добавить(Справочники.ВидыСтажа.ПедагогическийСтаж);
	ВидСтажа.Добавить(Справочники.ВидыСтажа.ОбщийНаучноПедагогическийСтаж);
	
	ВыборкаПоСтажу = ПроведениеРасчетов.ВыбратьСтажиРаботника(Работник.Физлицо, " и ФизическиеЛицаСтажи.ВидСтажа В (&ВидСтажа)", ВидСтажа);
	ВыведенПроизвольныйСтаж = Ложь;
	Пока ВыборкаПоСтажу.Следующий()	Цикл

		ДатаНачалаОтсчетаСтажа = ДобавитьМесяц(ВыборкаПоСтажу.ДатаОтсчета, - ВыборкаПоСтажу.РазмерМесяцев) - ВыборкаПоСтажу.РазмерДней*86400;
		Лет		= 0;
		Месяцев	= 0;
		Дней	= 0;
		ОбщегоНазначенияЗК.РазобратьРазностьДат(НачалоДня(ДатаАктуальности), НачалоДня(ДатаНачалаОтсчетаСтажа), Лет, Месяцев, Дней);

		Если ВыборкаПоСтажу.ВидСтажа = Справочники.ВидыСтажа.ПедагогическийСтаж Тогда
			Т4.Параметры["НаучноПедагогическийСтаж"] = Формат(Дней, "ЧГ=0") + " дней " + Формат(Месяцев, "ЧГ=0") + " месяцев " + Формат(Лет, "ЧГ=0") + " лет";
		ИначеЕсли ВыборкаПоСтажу.ВидСтажа = Справочники.ВидыСтажа.ОбщийНаучноПедагогическийСтаж Тогда
			Т4.Параметры["ПедагогическийСтаж"] = Формат(Дней, "ЧГ=0") + " дней " + Формат(Месяцев, "ЧГ=0") + " месяцев " + Формат(Лет, "ЧГ=0") + " лет";
		КонецЕсли; 
		
	КонецЦикла;
	
	Т4.Параметры["ДолжностьКадровика"] = КадровыйРаботник.Должность;
	Т4.Параметры["ФИОКадровика"]       = УправлениеОтчетамиЗК.ФамилияИнициалыОтветсвенногоЛица(КадровыйРаботник.ФизЛицо);
	
	инд	= 1;
	СписокПрисвоений.Сбросить();
	Пока СписокПрисвоений.НайтиСледующий(СтруктураПоискаФизЛицо) Цикл
		Т4.Параметры["Дата" + инд]       = Формат(СписокПрисвоений.Дата, "ДФ=dd.MM.yyyy");
		Т4.Параметры["СерияНомер" + инд] = СписокПрисвоений.СерияНомер;
		Т4.Параметры["Наименованиеорганизации" + инд] = СписокПрисвоений.Наименованиеорганизации;
		Т4.Параметры["СтепеньЗвание" + инд] = СписокПрисвоений.СтепеньЗвание;
		инд	= инд + 1;
		Если инд >= 16 тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ДокументРезультат.Вывести(Т4, Уровень+1);
	
КонецПроцедуры


Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

//Процедура ПередВыводомЭлементРезультата(МакетКомпоновки, ПроцессорКомпоновки, ЭлементРезультата) Экспорт
//	
//КонецПроцедуры

//Процедура ПередВыводомОтчета(МакетКомпоновки, ПроцессорКомпоновки) Экспорт
//	
//	
//КонецПроцедуры

//Процедура ПриВыводеЗаголовкаОтчета(ОбластьЗаголовок) Экспорт
//КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	СписокПолейПодстановкиОтборовПоУмолчанию.Вставить("ДанныеОРаботнике.Организация", "ОсновнаяОрганизация");
	
	Возврат Новый Структура("ДополнительныеНастройкиОтчета, ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию", 
	истина, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию);
	
КонецФункции


мДлинаСуток = 86400;
ДатаАктуальности = ОбщегоНазначенияЗК.ПолучитьРабочуюДату();

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

УправлениеОтчетами.ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);

