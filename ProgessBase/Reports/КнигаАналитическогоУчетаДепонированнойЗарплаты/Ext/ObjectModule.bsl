Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	ЗначениеПанелипользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ЭтотОбъект);
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	Если ЗначениеПанелипользователя <> Неопределено тогда
		ЗначениеПанелипользователя.ВыводитьЗаголовокОтчета = ложь;
		ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ЗначениеПанелипользователя);
	КонецЕсли;
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	СписокГруппировок = ТиповыеОтчеты.ПолучитьЭлементыСтруктуры(КомпоновщикНастроек);
	Для каждого ЭлементСпискаГруппировки из СписокГруппировок Цикл
		Группировка = ЭлементСпискаГруппировки.Значение;
		ТиповыеОтчеты.УстановитьПараметрВывода(Группировка, "TemplateType", ТипМакетаГруппировкиКомпоновкиДанных.Вертикальный);
	КонецЦикла;
	
	Группировка = ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, "Организация");
	Группировка.Имя = "Шапка";
	ТиповыеОтчеты.УстановитьПараметрВывода(Группировка, "TemplateType", ТипМакетаГруппировкиКомпоновкиДанных.Горизонтальный);
	ТиповыеОтчеты.УстановитьПараметрВывода(Группировка, "AppearanceTemplate", "None");
	
	ГруппировкаПоВедомости = ТиповыеОтчеты.ДобавитьГруппировку(КомпоновщикНастроек, "Ведомость");
	ГруппировкаПоВедомости.Имя = "Строка";
	ТиповыеОтчеты.УстановитьПараметрВывода(ГруппировкаПоВедомости, "TemplateType", ТипМакетаГруппировкиКомпоновкиДанных.Горизонтальный);
	ТиповыеОтчеты.УстановитьПараметрВывода(ГруппировкаПоВедомости, "AppearanceTemplate", "None");
	ТиповыеОтчеты.УстановитьПараметрВывода(ГруппировкаПоВедомости, "TotalsPlacement", РасположениеИтоговКомпоновкиДанных.Нет);
	
	
	ЭлементГрупп = ГруппировкаПоВедомости.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГрупп.Поле = Новый ПолеКомпоновкиДанных("Период");
	ЭлементГрупп.Использование = истина;
	ЭлементГрупп = ГруппировкаПоВедомости.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГрупп.Поле = Новый ПолеКомпоновкиДанных("Сотрудник");
	ЭлементГрупп.Использование = истина;
	ЭлементГрупп = ГруппировкаПоВедомости.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ЭлементГрупп.Поле = Новый ПолеКомпоновкиДанных("Физлицо");
	ЭлементГрупп.Использование = истина;
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	Возврат Результат;
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Процедура ПередВыводомЭлементРезультата(МакетКомпоновки, ПроцессорКомпоновки, ЭлементРезультата) Экспорт
	
КонецПроцедуры

Процедура ПередВыводомОтчета(МакетКомпоновки, ПроцессорКомпоновки) Экспорт
	
	
КонецПроцедуры

Процедура ПриВыводеЗаголовкаОтчета(ОбластьЗаголовок) Экспорт
КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	СписокПолейПодстановкиОтборовПоУмолчанию = Новый Соответствие;
	СписокПолейПодстановкиОтборовПоУмолчанию.Вставить("Организация", "ОсновнаяОрганизация");
	
	Возврат Новый Структура("ИспользоватьСобытияПриФормированииОтчета,
	|ПриВыводеЗаголовкаОтчета,
	|ПослеВыводаПанелиПользователя,
	|ПослеВыводаПериода,
	|ПослеВыводаПараметра,
	|ПослеВыводаГруппировки,
	|ПослеВыводаОтбора,
	|ДействияПанелиИзменениеФлажкаДопНастроек,
	|ПриПолучениеНастроекПользователя, 
	|ЗаполнитьОтборыПоУмолчанию, 
	|СписокПолейПодстановкиОтборовПоУмолчанию", 
	ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, ложь, истина, СписокПолейПодстановкиОтборовПоУмолчанию);
КонецФункции

#КонецЕсли

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры


Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	Для каждого СтрокаОтбора из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если НЕ СтрокаОтбора.Использование 
			или ТипЗнч(СтрокаОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
		    или СтрокаОтбора.ЛевоеЗначение <> Новый ПолеКомпоновкиДанных("ПодразделениеОрганизации") 
		    или (СтрокаОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно и СтрокаОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВИерархии)тогда 
			Продолжить;
		КонецЕсли;
		
		ТиповыеОтчеты.УстановитьПараметр(КомпоновщикНастроек, "Подразделение", СтрокаОтбора.ПравоеЗначение);
	КонецЦикла;
	
КонецПроцедуры
#КонецЕсли


ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.ДанныеПоДепонированию.Запрос;
УправлениеОтчетамиЗК.ПолучитьТаблицуРаботников(, ТекстЗапроса, "ТаблицаДвижения", истина);
УправлениеОтчетамиЗК.ПодставитьРасчетПолей(ТекстЗапроса, "РаботникиПредприятия", "РаботникиОрганизаций", "ПодразделениеОрганизации", "Должность");
СхемаКомпоновкиДанных.НаборыДанных.ДанныеПоДепонированию.Запрос = ТекстЗапроса;

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

УправлениеОтчетами.ЗаменитьНазваниеПолейСхемыКомпоновкиДанных(СхемаКомпоновкиДанных)