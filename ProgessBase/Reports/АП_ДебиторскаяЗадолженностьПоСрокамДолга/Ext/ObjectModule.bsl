#Если Клиент Тогда
Перем ВыводитьВремя;	
Перем ТаблИнтерв;
Перем ТаблИтоговаяРазвернуто;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

Функция ПолучитьТекстЗапросаНастройки(Пар=1)
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВзаиморасчетыСКонтрагентами.Контрагент,
	               |	ВзаиморасчетыСКонтрагентами.Организация,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	               |	ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
	               |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаОплаты,
	               |	0 КАК ДнейПросрочено,
				   |	0 КАК Отсрочка,
	               |	ВзаиморасчетыСКонтрагентами.Регистратор.Дата КАК Дата,
	               |	0 КАК СуммаВсего,
	               |	0 КАК НеПросроченныйДолг,
	               |	0 КАК ПросроченныйДолгПоИнтервалам,
	               |	0 КАК ПросроченныйДолг,
	               |	ВзаиморасчетыСКонтрагентами.Контрагент.ГоловнойКонтрагент КАК ГоловнойКонтрагент
	               |ПОМЕСТИТЬ ТаблИтого
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	               |ГДЕ
	               |	1 = 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Контрагент,
	               |	ТаблИтого.Организация,
	               |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	               |	ТаблИтого.ДатаОплаты,
	               |	ТаблИтого.ДнейПросрочено,
				   |	ТаблИтого.Отсрочка,
	               |	ТаблИтого.Организация.Представление,
	               |	Контрагенты.Ссылка.Представление КАК КонтрагентПредставление,
	               |	ДоговорыКонтрагентов.Ссылка.Представление КАК ДоговорКонтрагентаПредставление,
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	               |	Контрагенты.ОсновнойМенеджерПокупателя КАК МенеджерПокупателя,
	               |	Контрагенты.Дивизион КАК Дивизион,
	               |	Контрагенты.НСИ_ТорговаяКоманда КАК ТорговаяКоманда,
	               |	ТаблИтого.Регистратор,
	               |	ТаблИтого.Дата,
	               |	ТаблИтого.СуммаВсего,
	               |	ТаблИтого.НеПросроченныйДолг,
	               |	ТаблИтого.ПросроченныйДолгПоИнтервалам,
	               |	ТаблИтого.ПросроченныйДолг,
	               |	Контрагенты.ГоловнойКонтрагент,
	               |	ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних.ДопустимаяСуммаЗадолженности КАК КредитныйЛимит,
	               |	ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.ПричинаБлокировкиОтгрузки КАК ПричинаБлокировки,
	               |	ПКК_СтатусыДЗСрезПоследних.СтатусДЗ КАК СтатусДЗ,
				   |	ВЫБОР КОГДА ТаблИтого.СуммаВсего > 0 ТОГДА ВЫРАЗИТЬ((ТаблИтого.ПросроченныйДолг/ТаблИтого.СуммаВсего)*100 КАК ЧИСЛО(15,2)) ИНАЧЕ 0 КОНЕЦ КАК ПроцентПросрочки,
				   |	Контрагенты.НСИ_Вывеска КАК Вывеска,
				   |	Контрагенты.Код КАК КонтрагентКод,
				   |	Контрагенты.НСИ_КатегорияКлиента КАК КатегорияКлиента,
				   |	Контрагенты.НСИ_КаналПродаж КАК КаналПродаж
				   |{ВЫБРАТЬ
	               |	Организация.*,
	               |	ДоговорКонтрагента.*,
	               |	ДатаОплаты,
	               |	ДнейПросрочено,
				   |	Отсрочка,
	               |	Контрагент.*,
	               |	ВалютаВзаиморасчетов.*,
	               |	МенеджерПокупателя.*,
	               |	Дивизион.*,
	               |	ТорговаяКоманда.*,
	               |	Регистратор.*,
	               |	Дата,
	               |	СуммаВсего,
	               |	НеПросроченныйДолг,
	               |	ПросроченныйДолгПоИнтервалам,//
	               |	ПросроченныйДолг,              				   
	               |	ГоловнойКонтрагент.*,
				   |	КредитныйЛимит,
				   |	ПричинаБлокировки.*,
				   |	СтатусДЗ.*,
				   |	ПроцентПросрочки,
				   |	Вывеска.*,
				   |	КонтрагентКод,
				   |	КатегорияКлиента.*,
				   |	КаналПродаж.*}
				   |ИЗ
	               |	ТаблИтого КАК ТаблИтого
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ТаблИтого.Контрагент = Контрагенты.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |		ПО ТаблИтого.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежа.СрезПоследних КАК ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних
	               |		ПО ТаблИтого.Контрагент = ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_ПричиныБлокировкиОтгрузки.СрезПоследних КАК ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних
	               |		ПО ТаблИтого.Контрагент = ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_СтатусыДЗ.СрезПоследних КАК ПКК_СтатусыДЗСрезПоследних
	               |		ПО ТаблИтого.Контрагент = ПКК_СтатусыДЗСрезПоследних.Контрагент
	               |{ГДЕ
	               |	ТаблИтого.Организация.*,
	               |	ТаблИтого.ДоговорКонтрагента.*,
	               |	Контрагенты.Ссылка.* КАК Контрагент,
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов.*,
	               |	Контрагенты.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
	               |	Контрагенты.Дивизион.* КАК Дивизион,
	               |	Контрагенты.НСИ_ТорговаяКоманда.* КАК ТорговаяКоманда,
	               |	Контрагенты.ГоловнойКонтрагент.*,
	               |	ТаблИтого.СуммаВсего,
				   |	ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних.ДопустимаяСуммаЗадолженности КАК КредитныйЛимит,
	               |	ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.ПричинаБлокировкиОтгрузки.* КАК ПричинаБлокировки,
	               |	ПКК_СтатусыДЗСрезПоследних.СтатусДЗ.* КАК СтатусДЗ}
	               |{УПОРЯДОЧИТЬ ПО
	               |	Контрагент.*,
	               |	Организация.*,
	               |	ДоговорКонтрагента.*,
	               |	ВалютаВзаиморасчетов.*,
	               |	МенеджерПокупателя.*,
	               |	Дивизион.*,
	               |	ТорговаяКоманда.*,
	               |	Регистратор.*,
	               |	ГоловнойКонтрагент.*,
				   |	КредитныйЛимит,
				   |	ПричинаБлокировки.*,
				   |	СтатусДЗ.*}
				   |ИТОГИ
				   |	СУММА(СуммаВсего),
				   |	СУММА(НеПросроченныйДолг),
				   |	СУММА(ПросроченныйДолгПоИнтервалам),//
				   |	СУММА(ПросроченныйДолг),
				   |	ВЫБОР КОГДА СУММА(СуммаВсего) > 0 ТОГДА ВЫРАЗИТЬ((СУММА(ПросроченныйДолг)/СУММА(СуммаВсего))*100 КАК ЧИСЛО(15,2)) ИНАЧЕ 0 КОНЕЦ КАК ПроцентПросрочки
				   |	
				   |ПО
				   //|	ОБЩИЕ
				   |	Дивизион,
				   |	ВалютаВзаиморасчетов,
				   |	ТаблИтого.Организация,
				   |	Контрагент,
				   |	ДоговорКонтрагента,
				   |	МенеджерПокупателя,				   
				   |	ТорговаяКоманда,
				   |	Регистратор,
				   |	Контрагенты.ГоловнойКонтрагент,
				   |	ПричинаБлокировки,
				   |	СтатусДЗ
	               |{ИТОГИ ПО
	               |	ВалютаВзаиморасчетов,
	               |	Организация.*,
	               |	Контрагент.*,
	               |	ДоговорКонтрагента.*,
	               |	МенеджерПокупателя.*,
	               |	Дивизион.*,
	               |	ТорговаяКоманда.*,
	               |	Регистратор.*,
	               |	ГоловнойКонтрагент.*,
				   |	ПричинаБлокировки.*,
				   |	СтатусДЗ.*}";
	
	Если Пар = 2 Тогда
		
		//Поз = Найти(ТекстЗапроса,"{ИТОГИ ПО");
		//Если Поз > 0 Тогда
		//	ТекстЗапроса = Лев(ТекстЗапроса,Поз-1);
		//КонецЕсли;
		
		//корректируем просроченный долг
		//1. меняем 0 КАК ПросроченныйДолгПоИнтервалам
		Поиск = "0 КАК ПросроченныйДолгПоИнтервалам,";
		СтрЗамены = "";
		Для к = 0 По ТаблИнтерв.Количество() - 1 Цикл
			Если ТаблИнтерв[к].БылоЧтоТо Тогда
				СтрЗамены = СтрЗамены+" 0"+" Как "+ТаблИнтерв[к].ИмяКолонки+",";
			КонецЕсли;	
		Конеццикла;	
		
		Если Прав(СтрЗамены,1)= "," Тогда
			//СтрЗамены = Лев(СтрЗамены,СтрДлина(СтрЗамены)-1);
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтрЗамены) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,Поиск,СтрЗамены);
		КонецЕсли;	
		
		//2.  меняем ТаблИтого.ПросроченныйДолгПоИнтервалам
		СтрЗамены = "";
		Поиск 	  = "ТаблИтого.ПросроченныйДолгПоИнтервалам,";
		Для к = 0 По ТаблИнтерв.Количество() - 1 Цикл
			Если ТаблИнтерв[к].БылоЧтоТо Тогда
				СтрЗамены = СтрЗамены+" ТаблИтого."+ТаблИнтерв[к].ИмяКолонки+" Как "+ТаблИнтерв[к].ИмяКолонки+",";
			КонецЕсли;	
		Конеццикла;	
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,Поиск,СтрЗамены);
		
		//3. ПросроченныйДолгПоИнтервалам}
		СтрЗамены = "";
		Поиск 	  = "ПросроченныйДолгПоИнтервалам,//";
		Для к = 0 По ТаблИнтерв.Количество() - 1 Цикл
			Если ТаблИнтерв[к].БылоЧтоТо Тогда
				СтрЗамены = СтрЗамены+" ТаблИтого."+ТаблИнтерв[к].ИмяКолонки+" Как "+ТаблИнтерв[к].ИмяКолонки+",";
			КонецЕсли;	
		Конеццикла;	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,Поиск,СтрЗамены);
		
		//4. Итоги ПросроченныйДолгПоИнтервалам}
		СтрЗамены = "";
		Поиск 	  = "СУММА(ПросроченныйДолгПоИнтервалам),//";
		Для к = 0 По ТаблИнтерв.Количество() - 1 Цикл
			Если ТаблИнтерв[к].БылоЧтоТо Тогда
				СтрЗамены = СтрЗамены+" СУММА("+ТаблИнтерв[к].ИмяКолонки+") Как "+ТаблИнтерв[к].ИмяКолонки+",";
			КонецЕсли;	
		Конеццикла;	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,Поиск,СтрЗамены);
		
	КонецЕсли;	
	возврат ТекстЗапроса;
КонецФункции	

// Процедура установки начальных настроек отчета по метаданным регистра накопления
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	УниверсальныйОтчет.мРежимВводаПериода = 1;
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	ТекстЗапроса = ПолучитьТекстЗапросаНастройки(1);
	
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Очистить();
	
	
	// УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить(<ИмяПоля>, <ПредставлениеПоля>);
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента", "Договор контрагента");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента", "Договор контрагента");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаОплаты", "Дата оплаты");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Отсрочка", "Дней отсрочки");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КредитныйЛимит", "Кредитный лимит");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПричинаБлокировки", "Причина блокировки");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтатусДЗ", "Статус ДЗ");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПроцентПросрочки", "% ПДЗ");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДнейПросрочено", "Дней просрочено");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента", "Договор контрагента");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВалютаВзаиморасчетов", "Валюта взаиморасчетов");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("МенеджерПокупателя", "Менеджер покупателя");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Дивизион", "Дивизион");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ТорговаяКоманда", "Торговая команда");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ГоловнойКонтрагент", "Головной контрагент");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КаналТовародвижения", "Канал товародвижения");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЦеноваяГруппаКонтрагента", "Ценовая группа");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Регистратор", "Документ");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СуммаВсего", "Итого задолж-ть");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("НеПросроченныйДолг", "Не просроч-я задолж-ть");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПросроченныйДолг", "Просроч-я задолж-ть");
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	//УниверсальныйОтчет.ИмяРегистра = "РасчетыСКонтрагентами";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	 УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Ложь;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	 УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	//МассивТипов = Новый Массив;
	//МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	//УниверсальныйОтчет.ДобавитьПолеГруппировка("Контрагент",  "ДоговорКонтрагента", "Владелец",    "Контрагент",  Новый ОписаниеТипов(МассивТипов));
	//
	//МассивТипов.Очистить();
	//МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	//УниверсальныйОтчет.ДобавитьПолеГруппировка("Организация", "ДоговорКонтрагента", "Организация", "Организация", Новый ОписаниеТипов(МассивТипов));
	
	//УниверсальныйОтчет.ДобавитьПолеГруппировка("ВалютаВзаиморасчетов", "ДоговорКонтрагента", "ВалютаВзаиморасчетов", "Валюта взаиморасчетов");
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
				   //|	СуммаВсего,
				   //|	НеПросроченныйДолг,
				   //|	ПросроченныйДолг,
				   //|	ПросроченныйДолгПоИнтервалам}
	
	
	УниверсальныйОтчет.ДобавитьПоказатель("СуммаВсего", "Итого задолж-ть",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("НеПросроченныйДолг", "Не просроч-я задолж-ть",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("ПросроченныйДолг", "Просроч-я задолж-ть",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("ПросроченныйДолгПоИнтервалам", "Просроч-я задолж-ть по интерв.",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	
	УниверсальныйОтчет.ДобавитьПоказатель("ПроцентПросрочки", "% ПДЗ",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	
	УниверсальныйОтчет.Показатели.Строки[0].Использование = Истина;
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаУпрОборот",,            Ложь,, "СуммаУпр");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовОборот",, Ложь,, "СуммаВзаиморасчетов");
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Дивизион");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ВалютаВзаиморасчетов");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("МенеджерПокупателя"); 
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Регистратор");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Дивизион");
	УниверсальныйОтчет.ДобавитьОтбор("ТорговаяКоманда");
	УниверсальныйОтчет.ДобавитьОтбор("Контрагент");
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	УниверсальныйОтчет.ДобавитьОтбор("ДоговорКонтрагента");
	//УниверсальныйОтчет.ДобавитьОтбор("МенеджерПокупателя");
	УниверсальныйОтчет.ДобавитьОтбор("ВалютаВзаиморасчетов");
	//m.ionov@a-prof.ru 19.02.2015
	//Для того чтобы сумма сходилась с отчетов ведомость по дебиторской задолжности - не будем включать этот фильтр
	//УниверсальныйОтчет.ДобавитьОтбор("СуммаВсего",Истина,ВидСравнения.Больше,0, , , Ложь);
	УниверсальныйОтчет.ДобавитьОтбор("СуммаВсего",Ложь,ВидСравнения.Больше,0, , , Ложь);
	//----m.ionov@a-prof.ru---
	///УниверсальныйОтчет.ДобавитьОтбор("РасчетыВозврат");
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	//УниверсальныйОтчет.ДобавитьПорядок("Регистратор.Дата"); пока убираем
	//УниверсальныйОтчет.ДобавитьПорядок("Регистратор");
	
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	//*******************************************добавить если нужно
	
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Регистратор",ТипРазмещенияРеквизитовИзмерений.Вместе,2);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ДатаОплаты",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ДнейПросрочено",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Отсрочка",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
	
	УслОформление  = УниверсальныйОтчет.ПостроительОтчета.УсловноеОформление.Добавить("ДатаОплаты","Дата оплаты");
	//УслОформление.ОФормление  = Новый НастройкаОформления();
	УслОформление.Использование 										  = Истина;
	Область = УслОформление.Область.Добавить("ДатаОплаты","Дата оплаты",ТипОбластиОформления.Поле);
	УслОформление.ОФормление.Формат.Значение					 = "ДФ=dd.MM.yyyy";
	УслОформление.ОФормление.Формат.Использование 				 = Истина;
	УслОформление.ОФормление.ГоризонтальноеПоложение.Значение = ГоризонтальноеПоложение.Центр;
	УслОформление.ОФормление.ГоризонтальноеПоложение.Использование = истина;

	
	// Установка представлений полей
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета,истина);
	
	//
	//УслОформление  = УниверсальныйОтчет.ПостроительОтчета.УсловноеОформление.Добавить("ДатаОплаты","Дата оплаты");
	////УслОформление.ОФормление  = Новый НастройкаОформления();
	//УслОформление.Использование 										  = Истина;
	//Область = УслОформление.Область.Добавить("ДатаОплаты","Дата оплаты",ТипОбластиОформления.Поле);
	//УслОформление.ОФормление.Формат.Значение					 = "ДФ=dd.MM.yyyy";
	//УслОформление.ОФормление.Формат.Использование 				 = Истина;
	//УслОформление.ОФормление.ГоризонтальноеПоложение.Значение = ГоризонтальноеПоложение.Центр;
	//УслОформление.ОФормление.ГоризонтальноеПоложение.Использование = истина;
	//
	//
	//УслОформление  = УниверсальныйОтчет.ПостроительОтчета.УсловноеОформление.Добавить("ДнейПросрочено","Дней просрочено");
	////УслОформление.ОФормление  = Новый НастройкаОформления();
	//УслОформление.Использование 								= Истина;
	//Область = УслОформление.Область.Добавить("ДнейПросрочено","Дней просрочено",ТипОбластиОформления.Поле);
	//
	//УслОформление.ОФормление.Формат.Значение					 = "ЧЦ=4";
	//УслОформление.ОФормление.Формат.Использование 				 = Истина;
	//УслОформление.ОФормление.ГоризонтальноеПоложение.Значение = ГоризонтальноеПоложение.Центр;
	//УслОформление.ОФормление.ГоризонтальноеПоложение.Использование = истина;
	
	
	//УслОформление.ОФормление
	
КонецПроцедуры // УстановитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 

Функция ПолучитьТекстЗапроса_РегистрыБУХ()
	возврат "ВЫБРАТЬ
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация КАК Организация,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	        |	СУММА(ВЫБОР
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
	        |				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
	        |				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход,
	        |	СУММА(ВЫБОР
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
	        |				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
	        |				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
	        |				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
	        |				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			ИНАЧЕ 0
	        |		КОНЕЦ - ВЫБОР
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
	        |				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
	        |				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК КонОст,
	        |	СУММА(ВЫБОР
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
	        |							ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
	        |							ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК ПриходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
	        |							ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
	        |							ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК РасходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период < &Дата1
	        |							ТОГДА ВЫБОР
	        |									КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |											И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
	        |										ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |									КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |											И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
	        |										ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |						ИНАЧЕ 0
	        |					КОНЕЦ - ВЫБОР
	        |						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
	        |							ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
	        |							ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК НачОст
	        |ПОМЕСТИТЬ ТаблКонтр
	        |ИЗ
	        |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
	        |ГДЕ
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Активность
	        |	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период <= &Дата2
	        |	//И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент.Код = ""52878""
	        |{ГДЕ
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.*,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент.*,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация.*,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК Валюта}
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент
	        |
	        |ИМЕЮЩИЕ
	        |	СУММА(ВЫБОР
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
	        |				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
	        |				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			ИНАЧЕ 0
	        |		КОНЕЦ - ВЫБОР
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
	        |				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
	        |				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) <> 0
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Организация,
	        |	ДоговорКонтрагента,
	        |	Валюта
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВЫБОР
	        |		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента
	        |		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период
	        |	КОНЕЦ КАК Дата,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.Владелец КАК Контрагент,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	        |	ВЫБОР
	        |		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДокументДвижения <> &ПустойДокумент
	        |			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДокументДвижения
	        |		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор
	        |	КОНЕЦ КАК Регистратор,
	        |	ВЫБОР
	        |		КОГДА НЕ РеализацияТоваровУслуг.АП_ДатаОплаты ЕСТЬ NULL 
	        |			ТОГДА ВЫБОР
	        |					КОГДА РеализацияТоваровУслуг.АП_ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |						ТОГДА РеализацияТоваровУслуг.Дата
	        |					ИНАЧЕ РеализацияТоваровУслуг.АП_ДатаОплаты
	        |				КОНЕЦ
	        |		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаОплаты
	        |		ИНАЧЕ ВЫБОР
	        |				КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |					ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента
	        |				ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период
	        |			КОНЕЦ
	        |	КОНЕЦ КАК ДатаОплаты,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	СУММА(ВЫБОР
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
	        |				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
	        |				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаРег) КАК СуммаРег,
	        |	СУММА(ВЫБОР
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
	        |				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
	        |				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация КАК Организация,
	        |	ТаблКонтр.Расход КАК ИтогоРасход,
	        |	ТаблКонтр.Приход КАК ИтогоПриход,
	        |	СУММА(ТаблКонтр.ПриходНач) КАК ИтогоПриходНач,
	        |	СУММА(ТаблКонтр.РасходНач) КАК ИтогоРасходНач
	        |ИЗ
	        |	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	        |		ПО РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор = РеализацияТоваровУслуг.Ссылка
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
	        |		ПО РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация = ТаблКонтр.Организация
	        |			И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
	        |			И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов = ТаблКонтр.Валюта
	        |ГДЕ
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Активность
	        |	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период <= &Дата2
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВЫБОР
	        |		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента
	        |		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период
	        |	КОНЕЦ,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.Владелец,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	        |	ВЫБОР
	        |		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДокументДвижения <> &ПустойДокумент
	        |			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДокументДвижения
	        |		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор
	        |	КОНЕЦ,
	        |	ВЫБОР
	        |		КОГДА НЕ РеализацияТоваровУслуг.АП_ДатаОплаты ЕСТЬ NULL 
	        |			ТОГДА ВЫБОР
	        |					КОГДА РеализацияТоваровУслуг.АП_ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |						ТОГДА РеализацияТоваровУслуг.Дата
	        |					ИНАЧЕ РеализацияТоваровУслуг.АП_ДатаОплаты
	        |				КОНЕЦ
	        |		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаОплаты
	        |		ИНАЧЕ ВЫБОР
	        |				КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |					ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента
	        |				ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период
	        |			КОНЕЦ
	        |	КОНЕЦ,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
	        |	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация,
	        |	ТаблКонтр.Расход,
	        |	ТаблКонтр.Приход
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Организация,
	        |	Контрагент,
	        |	ДоговорКонтрагента,
	        |	Валюта,
	        |	Дата,
			|	ДатаОплаты,
	        |	Регистратор
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |УНИЧТОЖИТЬ ТаблКонтр";
КонецФункции

Функция ПолучитьТекстЗапроса()
	возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |							ТОГДА 0
	        |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |		КОНЕЦ) КАК ПриходКон,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |							ТОГДА 0
	        |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |		КОНЕЦ) КАК РасходКон,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК ПриходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК РасходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход
	        |ПОМЕСТИТЬ ТаблКонтр
	        |{ВЫБРАТЬ
	        |	Организация.*,
	        |	ДоговорКонтрагента.*,
	        |	Контрагент.*}
	        |ИЗ
	        |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	        |ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	        |	И ВзаиморасчетыСКонтрагентами.Активность
	        |	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
	        |{ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент.*,
	        |	ВзаиморасчетыСКонтрагентами.Организация.*,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
			//|	ВзаиморасчетыСКонтрагентами.Контрагент.ЦеноваяГруппаКонтрагента.* КАК ЦеноваяГруппаКонтрагента,
			//|	ВзаиморасчетыСКонтрагентами.Контрагент.КаналТовародвижения.* КАК КаналТовародвижения,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	        //|	ВзаиморасчетыСКонтрагентами.Контрагент.Проект.* КАК Проект
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВзаиморасчетыСКонтрагентами.Организация,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент
	        |
	        |ИМЕЮЩИЕ
	        |	(СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |								ТОГДА 0
	        |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |						КОНЕЦ
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |								ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |			КОНЕЦ - ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |								ТОГДА 0
	        |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |						КОНЕЦ
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |								ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ - ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0)
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Организация,
	        |	ДоговорКонтрагента,
	        |	Контрагент
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ КАК Дата,
	        |	ВЫБОР
	        |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	        |	КОНЕЦ КАК Регистратор,
			|ВЫБОР
			|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
			|		ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
			|		ТОГДА КорректировкаРеализации.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
			|		ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
			|		ТОГДА КорректировкаДолга.АП_ДатаОплаты
			|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
			|КОНЕЦ КАК ДатаОплаты,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход,
	        |	Минимум(ТаблКонтр.ПриходНач) КАК ПриходНач,
	        |	Минимум(ТаблКонтр.РасходНач) КАК РасходНач,
	        |	Минимум(ТаблКонтр.ПриходКон) КАК ПриходКон,
	        |	Минимум(ТаблКонтр.РасходКон) КАК РасходКон,
	        |	ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты КАК ПроцентОтгрузки
			|{ВЫБРАТЬ
	        |	Организация.*,
	        |	ДоговорКонтрагента.*,
	        |	Контрагент.*}
	        |ИЗ
	        |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	        |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = РеализацияТоваровУслуг.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаРеализации.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаЗаписейРегистров.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга КАК КорректировкаДолга
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаДолга.Ссылка
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
	        |		ПО ВзаиморасчетыСКонтрагентами.Организация = ТаблКонтр.Организация
	        |			И ВзаиморасчетыСКонтрагентами.Контрагент = ТаблКонтр.Контрагент
	        |			И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
	        |ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	        |	И ВзаиморасчетыСКонтрагентами.Активность
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВзаиморасчетыСКонтрагентами.Организация,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	        |	ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,
	        |	ВЫБОР
	        |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	        |	КОНЕЦ,
			|ВЫБОР
			|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
			|		ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
			|		ТОГДА КорректировкаРеализации.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
			|		ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
			|		ТОГДА КорректировкаДолга.АП_ДатаОплаты
			|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
			|КОНЕЦ,
	        | ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Организация,
	        |	Контрагент,
	        |	ДоговорКонтрагента,
			|	Дата,
	        |	ДатаОплаты,
	        |	Регистратор";
	

КонецФункции

Функция ПолучитьТекстЗапросИтоговый()
	возврат ПолучитьТекстЗапросаНастройки(2);
	//возврат "ВЫБРАТЬ
	//		|	ВзаиморасчетыСКонтрагентами.Контрагент,
	//		|	ВзаиморасчетыСКонтрагентами.Организация,
	//		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	//		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	//		|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
	//		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаОплаты,
	//		|	0 КАК ДнейПросрочено,
	//		|	ВзаиморасчетыСКонтрагентами.Регистратор.Дата КАК Дата,
	//		|	0 КАК НачОст,
	//		|	0 КАК Приход,
	//		|	0 КАК Расход,
	//		|	0 КАК КонОст,
	//		|	0 КАК Погашено,
	//		|	0 КАК Просрочено
	//		|ПОМЕСТИТЬ ТаблИтого
	//		|ИЗ
	//		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	//		|ГДЕ
	//		|	1 = 0
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	Контрагенты.Ссылка КАК Контрагент,
	//		|	ТаблИтого.Организация,
	//		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	//		|	ТаблИтого.ДатаОплаты,
	//		|	ТаблИтого.ДнейПросрочено,
	//		|	ТаблИтого.НачОст,
	//		|	ТаблИтого.Приход,
	//		|	ТаблИтого.Расход,
	//		|	ТаблИтого.КонОст,
	//		|	ТаблИтого.Погашено,
	//		|	ТаблИтого.Просрочено,
	//		|	ТаблИтого.Организация.Представление,
	//		|	Контрагенты.Ссылка.Представление КАК КонтрагентПредставление,
	//		|	ДоговорыКонтрагентов.Ссылка.Представление КАК ДоговорКонтрагентаПредставление,
	//		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	//		//|	Контрагенты.КаналТовародвижения,
	//		//|	Контрагенты.ЦеноваяГруппаКонтрагента,
	//		//|	Контрагенты.Проект,
 	//		|	Контрагенты.ОсновнойМенеджерПокупателя КАК МенеджерПокупателя,
	//		|	ТаблИтого.Регистратор,
	//		|	Контрагенты.ГоловнойКонтрагент
	//		|{ВЫБРАТЬ
	//		|	Организация,
	//		|	ДоговорКонтрагента,
	//		|	ДатаОплаты,
	//		|	ДнейПросрочено,
	//		|	НачОст,
	//		|	Приход,
	//		|	Расход,
	//		|	КонОст,
	//		|	Погашено,
	//		|	Просрочено,
	//		|	Контрагент,
	//		|	ВалютаВзаиморасчетов,
	//		//|	КаналТовародвижения,
	//		//|	ЦеноваяГруппаКонтрагента,
	//		//|	Проект,
	//		|	МенеджерПокупателя,
	//		|	Регистратор,
	//		|	ГоловнойКонтрагент}
	//		|ИЗ
	//		|	ТаблИтого КАК ТаблИтого
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	//		|		ПО ТаблИтого.Контрагент = Контрагенты.Ссылка
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//		|		ПО ТаблИтого.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	//		|{ГДЕ
	//		|	ТаблИтого.Организация.*,
	//		|	ТаблИтого.ДоговорКонтрагента.*,
	//		|	Контрагенты.Ссылка.* КАК Контрагент,
	//		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов.*,
	//		//|	Контрагенты.КаналТовародвижения.*,
	//		//|	Контрагенты.ЦеноваяГруппаКонтрагента.*,
	//		//|	Контрагенты.Проект.*,
	//		|	Контрагенты.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
	//		|	Контрагенты.ГоловнойКонтрагент.*}
	//		|{УПОРЯДОЧИТЬ ПО
	//		|	Контрагент.*,
	//		|	Организация.*,
	//		|	ДоговорКонтрагента.*,
	//		|	ВалютаВзаиморасчетов.*,
	//		//|	КаналТовародвижения.*,
	//		//|	ЦеноваяГруппаКонтрагента.*,
	//		//|	Проект.*,
	//		|	МенеджерПокупателя.*,
	//		|	Регистратор.*,
	//		|	ГоловнойКонтрагент.*}
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|УНИЧТОЖИТЬ ТаблИтого";
	//
	//возврат "ВЫБРАТЬ
	//		|	ВзаиморасчетыСКонтрагентами.Контрагент,
	//		|	ВзаиморасчетыСКонтрагентами.Организация,
	//		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	//		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	//		|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Дата,
	//		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаОплаты,
	//		|	0 КАК ДнейПросрочено,
	//		|	ВзаиморасчетыСКонтрагентами.Регистратор,
	//		|	0 КАК НачОст,
	//		|	0 КАК Приход,
	//		|	0 КАК Расход,
	//		|	0 КАК КонОст,
	//		|	0 КАК Погашено,
	//		|	0 КАК Просрочено
	//		|ПОМЕСТИТЬ ТаблИтого
	//		|ИЗ
	//		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	//		|ГДЕ
	//		|	1 = 0
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	Контрагенты.Ссылка КАК Контрагент,
	//		|	ТаблИтого.Организация,
	//		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	//		|	ТаблИтого.Дата КАК Дата,
	//		|	ТаблИтого.ДатаОплаты,
	//		|	ТаблИтого.ДнейПросрочено,
	//		|	ТаблИтого.Регистратор КАК Регистратор,
	//		|	ТаблИтого.НачОст,
	//		|	ТаблИтого.Приход,
	//		|	ТаблИтого.Расход,
	//		|	ТаблИтого.КонОст,
	//		|	ТаблИтого.Погашено,
	//		|	ТаблИтого.Просрочено,
	//		|	ТаблИтого.Организация.Представление,
	//		|	Контрагенты.Ссылка.Представление КАК КонтрагентПредставление,
	//		|	ДоговорыКонтрагентов.Ссылка.Представление,
	//		|	ПРЕДСТАВЛЕНИЕ(ТаблИтого.Регистратор) КАК РегистраторПредставление,
	//		//|	Контрагенты.ЦеноваяГруппаКонтрагента,
	//		//|	Контрагенты.КаналТовародвижения,
	//		//|	Контрагенты.Проект,
	//		|	Контрагенты.ОсновнойМенеджерПокупателя,
	//		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	//		|{ВЫБРАТЬ
	//		|	Контрагент,
	//		|	Организация,
	//		|	ДоговорКонтрагента,
	//		|	Дата,
	//		|	ДатаОплаты,
	//		|	ДнейПросрочено,
	//		|	Регистратор.*,
	//		|	НачОст,
	//		|	Приход,
	//		|	Расход,
	//		|	КонОст,
	//		|	Погашено,
	//		|	Просрочено,
	//		//|	ЦеноваяГруппаКонтрагента,
	//		//|	КаналТовародвижения,
	//		//|	Проект,
	//		|	ОсновнойМенеджерПокупателя,
	//		|	ВалютаВзаиморасчетов,
	//		|	ДоговорКонтрагента.*}
	//		|ИЗ
	//		|	ТаблИтого КАК ТаблИтого
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	//		|		ПО ТаблИтого.Контрагент = Контрагенты.Ссылка
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//		|		ПО ТаблИтого.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	//		|{ГДЕ
	//		|	ТаблИтого.Организация.*,
	//		|	ТаблИтого.ДоговорКонтрагента.*,
	//		|	Контрагенты.Ссылка.* КАК Контрагент,
	//		//|	Контрагенты.ЦеноваяГруппаКонтрагента.*,
	//		//|	Контрагенты.КаналТовародвижения.*,
	//		//|	Контрагенты.Проект.*,
	//		|	Контрагенты.ОсновнойМенеджерПокупателя.*,
	//		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов.*,
	//		|	ДоговорыКонтрагентов.Ссылка.* КАК ДоговорКонтрагента}
	//		|
	//		|УПОРЯДОЧИТЬ ПО
	//		|	Дата,
	//		|	Регистратор
	//		|{УПОРЯДОЧИТЬ ПО
	//		|	Контрагент.*,
	//		|	Организация.*,
	//		|	ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	//		|	Дата.*,
	//		|	Регистратор.*}";
			
КонецФункции
		
Функция ПолучитьРасчитаннуюДебиторку()
	
	ОписЧисла = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	ОписДата  = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблИтого = Новый ТаблицаЗначений;
	ТаблИтого.Колонки.Добавить("Дата",ОписДата);
	ТаблИтого.Колонки.Добавить("ДатаОплаты",ОписДата);
	ТаблИтого.Колонки.Добавить("ДнейПросрочено",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	ТаблИтого.Колонки.Добавить("Отсрочка",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	
	ТаблИтого.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблИтого.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблИтого.Колонки.Добавить("ДоговорКонтрагента",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблИтого.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблИтого.Колонки.Добавить("Регистратор",Документы.ТипВсеСсылки());

	
	//ТаблИтого.Колонки.Добавить("НачОст",ОписЧисла);
	//ТаблИтого.Колонки.Добавить("Приход",ОписЧисла);
	//ТаблИтого.Колонки.Добавить("Расход",ОписЧисла);
	//ТаблИтого.Колонки.Добавить("КонОст",ОписЧисла);
	//ТаблИтого.Колонки.Добавить("Погашено",ОписЧисла);
	//ТаблИтого.Колонки.Добавить("Просрочено",ОписЧисла);
	
	ТаблИтого.Колонки.Добавить("СуммаВсего",ОписЧисла);
	ТаблИтого.Колонки.Добавить("НеПросроченныйДолг",ОписЧисла);
	ТаблИтого.Колонки.Добавить("ПросроченныйДолг",ОписЧисла);
	
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаВсего", "Итого задолж-ть",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	//УниверсальныйОтчет.ДобавитьПоказатель("НеПросроченныйДолг", "Не просроч. задолж-ть",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	//УниверсальныйОтчет.ДобавитьПоказатель("ПросроченныйДолг", "Просроч. задолж-ть",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	//УниверсальныйОтчет.ДобавитьПоказатель("ПросроченныйДолгПоИнтервалам", "Просроч. задолж-ть по интерв.",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	
	
	//ТаблИнтерв = Новый ТаблицаЗначений;
	
	//ТаблИнтерв = Неопределено;
	ОбъектИнт  = Интервал.ПолучитьОбъект();
	ТаблИнтерв = ОбъектИнт.ТабличнаяЧасть.Выгрузить();
	
	ТаблИнтерв.Колонки.Добавить("КолВоДней",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	ТаблИнтерв.Колонки.Добавить("БылоЧтото",Новый ОписаниеТипов("Булево"));
	ТаблИнтерв.Колонки.Добавить("ИмяКолонки");
	
	//ТаблИнтерв.ВыбратьСтроку();
	
	//Для Каждого ТекСтрока Из ТаблИнтерв Цикл
	Для к = 0  По ТаблИнтерв.Количество()-1 Цикл
		ТаблИнтерв[к].ИмяКолонки = "ПросроченныйДолг_"+(к+1);
		ТаблИтого.Колонки.Добавить(ТаблИнтерв[к].ИмяКолонки,ОписЧисла);
		ТаблИнтерв[к].БылоЧтото	 = Ложь;
	КонецЦикла;	
	
	//возврат ТаблИтого;
	//КонецИнтервала
	//НачалоИнтервала
	//Подпись
	//ТаблИнтерв
	
	
	Дата1 =  КонецДня(УниверсальныйОтчет.ДатаКон);//НачалоМесяца(УниверсальныйОтчет.ДатаНач);
	Дата2 =  КонецДня(УниверсальныйОтчет.ДатаКон);//КонецМесяца(УниверсальныйОтчет.ДатаКон);
	
	ТекВремя = ТекущаяДата();
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	//начало изменений Ожиганов 25.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	//ПостроительЗапроса.Текст = ПолучитьТекстЗапроса();
	ПостроительЗапроса.Текст = ПРГ_ДопФункцииКлиентСервер.ПолучитьТекстЗапросаДляРасчетаПДЗ();
	//конец изменений 
	
	ПостроительЗапроса.Параметры.Вставить("Дата1",Дата1);
	ПостроительЗапроса.Параметры.Вставить("Дата2",Дата2);
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков = Новый Массив;
	МассивДоков .Добавить(Неопределено);
	МассивДоков .Добавить(Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков .Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	МассивДоков .Добавить(Документы.ВводНачальныхОстатковПоВзаиморасчетам.ПустаяСсылка());
	
	ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",МассивДоков );
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ПостроительЗапроса.Параметры.Вставить("ВидДоговора",МассивВидовДоговоров);
	
	
	ТекОрганизация 		   = Неопределено;
	ТекКонтрагент  		   = Неопределено;
	ТекДоговорКонтрагента  = Неопределено;
	ТекВалюта			   = Неопределено;
	
	Для каждого ТекОтбор ИЗ УниверсальныйОтчет.ПостроительОтчета.Отбор Цикл
		Если ТекОтбор.Использование Тогда
			Попытка
				НашОтбор = ПостроительЗапроса.Отбор.Добавить(ТекОтбор.ПутьКданным,ТекОтбор.Имя,ТекОтбор.Представление);
				НашОтбор.Использование  = ТекОтбор.Использование;
				НашОтбор.ВидСравнения   = ТекОтбор.ВидСравнения;
				Если ТипЗнч(ТекОтбор.Значение)  = Тип("СписокЗначений") Тогда
					Список = Новый СписокЗначений;
					Список.ЗагрузитьЗначения(ТекОтбор.Значение.ВыгрузитьЗначения());
					НашОтбор.Значение       = Список;
				Иначе
					НашОтбор.Значение       = ТекОтбор.Значение;
				КонецЕсли;	
			 Исключение
			 КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;	
	
//	ПостроительЗапроса.Отбор.Добавить();
	
	ПостроительЗапроса.Выполнить();	
	РезЗапроса 			   = ПостроительЗапроса.Результат;
	ДатаДляРасчетаПроср    = НачалоДня(Дата2);
	Если ВыводитьВремя Тогда
		Сообщить("Получен результат" + (ТекущаяДата()-ТекВремя));
	КонецЕсли;	
	
	ВыборкаДетальная 	   = РезЗапроса.Выбрать();
	Если ВыводитьВремя Тогда
		Сообщить("Полученв Выборка" + (ТекущаяДата()-ТекВремя));
	КонецЕсли;	
	
	
	Пока ВыборкаДетальная.Следующий() Цикл
		  ОбработкаПрерыванияПользователя();
		  ИзмГруппировка = Ложь;
		  Если ТекОрганизация <>ВыборкаДетальная.Организация Тогда
			  ТекОрганизация  = ВыборкаДетальная.Организация;
			  ИзмГруппировка = Истина;
		  КонецЕсли;	
		  
		  Если ТекКонтрагент <>ВыборкаДетальная.Контрагент Тогда
			  ТекКонтрагент  = ВыборкаДетальная.Контрагент;
			  ИзмГруппировка = Истина;
		  КонецЕсли;	
		  
		  Если ТекДоговорКонтрагента <> ВыборкаДетальная.ДоговорКонтрагента Тогда
			  ТекДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
			  ИзмГруппировка 		 = Истина;
		  КонецЕсли;	
		  
		  //Если ТекВалюта <> ВыборкаДетальная.Валюта Тогда
		  //	ТекВалюта       = ВыборкаДетальная.Валюта;
		  //	ИзмГруппировка = Истина;
		  //КонецЕсли;	
		  
		  Если ИзмГруппировка Тогда
			  ИтогКонОст 	   	= ВыборкаДетальная.ПриходКон - ВыборкаДетальная.РасходКон;
			  
			  ИтогоРасход  	    = ВыборкаДетальная.РасходКон;
			  ИтогоПриход  	    = ВыборкаДетальная.ПриходКон;
			  
			  ИтогоРасходНач    = ВыборкаДетальная.РасходНач;
			  ИтогоПриходНач    = ВыборкаДетальная.ПриходНач;
			  
			  ИтогНачОст 		= ИтогоПриходНач - ИтогоРасходНач;
		  
			  ЗнакКонОст  	    = ?(ИтогКонОст > 0,1,-1);
			  ЗнакНачОст  	    = ?(ИтогНачОст > 0,1,-1);
			  ИзмГруппировка 	= Ложь;
			  Если Не ТаблИтоговаяРазвернуто Тогда
				   ТекСтрока =ТаблИтого.Добавить();
			  КонецЕсли;
		  Иначе	  
		  КонецЕсли; 
		  
		  КонОст = 0;
		  НачОст = 0;
		  Приход = 0;
		  Расход = 0;
			
		  Если ЗнакКонОст = 1 Тогда
			   КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
			   ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
		  Иначе // знак -1
			   КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
			   ИтогоПриход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
		  КонецЕсли;	  
		   
		  Если ЗнакНачОст = 1 Тогда
		   		НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
		   		ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
		  Иначе	
		   		НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
		   		ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
		  КонецЕсли;
		   
		  Если ВыборкаДетальная.Дата < Дата1 Тогда
			   Приход = 0;
			   Расход = 0;
		  ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
			   Приход = ВыборкаДетальная.Приход;
			   Расход = ВыборкаДетальная.Расход;
			   НачОст = 0;
		  КонецЕсли;	   
		   
		  Если  (КонОст = 0) Тогда  //и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
			   продолжить;
		  КонецЕсли;  
		  
		  ДатаОплаты  = '00010101';    //
		  Если КонОст > 0 Тогда //Приход > 0 или НачОст > 0 или 
			  ДатаОплаты   =  ВыборкаДетальная.ДатаОплаты;
			  Если ДатаОплаты  = '00010101' Тогда
				  ДатаОплаты = ВыборкаДетальная.Дата;
			  КонецЕсли;	  
			  Погашено = НачОст+Приход-КонОст;
		  КонецЕсли; 
		  
		  ДнейПросрочено = 0;
		  Если ДатаОплаты <> '00010101' и ДатаОплаты < ДатаДляРасчетаПроср и КонОст >0 Тогда
			  ДнейПросрочено = (ДатаДляРасчетаПроср - НачалоДня(ДатаОплаты))/(3600*24); 
		  КонецЕсли;
		  
		  //начало изменений Ожиганов 28.04.2015 37874  
		  РазницаВднях = 0;
		  //конец изменений 
		  Если КонОст > 0 Тогда
		    	РазницаВднях  = (ДатаДляРасчетаПроср - НачалоДня(ДатаОплаты))/(3600*24); 
		  КонецЕсли;	
		
		  Если ТаблИтоговаяРазвернуто Тогда
		  		НоваяСтрока 	   				  = ТаблИтого.Добавить();
				НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
				НоваяСтрока.ДатаОплаты		  	  = ДатаОплаты; //?(Приход>0 или НачОст>0,ВыборкаДетальная.ДатаОплаты,'00010101');
				НоваяСтрока.Регистратор 		  = ВыборкаДетальная.Регистратор;
				НоваяСтрока.ДнейПросрочено	  	  = ДнейПросрочено;
		  Иначе
				НоваяСтрока 					  = ТекСтрока;
		  КонецЕсли;
		  
		  НоваяСтрока.Организация		  		 = ВыборкаДетальная.Организация;
		  НоваяСтрока.Контрагент		  		 = ВыборкаДетальная.Контрагент;
		  НоваяСтрока.ДоговорКонтрагента  		 = ВыборкаДетальная.ДоговорКонтрагента;
		  
		  НоваяСтрока.СуммаВсего		  		 = НоваяСтрока.СуммаВсего + КонОст;
		  
		  Если ДнейПросрочено > 0 и КонОст > 0  Тогда
			  НоваяСтрока.ПросроченныйДолг 		 = НоваяСтрока.ПросроченныйДолг   + КонОст;
		  Иначе	  
			  НоваяСтрока.НеПросроченныйДолг	 = НоваяСтрока.НеПросроченныйДолг + КонОст;
		  конецЕсли; 
		  
		  //m.ionov@a-prof.ru 17.02.2015
		  Если ДатаОплаты <> '00010101' Тогда
		  	НоваяСтрока.Отсрочка = (НачалоДня(ДатаОплаты) - НачалоДня(ВыборкаДетальная.Дата))/(3600*24); 
		  Иначе
		    НоваяСтрока.Отсрочка = 0;
		  КонецЕсли;
		
		  //Для к = 0 По 
		  Если КонОст > 0 Тогда
			  Для к = 0  По ТаблИнтерв.Количество()-1 Цикл
				  Если ТаблИнтерв[к].НачалоИнтервала = 0 и ДнейПросрочено=0 Тогда
					  Если  РазницаВднях = 0 Тогда
						  НоваяСтрока[ТаблИнтерв[к].ИмяКолонки] 	 = НоваяСтрока[ТаблИнтерв[к].ИмяКолонки] + КонОст;
						  ТаблИнтерв[к].БылоЧтото	 = Истина;
					  КонецЕсли;	  
					  прервать;
				  //начало изменений Ожиганов 28.04.2015 37874  
				  ИначеЕсли РазницаВднях < 0 и  ТаблИнтерв[к].НачалоИнтервала < 0 Тогда
					  Если РазницаВднях <= ТаблИнтерв[к].НачалоИнтервала  Тогда
						  НоваяСтрока[ТаблИнтерв[к].ИмяКолонки] 	 = НоваяСтрока[ТаблИнтерв[к].ИмяКолонки] + КонОст;
						  ТаблИнтерв[к].БылоЧтото	 = Истина;
						  прервать;
					  КонецЕсли;					  
				  //конец изменений 
				  ИначеЕсли ДнейПросрочено <= ТаблИнтерв[к].НачалоИнтервала и ДнейПросрочено>0 Тогда
					  НоваяСтрока[ТаблИнтерв[к].ИмяКолонки] 	 = НоваяСтрока[ТаблИнтерв[к].ИмяКолонки] + КонОст;
					  ТаблИнтерв[к].БылоЧтото	 = Истина;
					  прервать;
				  КонецЕсли;	  
			  КонецЦикла;	
		 КонецЕслИ;	  
		  
	  КонецЦикла; 
	 Если ВыводитьВремя Тогда
	 	  Сообщить("Обсчет дебиторки "+(ТекущаяДата()-ТекВремя));
	 КонецЕсли;	
	 возврат ТаблИтого;
 КонецФункции	
 
Функция ОпределитьСвернутоРазвернуто(ПострОтчета)
	  
	  Результат = Ложь;
	  МассПолей = Новый Массив;
	  // влюбом случае рассчитывать по детальным записям
	  МассПолей.Добавить("Регистратор");
	  Для Каждого ТекЭлем Из МассПолей Цикл
		  Если ПострОтчета.ВыбранныеПоля.Найти(ТекЭлем) <> Неопределено Тогда
			    возврат Истина;
		  КонецЕслИ;
		  Если ПострОтчета.ИзмеренияСтроки.Найти(ТекЭлем) <> Неопределено Тогда
			    возврат Истина;
		  КонецЕслИ;
	  КонецЦикла;	  
	  
	  //обязателен признак детальные записи
	  Если Не УниверсальныйОтчет.ВыводитьДетальныеЗаписи  Тогда
		  возврат Ложь;
	  КонецЕсли;
	  
	  МассПолей.Очистить();
	  МассПолей.Добавить("Дата");
	  МассПолей.Добавить("ДатаОплаты");
	  МассПолей.Добавить("ДнейПросрочено");
	  МассПолей.Добавить("Отсрочка");
	  
	  Для Каждого ТекЭлем Из МассПолей Цикл
		  Если ПострОтчета.ВыбранныеПоля.Найти(ТекЭлем) <> Неопределено Тогда
			    возврат Истина;
		  КонецЕслИ;
		  Если ПострОтчета.ИзмеренияСтроки.Найти(ТекЭлем) <> Неопределено Тогда
			    возврат Истина;
		  КонецЕслИ;
	  КонецЦикла;	  
	  возврат ложь;
КонецФункции

Процедура ОбсчитатьДебиторку(ТабличныйДокумент) Экспорт
	  //проверки 
	  Если Не ЗначениеЗаполнено(Интервал) Тогда
		    Предупреждение("Не заполнен интервал !!! Отчет сформирован не будет.");
			возврат;
	  КонецЕсли;	  
	  
	  Если УниверсальныйОтчет.ДатаКон = '00010101' Тогда
		    Предупреждение("Не заполнен дата отчета !!!");
			возврат;
	  КонецЕсли;	  
	
	  ВыводитьВремя = Ложь;
	  ТекВремя  = ТекущаяДата();
	  
	  //запоминаем построитель
	  СтарыйПостроитель   		= УниверсальныйОтчет.ПостроительОтчета;
	  ТаблИтоговаяРазвернуто 	= ОпределитьСвернутоРазвернуто(СтарыйПостроитель);
	  //рассчитываем
	  ТаблИтого 				= ПолучитьРасчитаннуюДебиторку();
	  
	  //обработаем показатели
	  СтароеИспДолгоПоИнтервалам = Ложь;
	  ПолеДолгПоИнтервалам = УниверсальныйОтчет.Показатели.Строки[0].Строки.Найти("ПросроченныйДолгПоИнтервалам","Имя");
	  Если ПолеДолгПоИнтервалам <> Неопределено Тогда
		  СтароеИспДолгоПоИнтервалам = ПолеДолгПоИнтервалам.Использование;
		  Если ПолеДолгПоИнтервалам.Использование Тогда
			   Для к = 0  По ТаблИнтерв.Количество()-1 Цикл
				   	Если ТаблИнтерв[к].БылоЧтоТо Тогда
				   		УниверсальныйОтчет.ДобавитьПоказатель(ТаблИнтерв[к].ИмяКолонки, ТаблИнтерв[к].Подпись,Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
					КонецЕсли;	
				КонецЦикла;	
				ПолеДолгПоИнтервалам.Использование = Ложь;
		  Иначе
				 //ничего пока не цепляем
		  КонецЕсли;	  
		  Поле = СтарыйПостроитель.ВыбранныеПоля.Найти("ПросроченныйДолгПоИнтервалам");
		  Если Поле <> Неопределено Тогда
			СтарыйПостроитель.ВыбранныеПоля.Удалить(Поле);
		  КонецЕсли;	
	  Иначе
		  Сообщить("Не найдено поле просроченный долг по интервалам. Системная ошибка обратитесь к программисту!!!");
		  возврат;
	  КонецЕсли;	  
	  
	  Найстройки 		  	    = СтарыйПостроитель.ПолучитьНастройки(Истина,Истина,Истина,Истина);
	  
	  //работа с итоговым построителем	  
	  ПостроительИтоговый 			= Новый ПостроительОтчета;
	  ПостроительИтоговый.Текст 	= ПолучитьТекстЗапросИтоговый();
	  
	  ПостроительИтоговый.УстановитьНастройки(Найстройки,Истина,Ложь,Истина,Истина);
	  ПостроительИтоговый.ИзмеренияСтроки.Очистить();
	  Для каждого ТекИзмерение Из СтарыйПостроитель.ИзмеренияСтроки Цикл
		    Поле = СтарыйПостроитель.ДоступныеПоля.Найти(ТекИзмерение.Имя);
			Если Поле <> Неопределено Тогда
				Если ПостроительИтоговый.ВыбранныеПоля.Найти(Поле.Имя) = Неопределено Тогда
	 				ПостроительИтоговый.ВыбранныеПоля.Добавить(Поле.ПутьКданным,Поле.Имя);
				КонецЕсли;	
			Иначе
				Если ПостроительИтоговый.ВыбранныеПоля.Найти(ТекИзмерение.Имя) = Неопределено Тогда
					ПостроительИтоговый.ВыбранныеПоля.Добавить(ТекИзмерение.ПутьКданным,ТекИзмерение.Имя);
				КонецЕслИ;	
			КонецЕсли;	
	  КонецЦикла;	  
	  
	  //ПостроительИтоговый.УстановитьНастройки(Найстройки,Истина,Истина,Истина,Истина);
//	  ПостроительИтоговый.ИзмеренияСтроки.Очистить();
	  //пробежимся по 
	  Для каждого ТекГруппа ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
	  	Для Каждого ТекСтрока Из ТекГруппа.Строки Цикл
			 Если ТекСтрока.Использование Тогда
				 Если ПостроительИтоговый.ВыбранныеПоля.Найти(ТекСтрока.Имя) = Неопределено Тогда
					  попытка 
	    		  			ПостроительИтоговый.ВыбранныеПоля.Добавить(ТекСтрока.Имя,ТекСтрока.Имя);
					  Исключение
							
					  КонецПопытки;	 
				  КонецЕсли;	
	    	  КонецЕсли;	   
	  		КонецЦикла;	  
	  КонецЦикла;
	 //поробуем в жесткую
	 //потом убрать
	 ПолеРегистраторЕсть = СтарыйПостроитель.ВыбранныеПоля.Найти("Регистратор") <> Неопределено;
	 //добавим поле дата
	 Если ПолеРегистраторЕсть Тогда
		ПостроительИтоговый.ВыбранныеПоля.Добавить("Дата"); // для последующей сортировки 
	 КонецЕсли; 
	 
	 //
	 //ПостроительИтоговый.ВыбранныеПоля.Добавить("Дата");
	 //ПостроительИтоговый.Порядок.Добавить("Дата");
	 //ПостроительИтоговый.Порядок.Добавить("Регистратор");
	 //закончить убрать
	 
	  //работа со вспомог-й таблицей
	  ЗапросВспомог =  Новый Запрос("ВЫБРАТЬ
	                                |  ТаблВсп.*
									|  Поместить  ТаблИтого                                   
	                                |ИЗ
	                                |	&ТаблИтого КАК ТаблВсп");
									
	  ЗапросВспомог.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	  ЗапросВспомог.УстановитьПараметр("ТаблИтого",ТаблИтого);
	  
	  ЗапросВспомог.Выполнить();
	  
	  ЗапросРезультат  	 					  = ПостроительИтоговый.ПолучитьЗапрос();
	  ЗапросРезультат.МенеджерВременныхТаблиц = ЗапросВспомог.МенеджерВременныхТаблиц;
	  
	  ПозПакета = Найти(ЗапросРезультат.Текст,";");
	  Если ПозПакета = 0 Тогда
		  Сообщить("Сбой в отчете. Обратитесь к администратору");
		  возврат;
	  Иначе
		   ЗапросРезультат.Текст = Сред(ЗапросРезультат.Текст,ПозПакета+1);
	  КонецЕсли;	  
	  
	  РезЗапрос = ЗапросРезультат.Выполнить();
	  //окончание формирование вр таблиц
	  
	  ИстДанных  				= Новый ОписаниеИсточникаДанных(РезЗапрос);
	  Для Каждого ТекИзмерение  ИЗ  СтарыйПостроитель.ИзмеренияСтроки Цикл
			 ТекКолонка = ИстДанных.Колонки[ТекИзмерение.Имя];
			 ТекКолонка.Измерение = Истина;
	  КонецЦикла;
	  
	  Для каждого ТекГруппа ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
		  Для Каждого ТекСтрока Из ТекГруппа.Строки Цикл
			  Если ТекСтрока.Использование Тогда
				  Если ТекСтрока.Имя = "ПроцентПросрочки" Тогда
					ТекКолонка	   = ИстДанных.Колонки[ТекСтрока.Имя];  
					ТекКолонка.Итог  = "ВЫБОР КОГДА СУММА(СуммаВсего) > 0 ТОГДА ВЫРАЗИТЬ((СУММА(ПросроченныйДолг)/СУММА(СуммаВсего))*100 КАК ЧИСЛО(15,2)) ИНАЧЕ 0 КОНЕЦ";
				  Иначе
				  	ТекКолонка	   = ИстДанных.Колонки[ТекСтрока.Имя];
				  	ТекКолонка.Итог  = "Сумма("+ТекСтрока.Имя+")";
				  КонецЕсли;	
			  КонецЕсли;	   
		  КонецЦикла;	  
	  КонецЦикла;	  	  
	  
	  //построитель в универсальный отчет
	  НовыйПостроитель  			  = Новый ПостроительОтчета;
	  НовыйПостроитель.ИсточникДанных = ИстДанных; 
	  НовыйПостроитель.УстановитьНастройки(Найстройки,Ложь,Ложь,Ложь,Ложь,Истина);
	  НовыйПостроитель.ВыбранныеПоля.Очистить();
	  
	  Для каждого ТекПоле  Из СтарыйПостроитель.ВыбранныеПоля Цикл
	       НовоеПоле = НовыйПостроитель.ВыбранныеПоля.Добавить(ТекПоле.Имя,ТекПоле.Имя);
		   НовоеПоле.Представление = ТекПоле.Представление;
	  КонецЦикла; 
	   
	  НовыйПостроитель.ИзмеренияСтроки.Очистить();
	  Для каждого ТекПоле  Из СтарыйПостроитель.ИзмеренияСтроки Цикл
	       НовоеПоле = НовыйПостроитель.ИзмеренияСтроки.Добавить(ТекПоле.Имя,ТекПоле.Имя);
		   НовоеПоле.Представление = ТекПоле.Представление;
	  КонецЦикла; 
	  
	  //НовыйПостроитель.УстановитьНастройки(Найстройки,Ложь,Ложь,Ложь,Истина);
	  //НовыйПостроитель.УстановитьНастройки(Найстройки,Ложь,Истина,Истина,Истина);
	  //
	  //начало убрать
	  //ТабДок  = Новый ТабличныйДокумент;
	  ////
	  //НовыйПостроитель.Выполнить();
	  //НовыйПостроитель.Вывести(ТабДок);
	  ////
	  //ТабДок.Показать();
	  //конец убрать
	  
	  //уберем  из доступных полей измерения строк
	  Для Каждого ТекПоле Из НовыйПостроитель.ИзмеренияСтроки Цикл
		  ИмяПоля = ТекПоле.Имя;
		  ВыбПоле = НовыйПостроитель.ВыбранныеПоля.Найти(ИмяПоля);
		  
		  Если ВыбПоле <> Неопределено Тогда
			  НовыйПостроитель.ВыбранныеПоля.Удалить(ВыбПоле);
		  КонецЕсли; 
		  Если Найти(Нрег(ИмяПоля),"представление") = 0 Тогда
			  ВыбПоле = НовыйПостроитель.ВыбранныеПоля.Найти(ИмяПоля+"Представление");
			  Если ВыбПоле <> Неопределено Тогда
				  НовыйПостроитель.ВыбранныеПоля.Удалить(ВыбПоле);
			  КонецЕсли; 
		  КонецЕсли; 
	  КонецЦикла;
	  //добавим выбранны поля
	  //РезИсточник = НовыйПостроитель.ИсточникДанных.ИсточникДанных;
	  //Для Каждого ВыбПоле из СтарыйПостроитель.ВыбранныеПоля Цикл
	  //	Если РезИсточник.Колонки.Найти(ВыбПоле.Имя) <>  Неопределено Тогда
	  //  	  Если НовыйПостроитель.ВыбранныеПоля.Найти(ВыбПоле.Имя) = Неопределено Тогда
	  //  		  НовоеПоле = НовыйПостроитель.ВыбранныеПоля.Добавить(ВыбПоле.Имя,ВыбПоле.Имя);
	  //  		  НовоеПоле.Представление = ВыбПоле.Представление;
	  //  	  КонецЕсли; 
	  //	КонецЕсли; 
	  //КонецЦикла;
	  
	  //НовыйПостроитель.УсловноеОформление.Очистить();
	  ////пернесем оформление из старого построителя
	  //Для Каждого ТекУслОформл Из СтарыйПостроитель.УсловноеОформление Цикл
	  //	Если ТекУслОформл.Использование Тогда
	  //  	  ПолеУслОформл = НовыйПостроитель.УсловноеОформление.Добавить(ТекУслОформл.Имя,ТекУслОформл.Заголовок);
	  //  	  ПолеУслОформл.Заголовок = ТекУслОформл.Заголовок;
	  //  	  ПолеУслОформл.Использование = ТекУслОформл.Использование;
	  //  	//  ПолеУслОформл.Область 	= ТекУслОформл.Область;
	  //  	  //ПолеУслОформл.Отбор 	   = ТекУслОформл.Отбор;
	  //  	  ПолеУслОформл.Оформление = ТекУслОформл.Оформление;
	  //	КонецЕсли;
	  //КонецЦикла;	  
	  
	  
	  УниверсальныйОтчет.ПостроительОтчета = НовыйПостроитель;
	  //добавляем показатели
	  
	  //Для каждого ТекИзмСтроки ИЗ СтарыйПостроитель.ИзмеренияСтроки Цикл
	  //	НовыйПостроитель.ИзмеренияСтроки.Добавить(ТекИзмСтроки.ПутьКДанным,ТекИзмСтроки.Имя,ТекИзмСтроки.ТипИзмерения,ТекИзмСтроки.Макет,ТекИзмСтроки.МакетИерархии);
	  //КонецЦикла; 
	  Если  ПолеРегистраторЕсть Тогда
		  УниверсальныйОтчет.мОбязательнаяСортировка = Новый Массив;
		  УниверсальныйОтчет.мОбязательнаяСортировка.Добавить("Дата");
		  УниверсальныйОтчет.мОбязательнаяСортировка.Добавить("Регистратор");
	  Иначе
		  УниверсальныйОтчет.мОбязательнаяСортировка = Неопределено;
	  КонецЕсли;
	  
	  УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета,истина);
	  УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);
	  УниверсальныйОтчет.ПостроительОтчета = СтарыйПостроитель;
	  
	  //востановим показатели
	  Если ПолеДолгПоИнтервалам <> Неопределено Тогда
		  ПолеДолгПоИнтервалам.Использование = СтароеИспДолгоПоИнтервалам;
		  Если ПолеДолгПоИнтервалам.Использование Тогда
			  	 РабСтроки = УниверсальныйОтчет.Показатели.Строки[0].Строки;//.Найти("ПросроченныйДолгПоИнтервалам","Имя");
				 Для к = 0  По ТаблИнтерв.Количество()-1 Цикл
					 Если ТаблИнтерв[к].БылоЧтоТо Тогда
						 	НайдЗнч = РабСтроки.Найти(ТаблИнтерв[к].ИмяКолонки,"Имя");
							Если НайдЗнч <> Неопределено Тогда
								РабСтроки.Удалить(НайдЗнч);
							КонецЕсли;	
					  КонецЕсли;	
				 КонецЦикла;	
		  КонецЕсли;
	  Иначе
		  Сообщить("Не найдено поле просроченный долг по интервалам. Системная ошибка обратитесь к программисту!!!");
	  КонецЕсли;	  
	  
	  
	  // ТаблИтого.ВыбратьСтроку();
	  Если ВыводитьВремя Тогда
	  	Сообщить("оконч Выборка" + (ТекущаяДата()-ТекВремя));
	  КонецЕсли;	
	  
	  возврат;
	  
	  
	  ИстДанных  					  = Новый ОписаниеИсточникаДанных(ТаблИтого);
	  ИстДанных.Колонки.Организация.Измерение 		 = Истина;
	  ИстДанных.Колонки.Контрагент.Измерение 		 = Истина;
	  ИстДанных.Колонки.ДоговорКонтрагента.Измерение = Истина;
	  ИстДанных.Колонки.Валюта.Измерение			 = Истина;
	  ИстДанных.Колонки.Регистратор.Измерение 	  	 = Истина;
	  
	  ИстДанных.Колонки.НачОст.Итог			 		 = "Сумма(НачОст)";
	  ИстДанных.Колонки.Приход.Итог			 		 = "Сумма(Приход)";
	  ИстДанных.Колонки.Расход.Итог			 		 = "Сумма(Расход)";
	  ИстДанных.Колонки.КонОст.Итог			 		 = "Сумма(КонОст)";
	  //ИстДанных.Колонки.Расход.Итог 			     = Истина;
	  //ИстДанных.Колонки.КонОст.Итог				 = Истина;
	  ИстДанных.Колонки.Погашено.Итог	 	  	 	 =  "Сумма(Погашено)";
	  ИстДанных.Колонки.Просрочено.Итог	 	  	 	 =  "Сумма(Просрочено)";
	  
	  
	  //СтарыйПостроитель.Макет.Показать();
	  
	  НовыйПостроитель  			  = Новый ПостроительОтчета;
	  НовыйПостроитель.ИсточникДанных = ИстДанных; 
	  НовыйПостроитель.ИзмеренияСтроки.Очистить();
	  НовыйПостроитель.ИзмеренияКолонки.Очистить();
	  НовыйПостроитель.ВыбранныеПоля.Очистить();
	  
	  Найстройки 	= СтарыйПостроитель.ПолучитьНастройки(Истина,Истина,Истина,Истина);
	  НовыйПостроитель.УстановитьНастройки(Найстройки,Ложь,Истина,Истина,Истина);
	  //
	  //ТабДок = Новый ТабличныйДокумент;
	  //
	  //НовыйПостроитель.Вывести(ТабДок);
	  //ТабДок.Показать();
	  ////
	  //НовыйПостроитель.Порядок.Добавить("Дата","Дата");
	  //НовыйПостроитель.Порядок.Добавить("Регистратор","Регистратор");
	  
	 // НовыйПостроитель.ВыводитьДетальныеЗаписи  = истина;
	  
	  УниверсальныйОтчет.ПостроительОтчета = НовыйПостроитель;
	  
	  //добавляем показатели
	  
	  //Для каждого ТекИзмСтроки ИЗ СтарыйПостроитель.ИзмеренияСтроки Цикл
	  //	НовыйПостроитель.ИзмеренияСтроки.Добавить(ТекИзмСтроки.ПутьКДанным,ТекИзмСтроки.Имя,ТекИзмСтроки.ТипИзмерения,ТекИзмСтроки.Макет,ТекИзмСтроки.МакетИерархии);
	  //КонецЦикла; 
	  
	  УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);
	  УниверсальныйОтчет.ПостроительОтчета = СтарыйПостроитель;
	  
	  
	  
	 // ТаблИтого.ВыбратьСтроку();
	 Если ВыводитьВремя Тогда
	  	Сообщить("оконч Выборка" + (ТекущаяДата()-ТекВремя));
	 КонецЕсли;
	
	возврат;
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать(); //ОбходРезультатаЗапроса.ПоГруппировкам); //Выбрать(); //
	//Пока ВыборкаПоОрганизации.Следующий() Цикл
	//	ВыборкаПоКонтрагентам= ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	Пока ВыборкаПоКонтрагентам.Следующий() Цикл
	//		 ВыборкаПоДоговорам  = ВыборкаПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//		 Пока ВыборкаПоДоговорам.Следующий() Цикл
	//			 ВыборкаПоВалютам = ВыборкаПоДоговорам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//			 Пока ВыборкаПоВалютам.Следующий() Цикл
	//				  КонОст 	   	   = ВыборкаПоВалютам.ИтогоРасход - ВыборкаПоВалютам.ИтогоПриход;
	//				  
	//				  ИтогоРасход  	   = ВыборкаПоВалютам.ИтогоРасход;
	//				  ИтогоПриход  	   = ВыборкаПоВалютам.ИтогоПриход;
	//				  
	//				  ИтогоРасходНач   = ВыборкаПоВалютам.ИтогоРасходНач;
	//				  ИтогоПриходНач   = ВыборкаПоВалютам.ИтогоПриходНач;
	//				  
	//				  НачОст 		   = ИтогоПриходНач - ИтогоРасходНач;
	//				  
	//				  ЗнакКонОст  	   = ?(КонОст > 0,1,-1);
	//				  ЗнакНачОст  	   = ?(НачОст > 0,1,-1);
	//				  
	//				  ВыборкаДетальная = ВыборкаПоВалютам.Выбрать();
	//				  Пока ВыборкаДетальная.Следующий() Цикл
	//					  Если ЗнакКонОст = 1 Тогда
	//						   КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
	//						   ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
	//					  Иначе // знак -1
	//						   КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
	//						   ИтогоРасход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
	//					  КонецЕсли;	  
	//					   
	//					  Если ЗнакНачОст = 1 Тогда
	//					   		НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
	//					   		ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
	//					  Иначе	
	//					   		НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
	//					   		ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
	//					  КонецЕсли;
	//					   
	//					  Если ВыборкаДетальная.Дата < Дата1 Тогда
	//						   Приход = 0;
	//						   Расход = 0;
	//					  ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
	//						   Приход = ВыборкаДетальная.Приход;
	//						   Расход = ВыборкаДетальная.Расход;
	//					  КонецЕсли;	   
	//					   
	//					  Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
	//						   продолжить;
	//					  КонецЕсли;  
	//					   
	//					  
	//					  НоваяСтрока 	   				  = ТаблИтого.Добавить();
	//					  НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
	//					  НоваяСтрока.ДатаОплаты		  = ВыборкаДетальная.ДатаОплаты;
	//					  НоваяСтрока.Организация		  = ВыборкаДетальная.Организация;
	//					  НоваяСтрока.Контрагент		  = ВыборкаДетальная.Контрагент;
	//					  НоваяСтрока.ДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
	//					  НоваяСтрока.Валюта			  = ВыборкаДетальная.Валюта;
	//					  НоваяСтрока.НачОст			  = НачОст;
	//					  НоваяСтрока.Приход			  = Приход;
	//					  НоваяСтрока.Расход			  = Расход;
	//					  НоваяСтрока.КонОст			  = КонОст;
	//					  
	//				  КонецЦикла; 
	//			 КонецЦикла; 
	//		 КонецЦикла; 
	//	КонецЦикла;	
	//КонецЦикла;	
	
	Если ВыводитьВремя Тогда
		Сообщить("Затрачено "+(ТекущаяДата()-ТекВремя));
	КонецЕслИ;	
	Сообщить(ТаблИтого.Количество());
	//ТаблИтого.ВыбратьСтроку();
КонецПроцедуры	
					 
//
	
// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	ОбсчитатьДебиторку(ТабличныйДокумент);
	 
	возврат;

	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		СтруктураСНастройками = Новый Структура;
		
	КонецЕсли;
	
	СтруктураСНастройками.Вставить("Интервал",Интервал);
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураСНастройками.Свойство("Интервал", Интервал);
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли
