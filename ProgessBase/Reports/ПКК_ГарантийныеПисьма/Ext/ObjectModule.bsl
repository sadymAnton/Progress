Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если Клиент ИЛИ ВнешнееСоединение Тогда
	
Функция СформироватьОтчет(Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	СтруктураВнешнихДанных = Новый Структура;
	СтруктураВнешнихДанных.Вставить("ТаблицаДанных", СформируемТаблица_ТаблицаДанных());
	
	ТиповыеОтчеты.СформироватьТиповойОтчет(ЭтотОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета,СтруктураВнешнихДанных);
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
		
КонецФункции

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Функция СформируемТаблица_ТаблицаДанных()
	
	// Обработка механизма разузлования
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	мСхемаКомпоновки = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	НовыеНастройки = мСхемаКомпоновки.НастройкиПоУмолчанию;
	
	ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		
	Для i = 0 по ЭлементыОтбора.Количество()-1 Цикл
		
		ЭлементСтарый = ЭлементыОтбора.Получить(i);
		
		ЭлементНовый = НовыеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
		ЭлементНовый.ВидСравнения   = ЭлементСтарый.ВидСравнения;
		ЭлементНовый.Использование  = ЭлементСтарый.Использование;
		ЭлементНовый.ЛевоеЗначение  = ЭлементСтарый.ЛевоеЗначение;
		ЭлементНовый.ПравоеЗначение = ЭлементСтарый.ПравоеЗначение;
		
	КонецЦикла; 

	
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		
		мПараметрНачалоПериода = НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
		Если мПараметрНачалоПериода <> Неопределено Тогда
			мПараметрНачалоПериода.Использование = Истина;
			мПараметрНачалоПериода.Значение = ПараметрНачалоПериода.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
				
		мПараметрКонецПериода = НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
		Если мПараметрКонецПериода <> Неопределено Тогда
			мПараметрКонецПериода.Использование = Истина;
			мПараметрКонецПериода.Значение = ПараметрКонецПериода.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = новый ТаблицаЗначений;
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Контрагент");
	Результат.Колонки.Добавить("ДоговорКонтрагента");
	Результат.Колонки.Добавить("ГарантийноеПисьмо");
	Результат.Колонки.Добавить("ДатаПисьма");
	Результат.Колонки.Добавить("СуммаПисьма");
	Результат.Колонки.Добавить("ГарантируемаяДатаОплаты");
	
	Результат.Колонки.Добавить("ДокументОплаты");
	Результат.Колонки.Добавить("ДатаОплаты");
	Результат.Колонки.Добавить("СуммаДокумента");
	Результат.Колонки.Добавить("СуммаОплаты");
	Результат.Колонки.Добавить("СуммаДолга");
	
	Результат.Колонки.Добавить("Баланс");
	
	

	ЗапросПисьма = Новый Запрос;
	ЗапросПисьма.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПКК_ГарантийныеПисьма.Организация,
		|	ПКК_ГарантийныеПисьма.Контрагент,
		|	ПКК_ГарантийныеПисьма.ДоговорКонтрагента,
		|	ПКК_ГарантийныеПисьма.ГарантийноеПисьмо,
		|	ПКК_ГарантийныеПисьма.Сумма КАК СуммаПисьма,
		|	ПКК_ГарантийныеПисьма.Период КАК ДатаПисьма,
		|	ПКК_ГарантийныеПисьма.ДатаОплаты КАК ГарантируемаяДатаОплаты
		|ИЗ
		|	РегистрНакопления.ПКК_ГарантийныеПисьма КАК ПКК_ГарантийныеПисьма
		|ГДЕ
		|	(ПКК_ГарантийныеПисьма.Период <= &КонецПериода
		|			ИЛИ &КонецПериода = ДАТАВРЕМЯ(1, 1, 1))
		|	И (ПКК_ГарантийныеПисьма.Период >= &НачалоПериода
		|			ИЛИ &НачалоПериода = ДАТАВРЕМЯ(1, 1, 1))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПисьма";

	ЗапросПисьма.УстановитьПараметр("КонецПериода", ПараметрКонецПериода.Значение);
	ЗапросПисьма.УстановитьПараметр("НачалоПериода", ПараметрНачалоПериода.Значение);

	РезультатПисьма = ЗапросПисьма.Выполнить();

	ТаблицаПисьма = РезультатПисьма.Выгрузить();

	СписокКонтрагентов = Новый СписокЗначений;
	
	Для каждого СтрПисьма из  ТаблицаПисьма Цикл
		СписокКонтрагентов.Добавить(СтрПисьма.Контрагент);
	КонецЦикла;

	
	ЗапросОплата = Новый Запрос;
	ЗапросОплата.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентами.Период КАК ДатаОплаты,
		|	ВзаиморасчетыСКонтрагентами.Регистратор КАК ДокументОплаты,
		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
		|	ВзаиморасчетыСКонтрагентами.Контрагент,
		|	ВзаиморасчетыСКонтрагентами.СуммаУпр КАК СуммаДокумента,
		|	ВзаиморасчетыСКонтрагентами.СуммаУпр КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентами.Контрагент В(&СписокКонтрагентов)
		|	И ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И (ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
		|			ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.ПлатежноеПоручениеВходящее
		|			ИЛИ ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации)
		|	И ВзаиморасчетыСКонтрагентами.Период >= &НачалоПериода
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОплаты";

	ЗапросОплата.УстановитьПараметр("НачалоПериода", ПараметрНачалоПериода.Значение);
	ЗапросОплата.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);

	РезультатОплата = ЗапросОплата.Выполнить();

	ТаблицаОплата = РезультатОплата.Выгрузить();

	Для каждого СтрПисьмо из ТаблицаПисьма цикл
		
		СуммаОстаток = СтрПисьмо.СуммаПисьма;
		ЕстьОплатаПоПисьму  = Ложь;
		Для каждого СтрОплата из ТаблицаОплата цикл
			Если  СтрПисьмо.Контрагент = СтрОплата.Контрагент
			и СтрПисьмо.ДоговорКонтрагента = СтрОплата.ДоговорКонтрагента
			//{22.06.2015 Островерхий заявка №40354 
			//и СтрПисьмо.ДатаПисьма <= СтрОплата.ДатаОплаты 
			и СтрПисьмо.ГарантийноеПисьмо.ДатаВходящегоДокумента <= СтрОплата.ДатаОплаты И СтрОплата.ДатаОплаты <= СтрПисьмо.ДатаПисьма 
			//22.06.2015 Островерхий}   
			и СтрОплата.СуммаОплаты > 0 
			и СуммаОстаток >0 тогда
				СтрРезультат = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(СтрРезультат,СтрПисьмо);
				ЗаполнитьЗначенияСвойств(СтрРезультат,СтрОплата);
				Если СтрОплата.СуммаОплаты <= СуммаОстаток тогда
					СуммаОстаток = СуммаОстаток - СтрОплата.СуммаОплаты;
					СтрОплата.СуммаОплаты = 0; 
				Иначе
					СтрРезультат.СуммаОплаты = СуммаОстаток; 
					СтрОплата.СуммаОплаты = СтрОплата.СуммаОплаты - СуммаОстаток;
					СуммаОстаток = 0;
				КонецЕсли;
				ЕстьОплатаПоПисьму  = Истина;
			СтрРезультат.СуммаПисьма = 0;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьОплатаПоПисьму  = Ложь тогда
			СтрРезультат = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрРезультат,СтрПисьмо);
		КонецЕсли;
		
		СтрРезультат.СуммаПисьма = СтрПисьмо.СуммаПисьма;
		СтрРезультат.СуммаДолга = СуммаОстаток; 
		
		Если СтрРезультат.СуммаДолга > 0 тогда
			СтрРезультат.Баланс = "Долг"; 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНатроек = Новый Структура();
	Возврат СтруктураНатроек;
	
КонецФункции

#КонецЕсли

#Если Клиент Тогда
	
// Настройка отчета при отработки расшифровки
Процедура Настроить(Отбор) Экспорт
	
	// Настройка отбора
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПолеОтбора = ЭлементОтбора.ЛевоеЗначение;
		Иначе
			ПолеОтбора = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Поле);
		КонецЕсли;
		
		Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(ПолеОтбора) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		Иначе
			НовыйЭлементОтбора.Использование  = Истина;
			НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
			Если ЭлементОтбора.Иерархия Тогда
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.Значение;
			
		КонецЕсли;
				
	КонецЦикла;
	
	ТиповыеОтчеты.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры

#КонецЕсли

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ДоработатьКомпоновщикПередВыводом() Экспорт
	
	ПараметрНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ПараметрНачалоПериода <> Неопределено Тогда
		ПараметрНачалоПериода.Использование = Истина;
	КонецЕсли;
	
	ПараметрКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ПараметрКонецПериода <> Неопределено Тогда
		ПараметрКонецПериода.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДоработатьКомпоновщикПередВыводом()

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;
