// Хранит таблицу значений - состав показателей отчета.
Перем мТаблицаСоставПоказателей Экспорт;

// Хранит структуру - состав показателей отчета,
// значение которых автоматически заполняется по учетным данным.
Перем мСтруктураВариантыЗаполнения Экспорт;

// Хранит дерево значений - структуру листов отчета.
Перем мДеревоСтраницОтчета Экспорт;

// Хранит признак выбора печатных листов
Перем мЕстьВыбранные Экспорт;

// Хранит имя выбранной формы отчета
Перем мВыбраннаяФорма Экспорт;

// Хранит признак скопированной формы.
Перем мСкопированаФорма Экспорт;

// Хранит ссылку на документ, хранящий данные отчета
Перем мСохраненныйДок Экспорт;

Перем мВерсияФормы Экспорт;

//Перем мКоммАвто Экспорт; // флажок на форме выбора страниц, если Истина, то пересчет автоматический убрать
Перем мСчетчикСтраниц Экспорт; // флажок на форме выбора страниц, если Истина, то пересчет автоматический убрать
Перем мАвтоВыборКодов Экспорт; // для флажка "отключить выбор значений из списка"
Перем мПроверятьСоотношенияПриПечатиИВыгрузки Экспорт; // Флаг, для запуска КС

// Следующие переменные хранят границы периода построения отчета
// и периодичность
Перем мДатаНачалаПериодаОтчета Экспорт;
Перем мДатаКонцаПериодаОтчета  Экспорт;
Перем мПериодичность Экспорт;

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мЗаписьЗапрещена Экспорт;

Перем мИнтервалАвтосохранения Экспорт;

Перем мРезультатПоиска Экспорт;// таблица с результатами поиска
Перем мСчетчикиСтраницПриПоиске Экспорт;// таблица со счетчиками номеров листов при поиске
Перем мТаблицаФормОтчета Экспорт;

Перем мЗаписываетсяНовыйДокумент Экспорт;
Перем мВариант Экспорт;

// Переменная для хранения корректного текста для подменю Очистить.
// Хранится текст, декларация или отчет или расчет... очищать.
Перем мЧтоОчищать Экспорт;

Перем мФормыИФорматы Экспорт;
Перем мВерсияОтчета Экспорт;

Перем мПечатьБезШтрихкодаРазрешена Экспорт;
Перем СтруктураПараметров Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Удаляет значения итоговых показателей на листах МЧБ,
// образованных многострочными разделами (кроме последнего).
//
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок) Экспорт
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз  = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
		   И Обл.Верх >= ОбластьИтоговыеПоказателиВерх
		   И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
		   И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьФормуВДеревеФормИФорматов(ДеревоФормИФорматов, Код, ДатаПриказа = '00010101', НомерПриказа = "", ИмяОбъекта = "",
			ДатаНачалаДействия = '00010101', ДатаОкончанияДействия = '00010101', Описание = "")
	
	НовСтр = ДеревоФормИФорматов.Строки.Добавить();
	НовСтр.Код = СокрЛП(Код);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ДатаНачалаДействия;
	НовСтр.ДатаОкончанияДействия = ДатаОкончанияДействия;
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция ОпределитьФорматВДеревеФормИФорматов(Форма, Версия, ДатаПриказа = '00010101', НомерПриказа = "",
			ДатаНачалаДействия = Неопределено, ДатаОкончанияДействия = Неопределено, ИмяОбъекта = "", Описание = "")
	
	НовСтр = Форма.Строки.Добавить();
	НовСтр.Код = СокрЛП(Версия);
	НовСтр.ДатаПриказа = ДатаПриказа;
	НовСтр.НомерПриказа = СокрЛП(НомерПриказа);
	НовСтр.ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено, Форма.ДатаНачалаДействия, ДатаНачалаДействия);
	НовСтр.ДатаОкончанияДействия = ?(ДатаОкончанияДействия = Неопределено, Форма.ДатаОкончанияДействия, ДатаОкончанияДействия);
	НовСтр.ИмяОбъекта = СокрЛП(ИмяОбъекта);
	НовСтр.Описание = СокрЛП(Описание);
	Возврат НовСтр;
	
КонецФункции

Функция СтрокаЧГ0(ИсходноеЧисло) Экспорт // враппер
	
	Возврат РегламентированнаяОтчетность.СтрокаЧГ0(ИсходноеЧисло);
	
КонецФункции

#Если НЕ ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// Вспомогательные функции, необходимые для заполнения форм

Функция мБухИтогиНайти(Колонка, Счет, ТаблицаПоиска) Экспорт
	
	Строка = ТаблицаПоиска.Найти(Счет, "Счет");
	Если Строка = Неопределено Тогда
		Возврат 0;
	Иначе
		Значение = Строка[Колонка];
		Если Значение = Неопределено Или Значение = NULL Тогда
			Возврат 0;
		Иначе
			ВОзврат Значение;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// функция подсчета убытков, превышающих сумму процентов по ст. 269, от реализации прочих активов путем перебора каждого актива
Функция УбыткиПревышающиеПроценты(Счет911, Счет912, ВидРасходов) Экспорт
	
	Запрос = Новый Запрос;          
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет911",      Счет911);
	Запрос.УстановитьПараметр("Счет912",      Счет912);
	Запрос.УстановитьПараметр("ВидРасходов",  ВидРасходов);
	Запрос.УстановитьПараметр("ВидРасходовДляПроцентов",  Перечисления.ВидыПрочихДоходовИРасходов.ПроцентыНачисленныеПоСт269);

	Запрос.Текст = 
  	"ВЫБРАТЬ
  	|	СУММА(НалоговыйОбороты.СуммаОборот) КАК Убыток,
  	|	0 КАК СуммаПроцентов,
  	|	НалоговыйОбороты.Субконто2 КАК Субконто2" + ?(Счет911.ВидыСубконто.Количество() = 3, ",
	|	НалоговыйОбороты.Субконто3 КАК Субконто3", "") + "
  	|ИЗ
  	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет911, , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
  	|";
	
	Если ЗначениеЗаполнено(ВидРасходов) Тогда
		
		Запрос.Текст = Запрос.Текст + "
	|ГДЕ
  	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходов
  	|";
КонецЕсли;
	
		Запрос.Текст = Запрос.Текст + "
  	|СГРУППИРОВАТЬ ПО
  	|	НалоговыйОбороты.Субконто2" + ?(Счет911.ВидыСубконто.Количество() = 3, ",
	|	НалоговыйОбороты.Субконто3", "") + "
  	|
  	|ОБЪЕДИНИТЬ ВСЕ
  	|
  	|ВЫБРАТЬ
  	|	СУММА(НалоговыйОбороты.СуммаОборот),
  	|	0,
  	|	НалоговыйОбороты.Субконто2 КАК Субконто2" + ?(Счет912.ВидыСубконто.Количество() = 3, ",
	|	НалоговыйОбороты.Субконто3 КАК Субконто3", "") + "
  	|ИЗ
  	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет912, , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
  	|";
	Если ЗначениеЗаполнено(ВидРасходов) Тогда
		
		Запрос.Текст = Запрос.Текст + "
  	|ГДЕ
  	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходов
  	|";
	КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
  	|СГРУППИРОВАТЬ ПО
  	|	НалоговыйОбороты.Субконто2" + ?(Счет911.ВидыСубконто.Количество() = 3, ",
	|	НалоговыйОбороты.Субконто3", "") + "
  	|
  	|ОБЪЕДИНИТЬ ВСЕ
  	|
  	|ВЫБРАТЬ
  	|	0,
  	|	СУММА(НалоговыйОбороты.СуммаОборотДт),
  	|	НалоговыйОбороты.Субконто2 КАК Субконто2" + ?(Счет912.ВидыСубконто.Количество() = 3, ",
	|	НалоговыйОбороты.Субконто3 КАК Субконто3", "") + "
  	|ИЗ
  	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет912, , Организация = &Организация И ВидУчета = &ВидУчета, , ) КАК НалоговыйОбороты
  	|ГДЕ
  	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходовДляПроцентов
	|
  	|СГРУППИРОВАТЬ ПО
  	|	НалоговыйОбороты.Субконто2" + ?(Счет911.ВидыСубконто.Количество() = 3, ",
	|	НалоговыйОбороты.Субконто3", "");
	
	
	мБухИтогиУбыток = Запрос.Выполнить().Выгрузить();
	мБухИтогиУбыток.Свернуть("Субконто2" + ?(Счет911.ВидыСубконто.Количество() = 3, ", Субконто3", ""), "Убыток, СуммаПроцентов");
	Убыток = 0;
	Для Каждого Строка Из мБухИтогиУбыток Цикл
	    УбытокТек = ?(Строка.Убыток - Строка.СуммаПроцентов > 0, Строка.Убыток - Строка.СуммаПроцентов, 0);
		Убыток = Убыток + УбытокТек;
	КонецЦикла;
     Возврат Убыток;
 КонецФункции

// функция подсчета убытков, превышающих сумму процентов по ст. 269, от реализации прочих активов путем перебора каждого актива
Функция ПрибылиИУбытки(Счет911, Счет912, ВидРасходов, Флаг, ЕстьПланСчетовНалоговый = Истина) Экспорт
	 
	Запрос = Новый Запрос;          
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("Счет911",      Счет911);
	Запрос.УстановитьПараметр("Счет912",      Счет912);
	// Для хозрасчетного плана счетов надо исключать перенос убытков от реализации амотризируемого имущества - проводки Дт 91.02 Кт 97.21 
	Запрос.УстановитьПараметр("КорСчет",      ?(ЕстьПланСчетовНалоговый, ПланыСчетов.Налоговый.ПустаяСсылка(), ПланыСчетов.Хозрасчетный.ПрочиеРасходыБудущихПериодов));
	Запрос.УстановитьПараметр("ВидРасходов",  ВидРасходов);
	
	Запрос.Текст = 
  	"ВЫБРАТЬ
  	|	СУММА(НалоговыйОбороты.СуммаОборот) КАК Результат,
  	|	НалоговыйОбороты.Субконто2 КАК Субконто2
  	|ИЗ
  	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет911, &ВидыСубконто, Организация В (&Организация) И ВидУчета = &ВидУчета, КорСчет <> &КорСчет, ) КАК НалоговыйОбороты
  	|";
	
	Если ЗначениеЗаполнено(ВидРасходов) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
  		|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходов
  		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
  	|СГРУППИРОВАТЬ ПО
  	|	НалоговыйОбороты.Субконто2
  	|
  	|ОБЪЕДИНИТЬ ВСЕ
  	|
  	|ВЫБРАТЬ
  	|	СУММА(НалоговыйОбороты.СуммаОборот),
  	|	НалоговыйОбороты.Субконто2 КАК Субконто2
  	|ИЗ
  	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет912, &ВидыСубконто, Организация В (&Организация) И ВидУчета = &ВидУчета, КорСчет <> &КорСчет, ) КАК НалоговыйОбороты
  	|";
	
	Если ЗначениеЗаполнено(ВидРасходов) Тогда
		Запрос.Текст = Запрос.Текст + "
	  	|ГДЕ
 	 	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходов
  		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
  	|СГРУППИРОВАТЬ ПО
  	|	НалоговыйОбороты.Субконто2";
	
	Если Не ЕстьПланСчетовНалоговый Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Налоговый", "Хозрасчетный");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВидУчета = &ВидУчета", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СуммаОборот", "СуммаНУОборот");
		
		Массив = Новый Массив;
		Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
		Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы);
		Запрос.УстановитьПараметр("ВидыСубконто",  Массив);
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВидыСубконто", "");
	КонецЕсли;
	
	мБухИтогиРезультат = Запрос.Выполнить().Выгрузить();
	мБухИтогиРезультат.Свернуть("Субконто2", "Результат");
	Результат = 0;
	Для Каждого Строка Из мБухИтогиРезультат Цикл
		Если Флаг = "Убыток" Тогда
			РезультатТек = ?(Строка.Результат > 0, Строка.Результат, 0);
		Иначе
			РезультатТек = ?(Строка.Результат < 0, - Строка.Результат, 0);
		КонецЕсли;
		
		Результат = Результат + РезультатТек;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// функция подсчета убытков, превышающих сумму процентов по ст. 269, от реализации прочих активов путем перебора каждого актива
Функция ПрибылиИУбыткиЕПСБУ(Счет911, Счет912, ВидРасходов, Флаг) Экспорт
	 
	Запрос = Новый Запрос;          
	Запрос.УстановитьПараметр("ДатаНач",      мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",      мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.СписокОрганизаций);
	Запрос.УстановитьПараметр("Счет911",      Счет911);
	Запрос.УстановитьПараметр("Счет912",      Счет912);
	// Для ЕПСБУ надо исключать перенос убытков от реализации амотризируемого имущества - проводки Дт 91.02 Кт 97.21 
	Запрос.УстановитьПараметр("КорСчет",      ПланыСчетов.ЕПСБУ.РасходыБудущихПериодов_НУ);
	Запрос.УстановитьПараметр("ВидРасходов",  ВидРасходов);
	
	Запрос.Текст = 
  	"ВЫБРАТЬ
  	|	СУММА(НалоговыйОбороты.СуммаОборот) КАК Результат,
  	|	НалоговыйОбороты.Субконто2 КАК Субконто2
  	|ИЗ
  	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет911, &ВидыСубконто, Организация В (&Организация) И ВидУчета = &ВидУчета, КорСчет <> &КорСчет, ) КАК НалоговыйОбороты
  	|";
	
	Если ЗначениеЗаполнено(ВидРасходов) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
  		|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходов
  		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
  	|СГРУППИРОВАТЬ ПО
  	|	НалоговыйОбороты.Субконто2
  	|
  	|ОБЪЕДИНИТЬ ВСЕ
  	|
  	|ВЫБРАТЬ
  	|	СУММА(НалоговыйОбороты.СуммаОборот),
  	|	НалоговыйОбороты.Субконто2 КАК Субконто2
  	|ИЗ
  	|	РегистрБухгалтерии.Налоговый.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет912, &ВидыСубконто, Организация В (&Организация) И ВидУчета = &ВидУчета, КорСчет <> &КорСчет, ) КАК НалоговыйОбороты
  	|";
	
	Если ЗначениеЗаполнено(ВидРасходов) Тогда
		Запрос.Текст = Запрос.Текст + "
	  	|ГДЕ
 	 	|	НалоговыйОбороты.Субконто1.ВидПрочихДоходовИРасходов = &ВидРасходов
  		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
  	|СГРУППИРОВАТЬ ПО
  	|	НалоговыйОбороты.Субконто2";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Налоговый", "ЕПСБУ");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВидУчета = &ВидУчета", "");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&Организация)", "Учреждение В (&Организация)");
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоБюджет.ПрочиеДоходыИРасходы);
	Массив.Добавить(ПланыВидовХарактеристик.ВидыСубконтоБюджет.РеализуемыеАктивы);
	Запрос.УстановитьПараметр("ВидыСубконто",  Массив);
	
	мБухИтогиРезультат = Запрос.Выполнить().Выгрузить();
	мБухИтогиРезультат.Свернуть("Субконто2", "Результат");
	Результат = 0;
	Для Каждого Строка Из мБухИтогиРезультат Цикл
		Если Флаг = "Убыток" Тогда
			РезультатТек = ?(Строка.Результат > 0, Строка.Результат, 0);
		Иначе
			РезультатТек = ?(Строка.Результат < 0, - Строка.Результат, 0);
		КонецЕсли;
		
		Результат = Результат + РезультатТек;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПараметрыДляОбработкиЗапросов() Экспорт
	 
	 СтруктураПараметров = Новый Структура("ПланСчетов,ЕНВД,ЗаполнениеПрил5,СписокОрганизаций","Хозрасчетный",Ложь,Ложь,Новый СписокЗначений);
	 
	 ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	 РедакцияКонфигурации = Лев(РегламентированнаяОтчетность.РедакцияКонфигурации(),1);
	 
	 Если ИДКонфигурации = "БП" И РедакцияКонфигурации = "1" Тогда
		 СтруктураПараметров.ПланСчетов = "Налоговый";
		 СтруктураПараметров.ЕНВД = Истина;
		 СтруктураПараметров.ЗаполнениеПрил5 = Ложь;
	 ИначеЕсли ИДКонфигурации = "БП" И РедакцияКонфигурации = "2" Тогда
		 СтруктураПараметров.ПланСчетов = "Хозрасчетный";
		 СтруктураПараметров.ЕНВД = Истина;
		 СтруктураПараметров.ЗаполнениеПрил5 = Ложь;
	ИначеЕсли ИДКонфигурации = "БПКОРП" Тогда
		 СтруктураПараметров.ПланСчетов = "Хозрасчетный";
		 СтруктураПараметров.ЕНВД = Истина;
		 СтруктураПараметров.ЗаполнениеПрил5 = Истина;
		 СтруктураПараметров.СписокОрганизаций = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	ИначеЕсли ИДКонфигурации = "БАУ" Тогда
		 СтруктураПараметров.ПланСчетов = "Хозрасчетный";
		 СтруктураПараметров.ЕНВД = Истина;
		 СтруктураПараметров.ЗаполнениеПрил5 = Ложь;
	ИначеЕсли ИДКонфигурации = "БАУКОРП" Тогда
		 СтруктураПараметров.ПланСчетов = "Хозрасчетный";
		 СтруктураПараметров.ЕНВД = Истина;
		 СтруктураПараметров.ЗаполнениеПрил5 = Истина;
		 СтруктураПараметров.СписокОрганизаций = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	ИначеЕсли ИДКонфигурации = "УПП" Тогда
		 СтруктураПараметров.ПланСчетов = "Налоговый";
		 СтруктураПараметров.ЕНВД = Ложь;
		 СтруктураПараметров.ЗаполнениеПрил5 = Ложь;
	ИначеЕсли ИДКонфигурации = "КА" Тогда
		 СтруктураПараметров.ПланСчетов = "Налоговый";
		 СтруктураПараметров.ЕНВД = Ложь;
		 СтруктураПараметров.ЗаполнениеПрил5 = Ложь;
	 ИначеЕсли ИДКонфигурации = "ББУ" Тогда
		 СтруктураПараметров.ПланСчетов = "Хозрасчетный";
		 СтруктураПараметров.ЕНВД = Истина;
		 СтруктураПараметров.ЗаполнениеПрил5 = Ложь;
	 ИначеЕсли ИДКонфигурации = "БГУ" Тогда
		 СтруктураПараметров.ПланСчетов = "ЕПСБУ";
		 СтруктураПараметров.ЕНВД = Истина;
		 СтруктураПараметров.ЗаполнениеПрил5 = Ложь;
	 Иначе
		 СтруктураПараметров = Неопределено;
	 КонецЕсли;
	 
	СтруктураПараметров.СписокОрганизаций.Добавить(Организация.Ссылка, Организация.Наименование);    
	
	 Возврат СтруктураПараметров;
	 
 КонецФункции

Функция ОбработкаВыполненияЗапросаАвтоЗаполнения(Запрос,СтруктураПараметров,ЗапросПоЗатратам = Истина) Экспорт
	 
	 Если  СтруктураПараметров = Неопределено Тогда
		 ПараметрОрганизация = Организация;
		 ПараметрЕНВД = Ложь;
		 ПараметрПланСчетов = "Хозрасчетный";
	 Иначе
		 ПараметрОрганизация = СтруктураПараметров.СписокОрганизаций;
		 ПараметрЕНВД = СтруктураПараметров.ЕНВД;
		 ПараметрПланСчетов = СтруктураПараметров.ПланСчетов;
	 КонецЕсли;
	 
	 Запрос.УстановитьПараметр("ДатаНач",           мДатаНачалаПериодаОтчета);
	 Запрос.УстановитьПараметр("ДатаКон",           мДатаКонцаПериодаОтчета);
	 Запрос.УстановитьПараметр("СписокОрганизаций", ПараметрОрганизация);
	 МассивСчетовЕН = Новый Массив;
	 
	 Если ПараметрПланСчетов = "Налоговый" Тогда
		 Запрос.Текст = СтрЗаменить(Запрос.Текст, "Хозрасчетный",   "Налоговый");
		 Запрос.Текст = СтрЗаменить(Запрос.Текст, "СуммаНУ",        "Сумма");
		 Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&СписокОрганизаций)", "Организация В (&СписокОрганизаций) И ВидУчета = &ВидУчета");
		 Запрос.УстановитьПараметр("ВидУчета",     Перечисления.ВидыУчетаПоПБУ18.НУ);
		 МассивСчетовЕН.Добавить(ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД);
	 ИначеЕсли ПараметрПланСчетов = "ЕПСБУ" Тогда
		 Запрос.Текст = СтрЗаменить(Запрос.Текст, "Хозрасчетный",   "ЕПСБУ");
		 Запрос.Текст = СтрЗаменить(Запрос.Текст, "СуммаНУ",        "Сумма");
		 Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&СписокОрганизаций)", "Учреждение В (&СписокОрганизаций)");
	 Иначе
		 МассивСчетовЕН.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД);
		 МассивСчетовЕН.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
		 МассивСчетовЕН.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД);
	 КонецЕсли;
	 Запрос.УстановитьПараметр("СчетЕН",       МассивСчетовЕН);
	 
	 
	 Если ПараметрЕНВД И ЗапросПоЗатратам Тогда
		 МассивЕНВД = Новый Массив;
		 
		 Если ПараметрПланСчетов = "Налоговый" Тогда
			 МассивЕНВД.Добавить(Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД);
			 МассивЕНВД.Добавить(Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыРаспределяются);
			 Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&СписокОрганизаций)", "Организация В (&СписокОрганизаций) И Субконто1.ОтнесениеРасходовКДеятельностиЕНВД В (&МассивЕНВД)");
		 ИначеЕсли ПараметрПланСчетов = "ЕПСБУ" Тогда
			 МассивЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
			 МассивЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
			 Запрос.Текст = СтрЗаменить(Запрос.Текст, "Учреждение В (&СписокОрганизаций)", "Учреждение В (&СписокОрганизаций) И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивЕНВД)");
		 Иначе
			 МассивЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);
			 МассивЕНВД.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ВидДеятельностиОпределяетсяПоДоходам);
			 Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&СписокОрганизаций)", "Организация В (&СписокОрганизаций) И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат В (&МассивЕНВД)");
			 
		 КонецЕсли;
		 Запрос.УстановитьПараметр("МассивЕНВД",  МассивЕНВД);
		 
	 КонецЕсли;
	 
	 Возврат Запрос.Выполнить();
	 
	 
 КонецФункции

Функция ИДКонфигурацииДляДекларацииПоПрибыли() Экспорт
	 
	 ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	 РедакцияКонфигурации = Лев(РегламентированнаяОтчетность.РедакцияКонфигурации(),1);
	 
	 Если ИДКонфигурации = "БП" И НЕ РедакцияКонфигурации = "1" Тогда
		 Возврат "БПКОРП";
	 КонецЕсли;
			
		Возврат ИДКонфигурации;

 КонецФункции

// Создает временные таблицы 
// - Филиалы                   (список обособленных подразделений, выделенных на отдельный баланс)
// - ОбособленныеПодразделения (список обособленных подразделений, не выделенных на отдельный баланс)
// - СтруктураОбособленныхПодразделений (список обособленных подразделений, не выделенных на отдельный баланс, с указанием всех их потомков до 3 колена)
// Во всех таблицах указан налоговый орган, в котором подразделение стоит на учете.
Процедура СписокОбособленныхПодразделений(МенеджерВременныхТаблиц, СписокОрганизаций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.РегистрацияВИФНС КАК НалоговыйОрган
	|ПОМЕСТИТЬ Филиалы
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)
	|	И НЕ Организации.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Владелец КАК Организация,
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.РегистрацияВИФНС КАК НалоговыйОрган
	|ПОМЕСТИТЬ ОбособленныеПодразделения
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец В(&СписокОрганизаций)
	|	И Подразделения.ОбособленноеПодразделение
	|	И НЕ Подразделения.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обособленные.Организация КАК Организация,
	|	Подразделения.Ссылка КАК Подразделение,
	|	Обособленные.НалоговыйОрган
	|ПОМЕСТИТЬ СтруктураОбособленныхПодразделений
	|ИЗ
	|	ОбособленныеПодразделения КАК Обособленные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		ПО Обособленные.Подразделение = Подразделения.Родитель
	|ГДЕ
	|	Подразделения.Владелец В(&СписокОрганизаций)
	|	И НЕ Подразделения.ОбособленноеПодразделение
	|	И НЕ Подразделения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбособленныеПодразделенияВСправочникеПодразделения.Организация,
	|	Подразделения.Ссылка,
	|	ОбособленныеПодразделенияВСправочникеПодразделения.НалоговыйОрган
	|ИЗ
	|	ОбособленныеПодразделения КАК ОбособленныеПодразделенияВСправочникеПодразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		ПО ОбособленныеПодразделенияВСправочникеПодразделения.Подразделение = Подразделения.Родитель.Родитель
	|ГДЕ
	|	Подразделения.Владелец В(&СписокОрганизаций)
	|	И НЕ Подразделения.ОбособленноеПодразделение
	|	И НЕ Подразделения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбособленныеПодразделенияВСправочникеПодразделения.Организация,
	|	Подразделения.Ссылка,
	|	ОбособленныеПодразделенияВСправочникеПодразделения.НалоговыйОрган
	|ИЗ
	|	ОбособленныеПодразделения КАК ОбособленныеПодразделенияВСправочникеПодразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		ПО ОбособленныеПодразделенияВСправочникеПодразделения.Подразделение = Подразделения.Родитель.Родитель.Родитель
	|ГДЕ
	|	Подразделения.Владелец В(&СписокОрганизаций)
	|	И НЕ Подразделения.ОбособленноеПодразделение
	|	И НЕ Подразделения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Обособленные.Организация,
	|	Обособленные.Подразделение,
	|	Обособленные.НалоговыйОрган
	|ИЗ
	|	ОбособленныеПодразделения КАК Обособленные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение";

	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЕстьРазныеНалоговыеОрганы(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	Филиалы.НалоговыйОрган КАК НалоговыйОрган
	|ИЗ
	|	Филиалы КАК Филиалы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	ОбособленныеПодразделения.НалоговыйОрган
	|ИЗ
	|	ОбособленныеПодразделения КАК ОбособленныеПодразделения";
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	Возврат (Выборка.Количество() > 1);
	
КонецФункции

#КонецЕсли

мФормыИФорматы = РегламентированнаяОтчетность.НовоеДеревоФормИФорматов();

Форма20040601 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151006", '2004-06-03', "САЭ-3-02/351@", "ФормаОтчета2004Кв2");
ОпределитьФорматВДеревеФормИФорматов(Форма20040601, "3.00004");

Форма20050101 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151006", '2005-02-25', "03-03-01-02/65", "ФормаОтчета2005Кв1");
ОпределитьФорматВДеревеФормИФорматов(Форма20050101, "3.00005");

Форма20060101 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151006", '2006-02-07', "24н", "ФормаОтчета2006Кв1");
ОпределитьФорматВДеревеФормИФорматов(Форма20060101, "3.00006");

Форма20070201 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151006", '2007-01-09', "1н", "ФормаОтчета2007Кв1");
ОпределитьФорматВДеревеФормИФорматов(Форма20070201, "3.00007");

Форма20080601 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151006", '2008-05-05', "54н", "ФормаОтчета2008Кв1");
ОпределитьФорматВДеревеФормИФорматов(Форма20080601, "5.01");

Форма20091201 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151006", '2009-12-16', "135н", "ФормаОтчета2009Кв4");
ОпределитьФорматВДеревеФормИФорматов(Форма20091201, "5.02");

Форма20101201 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151006", '2010-12-15', "ММВ-7-3/730@", "ФормаОтчета2010Кв4");
ОпределитьФорматВДеревеФормИФорматов(Форма20101201, "5.03");

Форма20120101 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151006", '2012-03-22', "ММВ-7-3/174@", "ФормаОтчета2012Кв1");
ОпределитьФорматВДеревеФормИФорматов(Форма20120101, "5.04");

Форма20131231 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151006", '2013-11-14', "ММВ-7-3/501@", "ФормаОтчета2013Кв4");
ОпределитьФорматВДеревеФормИФорматов(Форма20131231, "5.05");

ФормаОтчета2015Кв1 = ОпределитьФормуВДеревеФормИФорматов(мФормыИФорматы, "1151006", '2014-11-26', "ММВ-7-3/600@", "ФормаОтчета2015Кв1");
ОпределитьФорматВДеревеФормИФорматов(ФормаОтчета2015Кв1, "5.06");

мЧтоОчищать = "Декларацию";

ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);
ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);

мТаблицаСоставПоказателей    = Новый ТаблицаЗначений;
мТаблицаСоставПоказателей.Колонки.Добавить("ИмяПоляТаблДокумента",    ОписаниеТиповСтрока50);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСоставу",  ОписаниеТиповСтрока50);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоФорме",    ОписаниеТиповСтрока50);
мТаблицаСоставПоказателей.Колонки.Добавить("ПризнМногострочности",    ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("ТипДанныхПоказателя",     ОписаниеТиповСтрока15);
мТаблицаСоставПоказателей.Колонки.Добавить("КодПоказателяПоСтруктуре",     ОписаниеТиповСтрока50);

мСтруктураВариантыЗаполнения = Новый Структура;

ОписаниеТиповСтрока = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("Дата"));
ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыДаты(ЧастиДаты.Дата));

мТаблицаФормОтчета = Новый ТаблицаЗначений;
мТаблицаФормОтчета.Колонки.Добавить("ФормаОтчета",        ОписаниеТиповСтрока);
мТаблицаФормОтчета.Колонки.Добавить("ОписаниеОтчета",     ОписаниеТиповСтрока, "Утверждена",  20);
мТаблицаФормОтчета.Колонки.Добавить("ДатаНачалоДействия", ОписаниеТиповДата,   "Действует с", 5);
мТаблицаФормОтчета.Колонки.Добавить("ДатаКонецДействия",  ОписаниеТиповДата,   "         по", 5);

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2004Кв2";
НоваяФорма.ОписаниеОтчета     = "Приложение к приказу МНС России от 11 ноября 2003 г. №БГ-3-02/614 (в редакции приказа МНС России от 03 июня 2004 г. №САЭ-3-02/351@)";
НоваяФорма.ДатаНачалоДействия = '2004-08-01';
НоваяФорма.ДатаКонецДействия  = '2004-12-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2005Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение к приказу МНС России от 11 ноября 2003 г. №БГ-3-02/614 (в редакции письма Минфина РФ от 25.02.2005 N 03-03-01-02/65)";
НоваяФорма.ДатаНачалоДействия = '2005-01-01';
НоваяФорма.ДатаКонецДействия  = '2006-02-28';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2006Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение № 1 к приказу Минфина РФ от 7 февраля 2006 г. № 24н";
НоваяФорма.ДатаНачалоДействия = '2006-01-01';
НоваяФорма.ДатаКонецДействия  = '2006-12-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2007Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение № 1 к приказу Минфина РФ от 7 февраля 2006 г. № 24н (в ред. приказа Минфина РФ от 09.01.2007 г. № 1н)";
НоваяФорма.ДатаНачалоДействия = '2007-01-01';
НоваяФорма.ДатаКонецДействия  = '2008-05-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2008Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение №1 к приказу Министерства финансов Российской Федерации от 5 мая 2008 г. № 54н";
НоваяФорма.ДатаНачалоДействия = '2008-06-01';
НоваяФорма.ДатаКонецДействия  = '2009-11-30';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2009Кв4";
НоваяФорма.ОписаниеОтчета     = "Приложение №1 к приказу Минфина РФ от 5 мая 2008 г. № 54н (в ред. приказа Минфина РФ от 16.12.2009 г. № 135н) ";
НоваяФорма.ДатаНачалоДействия = '2009-12-01';
НоваяФорма.ДатаКонецДействия  = '2010-12-31';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2010Кв4";
НоваяФорма.ОписаниеОтчета     = "Приложение №1 к приказу ФНС России от 15 декабря 2010 г. № ММВ-7-3/730@";
НоваяФорма.ДатаНачалоДействия = '2010-12-01';
НоваяФорма.ДатаКонецДействия  = '2012-06-30';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2012Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение №1 к приказу ФНС России от 22 марта 2012 г. № ММВ-7-3/174@";
НоваяФорма.ДатаНачалоДействия = '2012-07-01';
НоваяФорма.ДатаКонецДействия  = '2013-11-30';

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2015Кв1";
НоваяФорма.ОписаниеОтчета     = "Приложение №1 к приказу ФНС России от 26.11.2014 № ММВ-7-3/600@";
НоваяФорма.ДатаНачалоДействия = '2014-12-01';
НоваяФорма.ДатаКонецДействия  = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

НоваяФорма = мТаблицаФормОтчета.Добавить();
НоваяФорма.ФормаОтчета        = "ФормаОтчета2013Кв4";
НоваяФорма.ОписаниеОтчета     = "Приложение №1 к приказу ФНС России от 22 марта 2012 г. № ММВ-7-3/174@ (в ред. приказа ФНС России от 14 ноября 2013 г. № ММВ-7-3/501@)";
НоваяФорма.ДатаНачалоДействия = '2013-12-31';
НоваяФорма.ДатаКонецДействия  = '2014-12-31';
