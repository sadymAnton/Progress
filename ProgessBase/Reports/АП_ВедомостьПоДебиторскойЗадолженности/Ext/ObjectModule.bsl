#Если Клиент Тогда
Перем ВыводитьВремя;	
Перем ТаблИтоговаяРазвернуто;
Перем ТаблИтого Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАЧАЛЬНОЙ НАСТРОЙКИ ОТЧЕТА

Функция ПолучитьТекстЗапросаНастройки(Пар=1)
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВзаиморасчетыСКонтрагентами.Контрагент,
	               |	ВзаиморасчетыСКонтрагентами.Организация,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	               |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	               |	ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
	               |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаОплаты,
				   |	0 КАК ДнейПросрочено,
	               |	ВзаиморасчетыСКонтрагентами.Регистратор.Дата КАК Дата,
	               |	0 КАК НачОст,
	               |	0 КАК Приход,
	               |	0 КАК Расход,
	               |	0 КАК КонОст,
	               |	0 КАК Погашено,
	               |	0 КАК Просрочено,
	               |	0 КАК Отсрочка,
	               |	0 КАК ПроцентОтгрузки,
	               |	ПОДСТРОКА(ВзаиморасчетыСКонтрагентами.Регистратор.Комментарий, 1, 50) КАК Комментарий
	               |ПОМЕСТИТЬ ТаблИтого
	               |ИЗ
	               |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
				   |ГДЕ
	               |	1 = 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Контрагенты.Ссылка КАК Контрагент,
	               |	ТаблИтого.Организация,
	               |	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	               |	ТаблИтого.ДатаОплаты,
				   |	ТаблИтого.ДнейПросрочено,
	               |	ТаблИтого.НачОст КАК НачОст,
	               |	ТаблИтого.Приход КАК Приход,
	               |	ТаблИтого.Расход КАК Расход,
	               |	ТаблИтого.КонОст КАК КонОст,
	               |	ТаблИтого.Погашено КАК Погашено,
	               |	ТаблИтого.Просрочено КАК Просрочено,
	               |	ТаблИтого.Организация.Представление,
	               |	Контрагенты.Ссылка.Представление КАК КонтрагентПредставление,
	               |	ДоговорыКонтрагентов.Ссылка.Представление КАК ДоговорКонтрагентаПредставление,
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
				   //|	Контрагенты.КаналТовародвижения,
				   //|	Контрагенты.ЦеноваяГруппаКонтрагента,
				   //|	Контрагенты.Проект,
	               |	Контрагенты.ОсновнойМенеджерПокупателя КАК МенеджерПокупателя,
	               |	ТаблИтого.Регистратор,
	               |	ТаблИтого.Дата,
	               |	Контрагенты.ГоловнойКонтрагент,
	               |	ТаблИтого.Отсрочка,
	               |	ТаблИтого.ПроцентОтгрузки,
	               |	ПОДСТРОКА(ТаблИтого.Регистратор.Комментарий, 1, 50) КАК Комментарий,
	               |	ПРЕДСТАВЛЕНИЕ(ТаблИтого.Регистратор) КАК РегистраторПредставление,
				   |	ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних.ДопустимаяСуммаЗадолженности КАК КредитныйЛимит,
	               |	ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.ПричинаБлокировкиОтгрузки КАК ПричинаБлокировки,
	               |	ПКК_СтатусыДЗСрезПоследних.СтатусДЗ КАК СтатусДЗ,
				   |	ВЫБОР КОГДА ТаблИтого.КонОст > 0 ТОГДА ВЫРАЗИТЬ((ТаблИтого.Просрочено/ТаблИтого.КонОст)*100 КАК ЧИСЛО(15,2)) ИНАЧЕ 0 КОНЕЦ КАК ПроцентПросрочки
	               |{ВЫБРАТЬ
	               |	Организация.*,
	               |	ДоговорКонтрагента.*,
	               |	ДатаОплаты,
				   |	ДнейПросрочено,
	               |	НачОст,
	               |	Приход,
	               |	Расход,
	               |	КонОст,
	               |	Погашено,
	               |	Просрочено,
	               |	Контрагент.*,
	               |	ВалютаВзаиморасчетов.*,
				   //|	КаналТовародвижения.*,
				   //|	ЦеноваяГруппаКонтрагента,
				   //|	Проект.*,
	               |	МенеджерПокупателя.*,
	               |	Регистратор,
	               |	Дата,
	               |	ГоловнойКонтрагент.*,
	               |	Отсрочка,
	               |	ПроцентОтгрузки,
	               |	Комментарий,
	               |	РегистраторПредставление,
				   |	КредитныйЛимит,
				   |	ПричинаБлокировки.*,
				   |	СтатусДЗ.*,
				   |	ПроцентПросрочки}
	               |ИЗ
	               |	ТаблИтого КАК ТаблИтого
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	               |		ПО ТаблИтого.Контрагент = Контрагенты.Ссылка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |		ПО ТаблИтого.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежа.СрезПоследних КАК ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних
	               |		ПО ТаблИтого.Контрагент = ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних.Объект
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_ПричиныБлокировкиОтгрузки.СрезПоследних КАК ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних
	               |		ПО ТаблИтого.Контрагент = ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.Контрагент
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПКК_СтатусыДЗ.СрезПоследних КАК ПКК_СтатусыДЗСрезПоследних
	               |		ПО ТаблИтого.Контрагент = ПКК_СтатусыДЗСрезПоследних.Контрагент
	               |{ГДЕ
	               |	ТаблИтого.Организация.*,
	               |	ТаблИтого.ДоговорКонтрагента.*,
	               |	Контрагенты.Ссылка.* КАК Контрагент,
	               |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов.*,
				   //|	Контрагенты.КаналТовародвижения.*,
				   //|	Контрагенты.ЦеноваяГруппаКонтрагента.*,
				   //|	Контрагенты.Проект.*,
	               |	Контрагенты.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
	               |	Контрагенты.ГоловнойКонтрагент.*,
	               |	ТаблИтого.Отсрочка,
	               |	ТаблИтого.ПроцентОтгрузки,
	               |	ТаблИтого.Дата,
	               |	ТаблИтого.ДатаОплаты,
				   |	ТаблИтого.ДнейПросрочено,
	               |	ТаблИтого.НачОст,
	               |	ТаблИтого.Приход,
	               |	ТаблИтого.Расход,
	               |	ТаблИтого.КонОст,
	               |	ТаблИтого.Погашено,
	               |	ТаблИтого.Просрочено,
				   |	ПКК_ИсторияИзмененияКредитногоЛимитаИОтсрочкиПлатежаСрезПоследних.ДопустимаяСуммаЗадолженности КАК КредитныйЛимит,
	               |	ПКК_ПричиныБлокировкиОтгрузкиСрезПоследних.ПричинаБлокировкиОтгрузки.* КАК ПричинаБлокировки,
	               |	ПКК_СтатусыДЗСрезПоследних.СтатусДЗ.* КАК СтатусДЗ}
	               |{УПОРЯДОЧИТЬ ПО
	               |	Контрагент.*,
	               |	Организация.*,
	               |	ДоговорКонтрагента.*,
	               |	ВалютаВзаиморасчетов.*,
				   //|	КаналТовародвижения.*,
				   //|	ЦеноваяГруппаКонтрагента.*,
				   //|	Проект.*,
	               |	МенеджерПокупателя.*,
	               |	Регистратор.*,
	               |	ГоловнойКонтрагент.*,
	               |	Дата,
	               |	ДатаОплаты,
				   |	Отсрочка,
	               |	ПроцентОтгрузки,
				   |	КредитныйЛимит,
				   |	ПричинаБлокировки.*,
				   |	СтатусДЗ.*}
	               |ИТОГИ
	               |	СУММА(НачОст),
	               |	СУММА(Приход),
	               |	СУММА(Расход),
	               |	СУММА(КонОст),
	               |	СУММА(Погашено),
	               |	СУММА(Просрочено),
				   |	ВЫБОР КОГДА СУММА(КонОст) > 0 ТОГДА ВЫРАЗИТЬ((СУММА(Просрочено)/СУММА(КонОст))*100 КАК ЧИСЛО(15,2)) ИНАЧЕ 0 КОНЕЦ КАК ПроцентПросрочки
	               |ПО
	               |	ОБЩИЕ
	               |{ИТОГИ ПО
	               |	ВалютаВзаиморасчетов,
	               |	Организация.*,
	               |	Контрагент.*,
	               |	ДоговорКонтрагента.*,
				   //|	КаналТовародвижения,
				   //|	ЦеноваяГруппаКонтрагента,
				   //|	Проект,
	               |	МенеджерПокупателя.*,
	               |	Регистратор.*,
	               |	ГоловнойКонтрагент.*,
				   |	ПричинаБлокировки.*,
				   |	СтатусДЗ.*}";
	
	//Если Пар = 2 Тогда
	Если Пар = 9 Тогда
		Поз = Найти(ТекстЗапроса,"{ИТОГИ ПО");
		Если Поз > 0 Тогда
			ТекстЗапроса = Лев(ТекстЗапроса,Поз-1);
		КонецЕсли;	
	КонецЕсли;	
	возврат ТекстЗапроса;
КонецФункции	

// Процедура установки начальных настроек отчета по метаданным регистра накопления
//
Процедура УстановитьНачальныеНастройки(ДополнительныеПараметры = Неопределено) Экспорт
	
	// Настройка общих параметров универсального отчета
	
	// Содержит название отчета, которое будет выводиться в шапке.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.мНазваниеОтчета = "Название отчета";
	УниверсальныйОтчет.мНазваниеОтчета = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
	
	// Содержит признак необходимости отображения надписи и поля выбора раздела учета в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	УниверсальныйОтчет.мВыбиратьИмяРегистра = Ложь;
	
	ТекстЗапроса = ПолучитьТекстЗапросаНастройки(1);
	
	УниверсальныйОтчет.ПостроительОтчета.Текст = ТекстЗапроса;
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Очистить();
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента", "Договор контрагента");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДатаОплаты", "Дата оплаты");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДнейПросрочено", "Дней просрочено");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента", "Договор контрагента");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ВалютаВзаиморасчетов", "Валюта взаиморасчетов");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("МенеджерПокупателя", "Менеджер покупателя");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ГоловнойКонтрагент", "Головной контрагент");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КаналТовародвижения", "Канал товародвижения");
	//УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ЦеноваяГруппаКонтрагента", "Ценовая группа");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Регистратор", "Документ");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("НачОст", "Нач. Ост.");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Приход", "Приход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Расход", "Расход");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КонОст", "Кон. Ост.");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Просрочено", "Просроченный долг");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Погашено", "Погашено");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("Отсрочка", "Дней отсрочки");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПроцентОтгрузки", "Процент суммы отгрузки");
	
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("КредитныйЛимит", "Кредитный лимит");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПричинаБлокировки", "Причина блокировки");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("СтатусДЗ", "Статус ДЗ");
	УниверсальныйОтчет.мСтруктураПредставлениеПолей.Вставить("ПроцентПросрочки", "% ПДЗ");
	
	
	// Содержит имя регистра, по метаданным которого будет выполняться заполнение настроек отчета.
	// Тип: Строка.
	// Пример:
	// УниверсальныйОтчет.ИмяРегистра = "ТоварыНаСкладах";
	//УниверсальныйОтчет.ИмяРегистра = "РасчетыСКонтрагентами";
	
	// Содержит признак необходимости вывода отрицательных значений показателей красным цветом.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ОтрицательноеКрасным = Истина;
	
	// Содержит признак необходимости вывода в отчет общих итогов.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.ВыводитьОбщиеИтоги = Ложь;
	
	// Содержит признак необходимости вывода детальных записей в отчет.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	// УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	// Содержит признак необходимости отображения флага использования свойств и категорий в форме настройки.
	// Тип: Булево.
	// Значение по умолчанию: Истина.
	// Пример:
	// УниверсальныйОтчет.мВыбиратьИспользованиеСвойств = Ложь;
	
	// Содержит признак использования свойств и категорий при заполнении настроек отчета.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	 УниверсальныйОтчет.ИспользоватьСвойстваИКатегории = Ложь;
	
	// Содержит признак использования простой формы настроек отчета без группировок колонок.
	// Тип: Булево.
	// Значение по умолчанию: Ложь.
	// Пример:
	 УниверсальныйОтчет.мРежимФормыНастройкиБезГруппировокКолонок = Истина;
	
	// Дополнительные параметры, переданные из отчета, вызвавшего расшифровку.
	// Информация, передаваемая в переменной ДополнительныеПараметры, может быть использована
	// для реализации специфичных для данного отчета параметрических настроек.
	
	//МассивТипов = Новый Массив;
	//МассивТипов.Добавить(Тип("СправочникСсылка.Контрагенты"));
	//УниверсальныйОтчет.ДобавитьПолеГруппировка("Контрагент",  "ДоговорКонтрагента", "Владелец",    "Контрагент",  Новый ОписаниеТипов(МассивТипов));
	//
	//МассивТипов.Очистить();
	//МассивТипов.Добавить(Тип("СправочникСсылка.Организации"));
	//УниверсальныйОтчет.ДобавитьПолеГруппировка("Организация", "ДоговорКонтрагента", "Организация", "Организация", Новый ОписаниеТипов(МассивТипов));
	
	//УниверсальныйОтчет.ДобавитьПолеГруппировка("ВалютаВзаиморасчетов", "ДоговорКонтрагента", "ВалютаВзаиморасчетов", "Валюта взаиморасчетов");
	
	// Заполнение начальных настроек универсального отчета
	УниверсальныйОтчет.УстановитьНачальныеНастройки(Истина);
	
	УниверсальныйОтчет.ДобавитьПоказатель("НачОст", "Нач. Ост.",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("Приход", "Увелич. долга",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("Расход", "Уменьш. долга",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("КонОст", "Кон. ост.",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("Просрочено", "Просроченный долг",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("ПроцентПросрочки", "% ПДЗ",Истина,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	УниверсальныйОтчет.ДобавитьПоказатель("Погашено", "Погашено",Ложь,"ЧЦ=15; ЧДЦ=2","Суммы","Сумммы взаиморасчетов");
	УниверсальныйОтчет.Показатели.Строки[0].Использование = Истина;
	//
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаУпрОборот",,            Ложь,, "СуммаУпр");
	//УниверсальныйОтчет.ДобавитьПоказатель("СуммаВзаиморасчетовОборот",, Ложь,, "СуммаВзаиморасчетов");
	
	// Добавление предопределенных группировок строк отчета.
	// Необходимо вызывать для каждой добавляемой группировки строки.
	// УниверсальныйОтчет.ДобавитьИзмерениеСтроки(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ВалютаВзаиморасчетов");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
	УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("МенеджерПокупателя"); 
	//УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Регистратор");
	
	// Добавление предопределенных группировок колонок отчета.
	// Необходимо вызывать для каждой добавляемой группировки колонки.
	// УниверсальныйОтчет.ДобавитьИзмерениеКолонки(<ПутьКДанным>);
	
	// Добавление предопределенных отборов отчета.
	// Необходимо вызывать для каждого добавляемого отбора.
	// УниверсальныйОтчет.ДобавитьОтбор(<ПутьКДанным>);
	УниверсальныйОтчет.ДобавитьОтбор("Контрагент");
	УниверсальныйОтчет.ДобавитьОтбор("Организация");
	УниверсальныйОтчет.ДобавитьОтбор("ДоговорКонтрагента");
	УниверсальныйОтчет.ДобавитьОтбор("МенеджерПокупателя");
	УниверсальныйОтчет.ДобавитьОтбор("ВалютаВзаиморасчетов");
	///УниверсальныйОтчет.ДобавитьОтбор("РасчетыВозврат");
	
	//УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета,истина);
	УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);  //проверить изменение
	
	// Добавление предопределенных полей порядка отчета.
	// Необходимо вызывать для каждого добавляемого поля порядка.
	УниверсальныйОтчет.ДобавитьПорядок("Дата"); //пока убираем
	УниверсальныйОтчет.ДобавитьПорядок("Регистратор");
	УниверсальныйОтчет.ДобавитьПорядок("ДатаОплаты");
	
	// Установка связи подчиненных и родительских полей
	// УниверсальныйОтчет.УстановитьСвязьПолей(<ПутьКДанным>, <ПутьКДаннымРодитель>);
	
	// Установка связи полей и измерений
	// УниверсальныйОтчет.УстановитьСвязьПоляИИзмерения(<ИмяПоля>, <ИмяИзмерения>);
	
	// Добавление дополнительных полей
	// Необходимо вызывать для каждого добавляемого дополнительного поля.
	// УниверсальныйОтчет.ДобавитьДополнительноеПоле(<ПутьКДанным>, <Размещение>, <Положение>);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Регистратор",ТипРазмещенияРеквизитовИзмерений.Вместе,2);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ДатаОплаты",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("ДнейПросрочено",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
	УниверсальныйОтчет.ДобавитьДополнительноеПоле("Отсрочка",ТипРазмещенияРеквизитовИзмерений.Отдельно,2);
	
	УслОформление  = УниверсальныйОтчет.ПостроительОтчета.УсловноеОформление.Добавить("ДатаОплаты","Дата оплаты");
	//УслОформление.ОФормление  = Новый НастройкаОформления();
	УслОформление.Использование 										  = Истина;
	Область = УслОформление.Область.Добавить("ДатаОплаты","Дата оплаты",ТипОбластиОформления.Поле);
	УслОформление.ОФормление.Формат.Значение					 = "ДФ=dd.MM.yyyy";
	УслОформление.ОФормление.Формат.Использование 				 = Истина;
	УслОформление.ОФормление.ГоризонтальноеПоложение.Значение = ГоризонтальноеПоложение.Центр;
	УслОформление.ОФормление.ГоризонтальноеПоложение.Использование = истина;
		
	
	УслОформление  = УниверсальныйОтчет.ПостроительОтчета.УсловноеОформление.Добавить("ДнейПросрочено","Дней просрочено");
	//УслОформление.ОФормление  = Новый НастройкаОформления();
	УслОформление.Использование 								= Истина;
	Область = УслОформление.Область.Добавить("ДнейПросрочено","Дней просрочено",ТипОбластиОформления.Поле);
	
	УслОформление.ОФормление.Формат.Значение					 = "ЧЦ=4";
	УслОформление.ОФормление.Формат.Использование 				 = Истина;
	УслОформление.ОФормление.ГоризонтальноеПоложение.Значение = ГоризонтальноеПоложение.Центр;
	УслОформление.ОФормление.ГоризонтальноеПоложение.Использование = истина;
	
	УслОформление.Использование 								= Истина;
	Область = УслОформление.Область.Добавить("ПроцентОтгрузки","Процент суммы отгрузки",ТипОбластиОформления.Поле);
	УслОформление.ОФормление.Формат.Значение					  = "ЧЦ=4";
	УслОформление.ОФормление.Формат.Использование 				   = Ложь;
	УслОформление.ОФормление.ГоризонтальноеПоложение.Значение 	   = ГоризонтальноеПоложение.Центр;
	УслОформление.ОФормление.ГоризонтальноеПоложение.Использование = истина;
	
	
	//УслОформление.ОФормление
	
КонецПроцедуры // УстановитьНачальныеНастройки()

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА 
//Функция ПолучитьТекстЗапроса_РегистрыБУХ()
//	возврат "ВЫБРАТЬ
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация КАК Организация,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
//			|	СУММА(ВЫБОР
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
//			|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
//			|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			ИНАЧЕ 0
//			|		КОНЕЦ) КАК Расход,
//			|	СУММА(ВЫБОР
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
//			|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
//			|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			ИНАЧЕ 0
//			|		КОНЕЦ) КАК Приход,
//			|	СУММА(ВЫБОР
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
//			|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
//			|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			ИНАЧЕ 0
//			|		КОНЕЦ - ВЫБОР
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
//			|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
//			|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			ИНАЧЕ 0
//			|		КОНЕЦ) КАК КонОст,
//			|	СУММА(ВЫБОР
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период < &Дата1
//			|				ТОГДА ВЫБОР
//			|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//			|								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
//			|							ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//			|								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
//			|							ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|						ИНАЧЕ 0
//			|					КОНЕЦ
//			|			ИНАЧЕ 0
//			|		КОНЕЦ) КАК ПриходНач,
//			|	СУММА(ВЫБОР
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период < &Дата1
//			|				ТОГДА ВЫБОР
//			|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//			|								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
//			|							ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//			|								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
//			|							ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|						ИНАЧЕ 0
//			|					КОНЕЦ
//			|			ИНАЧЕ 0
//			|		КОНЕЦ) КАК РасходНач,
//			|	СУММА(ВЫБОР
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период < &Дата1
//			|				ТОГДА ВЫБОР
//			|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период < &Дата1
//			|							ТОГДА ВЫБОР
//			|									КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//			|											И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
//			|										ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|									КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//			|											И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
//			|										ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|									ИНАЧЕ 0
//			|								КОНЕЦ
//			|						ИНАЧЕ 0
//			|					КОНЕЦ - ВЫБОР
//			|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//			|								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
//			|							ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|						КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//			|								И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
//			|							ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|						ИНАЧЕ 0
//			|					КОНЕЦ
//			|			ИНАЧЕ 0
//			|		КОНЕЦ) КАК НачОст
//			|ПОМЕСТИТЬ ТаблКонтр
//			|ИЗ
//			|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
//			|ГДЕ
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Активность
//			|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период <= &Дата2
//			|	//И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент.Код = ""52878""
//			|{ГДЕ
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.*,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент.*,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация.*,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК Валюта}
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Контрагент
//			|
//			|ИМЕЮЩИЕ
//			|	СУММА(ВЫБОР
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
//			|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
//			|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			ИНАЧЕ 0
//			|		КОНЕЦ - ВЫБОР
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
//			|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
//			|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			ИНАЧЕ 0
//			|		КОНЕЦ) <> 0
//			|
//			|ИНДЕКСИРОВАТЬ ПО
//			|	Организация,
//			|	ДоговорКонтрагента,
//			|	Валюта
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|ВЫБРАТЬ
//			|	ВЫБОР
//			|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента
//			|		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период
//			|	КОНЕЦ КАК Дата,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.Владелец КАК Контрагент,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
//			|	ВЫБОР
//			|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДокументДвижения <> &ПустойДокумент
//			|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДокументДвижения
//			|		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор
//			|	КОНЕЦ КАК Регистратор,
//			|	ВЫБОР
//			|		КОГДА НЕ РеализацияТоваровУслуг.АП_ДатаОплаты ЕСТЬ NULL 
//			|			ТОГДА ВЫБОР
//			|					КОГДА РеализацияТоваровУслуг.АП_ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|						ТОГДА РеализацияТоваровУслуг.Дата
//			|					ИНАЧЕ РеализацияТоваровУслуг.АП_ДатаОплаты
//			|				КОНЕЦ
//			|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаОплаты
//			|		ИНАЧЕ ВЫБОР
//			|				КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|					ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента
//			|				ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период
//			|			КОНЕЦ
//			|	КОНЕЦ КАК ДатаОплаты,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента КАК ДоговорКонтрагента,
//			|	СУММА(ВЫБОР
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
//			|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
//			|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			ИНАЧЕ 0
//			|		КОНЕЦ) КАК Приход,
//			|	СУММА(РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаРег) КАК СуммаРег,
//			|	СУММА(ВЫБОР
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов > 0
//			|				ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
//			|					И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов < 0
//			|				ТОГДА -1 * РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.СуммаВзаиморасчетов
//			|			ИНАЧЕ 0
//			|		КОНЕЦ) КАК Расход,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация КАК Организация,
//			|	ТаблКонтр.Расход КАК ИтогоРасход,
//			|	ТаблКонтр.Приход КАК ИтогоПриход,
//			|	СУММА(ТаблКонтр.ПриходНач) КАК ИтогоПриходНач,
//			|	СУММА(ТаблКонтр.РасходНач) КАК ИтогоРасходНач
//			|ИЗ
//			|	РегистрНакопления.РасчетыПоРеализацииВУсловныхЕдиницахОрганизации КАК РасчетыПоРеализацииВУсловныхЕдиницахОрганизации
//			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
//			|		ПО РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор = РеализацияТоваровУслуг.Ссылка
//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
//			|		ПО РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация = ТаблКонтр.Организация
//			|			И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
//			|			И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов = ТаблКонтр.Валюта
//			|ГДЕ
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Активность
//			|	И РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период <= &Дата2
//			|
//			|СГРУППИРОВАТЬ ПО
//			|	ВЫБОР
//			|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента
//			|		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период
//			|	КОНЕЦ,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.Владелец,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента.ВалютаВзаиморасчетов,
//			|	ВЫБОР
//			|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДокументДвижения <> &ПустойДокумент
//			|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДокументДвижения
//			|		ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Регистратор
//			|	КОНЕЦ,
//			|	ВЫБОР
//			|		КОГДА НЕ РеализацияТоваровУслуг.АП_ДатаОплаты ЕСТЬ NULL 
//			|			ТОГДА ВЫБОР
//			|					КОГДА РеализацияТоваровУслуг.АП_ДатаОплаты = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|						ТОГДА РеализацияТоваровУслуг.Дата
//			|					ИНАЧЕ РеализацияТоваровУслуг.АП_ДатаОплаты
//			|				КОНЕЦ
//			|		КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|			ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаОплаты
//			|		ИНАЧЕ ВЫБОР
//			|				КОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
//			|					ТОГДА РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.АП_ДатаДокумента
//			|				ИНАЧЕ РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Период
//			|			КОНЕЦ
//			|	КОНЕЦ,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.ДоговорКонтрагента,
//			|	РасчетыПоРеализацииВУсловныхЕдиницахОрганизации.Организация,
//			|	ТаблКонтр.Расход,
//			|	ТаблКонтр.Приход
//			|
//			|УПОРЯДОЧИТЬ ПО
//			|	Организация,
//			|	Контрагент,
//			|	ДоговорКонтрагента,
//			|	Валюта,
//			|	ДатаОплаты,
//			|	Дата,
//			|	Регистратор
//			|;
//			|
//			|////////////////////////////////////////////////////////////////////////////////
//			|УНИЧТОЖИТЬ ТаблКонтр";
//КонецФункции

Функция ПолучитьТекстЗапроса()
	возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |							ТОГДА 0
	        |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |		КОНЕЦ) КАК ПриходКон,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |							ТОГДА 0
	        |						ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |		КОНЕЦ) КАК РасходКон,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК ПриходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК РасходНач,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА 0
	        |									ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |								КОНЕЦ
	        |						КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |							ТОГДА ВЫБОР
	        |									КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |										ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |									ИНАЧЕ 0
	        |								КОНЕЦ
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход
	        |ПОМЕСТИТЬ ТаблКонтр
	        |{ВЫБРАТЬ
	        |	Организация.*,
	        |	ДоговорКонтрагента.*,
	        |	Контрагент.*}
	        |ИЗ
	        |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	        |ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	        |	И ВзаиморасчетыСКонтрагентами.Активность
	        |	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВидДоговора В(&ВидДоговора)
	        |{ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.*,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент.*,
	        |	ВзаиморасчетыСКонтрагентами.Организация.*,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя,
			//|	ВзаиморасчетыСКонтрагентами.Контрагент.ЦеноваяГруппаКонтрагента.* КАК ЦеноваяГруппаКонтрагента,
			//|	ВзаиморасчетыСКонтрагентами.Контрагент.КаналТовародвижения.* КАК КаналТовародвижения,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов.* КАК ВалютаВзаиморасчетов}
	        //|	ВзаиморасчетыСКонтрагентами.Контрагент.Проект.* КАК Проект
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВзаиморасчетыСКонтрагентами.Организация,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент
	        |
	        |ИМЕЮЩИЕ
	        |	(СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |								ТОГДА 0
	        |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |						КОНЕЦ
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |								ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |			КОНЕЦ - ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |								ТОГДА 0
	        |							ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |						КОНЕЦ
	        |				КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |								ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ - ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период < &Дата1
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0
	        |		ИЛИ СУММА(ВЫБОР
	        |				КОГДА ВзаиморасчетыСКонтрагентами.Период МЕЖДУ &Дата1 И &Дата2
	        |					ТОГДА ВЫБОР
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА 0
	        |										ИНАЧЕ ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |									КОНЕЦ
	        |							КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	        |								ТОГДА ВЫБОР
	        |										КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |											ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |										ИНАЧЕ 0
	        |									КОНЕЦ
	        |						КОНЕЦ
	        |				ИНАЧЕ 0
	        |			КОНЕЦ) <> 0)
	        |
	        |ИНДЕКСИРОВАТЬ ПО
	        |	Организация,
	        |	ДоговорКонтрагента,
	        |	Контрагент
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВзаиморасчетыСКонтрагентами.Организация КАК Организация,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	        |	ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ КАК Дата,
	        |	ВЫБОР
	        |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	        |	КОНЕЦ КАК Регистратор,
			|ВЫБОР
			|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
			|		ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
			|		ТОГДА КорректировкаРеализации.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
			|		ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
			|		ТОГДА КорректировкаДолга.АП_ДатаОплаты
			|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
			|КОНЕЦ КАК ДатаОплаты,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Приход,
	        |	СУММА(ВЫБОР
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов > 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			КОГДА ВзаиморасчетыСКонтрагентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Приход)
	        |				ТОГДА ВЫБОР
	        |						КОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов < 0
	        |							ТОГДА ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов * -1
	        |						ИНАЧЕ 0
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК Расход,
	        |	Минимум(ТаблКонтр.ПриходНач) КАК ПриходНач,
	        |	Минимум(ТаблКонтр.РасходНач) КАК РасходНач,
	        |	Минимум(ТаблКонтр.ПриходКон) КАК ПриходКон,
	        |	Минимум(ТаблКонтр.РасходКон) КАК РасходКон,
	        |	ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты КАК ПроцентОтгрузки
			|{ВЫБРАТЬ
	        |	Организация.*,
	        |	ДоговорКонтрагента.*,
	        |	Контрагент.*}
	        |ИЗ
	        |	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	        |		ПО ВзаиморасчетыСКонтрагентами.Регистратор = РеализацияТоваровУслуг.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаРеализации.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗаписейРегистров КАК КорректировкаЗаписейРегистров
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаЗаписейРегистров.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаДолга КАК КорректировкаДолга
			|		ПО ВзаиморасчетыСКонтрагентами.Регистратор = КорректировкаДолга.Ссылка
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблКонтр КАК ТаблКонтр
	        |		ПО ВзаиморасчетыСКонтрагентами.Организация = ТаблКонтр.Организация
	        |			И ВзаиморасчетыСКонтрагентами.Контрагент = ТаблКонтр.Контрагент
	        |			И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента = ТаблКонтр.ДоговорКонтрагента
	        |ГДЕ
	        |	ВзаиморасчетыСКонтрагентами.Период <= &Дата2
	        |	И ВзаиморасчетыСКонтрагентами.Активность
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВзаиморасчетыСКонтрагентами.Организация,
	        |	ВзаиморасчетыСКонтрагентами.Контрагент,
	        |	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	        |	ВЫБОР
	        |		КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаДокумента
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
	        |	КОНЕЦ,
	        |	ВЫБОР
	        |		КОГДА Не ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения в (&ПустойДокумент)
	        |			ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДокументДвижения
	        |		ИНАЧЕ ВзаиморасчетыСКонтрагентами.Регистратор
	        |	КОНЕЦ,
			|ВЫБОР
			|	КОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|		ТОГДА ВзаиморасчетыСКонтрагентами.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
			|		ТОГДА РеализацияТоваровУслуг.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
			|		ТОГДА КорректировкаРеализации.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаЗаписейРегистров
			|		ТОГДА КорректировкаЗаписейРегистров.АП_ДатаОплаты
			|	КОГДА ВзаиморасчетыСКонтрагентами.Регистратор ССЫЛКА Документ.КорректировкаДолга
			|		ТОГДА КорректировкаДолга.АП_ДатаОплаты
			|	ИНАЧЕ ВзаиморасчетыСКонтрагентами.Период
			|КОНЕЦ,
	        | ВзаиморасчетыСКонтрагентами.АП_ПроцентОплаты
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Организация,
	        |	Контрагент,
	        |	ДоговорКонтрагента,
			|	Дата,
	        |	ДатаОплаты,
	        |	Регистратор";
	

КонецФункции

Функция ПолучитьТекстЗапросИтоговый()
	возврат ПолучитьТекстЗапросаНастройки(2);
	//возврат "ВЫБРАТЬ
	//		|	ВзаиморасчетыСКонтрагентами.Контрагент,
	//		|	ВзаиморасчетыСКонтрагентами.Организация,
	//		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	//		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	//		|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
	//		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаОплаты,
	//		|	0 КАК ДнейПросрочено,
	//		|	ВзаиморасчетыСКонтрагентами.Регистратор.Дата КАК Дата,
	//		|	0 КАК НачОст,
	//		|	0 КАК Приход,
	//		|	0 КАК Расход,
	//		|	0 КАК КонОст,
	//		|	0 КАК Погашено,
	//		|	0 КАК Просрочено
	//		|ПОМЕСТИТЬ ТаблИтого
	//		|ИЗ
	//		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	//		|ГДЕ
	//		|	1 = 0
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	Контрагенты.Ссылка КАК Контрагент,
	//		|	ТаблИтого.Организация,
	//		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	//		|	ТаблИтого.ДатаОплаты,
	//		|	ТаблИтого.ДнейПросрочено,
	//		|	ТаблИтого.НачОст,
	//		|	ТаблИтого.Приход,
	//		|	ТаблИтого.Расход,
	//		|	ТаблИтого.КонОст,
	//		|	ТаблИтого.Погашено,
	//		|	ТаблИтого.Просрочено,
	//		|	ТаблИтого.Организация.Представление,
	//		|	Контрагенты.Ссылка.Представление КАК КонтрагентПредставление,
	//		|	ДоговорыКонтрагентов.Ссылка.Представление КАК ДоговорКонтрагентаПредставление,
	//		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов,
	//		//|	Контрагенты.КаналТовародвижения,
	//		//|	Контрагенты.ЦеноваяГруппаКонтрагента,
	//		//|	Контрагенты.Проект,
	//		|	Контрагенты.ОсновнойМенеджерПокупателя КАК МенеджерПокупателя,
	//		|	ТаблИтого.Регистратор
	//		|{ВЫБРАТЬ
	//		|	Организация,
	//		|	ДоговорКонтрагента,
	//		|	ДатаОплаты,
	//		|	ДнейПросрочено,
	//		|	НачОст,
	//		|	Приход,
	//		|	Расход,
	//		|	КонОст,
	//		|	Погашено,
	//		|	Просрочено,
	//		|	Контрагент.*,
	//		|	ВалютаВзаиморасчетов,
	//		//|	КаналТовародвижения,
	//		//|	ЦеноваяГруппаКонтрагента,
	//		//|	Проект,
	//		|	МенеджерПокупателя,
	//		|	Регистратор}
	//		|ИЗ
	//		|	ТаблИтого КАК ТаблИтого
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	//		|		ПО ТаблИтого.Контрагент = Контрагенты.Ссылка
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//		|		ПО ТаблИтого.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	//		|{ГДЕ
	//		|	ТаблИтого.Организация.*,
	//		|	ТаблИтого.ДоговорКонтрагента.*,
	//		|	Контрагенты.Ссылка.* КАК Контрагент,
	//		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов.*,
	//		//|	Контрагенты.КаналТовародвижения.*,
	//		//|	Контрагенты.ЦеноваяГруппаКонтрагента.*,
	//		//|	Контрагенты.Проект.*,
	//		|	Контрагенты.ОсновнойМенеджерПокупателя.* КАК МенеджерПокупателя}
	//		|{УПОРЯДОЧИТЬ ПО
	//		|	Контрагент.*,
	//		|	Организация.*,
	//		|	ДоговорКонтрагента.*,
	//		|	ВалютаВзаиморасчетов.*,
	//		//|	КаналТовародвижения.*,
	//		//|	ЦеноваяГруппаКонтрагента.*,
	//		//|	Проект.*,
	//		|	МенеджерПокупателя.*,
	//		|	Регистратор.*}
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|УНИЧТОЖИТЬ ТаблИтого";
	//
	//возврат "ВЫБРАТЬ
	//		|	ВзаиморасчетыСКонтрагентами.Контрагент,
	//		|	ВзаиморасчетыСКонтрагентами.Организация,
	//		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента,
	//		|	ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	//		|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Дата,
	//		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаОплаты,
	//		|	0 КАК ДнейПросрочено,
	//		|	ВзаиморасчетыСКонтрагентами.Регистратор,
	//		|	0 КАК НачОст,
	//		|	0 КАК Приход,
	//		|	0 КАК Расход,
	//		|	0 КАК КонОст,
	//		|	0 КАК Погашено,
	//		|	0 КАК Просрочено
	//		|ПОМЕСТИТЬ ТаблИтого
	//		|ИЗ
	//		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	//		|ГДЕ
	//		|	1 = 0
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	Контрагенты.Ссылка КАК Контрагент,
	//		|	ТаблИтого.Организация,
	//		|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	//		|	ТаблИтого.Дата КАК Дата,
	//		|	ТаблИтого.ДатаОплаты,
	//		|	ТаблИтого.ДнейПросрочено,
	//		|	ТаблИтого.Регистратор КАК Регистратор,
	//		|	ТаблИтого.НачОст,
	//		|	ТаблИтого.Приход,
	//		|	ТаблИтого.Расход,
	//		|	ТаблИтого.КонОст,
	//		|	ТаблИтого.Погашено,
	//		|	ТаблИтого.Просрочено,
	//		|	ТаблИтого.Организация.Представление,
	//		|	Контрагенты.Ссылка.Представление КАК КонтрагентПредставление,
	//		|	ДоговорыКонтрагентов.Ссылка.Представление,
	//		|	ПРЕДСТАВЛЕНИЕ(ТаблИтого.Регистратор) КАК РегистраторПредставление,
	//		//|	Контрагенты.ЦеноваяГруппаКонтрагента,
	//		//|	Контрагенты.КаналТовародвижения,
	//		//|	Контрагенты.Проект,
	//		|	Контрагенты.ОсновнойМенеджерПокупателя,
	//		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	//		|{ВЫБРАТЬ
	//		|	Контрагент,
	//		|	Организация,
	//		|	ДоговорКонтрагента,
	//		|	Дата,
	//		|	ДатаОплаты,
	//		|	ДнейПросрочено,
	//		|	Регистратор.*,
	//		|	НачОст,
	//		|	Приход,
	//		|	Расход,
	//		|	КонОст,
	//		|	Погашено,
	//		|	Просрочено,
	//		//|	ЦеноваяГруппаКонтрагента,
	//		//|	КаналТовародвижения,
	//		//|	Проект,
	//		|	ОсновнойМенеджерПокупателя,
	//		|	ВалютаВзаиморасчетов,
	//		|	ДоговорКонтрагента.*}
	//		|ИЗ
	//		|	ТаблИтого КАК ТаблИтого
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	//		|		ПО ТаблИтого.Контрагент = Контрагенты.Ссылка
	//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//		|		ПО ТаблИтого.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	//		|{ГДЕ
	//		|	ТаблИтого.Организация.*,
	//		|	ТаблИтого.ДоговорКонтрагента.*,
	//		|	Контрагенты.Ссылка.* КАК Контрагент,
	//		//|	Контрагенты.ЦеноваяГруппаКонтрагента.*,
	//		//|	Контрагенты.КаналТовародвижения.*,
	//		//|	Контрагенты.Проект.*,
	//		|	Контрагенты.ОсновнойМенеджерПокупателя.*,
	//		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов.*,
	//		|	ДоговорыКонтрагентов.Ссылка.* КАК ДоговорКонтрагента}
	//		|
	//		|УПОРЯДОЧИТЬ ПО
	//		|	Дата,
	//		|	Регистратор
	//		|{УПОРЯДОЧИТЬ ПО
	//		|	Контрагент.*,
	//		|	Организация.*,
	//		|	ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	//		|	Дата.*,
	//		|	Регистратор.*}";
			
КонецФункции


Функция ПолучитьРасчитаннуюДебиторку()
	
	ОписЧисла = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2));
	ОписДата  = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТаблИтого = Новый ТаблицаЗначений;
	ТаблИтого.Колонки.Добавить("Дата",ОписДата);
	ТаблИтого.Колонки.Добавить("ДатаОплаты",ОписДата);
	ТаблИтого.Колонки.Добавить("ДнейПросрочено",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	
	ТаблИтого.Колонки.Добавить("Отсрочка",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0)));
	ТаблИтого.Колонки.Добавить("ПроцентОтгрузки",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	
	ТаблИтого.Колонки.Добавить("Организация",Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблИтого.Колонки.Добавить("Контрагент",Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблИтого.Колонки.Добавить("ДоговорКонтрагента",Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблИтого.Колонки.Добавить("Валюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблИтого.Колонки.Добавить("Регистратор",Документы.ТипВсеСсылки());

	
	ТаблИтого.Колонки.Добавить("НачОст",ОписЧисла);
	ТаблИтого.Колонки.Добавить("Приход",ОписЧисла);
	ТаблИтого.Колонки.Добавить("Расход",ОписЧисла);
	ТаблИтого.Колонки.Добавить("КонОст",ОписЧисла);
	ТаблИтого.Колонки.Добавить("Погашено",ОписЧисла);
	ТаблИтого.Колонки.Добавить("Просрочено",ОписЧисла);
	
	Дата1 = НачалоДня(УниверсальныйОтчет.ДатаНач);
	Дата2 = КонецДня(УниверсальныйОтчет.ДатаКон);
	
	ТекВремя = ТекущаяДата();
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	//начало изменений Ожиганов 25.04.2015 изменение принципа расчета ПДЗ, погашение с учетом месяца движений и даты оплаты 
	//ПостроительЗапроса.Текст = ПолучитьТекстЗапроса();
	ПостроительЗапроса.Текст = ПРГ_ДопФункцииКлиентСервер.ПолучитьТекстЗапросаДляРасчетаПДЗ();
	//
	
	ПостроительЗапроса.Параметры.Вставить("Дата1",Дата1);
	ПостроительЗапроса.Параметры.Вставить("Дата2",Дата2);
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	//ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",Неопределено);
	МассивДоков = Новый Массив;
	МассивДоков .Добавить(Неопределено);
	МассивДоков .Добавить(Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	МассивДоков .Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	МассивДоков .Добавить(Документы.ВводНачальныхОстатковПоВзаиморасчетам.ПустаяСсылка());
	
	ПостроительЗапроса.Параметры.Вставить("ПустойДокумент",МассивДоков );
	
	
	МассивВидовДоговоров = Новый Массив;
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	//МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ПостроительЗапроса.Параметры.Вставить("ВидДоговора",МассивВидовДоговоров);
	
	ДопустимыеОтборы 	=  Новый Массив;
	ДопустимыеОтборы.Добавить("договорконтрагента");
	ДопустимыеОтборы.Добавить("контрагент");
	ДопустимыеОтборы.Добавить("организация");
	ДопустимыеОтборы.Добавить("менеджерпокупателя");
	//ДопустимыеОтборы.Добавить("ценоваягруппаконтрагента");
	//ДопустимыеОтборы.Добавить("каналтовародвижения");
	ДопустимыеОтборы.Добавить("валютавзаиморасчетов");
	//ДопустимыеОтборы.Добавить("проект");
	
	
	
	ТекОрганизация 		   = Неопределено;
	ТекКонтрагент  		   = Неопределено;
	ТекДоговорКонтрагента  = Неопределено;
	ТекВалюта			   = Неопределено;
	
	Для каждого ТекОтбор ИЗ УниверсальныйОтчет.ПостроительОтчета.Отбор Цикл
		ПутьКДанным = 	НРег(ТекОтбор.ПутьКДанным);
		Если ПустаяСтрока(ПутьКДанным) Тогда
			продолжить;
		КонецЕсли;	
		Нашли = Ложь;
		Для Каждого ТекЭл Из ДопустимыеОтборы Цикл
			Если СтрДлина(ТекЭл) = СтрДлина(ПутьКДанным) и Лев(ПутьКДанным,СтрДлина(ТекЭл)) = ТекЭл Тогда
				Нашли = Истина;
				прервать;
			ИначеЕсли Лев(ПутьКДанным,СтрДлина(ТекЭл)+1) = ТекЭл+"."  Тогда
				Нашли = Истина;
				прервать;
			КонецЕсли;	
		КонеЦцикла;	
		Если Не Нашли Тогда продолжить; КонецЕсли;
		Если ТекОтбор.Использование Тогда
			НашОтбор = ПостроительЗапроса.Отбор.Добавить(ТекОтбор.ПутьКданным,ТекОтбор.Имя,ТекОтбор.Представление);
			НашОтбор.Использование  = ТекОтбор.Использование;
			НашОтбор.ВидСравнения   = ТекОтбор.ВидСравнения;
			Если ТипЗнч(ТекОтбор.Значение)  = Тип("СписокЗначений") Тогда
				Список = Новый СписокЗначений;
				Список.ЗагрузитьЗначения(ТекОтбор.Значение.ВыгрузитьЗначения());
				НашОтбор.Значение       = Список;
			Иначе
				НашОтбор.Значение       = ТекОтбор.Значение;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
	
//	ПостроительЗапроса.Отбор.Добавить();
	
	ПостроительЗапроса.Выполнить();	
	РезЗапроса 			   = ПостроительЗапроса.Результат;
	ДатаДляРасчетаПроср    = НачалоДня(Дата2);
	Если ВыводитьВремя Тогда
		Сообщить("Получен результат" + (ТекущаяДата()-ТекВремя));
	КонецЕсли;	
	
	ВыборкаДетальная 	   = РезЗапроса.Выбрать();
	Если ВыводитьВремя Тогда
		Сообщить("Получена Выборка" + (ТекущаяДата()-ТекВремя));
	КонецЕсли;	
	
	ТекСтрока =  Неопределено;
	Пока ВыборкаДетальная.Следующий() Цикл
		  ОбработкаПрерыванияПользователя();
		  ИзмГруппировка = Ложь;
		  Если ТекОрганизация <>ВыборкаДетальная.Организация Тогда
			  ТекОрганизация  = ВыборкаДетальная.Организация;
			  ИзмГруппировка = Истина;
		  КонецЕсли;	
		  
		  Если ТекКонтрагент <>ВыборкаДетальная.Контрагент Тогда
			  ТекКонтрагент  = ВыборкаДетальная.Контрагент;
			  ИзмГруппировка = Истина;
		  КонецЕсли;	
		  
		  Если ТекДоговорКонтрагента <> ВыборкаДетальная.ДоговорКонтрагента Тогда
			  ТекДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
			  ИзмГруппировка 		 = Истина;
		  КонецЕсли;	
		  
		  //Если ТекВалюта <> ВыборкаДетальная.Валюта Тогда
		  //	ТекВалюта       = ВыборкаДетальная.Валюта;
		  //	ИзмГруппировка = Истина;
		  //КонецЕсли;	
		  
		  Если ИзмГруппировка Тогда
			  ИтогКонОст 	   	   = ВыборкаДетальная.ПриходКон - ВыборкаДетальная.РасходКон;
			  
			  ИтогоРасход  	   = ВыборкаДетальная.РасходКон;
			  ИтогоПриход  	   = ВыборкаДетальная.ПриходКон;
			  
			  ИтогоРасходНач   = ВыборкаДетальная.РасходНач;
			  ИтогоПриходНач   = ВыборкаДетальная.ПриходНач;
			  
			  ИтогНачОст 		   = ИтогоПриходНач - ИтогоРасходНач;
		  
			  ЗнакКонОст  	   = ?(ИтогКонОст > 0,1,-1);
			  ЗнакНачОст  	   = ?(ИтогНачОст > 0,1,-1);
			  ИзмГруппировка 	= Ложь;
			  Если Не ТаблИтоговаяРазвернуто Тогда
				   ТекСтрока = ТаблИтого.Добавить();
			  КонецЕсли;
		  КонецЕсли; 
		  
		  КонОст = 0;
		  НачОст = 0;
		  Приход = 0;
		  Расход = 0;
		  
		  //начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
		  //покажем приход и расход по корректировке долга
		  ПриходДельта = 0;
		  РасходДельта = 0;
		  //конец изменений 
			
		  Если ЗнакКонОст = 1 Тогда
			   КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
			   ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
		  Иначе // знак -1
			   КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
			   ИтогоПриход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
		  КонецЕсли;	  
		   
		  Если ЗнакНачОст = 1 Тогда
		   		НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
		   		ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
		  Иначе	
		   		НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
		   		ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
		  КонецЕсли;
		   
		  Если ВыборкаДетальная.Дата < Дата1 Тогда
			   Приход = 0;
			   Расход = 0;
		  ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
			   Приход = ВыборкаДетальная.Приход;
			   Расход = ВыборкаДетальная.Расход;
			   //начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  			   
			   ПриходДельта = ВыборкаДетальная.ПриходДельта;
		  	   РасходДельта = ВыборкаДетальная.РасходДельта;
			   //конец изменений 
			   НачОст = 0;
		   КонецЕсли;
		   
		  //начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
		  //Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
		  Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) и (ПриходДельта=0) и (РасходДельта=0) Тогда
		  //конец изменений 
			   продолжить;
		  КонецЕсли;  
		   
		  Погашено   = 0;
		  ДатаОплаты  = '00010101';
		  Если Приход > 0 или НачОст > 0 или КонОст > 0 Тогда
			  ДатаОплаты   =  ВыборкаДетальная.ДатаОплаты;
			  Если ДатаОплаты  = '00010101' Тогда
				  ДатаОплаты = ВыборкаДетальная.Дата;
			  КонецЕсли;	  
			  Погашено = НачОст+Приход-КонОст;
		  КонецЕсли; 
		  
		  ДнейПросрочено = 0;
		  Если ДатаОплаты<>'00010101' и ДатаОплаты < ДатаДляРасчетаПроср и КонОст >0 Тогда
			  ДнейПросрочено = (ДатаДляРасчетаПроср-НачалоДня(ДатаОплаты))/(3600*24);
		  КонецЕсли; 
		  
		  Отсрочка 		 = 0;
		  Если  ДатаОплаты <> '00010101' и (НачОст >0 или Приход>0 или КонОст > 0) Тогда
			   Отсрочка    = (НачалоДня(ДатаОплаты) - НачалоДня(ВыборкаДетальная.Дата))/(3600*24);
		  КонецЕсли;	  
		  
		  //начало изменений Ожиганов 29.06.2015 исключение из дебиторки взаимозачетов по одному и тому же договору  
		  //остатка по взаимоазачетам нет показываем сам документ с приходом и расходом
		  Приход = Приход + ПриходДельта;
		  Расход = Расход + РасходДельта;
		  //конец изменений 
		  
		  
		  Если ТаблИтоговаяРазвернуто Тогда
		  		НоваяСтрока 	   				  = ТаблИтого.Добавить();
				НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
				НоваяСтрока.ДатаОплаты		  	  = ДатаОплаты; //?(Приход>0 или НачОст>0,ВыборкаДетальная.ДатаОплаты,'00010101');
				НоваяСтрока.Регистратор 		  = ВыборкаДетальная.Регистратор;
				НоваяСтрока.ДнейПросрочено	  	  = ДнейПросрочено;
				
		  Иначе
				НоваяСтрока 					  = ТекСтрока;
		  КонецЕсли;
		  
		  НоваяСтрока.Организация		  = ВыборкаДетальная.Организация;
		  НоваяСтрока.Контрагент		  = ВыборкаДетальная.Контрагент;
		  НоваяСтрока.ДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
		  
		  Если ДнейПросрочено > 0 Тогда
			  НоваяСтрока.Просрочено			  = НоваяСтрока.Просрочено + КонОст;
		  КонецЕсли;	  
		  
		  НоваяСтрока.ПроцентОтгрузки 	  = ВыборкаДетальная.ПроцентОтгрузки;
		  Если НоваяСтрока.ПроцентОтгрузки 	<= 0 и (Приход > 0 или НачОст >0) Тогда
			  НоваяСтрока.ПроцентОтгрузки   = 100;
		  КонецЕсли;	
		  НоваяСтрока.Отсрочка			  = Отсрочка;
		  
		  НоваяСтрока.НачОст			  = НоваяСтрока.НачОст + НачОст;
		  НоваяСтрока.Приход			  = НоваяСтрока.Приход + Приход;
		  НоваяСтрока.Расход			  = НоваяСтрока.Расход + Расход;
		  НоваяСтрока.КонОст			  = НоваяСтрока.КонОст + КонОст;
		  НоваяСтрока.Погашено 			  = НоваяСтрока.Погашено + Погашено;
		  
	  КонецЦикла; 
	 Если ВыводитьВремя Тогда
	 	  Сообщить("Обсчет дебиторки "+(ТекущаяДата()-ТекВремя));
	 КонецЕсли;	
	 возврат ТаблИтого;
КонецФункции	

Функция ОпределитьСвернутоРазвернуто(ПострОтчета)
	  
	  Результат = Ложь;
	  МассПолей = Новый Массив;
	  // влюбом случае рассчитывать по детальным записям
	  МассПолей.Добавить("Регистратор");
	  Для Каждого ТекЭлем Из МассПолей Цикл
		  Если ПострОтчета.ВыбранныеПоля.Найти(ТекЭлем) <> Неопределено Тогда
			    возврат Истина;
		  КонецЕслИ;
		  Если ПострОтчета.ИзмеренияСтроки.Найти(ТекЭлем) <> Неопределено Тогда
			    возврат Истина;
		  КонецЕслИ;
	  КонецЦикла;	  
	  
	  //обязателен признак детальные записи
	  Если Не УниверсальныйОтчет.ВыводитьДетальныеЗаписи  Тогда
		  возврат Ложь;
	  КонецЕсли;
	  
	  МассПолей.Очистить();
	  МассПолей.Добавить("Дата");
	  МассПолей.Добавить("ДатаОплаты");
	  МассПолей.Добавить("ДнейПросрочено");
	  
	  Для Каждого ТекЭлем Из МассПолей Цикл
		  Если ПострОтчета.ВыбранныеПоля.Найти(ТекЭлем) <> Неопределено Тогда
			    возврат Истина;
		  КонецЕслИ;
		  Если ПострОтчета.ИзмеренияСтроки.Найти(ТекЭлем) <> Неопределено Тогда
			    возврат Истина;
		  КонецЕслИ;
	  КонецЦикла;	  
	  возврат ложь;
КонецФункции

Процедура ЗаполнитьОформление(Заполняем,Исходная)
	
		 Заполняем.ЦветТекста = Исходная.ЦветТекста;
		 Заполняем.ЦветФона   = Исходная.ЦветФона;
		 Заполняем.ЦветУзора  = Исходная.ЦветУзора;
		 Заполняем.ЦветРамки  = Исходная.ЦветРамки;
		 
		 Заполняем.ГраницаСверху  = Исходная.ГраницаСверху;
		 Заполняем.ГраницаСлева  = Исходная.ГраницаСлева;
		 Заполняем.ГраницаСправа = Исходная.ГраницаСправа;
		 Заполняем.ГраницаСнизу  = Исходная.ГраницаСнизу;
		 
		 Заполняем.Шрифт		  = Исходная.Шрифт;
		 Заполняем.Узор		  	  = Исходная.Узор;
		 Заполняем.ВертикальноеПоложение = ВертикальноеПоложение.Центр; 
		 Заполняем.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить
		 
КонецПроцедуры

Процедура ЗаполнитьПоСтруктуреУслОформление(Заполняем,СтруктУсловнОформления,ПутьКДанным="")
		Если СтруктУсловнОформления <> Неопределено Тогда
			Если ПутьКДанным <> "" Тогда
				НайдЗнч  = СтруктУсловнОформления.Получить(ПутьКДанным); //Неопределено;
				
				//Если СтруктУсловнОформления.Свойство(ПутьКДанным,НайдЗнч) Тогда
				Если НайдЗнч <> Неопределено  Тогда
					Если НайдЗнч.АвтоОтступ.Использование Тогда
						Заполняем.АвтоОтступ = НайдЗнч.АвтоОтступ.Значение;
					КонецЕсли;	
					Если  НайдЗнч.ВертикальноеПоложение.Использование  Тогда
						Заполняем.ВертикальноеПоложение = НайдЗнч.ВертикальноеПоложение.Значение;
					КонецЕсли;	
					Если НайдЗнч.ГоризонтальноеПоложение.Использование Тогда
						Заполняем.ГоризонтальноеПоложение  = НайдЗнч.ГоризонтальноеПоложение.Значение;
					КонецЕсли;	
					Если НайдЗнч.ОриентацияТекста.Использование Тогда
						Заполняем.ОриентацияТекста = НайдЗнч.ОриентацияТекста.Значение;
					КонецЕсли;	
					Если НайдЗнч.Отступ.Использование Тогда
						Заполняем.Отступ = НайдЗнч.Отступ.Значение;
					КонецЕсли;	
					Если НайдЗнч.Текст.Использование Тогда
						Заполняем.Текст = НайдЗнч.Текст.Значение;
					КонецЕсли;	
					Если НайдЗнч.Формат.Использование Тогда
						Заполняем.Формат = НайдЗнч.Формат.Значение;
					КонецЕсли;	
					Если НайдЗнч.ЦветТекста.Использование Тогда
						Заполняем.ЦветТекста = НайдЗнч.ЦветТекста.Значение;
					КонецЕсли;	
					Если НайдЗнч.ЦветФона.Использование Тогда
						Заполняем.ЦветФона = НайдЗнч.ЦветФона.Значение;
					КонецЕсли;	  
					Если НайдЗнч.Шрифт.Использование Тогда
						Заполняем.Шрифт = НайдЗнч.Шрифт.Значение;
					КонецЕсли;		
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьОформлениеСУчетомОформления(Заполняем,Исходная,СтруктУсловнОформления,ПутьКДанным="")
	
		 Заполняем.ЦветТекста = Исходная.ЦветТекста;
		 Заполняем.ЦветФона   = Исходная.ЦветФона;
		 Заполняем.ЦветУзора  = Исходная.ЦветУзора;
		 Заполняем.ЦветРамки  = Исходная.ЦветРамки;
		 
		 Заполняем.ГраницаСверху  = Исходная.ГраницаСверху;
		 Заполняем.ГраницаСлева  = Исходная.ГраницаСлева;
		 Заполняем.ГраницаСправа = Исходная.ГраницаСправа;
		 Заполняем.ГраницаСнизу  = Исходная.ГраницаСнизу;
		 
		 Заполняем.Шрифт		  = Исходная.Шрифт;
		 Заполняем.Узор		  	  = Исходная.Узор;
		 Заполняем.ВертикальноеПоложение = ВертикальноеПоложение.Центр; 
		 Заполняем.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		 
		 ЗаполнитьПоСтруктуреУслОформление(Заполняем,СтруктУсловнОформления,ПутьКДанным);
КонецПроцедуры

Процедура ЗаполнитьОформлениеГруппировки(Заполняем,Исходная1,Исходная2,НомерГруппировки,СтруктУсловнОформления,ПутьКДанным="")
		Если НомерГруппировки = 1 Тогда
		    Исходная = Исходная1;
		Иначе
			Исходная = Исходная2;
		КонецЕсли;
	
		 Заполняем.ЦветТекста = Исходная.ЦветТекста;
		 Заполняем.ЦветФона   = Исходная.ЦветФона;
		 Заполняем.ЦветУзора  = Исходная.ЦветУзора;
		 Заполняем.ЦветРамки  = Исходная.ЦветРамки;
		 
		 Заполняем.ГраницаСверху  = Исходная.ГраницаСверху;
		 Заполняем.ГраницаСлева  = Исходная.ГраницаСлева;
		 Заполняем.ГраницаСправа = Исходная.ГраницаСправа;
		 Заполняем.ГраницаСнизу  = Исходная.ГраницаСнизу;
		 
		 Заполняем.Шрифт		  = Исходная.Шрифт;
		 Заполняем.Узор		  	  = Исходная.Узор;
		 Заполняем.ВертикальноеПоложение = ВертикальноеПоложение.Центр; 
		 Заполняем.РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		 
		 ЗаполнитьПоСтруктуреУслОформление(Заполняем,СтруктУсловнОформления,ПутьКДанным);
КонецПроцедуры

Функция ОпределитьВозможностьРасшировки(Имя,ПостроительИтоговый)
	Поле = ПостроительИтоговый.ДоступныеПоля.Найти(Имя);
	Если Поле <> Неопределено Тогда
		Типы = Поле.типЗначения.Типы();
		Если Типы.Количество() = 1 Тогда
			Если Типы[0] = Тип("Строка") Тогда
				возврат Ложь;
			ИначеЕсли Типы[0] = Тип("Число") Тогда
				возврат Ложь;
			ИначеЕсли Типы[0] = Тип("Дата") Тогда
				возврат Ложь;
			КонецЕслИ;	
		КонецЕсли;	
	КонецЕсли;	
	возврат Истина;
КонецФункции	

Функция ПолучитьИмяИлиПредставление(_Макет,ИмяОбласти,Имя)
	ТекОбласть = _Макет.ПолучитьОбласть(ИмяОбласти);
	Если ТекОбласть = Неопределено Тогда
		 возврат Имя;
	Иначе
		Попытка
			//ТекОбласть.Параметры.Установить(Имя+"Представление",1);
			Знч = ТекОбласть.Параметры[Имя+"Представление"];
			возврат Имя+"Представление";
		исключение	
			возврат Имя;	
		КонецПопытки;		
	КонецЕсли;	
КонецФункции	

Процедура ОформитьМакетИхреньМакет(РезЗапрос,ПостроительИтоговый,ПолучаемыйМакет)
	/// получаем оформленный макет
	
	МакетОформления = ПолучитьМакетОформления(?(УниверсальныйОтчет.ВариантОформления = Неопределено, СтандартноеОформление.Интерфейс, УниверсальныйОтчет.ВариантОформления));
	
	ОбластьШапкаТаблицы = МакетОформления.Области.Найти("ШапкаТаблицы");
		
	Если ТипЗнч(ОбластьШапкаТаблицы) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ОбластьШапкаТаблицы.Шрифт = Новый Шрифт(ОбластьШапкаТаблицы.Шрифт,, 8);
		
	КонецЕсли;
	
	ОбластьЗаголовок = МакетОформления.Области.Найти("Заголовок");
	
	Если ТипЗнч(ОбластьЗаголовок) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ОбластьЗаголовок.Шрифт = Новый Шрифт(ОбластьШапкаТаблицы.Шрифт,, 8, Ложь, Ложь, Ложь);
		
	КонецЕсли;
	
	//МакетОформления.Показать();
	
	ТабМакет = Новый ТабличныйДокумент;
	
	//1 определяем количество групировок
	КолИзмСтрок  =  ПостроительИтоговый.ИзмеренияСтроки.Количество();
	ПостроительИтоговый.Макет = Неопределено;
  	МакетДляВычисленийПараметров = ПостроительИтоговый.Макет;
	//МакетДляВычисленийПараметров.Показать();
	
	//СоотвествиеПолей = Новый Соответствие;
	//Для Каждого ТекИзмер Из ПостроительИтоговый.ИзмеренияСтроки Цикл
	//		//ТекИзмер.
	//	
	//КонецЦикла;	
	
	
	//ПостроительИтоговый.Макет.Показать();
	
	
	
	
	СтруктУсловнОформления = Новый Соответствие;
	Для Каждого ТекЭлемент Из ПостроительИтоговый.УсловноеОформление Цикл
		Если ТекЭлемент.Использование Тогда
			Для Каждого ТекОбласть  Из ТекЭлемент.Область Цикл
				СтруктУсловнОформления.Вставить(ТекОбласть.ПутьКданным,ТекЭлемент.Оформление);
			КонецЦикла;	
		КонецЕсли;	
	КонеЦцикла;	
	
	
	НачСтрока  = 4;
	Начинаем   = НачСтрока;
	НачСтолбец = 2;
	БазоваяШирина = 22.75;
	БазаоваШиринаПоказ 	  = 15.00;
	БазоваяШиринаДеталей  = 19.00;
	
	ШиринаДоСтолбца = 2;
	
	//1. Сделаем ширину до
	Для к = 1 По НачСтолбец Цикл
		ТекОбласть = ТабМакет.Область(,к,,к);
		ТекОбласть.ШиринаКолонки = ШиринаДоСтолбца; 
	КонецЦикла;	
	//ТабМакет.Область(,НачСтолбец,,НачСтолбец).ШиринаКолонки = 34.63;
	
	//2. Рисуем шапку
	//определяем реквизиты до и после группировок и совмещенные
	ТаблРеквГруппДо = Новый ТаблицаЗначений;
	ТаблРеквГруппДо.Колонки.Добавить("Имя");
	ТаблРеквГруппДо.Колонки.Добавить("ИмяГруппировки");
	ТаблРеквГруппДо.Колонки.Добавить("Поле");
	ТаблРеквГруппДо.Колонки.Добавить("Параметр");
	ТаблРеквГруппДо.Колонки.Добавить("ПолеГруппировки");
	
	ТаблРеквГруппПосле  = ТаблРеквГруппДо.Скопировать();
	ТаблРеквГруппВместе = ТаблРеквГруппДо.Скопировать();
	ТаблРеквГруппВместе.Колонки.Добавить("Положение");
	
	ТаблДетЗаписей      = Новый ТаблицаЗначений;
	ТаблДетЗаписей.Колонки.Добавить("Имя");
	ТаблДетЗаписей.Колонки.Добавить("Поле");
	ТаблДетЗаписей.Колонки.Добавить("Параметр"); 
	
	СоответсвиеПарИзм = Новый Соответствие;
	Для Каждого ТекИзм Из ПостроительИтоговый.ИзмеренияСтроки Цикл
		СоответсвиеПарИзм.Вставить(ТекИзм.Имя,ПолучитьИмяИлиПредставление(МакетДляВычисленийПараметров,ТекИзм.Имя,ТекИзм.Имя));
	КонецЦикла;	
		
	
	Если УниверсальныйОтчет.мРазмещениеПоложениеВыбранныхПолей <> Неопределено Тогда
		Для Каждого ТекПолеДет  Из УниверсальныйОтчет.мРазмещениеПоложениеВыбранныхПолей Цикл
			_ТекПоле  = ПостроительИтоговый.ВыбранныеПоля.Найти(ТекПолеДет.Ключ);
			Если _ТекПоле = Неопределено Тогда
				продолжить;
			КонецЕсли;	
			
			ПутьКданным = _ТекПоле.ПутьКДанным;
			Если ПустаяСтрока(ПутьКданным) Тогда
				 //пока необрабатываем
				 продолжить;
			КонецЕсли;	
			 
			ПозТочки = Найти(ПутьКданным,".");
			Если ПозТочки > 0 Тогда // вполне возможно реквизит группировки
				 ВозмИмяГруппировки = Лев(ПутьКданным,ПозТочки-1);
				 ПолеГруппировки 	= ПостроительИтоговый.ИзмеренияСтроки.Найти(ВозмИмяГруппировки);
				 Если ПолеГруппировки <> Неопределено Тогда
					 Если ТекПолеДет.Значение.Размещение = ТипРазмещенияРеквизитовИзмерений.Вместе 
						 или ТекПолеДет.Значение.Размещение = ТипРазмещенияРеквизитовИзмерений.ВместеСИзмерениями Тогда
						  //либо вместо группировки
						  НС  	  			 = ТаблРеквГруппВместе.Добавить();
						  НС.Имя  			 = _ТекПоле.Имя;
						  НС.Поле 			 = _ТекПоле;
						  НС.ИмяГруппировки  = ВозмИмяГруппировки;
						  НС.ПолеГруппировки = ПолеГруппировки;
						  НС.Положение	     = ТекПолеДет.Значение.Положение;
						  НС.Параметр   	 = ПолучитьИмяИлиПредставление(МакетДляВычисленийПараметров,ПолеГруппировки.Имя,_ТекПоле.Имя);
						  
					 Иначе
						 // Если 
						 Если ТекПолеДет.Значение.Положение =  "После группировки" Тогда
							  НС 	  			 = ТаблРеквГруппПосле.Добавить();
						 Иначе
							  НС 	  			 = ТаблРеквГруппДо.Добавить();
						 КонецЕсли; 
							  НС.Имя  			 = _ТекПоле.Имя;
							  НС.Поле 			 = _ТекПоле;
							  НС.ИмяГруппировки  = ВозмИмяГруппировки;
							  НС.ПолеГруппировки = ПолеГруппировки;
							  НС.Параметр   	 = ПолучитьИмяИлиПредставление(МакетДляВычисленийПараметров,ПолеГруппировки.Имя,_ТекПоле.Имя);
					 КонецЕсли;	 
					 
				 Иначе //детальная запись
					 Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи Тогда
						 Поле = ПостроительИтоговый.ВыбранныеПоля.Найти(_ТекПоле.Имя);
						 Если Поле <> Неопределено Тогда
						 	 НС 	 = ТаблДетЗаписей.Добавить();
							 НС.Имя  = Поле.Имя;
							 НС.Поле = Поле;
						 КонецЕсли;	
					 КонецЕсли;	 
				 КонецЕсли;	 
				//dgjkyt djpvj;yj 
			Иначе //только детальная запись
					 Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи Тогда
						 Поле = ПостроительИтоговый.ВыбранныеПоля.Найти(_ТекПоле.Имя);
						 Если Поле <> Неопределено Тогда
						 	 НС 	 = ТаблДетЗаписей.Добавить();
							 НС.Имя  = Поле.Имя;
							 НС.Поле = Поле;
							 НС.Параметр   		= ПолучитьИмяИлиПредставление(МакетДляВычисленийПараметров,"Детали",Поле.Имя);
						 КонецЕсли;	
					 КонецЕсли;	 
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	

	//проверим детальные записи
	МаксСтрокШапки =1;
	Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи Тогда
		Если ТаблДетЗаписей.Количество()>0 Тогда
			МаксСтрокШапки = Макс(МаксСтрокШапки,1);
		КонецЕсли;	
	КонецЕсли;	
	//проверим показатели //пока делаем показатели вложен 2;
	//уровень
	УпровеньПоказ = 1;
	Для Каждого _ТекЗначение1 ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
		  ТекСтроки = _ТекЗначение1.Строки;
		  Для каждого _ТекЗначение2 Из _ТекЗначение1.Строки Цикл
			  МаксСтрокШапки = Макс(МаксСтрокШапки,2);
			  УпровеньПоказ = 2;
			  прервать;
		  КонецЦикла; 
	КонецЦикла;	
	
	Если ПостроительИтоговый.ИзмеренияСтроки.Количество() > 0 Тогда
		МаксСтрокШапки = Макс(МаксСтрокШапки,ПостроительИтоговый.ИзмеренияСтроки.Количество()
		+?(УниверсальныйОтчет.ВыводитьДетальныеЗаписи,1,0));
	КонецЕсли;	
	
	ТекКолонка = НачСтолбец;
	//2.1 измерения пройдемся
	//2.1.2 Выводим реквизиты группировок у которых положение пееред группировкой
	//
	ТекКолДеталей = 0;
	МакетШапкиТаблицы = МакетОформления.ПолучитьОбласть("ШапкаТаблицы").Область(1,,1);
	КолВоГруппировок = ПостроительИтоговый.ИзмеренияСтроки.Количество();
	Если КолВоГруппировок > 0 и ТаблРеквГруппДо.Количество() > 0 Тогда
		БылоЧтоТо = Ложь;
		Для каждого ТекСтрока Из ТаблРеквГруппДо Цикл
			Увеличиваем = 0;
			Для к = 1 По ПостроительИтоговый.ИзмеренияСтроки.Количество() Цикл
				 ТекПоле 	= ПостроительИтоговый.ИзмеренияСтроки[к-1];
				 ТекОбласть = ТабМакет.Область(Начинаем+к,ТекКолонка,Начинаем+к,ТекКолонка);
				 Если ТекПоле.Имя = ТекСтрока.ИмяГруппировки Тогда
					  ТекОбласть.Текст = ТекСтрока.Поле.Представление;
					  Увеличиваем = 1;
				 КонецЕсли; 
				 ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
				//детали 
			КонецЦикла;	
			Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи и ТаблДетЗаписей.Количество()>0 и Увеличиваем>0 Тогда
				ТекОбласть		  = ТабМакет.Область(Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+1,ТекКолонка,Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+1,ТекКолонка);
				Если ТекКолДеталей < ТаблДетЗаписей.Количество() Тогда
					ТекОбласть.Текст  =	ТаблДетЗаписей[ТекКолДеталей].Поле.Представление;
					ТекКолДеталей 	  = ТекКолДеталей+1;
				КонецЕсли;	
				ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
			КонецЕсли;	
			ТекОбласть		  = ТабМакет.Область(,ТекКолонка,,ТекКолонка);			
			ТекОбласть.ШиринаКолонки = БазоваяШирина;
			ТекКолонка = ТекКолонка + Увеличиваем; 
			//фиксируем колонки 
			 //22,75
		КонецЦикла;	
	КонецЕсли;	
	
	//2.1.3 Выводим сами измерениия
	Для к = 1 По ПостроительИтоговый.ИзмеренияСтроки.Количество() Цикл
		 ТекПоле = ПостроительИтоговый.ИзмеренияСтроки[к-1];
		 
		 //начинаем заполнение
		 НайдРекв = ТаблРеквГруппВместе.НайтиСтроки(Новый Структура("ИмяГруппировки",ТекПоле.Имя));
		 ГрупировкаБудет = Истина;
		 //Для м = 0 По НайдРекв.Количество() - 1 Цикл
		 //	Если НайдРекв.Положение = "Вместо группировки" Тогда
		 //   	 ГрупировкаБудет = Ложь;
		 //	КонецЕсли; 
		 //КонецЦикла; 
		 
		 //то что перед группировкой
		 Зап = "";
		 ЗаголовокГруппировки = "";
		 Для м = 0 По НайдРекв.Количество() - 1 Цикл
			 Если НайдРекв[м].Положение = "Перед группировкой" Тогда
				  ЗаголовокГруппировки  = ЗаголовокГруппировки +Зап + НайдРекв[м].Поле.Представление;
				  Зап = ", ";
			 КонецЕсли; 
		 КонецЦикла; 
		 
		 Для м = 0 По НайдРекв.Количество() - 1 Цикл
			 Если НайдРекв[м].Положение = "Вместо группировки" Тогда
				  ЗаголовокГруппировки  = ЗаголовокГруппировки +Зап +  НайдРекв[м].Поле.Представление;
				  Зап = ", ";
				  ГрупировкаБудет = Ложь;
			 КонецЕсли; 
		 КонецЦикла; 
		 
		 Если ГрупировкаБудет Тогда
		      ЗаголовокГруппировки  = ЗаголовокГруппировки +Зап + ТекПоле.Представление;
			  Зап = ", ";
		 КонецЕсли;
		  
		 Для м = 0 По НайдРекв.Количество() - 1 Цикл
			 Если НайдРекв[м].Положение = "После группировки" Тогда
				  ЗаголовокГруппировки  = ЗаголовокГруппировки +Зап + НайдРекв[м].Поле.Представление;
				  Зап = ", ";
			 КонецЕсли; 
		 КонецЦикла; 
		 
		 Если к =  ПостроительИтоговый.ИзмеренияСтроки.Количество() и ТаблДетЗаписей.Количество() = 0 Тогда
			 ТекОбласть = ТабМакет.Область(Начинаем+к,ТекКолонка,Начинаем+МаксСтрокШапки,ТекКолонка);
			 ТекОбласть.Объединить();
		 Иначе
			 ТекОбласть = ТабМакет.Область(Начинаем+к,ТекКолонка,Начинаем+к,ТекКолонка);
		 КонецЕсли; 
		 
		 ТекОбласть.Текст 	= ЗаголовокГруппировки;
		 ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
		 
		 ТекОбласть		  = ТабМакет.Область(,ТекКолонка,,ТекКолонка);			
		 ТекОбласть.ШиринаКолонки = БазоваяШирина;

		//детали 
	КонецЦикла;	
	Если ПостроительИтоговый.ИзмеренияСтроки.Количество() > 0 Тогда
		Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи и ТаблДетЗаписей.Количество()>0 Тогда
			ТекОбласть = ТабМакет.Область(Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+1,ТекКолонка,Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+1,ТекКолонка);
			Если ТекКолДеталей < ТаблДетЗаписей.Количество() Тогда
				ТекОбласть.Текст  =	ТаблДетЗаписей[ТекКолДеталей].Поле.Представление;
				ТекКолДеталей 	  = ТекКолДеталей+1;
			КонецЕсли;	
			ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
		КонецЕсли;	
		ТекКолонка = ТекКолонка+1;
	КонецЕсли;	
	
	//2.1.4 Выводим реквизиты группировок у которых положение после группировки
	МакетШапкиТаблицы = МакетОформления.ПолучитьОбласть("ШапкаТаблицы").Область(1,,1);
	КолВоГруппировок = ПостроительИтоговый.ИзмеренияСтроки.Количество();
	Если КолВоГруппировок > 0 и ТаблРеквГруппПосле.Количество() > 0 Тогда
		БылоЧтоТо = Ложь;
		Для каждого ТекСтрока Из ТаблРеквГруппПосле Цикл
			Увеличиваем = 0;
			Для к = 1 По ПостроительИтоговый.ИзмеренияСтроки.Количество() Цикл
				 ТекПоле 	= ПостроительИтоговый.ИзмеренияСтроки[к-1];
				 ТекОбласть = ТабМакет.Область(Начинаем+к,ТекКолонка,Начинаем+к,ТекКолонка);
				 Если ТекПоле.Имя = ТекСтрока.ИмяГруппировки Тогда
					  ТекОбласть.Текст = ТекСтрока.Поле.Представление;
					  Увеличиваем = 1;
				 КонецЕсли; 
				 ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
			КонецЦикла;	
			
			//детали 
			Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи и ТаблДетЗаписей.Количество()>0 и Увеличиваем > 0 Тогда
				ТекОбласть = ТабМакет.Область(Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+1,ТекКолонка,Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+1,ТекКолонка);
				Если ТекКолДеталей < ТаблДетЗаписей.Количество() Тогда
					ТекОбласть.Текст  =	ТаблДетЗаписей[ТекКолДеталей].Поле.Представление;
					ТекКолДеталей 	  = ТекКолДеталей+1;
				КонецЕсли;	
				ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
			КонецЕсли;	
			
			ТекОбласть		  = ТабМакет.Область(,ТекКолонка,,ТекКолонка);			
			ТекОбласть.ШиринаКолонки = БазоваяШирина;
			
			ТекКолонка = ТекКолонка + Увеличиваем; 
		КонецЦикла;	
	КонецЕсли;	
	
	//2.2. пройдемся по деталям
	Если ТекКолДеталей < ТаблДетЗаписей.Количество() Тогда
		Для м = ТекКолДеталей По ТаблДетЗаписей.Количество()-1 Цикл
			Для к = 1 По ПостроительИтоговый.ИзмеренияСтроки.Количество() Цикл
				ТекОбласть = ТабМакет.Область(Начинаем+к,ТекКолонка,Начинаем+к,ТекКолонка);
				ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
			КонецЦикла;	
			Если ПостроительИтоговый.ИзмеренияСтроки.Количество() = 0 Тогда
				Если МаксСтрокШапки > 1 Тогда
					ТекОбласть = ТабМакет.Область(Начинаем+1,ТекКолонка,Начинаем+МаксСтрокШапки,ТекКолонка);
					ТекОбласть.Объединить();
				Иначе
					ТекОбласть = ТабМакет.Область(Начинаем+1,ТекКолонка,Начинаем+1,ТекКолонка);
				КонецЕсли;
			Иначе
				ТекОбласть = ТабМакет.Область(Начинаем+к,ТекКолонка,Начинаем+к,ТекКолонка);
			КонецЕсли;	
			
			
			ТекОбласть.Текст = ТаблДетЗаписей[м].Поле.Представление;
			ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
			ТекКолДеталей = ТекКолДеталей + 1;
			ТекОбласть 	  = ТабМакет.Область(,ТекКолонка,,ТекКолонка);
			ТекОбласть.ШиринаКолонки = БазоваяШиринаДеталей;
			ТекКолонка    = ТекКолонка    + 1;
		КонецЦикла;	
	КонецЕсли;	
	
	//2.3 пошли по показателям
	Для Каждого _ТекЗначение1 ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
		 Если _ТекЗначение1.Использование =  2 Тогда
			  КолВоИспПодч = 0;
			  Для каждого _ТекЗначение2 Из _ТекЗначение1.Строки Цикл
				  Если _ТекЗначение2.Использование Тогда
					   КолВоИспПодч = КолВоИспПодч+1;
				  КонецЕсли;	  
			  КонецЦикла; 
			  Если КолВоИспПодч > 0 Тогда
				  ТекОбласть = ТабМакет.Область(Начинаем+1,ТекКолонка,Начинаем+1,ТекКолонка+КолВоИспПодч-1);
				  ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
				  ТекОбласть.ГоризонтальноеПоложение 	= ГоризонтальноеПоложение.Центр; 
				  
				  ТекОбласть.Объединить();
				  ТекОбласть.Текст   = _ТекЗначение1.Представление;
				  ///ТекОбласть = ТабМакет.Область(Начинаем+1,ТекКолонка,Начинаем+1,ТекКолонка);
				  н = 0;
				  Для каждого _ТекЗначение2 Из _ТекЗначение1.Строки Цикл
					  Если _ТекЗначение2.Использование Тогда
						  ТекОбласть  = ТабМакет.Область(Начинаем+2,ТекКолонка+н,Начинаем+МаксСтрокШапки,ТекКолонка+н);
						  ЗаполнитьОформление(ТекОбласть,МакетШапкиТаблицы);
						  ТекОбласть.Объединить();
						  ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр; 
						  ТекОбласть.Текст    = _ТекЗначение2.Представление;
						  ТекОбласть  = ТабМакет.Область(,ТекКолонка+н,,ТекКолонка+н);
						  ТекОбласть.ШиринаКолонки = БазаоваШиринаПоказ;
						  н = н + 1;
						   //КолВоИспПодч = КолВоИспПодч+1;
					  КонецЕсли;	  
				  КонецЦикла; 
			  КонецЕсли;	  
			  //второй шаг проставляем столбцы
		 КонецЕсли;	
	КонецЦикла;	
	
	//2.4 задаем имя области
	ТекОбласть  = ТабМакет.Область(Начинаем+1,,Начинаем+МаксСтрокШапки,);
	ТекОбласть.Имя = "ШапкаТаблицы";
	
	
	//3   Выводим групировки и детальные записи
	//3.1 групировки
	//
	Начинаем   = Начинаем+МаксСтрокШапки+1; 
	ТекКолонка = НачСтолбец;
	
	Если ПостроительИтоговый.ИзмеренияСтроки.Количество() > 0 Тогда
		МакетПервойГруппировки = МакетОформления.ПолучитьОбласть("ГруппировкаУровень1").Область(2,,2);
		МакетГруппировки       = МакетОформления.ПолучитьОбласть("Группировка").Область(1,,1);
		НомерГруппировки  	   = 0;
		Для Каждого ТекИзмерен Из ПостроительИтоговый.ИзмеренияСтроки Цикл
			  НомерГруппировки = НомерГруппировки + 1;
			  //а группировки до
			  ТекКолонка = НачСтолбец;
			  н = 0;
			  Для каждого ТекСтрока Из ТаблРеквГруппДо Цикл
				  ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки,ТекКолонка,Начинаем+НомерГруппировки,ТекКолонка);
				  Если ТекСтрока.ИмяГруппировки  = ТекИзмерен.Имя Тогда
					  ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
					  ТекОбласть.Параметр	=  ТекСтрока.Параметр;//ТекСтрока.Имя;
					  ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
					  ТекОбласть.ПараметрРасшифровки      =  "Расшифровка";//ТекСтрока.Имя;
					  ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,СтруктУсловнОформления,ТекСтрока.Поле.ПутьКДанным);  
				  Иначе
					ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,Неопределено);  
				  КонецЕсли;	  
				  
				  ТекКолонка = ТекКолонка+1;
			  КонецЦикла;	  
			  //б сама группировка
		 	  //начинаем заполнение
		 	  НайдРекв = ТаблРеквГруппВместе.НайтиСтроки(Новый Структура("ИмяГруппировки",ТекИзмерен.Имя));
			  ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки,ТекКолонка,Начинаем+НомерГруппировки,ТекКолонка);
			  ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,СтруктУсловнОформления,ТекИзмерен.ПутьКДанным);
			  Если НайдРекв.Количество() > 0 или Истина Тогда
				 	  ГрупировкаБудет = Истина;
					  
					  МассПарметров   = Новый Массив;
					  Для м = 0 По НайдРекв.Количество() - 1 Цикл
						  Если НайдРекв[м].Положение = "Перед группировкой" Тогда
							  МассПарметров.Добавить(НайдРекв[м]);
						 КонецЕсли; 
					  КонецЦикла; 
					  
					  Для м = 0 По НайдРекв.Количество() - 1 Цикл
						 Если НайдРекв[м].Положение = "Вместо группировки" Тогда
							  МассПарметров.Добавить(НайдРекв[м]);
							  ГрупировкаБудет = Ложь;
						 КонецЕсли; 
					  КонецЦикла; 
					  
					   Если ГрупировкаБудет Тогда
						  //МассПарметров.Добавить(ТекИзмерен);
						  МассПарметров.Добавить(Новый Структура("Поле,Параметр",ТекИзмерен,СоответсвиеПарИзм[ТекИзмерен.Имя]))
						  
					   КонецЕсли;	  
					  	
					   Для м = 0 По НайдРекв.Количество() - 1 Цикл
							 Если НайдРекв[м].Положение = "После группировки" Тогда
								  МассПарметров.Добавить(НайдРекв[м]);
							 КонецЕсли; 
					   КонецЦикла; 
					   
					   
					   Если  МассПарметров.Количество()= 1 Тогда
							  ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
							  ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
							  ТекОбласть.ПараметрРасшифровки       = "Расшифровка"; //ТекИзмерен.Имя;
							  Если ГрупировкаБудет Тогда
								  ТекОбласть.Параметр	= МассПарметров[0].Параметр;
							  Иначе	  
							  	  ТекОбласть.Параметр	= МассПарметров[0].Параметр;
								  
							  КонецЕсли;
							  ТекОбласть.АвтоОтступ = НомерГруппировки-1;
					   Иначе
						   шбл  = "";  Зап = "";
						   для Каждого км из МассПарметров Цикл
							   шбл	= шбл+Зап +"["+км.Параметр+"]";
							   Зап = ", ";
						   КонецЦикла;	  
						  ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
						  ТекОбласть.Параметр	= шбл;
						  ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
						  ТекОбласть.ПараметрРасшифровки       =  "Расшифровка"; //ТекИзмерен.Имя;
						  ТекОбласть.АвтоОтступ = НомерГруппировки-1;
					   КонецЕсли;	   
					   ТекКолонка = ТекКолонка + 1;
				КонецЕсли; // группировка и реквизиты	   
				
				н = 0;
				Для каждого ТекСтрока Из ТаблРеквГруппПосле Цикл
					  ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки,ТекКолонка,Начинаем+НомерГруппировки,ТекКолонка);
					  Если ТекСтрока.ИмяГруппировки  = ТекИзмерен.Имя Тогда
						  ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
						  ТекОбласть.Параметр	= ТекСтрока.Параметр;//ТекСтрока.Имя;
						  ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
						  ТекОбласть.ПараметрРасшифровки      =  "Расшифровка";//ТекСтрока.Имя;
						  ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,СтруктУсловнОформления,ТекСтрока.Поле.ПутьКДанным);  
					  Иначе
						 ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,Неопределено);  
					  КонецЕсли;	  
					  
					  ТекКолонка = ТекКолонка+1;
				 КонецЦикла;	  
				 
				//детальные записи
				КолВоПустыхДополнительно =  Макс(ТаблРеквГруппДо.Количество()+ТаблРеквГруппПосле.Количество()+1,ТаблДетЗаписей.Количество());
				Если КолВоПустыхДополнительно+НачСтолбец > ТекКолонка Тогда
					Пока ТекКолонка <КолВоПустыхДополнительно+НачСтолбец  Цикл
						ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки,ТекКолонка,Начинаем+НомерГруппировки,ТекКолонка);
						ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,Неопределено);
						ТекКолонка=ТекКолонка+1;
					КонецЦикла;	
				КонецЕсли;	
				
				 
				//показатели
				Для Каждого _ТекЗначение1 ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
					  Если _ТекЗначение1.Использование = 2 Тогда
						   ТекСтроки = _ТекЗначение1.Строки;
						   Для каждого _ТекЗначение2 Из _ТекЗначение1.Строки Цикл
							   	   Если _ТекЗначение2.Использование Тогда
										  ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки,ТекКолонка,Начинаем+НомерГруппировки,ТекКолонка);
										  ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
										  ТекОбласть.Параметр	= _ТекЗначение2.Имя;
										  ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
										  ТекОбласть.ПараметрРасшифровки      = "Расшифровка";
										  
										  ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
										  Если Не ПустаяСтрока(_ТекЗначение2.ФорматнаяСтрока) Тогда
											  ТекОбласть.Формат =  _ТекЗначение2.ФорматнаяСтрока;
										  КонецЕсли;
										  Если УниверсальныйОтчет.ОтрицательноеКрасным Тогда
										  	   ТекОбласть.ВыделятьОтрицательные = Истина;
										  КонецЕсли;	
										   
										  ЗаполнитьОформлениеГруппировки(ТекОбласть,МакетПервойГруппировки,МакетГруппировки,НомерГруппировки,СтруктУсловнОформления,_ТекЗначение2.Имя);
										  ТекКолонка = ТекКолонка+1;
								   КонецЕсли;		  
								  //МаксСтрокШапки = Макс(МаксСтрокШапки,2);
								  //УпровеньПоказ = 2;
						   КонецЦикла; 
					 КонецЕсли;		  
				КонецЦикла;	
				
				Если НомерГруппировки = 1 Тогда
					ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки-1,,Начинаем+НомерГруппировки-1,);
					ТекОбласть.ВысотаСтроки =  МакетОформления.ПолучитьОбласть("ГруппировкаУровень1").Область(1,,1).ВысотаСтроки;
					ТекОбласть 			    = ТабМакет.Область(Начинаем+НомерГруппировки-1,,Начинаем+НомерГруппировки,);
				Иначе
					ТекОбласть = ТабМакет.Область(Начинаем+НомерГруппировки,,Начинаем+НомерГруппировки,);
				КонецЕсли;	
				ТекОбласть.Имя = "Группировка"+Формат(НомерГруппировки,"ЧГ=");
			КонецЦикла;	
			
	КонецЕсли;	
	
	//3.2 Детальные записи
	ТекКолонка   = НачСтолбец;
	Начинаем     = Начинаем+ПостроительИтоговый.ИзмеренияСтроки.Количество()+2;
	Если ТаблДетЗаписей.Количество() > 0 Тогда
		 МакетДеталей = МакетОформления.ПолучитьОбласть("Детали").Область(1,,1);
		 КолВоПустыхДополнительно = Макс(ТаблРеквГруппДо.Количество()+ТаблРеквГруппПосле.Количество()+1,ТаблДетЗаписей.Количество());
		 м = 0;
		 Пока м < КолВоПустыхДополнительно Цикл
			 ТекОбласть = ТабМакет.Область(Начинаем,ТекКолонка,Начинаем,ТекКолонка); 
			 Если м < ТаблДетЗаписей.Количество() Тогда
				  ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				  ТекОбласть.Параметр	= ТаблДетЗаписей[м].Параметр;//ТаблДетЗаписей[м].Имя;
				  Если ОпределитьВозможностьРасшировки(ТаблДетЗаписей[м].Имя,ПостроительИтоговый) Тогда
					  ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
					  ТекОбласть.ПараметрРасшифровки      = ТаблДетЗаписей[м].Имя;
				  КонецЕсли; 
				  
				  
				  Если м = ТаблРеквГруппДо.Количество()  Тогда
					  Если  ПостроительИтоговый.ИзмеренияСтроки.Количество() > 0 Тогда
					  		ТекОбласть.АвтоОтступ = ПостроительИтоговый.ИзмеренияСтроки.Количество()+1;
					  КонецЕсли;	
				  КонецЕсли; 
			  КонецЕсли;	
			 ТекКолонка = ТекКолонка+1;
			 //ЗаполнитьОформление(ТекОбласть,МакетДеталей);
			 Если м < ТаблДетЗаписей.Количество() Тогда
			  	ЗаполнитьОформлениеСУчетомОформления(ТекОбласть,МакетДеталей,СтруктУсловнОформления,ТаблДетЗаписей[м].Поле.ПутьКДанным);
			 Иначе
				ЗаполнитьОформлениеСУчетомОформления(ТекОбласть,МакетДеталей,СтруктУсловнОформления);
			 КонецЕсли;	
			 м = м+ 1;
		 КонецЦикла; 
		 
		//показатели
		Для Каждого _ТекЗначение1 ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
			  Если _ТекЗначение1.Использование = 2 Тогда
				   ТекСтроки = _ТекЗначение1.Строки;
				   Для каждого _ТекЗначение2 Из _ТекЗначение1.Строки Цикл
					   	   Если _ТекЗначение2.Использование Тогда
								  ТекОбласть = ТабМакет.Область(Начинаем,ТекКолонка,Начинаем,ТекКолонка);
								  ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
								  ТекОбласть.Параметр	= _ТекЗначение2.Имя;
								  
								  ТекОбласть.ИспользованиеРасшифровки = ИспользованиеРасшифровкиТабличногоДокумента.Ячейка;
								  ТекОбласть.ПараметрРасшифровки      = "Расшифровка";
								  
								  ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
								  Если Не ПустаяСтрока(_ТекЗначение2.ФорматнаяСтрока) Тогда
									  ТекОбласть.Формат =  _ТекЗначение2.ФорматнаяСтрока;
								  КонецЕсли;
								  Если УниверсальныйОтчет.ОтрицательноеКрасным Тогда
								  	   ТекОбласть.ВыделятьОтрицательные = Истина;
								  КонецЕсли;	
								  //ЗаполнитьОформление(ТекОбласть,МакетДеталей);
								  ЗаполнитьОформлениеСУчетомОформления(ТекОбласть,МакетДеталей,СтруктУсловнОформления, _ТекЗначение2.Имя);
								  ТекКолонка = ТекКолонка+1;
						   КонецЕсли;		  
						  //МаксСтрокШапки = Макс(МаксСтрокШапки,2);
						  //УпровеньПоказ = 2;
				   КонецЦикла; 
			 КонецЕсли;		  
		КонецЦикла;	
		
		ТекОбласть = ТабМакет.Область(Начинаем,,Начинаем);
		ТекОбласть.Имя = "Детали";
		 
		 //Для м = 0 По КолВоПустыхДополнительно Цикл
	КонецЕсли;	
		
	//5 выводим общие итоги	
	Начинаем = Начинаем + 3;
	ТекКолонка = НачСтолбец;
	Если УниверсальныйОтчет.ВыводитьОбщиеИтоги Тогда
		КолВоПустыхДополнительно = Макс(ТаблРеквГруппДо.Количество()+ТаблРеквГруппПосле.Количество()+1,ТаблДетЗаписей.Количество());
		МакетИтогов				 = МакетОформления.ПолучитьОбласть("ОбщиеИтоги").Область(2,,2);
		ТекОбласть				 = ТабМакет.Область(Начинаем,ТекКолонка,Начинаем,ТекКолонка+КолВоПустыхДополнительно-1);
		ТекОбласть.Объединить();
		ТекОбласть.Текст = "Итоги";
		ЗаполнитьОформление(ТекОбласть,МакетИтогов);
		ТекКолонка  = ТекКолонка + КолВоПустыхДополнительно;
		Для Каждого _ТекЗначение1 ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
			  Если _ТекЗначение1.Использование = 2 Тогда
				   ТекСтроки = _ТекЗначение1.Строки;
				   Для каждого _ТекЗначение2 Из _ТекЗначение1.Строки Цикл
					   	   Если _ТекЗначение2.Использование Тогда
								  ТекОбласть = ТабМакет.Область(Начинаем,ТекКолонка,Начинаем,ТекКолонка);
								  ТекОбласть.Заполнение	= ТипЗаполненияОбластиТабличногоДокумента.Параметр;
								  ТекОбласть.Параметр	= _ТекЗначение2.Имя;
								  ТекОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
								  Если Не ПустаяСтрока(_ТекЗначение2.ФорматнаяСтрока) Тогда
									  ТекОбласть.Формат =  _ТекЗначение2.ФорматнаяСтрока;
								  КонецЕсли;
								  Если УниверсальныйОтчет.ОтрицательноеКрасным Тогда
								  	   ТекОбласть.ВыделятьОтрицательные = Истина;
								  КонецЕсли;	
								  //ЗаполнитьОформление(ТекОбласть,МакетИтогов);
								  ЗаполнитьОформлениеСУчетомОформления(ТекОбласть,МакетИтогов,СтруктУсловнОформления, _ТекЗначение2.Имя);
								  ТекКолонка = ТекКолонка+1;
						   КонецЕсли;		  
						  //МаксСтрокШапки = Макс(МаксСтрокШапки,2);
						  //УпровеньПоказ = 2;
				   КонецЦикла; 
			 КонецЕсли;		  
		КонецЦикла;	
		 
		ТекОбласть 				= ТабМакет.Область(Начинаем-1,,Начинаем-1,);
		ТекОбласть.ВысотаСтроки = МакетОформления.ПолучитьОбласть("ОбщиеИтоги").Область(1,,1).ВысотаСтроки;
		ТекОбласть				= ТабМакет.Область(Начинаем-1,,Начинаем,);
		ТекОбласть.Имя 			= "ОбщиеИтоги";
	КонецЕсли;	
		     
		
	ПолучаемыйМакет  = ТабМакет;
//	ПолучаемыйМакет.Показать();
	
	
	
	//мРазмещениеПоложениеВыбранныхПолей
	МассивДетЗаписей = Новый Массив;
	//Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи Тогда
	//	//получим поля детальных записей
	//	
	//	Для Каждого ТекПоле Из ПостроительИтоговый.ВыбранныеПоля Цикл
	//		Если ПостроительИтоговый.ИзмеренияСтроки.Найти(ТекПоле.Имя) <> Неопределено Тогда // это измерение
	//			
	//		Иначе	
	//			Для Каждого ТекПок Из УниверсальныйОтчет.Показатели Цикл
	//				
	//			Конеццикла;	
	//		КонецЕсли;	
	//	КонецЦикла;	
	//КонецЕсли;	
	
	//ОбластьГрупп = 
	
	НачинаемГрупп = Начинаем+3;
	
	//Для к = 1 По ПостроительИтоговый.ИзмеренияСтроки.Количество() Цикл
	//	  
	//	  ТекОбласть = ТабМакет.Область(Начинаем+к,,Начинаем+к);
	//	  ТекОбласть.Имя = "Группировка"+Формат(к,"ЧГ=");
	//	  
	//КонецЦикла;	
	
//	ТабМакет.Показать();
	
	//ТабМакет.Имя
	
	
	
КонецПроцедуры	

Функция СформироватьРасшифровку(ТаблОбластей,КолВо)
	Результат = Новый Структура("Расшифровка",Новый Структура);
	Для к = 1 По КолВо Цикл
		Результат.Расшифровка.Вставить(ТаблОбластей[к-1].ИмяГруппировки,ТаблОбластей[к-1].ЗначениеГруппировки);
	КонецЦикла;	
	возврат Результат;
КонецФункции	

Процедура ВывестиРезЗапроса(Выборка,ТаблОбластей,ТабличныйДокумент,Уровень,ИндексДеталей,Счетчик,КоличествоЗаписей)
	//Расшифровка = Неопределено;
	РасшифровкаДеталей = Неопределено;
	Пока Выборка.Следующий() Цикл
		Область  = Неопределено;
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись и ИндексДеталей >=0 Тогда
			  Область = ТаблОбластей[ИндексДеталей].Область;
			  Если РасшифровкаДеталей = Неопределено и Уровень > 1 Тогда
				  РасшифровкаДеталей = СформироватьРасшифровку(ТаблОбластей,Уровень-1);
			  КонецЕсли; 
			  Если РасшифровкаДеталей <> Неопределено Тогда
				   Область.Параметры.Заполнить(РасшифровкаДеталей);
			  КонецЕсли; 
			  //ПолучаемыйМакет.ПолучитьОбласть("Детали");
		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			  Область = ТаблОбластей[Уровень-1].Область;
			  ТаблОбластей[Уровень-1].ЗначениеГруппировки = Выборка[ТаблОбластей[Уровень-1].ИмяГруппировки];
			  Область.Параметры.Заполнить(СформироватьРасшифровку(ТаблОбластей,Уровень));
			  //Область = ПолучаемыйМакет.ПолучитьОбласть("Группировка"+(Уровень));
		КонецЕсли;	
		  
		Если Область <> Неопределено Тогда  
		 		Область.Параметры.Заполнить(Выборка);
		 		ВыводОбласть = ТабличныйДокумент.Вывести(Область);
		КонецЕсли;		
			
		Счетчик = Счетчик + 1;	
		ВывестиРезЗапроса(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам),ТаблОбластей,ТабличныйДокумент,Уровень+1,ИндексДеталей,Счетчик,КоличествоЗаписей);	
		Если Счетчик % 200 = 0 Тогда
			Состояние("Запись "+Счетчик);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ВывестиДанныеВТабличнДокумент(ТабличныйДокумент,ПолучаемыйМакет,ПостроительИтоговый,РезЗапрос)
	
	  ТаблОбластей = Новый ТаблицаЗначений;
	  ТаблОбластей.Колонки.Добавить("Имя");
	  ТаблОбластей.Колонки.Добавить("Область");
	  ТаблОбластей.Индексы.Добавить("Имя");
	  
	  ТаблОбластей.Колонки.Добавить("ИмяГруппировки");
	  ТаблОбластей.Колонки.Добавить("ЗначениеГруппировки");
	  
	  н = 0;
	  Для Каждого ТекИзмер Из ПостроительИтоговый.ИзмеренияСтроки Цикл
		    н = н +1;
			Имя 	= "Группировка"+н;
			НС = ТаблОбластей.Добавить();
			НС.Имя = Имя;
			НС.Область  = ПолучаемыйМакет.ПолучитьОбласть(Имя);
			НС.ИмяГруппировки = ТекИзмер.Имя;
	 КонецЦикла;
	 
	 ИндексДеталей = -1;
	 Если УниверсальныйОтчет.ВыводитьДетальныеЗаписи Тогда
			НС = ТаблОбластей.Добавить();
			НС.Имя = "Детали";
			НС.Область  = ПолучаемыйМакет.ПолучитьОбласть("Детали");
			ИндексДеталей = ТаблОбластей.Индекс(НС);
	 КонецЕсли; 
	
	
	  ТабличныйДокумент.Очистить();
	  ОблШапкиТаблицы = ПолучаемыйМакет.ПолучитьОбласть("ШапкаТаблицы");
	  ТабличныйДокумент.Вывести(ОблШапкиТаблицы);
	  Если ПостроительИтоговый.ИзмеренияСтроки.Количество() > 0 Тогда
		  Если ПостроительИтоговый.ВыводитьОбщиеИтоги  Тогда
		  		Выборка = РезЗапрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Выборка.Следующий();
				Область  = ПолучаемыйМакет.ПолучитьОбласть("ОбщиеИтоги");
				Область.Параметры.Заполнить(Выборка);
				КолВоЗап = Выборка.Количество();
				ВывестиРезЗапроса(Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам),ТаблОбластей,ТабличныйДокумент,1,ИндексДеталей,1,КолВоЗап);
				ТабличныйДокумент.Вывести(Область);
		  Иначе		
		    	Выборка = РезЗапрос.Выбрать();
				КолВоЗап = Выборка.Количество();
				ВывестиРезЗапроса(Выборка.Выбрать(),ТаблОбластей,ТабличныйДокумент,1,ИндексДеталей,1,КолВоЗап);
		  КонецЕсли;
	  Иначе
		  Если ПостроительИтоговый.ВыводитьОбщиеИтоги  Тогда
		  		Выборка = РезЗапрос.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Выборка.Следующий();
				Область  = ПолучаемыйМакет.ПолучитьОбласть("ОбщиеИтоги");
				Область.Параметры.Заполнить(Выборка);
				
				КолВоЗап = Выборка.Количество();
				ВывестиРезЗапроса(Выборка.Выбрать(),ТаблОбластей,ТабличныйДокумент,0,ИндексДеталей,1,КолВоЗап);
				ТабличныйДокумент.Вывести(Область);
		  Иначе		
		    	Выборка = РезЗапрос.Выбрать();
				КолВоЗап = Выборка.Количество();
				ВывестиРезЗапроса(Выборка.Выбрать(),ТаблОбластей,ТабличныйДокумент,0,ИндексДеталей,1,КолВоЗап);
		  КонецЕсли;
	  КонецЕсли;
	  УниверсальныйОтчет.РасчетШириныКолонок(ТабличныйДокумент);
  КонецПроцедуры	  

Процедура ОбсчитатьДебиторку(ТабличныйДокумент)
	//начало обсчета
	  //конец обсчета
	  //формирование вр таблиц
	  ВыводитьВремя = Ложь;
	  ТекВремя  = ТекущаяДата();
	  
	  СтарыйПостроитель   		= УниверсальныйОтчет.ПостроительОтчета;
	  ТаблИтоговаяРазвернуто 	= ОпределитьСвернутоРазвернуто(СтарыйПостроитель);

	  ТаблИтого					= ПолучитьРасчитаннуюДебиторку();
	  //ТаблицаДанных				= ТаблИтого;
	  //настройки старого построителя
	  
	  Найстройки 		  	    = СтарыйПостроитель.ПолучитьНастройки(Истина,Истина,Истина,Истина);
	  
	  //работа с итоговым построителем	  
	  ПостроительИтоговый 			= Новый ПостроительОтчета;
	  ПостроительИтоговый.Текст 	= ПолучитьТекстЗапросИтоговый();
	  
	  ПостроительИтоговый.УстановитьНастройки(Найстройки,Истина,Ложь,Истина,Истина);
	  ПостроительИтоговый.ИзмеренияСтроки.Очистить();
	  Для каждого ТекИзмерение Из СтарыйПостроитель.ИзмеренияСтроки Цикл
		    Поле = СтарыйПостроитель.ДоступныеПоля.Найти(ТекИзмерение.Имя);
			Если Поле <> Неопределено Тогда
				Если ПостроительИтоговый.ВыбранныеПоля.Найти(Поле.Имя) = Неопределено Тогда
	 				ПостроительИтоговый.ВыбранныеПоля.Добавить(Поле.ПутьКданным,Поле.Имя);
				КонецЕсли;	
			Иначе
				Если ПостроительИтоговый.ВыбранныеПоля.Найти(ТекИзмерение.Имя) = Неопределено Тогда
					ПостроительИтоговый.ВыбранныеПоля.Добавить(ТекИзмерение.ПутьКданным,ТекИзмерение.Имя);
				КонецЕслИ;	
			КонецЕсли;	
	  КонецЦикла;	  
	  
	  //ПостроительИтоговый.УстановитьНастройки(Найстройки,Истина,Истина,Истина,Истина);
//	  ПостроительИтоговый.ИзмеренияСтроки.Очистить();
	  //пробежимся по 
	  Для каждого ТекГруппа ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
	  	Для Каждого ТекСтрока Из ТекГруппа.Строки Цикл
			 Если ТекСтрока.Использование Тогда
				  Если ПостроительИтоговый.ВыбранныеПоля.Найти(ТекСтрока.Имя) = Неопределено Тогда
	    		  		ПостроительИтоговый.ВыбранныеПоля.Добавить(ТекСтрока.Имя,ТекСтрока.Имя);
				  КонецЕсли;	
	    	  КонецЕсли;	   
	  		КонецЦикла;	  
	  КонецЦикла;
	 //поробуем в жесткую
	 //потом убрать
	 ПолеРегистраторЕсть = СтарыйПостроитель.ВыбранныеПоля.Найти("Регистратор") <> Неопределено;
	 //добавим поле дата
	 Если ПолеРегистраторЕсть Тогда
		ПостроительИтоговый.ВыбранныеПоля.Добавить("Дата"); // для последующей сортировки 
		ПостроительИтоговый.ВыбранныеПоля.Добавить("РегистраторПредставление");
	 КонецЕсли; 
	 
	 //
	 //ПостроительИтоговый.ВыбранныеПоля.Добавить("Дата");
	 //ПостроительИтоговый.Порядок.Добавить("Дата");
	 //ПостроительИтоговый.Порядок.Добавить("Регистратор");
	 //закончить убрать
	 
	  //работа со вспомог-й таблицей
	  ЗапросВспомог =  Новый Запрос("ВЫБРАТЬ
	                                |  ТаблВсп.*
									|  Поместить  ТаблИтого                                   
	                                |ИЗ
	                                |	&ТаблИтого КАК ТаблВсп");
									
	  ЗапросВспомог.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	  ЗапросВспомог.УстановитьПараметр("ТаблИтого",ТаблИтого);
	  
	  ЗапросВспомог.Выполнить();
	  
	  Для каждого ТекИзмерение Из СтарыйПостроитель.ИзмеренияСтроки Цикл
		 Поле = ПостроительИтоговый.ИзмеренияСтроки.Добавить(ТекИзмерение.ПутьКДанным,ТекИзмерение.Имя,ТекИзмерение.ТипИзмерения);
		 Поле.Представление =  ТекИзмерение.Представление;
	  КонецЦикла; 
	  
	  Если СтарыйПостроитель.Порядок.Количество() > 0 Тогда
		  ПостроительИтоговый.Порядок.Очистить();
		  Для Каждого ТекПоле Из СтарыйПостроитель.Порядок Цикл
			  Если ПустаяСтрока(ТекПоле.Имя) Тогда
				  ПостроительИтоговый.Порядок.Добавить(ТекПоле.ПутьКданным,ТекПоле.ПутьКданным,ТекПоле.Представление,ТекПоле.Направление);
			  Иначе  
			  	ПостроительИтоговый.Порядок.Добавить(ТекПоле .Имя,ТекПоле.Имя,ТекПоле.Представление,ТекПоле.Направление);
			  КонецЕсли;	
			  //Добавить(<Описание>, <Имя>, <Представление>, <Направление>) 
		  КонецЦикла;	  
	  Иначе	
		  
	  КонецЕсли; 
	  
	  //пройдемся по отборам
	Для каждого ТекОтбор ИЗ  СтарыйПостроитель.Отбор Цикл
		Если ТекОтбор.Использование Тогда
			Попытка
				НашОтбор = ПостроительИтоговый.Отбор.Добавить(ТекОтбор.ПутьКданным,ТекОтбор.Имя,ТекОтбор.Представление);
				НашОтбор.Использование  = ТекОтбор.Использование;
				НашОтбор.ВидСравнения   = ТекОтбор.ВидСравнения;
				Если ТипЗнч(ТекОтбор.Значение)  = Тип("СписокЗначений") Тогда
					Список = Новый СписокЗначений;
					Список.ЗагрузитьЗначения(ТекОтбор.Значение.ВыгрузитьЗначения());
					НашОтбор.Значение       = Список;
				Иначе
					НашОтбор.Значение       = ТекОтбор.Значение;
				КонецЕсли;	
			Исключение
			КонецПопытки;	
		КонецЕсли;	
	КонецЦикла;	
	  
	  
	
	  ПостроительИтоговый.ВыводитьОбщиеИтоги  = УниверсальныйОтчет.ВыводитьОбщиеИтоги;
	  //ПостроительИтоговый.ВыводитьДетальныеЗаписи  = УниверсальныйОтчет.ВыводитьДетальныеЗаписи;
	  ЗапросРезультат  	 					  = ПостроительИтоговый.ПолучитьЗапрос();
	  ЗапросРезультат.МенеджерВременныхТаблиц = ЗапросВспомог.МенеджерВременныхТаблиц;
	  
	  ПозПакета = Найти(ЗапросРезультат.Текст,";");
	  Если ПозПакета = 0 Тогда
		  Сообщить("Сбой в отчете. Обратитесь к администратору");
		  возврат;
	  Иначе
		   ЗапросРезультат.Текст = Сред(ЗапросРезультат.Текст,ПозПакета+1);
	  КонецЕсли;	  
	  
	  РезЗапрос = ЗапросРезультат.Выполнить();
	  //окончание формирование вр таблиц
	  
	  //**********************Начало изменений
	  
	  
	  ПолучаемыйМакет = Неопределено;
	  //УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей,ПостроительИтоговый,истина);	  
	  УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей,ПостроительИтоговый);	  
	  
	  УниверсальныйОтчет.ВывестиДанныеВТабличнДокумент(ТабличныйДокумент,ПостроительИтоговый,РезЗапрос,ЭтотОбъект);
	  ///ОформитьМакетИхреньМакет(РезЗапрос,ПостроительИтоговый,ПолучаемыйМакет);
	  
	  ///ВывестиДанныеВТабличнДокумент(ТабличныйДокумент,ПолучаемыйМакет,ПостроительИтоговый,РезЗапрос);
	  
	  //ОформитьМакетИхреньМакет(РезЗапрос,ПостроительИтоговый,ПолучаемыйМакет)
	  
	  
		
	  
	  
	    возврат;
	  //**********************Конец изменений
	  
	  
	  ИстДанных  				= Новый ОписаниеИсточникаДанных(РезЗапрос);
	  Для Каждого ТекИзмерение  ИЗ  СтарыйПостроитель.ИзмеренияСтроки Цикл
			 ТекКолонка = ИстДанных.Колонки[ТекИзмерение.Имя];
			 ТекКолонка.Измерение = Истина;
	  КонецЦикла;
	  
	  Для каждого ТекГруппа ИЗ УниверсальныйОтчет.Показатели.Строки Цикл
		  Для Каждого ТекСтрока Из ТекГруппа.Строки Цикл
			  Если ТекСтрока.Использование Тогда
				  ТекКолонка	   = ИстДанных.Колонки[ТекСтрока.Имя];
				  ТекКолонка.Итог  = "Сумма("+ТекСтрока.Имя+")";
			  КонецЕсли;	   
		  КонецЦикла;	  
	  КонецЦикла;	  	  
	  
	  //построитель в универсальный отчет
	  НовыйПостроитель  			  = Новый ПостроительОтчета;
	  НовыйПостроитель.ИсточникДанных = ИстДанных; 
	  НовыйПостроитель.УстановитьНастройки(Найстройки,Ложь,Истина,Истина,Истина);
	  //
	  //начало убрать
	  //ТабДок  = Новый ТабличныйДокумент;
	  //
	  //НовыйПостроитель.Выполнить();
	  //НовыйПостроитель.Вывести(ТабДок);
	  //
	  //ТабДок.Показать();
	  //конец убрать
	  
	  УниверсальныйОтчет.ПостроительОтчета = НовыйПостроитель;
	  //добавляем показатели
	  
	  //Для каждого ТекИзмСтроки ИЗ СтарыйПостроитель.ИзмеренияСтроки Цикл
	  //	НовыйПостроитель.ИзмеренияСтроки.Добавить(ТекИзмСтроки.ПутьКДанным,ТекИзмСтроки.Имя,ТекИзмСтроки.ТипИзмерения,ТекИзмСтроки.Макет,ТекИзмСтроки.МакетИерархии);
	  //КонецЦикла; 
	  
	  //Если  ПолеРегистраторЕсть Тогда
	  //	УниверсальныйОтчет.мОбязательнаяСортировка = Новый Массив;
	  //	УниверсальныйОтчет.мОбязательнаяСортировка.Добавить("Дата");
	  //	УниверсальныйОтчет.мОбязательнаяСортировка.Добавить("Регистратор");
	  //Иначе
	  //	УниверсальныйОтчет.мОбязательнаяСортировка = Неопределено;
	  //КонецЕсли;
	  
	  //УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета,истина);
	  УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	  
	  УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);
	  УниверсальныйОтчет.ПостроительОтчета = СтарыйПостроитель;
	  
	 // ТаблИтого.ВыбратьСтроку();
	  Если ВыводитьВремя Тогда
	  	Сообщить("оконч Выборка" + (ТекущаяДата()-ТекВремя));
	  КонецЕсли;	
	  
	  возврат;
	  
	  
	  ИстДанных  					  = Новый ОписаниеИсточникаДанных(ТаблИтого);
	  ИстДанных.Колонки.Организация.Измерение 		 = Истина;
	  ИстДанных.Колонки.Контрагент.Измерение 		 = Истина;
	  ИстДанных.Колонки.ДоговорКонтрагента.Измерение = Истина;
	  ИстДанных.Колонки.Валюта.Измерение			 = Истина;
	  ИстДанных.Колонки.Регистратор.Измерение 	  	 = Истина;
	  
	  ИстДанных.Колонки.НачОст.Итог			 		 = "Сумма(НачОст)";
	  ИстДанных.Колонки.Приход.Итог			 		 = "Сумма(Приход)";
	  ИстДанных.Колонки.Расход.Итог			 		 = "Сумма(Расход)";
	  ИстДанных.Колонки.КонОст.Итог			 		 = "Сумма(КонОст)";
	  //ИстДанных.Колонки.Расход.Итог 			     = Истина;
	  //ИстДанных.Колонки.КонОст.Итог				 = Истина;
	  ИстДанных.Колонки.Погашено.Итог	 	  	 	 =  "Сумма(Погашено)";
	  ИстДанных.Колонки.Просрочено.Итог	 	  	 	 =  "Сумма(Просрочено)";
	  
	  
	  //СтарыйПостроитель.Макет.Показать();
	  
	  НовыйПостроитель  			  = Новый ПостроительОтчета;
	  НовыйПостроитель.ИсточникДанных = ИстДанных; 
	  НовыйПостроитель.ИзмеренияСтроки.Очистить();
	  НовыйПостроитель.ИзмеренияКолонки.Очистить();
	  НовыйПостроитель.ВыбранныеПоля.Очистить();
	  
	  Найстройки 	= СтарыйПостроитель.ПолучитьНастройки(Истина,Истина,Истина,Истина);
	  НовыйПостроитель.УстановитьНастройки(Найстройки,Ложь,Истина,Истина,Истина);
	  
	  УниверсальныйОтчет.ПостроительОтчета = НовыйПостроитель;
	  //добавляем показатели
	  
	  //УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета,истина);
	  УниверсальныйОтчет.УстановитьПредставленияПолей(УниверсальныйОтчет.мСтруктураПредставлениеПолей, УниверсальныйОтчет.ПостроительОтчета);
	  
	  УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);
	  УниверсальныйОтчет.ПостроительОтчета = СтарыйПостроитель;
	  
	 // ТаблИтого.ВыбратьСтроку();
	 Если ВыводитьВремя Тогда
	  	Сообщить("оконч Выборка" + (ТекущаяДата()-ТекВремя));
	 КонецЕсли;
	
	возврат;
	//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать(); //ОбходРезультатаЗапроса.ПоГруппировкам); //Выбрать(); //
	//Пока ВыборкаПоОрганизации.Следующий() Цикл
	//	ВыборкаПоКонтрагентам= ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//	Пока ВыборкаПоКонтрагентам.Следующий() Цикл
	//		 ВыборкаПоДоговорам  = ВыборкаПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//		 Пока ВыборкаПоДоговорам.Следующий() Цикл
	//			 ВыборкаПоВалютам = ВыборкаПоДоговорам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//			 Пока ВыборкаПоВалютам.Следующий() Цикл
	//				  КонОст 	   	   = ВыборкаПоВалютам.ИтогоРасход - ВыборкаПоВалютам.ИтогоПриход;
	//				  
	//				  ИтогоРасход  	   = ВыборкаПоВалютам.ИтогоРасход;
	//				  ИтогоПриход  	   = ВыборкаПоВалютам.ИтогоПриход;
	//				  
	//				  ИтогоРасходНач   = ВыборкаПоВалютам.ИтогоРасходНач;
	//				  ИтогоПриходНач   = ВыборкаПоВалютам.ИтогоПриходНач;
	//				  
	//				  НачОст 		   = ИтогоПриходНач - ИтогоРасходНач;
	//				  
	//				  ЗнакКонОст  	   = ?(КонОст > 0,1,-1);
	//				  ЗнакНачОст  	   = ?(НачОст > 0,1,-1);
	//				  
	//				  ВыборкаДетальная = ВыборкаПоВалютам.Выбрать();
	//				  Пока ВыборкаДетальная.Следующий() Цикл
	//					  Если ЗнакКонОст = 1 Тогда
	//						   КонОст	      = Макс(ВыборкаДетальная.Приход - ИтогоРасход,0);
	//						   ИтогоРасход    = Макс(ИтогоРасход - ВыборкаДетальная.Приход,0);
	//					  Иначе // знак -1
	//						   КонОст	      = Макс(ВыборкаДетальная.Расход - ИтогоПриход,0)*-1;
	//						   ИтогоРасход    = Макс(ИтогоПриход 			 - ВыборкаДетальная.Расход,0);
	//					  КонецЕсли;	  
	//					   
	//					  Если ЗнакНачОст = 1 Тогда
	//					   		НачОст 	   	   = Макс(ВыборкаДетальная.Приход - ИтогоРасходНач,0);
	//					   		ИтогоРасходНач = Макс(ИтогоРасходНач - ВыборкаДетальная.Приход,0);
	//					  Иначе	
	//					   		НачОст 	   	   = Макс(ВыборкаДетальная.Расход - ИтогоПриходНач,0)*-1;
	//					   		ИтогоПриходНач = Макс(ИтогоПриходНач 		  - ВыборкаДетальная.Расход,0);
	//					  КонецЕсли;
	//					   
	//					  Если ВыборкаДетальная.Дата < Дата1 Тогда
	//						   Приход = 0;
	//						   Расход = 0;
	//					  ИначеЕсли ВыборкаДетальная.Дата <= Дата2 Тогда
	//						   Приход = ВыборкаДетальная.Приход;
	//						   Расход = ВыборкаДетальная.Расход;
	//					  КонецЕсли;	   
	//					   
	//					  Если  (КонОст = 0) и (Приход=0) и (Расход=0) и (НачОст = 0) Тогда
	//						   продолжить;
	//					  КонецЕсли;  
	//					   
	//					  
	//					  НоваяСтрока 	   				  = ТаблИтого.Добавить();
	//					  НоваяСтрока.Дата 				  = ВыборкаДетальная.Дата;
	//					  НоваяСтрока.ДатаОплаты		  = ВыборкаДетальная.ДатаОплаты;
	//					  НоваяСтрока.Организация		  = ВыборкаДетальная.Организация;
	//					  НоваяСтрока.Контрагент		  = ВыборкаДетальная.Контрагент;
	//					  НоваяСтрока.ДоговорКонтрагента  = ВыборкаДетальная.ДоговорКонтрагента;
	//					  НоваяСтрока.Валюта			  = ВыборкаДетальная.Валюта;
	//					  НоваяСтрока.НачОст			  = НачОст;
	//					  НоваяСтрока.Приход			  = Приход;
	//					  НоваяСтрока.Расход			  = Расход;
	//					  НоваяСтрока.КонОст			  = КонОст;
	//					  
	//				  КонецЦикла; 
	//			 КонецЦикла; 
	//		 КонецЦикла; 
	//	КонецЦикла;	
	//КонецЦикла;	
	
	Если ВыводитьВремя Тогда
		Сообщить("Затрачено "+(ТекущаяДата()-ТекВремя));
	КонецЕслИ;	
	Сообщить(ТаблИтого.Количество());
	//ТаблИтого.ВыбратьСтроку();
КонецПроцедуры	

// Процедура формирования отчета
//
Процедура СформироватьОтчет(ТабличныйДокумент) Экспорт
	
	// Перед формирование отчета можно установить необходимые параметры универсального отчета.
	ОбсчитатьДебиторку(ТабличныйДокумент);
	 
	возврат;

	УниверсальныйОтчет.СформироватьОтчет(ТабличныйДокумент,,, ЭтотОбъект);

КонецПроцедуры // СформироватьОтчет()

Функция ПолучитьТекстСправкиФормы() Экспорт
	
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработки расшифровки
//
Процедура ОбработкаРасшифровки(Расшифровка, Объект) Экспорт
	
	// Дополнительные параметры в расшифровывающий отчет можно передать
	// посредством инициализации переменной "ДополнительныеПараметры".
	
	ДополнительныеПараметры = Неопределено;
	УниверсальныйОтчет.ОбработкаРасшифровкиУниверсальногоОтчета(Расшифровка, Объект, ДополнительныеПараметры);
	
КонецПроцедуры // ОбработкаРасшифровки()

// Формирует структуру для сохранения настроек отчета
//
Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками) Экспорт
	
	УниверсальныйОтчет.СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками);
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

// Заполняет настройки отчета из структуры сохраненных настроек
//
Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками) Экспорт
	
	Возврат УниверсальныйОтчет.ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками, ЭтотОбъект);
	
КонецФункции // ВосстановитьНастройкиИзСтруктуры()

// Содержит значение используемого режима ввода периода.
// Тип: Число.
// Возможные значения: 0 - произвольный период, 1 - на дату, 2 - неделя, 3 - декада, 4 - месяц, 5 - квартал, 6 - полугодие, 7 - год
// Значение по умолчанию: 0
// Пример:
// УниверсальныйОтчет.мРежимВводаПериода = 1;

#КонецЕсли