Перем СохраненнаяНастройка Экспорт;        // Текущий вариант отчета

Перем ТаблицаВариантовОтчета Экспорт;      // Таблица вариантов доступных текущему пользователю

#Если ТолстыйКлиентОбычноеПриложение Тогда

Процедура СформироватьОтчет(ДокументРезультат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина) Экспорт
	
	ЗначениеПанелипользователя = ТиповыеОтчеты.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ЭтотОбъект);
	НастрокаПоУмолчанию        = КомпоновщикНастроек.ПолучитьНастройки();
	ТиповыеОтчеты.ПолучитьПримененуюНастройку(ЭтотОбъект);
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если ЗначениеПараметра <> Неопределено И Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
		ЗначениеПараметра.Значение      = КонецМесяца(ОбщегоНазначенияЗК.ПолучитьРабочуюДату());
		ЗначениеПараметра.Использование = Истина;
	КонецЕсли;
	
	ДатаАктуальности = '00010101';
	Если ЗначениеПараметра <> Неопределено Тогда 
		ДатаАктуальности = ЗначениеПараметра.Значение;
	КонецЕсли;
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если ЗначениеПараметра <> Неопределено И Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
		ЗначениеПараметра.Значение      = '19000101';
		ЗначениеПараметра.Использование = Истина;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ДеревоДанных = Новый ДеревоЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ДеревоДанных);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	СформироватьМакет(ДеревоДанных, ДокументРезультат, ДатаАктуальности);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(НастрокаПоУмолчанию);
	
КонецПроцедуры

Процедура СформироватьМакет(ДеревоДанных, ДокументРезультат, ДатаАктуальности)
	
	Макет = ПолучитьМакет("ИзвещениеОПриемеУвольнении");
	
	Шапка 			 = Макет.ПолучитьОбласть("Шапка");
	Подвал 			 = Макет.ПолучитьОбласть("Подвал");
	СтрокаПрием 	 = Макет.ПолучитьОбласть("СтрокаПрием");
	СтрокаУвольнение = Макет.ПолучитьОбласть("СтрокаУвольнение");
	
	ДокументРезультат.Очистить();
	
	Для Каждого ДанныеОрганизации Из ДеревоДанных.Строки Цикл 
		
		ПараметрыЗаголовка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеОрганизации.Организация, "НаименованиеПолное");
		ПараметрыЗаголовка.Вставить("ФактАдресОрганизации", УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ДанныеОрганизации.Организация, "Фактический"));
		ПараметрыЗаголовка.Вставить("ЮрАдресОрганизации", УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(ДанныеОрганизации.Организация, "Юридический"));
		
		Если Не ЗначениеЗаполнено(ПараметрыЗаголовка.ФактАдресОрганизации) Тогда
			ПараметрыЗаголовка.Вставить("ФактАдресОрганизации", ПараметрыЗаголовка.ЮрАдресОрганизации);
		КонецЕсли;
		
		ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(ДанныеОрганизации.Организация, ДатаАктуальности);
		
		Для Каждого ТекСтрока Из ДанныеОрганизации.Строки Цикл 
			
			ЗаполнитьЗначенияСвойств(Шапка.Параметры, ТекСтрока);
			ЗаполнитьЗначенияСвойств(Шапка.Параметры, ПараметрыЗаголовка);
			
			ДокументРезультат.Вывести(Шапка);
			
			Если ТекСтрока.Событие = "Прием" Тогда
				ДокументРезультат.Вывести(СтрокаПрием);
			Иначе 
				ДокументРезультат.Вывести(СтрокаУвольнение);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Подвал.Параметры, ТекСтрока);
			ЗаполнитьЗначенияСвойств(Подвал.Параметры, ПараметрыЗаголовка);
			ЗаполнитьЗначенияСвойств(Подвал.Параметры, ОтветственныеЛица);
			
			ДокументРезультат.Вывести(Подвал);
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура СохранитьНастройку() Экспорт

	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ЭтотОбъект);
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ПрименитьНастройку() Экспорт
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ЭтотОбъект);

	// Считываение структуры настроек отчета
 	Если Не СохраненнаяНастройка.Пустая() Тогда
		
		СтруктураНастроек = СохраненнаяНастройка.ХранилищеНастроек.Получить();
		Если Не СтруктураНастроек = Неопределено Тогда
			КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураНастроек.НастройкиКомпоновщика);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		Иначе
			КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	СтруктураНастроек = Новый Структура();
	Возврат СтруктураНастроек;
	
КонецФункции

Если СохраненнаяНастройка = Неопределено Тогда
	СохраненнаяНастройка =  Справочники.СохраненныеНастройки.ПустаяСсылка();
КонецЕсли;

Если КомпоновщикНастроек = Неопределено Тогда
	КомпоновщикНастроек =  Новый КомпоновщикНастроекКомпоновкиДанных;
КонецЕсли;

#КонецЕсли
