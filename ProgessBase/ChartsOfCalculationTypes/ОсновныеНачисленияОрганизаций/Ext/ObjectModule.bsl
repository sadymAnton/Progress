//////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет обновление реквизитов "ЗачетОтработанногоВремени" и
// "ЗачетНормыВремени" в зависимости от значения ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПризнакиУчетаВремени() Экспорт

	ЭтоРасчетПроцентом = СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом 
							Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
							Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка;
							
	Если Не ЭтоРасчетПроцентом Тогда
		Для Каждого Показатель Из Показатели Цикл
			
			Если Показатель = Справочники.ПоказателиСхемМотивации.РасчетнаяБаза Тогда
				ЭтоРасчетПроцентом = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;							
							
							
	Если ЭтоРасчетПроцентом Тогда
        Если ОбозначениеВТабелеУчетаРабочегоВремени.Пустая() Тогда
			ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Работа
		КонецЕсли;
		Если ВидВремени.Пустая() Тогда
			ВидВремени = Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы
		КонецЕсли;
	КонецЕсли;
	
	Если ВидВремени = Перечисления.ВидыВремени.ОтработанноеВПределахНормы Тогда
		ЗачетОтработанногоВремени 	= Истина;
		ЗачетНормыВремени 			= Истина;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ОтработанноеСверхНормы Тогда
		ЗачетОтработанногоВремени 	= Истина;
		ЗачетНормыВремени 			= Ложь;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ЦелодневноеНеотработанное Тогда
		ЗачетОтработанногоВремени 	= Ложь;
		ЗачетНормыВремени 			= Истина;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное Тогда
		ЗачетОтработанногоВремени 	= Ложь;
		ЗачетНормыВремени 			= Истина;
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы Тогда
		ЗачетОтработанногоВремени 	= Истина;
		ЗачетНормыВремени			= Истина;
	Иначе
		ЗачетОтработанногоВремени 	= Ложь;
		ЗачетНормыВремени 			= Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура УточнитьСтратегиюОтраженияВУчете() Экспорт
	
	ЭтоПособиеЗаСчетФСС = Ссылка = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ
								Или Ссылка = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам
								Или Ссылка = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет;

	Если Не ЭтоПособиеЗаСчетФСС Тогда
		СтратегияОтраженияВУчете = ?(СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям,Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления,?(СпособОтраженияВБухучете.Пустая(), Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоНаНачалоСобытия,Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакЗаданоВидуРасчета));	
	КонецЕсли;							
								
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	Если ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоТрудовомуЗаконодательству Тогда
		ПериодРасчетаСреднегоЗаработка = 0
	КонецЕсли;
	
	// Обновим реквизиты "ЗачетОтработанногоВремени" и "ЗачетНормыВремени"
	ОбновитьПризнакиУчетаВремени();	
	УточнитьСтратегиюОтраженияВУчете();
	
	Если ПроизвольнаяФормулаРасчета И СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
		СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
	КонецЕсли;
	
	НачисляетсяВЦеломЗаМесяц = ПроведениеРасчетов.УстановитьФлагНачисляетсяВЦеломЗаМесяц(ПроизвольнаяФормулаРасчета, Показатели, СпособРасчета, БазовыйПериодПрошлыйМесяц);
	
	Если Не (Предопределенный Или ОбщегоНазначенияЗК.ЭтоОсобыйЭлемент(Ссылка)) Тогда
		
		Если НЕ БазовыйПериодПрошлыйМесяц и НЕ ПериодДействияБазовый Тогда
			ПериодДействияБазовый = Истина;
		ИначеЕсли БазовыйПериодПрошлыйМесяц и ПериодДействияБазовый Тогда
			ПериодДействияБазовый = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ((ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы)
		 ИЛИ (ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы)) Тогда
		АвтоНачислятьПоТабелю = Ложь;
	КонецЕсли;
	
	ОсновныеНачисленияОрганизацийПереопределяемый.ПередЗаписьюДополнительно(ЭтотОбъект);
	
	Если ЕжегодныйОтпускДляРезервов И ВидПособияСоциальногоСтрахования <> Перечисления.ВидыПособийСоциальногоСтрахования.ПустаяСсылка() Тогда
		ЕжегодныйОтпускДляРезервов = Ложь;
	КонецЕсли;
                  
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда // проверки не выполняем
		Возврат
	КонецЕсли;
	
	Если ВидВремени = Перечисления.ВидыВремени.ОтработанноеСверхНормы Тогда
		Если (ОбозначениеВТабелеУчетаРабочегоВремени <> Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные
			И ОбозначениеВТабелеУчетаРабочегоВремени <> Справочники.КлассификаторИспользованияРабочегоВремени.Праздники) Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке("Указан неверный вид времени по классификатору использования рабочего времени!", Отказ);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ВидВремени) и ВидВремени <> Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы Тогда
		Если ОбозначениеВТабелеУчетаРабочегоВремени.Пустая() Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке("Для начисления, по которому регистрируется отработанное (или неотработанное время), необходимо задать конкретный вид времени по классификатору использования рабочего времени!", Отказ);
		ИначеЕсли (ВидВремени = Перечисления.ВидыВремени.ЦелодневноеНеотработанное 
			Или ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное) и ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке("Указан неверный вид времени по классификатору использования рабочего времени!", Отказ);
		ИначеЕсли (ВидВремени = Перечисления.ВидыВремени.ОтработанноеВПределахНормы 
			Или ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы) и Не ОбозначениеВТабелеУчетаРабочегоВремени.РабочееВремя Тогда 
			ОбщегоНазначенияЗК.СообщитьОбОшибке("Указан неверный вид времени по классификатору использования рабочего времени!", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если АвтоНачислятьПоТабелю Тогда
		
		// с указанным видом времени должен быть только один с признаком автоначисления по табелю
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбозначениеВТабелеУчетаРабочегоВремени", ОбозначениеВТабелеУчетаРабочегоВремени);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = &ОбозначениеВТабелеУчетаРабочегоВремени
		|	И ОсновныеНачисленияОрганизаций.АвтоНачислятьПоТабелю
		|	И ОсновныеНачисленияОрганизаций.Ссылка <> &Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ОбщегоНазначенияЗК.СообщитьОбОшибке("Для обозначения в табеле рабочего времени " + ОбозначениеВТабелеУчетаРабочегоВремени + " уже существует вид расчета " + Выборка.Ссылка + " с признаком автоначисления по табелю!", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Описание текста запроса:
	// Первая часть запроса - поиск видов расчета, которые вытесняЮт текущий, являющийся почасовым отклонением: 
	//		Выбираются виды расчета, которые вытесняЕт текущий, проверяется отсутствие таких видов
	//
	// Вторая часть запроса - поиск видов расчета, которые вытесняЕт текущий, являющийся почасовым отклонением: 
	//		Выбираются виды расчета, которые вытесняЕт текущий, проверяется отсутствие таких видов
	//
	// Третья часть запроса - поиск видов расчета, являющихся почасовыми отклонениями, которые вытесняЮт текущий: 
	//		Для вида расчета, не являющегося почасовым отклонением, поиск вытесняющий его видов - почасовых отклонений
	// 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСсылка", Ссылка);
	НецелосменноеВремя = Новый Массив;
	НецелосменноеВремя.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
	НецелосменноеВремя.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
	Запрос.УстановитьПараметр("НецелосменноеВремя", НецелосменноеВремя);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""Для нецелодевных начислений нельзя назначать вытесняющие виды расчета"" КАК ОписаниеКонфликта
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(*) КАК КоличествоВР
	|	ИЗ
	|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ВытесняющиеВР
	|	ГДЕ
	|		ВытесняющиеВР.Ссылка = &парамСсылка
	|		И ВытесняющиеВР.Ссылка.ВидВремени В(&НецелосменноеВремя)) КАК ДанныеПоВытесняющимВР
	|ГДЕ
	|	ДанныеПоВытесняющимВР.КоличествоВР > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Недопустимо назначение нецелодевного начисления '"" + ОсновныеНачисления.Ссылка.Наименование + ""' как вытесняющего для '"" + ВытесняемыеНачисления.Ссылка.Наименование + ""'""
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ВытесняемыеНачисления
	|		ПО ОсновныеНачисления.Ссылка = ВытесняемыеНачисления.ВидРасчета
	|ГДЕ
	|	ОсновныеНачисления.Ссылка = &парамСсылка
	|	И ОсновныеНачисления.ВидВремени В(&НецелосменноеВремя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Недопустимо назначение нецелодевного начисления '"" + ВытесняющиеВР.ВидРасчета.Наименование + ""' в качестве вытесняющего вида расчета""
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК ВытесняющиеВР
	|ГДЕ
	|	ВытесняющиеВР.Ссылка = &парамСсылка
	|	И ВытесняющиеВР.ВидРасчета.ВидВремени В(&НецелосменноеВремя)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ОписаниеКонфликта) Тогда
			ОбщегоНазначенияЗК.СообщитьОбОшибке(Выборка.ОписаниеКонфликта, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
