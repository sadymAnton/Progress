////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем РежимЗаписиРегистратора Экспорт;
Перем ПустойНаборЗаписей;

Перем мФизлица;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ВыполнитьПроверку(СообщатьОбОшибкахПериодов, УчитыватьРегистратор)
	
	Если СообщатьОбОшибкахПериодов Тогда
		СообщенияОбОшибках = Новый Массив;
	Иначе
		СообщенияОбОшибках = Неопределено;
	КонецЕсли;
			
	ОшибкиПериодов	= Новый Соответствие;
	
	Регистратор = Отбор.Регистратор.Значение;
	
	ПроцедурыУправленияПерсоналом.ПолучитьОшибкиПериодовРаботыСотрудникаПоОсновномуМестуРаботы(Регистратор, УчитыватьРегистратор, мФизлица, СообщенияОбОшибках, ОшибкиПериодов);
	
	// запишем новое состояние ошибок
	НаборЗаписей = РегистрыСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботыОшибки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Физлицо.Использование = Истина;
	Для Каждого Элемент Из мФизлица Цикл
		НаборЗаписей.Очистить();
		НаборЗаписей.Отбор.Физлицо.Значение = Элемент;
		// если ошибка периода - пишем непустой набор записей
		Если ОшибкиПериодов[Элемент] = 0 Тогда
			Строка = НаборЗаписей.Добавить();
			Строка.Физлицо = Элемент;
		КонецЕсли;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	// сообщим об ошибках
	Если СообщатьОбОшибкахПериодов Тогда
		Для Каждого Сообщение Из СообщенияОбОшибках Цикл
			СтрокаСообщениеОбОшибке = Сообщение.Физлицо + ": Противоречие в периодах по основному месту работы" + Символы.ПС+ "(" + 
			Формат(Сообщение.ДатаНачала, "ДФ='дд МММ гг ""г.""'") + " - " + 
			Формат(Сообщение.ДатаОкончания, "ДФ='дд МММ гг ""г.""'") + " и " + 
			Формат(Сообщение.ДатаНачалаПред, "ДФ='дд МММ гг ""г.""'") + " - " + 
			Формат(Сообщение.ДатаОкончанияПред, "ДФ='дд МММ гг ""г.""'") + ")";
			СтрокаСообщениеОбОшибке = СтрокаСообщениеОбОшибке + Символы.ПС + "Документы, которые противоречат друг другу:";
			Если не ПустаяСтрока(Сообщение.Регистратор1) Тогда
				СтрокаСообщениеОбОшибке = СтрокаСообщениеОбОшибке + Символы.ПС + "   " + Сообщение.Регистратор1;
			КонецЕсли;
			Если не ПустаяСтрока(Сообщение.Регистратор2) Тогда
				СтрокаСообщениеОбОшибке = СтрокаСообщениеОбОшибке + Символы.ПС + "   " + Сообщение.Регистратор2;
			КонецЕсли;
			Если не ПустаяСтрока(Сообщение.ПослРегистратор1) Тогда
				СтрокаСообщениеОбОшибке = СтрокаСообщениеОбОшибке + Символы.ПС + "   " + Сообщение.ПослРегистратор1;
			КонецЕсли;
			Если не ПустаяСтрока(Сообщение.ПослРегистратор2) Тогда
				СтрокаСообщениеОбОшибке = СтрокаСообщениеОбОшибке + Символы.ПС + "   " + Сообщение.ПослРегистратор2;
			КонецЕсли;
			ОбщегоНазначенияЗК.СообщитьОбОшибке(СтрокаСообщениеОбОшибке);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор",	Отбор.Регистратор.Значение);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.Физлицо
	|ИЗ
	|	РегистрСведений.ПериодыРаботыРаботниковОрганизацийПоОсновномуМестуРаботы КАК Периоды
	|ГДЕ
	|	Периоды.Регистратор = &Регистратор";
	
	мФизлица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Физлицо");
	
	ВыполнитьПроверку(РежимЗаписиРегистратора = РежимЗаписиДокумента.ОтменаПроведения, Ложь);
	
	ПустойНаборЗаписей = ЭтотОбъект.Количество() = 0;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мФизлица.Очистить();
	
	Для Каждого Запись Из ЭтотОбъект Цикл
		мФизлица.Добавить(Запись.Физлицо);
	КонецЦикла;

	Если Не ПустойНаборЗаписей Тогда
		ВыполнитьПроверку(РежимЗаписиРегистратора = РежимЗаписиДокумента.Проведение, Истина);
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

