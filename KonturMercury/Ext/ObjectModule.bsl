Перем ОсновнойМодуль Экспорт;
Перем РеквизитыПересчета Экспорт;
Перем ДанныеОтладки Экспорт;
Перем ВнешнееХранилище Экспорт;
Перем КорневаяФабрика;
Перем ТаблицаПродукцииВетис;
Перем КлассификаторЦелейМеркурий;
Перем КлассификаторСтранМеркурий;
Перем КлассификаторРегионовМеркурий;
Перем ОКОПФ;
Перем ИспользуемыйТаймаут;
Перем СмещениеЧасовОтМосквы;

Перем ПакетныйРежим;
Перем ИспользуемыеПрокси Экспорт;
Перем НулевойGUID Экспорт;
Перем КэшУчетныхЗаписей Экспорт; //самоинициализирующаяся через КэшУчетныхЗаписей()
Перем ОперативныйСкладскойЖурнал Экспорт;

Перем ВыводитьСкоростьРаботыСервераМеркурий Экспорт;
//основные методы ------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------

Процедура Инициализировать(ОбработкаКонтурEDI) Экспорт
	
	ОсновнойМодуль = ОбработкаКонтурEDI;
	ИспользуемыйТаймаут = ПолучитьКонстантуEDI("М_ТаймаутСоединений");
	Если Не ЗначениеЗаполнено(ИспользуемыйТаймаут) Тогда 
		ИспользуемыйТаймаут = 20; //сек 
	КонецЕсли;
	ВнешнееХранилище = Ложь;
	
	СмещениеЧасовОтМосквы = ПолучитьКонстантуEDI("М_ЧасовойПоясОтМосквы");   //Екатеринбург +2; Калининград -1
	Если Не ЗначениеЗаполнено(СмещениеЧасовОтМосквы) Тогда 
		СмещениеЧасовОтМосквы = 0; 
	КонецЕсли;
	
	//кэшируем настройки отладки ПМ
	ДанныеОтладки = ОсновнойМодуль.ПолучитьСписокСвойствEDI("ПодключаемыйМодульСообщатьОСобытиях,ПодключаемыйМодульИспользоватьОтладку,ПодключаемыйМодульСобытиеОтладки");
	НулевойGUID = "00000000-0000-0000-0000-000000000000";
	ВыводитьСкоростьРаботыСервераМеркурий = ПолучитьКонстантуEDI("М_ВыводитьСкоростьРаботыСервераМеркурий");
	
КонецПроцедуры

Функция ОбработатьСобытиеКонтурEDI(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI = Истина) Экспорт
	
	// Данная функция - основная точка входа в ПМ, здесь происходит обработка всех возможных событий.
	// Если вам нужно что-то изменить в типовой логике модуля, но вы не знаете, каким событием воспользоваться, просто напишите здесь 
	// Сообщить(ИмяСобытия);
	// И в пользовательском режиме отслеживайте, какие события вызываются при действиях пользователя.
	
	//плагины  пока их нет -------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------------------	
		
	//Результат = ПрименитьПлагины(ИмяСобытия, Параметры, СтандартнаяОбработкаEDI);
	//Если Не Результат = Неопределено Тогда 
	//	Возврат Результат 
	//КонецЕсли;
	
	//дополнительные обработчики -------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------------------	
	
	//+обработчики для учета особенностей текущей конфигурации
	//----------------------------------------------------------------------------------------------------------------
	Если ИмяСобытия = "" Тогда
		
		
	КонецЕсли;
	
	
	
	Возврат Неопределено;
	
КонецФункции

// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник "ВнешниеОбработки"
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	"ДополнительнаяОбработка"
//										"ДополнительныйОтчет"
//										"ЗаполнениеОбъекта"
//										"Отчет"
//										"ПечатнаяФорма"
//										"СозданиеСвязанныхОбъектов"
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, "Документ.СчетЗаказ" или "Справочник.*"
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// ВерсияБСП - Строка - Минимальная версия БСП, на которую рассчитывает код
// дополнительной обработки. Номер версии БСП задается в формате «РР.ПП.ВВ.СС»
// (РР – старший номер редакции; ПП – младший номер ре-дакции; ВВ – номер версии; СС – номер сборки).
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						"ОткрытиеФормы" - открыть форму обработки
//						"ВызовКлиентскогоМетода" - вызов клиентского экспортного метода из формы обработки
//						"ВызовСерверногоМетода" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как "ПечатьMXL"
//
// Предусмотрено 2 команды:
// 1. "Открыть форму обработки" для загрузки прайс-листа в диалоговом режиме
// 2. "Загрузить прайс-лист и сохранить протокол в файл" для загрузки прайс-листа по регламентному заданию и
// сохранения протокола в файл.
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Контур.EDI Модуль Меркурий");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.00.01");
	//Если Найти(Метаданные.Синоним,"Бухгалтерия предприятия, редакция 3.0")>0 Тогда
	//	//нет регистрации по ВерсииБСП
	//иначе
	//	РегистрационныеДанные.Вставить("ВерсияБСП", "нет");
	//КонецЕсли;

	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	
	РегистрационныеДанные.Вставить("Информация", "Обработка подключаемого модуля ""МЕРКУРИЙ"" для Контур.EDI");
	
	ТЗКоманд = Новый ТаблицаЗначений;
	ТЗКоманд.Колонки.Добавить("Идентификатор");
	ТЗКоманд.Колонки.Добавить("Представление");
	ТЗКоманд.Колонки.Добавить("Модификатор");
	ТЗКоманд.Колонки.Добавить("ПоказыватьОповещение");
	ТЗКоманд.Колонки.Добавить("Использование");
	
	
	РегистрационныеДанные.Вставить("Команды", ТЗКоманд);
	
	Возврат РегистрационныеДанные;
	
КонецФункции

Функция КэшУчетныхЗаписей(ПринудительноОбновить=ложь) Экспорт
	
	Если КэшУчетныхЗаписей = Неопределено 
		ИЛИ ПринудительноОбновить = Истина
		ИЛИ КэшУчетныхЗаписей.Количество()=0 Тогда
		ОбновитьКэшУчетныхЗаписей()
	КонецЕсли;
	
	Возврат КэшУчетныхЗаписей;
	
КонецФункции

Процедура ОбновитьКэшУчетныхЗаписей()
	//Кэш содержит в себе еще связь ХС и площадок (наших)
	
	//читаем все Учетные записи
	УчетныеЗаписи = Новый ТаблицаЗначений;
	УчетныеЗаписи.Колонки.Добавить("ЛогинAPI");
	УчетныеЗаписи.Колонки.Добавить("ПарольAPI");
	УчетныеЗаписи.Колонки.Добавить("APIKey");
	УчетныеЗаписи.Колонки.Добавить("ЛогинПользователя");
	УчетныеЗаписи.Колонки.Добавить("IssuerId");
	
	КэшУчетныхЗаписей = УчетныеЗаписи.Скопировать();
	КэшУчетныхЗаписей.Колонки.Добавить("ПлощадкаGUID");
	
	ТаблицаТекХС = ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийУчетнаяЗапись", Неопределено);
	
	Для Каждого Эл Из ТаблицаТекХС Цикл
		НоваяУЗ = УчетныеЗаписи.Добавить();
		НоваяУЗ.ЛогинAPI 	= ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"ЛогинAPI");
		НоваяУЗ.ПарольAPI 	= ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"ПарольAPI");
		НоваяУЗ.APIKey 		= ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"APIKey");
		НоваяУЗ.ЛогинПользователя = ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"ЛогинПользователя");
		НоваяУЗ.IssuerId 	= ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"IssuerId");
	КонецЦикла;
	
	ТаблицаСвязанныхСХСПлощадок = Новый ТаблицаЗначений;
	ТаблицаСвязанныхСХСПлощадок.Колонки.Добавить("IssuerId");
	ТаблицаСвязанныхСХСПлощадок.Колонки.Добавить("ПлощадкаGUID");
	//узнаем все связи наших ХС с площадками
	Для Каждого СтрокаУчетки Из УчетныеЗаписи Цикл
		ТекПредприятия = ПолучитьСписокПредприятийПоGUID(СтрокаУчетки.IssuerId,Истина);
		Для Каждого СвязанноеПредприятие Из ТекПредприятия Цикл
			ВыясненнаяСвязь = ТаблицаСвязанныхСХСПлощадок.Добавить();
			ВыясненнаяСвязь.IssuerId = СтрокаУчетки.IssuerId;
			ВыясненнаяСвязь.ПлощадкаGUID = СвязанноеПредприятие.guid;
		КонецЦикла;
	КонецЦикла;
	
	//читаем все наши площадки - понимаем их GUID Владельцев
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка,
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение КАК ПлощадкаGUID
	               |ПОМЕСТИТЬ GUIDПлощадок
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = ""МеркурийПлощадка""
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""GUID""
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение <> """"
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка КАК СсылкаПлощадки,
	               |	GUIDПлощадок.ПлощадкаGUID
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ GUIDПлощадок КАК GUIDПлощадок
	               |		ПО КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка = GUIDПлощадок.Ссылка
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = ""МеркурийПлощадка""
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = ИСТИНА
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""Наш""
	               |	И НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	ТаблицаПлощадок = Результат.Выгрузить();	
	ТаблицаПлощадок.колонки.Добавить("ХСGUID");
	ТаблицаПлощадок.колонки.Удалить("СсылкаПлощадки");
	
	ТаблицаПлощадок.Свернуть("ХСGUID,ПлощадкаGUID"); //N складов в 1С на 1 площадку
	
	//обходим Площадки - заполняем GUID Площадки и по нему узнаем GUIDХС к которому они принадлежат
	//и по непустым ХСGUID найти учетную запись
	Для Каждого Строкаплощадки Из ТаблицаПлощадок Цикл
		Если ЗначениеЗаполнено(СтрокаПлощадки.ПлощадкаGUID) Тогда
			
			НайденныеПоСвязямХС = ТаблицаСвязанныхСХСПлощадок.НайтиСтроки(Новый Структура("ПлощадкаGUID",СтрокаПлощадки.ПлощадкаGUID));

			Для Каждого НайденныйПоСвязиХС Из НайденныеПоСвязямХС Цикл
				НайденнаяУчетка = УчетныеЗаписи.Найти(НайденныйПоСвязиХС.IssuerId,"IssuerId");
				НоваяСтрокаКэша = КэшУчетныхЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаКэша,НайденнаяУчетка);
				НоваяСтрокаКэша.ПлощадкаGUID = НайденныйПоСвязиХС.ПлощадкаGUID;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьGUIDВладельцаПлощадки(GUIDПлощадки)
	
	GUIDВладельца = "";
	
	WSПрокси = ПолучитьWSПроксиEnterpriseService();
	
	ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю данные о владельце площадке по GUID: "+GUIDПлощадки);
	Попытка
		Ответ = WSПрокси.GetEnterpriseByGuid(GUIDПлощадки);
	Исключение
		Сообщить("Не смог получить ответ от ГИС Цербер по площадке: "+GUIDПлощадки);
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		GUIDВладельца = ВычислитьXDTO(Ответ,"guid");
	Исключение
		Сообщить("Не смог разобрать ответ от ГИС Цербер по площадке: "+GUIDПлощадки);
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат GUIDВладельца;

КонецФункции



//----------------------------------------------------------------------------------------------------------------
//Прикладная часть Модуля
//----------------------------------------------------------------------------------------------------------------


//МЕРКУРИЙ


//Общие
Функция ПартнерМеркурий() Экспорт
	
	СписокПартнеров =  ОсновнойМодуль.ПолучитьСписокЭлементовСправочника("Партнеры");
	Если СписокПартнеров = Неопределено 
		ИЛИ СписокПартнеров.Количество() = 0
		ИЛИ СписокПартнеров.Найти("Меркурий","Наименование") = Неопределено
		Тогда
		Возврат неопределено;
	КонецЕсли;
	
	ПартнерМеркурий = СписокПартнеров.Найти("Меркурий","Наименование").Ссылка;
    Возврат ПартнерМеркурий;
КонецФункции

Функция ВыбратьПараметрыПодключенияДляТранзакции(ТипСообщения,Параметры) Экспорт
	
	Если ТипСообщения = "M_DES"
		ИЛИ ТипСообщения = "M_PRD"
		ИЛИ ТипСообщения = "M_MOV" Тогда
		Если Параметры.Свойство("Сообщение") Тогда
			Возврат ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),Параметры.Сообщение.ХозяйствующийСубъектEDI.GUID);
		Иначе
			Возврат ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика());
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = "M_INC"
		ИЛИ ТипСообщения = "M_REC" Тогда
		Если Параметры.Свойство("Сообщение") Тогда
			Возврат ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),Параметры.Сообщение.ХозяйствующийСубъектПолучательEDI.GUID);
		Иначе
			Возврат ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика());
		КонецЕсли;
	Иначе
		//не понятно что за транзакция такая - идем с дефолтными параметрами
	  Возврат ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика());
 	КонецЕсли;
  
КонецФункции


Функция ВыполнитьТранзакциюМеркурий(ТипСообщения,Документ=неопределено,Параметры) Экспорт
	//предусмотреть валидации
	
	//Параметры.Вставить("КорневаяФабрика", КорневаяФабрика());
	
	ПараметрыПодключенияДляТранзакции = ВыбратьПараметрыПодключенияДляТранзакции(ТипСообщения,Параметры);
	//преобразовать Сообщение в XDTO
	ПараметрыТранзакции = ЗаписатьСообщениеМеркурийXDTO(ТипСообщения,Параметры);
	//выполнитьЗапрос
	
	Если Параметры.Свойство("Сообщение") И Параметры.Сообщение.Свойство("Завершена") И Параметры.Сообщение.Завершена = Истина Тогда
		//завершение незавершенного производства
		ПараметрыТранзакции.Вставить("localTransactionId", "IncomingRobot");
		ПараметрыТранзакции.Вставить("ИмяМетода", Параметры.ИмяМетода);
		
		ОтветМеркурия = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, Параметры.ИмяМетода,Истина); //сразу ждем результат
		ОбработатьРезультатЗавершенияНезавершенногоПроизводства(ОтветМеркурия,Параметры);
		Возврат неопределено;
	КонецЕсли;
	
	Если (Параметры.Свойство("ПереотправкаСообщения") И Параметры.ПереотправкаСообщения = Истина) 
		ИЛИ (Параметры.Свойство("СообщениеСсылка") И ЗначениеЗаполнено(Параметры.СообщениеСсылка))
		Тогда
		Код=Параметры.СообщениеСсылка.Код;
	Иначе
		
		//новая транзакция
		Если Параметры.Свойство("СообщениеДляСохранения") И ЗначениеЗаполнено(Параметры.СообщениеДляСохранения) тогда
			СообщениеСтруктураДляСохраненияВСправочнике = Параметры.СообщениеДляСохранения; 
		Иначе
			СообщениеСтруктураДляСохраненияВСправочнике = Параметры.Сообщение; 
		КонецЕсли;
		
		Код=СоздатьСообщениеМеркурий(СообщениеСтруктураДляСохраненияВСправочнике);
		Параметры.СообщениеСсылка = СообщениеСтруктураДляСохраненияВСправочнике.СообщениеСсылка; // если это M_REC то последующие вызовы Этой функции не будут создавать новое сообщение
		Параметры.Сообщение.СообщениеСсылка = Параметры.СообщениеСсылка;
	КонецЕсли;
	
	ПараметрыТранзакции.Вставить("localTransactionId", Строка(Код));
	ПараметрыТранзакции.Вставить("ИмяМетода", Параметры.ИмяМетода);
	
	Если Параметры.Свойство("ВСДUUID") Тогда
		ПараметрыТранзакции.Вставить("ВСДUUID", Параметры.ВСДUUID);
	КонецЕсли;
	
	//НачатьТранзакцию();
	Если (Параметры.Свойство("ПереотправкаСообщения") И Параметры.ПереотправкаСообщения = Истина) 
		Тогда
		РезультатПодготовкиКПереотправке = ПометитьСообщениеПереотправленным(Параметры.СообщениеСсылка);
		Если РезультатПодготовкиКПереотправке.Успешно = Истина Тогда
			Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, Параметры.ИмяМетода);
		Иначе
			Сообщить(РезультатПодготовкиКПереотправке.ОписаниеОшибки);
		КонецЕсли;
	Иначе
		Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, Параметры.ИмяМетода);
		
	КонецЕсли;
	//ЗафиксироватьТранзакцию();
	
КонецФункции


Функция ПометитьСообщениеПереотправленным(СообщениеМеркурийСсылка)
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	Если Не ЗначениеЗаполнено(СообщениеМеркурийСсылка) Тогда
		Результат.Успешно = Ложь;
		Результат.ОписаниеОшибки = "Не найдено переотправляемое сообщение";
		Возврат Результат;
	Иначе
		СообщениеМеркурий = СообщениеМеркурийСсылка.ПолучитьОбъект();
		
		//Если найдутся строки по которым не доехали статусы - то такое сообщение нельзя переотправлять
		НайденныеapplicationId = СообщениеМеркурий.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизита","applicationId"));
		
		Если НайденныеapplicationId.количество() >0 Тогда
			Результат.Успешно = Ложь;
			Результат.ОписаниеОшибки = "По сообщениею есть обрабатываемые ГИС Меркурий запросы, следует дождаться их обработки. Попробуйте выполнить Обмен.";
			Возврат Результат;
		КонецЕсли;
		
		//удалить ошибки из описания
		СообщениеМеркурий.ОписаниеОшибки = "";
		СообщениеМеркурий.Статус = "ОжидаетОтправки";
		
		//Пометить  #Ошибка в ТЧ
		НайденныеОшибки = СообщениеМеркурий.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизита","Ошибка"));
		
		Для каждого НайденнаяОшибка Из НайденныеОшибки Цикл
			НайденнаяОшибка.ИмяРеквизита = "#Ошибка";
		КонецЦикла;
		
		СообщениеМеркурий.Записать();
		Результат.Успешно = Истина;
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция МеркурийПолучитьМетаданныеПоляСообщения(ВидСтруктуры,ТабМетаданныхПоля) Экспорт
	
	Если ВидСтруктуры = "МеркурийТранспортировка" Тогда
		
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "ВидТранспорта"					, "Строка35");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерВагона"					, "Строка35");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерТранспортногоСредства"		, "Строка35");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерПолуприцепа"				, "Строка35");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерКонтейнера"				, "Строка35"); //(или судна)
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "НомерАвиарейса"					, "Строка35");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "СпособХраненияПриПеревозке"		, "Строка35");
		
	ИначеЕсли ВидСтруктуры = "МеркурийХозяйствующийСубъект" Тогда
		
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GLN"							, "GLN");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "UUID"							, "Строка36");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GUID"							, "Строка36");
		
	ИначеЕсли ВидСтруктуры = "МеркурийПлощадка" Тогда
		
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GLN"							, "GLN");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "UUID"							, "Строка36");
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GUID"							, "Строка36");
		
	ИначеЕсли ВидСтруктуры = "МеркурийЦель" Тогда
		
		ОсновнойМодуль.ДобавитьОписаниеМетаданныхПоляСообщения(ТабМетаданныхПоля, "GUID"							, "Строка36");
		
	КонецЕсли;
	
КонецФункции

Процедура МеркурийОбновитьСтатусыТранзакций() Экспорт
	
	//возьмем все сообщения со статусом Обрабатывается
	
	Запрос = ОсновнойМодуль.ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Значение КАК applicationId,
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка КАК СообщениеСсылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	|ГДЕ
	|	(КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""applicationId""
	|			ИЛИ КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""Обрабатывается"")";
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	КонтурEDI_Сообщения.Ссылка,
	//|	КонтурEDI_Сообщения.Код
	//|ИЗ
	//|	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	//|ГДЕ
	//|	КонтурEDI_Сообщения.Статус = ""Обрабатывается""
	//|	И НЕ КонтурEDI_Сообщения.Архив";
	//
	//Запрос.УстановитьПараметр("ПартнерМеркурий",	ПартнерМеркурий());
	//
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	й=0;
	ВсегоЗаявок = Выборка.Количество();
	Пока Выборка.Следующий() Цикл
		й=й+1;
		ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю результаты по заявке "+й+"/"+ВсегоЗаявок+" "+Выборка.applicationId);		
		//нам следует сконвертировать Организицию и подложить её в качестве IssuerID
		ТекСообщениеСсылка = Выборка.СообщениеСсылка;
		ИсходноеСообщение = ОсновнойМодуль.ПрочитатьСообщение(ТекСообщениеСсылка);
		ПодходящиеПараметры = ВыбратьПараметрыПодключенияДляТранзакции(ТекСообщениеСсылка.ТипСообщения,Новый Структура("Сообщение",ИсходноеСообщение));
		
		ПроверитьОбновленияСтатусаЗаявки(Выборка.applicationId,ПодходящиеПараметры);
		
	КонецЦикла;
	
	ПровереныВСД = ПолучитьКонстантуEDI("М_ПровереныВхВСД");
	ИнтервалПроверкиВСД = ПолучитьКонстантуEDI("М_ИнтервалПроверкиВходящихЭЛВСД");
	Если ИнтервалПроверкиВСД=Неопределено Тогда
		ИнтервалПроверкиВСД = 5; //минут
	КонецЕсли;
	
	Если ПровереныВСД=Неопределено 
		ИЛИ ПровереныВСД+60*ИнтервалПроверкиВСД < ТекущаяДата() Тогда  //пришло время проверить
		
		//Теперь сверим список входящих транзакций к обработке
		СписокПлощадокПоКоторымПолучаемВходящиеВСД = ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийПлощадка", Неопределено);
		СписокПлощадокПоКоторымПолучаемВходящиеВСД.Свернуть("GUID,Наш");
		СписокПлощадокПоКоторымПолучаемВходящиеВСД = СписокПлощадокПоКоторымПолучаемВходящиеВСД.НайтиСтроки(Новый Структура("Наш",Истина));
		
		Для Каждого НашаПлощадка Из СписокПлощадокПоКоторымПолучаемВходящиеВСД Цикл
			GUIDПлощадки = НашаПлощадка.GUID;
			ПроверитьСписокНеобработанныхВходящихВСД(GUIDПлощадки);
		КонецЦикла;
		ОсновнойМодуль.УстановитьКонстантуEDI("М_ПровереныВхВСД",ТекущаяДата());
	Иначе
		//еще не пришло время их проверять
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуПоВходящимВСДИзФрагментаОтвета(ТаблицаВСД,СписокВСДXDTO)
	
	Для Каждого СтрокаВСДXDTO Из СписокВСДXDTO Цикл
		
		НоваяСтрока = ТаблицаВСД.Добавить();
		НоваяСтрока.ДатаВСД 	= ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(СтрокаВСДXDTO,"issueDate"));
		Если СтрокаВСДXDTO.Свойства().Получить("waybillNumber")<>Неопределено Тогда 
			НоваяСтрока.НомерТТН 	= ВычислитьXDTO(СтрокаВСДXDTO,"waybillNumber");
		КонецЕсли;
		НоваяСтрока.Статус = ВычислитьXDTO(СтрокаВСДXDTO,"status");
		Если СтрокаВСДXDTO.Свойства().Получить("waybillDate")<>Неопределено Тогда 
			НоваяСтрока.ДатаТТН 	= ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(СтрокаВСДXDTO,"waybillDate"));
		КонецЕсли;
		НоваяСтрока.ВсдUUID 	= ВычислитьXDTO(СтрокаВСДXDTO,"uuid");
		
		НоваяСтрока._ОбъектXDTO  = СтрокаВСДXDTO;
	КонецЦикла;
	
КонецПроцедуры


//главное для понимания: ВСД - это только строка входящего документа ПТУ.
//имея список ВСД важно понять какие ТТН в них и уже в разрезе ТТН создавать сущности "Приходная накладная" в 1С
Процедура ПроверитьСписокНеобработанныхВходящихВСД(GUIDПлощадки,ПеречитатьСНуля=Ложь)
	
	ДатаТекущегоЗапроса = ТекущаяДата();
	
	Если НЕ ПеречитатьСНуля Тогда 
		ПрочитаноДо = ПолучитьКонстантуEDI("АктуалВхВСД_"+GUIDПлощадки);
		Если ПрочитаноДо = Неопределено Тогда 
			ПеречитатьСНуля = Истина;
		КонецЕсли;
	КонецЕсли;
	
	////Отладка если что
	//ПрочитаноДо=НачалоДня(ТекущаяДата());
	//ПеречитатьСНуля = Ложь;
	
	ВычиталиВсеОформленные = Ложь;
	Если ПеречитатьСНуля = Ложь Тогда  
		ВТаблицеТолькоОформленные = Ложь;
		РезультатОперации = ПолучитьИзмененияВСДЗаПериод(GUIDПлощадки,ПрочитаноДо,Неопределено);
	Иначе
		ВТаблицеТолькоОформленные = Истина;
		//получим список всех входящих ВСД
		//найдем среди них те, которые не фигурируют в справочнике
		//в разрезе waybillNumber и waybillDate если нет номера - значит каждый из них разный
		//это ключевая таблица группировки ВСД по документам ПТУ а также соотнесения со списком ТД
		РезультатОперации = ПолучитьВсеОформленныеВСДПлощадки(GUIDПлощадки,ВычиталиВсеОформленные);
	КонецЕсли;
	
	ТаблицаВСД 				= РезультатОперации.ТаблицаВСД;
	
	Если ТаблицаВСД.Количество() > 0 Тогда 
		// в полученной таблице гарантированно уникальный UUID ВСД - даже если в одной сессии docFlow был вычитан интегравал, где было и оформление и аннулирование - такие ВСД будут 1 строкой
		
		//Обработка таблицы
		ТаблицаUUIDВСД = ТаблицаВСД.Скопировать(, "ВсдUUID");
		
		ТаблицаСоответствийUUIDСохраненныеВСД = ПолучитьНовыеЗаписиОВходящихВСДИзСпискаЗагруженных(ТаблицаUUIDВСД);
		ТаблицаСоответствийUUIDСохраненныеВСД.Индексы.Добавить("ВсдUUID");
		
		ОсновнойМодуль.Состояние_КонтурEDI("Обрабатываю новые входящие электронные ВСД");
		й=0;
		ВсегоТТН = ТаблицаВСД.Количество();
		Для Каждого ТекВСД Из ТаблицаВСД Цикл
			й=й+1;
			ОсновнойМодуль.Состояние_КонтурEDI("Обрабатываю новые входящие электронные ВСД "+й+"/"+ВсегоТТН);
			ВСДСсылка = ТаблицаСоответствийUUIDСохраненныеВСД.Найти(ТекВСД, "ВсдUUID");
			
			Если ВСДСсылка = Неопределено Тогда
				ВходящееСообщение = ПолучитьСообщениеВходящейТТН();
				ЗаполнитьСообщениеВходящегоВСД(ВходящееСообщение, ТекВСД._ОбъектXDTO);
				
				// ВСД Исходящий
				Если ТипЗнч(ВходящееСообщение.Организация) <> Тип("СправочникСсылка.Организации") Тогда
					Продолжить;
				КонецЕсли;
				
				КонвертироватьТранзакциюМеркурий_В_1С(ВходящееСообщение);
				ЗаписатьВходящееСообщениеМеркурий(ВходящееСообщение);
				ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(ВходящееСообщение.СообщениеСсылка, "Статус", ТекВСД.Статус);
				ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(ВходящееСообщение.СообщениеСсылка, "Контрагент", ВходящееСообщение.ХозяйствующийСубъект1С);
				
				Продолжить;
			КонецЕсли;
			
			Если ОсновнойМодуль.ПолучитьЗначениеСвойстваОбъекта(ВходящееСообщение.СообщениеСсылка, "Статус") <> ТекВСД.Статус Тогда
				ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(ВСДСсылка, "Статус", ТекВСД.Статус);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОсновнойМодуль.УстановитьКонстантуEDI("АктуалВхВСД_"+GUIDПлощадки,ДатаТекущегоЗапроса);
	
КонецПроцедуры


Функция ПреобразоватьДатуwaybillDate_В_1С(Строка)
	
	Если ЗначениеЗаполнено(Строка) Тогда
		МассивДаты = ОсновнойМодуль.РазложитьСтроку(Строка,"-");
		Возврат Дата(Число(МассивДаты[0].Значение),Число(МассивДаты[1].Значение),Число(МассивДаты[2].Значение));
	КонецЕсли;

КонецФункции // ПреобразоватьДатуwaybillDate_В_1С(Строка)()

Функция ЗаписатьВходящееСообщениеМеркурий(ВходящееСообщение)
	
	// здесь - закинуть в справочник Сообщений получившееся сообщение;
	СоздатьСообщениеМеркурий(ВходящееСообщение);
	
КонецФункции // ЗаписатьВходящееСообщениеМеркурий()

	
Функция ПолучитьСообщениеВходящейТТН()
	
	ПолучитьМетаданныеСообщенияМеркурий("M_REC", "Входящее");
	Сообщение = ОсновнойМодуль.ПолучитьСтруктуруСообщения("M_REC","Входящее");
	Сообщение.Направление = "Входящее";
	Сообщение.ТипСообщения = "M_INC";
	
	Возврат Сообщение;
	
КонецФункции

//ждет на входе или список XDTO VetDoc или список строк ТЧ у которой есть колонка _ОбъектXDTO и там VetDoc
Функция ЗаполнитьСообщениеВходящегоВСД(Сообщение,СтрокиВСДXDTO,ТипСообщения=Неопределено)
	
	
	Если ТипЗнч(СтрокиВСДXDTO) = Тип("ОбъектXDTO") Тогда
		ИсточникДляШапки = СтрокиВСДXDTO;
	ИначеЕсли ТипЗнч(СтрокиВСДXDTO) = Тип("СписокXDTO")
		ИЛИ ТипЗнч(СтрокиВСДXDTO) = Тип("Массив") Тогда
		Если ТипЗнч(СтрокиВСДXDTO) = Тип("СписокXDTO") Тогда
			ИсточникДляШапки = СтрокиВСДXDTO[0];
		Иначе
			ИсточникДляШапки = СтрокиВСДXDTO[0]._ОбъектXDTO;
		КонецЕсли;
	КонецЕсли;
	//заполнение Сообщения по СтрокиВСДXDTO
	
	//это ключи по которым была свертка (3 шт.)
	Сообщение.ДокументEDI.Номер = ВычислитьXDTO(ИсточникДляШапки,"waybillNumber");
	Сообщение.ДокументEDI.Дата = ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(ИсточникДляШапки,"waybillDate"));
	Сообщение.ДатаПоставки = ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(ИсточникДляШапки,"issueDate"));
	
	
	Сообщение.Партнер = ПартнерМеркурий();
	Сообщение.ПлощадкаEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.enterprise.guid");
	Сообщение.ПлощадкаEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.enterprise.uuid");
	Сообщение.ПлощадкаПолучательEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.enterprise.guid");
	Сообщение.ПлощадкаПолучательEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.enterprise.uuid");
	
	Сообщение.ХозяйствующийСубъектEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.businessEntity.guid");
	Сообщение.ХозяйствующийСубъектEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.businessEntity.uuid");
	Сообщение.ХозяйствующийСубъектПолучательEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.businessEntity.guid");
	Сообщение.ХозяйствующийСубъектПолучательEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.businessEntity.uuid");
	//следует сразу сконвертировать в Организацию  т.к. этоn реквизит поеltn в реквизит справочника
	Сообщение.Организация 	= КонвертироватьЗначениеМеркурийв1C(Сообщение.ХозяйствующийСубъектПолучательEDI.GUID,,"МеркурийХС");
	
	//transportInfo
	Сообщение.Транспорт.ВидТранспорта = ВычислитьXDTO(ИсточникДляШапки,"transportInfo.transportType");	
	Сообщение.Транспорт.НомерТранспортногоСредства = ВычислитьXDTO(ИсточникДляШапки,"transportInfo.transportNumber.vehicleNumber");	
	Сообщение.Транспорт.СпособХраненияПриПеревозке = ВычислитьXDTO(ИсточникДляШапки,"transportStorageType");
	
	Если ТипЗнч(СтрокиВСДXDTO) = Тип("ОбъектXDTO") Тогда
		СтрокаТоваровXDTO = СтрокиВСДXDTO;
			НоваяСтрокаТоваровСообщения = Сообщение.Товары.Добавить();
			НоваяСтрокаТоваровСообщения.НомерСтроки = 1;
			ЗаполнитьСтрокуСообщенияИзXDTO(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO);
	ИначеЕсли ТипЗнч(СтрокиВСДXDTO) = Тип("СписокXDTO")
		ИЛИ ТипЗнч(СтрокиВСДXDTO) = Тип("Массив") Тогда
		й=0;
		Для Каждого СтрокаТоваровXDTO Из СтрокиВСДXDTO Цикл
			//здесь также будут прилетать ВСД которые в данный момент не нужны (например, уничтожение исходных партий)
			//Такие ВСД следует пропустить
			Если ТипСообщения = "M_DES" Тогда
				Если СтрокаТоваровXDTO.type <> "TRANSPORT" Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			й=й+1;
			НоваяСтрокаТоваровСообщения = Сообщение.Товары.Добавить();
			НоваяСтрокаТоваровСообщения.НомерСтроки = й;
			Если ТипЗнч(СтрокаТоваровXDTO) = Тип("ОбъектXDTO") Тогда
				ЗаполнитьСтрокуСообщенияИзXDTO(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO);
			Иначе
				ЗаполнитьСтрокуСообщенияИзXDTO(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO._ОбъектXDTO);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // КонвертироватьВходящийВСД_EDI_В_1С()

Процедура ЗаполнитьСтрокуСообщенияИзXDTO(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO)
	
	НоваяСтрокаТоваровСообщения.GUID = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.subProduct.guid");
	НоваяСтрокаТоваровСообщения.UUID = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.subProduct.uuid");
	НоваяСтрокаТоваровСообщения.unitGUID = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.unit.guid");
	НоваяСтрокаТоваровСообщения.unitUUID = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.unit.uuid");
	НоваяСтрокаТоваровСообщения.ВетСертификатUUID = ВычислитьXDTO(СтрокаТоваровXDTO,"uuid");
	НоваяСтрокаТоваровСообщения.ВетСертификатБлагополучиеМестности	 = ВычислитьXDTO(СтрокаТоваровXDTO,"locationProsperity");
	НоваяСтрокаТоваровСообщения.ВетСертификатВрачДолжность			 = ВычислитьXDTO(СтрокаТоваровXDTO,"confirmedBy.post");
	НоваяСтрокаТоваровСообщения.ВетСертификатВрачФИО				 = ВычислитьXDTO(СтрокаТоваровXDTO,"confirmedBy.fio");
	НоваяСтрокаТоваровСообщения.ВетСертификатДата					 = ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(СтрокаТоваровXDTO,"issueDate"));
	НоваяСтрокаТоваровСообщения.ВетСертификатНомер					 = ВычислитьXDTO(СтрокаТоваровXDTO,"issueNumber"); //не отдают этот номер - это очень плохо
	НоваяСтрокаТоваровСообщения.ВетСертификатОбследованоВетВрачом	 = СпасибоЗаОшибкиВXSDСхеме("boolean",ВычислитьXDTO(СтрокаТоваровXDTO,"cargoInspected"));
	НоваяСтрокаТоваровСообщения.ВетСертификатОсобыеОтметки			 = ВычислитьXDTO(СтрокаТоваровXDTO,"specialMarks");
	//НоваяСтрокаТоваровСообщения.ВетСертификатРезультатыЭкспертизы	 = ВычислитьXDTO(СтрокаТоваровXDTO,"");
	НоваяСтрокаТоваровСообщения.ВетСертификатСерия					 = ВычислитьXDTO(СтрокаТоваровXDTO,"issueSeries");
	НоваяСтрокаТоваровСообщения.ВетСертификатСпособХраненияПриПеревозке	 = ВычислитьXDTO(СтрокаТоваровXDTO,"transportStorageType");
	НоваяСтрокаТоваровСообщения.ВетСертификатФорма					 = ВычислитьXDTO(СтрокаТоваровXDTO,"form");
	НоваяСтрокаТоваровСообщения.ВетСертификатЭкспертиза				 = СпасибоЗаОшибкиВXSDСхеме("boolean",ВычислитьXDTO(СтрокаТоваровXDTO,"cargoExpertized"));
	НоваяСтрокаТоваровСообщения.ДатаПроизводства 					 = ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(СтрокаТоваровXDTO,"batch.dateOfProduction.firstDate"));
	НоваяСтрокаТоваровСообщения.ДатаПроизводства2					 = ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(СтрокаТоваровXDTO,"batch.dateOfProduction.secondDate"));
	НоваяСтрокаТоваровСообщения.СрокГодности						 = ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(СтрокаТоваровXDTO,"batch.expiryDate.firstDate"));
	НоваяСтрокаТоваровСообщения.СрокГодности2						 = ПолучитьМеркурийДатуИзОтвета(ВычислитьXDTO(СтрокаТоваровXDTO,"batch.expiryDate.secondDate"));
	НоваяСтрокаТоваровСообщения.ЕдиницаИзмеренияУпаковокUUID		 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.packingList.packingForm.UUID");
	НоваяСтрокаТоваровСообщения.Количество							 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.volume");
	НоваяСтрокаТоваровСообщения.КоличествоУпаковок					 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.packingAmount");
	
	НоваяСтрокаТоваровСообщения.Наименование						 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.productItem.name");
	НоваяСтрокаТоваровСообщения.productItemUUID						 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.productItem.uuid");
	
	//маркировки достанем из списка и сложим через запятую
	СписокМаркировок =   ВычислитьXDTO(СтрокаТоваровXDTO,"batch.productMarkingList");
	Если  ТипЗнч(СписокМаркировок) = Тип("ОбъектXDTO") Тогда
		НоваяСтрокаТоваровСообщения.Маркировка							 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.productMarkingList.productMarking");
	ИначеЕсли ТипЗнч(СписокМаркировок) = Тип("СписокXDTO") Тогда
		Для Каждого ЭлементСпискаМаркировок Из СписокМаркировок Цикл
			НоваяСтрокаТоваровСообщения.Маркировка = ""+НоваяСтрокаТоваровСообщения.Маркировка + ?(ЗначениеЗаполнено(НоваяСтрокаТоваровСообщения.Маркировка),", ","") +ВычислитьXDTO(ЭлементСпискаМаркировок,"productMarking");
		КонецЦикла;
	КонецЕсли;
	
	НоваяСтрокаТоваровСообщения.НекачественныйГруз					 = СпасибоЗаОшибкиВXSDСхеме("boolean",ВычислитьXDTO(СтрокаТоваровXDTO,"batch.lowGradeCargo"));
	НоваяСтрокаТоваровСообщения.ПлощадкаПроизводительGUID			 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.producerList.producer.enterprise.guid");
	НоваяСтрокаТоваровСообщения.Скоропортящаяся						 = СпасибоЗаОшибкиВXSDСхеме("boolean",ВычислитьXDTO(СтрокаТоваровXDTO,"batch.perishable"));
	НоваяСтрокаТоваровСообщения.Статус								 = ВычислитьXDTO(СтрокаТоваровXDTO,"status");
	НоваяСтрокаТоваровСообщения.СтранаUUID							 = ВычислитьXDTO(СтрокаТоваровXDTO,"batch.countryOfOrigin.UUID");
	НоваяСтрокаТоваровСообщения.ЦельEDI								 = ВычислитьXDTO(СтрокаТоваровXDTO,"purpose.guid");
	
КонецПроцедуры


Функция СпасибоЗаОшибкиВXSDСхеме(Имя,Значение)
	
	Если Имя = "boolean" Тогда
		Если Значение = "true" Тогда
			Возврат Истина;
		ИначеЕсли Значение = "false" Тогда
			Возврат Ложь;
		ИначеЕсли Значение = "1" Тогда
			Возврат Истина;
		ИначеЕсли Значение = "0" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;
			
КонецФункции


Функция ПолучитьМассивВСДПоТТНXTDO(НомерТТН,ДатаТТН,ДатаВСД,СписокВСДXDTO)
	
	МассивСтрокXDTO = Новый Массив;
	Для Каждого СтрокаВСДXDTO Из СписокВСДXDTO Цикл
		
		Если СтрокаВСДXDTO.Свойства().Получить("waybillNumber")=Неопределено  
			ИЛИ СтрокаВСДXDTO.Свойства().Получить("waybillDate")=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НомерТТН = СтрокаВСДXDTO.waybillNumber 
			И ДатаТТН = ПреобразоватьДатуwaybillDate_В_1С(СтрокаВСДXDTO.waybillDate)
			И ДатаВСД = ПреобразоватьДатуwaybillDate_В_1С(СтрокаВСДXDTO.issueDate) Тогда
			МассивСтрокXDTO.Добавить(СтрокаВСДXDTO) ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСтрокXDTO;
	
КонецФункции // ПолучитьМассивВСДПоТТНXTDO()


Функция ПолучитьНовыеЗаписиОВходящихВСДИзСпискаЗагруженных(ТаблицаUUIDВСД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СписокВСД.ВсдUUID
	               |ПОМЕСТИТЬ СписокВСД
	               |ИЗ
	               |	&ТаблицаUUIDВСД КАК СписокВСД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокВСД.ВсдUUID,
	               |	КонтурEDI_Сообщения.Ссылка
	               |ИЗ
	               |	СписокВСД КАК СписокВСД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	               |		ПО СписокВСД.ВсдUUID = КонтурEDI_Сообщения.ID";
	
	Запрос.УстановитьПараметр("ТаблицаUUIDВСД", ТаблицаUUIDВСД);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();	
	
КонецФункции // ПолучитьНовыеЗаписиОВходящихВСДИзСпискаЗагруженных()


Функция СписокВходящихОформленныхВСДМеркурий(GUIDПлощадки,Смещение)
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяМетода","getVetDocumentListRequest"); 
	//преобразовать Сообщение в XDTO
	
	ПараметрыТранзакции = ЗаписатьЗапросСпискаВходящих(GUIDПлощадки);
	ПараметрыТранзакции.listOptions.offset = Смещение;
	//выполнитьЗапрос
	//ОбменССистемойВетис.СоздатьЗаписьЖурналаЗапросов(ПараметрыОбмена);
	
	ПараметрыТранзакции.Вставить("ИмяМетода", Параметры.ИмяМетода);
	ДождатьсяРезультата = Истина;
	Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),,GUIDПлощадки), Параметры.ИмяМетода,ДождатьсяРезультата);
	
	Возврат Ответ;
	
КонецФункции

Функция ЗаписатьЗапросСпискаВходящих(GUIDПлощадки)
	
	ПараметрыТранзакции = Новый Структура();
	МассивСписковXDTO = Новый Массив();
	
	ListOptions = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/base", "ListOptions");
	ListOptions.count = 1000;
	
	ПараметрыТранзакции.Вставить("localTransactionId", 	"IncomingRobot");
	ПараметрыТранзакции.Вставить("listOptions",		ListOptions);
	ПараметрыТранзакции.Вставить("initiator", 		ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),,GUIDПлощадки).user);
	
	
	ВетДокТип = КорневаяФабрика().Тип("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "VetDocumentType");
	vetDocumentType = КорневаяФабрика().Создать(ВетДокТип, "INCOMING");
	ПараметрыТранзакции.Вставить("vetDocumentType", 		vetDocumentType);	
	
	ВетДокСтатусТип = КорневаяФабрика().Тип("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "VetDocumentStatus");
	vetDocumentStatus = КорневаяФабрика().Создать(ВетДокСтатусТип, "CONFIRMED");
	ПараметрыТранзакции.Вставить("vetDocumentStatus", 		vetDocumentStatus);	
	//businessMember
	//или
	
	enterpriseGuidТип = КорневаяФабрика().Тип("http://api.vetrf.ru/schema/cdm/base", "UUID");
	enterpriseGuid = КорневаяФабрика().Создать(enterpriseGuidТип, GUIDПлощадки);      //заглушка
	ПараметрыТранзакции.Вставить("enterpriseGuid", 		enterpriseGuid);	
	
	Возврат ПараметрыТранзакции;
	

КонецФункции // ЗаписатьСообщениеМеркурийXDTO()

Процедура ВыполнитьПакетТранзакций(МассивМеркурий) Экспорт 
	
	ОчиститьКэшСкладскихЖурналов();
	
	Попытка
		УведомилОНевозможностиОтраженияБумажныхПакетно = Ложь;
		ПакетныйРежим = Истина;
		ВсегоТранзакций = МассивМеркурий.Количество();
		й=0;
		Для каждого ТранзакцияКОтправке Из МассивМеркурий Цикл
			й=й+1;
			ОсновнойМодуль.Состояние_КонтурEDI("Обрабатываю транзакцию Меркурий: "+й+"/"+ВсегоТранзакций);
			
			Если ЗначениеЗаполнено(ТранзакцияКОтправке.СообщениеСсылка) 
				И ТранзакцияКОтправке.СообщениеСсылка.Архив Тогда
				Продолжить;
			КонецЕсли;
			
			//Гашение входящих ВСД отдельно 
			Если ТранзакцияКОтправке.ТипСообщения = "M_INC" Тогда
				ПогаситьВходящийВСДПакетно(ТранзакцияКОтправке.Документ,ТранзакцияКОтправке.СообщениеСсылка);
				Продолжить;
		    КонецЕсли;
			
			Если ТранзакцияКОтправке.ТипСообщения = "M_REC" Тогда
				Если УведомилОНевозможностиОтраженияБумажныхПакетно = Ложь Тогда 
					УведомилОНевозможностиОтраженияБумажныхПакетно = Истина;
					Сообщить("Гашение с Бумажных ВСД осуществляется только через карточку для дополнительного контроля");
					//не пытайтесь отключить эту проверку - транзакция все равно не пройдет :)
				КонецЕсли;
				Продолжить; 
			КонецЕсли;
			
			
			ТипСообщения 			= ТранзакцияКОтправке.ТипСообщения;
			Документ 				= ТранзакцияКОтправке.Документ;
			ПереотправкаСообщения 	= ТранзакцияКОтправке.ПереотправкаСообщения;
			СообщениеСсылка 		= ТранзакцияКОтправке.СообщениеСсылка;
			
			Сообщение = ОсновнойМодуль.ПолучитьСтруктуруСообщения(ТипСообщения,"Исходящее");
			
			ПодготовитьТранзакциюМеркурий(ТипСообщения,Документ,Сообщение);
			РезультатПроверки = ПроверитьТранзакциюМеркурий(Сообщение);
			
			Если НЕ РезультатПроверки.Успешно Тогда
				Продолжить;
			КонецЕсли;
			
			//сразу
			Параметры = Новый Структура();
			Параметры.Вставить("ОтправитьСообщениеИзФормы",	ложь);
			Параметры.Вставить("Сообщение",					Сообщение);
			Параметры.Вставить("ПереотправкаСообщения",	ПереотправкаСообщения);
			Параметры.Вставить("СообщениеСсылка",	СообщениеСсылка);
			Параметры.Вставить("ИмяМетода",			ПолучитьИмяМетодаМеркурийПоТипуСообщения(ТипСообщения));
			
			ВыполнитьТранзакциюМеркурий(ТипСообщения,Документ,Параметры);
			
		КонецЦикла;
		
		ПакетныйРежим = Ложь;	
	Исключение
		ПакетныйРежим = Ложь;	
	КонецПопытки;
	
	ОчиститьКэшСкладскихЖурналов();
	
КонецПроцедуры

Процедура ОчиститьКэшСкладскихЖурналов()

	Если ОсновнойМодуль.ВнутреннийКэш <> Неопределено Тогда
		
		Для каждого СтрокаКэша Из ОсновнойМодуль.ВнутреннийКэш Цикл
			Если Лев(СтрокаКэша.Ключ,24) = "Меркурий_СкладскойЖурнал" Тогда
				ОсновнойМодуль.ЭДО_Кэш_Очистить(СтрокаКэша.Ключ);
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


//Подготовка сообщений Меркурий
Функция ПолучитьМетаданныеСообщенияМеркурий(ТипСообщения,Направление = "Исходящее") Экспорт
	
	Результат = ОсновнойМодуль.ЭДО_Кэш_Прочитать("МетаданныеСообщения_"+ТипСообщения+"_"+Направление);
	
	Если НЕ Результат=Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТабМетаданных = Новый ТаблицаЗначений;
	ТабМетаданных.Колонки.Добавить("ИмяПоля");
	ТабМетаданных.Колонки.Добавить("ИмяТаблицы");
	ТабМетаданных.Колонки.Добавить("Принадлежность");
	ТабМетаданных.Колонки.Добавить("ТипEDI");
	ТабМетаданных.Колонки.Добавить("ВидСтруктурыEDI");
	ТабМетаданных.Колонки.Добавить("ВыделяемыеПоляСписка");
	ТабМетаданных.Колонки.Добавить("Тип1С");
	
	// описание таблиц для формирования структуры сообщения. Чтобы во всех модулях было однозначное название полей.
	
	ТаблицаЗависимыхТипов = ОсновнойМодуль.ПолучитьНастройкуЗависимыхТипов(ТипСообщения, Направление);
		                                                                                                              
	// Шапка
																	  												// тип EDI			//вид структуры  	// поля 	// тип 1С
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТипСообщения"				,						, "="	, "ТипСообщения"	, 					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Направление"				,						, "="	, "Направление"		, 					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ID"							,						, "="	, "Идентификатор"	, 					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаСоздания"				,						, "="	, "ДатаВремя"		, 					,		,							);
	//Партнер - наследие EDI
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Партнер"					,						, "1С"	, 					,					,		, "Партнер"					);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Организация"				,						, "1С"	, 					,					,		,							);
	
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Документ"					,						,		, "Структура"		, "Документ"		,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Статус"						,						, "="	, "Строка36"		,					,		,							);
	
	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Накладная"				,						,		, "Структура"		, "Накладная"		,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Приемка"					,						,		, "Структура"		, "Приемка"			,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СчетФактура"				,						,		, "Структура"		, "СчетФактура"		,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Контракт"					,						, "EDI"	, "Структура"		, "Документ"		,		, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	
	//consignor
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ХозяйствующийСубъект"		,						,		, "Структура"		, "МеркурийХозяйствующийСубъект", "GLN"	, 	, );
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Площадка"					,						,		, "Структура"		, "МеркурийПлощадка"			, "GLN"	, 	, );
	
	Если ТипСообщения <> "M_PRD" Тогда
	//consignee
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ХозяйствующийСубъектПолучатель",					,		, "Структура"		, "МеркурийХозяйствующийСубъект", "GLN"	, 	, );
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПлощадкаПолучатель"			,						,		, "Структура"		, "МеркурийПлощадка"			, "GLN"	, 	, );
	КонецЕсли;

	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Плательщик"					,						,		, "Структура"		, "ЮрФизЛицо"		, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ТочкаДоставки"				,						, "1С"	, 					, 					,		, "ТочкаДоставки"			);
	
	//ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПромежуточныйГрузополучатель",					,		, "Структура"		, "ЮрФизЛицо"		, "GLN"	, "ТипЗависитОтСообщения"	, ТаблицаЗависимыхТипов);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Транспорт"					,						, "="	, "Структура"		, "МеркурийТранспортировка"	,		, , );
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаПоставки"				,						, "="	, "ДатаВремя"		,					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаОтгрузки"				,						, "="	, "ДатаВремя"		,					,		,							);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Комментарий"				,						, "="	, "Строка2560"		,					,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Цель"						,						,  		, "Структура"		, "МеркурийЦель"	,		,							);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "БлагополучиеМестности"		,						, "="	, "Строка255"		, 			,		,									);
	Если ТипСообщения = "M_MOV"
		ИЛИ ТипСообщения = "M_DES" Тогда	
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "РазрешениеНаВывозНомер"		,						, "="	, "Строка255"		, 			,		,									);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "РазрешениеНаВывозДата"		,						, "="	, "ДатаВремя"		, 			,		,									);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Перевозчик"					,						,		, "Структура"		, "МеркурийХозяйствующийСубъект", "GLN"	, 	, );
	КонецЕсли;
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Товары"						, "Товары"				, "="	, "ТабличнаяЧасть"	,					,		,							);
	
	Если ТипСообщения = "M_PRD" Тогда  //Сырье необходимо отделить от Товаров т.к. возможно что произведется 1 позиция из 2+
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Завершена"				,						, "="	, "Булево"			,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ИдентификаторПроизводственнойТранзакции",		, "="	, "Строка255"		,					,		,							); //Только для незавершенных
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Сырье"					, "Сырье"				, "="	, "ТабличнаяЧасть"	,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерСтроки"			, "Сырье"				, "1С"	, 					,					,		, 							);
		
		// эти данные по сути только для того чтобы в дальнейшем обрезать лишние строки складского журнала по сырью в момент подбора
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Наименование"			, "Сырье"				, "EDI"	, "Строка256"		,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Номенклатура"			, "Сырье"				, "1С"	, 					,					,		, "Номенклатура"			);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "GUID"					, "Сырье"				, "EDI"	, "Строка36"		,					,		, 							);
		
		//наша номенклатура productItem
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "productItemUUID"		, "Сырье"				, "EDI"	, "Строка36"		,					,		, 							);
		
		//идентификатор партии источника
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ИсходнаяПартияНомер"	, "Сырье"				, "EDI"	, "Строка36"		,					,		, 		 					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ИсходнаяПартияGUID"		, "Сырье"				, "EDI"	, "Строка36"		,					,		, 		 					);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Количество"				, "Сырье"				, "="	, "ЧислоКоличество"	,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмерения"		, "Сырье"				, "1С"	, 					,					,		, "МеркурийЕдиницаИзмерения"		);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "unitUUID"				, "Сырье"				, "EDI"	, "Строка36"		,					,		,		 );
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "unitGUID"				, "Сырье"				, "EDI"	, "Строка36"		,					,		, 		 );
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоУпаковок"		, "Сырье"				, "="	, "ЧислоКоличество"	,					,		,							);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмеренияУпаковок", "Сырье"				, "1С"	, 					,					,		, "МеркурийЕдиницаИзмерения"		);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмеренияУпаковокUUID", "Сырье"			, "EDI"	, "Строка36"		,					,		,							);
		
		//доп отбор партии источника
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаПроизводства"			, "Сырье"				, "="	, "ДатаВремя"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаПроизводства2"			, "Сырье"				, "="	, "ДатаВремя"		,					,		, 								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СрокГодности"				, "Сырье"				, "="	, "ДатаВремя"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СрокГодности2"				, "Сырье"				, "="	, "ДатаВремя"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Маркировка"					, "Сырье"				, "="	, "Строка256"		, 					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Скоропортящаяся"			, "Сырье"				, "="	, "Булево"		,					,		, 								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Страна"						, "Сырье"				, "1С"	,					,					,		, "Страна"						);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СтранаUUID"					, "Сырье"				, "EDI"	, "Строка36"		,					,		, 								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПлощадкаПроизводитель"		, "Сырье"				,"1С"	, 					, 					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПлощадкаПроизводительGUID"	, "Сырье"				, "="	, 					, 					,		, 								);
	КонецЕсли;
	// Табличная часть
	
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НомерСтроки"				, "Товары"				, "1С"	, "Строка36"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Наименование"				, "Товары"				, "EDI"	, "Строка256"		,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Номенклатура"				, "Товары"				, "1С"	, 					,					,		, "Номенклатура"				);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ХарактеристикаНоменклатуры"	, "Товары"				, "1С"	, 					,					,		, "ХарактеристикаНоменклатуры"	);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Количество"					, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмерения"			, "Товары"				, "1С"	, 					,					,		, "МеркурийЕдиницаИзмерения"			);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоУпаковок"			, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмеренияУпаковок"	, "Товары"				, "1С"	, 					,					,		, "МеркурийЕдиницаИзмерения"			);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЕдиницаИзмеренияУпаковокUUID", "Товары"				, "EDI"	, "Строка36"		,					,		,		 );
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Статус"						, "Товары"				, "="	, "Строка36"		,					,		,								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "GTIN"						, "Товары"				, "EDI"	, "GTIN"			,					,		,								);
	
	//идентификаторы  номенклатуры
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "UUID"						, "Товары"				, "EDI"	, "Строка36"		,					,		,		 );
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "GUID"						, "Товары"				, "EDI"	, "Строка36"		,					,		, 		 );
	
	//идентификаторы  единицы измерения
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "unitUUID"					, "Товары"				, "EDI"	, "Строка36"		,					,		,		 );
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "unitGUID"					, "Товары"				, "EDI"	, "Строка36"		,					,		, 		 );
	
	//наша номенклатура productItem
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "productItemUUID"			, "Товары"				, "EDI"	, "Строка36"		,					,		, 							);
	
	Если ТипСообщения <> "M_PRD" Тогда  //в производственной операции это поле таблицы "Сырье"
		//идентификатор партии источника
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ИсходнаяПартияНомер"	, "Товары"				, "EDI"	, "Строка36"		,					,		, 		 );
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ИсходнаяПартияGUID"		, "Товары"				, "EDI"	, "Строка36"		,					,		, 		 );
	КонецЕсли;
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Страна"						, "Товары"				, "1С"	,					,					,		, "Страна"						);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СтранаUUID"					, "Товары"				, "EDI"	, "Строка36"		,					,		, 								);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаПроизводства"			, "Товары"				, "="	, "ДатаВремя"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ДатаПроизводства2"			, "Товары"				, "="	, "ДатаВремя"		,					,		, 								);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СрокГодности"				, "Товары"				, "="	, "ДатаВремя"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СрокГодности2"				, "Товары"				, "="	, "ДатаВремя"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Маркировка"					, "Товары"				, "="	, 					, 					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "SSCC"						, "Товары"				, "="	, 					, 					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Скоропортящаяся"			, "Товары"				, "="	, "Булево"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Аннулирован"				, "Товары"				, "="	, "Булево"		,					,		, 								);
	
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "НекачественныйГруз"			, "Товары"				, "="	, "Булево"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПлощадкаПроизводитель"		, "Товары"				,"1С"	, 					, 					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ПлощадкаПроизводительGUID"	, "Товары"				, "="	, 					, 					,		, 								);
		
	//в этих полях будем хранить пришедшие номера ВСД
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатUUID"						, "Товары"				, "="	, "Строка36"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатСерия"						, "Товары"				, "="	, "Строка255"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатНомер"						, "Товары"				, "="	, "Строка255"		,					,		, 								);
	ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатДата"						, "Товары"				, "="	, "ДатаВремя"		,					,		, 								);
	
	Если ТипСообщения = "M_REC" Тогда
		//расширение таблицы товаров
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатФорма"						, "Товары"				, "="	, "Строка255"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ЦельEDI"								, "Товары"				, "="	, "Строка36"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "Цель1С"									, "Товары"				, "="	, "Строка255"		,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатСпособХраненияПриПеревозке", "Товары"				, "="	, "Строка36"		,					,		, 								);
		//тут будует вложенная таблица (когда-нибудь)
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатРезультатыЭкспертизы"		, "Товары"				, "="	, "Строка255"		,					,		, 								);
		
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатВрачФИО"					, "Товары"				, "="	, "Строка36"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатВрачДолжность"				, "Товары"				, "="	, "Строка36"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатБлагополучиеМестности"		, "Товары"				, "="	, "Строка255"		,					,		, 								);
	КонецЕсли;
	
	Если ТипСообщения = "M_REC" ИЛИ ТипСообщения = "M_INC" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатОсобыеОтметки"				, "Товары"				, "="	, "Строка255"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатОбследованоВетВрачом"		, "Товары"				, "="	, "Булево"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатЭкспертиза"				, "Товары"				, "="	, "Булево"		,					,		, 								);
	Иначе
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатОсобыеОтметки"				, 						, "="	, "Строка255"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатОбследованоВетВрачом"		, 						, "="	, "Булево"		,					,		, 								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "ВетСертификатЭкспертиза"				, 						, "="	, "Булево"		,					,		, 								);
	КонецЕсли;
	
	Если ТипСообщения = "M_REC" или  ТипСообщения = "M_INC" Тогда
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоКПодтверждению"			, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "КоличествоУпаковокКПодтверждению"	, "Товары"				, "="	, "ЧислоКоличество"	,					,		,								);
		ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных, "СтатусРасхождений"					, "Товары"				, "="	, "Строка36"	,					,		,								);
	КонецЕсли;

	
	ОбработкаСобытияПодключаемогоМодуля("ИзменитьМетаданныеСообщения",,Новый Структура("ТаблицаМетаданных,ТаблицаЗависимыхТипов,ТипСообщения,Направление",ТабМетаданных,ТаблицаЗависимыхТипов,ТипСообщения,Направление));
	
	ОсновнойМодуль.ЭДО_Кэш_Поместить("МетаданныеСообщения_"+ТипСообщения+"_"+Направление,ТабМетаданных);

	Возврат ТабМетаданных;
	
КонецФункции

Процедура ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных,ИмяПоля,ИмяТаблицы =  Неопределено,Принадлежность =  Неопределено,ТипEDI =  Неопределено,ВидСтруктурыEDI = Неопределено,ВыделяемыеПоляСписка =  Неопределено,Тип1С =  Неопределено,ТаблицаЗависимыхТипов =  Неопределено)
	
	ОсновнойМодуль.ДобавитьОписаниеМетаданныхСообщения(ТабМетаданных,ИмяПоля,ИмяТаблицы,Принадлежность,ТипEDI,ВидСтруктурыEDI,ВыделяемыеПоляСписка,Тип1С,ТаблицаЗависимыхТипов);

КонецПроцедуры

Процедура СформироватьСписокДокументов_ДляОтправкиМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц) Экспорт
	
	Если ВнешнееХранилище Тогда //не работаем на ВХ
		Возврат;
	КонецЕсли;
	
	//Определим, есть ли подключенный Партнер Меркурий
	ПартнерМеркурий = ПартнерМеркурий();
	Если ПартнерМеркурий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСКэшемПартнеров.Параметры.ТребуемыеДействия.Добавить("Обрабатывается");
	ЗапросСКэшемПартнеров.Параметры.ТребуемыеДействия.Добавить("Переотправить транзакцию");
	
	СформироватьВТПоднадзорныхТоваров(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	
	СформироватьВТСообщенийМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	
	СформироватьСписокОтгрузокМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	
	Если ПолучитьКонстантуEDI("М_ВедетсяПроизводство") <> Ложь Тогда
		СформироватьСписокПроизводстваМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	КонецЕсли;
	
	СформироватьСписокПеремещенийМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	
	СформироватьСписокПриходовМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	
	СформироватьСписокВходящихВСДМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	
	Если ПолучитьКонстантуEDI("М_ИспользоватьНезавершенноеПроизводство") = Истина Тогда
		СформироватьСписокНезавершенныхКЗавершению(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьВТСообщенийМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)

	
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	                              |	КонтурEDI_Сообщения.Ссылка КАК Ссылка,
	                              |	КонтурEDI_Сообщения.ТипСообщения,
	                              |	КонтурEDI_Сообщения.Документ КАК Документ,
	                              |	КонтурEDI_Сообщения.Партнер,
	                              |	КонтурEDI_Сообщения.ДатаПоставки,
	                              |	КонтурEDI_Сообщения.Статус,
	                              |	КонтурEDI_Сообщения.ТребуемоеДействие
	                              |ПОМЕСТИТЬ ВТ_СообщенияМеркурий
	                              |ИЗ
	                              |	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	                              |ГДЕ
	                              |	КонтурEDI_Сообщения.ДатаДокумента МЕЖДУ ДОБАВИТЬКДАТЕ(&НачалоПериода, МЕСЯЦ, -1) И ДОБАВИТЬКДАТЕ(&КонецПериода, МЕСЯЦ, 1)
	                              |	И КонтурEDI_Сообщения.ТипСообщения ПОДОБНО ""M_%""
	                              |
	                              |ИНДЕКСИРОВАТЬ ПО
	                              |	Ссылка,
	                              |	Документ";
	
								  
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры

Процедура СформироватьВТПоднадзорныхТоваров(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)

	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                              |	СпрНоменклатура.Ссылка КАК Номенклатура
	                              |ПОМЕСТИТЬ ВТ_ПоднадзорныйТовар
	                              |ИЗ
	                              |	Справочник.Номенклатура КАК СпрНоменклатура
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	                              |		ПО СпрНоменклатура.Ссылка = КонтурEDI_СоответствияТоваров.Номенклатура
	                              |			И (КонтурEDI_СоответствияТоваров.Партнер = &ПартнерМеркурий)
	                              |ГДЕ
	                              |	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.КодТовараПартнера, ""-"") <> &НулевойGUID";

	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	ЗапросСКэшемПартнеров.УстановитьПараметр("НулевойGUID",НулевойGUID);
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры

Процедура СформироватьВременнуюТаблицуДокументаМеркурий(ЗапросСКэшемПартнеров,ИмяТипа,КакНазватьВТ,ТолькоПроведенные=Ложь)
	
   	ТипДокумента = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта(ИмяТипа,Истина,Ложь);
	 
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                              |	ТаблицаДокумента.Ссылка КАК Ссылка
	                              |ПОМЕСТИТЬ Замена_ИмяВТ
	                              |ИЗ
	                              |	Замена_ИмяТипаДокумента КАК ТаблицаДокумента
	                              |ГДЕ
	                              |	ТаблицаДокумента.Дата МЕЖДУ &НачалоПериода И &КонецПериода
								  | И (&ТолькоПроведенные=Ложь ИЛИ ТаблицаДокумента.Проведен)
	                              |
	                              |ИНДЕКСИРОВАТЬ ПО
	                              |	Ссылка";
								  
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяТипаДокумента",ТипДокумента);  
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяВТ",КакНазватьВТ);  
	ЗапросСКэшемПартнеров.УстановитьПараметр("ТолькоПроведенные",ТолькоПроведенные=Истина);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры

Процедура СформироватьВременнуюТаблицуДокументаМеркурийСПоднадзорнымТоваром(ЗапросСКэшемПартнеров,ИмяТипа,КакНазватьВТ,ИмяВТИсточника,ИмяПараметраНазванияТоваров)
	
   	ТипДокумента = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта(ИмяТипа,Истина,Ложь);
	ИмяТЧ = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта(ИмяПараметраНазванияТоваров,Истина,Ложь);
	
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                              |	ТаблицаТЧДокумента.Ссылка КАК Ссылка
	                              |ПОМЕСТИТЬ Замена_ИмяВТ
	                              |ИЗ
	                              |	Замена_ДокументИсточник КАК Замена_ДокументИсточник
	                              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Замена_ИмяТипаДокумента.Замена_ИмяТЧ КАК ТаблицаТЧДокумента
	                              |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоднадзорныйТовар КАК ПоднадзорныйТовар
	                              |			ПО ТаблицаТЧДокумента.Номенклатура = ПоднадзорныйТовар.Номенклатура
	                              |		ПО Замена_ДокументИсточник.Ссылка = ТаблицаТЧДокумента.Ссылка
								  |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |УНИЧТОЖИТЬ Замена_ДокументИсточник
	                              |;";
								  
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ДокументИсточник",ИмяВТИсточника);  
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяТипаДокумента",ТипДокумента);  
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяВТ",КакНазватьВТ);  
	ЗапросСКэшемПартнеров.Текст = СтрЗаменить(ЗапросСКэшемПартнеров.Текст,"Замена_ИмяТЧ",ИмяТЧ);  
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
КонецПроцедуры

//формирование списка транзакций
Процедура СформироватьСписокОтгрузокМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)

	СформироватьВременнуюТаблицуДокументаМеркурий(ЗапросСКэшемПартнеров,"МеркурийДокументОтгрузки","ВТ_ОтгрузкиВИнтервале",ПолучитьКонстантуEDI("М_ОтправлятьПоНепроведенномуДокументу_M_DES")<>Истина);
	                                                                                        //имя настройки из макета                                                           //имя настройки из макета
	СформироватьВременнуюТаблицуДокументаМеркурийСПоднадзорнымтоваром(ЗапросСКэшемПартнеров,"МеркурийДокументОтгрузки","ВТ_ОтгрузкиПоднадзорногоТовара","ВТ_ОтгрузкиВИнтервале","МеркурийИмяТЧТоварыОтгрузка");
	
	//здесь уже отвязаны от имен метаданных
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	                              |	ВТ_ОтгрузкиПоднадзорногоТовара.Ссылка КАК Документ,
	                              |	""M_DES"" КАК ТипСообщения,
	                              |	&ПартнерМеркурий КАК Партнер,
	                              |	ВТ_СообщенияМеркурий.Ссылка КАК Сообщение,
	                              |	ЕСТЬNULL(ВТ_СообщенияМеркурий.ТребуемоеДействие, ""Оформить транзакцию продажи"") КАК ТребуемоеДействие
	                              |ПОМЕСТИТЬ ВТ_МеркурийОтгрузка
	                              |ИЗ
	                              |	ВТ_ОтгрузкиПоднадзорногоТовара КАК ВТ_ОтгрузкиПоднадзорногоТовара
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияМеркурий КАК ВТ_СообщенияМеркурий
	                              |		ПО (ВТ_СообщенияМеркурий.Документ = ВТ_ОтгрузкиПоднадзорногоТовара.Ссылка)
	                              |			И (ВТ_СообщенияМеркурий.ТипСообщения = ""M_DES"")
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |УНИЧТОЖИТЬ ВТ_ОтгрузкиПоднадзорногоТовара";
	
								  
	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	МассивВременныхТаблиц.Добавить("ВТ_МеркурийОтгрузка");

КонецПроцедуры

Процедура СформироватьСписокПроизводстваМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)

	СформироватьВременнуюТаблицуДокументаМеркурий(ЗапросСКэшемПартнеров,"МеркурийДокументПроизводства","ВТ_ПроизводствоВИнтервале",ПолучитьКонстантуEDI("М_ОтправлятьПоНепроведенномуДокументу_M_PRD")<>Истина);
	                                                                                        //имя настройки из макета                                                           			//имя настройки из макета
	СформироватьВременнуюТаблицуДокументаМеркурийСПоднадзорнымТоваром(ЗапросСКэшемПартнеров,"МеркурийДокументПроизводства","ВТ_ПроизводствоПоднадзорногоТовара","ВТ_ПроизводствоВИнтервале","МеркурийИмяТЧТоварыПроизводство");
	
	//здесь уже отвязаны от имен метаданных
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	                              |	ВТ_ПроизводствоПоднадзорногоТовара.Ссылка КАК Документ,
	                              |	""M_PRD"" КАК ТипСообщения,
	                              |	&ПартнерМеркурий КАК Партнер,
	                              |	ВТ_СообщенияМеркурий.Ссылка КАК Сообщение,
	                              |	ЕСТЬNULL(ВТ_СообщенияМеркурий.ТребуемоеДействие, ""Оформить производственную транзакцию"") КАК ТребуемоеДействие
	                              |ПОМЕСТИТЬ ВТ_МеркурийПроизводство
	                              |ИЗ
	                              |	ВТ_ПроизводствоПоднадзорногоТовара КАК ВТ_ПроизводствоПоднадзорногоТовара
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияМеркурий КАК ВТ_СообщенияМеркурий
	                              |		ПО (ВТ_СообщенияМеркурий.Документ = ВТ_ПроизводствоПоднадзорногоТовара.Ссылка)
	                              |			И (ВТ_СообщенияМеркурий.ТипСообщения = ""M_PRD"")
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |УНИЧТОЖИТЬ ВТ_ПроизводствоПоднадзорногоТовара";
	
								  
	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	МассивВременныхТаблиц.Добавить("ВТ_МеркурийПроизводство");

КонецПроцедуры

Процедура СформироватьСписокПриходовМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)

	СформироватьВременнуюТаблицуДокументаМеркурий(ЗапросСКэшемПартнеров,"МеркурийДокументПоступление","ВТ_ПоступлениеВИнтервале",ПолучитьКонстантуEDI("М_ОтправлятьПоНепроведенномуДокументу_M_REC")<>Истина);
	                                                                                        //имя настройки из макета                                                           			//имя настройки из макета
	СформироватьВременнуюТаблицуДокументаМеркурийСПоднадзорнымТоваром(ЗапросСКэшемПартнеров,"МеркурийДокументПоступление","ВТ_ПоступлениеПоднадзорногоТовара","ВТ_ПоступлениеВИнтервале","МеркурийИмяТЧТоварыПоступление");
	
	//здесь уже отвязаны от имен метаданных
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	                              |	ВТ_ПоступлениеПоднадзорногоТовара.Ссылка КАК Документ,
	                              |	""M_REC"" КАК ТипСообщения,
	                              |	&ПартнерМеркурий КАК Партнер,
	                              |	ВТ_СообщенияМеркурий.Ссылка КАК Сообщение,
	                              |	ЕСТЬNULL(ВТ_СообщенияМеркурий.ТребуемоеДействие, ""Оформить входящую партию"") КАК ТребуемоеДействие
	                              |ПОМЕСТИТЬ ВТ_МеркурийПриход
	                              |ИЗ
	                              |	ВТ_ПоступлениеПоднадзорногоТовара КАК ВТ_ПоступлениеПоднадзорногоТовара
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияМеркурий КАК ВТ_СообщенияМеркурий
	                              |		ПО (ВТ_СообщенияМеркурий.Документ = ВТ_ПоступлениеПоднадзорногоТовара.Ссылка)
	                              |			И (ВТ_СообщенияМеркурий.ТипСообщения = ""M_REC"")
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |УНИЧТОЖИТЬ ВТ_ПоступлениеПоднадзорногоТовара";
	
								  
	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	МассивВременныхТаблиц.Добавить("ВТ_МеркурийПриход");

КонецПроцедуры

Процедура СформироватьСписокВходящихВСДМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)
	
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	                              |	""M_INC"" КАК ТипСообщения,
	                              |	&ПартнерМеркурий КАК Партнер,
	                              |	ВТ_СообщенияМеркурий.ДатаПоставки КАК ДатаПоставки,
	                              |	ВТ_СообщенияМеркурий.Документ КАК Документ,
	                              |	ВТ_СообщенияМеркурий.Ссылка КАК Сообщение,
	                              |	ВТ_СообщенияМеркурий.ТребуемоеДействие КАК ТребуемоеДействие
	                              |ПОМЕСТИТЬ ВТ_МеркурийВходящиеВСД
	                              |ИЗ
	                              |	ВТ_СообщенияМеркурий КАК ВТ_СообщенияМеркурий
	                              |ГДЕ
	                              |	ВТ_СообщенияМеркурий.ТипСообщения = ""M_INC""
	                              |	И ВТ_СообщенияМеркурий.ДатаПоставки МЕЖДУ &НачалоПериода И &КонецПериода";
	
								  
	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	МассивВременныхТаблиц.Добавить("ВТ_МеркурийВходящиеВСД");

КонецПроцедуры

Процедура СформироватьСписокПеремещенийМеркурий(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)
	
	СформироватьВременнуюТаблицуДокументаМеркурий(ЗапросСКэшемПартнеров,"МеркурийДокументПеремещение","ВТ_ПеремещениеВИнтервале",ПолучитьКонстантуEDI("М_ОтправлятьПоНепроведенномуДокументу_M_MOV")<>Истина);
	                                                                                        //имя настройки из макета                                                           		//имя настройки из макета
	СформироватьВременнуюТаблицуДокументаМеркурийСПоднадзорнымтоваром(ЗапросСКэшемПартнеров,"МеркурийДокументПеремещение","ВТ_ПеремещениеПоднадзорногоТовара","ВТ_ПеремещениеВИнтервале","МеркурийИмяТЧТоварыПеремещение");
	
	//здесь уже отвязаны от имен метаданных
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	                              |	ВТ_ПеремещениеПоднадзорногоТовара.Ссылка КАК Документ,
	                              |	""M_MOV"" КАК ТипСообщения,
	                              |	&ПартнерМеркурий КАК Партнер,
	                              |	ВТ_СообщенияМеркурий.Ссылка КАК Сообщение,
	                              |	ЕСТЬNULL(ВТ_СообщенияМеркурий.ТребуемоеДействие, ""Оформить перемещение"") КАК ТребуемоеДействие
	                              |ПОМЕСТИТЬ ВТ_МеркурийПеремещение
	                              |ИЗ
	                              |	ВТ_ПеремещениеПоднадзорногоТовара КАК ВТ_ПеремещениеПоднадзорногоТовара
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СообщенияМеркурий КАК ВТ_СообщенияМеркурий
	                              |		ПО (ВТ_СообщенияМеркурий.Документ = ВТ_ПеремещениеПоднадзорногоТовара.Ссылка)
	                              |			И (ВТ_СообщенияМеркурий.ТипСообщения = ""M_MOV"")
	                              |;
	                              |
	                              |////////////////////////////////////////////////////////////////////////////////
	                              |УНИЧТОЖИТЬ ВТ_ПеремещениеПоднадзорногоТовара";
	
								  
	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	МассивВременныхТаблиц.Добавить("ВТ_МеркурийПеремещение");

КонецПроцедуры

Процедура СформироватьСписокНезавершенныхКЗавершению(ЗапросСКэшемПартнеров,ЗапросСКэшемПартнеров_Внутренний,МассивВременныхТаблиц,ПартнерМеркурий)
	
	ЗапросСКэшемПартнеров.Текст = "ВЫБРАТЬ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ТипСообщения,
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.Партнер,
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ДатаДокумента КАК ДатаПоставки,
	|	МАКСИМУМ(КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.Документ) КАК Документ,
	|	МАКСИМУМ(КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка) КАК Сообщение,
	|	МАКСИМУМ(""Завершить транзакцию производства"") КАК ТребуемоеДействие
	|ПОМЕСТИТЬ ВТ_МеркурийЗавершитьПроизвТранзакции
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""ТранзакцияЗавершена""
	|	И КонтурEDI_СообщенияДополнительныеРеквизиты.Значение = ЛОЖЬ
	|	И КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.Архив
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.Партнер,
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ТипСообщения,
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка.ДатаДокумента";
	
	
	ЗапросСКэшемПартнеров.УстановитьПараметр("ПартнерМеркурий",ПартнерМеркурий);
	
	ОсновнойМодуль.ВыполнитьЗапросСОтладкой(ЗапросСКэшемПартнеров);
	
	МассивВременныхТаблиц.Добавить("ВТ_МеркурийЗавершитьПроизвТранзакции");
	
КонецПроцедуры

//подготовка транзакций

Функция ПолучитьСтрануПоСтроке(СтрокаТоваров, ЕстьСерииНоменклатуры)
	
	Страна	= Справочники.КлассификаторСтранМира.Россия;
	
	Если ЕстьСерииНоменклатуры и ЗначениеЗаполнено(СтрокаТоваров.СерияНоменклатуры.СтранаПроисхождения) Тогда
		Страна	= СтрокаТоваров.СерияНоменклатуры.СтранаПроисхождения;
	ИначеЕсли ЗначениеЗаполнено(СтрокаТоваров.Номенклатура.СтранаПроисхождения) Тогда
		Страна	= СтрокаТоваров.Номенклатура.СтранаПроисхождения;
	КонецЕсли;
	
	Возврат Страна;
	
КонецФункции

Функция ПодготовитьТранзакциюОтгрузки(ДокументСсылка,Сообщение) Экспорт
	
	ИмяРеквизитаОрганизация = "Организация";
	ИмяРеквизитаСклад 		= "Склад";
	
	Сообщение.Партнер = ПартнерМеркурий();
	Сообщение.Организация = ДокументСсылка[ИмяРеквизитаОрганизация];
	
	Если ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"Грузоотправитель") И ЗначениеЗаполнено(ДокументСсылка.Грузоотправитель) Тогда
		Сообщение.Площадка1С	= ДокументСсылка.Грузоотправитель;
	Иначе
		Сообщение.Площадка1С	= ДокументСсылка[ИмяРеквизитаСклад];
	КонецЕсли;
	Сообщение.ПлощадкаПолучатель1С				= ДокументСсылка.Грузополучатель;
	
	Сообщение.Документ1С 						= ДокументСсылка;
	Сообщение.ДатаСоздания 						= ТекущаяДата();
	Сообщение.ДокументСсылка 					= ДокументСсылка;
	Сообщение.ХозяйствующийСубъект1С 			= ДокументСсылка[ИмяРеквизитаОрганизация];//+на рефакторинг: сюда вылезаем из ЗагрузитьУведомлениеОПриемке. На самом деле нам надо только получить таблицу товаров.
	Сообщение.ХозяйствующийСубъектПолучатель1С 	= ДокументСсылка.Контрагент;
	
	Сообщение.ДатаОтгрузки			= ДокументСсылка.Дата;
	
	Сообщение.Цель1С				= ПолучитьКонстантуEDI("М_ОсновнаяЦельОтгрузки");
	
	//Подготовка сообщения из документа
	ИмяТЧТовары = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяТЧТоварыОтгрузка");
	ТабличнаяЧастьТовары = Новый Массив;//просто чтоб определить
	Выполнить("ТабличнаяЧастьТовары = ДокументСсылка."+ИмяТЧТовары);
	ЕстьСерииНоменклатуры = ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"СерияНоменклатуры",ИмяТЧТовары);
	Для Каждого СтрокаТоваров ИЗ ТабличнаяЧастьТовары Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		
		СтандартнаяОбработкаEDI = Истина;
		РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьСтрокуТоваровТранзакции",СтандартнаяОбработкаEDI,
		Новый Структура("Сообщение,СтрокаТоваровСообщения,СтрокаТоваровДокумента,ДокументСсылка",
		Сообщение,НоваяСтрока,СтрокаТоваров,ДокументСсылка));
		
		Если СтандартнаяОбработкаEDI = Истина Тогда	
			
			НоваяСтрока.Номенклатура 				= СтрокаТоваров.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры	= СтрокаТоваров.ХарактеристикаНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения 			= СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору;
			НоваяСтрока.Количество 					= СтрокаТоваров.Количество;
			НоваяСтрока.ЕдиницаИзмеренияУпаковок	= СтрокаТоваров.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;
			НоваяСтрока.КоличествоУпаковок			= СтрокаТоваров.КоличествоМест;
			НоваяСтрока.Наименование 				= СтрокаТоваров.Номенклатура.Наименование;
			НоваяСтрока.Страна						= ПолучитьСтрануПоСтроке(СтрокаТоваров, ЕстьСерииНоменклатуры);
			
		КонецЕсли;
	КонецЦикла;
	
	//Транспорт
	ЗаполнитьТранспортТранзакции(Сообщение);	
	
КонецФункции

Функция СписатьПартию(sourceStockEntryUUID,ПлощадкаGUID,ВладелецGUID,Количество,unitUUID)Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	ПараметрыПодключенияДляТранзакции = ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),ВладелецGUID,ПлощадкаGUID);
	//преобразовать Сообщение в XDTO
	
	ПараметрыТранзакции = ЗаписатьСообщениеУтилизацииМеркурийXDTO(sourceStockEntryUUID,ПлощадкаGUID,Количество,unitUUID,ПараметрыПодключенияДляТранзакции);
	//выполнитьЗапрос
	
	ПараметрыТранзакции.Вставить("localTransactionId", "IncomingRobot");
	ПараметрыТранзакции.Вставить("ИмяМетода", ПолучитьИмяМетодаМеркурийПоТипуСообщения("M_PRD"));
	
	ОтветМеркурия = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, ПараметрыТранзакции.ИмяМетода,Истина); //сразу ждем результат
	
	Если ОтветМеркурия=Неопределено Тогда
		Результат.Успешно = Ложь;
	Иначе
		Результат.Успешно = Истина;
	КонецЕсли;
	
 	Возврат Результат; 

КонецФункции

Функция ОбъединитьПартии(МассивUUIDПартий,ПлощадкаGUID, НовоеНаименование, SubProductGUID) Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	ПараметрыПодключенияДляТранзакции = ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),,ПлощадкаGUID);
	//преобразовать Сообщение в XDTO
	
	ПараметрыТранзакции = ЗаписатьСообщениеОбъединенияПартийМеркурийXDTO(МассивUUIDПартий,ПлощадкаGUID,ПараметрыПодключенияДляТранзакции,НовоеНаименование, SubProductGUID);
	//выполнитьЗапрос
	
	ПараметрыТранзакции.Вставить("localTransactionId", "IncomingRobot");
	ПараметрыТранзакции.Вставить("ИмяМетода", "MergeStockEntriesRequest");
	
	ОтветМеркурия = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, ПараметрыТранзакции.ИмяМетода,Истина); //сразу ждем результат
	
	Если ОтветМеркурия=Неопределено Тогда
		Результат.Успешно = Ложь;
	Иначе
		Результат.Успешно = Истина;
	КонецЕсли;
	
 	Возврат Результат; 

КонецФункции

Функция АннулироватьВСД(ТекUUID,Причина,ПлощадкаGUID) Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	ПараметрыПодключенияДляТранзакции = ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),,ПлощадкаGUID);
	//преобразовать Сообщение в XDTO
	
	ПараметрыТранзакции = ЗаписатьСообщениеАннулированияВСДXDTO(ТекUUID,ПлощадкаGUID,ПараметрыПодключенияДляТранзакции,Причина);
	//выполнитьЗапрос
	
	ПараметрыТранзакции.Вставить("localTransactionId", "IncomingRobot");
	ПараметрыТранзакции.Вставить("ИмяМетода", "WithdrawVetDocumentRequest");
	
	ОтветМеркурия = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключенияДляТранзакции, ПараметрыТранзакции.ИмяМетода,Истина); //сразу ждем результат
	
	Если ОтветМеркурия=Неопределено Тогда
		Результат.Успешно = Ложь;
	Иначе
		Результат.Успешно = Истина;
		//Результат.Вставить("НовыйUUID",ВычислитьXDTO(ОтветМеркурия,"result.withdrawVetDocumentResponse.vetDocument.uuid"));  //не меняется
	КонецЕсли;
	
 	Возврат Результат; 

КонецФункции

Процедура ПогаситьВходящийВСДПакетно(Документ,СообщениеСсылка)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Сообщение = ОсновнойМодуль.ПрочитатьСообщение(СообщениеСсылка);
		
		Параметры = Новый Структура();
		Параметры.Вставить("ОтправитьСообщениеИзФормы",	Ложь);
		Параметры.Вставить("ПереотправкаСообщения",	Ложь);
		Параметры.Вставить("СообщениеСсылка",	СообщениеСсылка);
		Параметры.Вставить("ИмяМетода",			ПолучитьИмяМетодаМеркурийПоТипуСообщения(Сообщение.ТипСообщения));
		
		ОригинальныеТоварыСообщения = Сообщение.Товары.Скопировать();
		
		ТоварыСвернутыеПоНомерамВСД = Сообщение.Товары.Скопировать(,"ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата");
		ТоварыСвернутыеПоНомерамВСД.Свернуть("ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата");
		
		//гасить следует по 1 ВСД - так говорит апи при попытке погасить несколько	
		Для каждого СтрокаВходящего Из ТоварыСвернутыеПоНомерамВСД Цикл
			
			ОтборПо1ВСД = Новый Структура("ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата",СтрокаВходящего.ВетСертификатUUID,СтрокаВходящего.ВетСертификатСерия,СтрокаВходящего.ВетСертификатНомер,СтрокаВходящего.ВетСертификатДата);
			ТоварыПо1ВСД = ОригинальныеТоварыСообщения.НайтиСтроки(ОтборПо1ВСД);
			
			Сообщение.Товары.Очистить();
			ЕдинственнаяСтрокаСообщения = Сообщение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ЕдинственнаяСтрокаСообщения,ТоварыПо1ВСД[0],,"Количество,КоличествоУпаковок,КоличествоКПодтверждению,КоличествоУпаковокКПодтверждению");
			//и теперь итоговые Количества
			Для каждого ТоварПо1ВСД Из ТоварыПо1ВСД Цикл
				
				ЕдинственнаяСтрокаСообщения.Количество 			= ЕдинственнаяСтрокаСообщения.Количество + ТоварПо1ВСД.Количество; 
				ЕдинственнаяСтрокаСообщения.КоличествоУпаковок 	= ЕдинственнаяСтрокаСообщения.КоличествоУпаковок + ТоварПо1ВСД.КоличествоУпаковок; 
				
				ЕдинственнаяСтрокаСообщения.КоличествоКПодтверждению 			= ЕдинственнаяСтрокаСообщения.Количество;
				ЕдинственнаяСтрокаСообщения.КоличествоУпаковокКПодтверждению 	= ЕдинственнаяСтрокаСообщения.КоличествоУпаковок;
				ОпределитьСтатусРасхожденийПоСтроке(ЕдинственнаяСтрокаСообщения);
			КонецЦикла;
			
			Параметры.Вставить("Сообщение",	Сообщение);
			Параметры.Вставить("ВСДUUID",	СтрокаВходящего.ВетСертификатUUID);
			
			ВыполнитьТранзакциюМеркурий(Сообщение.ТипСообщения, Сообщение.ДокументСсылка, Параметры);
			
		КонецЦикла;
	Иначе
		//по сути надо только правильно определить  КоличествоКПодтверждению и КоличествоУпаковокКПодтверждению - потребуется переделать под этот кейс всю прооцедуру чуток
	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьСтатусРасхожденийПоСтроке(СтрСообщения) Экспорт
	Если СтрСообщения.КоличествоКПодтверждению = 0 Тогда
		СтрСообщения.СтатусРасхождений = "Отклонен";
	ИначеЕсли СтрСообщения.КоличествоКПодтверждению = СтрСообщения.Количество и 
			СтрСообщения.КоличествоУпаковокКПодтверждению = СтрСообщения.КоличествоУпаковок Тогда
		СтрСообщения.СтатусРасхождений = "Подтвержден";
	Иначе
		СтрСообщения.СтатусРасхождений = "Уточнен";
	КонецЕсли;
КонецПроцедуры


Функция ЗаписатьСообщениеУтилизацииМеркурийXDTO(sourceStockEntryUUID,ПлощадкаGUID,Количество,unitUUID,ПараметрыПодключенияДляТранзакции)
	
	consignor = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "BusinessMember");
	consignor.businessEntity =  КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "BusinessEntity");
	
	
	xmlЗаполнитьЗначениеXDTO(consignor.businessEntity,"GUID",ПараметрыПодключенияДляТранзакции.issuerId);
	
	consignor.enterprise = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "Enterprise");
	xmlЗаполнитьЗначениеXDTO(consignor.enterprise,"GUID",ПлощадкаGUID);

	
	businessEntity = consignor.businessEntity;
	enterprise = consignor.enterprise;
	
	productionOperation = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "ProductionOperation");
	
	rawBatch = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "RawBatch");
	rawBatch.sourceStockEntry = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document",  "StockEntry");
	xmlЗаполнитьЗначениеXDTO(rawBatch.sourceStockEntry,"UUID",sourceStockEntryUUID);
	
	rawBatch.Volume				= Количество;
	Unit	 			= КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/argus/common", 			"Unit");
	xmlЗаполнитьЗначениеXDTO(Unit,"UUID",unitUUID);
	rawBatch.unit				= Unit;
	
	
	productionOperation.rawBatch.Добавить(rawBatch);
	
	ПараметрыТранзакции = Новый Структура();
	МассивСписковXDTO = Новый Массив();
	
	ПараметрыТранзакции.Вставить("businessEntity",		businessEntity);
	ПараметрыТранзакции.Вставить("enterprise", 			enterprise);	
	ПараметрыТранзакции.Вставить("productionOperation", ProductionOperation);	
	
	ПараметрыТранзакции.Вставить("Наименование", 		ПолучитьИмяМетодаМеркурийПоТипуСообщения("M_PRD"));
	ПараметрыТранзакции.Вставить("initiator", 			ПараметрыПодключенияДляТранзакции.user);
	
	ПараметрыТранзакции.Вставить("МассивСписков", 		МассивСписковXDTO);	
	
	//Заполнение фабрики по маппингу полей
	
	
	Возврат ПараметрыТранзакции;
	
КонецФункции // ЗаписатьСообщениеУтилизацииМеркурийXDTO()

Функция ЗаписатьСообщениеОбъединенияПартийМеркурийXDTO(МассивsourceStockEntryUUID,ПлощадкаGUID,ПараметрыПодключенияДляТранзакции,НовоеНаименование, SubProductGUID)
	
	businessEntity =  КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "BusinessEntity");
	xmlЗаполнитьЗначениеXDTO(businessEntity,"GUID",ПараметрыПодключенияДляТранзакции.issuerId);
	
	enterprise = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "Enterprise");
	xmlЗаполнитьЗначениеXDTO(enterprise,"GUID",ПлощадкаGUID);
	
	mergeOperation = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "MergeStockEntriesOperation");
	Для Каждого sourceStockEntryUUID Из МассивsourceStockEntryUUID Цикл
		sourceStockEntry = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document",  "StockEntry");
		xmlЗаполнитьЗначениеXDTO(sourceStockEntry,"UUID",sourceStockEntryUUID);
		
		mergeOperation.sourceStockEntry.Добавить(sourceStockEntry);
	КонецЦикла;
	
	batch = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", 		"Batch");
	batch.SubProduct = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/production", 	"SubProduct");
	xmlЗаполнитьЗначениеXDTO(batch.SubProduct,"GUID",SubProductGUID);
	batch.productItem = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/production", "ProductItem");
	xmlЗаполнитьЗначениеXDTO(batch.productItem,"name",НовоеНаименование);
	
	mergeOperation.batch.Добавить(batch);
	
	
	ПараметрыТранзакции = Новый Структура();
	МассивСписковXDTO = Новый Массив();
	
	ПараметрыТранзакции.Вставить("businessEntity",		businessEntity);
	ПараметрыТранзакции.Вставить("enterprise", 			enterprise);	
	ПараметрыТранзакции.Вставить("mergeOperation",		 mergeOperation);	
	
	ПараметрыТранзакции.Вставить("Наименование", 		"mergeStockEntriesRequest");
	ПараметрыТранзакции.Вставить("initiator", 			ПараметрыПодключенияДляТранзакции.user);
	
	ПараметрыТранзакции.Вставить("МассивСписков", 		МассивСписковXDTO);	
	
	//Заполнение фабрики по маппингу полей
	
	
	Возврат ПараметрыТранзакции;
	
КонецФункции // ЗаписатьСообщениеУтилизацииМеркурийXDTO()

Функция ЗаписатьСообщениеАннулированияВСДXDTO(ТекUUID_ВСД_К_Аннулированию,ПлощадкаGUID,ПараметрыПодключенияДляТранзакции,Причина)
	//localTransactionId	Идентификатор заявки в клиентской системе.	xs:NCName	1
	//initiator	Пользователь, инициирующий запрос к шлюзу. Ответственный за выполнение бизнес-операции. Должен быть указан или идентификатор, или логин.	argc:User	1
	//vetDocumentId	Идентификатор ВСД, который аннулируется.	bs:UUID	1
	//withdrawReason	Причина аннулирования ВСД.	vetd:WithdrawReason	1
	//withdrawDate	Дата аннулирования ВСД.	xs:dateTime	1
	//vetDoctor	Ветеринарный врач, ответственный за аннулирование ВСД.	argc:User	1	
	
	
	ПараметрыТранзакции = Новый Структура();
	МассивСписковXDTO = Новый Массив();
	
	ПараметрыТранзакции.Вставить("vetDocumentId",		 ТекUUID_ВСД_К_Аннулированию);	
	ПараметрыТранзакции.Вставить("withdrawReason",		 Причина);	
	ПараметрыТранзакции.Вставить("withdrawDate",		 ТекущаяДата());	
	
	ПараметрыТранзакции.Вставить("Наименование", 		"withdrawVetDocumentRequest");
	ПараметрыТранзакции.Вставить("initiator", 			ПараметрыПодключенияДляТранзакции.user);
	
	ПараметрыТранзакции.Вставить("МассивСписков", 		МассивСписковXDTO);	
	
	//Заполнение фабрики по маппингу полей
	
	
	Возврат ПараметрыТранзакции;
	
КонецФункции // ЗаписатьСообщениеУтилизацииМеркурийXDTO()


Функция ПодготовитьТранзакциюПроизводства(ДокументСсылка,Сообщение,ЭтоЗавершениеНезавершеннойТранзакции=Ложь) Экспорт
	
	ИмяРеквизитаОрганизация = "Организация";
	ИмяРеквизитаСклад 		= "Склад";
	
	Сообщение.Партнер = ПартнерМеркурий();
	Сообщение.Организация = ДокументСсылка[ИмяРеквизитаОрганизация];
	
	Сообщение.Площадка1С	= ДокументСсылка[ИмяРеквизитаСклад];
	
	Сообщение.Документ1С 						= ДокументСсылка;
	Сообщение.ДатаСоздания 						= ТекущаяДата();
	Сообщение.ДокументСсылка 					= ДокументСсылка;
	Сообщение.ХозяйствующийСубъект1С 			= ДокументСсылка[ИмяРеквизитаОрганизация];//+на рефакторинг: сюда вылезаем из ЗагрузитьУведомлениеОПриемке. На самом деле нам надо только получить таблицу товаров.
	
	Сообщение.ДатаОтгрузки			= ДокументСсылка.Дата;
	
	Если ЭтоЗавершениеНезавершеннойТранзакции=Ложь Тогда //при завершении транзакции производимая продукция уже вся указана, мы только завершаем
		//Подготовка сообщения из документа
		ИмяТЧТовары = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяТЧТоварыПроизводство");
		ТабличнаяЧастьТовары = Новый Массив;//просто чтоб определить
		Выполнить("ТабличнаяЧастьТовары = ДокументСсылка."+ИмяТЧТовары);
		ЕстьСерииНоменклатуры = ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"СерияНоменклатуры",ИмяТЧТовары);
		Для Каждого СтрокаТоваров ИЗ ТабличнаяЧастьТовары Цикл
			
			НоваяСтрока = Сообщение.Товары.Добавить();
			
			СтандартнаяОбработкаEDI = Истина;
			РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьСтрокуТоваровТранзакции",СтандартнаяОбработкаEDI,
			Новый Структура("Сообщение,СтрокаТоваровСообщения,СтрокаТоваровДокумента,ДокументСсылка",
			Сообщение,НоваяСтрока,СтрокаТоваров,ДокументСсылка));
			
			Если СтандартнаяОбработкаEDI = Истина Тогда	
				НоваяСтрока.Номенклатура 				= СтрокаТоваров.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры	= СтрокаТоваров.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения 			= СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору;
				НоваяСтрока.Количество 					= СтрокаТоваров.Количество;
				НоваяСтрока.ЕдиницаИзмеренияУпаковок	= СтрокаТоваров.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;
				НоваяСтрока.КоличествоУпаковок			= СтрокаТоваров.КоличествоМест;
				НоваяСтрока.Наименование 				= СтрокаТоваров.Номенклатура.Наименование;
				
				НоваяСтрока.СрокГодности				= СтрокаТоваров.СерияНоменклатуры.СрокГодности;
				НоваяСтрока.Страна						= ПолучитьСтрануПоСтроке(СтрокаТоваров, ЕстьСерииНоменклатуры);
				НоваяСтрока.ДатаПроизводства 			= ДокументСсылка.Дата;
				//НоваяСтрока.СрокГодности 				= КонецГода(ДокументСсылка.Дата); //Заглушка
				НоваяСтрока.Маркировка                  = "";                     		//Заглушка
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьСырьеТранзакцииПроизводства(Сообщение,ДокументСсылка,ЭтоЗавершениеНезавершеннойТранзакции);
	
	
КонецФункции

Процедура ЗаполнитьСырьеТранзакцииПроизводства(Сообщение,ДокументСсылка,ЭтоЗавершениеНезавершеннойТранзакции)
	
	СтандартнаяОбработкаEDI = Истина;
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьСырьеТранзакцииПроизводства",СтандартнаяОбработкаEDI,
	Новый Структура("Сообщение,ДокументСсылка,ЭтоЗавершениеНезавершеннойТранзакции",
	Сообщение,ДокументСсылка,ЭтоЗавершениеНезавершеннойТранзакции)); 
	
	//прописать типовой кейс под УПП и под ERP
	
КонецПроцедуры

Функция ПодготовитьТранзакциюПеремещения(ДокументСсылка,Сообщение) Экспорт
	
	ИмяРеквизитаОрганизация = "Организация";
	
	Сообщение.Партнер = ПартнерМеркурий();
	Сообщение.Организация = ДокументСсылка[ИмяРеквизитаОрганизация];
	
	Сообщение.Площадка1С						= ДокументСсылка["СкладОтправитель"];
	Сообщение.ПлощадкаПолучатель1С				= ДокументСсылка["СкладПолучатель"];
	
	Сообщение.Документ1С 						= ДокументСсылка;
	Сообщение.ДатаСоздания 						= ТекущаяДата();
	Сообщение.ДокументСсылка 					= ДокументСсылка;
	Сообщение.ХозяйствующийСубъект1С 			= ДокументСсылка[ИмяРеквизитаОрганизация];
	Сообщение.ХозяйствующийСубъектПолучатель1С 	= Сообщение.ХозяйствующийСубъект1С;
	
	Сообщение.ДатаОтгрузки			= ДокументСсылка.Дата;
	
	//Подготовка сообщения из документа
	ИмяТЧТовары = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяТЧТоварыПеремещение");
	ТабличнаяЧастьТовары = Новый Массив;//просто чтоб определить
	Выполнить("ТабличнаяЧастьТовары = ДокументСсылка."+ИмяТЧТовары);
	Для Каждого СтрокаТоваров ИЗ ТабличнаяЧастьТовары Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		
		СтандартнаяОбработкаEDI = Истина;
		РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьСтрокуТоваровТранзакции",СтандартнаяОбработкаEDI,
		Новый Структура("Сообщение,СтрокаТоваровСообщения,СтрокаТоваровДокумента,ДокументСсылка",
		Сообщение,НоваяСтрока,СтрокаТоваров,ДокументСсылка));
		
		Если СтандартнаяОбработкаEDI = Истина Тогда	
			НоваяСтрока.Номенклатура 				= СтрокаТоваров.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры	= СтрокаТоваров.ХарактеристикаНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения 			= СтрокаТоваров.ЕдиницаИзмерения;
			НоваяСтрока.Количество 					= СтрокаТоваров.Количество;
			НоваяСтрока.ЕдиницаИзмеренияУпаковок	= СтрокаТоваров.ЕдиницаИзмеренияМест;
			НоваяСтрока.КоличествоУпаковок			= СтрокаТоваров.КоличествоМест;
			НоваяСтрока.Наименование 				= СтрокаТоваров.Номенклатура.Наименование;
		КонецЕсли;
		
	КонецЦикла;
	
	//Транспорт
	ЗаполнитьТранспортТранзакции(Сообщение);	
	
КонецФункции

Функция ПодготовитьТранзакциюОприходования(ДокументСсылка,Сообщение) Экспорт
		
	ЦельПоступления = ПолучитьКонстантуEDI("М_ОсновнаяЦельПоступления");
	ИмяРеквизитаОрганизация = "Организация";
	ИмяРеквизитаСклад 		= "СкладОрдер";
	
	Сообщение.Партнер = ПартнерМеркурий();
	Сообщение.Организация = ДокументСсылка[ИмяРеквизитаОрганизация];
	
	Если ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"Грузоотправитель") И ЗначениеЗаполнено(ДокументСсылка.Грузоотправитель) Тогда
		Сообщение.Площадка1С	= ДокументСсылка.Грузоотправитель;      //отправитель
		//Иначе
		//	Сообщение.Площадка1С	= ДокументСсылка[];
	КонецЕсли;
	Сообщение.ПлощадкаПолучатель1С				= ДокументСсылка[ИмяРеквизитаСклад];
	
	Сообщение.Документ1С 						= ДокументСсылка;
	Сообщение.ДатаСоздания 						= ТекущаяДата();
	Сообщение.ДокументСсылка 					= ДокументСсылка;
	Сообщение.ХозяйствующийСубъект1С 			= ДокументСсылка.Контрагент; //наш поставщик - первая сторона
	Сообщение.ХозяйствующийСубъектПолучатель1С 	= ДокументСсылка[ИмяРеквизитаОрганизация]; //а мы - вторая
	Сообщение.ДатаОтгрузки						= ДокументСсылка.Дата;
	//Сообщение.ДатаВыработкиПродукции			= ;
	
	
	//Подготовка сообщения из документа
	ИмяТЧТовары = ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийИмяТЧТоварыПоступление");
	ТабличнаяЧастьТовары = Новый Массив;//просто чтоб определить
	Выполнить("ТабличнаяЧастьТовары = ДокументСсылка."+ИмяТЧТовары);
	ЕстьСерииНоменклатуры = ОсновнойМодуль.ЕстьРеквизитОбъекта_Контур(ДокументСсылка,"СерияНоменклатуры",ИмяТЧТовары);
	Для Каждого СтрокаТоваров ИЗ ТабличнаяЧастьТовары Цикл
		
		НоваяСтрока = Сообщение.Товары.Добавить();
		
		СтандартнаяОбработкаEDI = Истина;
		РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьСтрокуТоваровТранзакции",СтандартнаяОбработкаEDI,
		Новый Структура("Сообщение,СтрокаТоваровСообщения,СтрокаТоваровДокумента,ДокументСсылка",
		Сообщение,НоваяСтрока,СтрокаТоваров,ДокументСсылка));
		Если СтандартнаяОбработкаEDI = Истина Тогда	
			НоваяСтрока.Номенклатура 				= СтрокаТоваров.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры	= СтрокаТоваров.ХарактеристикаНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения 			= СтрокаТоваров.ЕдиницаИзмерения.ЕдиницаПоКлассификатору;
			НоваяСтрока.Количество 					= СтрокаТоваров.Количество;
			НоваяСтрока.ЕдиницаИзмеренияУпаковок	= СтрокаТоваров.ЕдиницаИзмеренияМест.ЕдиницаПоКлассификатору;
			НоваяСтрока.КоличествоУпаковок			= СтрокаТоваров.КоличествоМест;
			НоваяСтрока.Наименование 				= СтрокаТоваров.Номенклатура.Наименование;
			
			НоваяСтрока.СрокГодности				= СтрокаТоваров.СерияНоменклатуры.СрокГодности;
			НоваяСтрока.Страна						= ПолучитьСтрануПоСтроке(СтрокаТоваров, ЕстьСерииНоменклатуры);
					
			НоваяСтрока.Цель1С						= ЦельПоступления;
			
			НоваяСтрока.ПлощадкаПроизводитель		= Сообщение.Площадка1С; //заглушка сичтаем что произведено поставщиком
		КонецЕсли;
	КонецЦикла;
	
	//Транспорт
	ЗаполнитьТранспортТранзакции(Сообщение);	
	
КонецФункции

Функция ПодготовитьТранзакциюМеркурий(ТипСообщения,ДокументСсылка,Сообщение) Экспорт
	
	//!Специфику, относящуюся к НЕСКОЛЬКИМ сообщениям 
	//следует писать в ЗаполнитьСпецифическиеРеквизитыТранзакции() 
	
	Если ТипСообщения = "M_REC"  Тогда
		
		ПодготовитьТранзакциюОприходования(ДокументСсылка,Сообщение);
		
	ИначеЕсли ТипСообщения = "M_DES" Тогда
		ПодготовитьТранзакциюОтгрузки(ДокументСсылка,Сообщение);
		
	ИначеЕсли ТипСообщения = "M_MOV" Тогда
		ПодготовитьТранзакциюПеремещения(ДокументСсылка,Сообщение);
		
	ИначеЕсли ТипСообщения = "M_PRD" Тогда
		ПодготовитьТранзакциюПроизводства(ДокументСсылка,Сообщение);
		
	КонецЕсли;
	
	//Реквизиты зависящие от сообщения
	ЗаполнитьСпецифическиеРеквизитыТранзакции(ТипСообщения,ДокументСсылка,Сообщение);
	
	Параметры = Новый Структура;
	//кастомные заполнения
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийПриПодготовкеТранзакции",,
			Новый Структура("Сообщение,ДокументСсылка,Параметры",
			Сообщение,ДокументСсылка,Параметры));
			
	//Конвертация  //ПМ на после подготовки внутри КонвертироватьТранзакциюМеркурий
	КонвертироватьТранзакциюМеркурий(Сообщение);
	
			
	// проверяем поля на наличие ошибок
	РезультатПроверки = ПроверитьТранзакциюМеркурий(Сообщение);
	Сообщение.СодержитОшибки =  НЕ РезультатПроверки.Успешно;

	
КонецФункции // ПодготовитьТранзакциюМеркурий()

Функция ПодготовитьСообщениеЗавершениеТранзакцииПроизводства(ТипСообщения,СообщениеСсылка,Документ) Экспорт

		//через карточку
		Сообщение = ОсновнойМодуль.ПолучитьСтруктуруСообщения(ТипСообщения,"Исходящее");
		
		Если ЗначениеЗаполнено(СообщениеСсылка) Тогда
			ДопРеквизитыСообщения = СообщениеСсылка.ДополнительныеРеквизиты;
			НайденнаяСтрокаИдентификатораТранзакции = ДопРеквизитыСообщения.Найти("ИдентификаторПроизводственнойТранзакции","ИмяРеквизита");
			НайденнаяСтрокаНЗвТр = ДопРеквизитыСообщения.Найти("ТранзакцияЗавершена","ИмяРеквизита");
			Если НайденнаяСтрокаНЗвТр<>Неопределено 
				И НайденнаяСтрокаИдентификатораТранзакции<>Неопределено
				И НайденнаяСтрокаНЗвТр.Значение = Ложь
				Тогда
				Сообщение.ИдентификаторПроизводственнойТранзакции = НайденнаяСтрокаИдентификатораТранзакции.Значение;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		ПодготовитьТранзакциюЗавершенияПроизводства(ТипСообщения,Документ,Сообщение);

		Возврат Сообщение;
		
КонецФункции 

Функция ПодготовитьТранзакциюЗавершенияПроизводства(ТипСообщения,ДокументСсылка,Сообщение) Экспорт
	
	Сообщение.Завершена = Истина;
	ПодготовитьТранзакциюПроизводства(ДокументСсылка,Сообщение,Истина);//прокинем в явном виде для наглядности
	//
	
	Параметры = Новый Структура;
	//кастомные заполнения
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("МеркурийПриПодготовкеТранзакции",,
			Новый Структура("Сообщение,ДокументСсылка,Параметры",
			Сообщение,ДокументСсылка,Параметры));
			
	//Конвертация  //ПМ на после подготовки внутри КонвертироватьТранзакциюМеркурий
	КонвертироватьТранзакциюМеркурий(Сообщение);
	
			
	// проверяем поля на наличие ошибок
	РезультатПроверки = ПроверитьТранзакциюМеркурий(Сообщение);
	Сообщение.СодержитОшибки = НЕ РезультатПроверки.Успешно;


КонецФункции // ПодготовитьТранзакциюЗавершенияПроизводства()

Процедура ЗаполнитьСпецифическиеРеквизитыТранзакции(ТипСообщения,ДокументСсылка,Сообщение)
    //Де факто галка cargoInspected должна быть во всех исходящих транзакциях
	Если ТипСообщения = "M_DES"
		ИЛИ ТипСообщения = "M_MOV"
		ИЛИ ТипСообщения = "M_PRD" Тогда 	
		Сообщение.ВетСертификатОбследованоВетВрачом = Истина;
	КонецЕсли;

	БлагополучиеПоУмолчанию = ПолучитьКонстантуEDI("М_БлагополучиеМестности");
	Сообщение.БлагополучиеМестности = ?(ЗначениеЗаполнено(БлагополучиеПоУмолчанию),БлагополучиеПоУмолчанию,"Местность благополучна");
	
	Если ТипСообщения = "M_PRD" 
		И Не ЗначениеЗаполнено(Сообщение.СообщениеСсылка)
		И ОсновнойМодуль.ПолучитьКонстантуEDI("М_ИспользоватьНезавершенноеПроизводство") = Истина Тогда
		Сообщение.Завершена = Ложь;
	КонецЕсли;

	Если ТипСообщения = "M_DES"
		ИЛИ ТипСообщения = "M_MOV" Тогда 	
		
		Сообщение.Цель1С				= ПолучитьКонстантуEDI("М_ОсновнаяЦельОтгрузки");
		
		//разрешение на вывоз 
		РазрешениеНаВывозСтруктура = ПолучитьРазрешениеНаВывозДляТранзакции(ТипСообщения,ДокументСсылка,Сообщение);
		Сообщение.РазрешениеНаВывозНомер= РазрешениеНаВывозСтруктура.Номер;
		Сообщение.РазрешениеНаВывозДата	= РазрешениеНаВывозСтруктура.Дата;
		
	КонецЕсли;
	
	//меркурий всегда воспринимает только с точностью до дня для нескоропорта и с точностью до часа для скоропорта
	//это ключевые для поиска колонки! по ним потом будем находить соответствие для оформленного нами ВСД
	Для каждого СтрокаТоваров Из Сообщение.Товары Цикл
		
		Если СтрокаТоваров.Скоропортящаяся = Истина Тогда
			СтрокаТоваров.СрокГодности = НачалоЧаса(?(ЗначениеЗаполнено(СтрокаТоваров.СрокГодности),СтрокаТоваров.СрокГодности,Дата(1,1,1)));
			СтрокаТоваров.ДатаПроизводства = НачалоЧаса(?(ЗначениеЗаполнено(СтрокаТоваров.ДатаПроизводства),СтрокаТоваров.ДатаПроизводства,Дата(1,1,1)));
			СтрокаТоваров.СрокГодности2 = НачалоЧаса(?(ЗначениеЗаполнено(СтрокаТоваров.СрокГодности2),СтрокаТоваров.СрокГодности2,Дата(1,1,1)));
			СтрокаТоваров.ДатаПроизводства2 = НачалоЧаса(?(ЗначениеЗаполнено(СтрокаТоваров.ДатаПроизводства2),СтрокаТоваров.ДатаПроизводства2,Дата(1,1,1)));
		Иначе
			СтрокаТоваров.СрокГодности = НачалоДня(?(ЗначениеЗаполнено(СтрокаТоваров.СрокГодности),СтрокаТоваров.СрокГодности,Дата(1,1,1)));
			СтрокаТоваров.ДатаПроизводства = НачалоДня(?(ЗначениеЗаполнено(СтрокаТоваров.ДатаПроизводства),СтрокаТоваров.ДатаПроизводства,Дата(1,1,1)));
			СтрокаТоваров.СрокГодности2 = НачалоДня(?(ЗначениеЗаполнено(СтрокаТоваров.СрокГодности2),СтрокаТоваров.СрокГодности2,Дата(1,1,1)));
			СтрокаТоваров.ДатаПроизводства2 = НачалоДня(?(ЗначениеЗаполнено(СтрокаТоваров.ДатаПроизводства2),СтрокаТоваров.ДатаПроизводства2,Дата(1,1,1)));
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОтправитьТранзакциюМеркурий(Сообщение,Параметры) Экспорт

	Если Сообщение.ТипСообщения = "M_REC" Тогда
		//несколько ВСД по документу копия будет использоваться для созранения в сообщение	
		КопияСообщения = ОсновнойМодуль.ПолучитьКопиюСообщения(Сообщение);
		ОригинальныеТоварыСообщения = Сообщение.Товары.Скопировать();
		
		ТоварыСвернутыеПоНомерамВСД = Сообщение.Товары.Скопировать(,"ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата");
		ТоварыСвернутыеПоНомерамВСД.Свернуть("ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата");
		
		//гасить следует по 1 ВСД - так говорит апи при попытке погасить несколько	
		Для каждого СтрокаВходящего Из ТоварыСвернутыеПоНомерамВСД Цикл
			
			//по товарам, где уже получен номер ВСД UUID не надо отправлять транзакцию (переотправка когда упала часть ВСТ в рамках ТТН)
			Если Значениезаполнено(СтрокаВходящего.ВетСертификатUUID) Тогда
				Продолжить;
			КонецЕсли;
			
			ОтборПо1ВСД = Новый Структура("ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата",СтрокаВходящего.ВетСертификатUUID,СтрокаВходящего.ВетСертификатСерия,СтрокаВходящего.ВетСертификатНомер,СтрокаВходящего.ВетСертификатДата);
			ТоварыПо1ВСД = ОригинальныеТоварыСообщения.НайтиСтроки(ОтборПо1ВСД);
			
			Сообщение.Товары.Очистить();
			ЕдинственнаяСтрокаСообщения = Сообщение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ЕдинственнаяСтрокаСообщения,ТоварыПо1ВСД[0],,"Количество,КоличествоУпаковок");
			//и теперь итоговые Количества
			Для каждого ТоварПо1ВСД Из ТоварыПо1ВСД Цикл
				
				ЕдинственнаяСтрокаСообщения.Количество 			= ЕдинственнаяСтрокаСообщения.Количество + ТоварПо1ВСД.Количество; 
				ЕдинственнаяСтрокаСообщения.КоличествоУпаковок 	= ЕдинственнаяСтрокаСообщения.КоличествоУпаковок + ТоварПо1ВСД.КоличествоУпаковок; 
				
			КонецЦикла;
			
			Параметры.Вставить("Сообщение",	Сообщение);
			//для этого типа транзакции в справочнике будет создан 1 Элемент и сообщение у него будет общее
			КопияСообщения.Товары = ОригинальныеТоварыСообщения.Скопировать();
			Параметры.Вставить("СообщениеДляСохранения",	КопияСообщения);
			//какой разделитель сделать здесь? у нас еще нет UUID
			Параметры.Вставить("ВСДUUID",	""+СтрокаВходящего.ВетСертификатСерия+"-"+СтрокаВходящего.ВетСертификатНомер+"-"+Формат(СтрокаВходящего.ВетСертификатДата, "ДФ=ddMMyyyy"));
			
			ВыполнитьТранзакциюМеркурий(Сообщение.ТипСообщения, Сообщение.ДокументСсылка, Параметры);
			
		КонецЦикла; 
		
	Иначе
	
	ВыполнитьТранзакциюМеркурий(Сообщение.ТипСообщения, Сообщение.ДокументСсылка, Параметры);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьТранспортТранзакции(Сообщение)

	Сообщение.Транспорт.ВидТранспорта = ПолучитьКонстантуEDI("М_ОсновнойТипТранспорта");
	Сообщение.Транспорт.СпособХраненияПриПеревозке = ОпределитьСпособХраненияПриПеревозкеМеркурий(Сообщение);
	СтандартнаяОбработкаEDI = Истина;
	
	ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьТранспортТранзакции",СтандартнаяОбработкаEDI,
			Новый Структура("ТранспортТранзакции,Сообщение,ДокументСсылка",	Сообщение.Транспорт,Сообщение,Сообщение.ДокументСсылка));	
	
		КонецПроцедуры

Функция ПолучитьРазрешениеНаВывозДляТранзакции(ТипСообщения,ДокументСсылка,Сообщение)
	
	СтандартнаяОбработкаEDI = Истина;
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПолучитьРазрешениеНаВывозДляТранзакции",СтандартнаяОбработкаEDI,Новый Структура("ТипСообщения,ДокументСсылка,Сообщение",ТипСообщения,ДокументСсылка,Сообщение));
	
	Если Не СтандартнаяОбработкаEDI Тогда
		Если РезультатПМ.Тип() = Тип("Структура") 
			И РезультатПМ.Свойство("Номер")
			И РезультатПМ.Свойство("Дата") Тогда
			Возврат РезультатПМ;
		Иначе
			Возврат Новый Структура("Номер,Дата","",Дата(1,1,1));
		КонецЕсли;
	Иначе
		Возврат Новый Структура("Номер,Дата","",Дата(1,1,1));
	КонецЕсли;
	
КонецФункции 

Процедура ОбработатьРезультатЗавершенияНезавершенногоПроизводства(ОтветМеркурия,Параметры)

	Если ОтветМеркурия<>Неопределено Тогда
		НомерЗавершаемойТранзакции = Параметры.Сообщение.ИдентификаторПроизводственнойТранзакции;
		ПометитьНезавершенныеТранзакцииЗавершенными(НомерЗавершаемойТранзакции);
	КонецЕсли;
	
КонецПроцедуры

//Интеграционные
Процедура ДобавитьСтрокиОформленияТребуемогоДействияМеркурий(НастройкаОформленияТребуемогоДействия) Экспорт
	
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Оформить перемещение"			,"Перемещение"			,Истина	,"Отправить_M_MOV",8);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Погасить входящие ВСД"			,"ПодписатьИОтправить"	,Истина	,"Принять_M_INV",2);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Оформить входящую партию"		,"ПринятьСообщение"		,Истина	,"Принять_M_REC",2);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Оформить транзакцию продажи"	,"УведомитьОбОтгрузке"	,Истина	,"Отправить_M_DES",8);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Оформить производственную транзакцию","Производство"	,Истина	,"Отправить_M_PRD",8);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Переотправить транзакцию"		,"ПереотправитьСообщение",Истина,"Переотправить_M_DES",5);
	ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Обрабатывается"				,"Загрузка"				,Ложь	,"ДождатьсяДоставки",4);
	Если ПолучитьКонстантуEDI("М_ИспользоватьНезавершенноеПроизводство") = Истина Тогда
		ОсновнойМодуль.ДобавитьСтрокуОформленияТребуемогоДействия(НастройкаОформленияТребуемогоДействия,"Меркурий","Завершить транзакцию производства"	,"СтатусУточнен"		,Истина	,"Завершить_M_PRD",8);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКонстантуEDI(ИмяКонстанты) Экспорт
	
	Возврат ОсновнойМодуль.ПолучитьКонстантуEDI(ИмяКонстанты);
	
КонецФункции

Функция ОпределитьСпособХраненияПриПеревозкеМеркурий(Сообщение)

	//  проверить по свойству СпособХранения номенклатуры по регистру доп свойств (создать)
	//	Может статься что по номенклатуре различный способ хранения при перевозке - тогда, наверное, следует выбрать наиболее  "холодный" из всех
	
	ОбщийСпособХранения = ПолучитьКонстантуEDI("М_ОсновнойСпособХраненияПриПеревозке");
	Если Не ЗначениеЗаполнено(ОбщийСпособХранения) ТОгда
		ОбщийСпособХранения = "FROZEN";
	КонецЕсли;
	
	Возврат ОбщийСпособХранения; 
	
КонецФункции // ОпределитьСпособХраненияПриПеревозкеМеркурий()

Функция ОбработкаСобытияПодключаемогоМодуля(ИмяСобытия,СтандартнаяОбработкаEDI=Неопределено,ПараметрыПодключаемогоМодуля = Неопределено) Экспорт
	
	Возврат ОсновнойМодуль.ОбработкаСобытияПодключаемогоМодуля(ИмяСобытия,СтандартнаяОбработкаEDI,ПараметрыПодключаемогоМодуля);
	
КонецФункции

Процедура ПометитьНезавершенныеТранзакцииЗавершенными(НомерЗавершаемойТранзакции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка
	|ПОМЕСТИТЬ ВТ_Незавершенные
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""ТранзакцияЗавершена""
	|	И КонтурEDI_СообщенияДополнительныеРеквизиты.Значение = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка
	|ПОМЕСТИТЬ ВТ_НомераТранзакций
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.ИмяРеквизита = ""ИдентификаторПроизводственнойТранзакции""
	|	И КонтурEDI_СообщенияДополнительныеРеквизиты.Значение = &НомерТранзакции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Незавершенные.Ссылка
	|ИЗ
	|	ВТ_Незавершенные КАК ВТ_Незавершенные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НомераТранзакций КАК ВТ_НомераТранзакций
	|		ПО ВТ_Незавершенные.Ссылка = ВТ_НомераТранзакций.Ссылка";
	
	Запрос.УстановитьПараметр("НомерТранзакции",НомерЗавершаемойТранзакции);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СообщениеОбъект =  Выборка.Ссылка.ПолучитьОбъект();
		ИскомаяСтрока = СообщениеОбъект.ДополнительныеРеквизиты.Найти("ТранзакцияЗавершена","ИмяРеквизита");
		Если ИскомаяСтрока<>Неопределено Тогда 
			ИскомаяСтрока.Значение = Истина;
			СообщениеОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Конвертация 1С в Меркурий
Функция КонвертироватьТранзакциюМеркурий(Сообщение) Экспорт
    //Здесь переведем все в идентификаторы меркурия (так же как конвертировали в EDI)
	КонвертироватьШапкуТранзакцииМеркурий(Сообщение);
	
	//Номенклатура и ЕдиницаИзмерения
	КонвертироватьТабличнуюЧастьМеркурий(Сообщение);
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПослеКонввертацииТранзакцииМеркурий",,
			Новый Структура("Сообщение",Сообщение));
	
КонецФункции // КонвертироватьТранзакциюМеркурий()

Функция КонвертироватьШапкуТранзакцииМеркурий(Сообщение) Экспорт
	
	Сообщение.ХозяйствующийСубъектEDI.GUID 				= КонвертироватьЗначение1СвМеркурий(Сообщение.ХозяйствующийСубъект1С,,"МеркурийХС");		
	Если Сообщение.Свойство("ХозяйствующийСубъектПолучательEDI") ТОгда
		Сообщение.ХозяйствующийСубъектПолучательEDI.GUID 	= КонвертироватьЗначение1СвМеркурий(Сообщение.ХозяйствующийСубъектПолучатель1С,,"МеркурийХС");		
	КонецЕсли;
	
	//Площадки
	Сообщение.ПлощадкаEDI.GUID 							= КонвертироватьЗначение1СвМеркурий(Сообщение.Площадка1С,,"МеркурийПлощадка");
	Если Сообщение.Свойство("ПлощадкаПолучательEDI") ТОгда
		Сообщение.ПлощадкаПолучательEDI.GUID 				= КонвертироватьЗначение1СвМеркурий(Сообщение.ПлощадкаПолучатель1С,,"МеркурийПлощадка");
	КонецЕсли;
	
	Если Сообщение.Свойство("ПеревозчикEDI") ТОгда
		Сообщение.ПеревозчикEDI.GUID 				= КонвертироватьЗначение1СвМеркурий(Сообщение.Перевозчик1С,,"МеркурийХС");
	КонецЕсли;
	
	Сообщение.ЦельEDI.GUID = КонвертироватьЗначение1СвМеркурий(Сообщение.Цель1С,,"МеркурийЦель");//"5b91af60-e089-11e1-bcf3-b499babae7ea"; //Заглушка
	Если ЗначениеЗаполнено(Сообщение.Документ1С) Тогда 
		Сообщение.ДокументEDI.Номер = Сообщение.Документ1С.Номер;
		Сообщение.ДокументEDI.Дата =  Сообщение.Документ1С.Дата;
	КонецЕсли;
	
КонецФункции // КонвертироватьШапкуТранзакцииМеркурий()

Функция ПолучитьТаблицу_productItemДляТоваров1СМеркурийДляСообщения(Сообщение,ТаблицаКонвертации)
	
	GUIDПлощадки = Сообщение.ПлощадкаEDI.GUID;
	ПоискПоСвойству = "ПлощадкаUUID"+GUIDПлощадки;
	Товары = Сообщение.Товары;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.Номенклатура КАК Номенклатура,
		|	Таб.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
		|ПОМЕСТИТЬ _ТабТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК Таб
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонтурEDI_ДополнительныеРеквизиты.Объект КАК Номенклатура,
		|	ЕСТЬNULL(КонтурEDI_ДополнительныеРеквизиты.Значение, """") КАК productItemUUID
		|ИЗ
		|	_ТабТоваров КАК _ТабТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
		|		ПО _ТабТоваров.Номенклатура = КонтурEDI_ДополнительныеРеквизиты.Объект
		|ГДЕ
		|	КонтурEDI_ДополнительныеРеквизиты.Свойство = &Свойство";
		
	ТабТоваров = ?(ТипЗнч(Сообщение.Товары) = Тип("ТаблицаЗначений"), Сообщение.Товары, Сообщение.Товары.Выгрузить());//для УФ
	
	Запрос.УстановитьПараметр("Свойство",ПоискПоСвойству);
	Запрос.УстановитьПараметр("ТаблицаТоваров",ТаблицаКонвертации);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();	
	
КонецФункции // ПолучитьТаблицу_productItemДляТоваров1СМеркурий()

Функция ПолучитьТаблицу_productItemДляСкладскогоОстатка(МассивproductItemUUID)
	
	ПоискПоСвойству = "ПлощадкаUUID%";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеРеквизиты.Объект КАК Номенклатура,
	|	ЕСТЬNULL(КонтурEDI_ДополнительныеРеквизиты.Значение, """") КАК productItemUUID
	|ИЗ
	|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство ПОДОБНО &Свойство
	|	И КонтурEDI_ДополнительныеРеквизиты.Значение В(&СписокproductItemUUID)
	|	И КонтурEDI_ДополнительныеРеквизиты.Значение <> """"";
	
	Запрос.УстановитьПараметр("Свойство",ПоискПоСвойству);
	СписокproductItemUUID = Новый СписокЗначений;
	Для каждого ЭлементМассива Из МассивproductItemUUID Цикл
		Если ЗначениеЗаполнено(ЭлементМассива) Тогда 
			СписокproductItemUUID.Добавить(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СписокproductItemUUID",СписокproductItemUUID);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();	
	
КонецФункции // ПолучитьТаблицу_productItemДляТоваров1СМеркурий()


Функция КонвертироватьТабличнуюЧастьМеркурий(Сообщение, НеВыбиратьИсходныеПартии=Ложь) Экспорт
	
	ТранзакцияВРазрезеСвоегоСправочника = Найти("M_DES/M_PRD/M_MOV",Сообщение.ТипСообщения)<>0;
	
	ТипСообщения = Сообщение.ТипСообщения;
	ТаблицаТоваров = Сообщение.Товары;
	
	Если ТипЗнч(ТаблицаТоваров) = Тип("ТаблицаЗначений") ТОгда
		Если ОсновнойМодуль.НастройкиМодуля.ИспользоватьХарактеристикиНоменклатуры Тогда
			ТаблицаКонвертации = ТаблицаТоваров.Скопировать(,"Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения");
		Иначе
			ТаблицаКонвертации = ТаблицаТоваров.Скопировать(,"Номенклатура, ЕдиницаИзмерения");
			ТаблицаКонвертации.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("NULL,Строка",,Новый КвалификаторыСтроки(1)));//заглушка для конфигураций, где нет ХарактеристикНоменклатуры и есть внешнее хранилище
		КонецЕсли;
	Иначе
		ТаблицаКонвертации = ТаблицаТоваров;
		//ТаблицаКонвертации = ТаблицаТоваров.ВыгрузитьКолонки("Номенклатура, ЕдиницаИзмерения");
		//ТаблицаКонвертации.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("NULL,Строка",,Новый КвалификаторыСтроки(1)));//заглушка для конфигураций, где нет ХарактеристикНоменклатуры и есть внешнее хранилище
	КонецЕсли;
	
	ТаблицаСоответствий = ПолучитьТаблицуСоответствийДляТоваров1СМеркурий(ТаблицаКонвертации,Сообщение.Партнер,Ложь);
	ТаблицаСоответствийЕдиницИзмерения = ПолучитьТаблицуСоответствийЕдиницИзмеренияМеркурий();
	ТаблицаСоответствийЕдиницИзмеренияУпаковок = ПолучитьСоответствияВсехЕдиницИзмеренияУпаковокМеркурий();
	
	//Наш справочник
	Если ТранзакцияВРазрезеСвоегоСправочника = Истина Тогда
		ТаблицаСоответствийproductItem = ПолучитьТаблицу_productItemДляТоваров1СМеркурийДляСообщения(Сообщение,ТаблицаКонвертации);
	КонецЕсли;
	
	Если ТипЗнч(Сообщение.Товары) = Тип("ТаблицаЗначений") и Сообщение.Товары.Колонки.Найти("ЕдиницаИзмерения") = Неопределено и //для УФ_УТ колонка "ЕдиницаИзмерения" удаляется при получении таблицы соответствий (выше). Пока вернем назад. На Рефакторинг
		Сообщение.Товары.Колонки.Найти("ЕдиницаИзмеренияТип2") <> Неопределено Тогда
		Сообщение.Товары.Колонки.Добавить("ЕдиницаИзмерения", Сообщение.Товары.Колонки.ЕдиницаИзмеренияТип2.ТипЗначения);
		Сообщение.Товары.ЗагрузитьКолонку(Сообщение.Товары.ВыгрузитьКолонку("ЕдиницаИзмеренияТип2"), "ЕдиницаИзмерения");
	КонецЕсли;

	Для Каждого СтрокаТоваров Из Сообщение.Товары Цикл
		
		Если ТранзакцияВРазрезеСвоегоСправочника = Истина Тогда
			НайденныйproductItem = ТаблицаСоответствийproductItem.Найти(СтрокаТоваров.Номенклатура,"Номенклатура");
			Если НайденныйproductItem<>Неопределено И ЗначениеЗаполнено(НайденныйproductItem.productItemUUID) Тогда
				СтрокаТоваров.productItemUUID = НайденныйproductItem.productItemUUID;
			КонецЕсли;
		КонецЕсли;
		
		
		НайденноеСоответствиеНоменклатуры = ТаблицаСоответствий.Найти(СтрокаТоваров.Номенклатура,"Номенклатура");
		Если НайденноеСоответствиеНоменклатуры <> Неопределено Тогда
			СтрокаТоваров.GUID = НайденноеСоответствиеНоменклатуры.КодТовараСторонний;
			Если ЗначениеЗаполнено(НайденноеСоответствиеНоменклатуры.КоэффициентEDIВ1С) Тогда
				СтрокаТоваров.Количество = СтрокаТоваров.Количество*НайденноеСоответствиеНоменклатуры.КоэффициентEDIВ1С;
			КонецЕсли;
		КонецЕсли;
		
		НайденноеСоответствиеЕдиницыИзмерения = ТаблицаСоответствийЕдиницИзмерения.Найти(СтрокаТоваров.ЕдиницаИзмерения,"Соответствие");
		Если НайденноеСоответствиеЕдиницыИзмерения <> Неопределено Тогда
			СтрокаТоваров.unitUUID = НайденноеСоответствиеЕдиницыИзмерения.UUID;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмеренияУпаковок) И ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмеренияУпаковок) Тогда
			НайденноеСоответствиеЕдиницыИзмеренияУпаковок = ТаблицаСоответствийЕдиницИзмеренияУпаковок.Найти(СтрокаТоваров.ЕдиницаИзмеренияУпаковок,"Соответствие");
			Если НайденноеСоответствиеЕдиницыИзмеренияУпаковок <> Неопределено Тогда
				СтрокаТоваров.ЕдиницаИзмеренияУпаковокUUID = НайденноеСоответствиеЕдиницыИзмеренияУпаковок.UUID;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипСообщения = "M_REC" ТОгда
			
			СтрокаТоваров.ПлощадкаПроизводительGUID = КонвертироватьЗначение1СвМеркурий(СтрокаТоваров.ПлощадкаПроизводитель,,"МеркурийПлощадка");   			
			СтрокаТоваров.ЦельEDI = КонвертироватьЗначение1СвМеркурий(СтрокаТоваров.Цель1С,,"МеркурийЦель");
					
		КонецЕсли;
		
		
		Если ТипСообщения = "M_REC" или ТипСообщения = "M_DES" или ТипСообщения = "M_MOV" ТОгда
			
			СтрокаТоваров.СтранаUUID = КонвертироватьЗначение1СвМеркурий(СтрокаТоваров.Страна,,"МеркурийСтрана");
			
		КонецЕсли;
		
	КонецЦикла;
	
	мНеподнадзорных = Сообщение.Товары.НайтиСтроки(Новый Структура("GUID", НулевойGUID));
	Для Сч = 0 по мНеподнадзорных.ВГраница() Цикл
		Сообщение.Товары.Удалить(мНеподнадзорных.Получить(Сч));
	КонецЦикла;
		
	Если (ТипСообщения = "M_MOV" ИЛИ ТипСообщения = "M_DES" ИЛИ ТипСообщения = "M_PRD") 
		И ЗначениеЗаполнено(Сообщение.ПлощадкаEDI.GUID)
		И НеВыбиратьИсходныеПартии=Ложь ТОгда
	//выбирать исходные партии следует если есть хоть 1 незаполненная
		ВыбратьИсходныеПартииТранзакцииМеркурий(Сообщение)
	КонецЕсли;
	
КонецФункции // КонвертироватьТабличнуюЧастьМеркурий()

Процедура ВыбратьИсходныеПартииТранзакцииМеркурий(Сообщение)
	
	Если ПолучитьКонстантуEDI("М_ПодбиратьЗаписьСкладскогоЖурналаАвтоматически") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТипСообщения = Сообщение.ТипСообщения;
	
	
	//проверка что все исходные партии заполнены и выбирать ничего не надо.
	Если ТипСообщения = "M_MOV"	ИЛИ ТипСообщения = "M_DES" Тогда
		Если Сообщение.Товары.НайтиСтроки(Новый Структура("ИсходнаяПартияGUID","")).Количество()=0
			И Сообщение.Товары.НайтиСтроки(Новый Структура("ИсходнаяПартияGUID",Неопределено)).Количество()=0
			Тогда
			Возврат
		КонецЕсли;
	ИначеЕсли ТипСообщения = "M_PRD" Тогда
		Если Сообщение.Сырье.НайтиСтроки(Новый Структура("ИсходнаяПартияGUID","")).Количество()=0 
			И Сообщение.Сырье.НайтиСтроки(Новый Структура("ИсходнаяПартияGUID",Неопределено)).Количество()=0 
			Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	//спросим журнал что у него есть
	ТаблицаОстатков = ПолучитьЗаписиСкладскогоЖурнала(Сообщение.ПлощадкаEDI.GUID);
	
	Если ТаблицаОстатков.Колонки.Найти("КоличествоИспользовано") = Неопределено Тогда
		ТаблицаОстатков.Колонки.Добавить("КоличествоИспользовано",Новый ОписаниеТипов("Число",
										Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Неотрицательный)),"Уже выбрано");
	КонецЕсли;
														  
	ТаблицаОстатков.Сортировать("ГоденДо Возр, НомерЗаписи Возр");
	
	//Товары транзакций 
	Если ТипСообщения = "M_MOV" 
		ИЛИ ТипСообщения = "M_DES" Тогда
		
		Для Каждого СтрокаТоваров Из Сообщение.Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТоваров.ИсходнаяПартияGUID) Тогда
				
				ВыбраннаяПартия = ПолучитьИсходнуюПартию(СтрокаТоваров,ТаблицаОстатков,Сообщение.ХозяйствующийСубъектEDI.GUID);
				Если ВыбраннаяПартия<>Неопределено Тогда
					ЗаполнитьИдентификаторыВыбраннойПартии(СтрокаТоваров,ВыбраннаяПартия);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипСообщения = "M_PRD" Тогда
		
		Для Каждого СтрокаСырья Из Сообщение.Сырье Цикл
			Если Не ЗначениеЗаполнено(СтрокаСырья.ИсходнаяПартияGUID) Тогда
				
				ВыбраннаяПартия = ПолучитьИсходнуюПартию(СтрокаСырья,ТаблицаОстатков,Сообщение.ХозяйствующийСубъектEDI.GUID);
				Если ВыбраннаяПартия<>Неопределено Тогда
					ЗаполнитьИдентификаторыВыбраннойПартии(СтрокаСырья,ВыбраннаяПартия);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПакетныйРежим = Истина Тогда //после выбора партий - перекэшируем таблицу остатков в случае массовой обработки
		GUIDБезДефисов = СтрЗаменить(Сообщение.ПлощадкаEDI.GUID,"-","");
		ОсновнойМодуль.ЭДО_Кэш_Поместить("Меркурий_СкладскойЖурнал"+GUIDБезДефисов,ТаблицаОстатков);
	КонецЕсли;

	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыВыбраннойПартии(СтрокаИсходнойПродукции,ВыбраннаяПартия) Экспорт
	
	//это минимальный достаточный набор для идентификации исходной партии по правилам Меркурия (кроме номера записи конечно, но по нему удобно сверять пользователю с вебом)
	
	СтрокаИсходнойПродукции.Скоропортящаяся 				= ВыбраннаяПартия.Скоропортящаяся;	
	СтрокаИсходнойПродукции.ИсходнаяПартияGUID 				= ВыбраннаяПартия.GUID_Партии;	
	СтрокаИсходнойПродукции.ИсходнаяПартияНомер 			= ВыбраннаяПартия.НомерЗаписи;
	
	Если ВыбраннаяПартия.ОстатокУпаковок > 0 Тогда
		СтрокаИсходнойПродукции.ЕдиницаИзмеренияУпаковокUUID 	= ВыбраннаяПартия.ЕдиницаИзмеренияУпаковокUUID;
	Иначе
		СтрокаИсходнойПродукции.ЕдиницаИзмеренияУпаковокUUID 	= "";
		СтрокаИсходнойПродукции.КоличествоУпаковок 	= 0;
		
	КонецЕсли;
	
	СтрокаИсходнойПродукции.unitUUID 						= ВыбраннаяПартия.unitUUID;
	
	Если Не ЗначениеЗаполнено(СтрокаИсходнойПродукции.Наименование) Тогда
		СтрокаИсходнойПродукции.Наименование = ВыбраннаяПартия.Наименование;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаИсходнойПродукции.GUID) Тогда
		СтрокаИсходнойПродукции.GUID = ВыбраннаяПартия.subProductGuid;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаИсходнойПродукции.ДатаПроизводства) Тогда
		СтрокаИсходнойПродукции.ДатаПроизводства = ВыбраннаяПартия.ДатаВыпуска;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СтрокаИсходнойПродукции.СрокГодности) И ЗначениеЗаполнено(ВыбраннаяПартия.ГоденДо) Тогда
		СтрокаИсходнойПродукции.СрокГодности = ВыбраннаяПартия.ГоденДо;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаИсходнойПродукции.СтранаUUID) 
		И НЕ ЗначениеЗаполнено(СтрокаИсходнойПродукции.Страна) 
		И ЗначениеЗаполнено(ВыбраннаяПартия.СтранаUUID) Тогда
		СтрокаИсходнойПродукции.СтранаUUID = ВыбраннаяПартия.СтранаUUID;
		СтрокаИсходнойПродукции.Страна = ПреобразоватьСтрану_Меркурий_в_1С(ВыбраннаяПартия.СтранаUUID);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаИсходнойПродукции.ПлощадкаПроизводитель) 
		И НЕ ЗначениеЗаполнено(СтрокаИсходнойПродукции.ПлощадкаПроизводительGUID) 
		И ЗначениеЗаполнено(ВыбраннаяПартия.ProducerGUID) Тогда
		СтрокаИсходнойПродукции.ПлощадкаПроизводительGUID = ВыбраннаяПартия.ProducerGUID;
		СтрокаИсходнойПродукции.ПлощадкаПроизводитель = КонвертироватьЗначениеМеркурийв1C(ВыбраннаяПартия.ProducerGUID,,"МеркурийПлощадка");
	КонецЕсли;
	                                                               
	//отметим в нашей таблице остатков что из партии достали часть
	//при этом если процедура вызвана из формы то эта колонка - ключевая а если из автоматического подбора партии - то справочная (т.к. механизм учитывает на колонке остаток то что уже распределил)
	ВыбраннаяПартия.КоличествоИспользовано = ВыбраннаяПартия.КоличествоИспользовано + СтрокаИсходнойПродукции.Количество;
	
КонецПроцедуры


Функция ПолучитьИсходнуюПартию(СтрокаТоваров,ТаблицаОстатков,ВладелецGUID)
	
		Возврат ПодобратьПартиюФИФО(ВладелецGUID,СтрокаТоваров.Количество,СтрокаТоваров.unitUUID,СтрокаТоваров.GUID,ТаблицаОстатков,СтрокаТоваров.ДатаПроизводства,СтрокаТоваров.СрокГодности,СтрокаТоваров.Номенклатура);

КонецФункции // ПолучитьИсходнуюПартию()

Функция ФильтроватьТаблицуОстатков(ВладелецGUID,Количество,unitUUID,GUID,ТаблицаОстатков,ДатаПроизводства,СрокГодности,Номенклатура) Экспорт
	
	МассивУдаляемыхСтрок = Новый Массив;
	ОтфильтрованнаяТаблица = ТаблицаОстатков.Скопировать();
	
	Для Каждого СтрокаОстатков из ОтфильтрованнаяТаблица Цикл
		
		//берем только те записи, где совпадение по заполненному! guid	и заполненному unitUUID  и  если явно указана дата производства и срок годности то и их соблюдаем
		Если Истина Тогда // ВладелецGUID если не заполнен - то точно не следует разрешать выбор (для единообразия пока оставим так)
			Если ВладелецGUID <> СтрокаОстатков.ВладелецGUID Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(GUID) Тогда
			Если GUID <> СтрокаОстатков.subProductGuid Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(unitUUID) Тогда
			Если unitUUID <> СтрокаОстатков.unitUUID Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаПроизводства) Тогда
			Если Не ДатаПроизводстваТовараПоДокументуУдовлетворяетДатеПартииМеркурий(ДатаПроизводства,СтрокаОстатков.ДатаВыпуска) Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СрокГодности) Тогда
			Если Не ДатаПроизводстваТовараПоДокументуУдовлетворяетДатеПартииМеркурий(СрокГодности,СтрокаОстатков.ГоденДо) Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			Если ЗначениеЗаполнено(СтрокаОстатков.Номенклатура)
				И СтрокаОстатков.Номенклатура <> Номенклатура Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//А еще маркировка, также если она явно указана
		
		Если Количество > СтрокаОстатков.Остаток Тогда
				МассивУдаляемыхСтрок.Добавить(СтрокаОстатков);
				Продолжить;
		КонецЕсли
	КонецЦикла;
	
	КоличествоУдаляемых = МассивУдаляемыхСтрок.Количество();
	
	Для й = 1 По КоличествоУдаляемых Цикл
		ОтфильтрованнаяТаблица.Удалить(МассивУдаляемыхСтрок[КоличествоУдаляемых-й]);
	КонецЦикла;
	
	Возврат ОтфильтрованнаяТаблица;
	
КонецФункции

	
Функция ПодобратьПартиюФИФО(ВладелецGUID,Количество,unitUUID,GUID,ТаблицаОстатков,ДатаПроизводства,СрокГодности,Номенклатура)
	
	ОтфильтрованнаяТаблица =  ФильтроватьТаблицуОстатков(ВладелецGUID,Количество,unitUUID,GUID,ТаблицаОстатков,ДатаПроизводства,СрокГодности,Номенклатура);
	
	//В первую очередь пробуем подобрать партию с ТОЧНЫМ совпадением количества. но делаем так только если нам явно передана дата производства и/или срок годности
	Если ЗначениеЗаполнено(ДатаПроизводства)
		ИЛИ ЗначениеЗаполнено(СрокГодности) Тогда
		Для Каждого СтрокаОстатков из ОтфильтрованнаяТаблица Цикл
			
			Если Количество = СтрокаОстатков.Остаток И СтрокаОстатков.КоличествоИспользовано=0 Тогда
				СтрокаОстатковКУменьшению = ТаблицаОстатков.Найти(СтрокаОстатков.GUID_Партии,"GUID_Партии");
				Если СтрокаОстатковКУменьшению <> Неопределено Тогда
					//СтрокаОстатковКУменьшению.Остаток = СтрокаОстатковКУменьшению.Остаток - Количество;
					СтрокаОстатковКУменьшению.КоличествоИспользовано = Количество;
				КонецЕсли;
				Возврат СтрокаОстатков;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Во вторую очередь партия, где хватает количества и где совпадают sub product GUID и unitUUID
	Для Каждого СтрокаОстатков из ОтфильтрованнаяТаблица Цикл
		
		Если Количество > СтрокаОстатков.Остаток-СтрокаОстатков.КоличествоИспользовано Тогда
			Продолжить;
		Иначе
			СтрокаОстатковКУменьшению = ТаблицаОстатков.Найти(СтрокаОстатков.GUID_Партии,"GUID_Партии");
			Если СтрокаОстатковКУменьшению <> Неопределено Тогда
				//СтрокаОстатковКУменьшению.Остаток = СтрокаОстатковКУменьшению.Остаток - Количество;
				СтрокаОстатковКУменьшению.КоличествоИспользовано = СтрокаОстатковКУменьшению.КоличествоИспользовано+Количество;
			КонецЕсли;
			Возврат СтрокаОстатков;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПодобратьПартиюФИФО()

Функция ДатаПроизводстваТовараПоДокументуУдовлетворяетДатеПартииМеркурий(ДатаДок,ДатаМерк)

	Если ДатаДок = ДатаМерк	Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ДатаПроизводстваТовараПоДокументуУдовлетворяетДатеПартииМеркурий()

Функция ПолучитьТаблицуСоответствийЕдиницИзмеренияМеркурий()

//ТаблицаСоответствийЕдиницИзмерения = ПолучитьСписокСвойствEDI("GUIDКодЕдиницыИзмеренияМеркурий",Неопределено);
	
	Возврат ПолучитьСоответствияВсехЕдиницИзмеренияМеркурий();	

КонецФункции

Функция КонвертироватьЗначение1СвМеркурий(Значение, Тип1С =  Неопределено, ТипМеркурий, Сообщение =  Неопределено) Экспорт
	
	СтандартнаяОбработкаEDI = Истина;
	
	РезультатКонвертации = ОбработкаСобытияПодключаемогоМодуля("КонвертироватьЗначение1СвМеркурий",СтандартнаяОбработкаEDI,
	Новый Структура("Значение1С, ТипПоля1C, ТипМеркурий, Сообщение",
	Значение, Тип1С, ТипМеркурий, Сообщение));
	
	Если Не СтандартнаяОбработкаEDI Тогда
		
		Возврат РезультатКонвертации;
		
	КонецЕсли;
	
	Если ТипМеркурий = "МеркурийХС" Тогда
		
		Возврат ПреобразоватьЮрФизЛицоПлощадку_1С_в_Меркурий(Значение,ТипМеркурий);
		
	ИначеЕсли ТипМеркурий = "МеркурийПлощадка" Тогда
		
		Возврат ПреобразоватьЮрФизЛицоПлощадку_1С_в_Меркурий(Значение,ТипМеркурий);
		
	ИначеЕсли ТипМеркурий = "МеркурийЦель" Тогда
		
		Возврат ПреобразоватьЦель_1С_в_Меркурий(Значение,ТипМеркурий);
		
	ИначеЕсли ТипМеркурий = "МеркурийСтрана" Тогда
		
		Возврат ПреобразоватьСтрану_1С_в_Меркурий(Значение,ТипМеркурий);
		
	КонецЕсли;
	
	
КонецФункции

Функция ПреобразоватьЦель_1С_в_Меркурий(Значение,ТипМеркурий)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		Классификатор = ПолучитьКлассификаторЦелейМеркурий();
		НайденноеЗначение = Классификатор.Найти(Значение,"Наименование");
		Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
			Возврат НайденноеЗначение.GUID;
		Иначе
			Возврат "";
		Конецесли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПреобразоватьЮрФизЛицо_1С_в_Меркурий()

Функция ПреобразоватьСтрану_1С_в_Меркурий(Значение,ТипМеркурий)
	//двухуровневый - сначала в EDI а потом по коду в Меркурий
	
	Если ЗначениеЗаполнено(Значение) Тогда
		
		СтранаEDI = ОсновнойМодуль.КонвертироватьЗначение1СвEDI(Значение,"Страна","КодСтраны",Неопределено);
		Если НЕ ЗначениеЗаполнено(СтранаEDI) Тогда
			Возврат "";
		КонецЕсли;
			
		Классификатор = ПолучитьКлассификаторСтранМеркурий();
		НайденноеЗначение = Классификатор.Найти(СтранаEDI,"Код");
		Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
			Возврат НайденноеЗначение.UUID;
		Иначе
			Возврат "";
		Конецесли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПреобразоватьЮрФизЛицо_1С_в_Меркурий()

Функция ПреобразоватьЮрФизЛицоПлощадку_1С_в_Меркурий(Значение,ТипМеркурий)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
	               |ПОМЕСТИТЬ ВТ_ОбъектМеркурий
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""Объект""
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = &Значение
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ТипМеркурий
	               |	И НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение КАК GUID
	               |ИЗ
	               |	ВТ_ОбъектМеркурий КАК ВТ_ОбъектМеркурий
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	               |		ПО ВТ_ОбъектМеркурий.Ссылка = КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""GUID""
	               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ТипМеркурий";
	
	Запрос.УстановитьПараметр("Значение",Значение);
	Запрос.УстановитьПараметр("ТипМеркурий",ТипМеркурий);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.GUID;
	Иначе
		Возврат Неопределено;
	КонецЕсли

КонецФункции // ПреобразоватьЮрФизЛицо_1С_в_Меркурий()

Функция СоответствиеТоваровПолучитьСоответствияСпискаНоменклатуры(ТаблицаСсылок) Экспорт
	
	//Таблица ссылок - ТЗ с колонкой Ссылка
	
	Запрос = Новый Запрос;
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	Парам.Ссылка КАК Ссылка
	               	|ПОМЕСТИТЬ ВТСсылкиНоменклатуры
	               	|ИЗ
	               	|	&парам КАК Парам
	               	|;
	               	|
	               	|////////////////////////////////////////////////////////////////////////////////
	               	|ВЫБРАТЬ
	               	|	СсылкиНоменклатуры.Ссылка,
	               	|	МАКСИМУМ(ЕСТЬNULL(КонтурEDI_СоответствияТоваров.КодТовараПартнера, """")) КАК GUID,
	               	|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.НаименованиеПартнера, """") КАК НаименованиеМеркурий,
	               	|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентУмножения,
	               	|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
	               	|	КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
	               	|	КонтурEDI_СоответствияТоваров.МеркурийСкоропортящаяся КАК Скоропортящаяся,
	               	|	КонтурEDI_СоответствияТоваров.Номенклатура.Код КАК Код,
	               	|	КонтурEDI_СоответствияТоваров.Номенклатура.Артикул КАК Артикул
	               	|ИЗ
	               	|	ВТСсылкиНоменклатуры КАК СсылкиНоменклатуры
	               	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	               	|		ПО СсылкиНоменклатуры.Ссылка = КонтурEDI_СоответствияТоваров.Номенклатура
	               	|			И (КонтурEDI_СоответствияТоваров.Партнер = &ПартнерМеркурий)
	               	|			И (КонтурEDI_СоответствияТоваров.КодТовараПартнера <> """")
	               	|
	               	|СГРУППИРОВАТЬ ПО
	               	|	СсылкиНоменклатуры.Ссылка,
	               	|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.НаименованиеПартнера, """"),
	               	|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С,
	               	|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
	               	|	КонтурEDI_СоответствияТоваров.Единица,
	               	|	КонтурEDI_СоответствияТоваров.МеркурийСкоропортящаяся,
	               	|	КонтурEDI_СоответствияТоваров.Номенклатура.Код,
	               	|	КонтурEDI_СоответствияТоваров.Номенклатура.Артикул";
	
	Запрос.УстановитьПараметр("парам", ТаблицаСсылок);
	Запрос.УстановитьПараметр("ПартнерМеркурий", ПартнерМеркурий());
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеТоваровМеркурий_СохранитьНаборСоответствийПоНоменклатуре(Номенклатура,ТаблицаСоответствий) Экспорт
	// Дублирование с ПрисвоитьСоответствиеНоменклатуры
	
	Владелец = ПартнерМеркурий();

	ОчиститьСоответствиеНоменклатуры(Номенклатура,,,Владелец);
	МенеджерЗаписиСоответствийТоваров = РегистрыСведений.КонтурEDI_СоответствияТоваров.СоздатьМенеджерЗаписи();
	
	Если ТаблицаСоответствий.Количество() > 0 Тогда 
		//Запишем обновленные соответствия
		Для Каждого Стр ИЗ ТаблицаСоответствий Цикл
			
			Если ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры) Тогда
				Характеристика = Стр.ХарактеристикаНоменклатуры;
			Иначе	
				Характеристика = Неопределено;
			КонецЕсли;
			
			МенеджерЗаписиСоответствийТоваров.Партнер						= Владелец;
			МенеджерЗаписиСоответствийТоваров.Номенклатура					= Номенклатура;
			МенеджерЗаписиСоответствийТоваров.Единица						= Стр.ЕдиницаИзмерения;
			МенеджерЗаписиСоответствийТоваров.ХарактеристикаНоменклатуры	= Характеристика;
			МенеджерЗаписиСоответствийТоваров.Прочитать();
			
			МенеджерЗаписиСоответствийТоваров.Партнер						= Владелец;
			МенеджерЗаписиСоответствийТоваров.Номенклатура					= Номенклатура;
			МенеджерЗаписиСоответствийТоваров.ХарактеристикаНоменклатуры	= Характеристика;
			МенеджерЗаписиСоответствийТоваров.КодТовараПартнера				= СокрЛП(Стр.GUID);
			МенеджерЗаписиСоответствийТоваров.GTIN							= "";
			МенеджерЗаписиСоответствийТоваров.НаименованиеПартнера			= СокрЛП(Стр.НаименованиеМеркурий);
			МенеджерЗаписиСоответствийТоваров.Единица						= Стр.ЕдиницаИзмерения;
			МенеджерЗаписиСоответствийТоваров.КоэффициентEDIВ1С				= Стр.КоэффициентУмножения;
			
			МенеджерЗаписиСоответствийТоваров.Записать();
			
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ()


//Конвертация в XDTO
Функция ВычислитьXDTO(ОбъектXDTO,Путь) 
	
	Возврат ОсновнойМодуль.ВычислитьXDTO(ОбъектXDTO,Путь);

КонецФункции

Функция Записатьconsignor_XDTO(Сообщение)

	consignor = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "BusinessMember");
	consignor.businessEntity =  КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "BusinessEntity");
	xmlЗаполнитьЗначениеXDTO(consignor.businessEntity,"GUID",Сообщение.ХозяйствующийСубъектEDI.GUID);
	consignor.enterprise = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "Enterprise");
	xmlЗаполнитьЗначениеXDTO(consignor.enterprise,"GUID",Сообщение.ПлощадкаEDI.GUID);
	
	Возврат consignor;
КонецФункции // Записатьconsignor_XDTO()

Функция Записатьconsignee_XDTO(Сообщение)

	consignee = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "BusinessMember");
	consignee.businessEntity =  КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "BusinessEntity");
	xmlЗаполнитьЗначениеXDTO(consignee.businessEntity,"GUID",Сообщение.ХозяйствующийСубъектПолучательEDI.GUID);
	consignee.enterprise = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "Enterprise");
	xmlЗаполнитьЗначениеXDTO(consignee.enterprise,"GUID",Сообщение.ПлощадкаПолучательEDI.GUID);
	Возврат consignee;
	
КонецФункции // Записатьconsignee_XDTO()

Функция Записатьwaybill_XDTO(Сообщение)

	waybill = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/shipment", "Waybill");
	waybill.type = "1"; //заглушка всегда ТТН
	waybill.transportInfo = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/shipment", "TransportInfo");
	waybill.transportInfo.transportNumber = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/shipment", "TransportNumber");
	
	xmlЗаполнитьЗначениеXDTO(waybill.transportInfo.transportNumber,"vehicleNumber",Сообщение.Транспорт.НомерТранспортногоСредства);
	xmlЗаполнитьЗначениеXDTO(waybill.transportInfo.transportNumber,"wagonNumber",Сообщение.Транспорт.НомерВагона);
	xmlЗаполнитьЗначениеXDTO(waybill.transportInfo.transportNumber,"shipName",Сообщение.Транспорт.НомерКонтейнера); //или имя судна
	xmlЗаполнитьЗначениеXDTO(waybill.transportInfo.transportNumber,"trailerNumber",Сообщение.Транспорт.НомерПолуприцепа);
	xmlЗаполнитьЗначениеXDTO(waybill.transportInfo.transportNumber,"flightNumber",Сообщение.Транспорт.НомерАвиарейса);
	
	
	//waybill.transportInfo.transportType = Сообщение.Транспорт.ВидТранспорта;
	xmlЗаполнитьЗначениеXDTO(waybill.transportInfo,"transportType",Сообщение.Транспорт.ВидТранспорта);
	//waybill.transportStorageType = Сообщение.Транспорт.СпособХраненияПриПеревозке;
	xmlЗаполнитьЗначениеXDTO(waybill,"transportStorageType",Сообщение.Транспорт.СпособХраненияПриПеревозке);
	
	//Дата номер ТТН Кстати о Серии ТТН - при запросе списка ВСД - серии нет тоесть при гашении входящего взять её неоткуда
	xmlЗаполнитьЗначениеXDTO(waybill,"issueNumber",Сообщение.ДокументEDI.Номер);
	xmlЗаполнитьЗначениеXDTO(waybill,"issueDate",Сообщение.ДокументEDI.Дата);
	Возврат waybill;
	
КонецФункции // Записатьwaybill_XDTO()

Функция ЗаписатьСообщениеМеркурийXDTO(ТипСообщения,Параметры) Экспорт
	//функция ожидает что в таб части товары будет столько строк, сколько вы хотите отправить в транзакции!
	//учтите что в транзакциях прихода возможно только 1 строка ()
	
	Сообщение = Параметры.Сообщение;
	
	Если ТипСообщения <> "M_PRD" Тогда
		delivery = ПолучитьФабрикуМеркурий("ВетДокумент", "Delivery");
		
		Consignment =  delivery.consignment;
		
		ЗаписатьТабЧастьМеркурий_Consignment_XDTO(Consignment,Сообщение.Товары,"Consignment",КорневаяФабрика,ТипСообщения);
		
		waybill = Записатьwaybill_XDTO(Сообщение);
		
		accompanyingForms =  КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "ConsignmentDocumentList");
		accompanyingForms.waybill = waybill;
	КонецЕсли;
	
	Если ТипСообщения = "M_DES" 
		ИЛИ ТипСообщения = "M_MOV" Тогда
		
		vetCertificate = ПолучитьШапкуВетДокумента(Сообщение,waybill);
		
		Если ЗначениеЗаполнено(Сообщение.Перевозчик1С) Тогда 
			broker =  КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "BusinessEntity");
	        vetCertificate.broker = broker;
			xmlЗаполнитьЗначениеXDTO(vetCertificate.broker,"GUID",Сообщение.ПеревозчикEDI.GUID);
			
			broker =  КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "BusinessEntity");
			accompanyingForms.waybill.broker = broker;
			xmlЗаполнитьЗначениеXDTO(accompanyingForms.waybill.broker,"GUID",Сообщение.ПеревозчикEDI.GUID);
		КонецЕсли;
		
		accompanyingForms.vetCertificate.Добавить(vetCertificate);    //может оказаться несколько сертификатов
		
	ИначеЕсли ТипСообщения =  "M_REC"
		ИЛИ ТипСообщения =  "M_INC"
		 Тогда
		
		ТоварыСвернутыеПоНомерамВСД = Сообщение.Товары.Скопировать(,"ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата,ЦельEDI,ВетСертификатЭкспертиза,ВетСертификатРезультатыЭкспертизы,ВетСертификатОбследованоВетВрачом,ВетСертификатОсобыеОтметки");
		//ТоварыСвернутыеПоНомерамВСД = Сообщение.Товары.Скопировать();
		ТоварыСвернутыеПоНомерамВСД.Свернуть("ВетСертификатUUID,ВетСертификатСерия,ВетСертификатНомер,ВетСертификатДата,ЦельEDI,ВетСертификатЭкспертиза,ВетСертификатРезультатыЭкспертизы,ВетСертификатОбследованоВетВрачом,ВетСертификатОсобыеОтметки");
		
		Для Каждого СтрокаВСДТоваров Из ТоварыСвернутыеПоНомерамВСД Цикл          
			//реальность кейса: нам на бумаге прислали свернутую ВСД: 1 на 5 позиций - у нас в приходе она развернута по товарам - деваться некуда, надо отражать как есть
			//а еще может часть продукции из нее оказаться испорченной - но тогда это бует отражаться в consignment
			vetCertificate = ПолучитьШапкуВетДокумента(Сообщение,waybill);
			vetCertificate.cargoExpertized = СтрокаВСДТоваров.ВетСертификатЭкспертиза;
			vetCertificate.cargoInspected = СтрокаВСДТоваров.ВетСертификатОбследованоВетВрачом;
			
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"UUID",СтрокаВСДТоваров.ВетСертификатUUID);
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"specialMarks",СтрокаВСДТоваров.ВетСертификатОсобыеОтметки);
			xmlЗаполнитьЗначениеXDTO(vetCertificate.purpose,"guid",СтрокаВСДТоваров.ЦельEDI);
			
			//шапка
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"transportStorageType",waybill.transportStorageType); //копируем из 
			xmlЗаполнитьЗначениеXDTO(vetCertificate.purpose,"guid",СтрокаВСДТоваров.ЦельEDI);
			
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"issueSeries",СтрокаВСДТоваров.ВетСертификатСерия);
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"issueNumber",СтрокаВСДТоваров.ВетСертификатНомер);
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"issueDate",СтрокаВСДТоваров.ВетСертификатДата);
			
			vetCertificate.consignor = Записатьconsignor_XDTO(Сообщение);
			vetCertificate.consignee = Записатьconsignee_XDTO(Сообщение);
			vetCertificate.batch = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "Batch");
			
			ТоварыПоВСД = ПолучитьТоварыИзТабЧастиПоВСД(СтрокаВСДТоваров,Сообщение.Товары);
			
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"locationProsperity",ТоварыПоВСД[0].ВетСертификатБлагополучиеМестности);

			ЗаписатьСтрокуТоваровМеркурий_XDTO(vetCertificate.batch,ТоварыПоВСД[0],ТипСообщения);
			xmlЗаполнитьЗначениеXDTO(vetCertificate,"form",ТоварыПоВСД[0].ВетСертификатФорма);
			
			vetCertificate.confirmedBy = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/common", "User");
			xmlЗаполнитьЗначениеXDTO(vetCertificate.confirmedBy,"fio",ТоварыПоВСД[0].ВетСертификатВрачФИО);
			xmlЗаполнитьЗначениеXDTO(vetCertificate.confirmedBy,"post",ТоварыПоВСД[0].ВетСертификатВрачДолжность);
			
			//Однако Количество И КоличествоУпаковок в этом случае неверны!
			//рефакторинг packingList - по идее надо состряпать общий список
			vetCertificate.batch.volume 			= 0;
			vetCertificate.batch.packingAmount 		= 0;
			Для Каждого СтрокаТовараПоВСД Из ТоварыПоВСД Цикл
				vetCertificate.batch.volume 		= vetCertificate.batch.volume + СтрокаТовараПоВСД.Количество;
				vetCertificate.batch.packingAmount 	= vetCertificate.batch.packingAmount + СтрокаТовараПоВСД.КоличествоУпаковок;
			КонецЦикла;
			
			accompanyingForms.vetCertificate.Добавить(vetCertificate);    //может оказаться несколько сертификатов
		КонецЦикла;
		
	ИначеЕсли ТипСообщения =  "M_PRD" Тогда
		
		СведенияОПредприятии = Записатьconsignor_XDTO(Сообщение); //просто чтобы было откуда достать
		businessEntity = СведенияОПредприятии.businessEntity;
		enterprise = СведенияОПредприятии.enterprise;
		
		productionOperation = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "ProductionOperation");
		
		xmlЗаполнитьЗначениеXDTO(productionOperation,"operationId",Сообщение.ИдентификаторПроизводственнойТранзакции);  //для незавершенного производства
		
		Если Сообщение.Завершена = Истина Тогда
			xmlЗаполнитьЗначениеXDTO(productionOperation,"finalizeOperation",Истина);  //завершаем производственную транзакцию
		КонецЕсли;
		
		//Товары
		Для Каждого стр из Сообщение.Товары Цикл
			productiveBatch = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "ProductiveBatch");
			ЗаписатьСтрокуТоваровМеркурий_XDTO(productiveBatch,стр,ТипСообщения);
			productionOperation.productiveBatch.Добавить(productiveBatch);
		КонецЦикла;
		
		//Сырье
		Для Каждого стр из Сообщение.Сырье Цикл
			rawBatch = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "RawBatch");
			ЗаполнитьСтрокуСырьяМеркурий_XDTO(rawBatch,стр,ТипСообщения);
			productionOperation.rawBatch.Добавить(rawBatch);
		КонецЦикла;
		
		vetDocument			= КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "VetDocument");	
		vetDocument.cargoInspected = Сообщение.ВетСертификатОбследованоВетВрачом = Истина;
		vetDocument.cargoExpertized = Сообщение.ВетСертификатЭкспертиза = Истина;
		vetDocuments = Новый СписокЗначений();
		vetDocuments.Добавить(vetDocument);
		
	КонецЕсли;
	
	Если ТипСообщения <> "M_PRD" Тогда
		delivery.accompanyingForms = accompanyingForms;   
		delivery.consignor = Записатьconsignor_XDTO(Сообщение);
		delivery.consignee = Записатьconsignee_XDTO(Сообщение);
		Если ТипСообщения = "M_INC" Тогда
			xmlЗаполнитьЗначениеXDTO(delivery,"deliveryDate",Сообщение.ДатаПоставки);
		Иначе
			xmlЗаполнитьЗначениеXDTO(delivery,"deliveryDate",Сообщение.ДатаОтгрузки);
		КонецЕсли;
	КонецЕсли;
	ПараметрыТранзакции = Новый Структура();
	МассивСписковXDTO = Новый Массив();
	
	Если ТипСообщения = "M_DES" 
		ИЛИ ТипСообщения = "M_MOV" Тогда
		
		МассивСписковXDTO.Добавить("delivery");
		Список_delivery = Новый СписокЗначений();
		Список_delivery.Добавить(delivery);
		
		ПараметрыТранзакции.Вставить("delivery",			Список_delivery);
		
	ИначеЕсли  ТипСообщения = "M_PRD" Тогда
		
		ПараметрыТранзакции.Вставить("businessEntity",		businessEntity);
		ПараметрыТранзакции.Вставить("enterprise", 			enterprise);	
		ПараметрыТранзакции.Вставить("productionOperation", ProductionOperation);	
		
		ПараметрыТранзакции.Вставить("VetDocument", 	vetDocuments);
		МассивСписковXDTO.Добавить("VetDocument");
		
	ИначеЕсли  ТипСообщения = "M_REC" Тогда
		ПараметрыТранзакции.Вставить("delivery",			delivery);
		ПараметрыТранзакции.Вставить("deliveryFacts", 		ЗаписатьdeliveryFacts_XDTO(Сообщение));	//заглушка

	ИначеЕсли  ТипСообщения  = "M_INC" Тогда
		
		ПараметрыТранзакции.Вставить("delivery",			delivery);
		
		Если Сообщение.Товары.Количество()>0 Тогда
			текСтр = Сообщение.Товары.Получить(0);
			
			ПараметрыТранзакции.Вставить("deliveryFacts", 		ЗаписатьdeliveryFacts_XDTO(Сообщение));
			Если текСтр.КоличествоКПодтверждению>текСтр.Количество Тогда
				МассивСписковXDTO.Добавить("discrepancyReport");
				Список_discrepancyReport = Новый СписокЗначений();
				Список_discrepancyReport.Добавить(ЗаписатьDiscrepancyReport_XDTO(Сообщение));
				
				ПараметрыТранзакции.Вставить("discrepancyReport", 		Список_discrepancyReport);
			КонецЕсли;			
			
			Если текСтр.КоличествоКПодтверждению<текСтр.Количество Тогда
				
				returnedDelivery = СкопироватьОбъектXDTO(delivery);
				returnedDelivery.consignor = СкопироватьОбъектXDTO(delivery.consignee);
				returnedDelivery.consignee = СкопироватьОбъектXDTO(delivery.consignor);
				returnedDelivery.consignment[0].volume = текСтр.Количество - текСтр.КоличествоКПодтверждению;
				ВозвращаемУпаковок = текСтр.КоличествоУпаковок - текСтр.КоличествоУпаковокКПодтверждению;
				УпаковкаUUID = текСтр.ЕдиницаИзмеренияУпаковокUUID;
				Если ЗначениеЗаполнено(УпаковкаUUID) и ВозвращаемУпаковок<>0 Тогда 
					returnedDelivery.consignment[0].packingAmount = ВозвращаемУпаковок;
					returnedDelivery.consignment[0].packinglist		    = ПолучитьФабрикуМеркурий("АргусОбщие","PackingFormList"); //обязателен если указывается packingAmount
					ЭлементУпаковки = returnedDelivery.consignment[0].packinglist.packingForm.Добавить(ПолучитьФабрикуМеркурий("АргусОбщие","PackingForm"));
					ЭлементУпаковки.name = Строка(текСтр.ЕдиницаИзмеренияУпаковок);
					xmlЗаполнитьЗначениеXDTO(ЭлементУпаковки,"uuid",текСтр.ЕдиницаИзмеренияУпаковокUUID);
				Иначе
					returnedDelivery.consignment[0].packingAmount = 0;
					returnedDelivery.consignment[0].packinglist		    = ПолучитьФабрикуМеркурий("АргусОбщие","PackingFormList"); //очистим
				КонецЕсли;
				
				ПараметрыТранзакции.Вставить("returnedDelivery", returnedDelivery);
				
			КонецЕсли;
			
		Иначе
			ПараметрыТранзакции.Вставить("deliveryFacts", 		ЗаписатьdeliveryFacts_XDTO(Сообщение));	//заглушка
		КонецЕсли;
				
	КонецЕсли;
	
	ПараметрыТранзакции.Вставить("Наименование", 		Параметры.ИмяМетода);
	ПараметрыТранзакции.Вставить("initiator", 			ВыбратьПараметрыПодключенияДляТранзакции(ТипСообщения,Параметры).user);
	
	ПараметрыТранзакции.Вставить("МассивСписков", 		МассивСписковXDTO);	
	
	//Заполнение фабрики по маппингу полей
	
	
	Возврат ПараметрыТранзакции;
	
КонецФункции

Функция СкопироватьОбъектXDTO(ОбъектXDTO)
	
	ЗаписьХМЛ= Новый ЗаписьXML;				
	ЗаписьХМЛ.УстановитьСтроку();			
	КорневаяФабрика().ЗаписатьXML(ЗаписьХМЛ, ОбъектXDTO);
	Стр=ЗаписьХМЛ.Закрыть();
	ЧтениеXML= Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(стр);
	ЧтениеXML.ПерейтиКСодержимому();
	ТипОбъектаXDTO=КорневаяФабрика().Тип(ЧтениеXML.URIПространстваИмен,ЧтениеXML.Имя);
	Возврат КорневаяФабрика().ПрочитатьXML(ЧтениеXML,ТипОбъектаXDTO);

КонецФункции

Функция ЗаписатьDiscrepancyReport_XDTO(Сообщение)
	
	//СерияАктаНесоответствия = Сообщение.ДокументСсылка.Номер;
	//НомерАктаНесоответствия = "1";

	reason =  КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "DiscrepancyReason");
	xmlЗаполнитьЗначениеXDTO(reason,"name","отклонение при приемке");
		
	DiscrepancyReport =  КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "DiscrepancyReport");
	//xmlЗаполнитьЗначениеXDTO(DiscrepancyReport,"issueSeries",СерияАктаНесоответствия);
	//xmlЗаполнитьЗначениеXDTO(DiscrepancyReport,"issueNumber",НомерАктаНесоответствия);
	xmlЗаполнитьЗначениеXDTO(DiscrepancyReport,"issueDate",ТекущаяДата());
	xmlЗаполнитьЗначениеXDTO(DiscrepancyReport,"description","отклонение при приемке");
	DiscrepancyReport.reason = reason;
	
	Возврат DiscrepancyReport;
	
КонецФункции

Функция ЗаписатьdeliveryFacts_XDTO(Сообщение)
	
	текСтр = Сообщение.Товары.Получить(0);
	Если текСтр.КоличествоКПодтверждению>текСтр.Количество Тогда
		СовпадениеКоличества = "MISMATCH";//будем заявлять несоответствие только если количество превышает указанное в всд	
	Иначе
		СовпадениеКоличества = "CORRESPONDS";	
	КонецЕсли;
	
	Если текСтр.КоличествоКПодтверждению = 0 Тогда
		РешениеОПриеме = "RETURN_ALL";
	ИначеЕсли текСтр.КоличествоКПодтверждению<текСтр.Количество Тогда
		РешениеОПриеме = "PARTIALLY";
	Иначе
		РешениеОПриеме = "ACCEPT_ALL";
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_INC" Тогда
		ТипДокументов = "ELECTRONIC";
	Иначе
		ТипДокументов = "PAPER";
	КонецЕсли;
	deliveryFacts =  КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "DeliveryFactList");
	xmlЗаполнитьЗначениеXDTO(deliveryFacts,"vetCertificatePresence",ТипДокументов);
	xmlЗаполнитьЗначениеXDTO(deliveryFacts,"decision",РешениеОПриеме);
	
	//Кто принимал Груз
	docInspection =  КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "DeliveryInspection");
	xmlЗаполнитьЗначениеXDTO(docInspection,"result",СовпадениеКоличества);
	docInspection.responsible = ВыбратьПараметрыПодключенияДляТранзакции(Сообщение.ТипСообщения, Новый Структура("Сообщение",Сообщение)).user;	
	//кто делал вет инспекцию
	vetInspection =  КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "DeliveryInspection");
	xmlЗаполнитьЗначениеXDTO(vetInspection,"result",СовпадениеКоличества);
	vetInspection.responsible = ВыбратьПараметрыПодключенияДляТранзакции(Сообщение.ТипСообщения, Новый Структура("Сообщение",Сообщение)).user;	
	
	deliveryFacts.docInspection = docInspection;
	deliveryFacts.vetInspection = vetInspection;

	Возврат deliveryFacts;
	
КонецФункции // ЗаписатьdeliveryFacts_XDTO()

Функция ПолучитьТоварыИзТабЧастиПоВСД(СтрокаВСДТоваров,Товары)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВетСертификатUUID",СтрокаВСДТоваров.ВетСертификатUUID);
	Отбор.Вставить("ВетСертификатСерия",СтрокаВСДТоваров.ВетСертификатСерия);
	Отбор.Вставить("ВетСертификатНомер",СтрокаВСДТоваров.ВетСертификатНомер);
	Отбор.Вставить("ВетСертификатДата",СтрокаВСДТоваров.ВетСертификатДата);
	
	Возврат Товары.НайтиСтроки(Отбор);
	
КонецФункции // ПолучитьТоварыИзТабЧастиПоВСД()

Функция ПолучитьШапкуВетДокумента(Сообщение,waybill)

	vetCertificate =  КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "VetDocument");
	vetCertificate.purpose = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/common", "Purpose");
	vetCertificate.transportInfo = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/shipment", "TransportInfo");
	vetCertificate.transferPermit = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/common", "Document");
	vetCertificate.transportInfo.transportNumber = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/shipment", "TransportNumber");
	
	Если ЗначениеЗаполнено(waybill.transportInfo.transportNumber.vehicleNumber) Тогда
		ЗаполнитьЗначенияСвойств(vetCertificate.transportInfo.transportNumber,waybill.transportInfo.transportNumber,"vehicleNumber"); //копируем копируем из waybill
	КонецЕсли;
	Если ЗначениеЗаполнено(waybill.transportInfo.transportType) Тогда
		ЗаполнитьЗначенияСвойств(vetCertificate.transportInfo,waybill.transportInfo,"transportType"); //копируем из waybill
	КонецЕсли;
	
	Если Сообщение.Свойство("РазрешениеНаВывозНомер") Тогда
		xmlЗаполнитьЗначениеXDTO(vetCertificate.transferPermit,"issueNumber",Сообщение.РазрешениеНаВывозНомер);
	КонецЕсли;
	Если Сообщение.Свойство("РазрешениеНаВывозДата") Тогда
		xmlЗаполнитьЗначениеXDTO(vetCertificate.transferPermit,"issueDate",Сообщение.РазрешениеНаВывозДата);
	КонецЕсли;
	xmlЗаполнитьЗначениеXDTO(vetCertificate.purpose,"guid",Сообщение.ЦельEDI.GUID);
	
	Если Сообщение.Свойство("ВетСертификатОбследованоВетВрачом") Тогда 
		vetCertificate.cargoInspected = Сообщение.ВетСертификатОбследованоВетВрачом = Истина;
	Иначе
		vetCertificate.cargoInspected = Истина;
	КонецЕсли;
	Если Сообщение.Свойство("ВетСертификатЭкспертиза") Тогда 
		vetCertificate.cargoExpertized = Сообщение.ВетСертификатЭкспертиза = Истина;
	Иначе
		vetCertificate.cargoExpertized = Истина;
	КонецЕсли;
	//ЭкспертизаПоВсемСтрокам = Сообщение.Товары.Итог("ВетСертификатЭкспертиза") = Сообщение.Товары.Количество();
	//vetCertificate.cargoExpertized = ЭкспертизаПоВсемСтрокам;
	Если Сообщение.Свойство("БлагополучиеМестности") и ЗначениеЗаполнено(Сообщение.БлагополучиеМестности) Тогда
		vetCertificate.locationProsperity = Сообщение.БлагополучиеМестности;
	КонецЕсли;

	Возврат vetCertificate;
КонецФункции // ПолучитьШапкуВетДокумента()

Процедура ЗаписатьСтрокуИнвентаризацииМеркурий_XDTO(stockEntry,стр,GUIDХозСуб)
    //эта функция предполагает что переданное ей стр.Количесвто
	//следует в явном виде присвоить переданной партии (UUID партии устанавливается на уровень выше)
	
	ConsignmentOrBatch = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "Batch");
	xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch,"Volume",стр.Количество,Истина);
	
	Unit	 			= КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/argus/common", 			"Unit");
	xmlЗаполнитьЗначениеXDTO(Unit,"UUID",стр.unitUUID);
	ConsignmentOrBatch.unit				= Unit;
	
	ЗаполнитьТиповыеИдентификаторыBatchизСтрокиТоваров(ConsignmentOrBatch,стр);
	
	ConsignmentOrBatch.lowGradeCargo = Ложь;
	
	
	//Страна производитель
	ConsignmentOrBatch.countryOfOrigin = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/ikar", 			"Country");
	xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.countryOfOrigin,"UUID",стр.СтранаUUID);
	//владелец
	owner =  КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "BusinessEntity");
	xmlЗаполнитьЗначениеXDTO(owner,"GUID",GUIDХозСуб);
	ConsignmentOrBatch.owner = owner;
	
	ConsignmentOrBatch.productItem = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/production", 			"ProductItem");
	
	xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.productItem,"name",Стр.Наименование);
	Если ЗначениеЗаполнено(Стр.productItemUUID) Тогда 
		xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.productItem,"uuid",Стр.productItemUUID);
	КонецЕсли;
	
	stockEntry.batch=ConsignmentOrBatch;
	
КонецПроцедуры

Процедура ЗаполнитьТиповыеИдентификаторыBatchизСтрокиТоваров(ConsignmentOrBatch,стр)
	
	Если ЗначениеЗаполнено(Стр.GUID) Тогда
		СтруктураВерхнихУровней = ПолучитьproductGUIDиproductTypeПоsubProductGUID(Стр.GUID);
		xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch,"productType",СтруктураВерхнихУровней.productType);
		
		ConsignmentOrBatch.product = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/production", 			"Product");
		xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.product,"GUID",СтруктураВерхнихУровней.productGUID);
	КонецЕсли;
	
	ConsignmentOrBatch.subproduct = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/production", 			"SubProduct");
	xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.subProduct,"GUID",Стр.GUID);
	
	ConsignmentOrBatch.dateOfProduction = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", 			"GoodsDate");
	ConsignmentOrBatch.dateOfProduction.firstDate = ПолучитьМеркурийComplexDate(стр.ДатаПроизводства);
	Если Значениезаполнено(стр.ДатаПроизводства2) Тогда 
		ConsignmentOrBatch.dateOfProduction.secondDate = ПолучитьМеркурийComplexDate(стр.ДатаПроизводства2);
	КонецЕсли;
	ConsignmentOrBatch.expiryDate = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", 			"GoodsDate");
	ConsignmentOrBatch.expiryDate.firstDate = ПолучитьМеркурийComplexDate(стр.СрокГодности);
	Если Значениезаполнено(стр.СрокГодности2) Тогда 
		ConsignmentOrBatch.expiryDate.secondDate = ПолучитьМеркурийComplexDate(стр.СрокГодности2);
	КонецЕсли;
	
	xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch,"perishable",стр.Скоропортящаяся = Истина);
	
КонецПроцедуры


Процедура ЗаписатьСтрокуТоваровМеркурий_XDTO(ConsignmentOrBatch,стр,ТипСообщения)

		Unit	 			= КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/argus/common", 			"Unit");
		
		xmlЗаполнитьЗначениеXDTO(Unit,"GUID",стр.unitGUID);
		xmlЗаполнитьЗначениеXDTO(Unit,"UUID",стр.unitUUID);
		
		Если ТипСообщения =  "M_DES" ИЛИ ТипСообщения =  "M_MOV" Тогда
			
			sourceStockEntry 	= КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document","StockEntry");
			xmlЗаполнитьЗначениеXDTO(sourceStockEntry,"GUID",стр.ИсходнаяПартияGUID);
			ConsignmentOrBatch.sourceStockEntry	= sourceStockEntry;
			
			////пробуем присвоить SSCC в момент огрузки - вот этот кусок будет актуальным только для версии 2.0, версия 1.4 не поддерживает установку SSCC в момент отгрузки //пока что пусть тут полежит
			//	ConsignmentOrBatch.productMarkingList = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document",  "ProductMarkingList");
			//	Если ЗначениеЗаполнено(стр.Маркировка) Тогда
			//		productMarking = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document",  "ProductMarking");
			//		productMarking.__content = стр.Маркировка;
			//		productMarking.class = "BN"; //UNDEFINED - дефолт /SSCC /BN - номер партии !Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
			//		ConsignmentOrBatch.productMarkingList.productMarking.Добавить(productMarking);
			//	КонецЕсли;
			//	Если ЗначениеЗаполнено(стр.SSCC) Тогда
			//		productMarkingSSCC = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document",  "ProductMarking");
			//		productMarkingSSCC.__content = стр.SSCC;
			//		productMarkingSSCC.class = "SSCC"; //UNDEFINED - дефолт /SSCC /BN - номер партии !Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
			//		ConsignmentOrBatch.productMarkingList.productMarking.Добавить(productMarkingSSCC);
			//	КонецЕсли;
			
		ИначеЕсли ТипСообщения =  "M_REC" ИЛИ ТипСообщения =  "M_INC" ИЛИ ТипСообщения =  "M_PRD" Тогда

			ЗаполнитьТиповыеИдентификаторыBatchизСтрокиТоваров(ConsignmentOrBatch,стр);

			Если ТипСообщения =  "M_PRD" ИЛИ ТипСообщения =  "M_REC" Тогда
				
				//МаркировкаТип=КорневаяФабрика.Тип("http://api.vetrf.ru/schema/cdm/base","String255");
				//Маркировка=КорневаяФабрика.Создать(МаркировкаТип,стр.Маркировка);
				
				ConsignmentOrBatch.productMarkingList = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document",  "ProductMarkingList");
				Если ЗначениеЗаполнено(стр.Маркировка) Тогда
					productMarking = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document",  "ProductMarking");
					productMarking.__content = стр.Маркировка;
					productMarking.class = "BN"; //UNDEFINED - дефолт /SSCC /BN - номер партии !Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
					ConsignmentOrBatch.productMarkingList.productMarking.Добавить(productMarking);
				КонецЕсли;
				Если ЗначениеЗаполнено(стр.SSCC) Тогда
					productMarkingSSCC = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document",  "ProductMarking");
					productMarkingSSCC.__content = стр.SSCC;
					productMarkingSSCC.class = "SSCC"; //UNDEFINED - дефолт /SSCC /BN - номер партии !Важно, чтобы номера партий совпадали при совершении операции незавершённого производства.
					ConsignmentOrBatch.productMarkingList.productMarking.Добавить(productMarkingSSCC);
				КонецЕсли;
			КонецЕсли;
			
			Если ТипСообщения =  "M_REC" ИЛИ ТипСообщения =  "M_INC" Тогда
				//Страна производитель
				ConsignmentOrBatch.countryOfOrigin = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/ikar", 			"Country");
				xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.countryOfOrigin,"UUID",стр.СтранаUUID);
				
				//производитель (по сути взять GUID и затолкать в глубину)
				ПлощадкаПроизводительМеркурий = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "Enterprise");
				xmlЗаполнитьЗначениеXDTO(ПлощадкаПроизводительМеркурий,"GUID",стр.ПлощадкаПроизводительGUID);
				ПроизводительМеркурий = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", 			"Producer");
				ПроизводительМеркурий.enterprise = ПлощадкаПроизводительМеркурий;
				
				ConsignmentOrBatch.producerList 	= КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", 			"ProducerList");
				ConsignmentOrBatch.producerList.producer.Добавить(ПроизводительМеркурий);              
			КонецЕсли;
			
			//некачественный груз по факту - дефолтом ложь
			ConsignmentOrBatch.lowGradeCargo 	= ?(стр.НекачественныйГруз=Истина,Истина,Ложь);
			
		КонецЕсли;
		
		ConsignmentOrBatch.productItem = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/production", 			"ProductItem");
		xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.productItem,"name",Стр.Наименование);
		
		Если ТипСообщения =  "M_MOV" 
			ИЛИ ТипСообщения =  "M_DES" 
			ИЛИ ТипСообщения =  "M_PRD"
			ИЛИ ТипСообщения =  "M_INC"
			Тогда
			Если ЗначениеЗаполнено(Стр.productItemUUID) Тогда 
				xmlЗаполнитьЗначениеXDTO(ConsignmentOrBatch.productItem,"uuid",Стр.productItemUUID);
			Иначе  //приоритет на сервере должен быть по UUID
			КонецЕсли;
		КонецЕсли;
		
		Если ТипСообщения =  "M_INC" Тогда
			ConsignmentOrBatch.Volume				= стр.КоличествоКПодтверждению;
			КоличествоУпаковок = стр.КоличествоУпаковокКПодтверждению;
		Иначе
			ConsignmentOrBatch.Volume				= стр.Количество;
			КоличествоУпаковок = стр.КоличествоУпаковок;
		КонецЕсли;
		
		Если КоличествоУпаковок > 0 Тогда
			ConsignmentOrBatch.packingAmount       = КоличествоУпаковок;
			ConsignmentOrBatch.packinglist		    = ПолучитьФабрикуМеркурий("АргусОбщие","PackingFormList"); //обязателен если указывается packingAmount
			ЭлементУпаковки = ConsignmentOrBatch.packinglist.packingForm.Добавить(ПолучитьФабрикуМеркурий("АргусОбщие","PackingForm"));
			ЭлементУпаковки.name = Строка(стр.ЕдиницаИзмеренияУпаковок);
			xmlЗаполнитьЗначениеXDTO(ЭлементУпаковки,"uuid",стр.ЕдиницаИзмеренияУпаковокUUID);
		КонецЕсли;
		
		ConsignmentOrBatch.unit				= Unit;
КонецПроцедуры

Процедура ЗаполнитьСтрокуСырьяМеркурий_XDTO(rawBatch,стр,ТипСообщения)
	
	
	Если ТипСообщения =  "M_PRD" Тогда
		
		sourceStockEntry 	= КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document","StockEntry");
		sourceStockEntry.GUID 	= стр.ИсходнаяПартияGUID; 
		rawBatch.sourceStockEntry	= sourceStockEntry;
		rawBatch.Volume				= стр.Количество;
		
		Unit	 			= КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/argus/common", 			"Unit");
		xmlЗаполнитьЗначениеXDTO(Unit,"GUID",стр.unitGUID);
		xmlЗаполнитьЗначениеXDTO(Unit,"UUID",стр.unitUUID);
		rawBatch.unit				= Unit;
		
		Если ЗначениеЗаполнено(стр.ЕдиницаИзмеренияУпаковокUUID) и стр.КоличествоУпаковок > 0 Тогда  //ЕИ Упаковок можно использовать только вместе с Количеством упаковок
			rawBatch.packinglist		    = ПолучитьФабрикуМеркурий("АргусОбщие","PackingFormList"); //обязателен если указывается packingAmount
			ЭлементУпаковки = rawBatch.packinglist.packingForm.Добавить(ПолучитьФабрикуМеркурий("АргусОбщие","PackingForm"));
			xmlЗаполнитьЗначениеXDTO(ЭлементУпаковки,"name",Строка(стр.ЕдиницаИзмеренияУпаковок));
			xmlЗаполнитьЗначениеXDTO(ЭлементУпаковки,"UUID",стр.ЕдиницаИзмеренияУпаковокUUID);
			
			rawBatch.packingAmount       = стр.КоличествоУпаковок;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьТабЧастьМеркурий_Consignment_XDTO(XDTOСостав,Товары,НазваниеТабЧасти,КорневаяФабрика,ТипСообщения)      //это может быть batch или consignment
	//Товары - табЗначений или массив строк ТЧ
	Для Каждого стр из Товары Цикл
		Consignment = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "Consignment");
		
		//Consignment = ПолучитьФабрикуМеркурий(ВетДокумент,"Consignment");
		ЗаписатьСтрокуТоваровМеркурий_XDTO(Consignment,стр,ТипСообщения);
		
		XDTOСостав.Добавить(Consignment);
	КонецЦикла;
	
КонецПроцедуры

Процедура xmlЗаполнитьЗначениеXDTO(ОбъектXDTO,ИмяПоля,Значение, НезаполненоКакНоль=Ложь)

	ОсновнойМодуль.xmlЗаполнитьЗначениеXDTO(ОбъектXDTO,ИмяПоля,Значение, НезаполненоКакНоль);	
               
КонецПроцедуры

//xsd схемы

Функция ПолучитьФабрикуМеркурий(ИмяXDTOСхемы,ТипОбъекта)
	
	НужнаяСтраница = "";
	НашлиСтраницу = БиблиотекаФабрикМеркурий().Свойство(ИмяXDTOСхемы,НужнаяСтраница);
	Если НашлиСтраницу Тогда
		Возврат КорневаяФабрика().Создать(НужнаяСтраница,ТипОбъекта);
	Иначе
		ВызватьИсключение "Не нашел xsd схему";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьФабрикуМеркурий(ИмяXDTOСхемы)

Функция БиблиотекаФабрикМеркурий()
	
	СписокСхем = Новый Структура;
	СписокСхем.Вставить("ВетДокумент","http://api.vetrf.ru/schema/cdm/mercury/vet-document");
	СписокСхем.Вставить("АргусПеревозки","http://api.vetrf.ru/schema/cdm/argus/shipment");
	СписокСхем.Вставить("АргусОбщие","http://api.vetrf.ru/schema/cdm/argus/common");
	Возврат СписокСхем;
	
КонецФункции

//Транспорт

Функция КорневаяФабрика() Экспорт

	Если КорневаяФабрика <> Неопределено тогда
		Возврат КорневаяФабрика;
	КонецЕсли;
	
	//значит протухло или инициализируемся
	
	//при создании единой фабрики создадим ws пакеты из самого сервиса, а прикладные возьмем свои
	//WSОпределениеApplication = WSСсылки.WSApplicationManagementsServiceTest.ПолучитьWSОпределения();
	WSОпределениеApplication = ПолучитьОпределениеПроксиИзМакета("ApplicationManagementsService_test_14");
	
	
	МассивURIПространствИмен = Новый Массив;  
	МассивURIПространствИмен.Добавить("http://api.vetrf.ru/schema/cdm/application/ws-definitions");  
	МассивURIПространствИмен.Добавить("http://api.vetrf.ru/schema/cdm/base/ws-definitions");  
	
	//ФабрикаWSApplication = Новый ФабрикаXDTO(WSОпределениеApplication.ФабрикаXDTO.ЭкспортМоделиXDTO(МассивURIПространствИмен), ФабрикаXDTO.Пакеты);
	ВременнаяФабрика = ПолучитьФабрикуXDTOМеркурий();
	ФабрикаWSApplication = Новый ФабрикаXDTO(WSОпределениеApplication.ФабрикаXDTO.ЭкспортМоделиXDTO(МассивURIПространствИмен), ВременнаяФабрика.Пакеты);  
	
	Пакеты = Новый Массив;  
	Пакеты.Добавить(ВременнаяФабрика.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/applications"));
	Пакеты.Добавить(ВременнаяФабрика.Пакеты.Получить("http://schemas.xmlsoap.org/soap/envelope/"));
	
	Для Каждого Пакет Из ФабрикаWSApplication.Пакеты Цикл  
		Пакеты.Добавить(Пакет);  
	КонецЦикла;  
	

	КорневаяФабрика = Новый ФабрикаXDTO(, Пакеты);

	Возврат(КорневаяФабрика);

КонецФункции // КорневаяФабрика()

Функция ПолучитьУчетнуюЗаписьПоНашейХСИЛИПлощадке(ХСGUID=Неопределено,ПлощадкаGUID=Неопределено)
	
	Если ЗначениеЗаполнено(ХСGUID) тогда
		НайденнаяУчетнаяЗапись = КэшУчетныхЗаписей().Найти(ХСGUID,"IssuerID");
		Если НайденнаяУчетнаяЗапись<>Неопределено тогда
			Возврат НайденнаяУчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПлощадкаGUID) тогда
		НайденнаяУчетнаяЗапись = КэшУчетныхЗаписей().Найти(ПлощадкаGUID,"ПлощадкаGUID");
		Если НайденнаяУчетнаяЗапись<>Неопределено тогда
			Возврат НайденнаяУчетнаяЗапись;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


Функция ПолучитьПараметрыПодключенияМеркурий(ФабрикаXD,ХСGUID=Неопределено,ПлощадкаGUID=Неопределено) Экспорт
	
	ПараметрыПодключения = Новый Структура();
	ListOptions = ПолучитьListOptionsXDTO(ФабрикаXD);
	Пользователь = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/argus/common","User");
	ПараметрыПодключения.Вставить("serviceId", 		ПолучитьКонстантуEDI("М_serviceId"));
	ПараметрыПодключения.Вставить("адрес", 			?(ПолучитьКонстантуEDI("М_ИспользуетсяТестовыйAPI"),ПолучитьКонстантуEDI("М_АдресТестовогоAPI"),ПолучитьКонстантуEDI("М_АдресAPI"))); //предусмотреть переключатель на боевой
	ПараметрыПодключения.Вставить("ListOptions", 	ListOptions);
	ПараметрыПодключения.Вставить("порт", 			8002);
	
	Если ЗначениеЗаполнено(ХСGUID)
		ИЛИ ЗначениеЗаполнено(ПлощадкаGUID) Тогда
		ПодходящаяУчетка = ПолучитьУчетнуюЗаписьПоНашейХСИЛИПлощадке(ХСGUID,ПлощадкаGUID);
		Если ПодходящаяУчетка<>неопределено Тогда
			Пользователь.login = ПодходящаяУчетка.ЛогинПользователя; 
			ПараметрыПодключения.Вставить("apiKey",  		ПодходящаяУчетка.APIKey);
			ПараметрыПодключения.Вставить("логин", 			ПодходящаяУчетка.ЛогинAPI);
			ПараметрыПодключения.Вставить("пароль", 		ПодходящаяУчетка.ПарольAPI);
			ПараметрыПодключения.Вставить("user", 			Пользователь);
			ПараметрыПодключения.Вставить("issuerId", 		ПодходящаяУчетка.IssuerId);
			Возврат(ПараметрыПодключения);
		КонецЕсли;
		
	КонецЕсли;
	
	Пользователь.login = ПолучитьКонстантуEDI("М_ЛогинПользователя"); 
	ПараметрыПодключения.Вставить("apiKey",  		ПолучитьКонстантуEDI("М_КлючAPI"));
	ПараметрыПодключения.Вставить("логин", 			ПолучитьКонстантуEDI("М_ЛогинAPI"));
	ПараметрыПодключения.Вставить("пароль", 		ПолучитьКонстантуEDI("М_ПарольAPI"));
	ПараметрыПодключения.Вставить("user", 			Пользователь);
	ПараметрыПодключения.Вставить("issuerId", 		ПолучитьКонстантуEDI("М_issuerId"));
	Возврат(ПараметрыПодключения);
	
КонецФункции

Функция ПолучитьListOptionsXDTO(ФабрикаXDTO) Экспорт
	
	ListOptions = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/base", "ListOptions");
	ListOptions.count = 1000;
	Возврат(ListOptions);
	
КонецФункции

Функция ВыполнитьЗапросМеркурийApplication(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения, ПараметрыФункцииНаименование = "", ДождатьсяРезультата = Ложь,ВернутьapplicationId = Неопределено) Экспорт
	
	Если ПараметрыФункцииНаименование = "" Тогда
		ПараметрыФункцииНаименование = ПараметрыФункции.Наименование;
	КонецЕсли;
	
	EnvelopeDO = Неопределено;
	
	//у нас будет несколько запросов на 1 сообщение
	ВСДUUID="";
	Если Параметрыфункции.Свойство("ВСДUUID") И ЗначениеЗаполнено(ПараметрыФункции.ВСДUUID) Тогда
		ВСДUUID = ПараметрыФункции.ВСДUUID;
	    ПараметрыФункции.localTransactionId = ПараметрыФункции.localTransactionId+ "_ВСД_"+ВСДUUID;
	КонецЕсли;
	ТекстЗапроса = ПодготовитьТелоЗапросаМеркурий(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения, ПараметрыФункцииНаименование, EnvelopeDO);	
	
	Если ПараметрыФункции.localTransactionId = "IncomingRobot" Тогда
		//зарезервировано для транзакций, не требующих сохранение в справочнике (например запрос списка входящих элВСД)
	Иначе
		ЗаписатьТекстЗапросаМеркурий(ПараметрыФункции.localTransactionId, ТекстЗапроса,ВСДUUID);
	КонецЕсли;
	
	Возврат ОтправитьЗапросМеркурийСАнализомОтвета(ТекстЗапроса, ПараметрыПодключения, ФабрикаXD, EnvelopeDO, ПараметрыФункции.localTransactionId, ДождатьсяРезультата,ВернутьapplicationId);	
		
КонецФункции

Функция ПодготовитьТелоЗапросаМеркурий(ФабрикаXD, ПараметрыФункции, ПараметрыПодключения, ПараметрыФункцииНаименование = "", EnvelopeDO = Неопределено) Экспорт

	mercuryApplicationsФункция = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/mercury/applications", ПараметрыФункцииНаименование); 
	ЗаполнитьЗначенияСвойств(mercuryApplicationsФункция, ПараметрыФункции);
	МассивСписков = Неопределено;
	Если ПараметрыФункции.Свойство("МассивСписков", МассивСписков) Тогда
		Для Каждого НазваниеСписка из МассивСписков Цикл
			ТекСписок = Неопределено;
			Если ПараметрыФункции.Свойство(НазваниеСписка, ТекСписок) Тогда
				Для Каждого ЭлементСписка из ТекСписок Цикл
					mercuryApplicationsФункция[НазваниеСписка].Добавить(ЭлементСписка.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ApplicationDataWrapper 	= ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/application", "ApplicationDataWrapper");
	ApplicationDataWrapper.Добавить(ФормаXML.Элемент, 
									mercuryApplicationsФункция.Тип().URIПространстваИмен, 
									СпасибоMercuryApplicationsЗаЧувствительностькРегистру(ПараметрыФункцииНаименование), 
									mercuryApplicationsФункция);

	Application = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/application", "Application");
	Application.serviceId 	= ПараметрыПодключения.serviceId;
    Application.issuerId	= ПараметрыПодключения.issuerId;
	Application.issueDate	= ТекущаяДата();
	Application.data = ApplicationDataWrapper;
	
	SubmitRequestDO = ФабрикаXD.Создать("http://api.vetrf.ru/schema/cdm/application/ws-definitions", "submitApplicationRequest"); 
	SubmitRequestDO.apiKey 		= ПараметрыПодключения.apiKey;
	SubmitRequestDO.Application = Application;
	
	
	EnvelopeDO = ФабрикаXD.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	EnvelopeDO.Body = ФабрикаXD.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Body");	
	EnvelopeDO.Body.Добавить(ФормаXML.Элемент, SubmitRequestDO.Тип().URIПространстваИмен, "submitApplicationRequest", SubmitRequestDO); 
	
	ТелоXML = Новый ЗаписьXML;  
	ТелоXML.УстановитьСтроку("UTF-8");  
	ФабрикаXD.ЗаписатьXML(ТелоXML, EnvelopeDO);  
	ТекстЗапроса = ТелоXML.Закрыть();
	
	Возврат ТекстЗапроса;

КонецФункции // ПодготовитьТелоЗапросаМеркурий()


Функция СпасибоMercuryApplicationsЗаЧувствительностькРегистру(ПараметрыФункцииНаименование)
	//Ребята познали сущность боли
	
	Возврат ""+НРЕГ(Лев(СокрЛП(ПараметрыФункцииНаименование),1))+Сред(СокрЛП(ПараметрыФункцииНаименование),2);
	

КонецФункции // СпасибоMercuryApplicationsЗаЧувствительностькРегистру(ПараметрыФункцииНаименование)()

Функция ОтрапортоватьСкоростьОбработкиЗаявки(ТекДатаЗапроса,ТекДатаОтработкиЗаявки,ПредметИсследования=неопределено)
	
	Если ПредметИсследования=неопределено Тогда 
		ПредметИсследования="выполнил";
	КонецЕсли;
	
	Если ВыводитьСкоростьРаботыСервераМеркурий = Истина Тогда
		РазницаСек = (ТекДатаОтработкиЗаявки - ТекДатаЗапроса)/1000; 
		Сообщить("ApplicationManagementService "+ПредметИсследования+" заявку за: "+РазницаСек+" сек.")
	КонецЕсли;
	
КонецФункции

Функция ОтправитьЗапросМеркурийСАнализомОтвета(Строка, ПараметрыПодключения, КорневаяФабрика, EnvelopeDO = Неопределено, КодСообщения = Неопределено, ДождатьсяРезультата=Ложь,ВернутьapplicationId = Неопределено) Экспорт
	
	Если КодСообщения = "IncomingRobot" Тогда
		//зарезервировано для транзакций, не требующих сохранение в справочнике (например запрос списка входящих элВСД или закрытие незавершенной транзакции)
	Иначе
		СообщениеСсылка = ПолучитьСообщениеСсылкаМеркурий(КодСообщения);
	КонецЕсли;
	
	Если EnvelopeDO = Неопределено Тогда
		EnvelopeDO = КорневаяФабрика().Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	КонецЕсли;
	
	
	//переделано для платформ ниже 8.2.17
	ИмяФайлаЗапроса=ПолучитьИмяВременногоФайла();
	ИмяФайлаОтвета=ПолучитьИмяВременногоФайла();
	ТД=Новый ТекстовыйДокумент;
	ТД.УстановитьТекст(Строка);
	ТД.Записать(ИмяФайлаЗапроса,КодировкаТекста.UTF8);//,КодировкаТекста.UTF8);
	СоединениеWeb = Новый HTTPСоединение(ПараметрыПодключения.Адрес, ПараметрыПодключения.Порт, ПараметрыПодключения.Логин, ПараметрыПодключения.Пароль,,ИспользуемыйТаймаут,Новый ЗащищенноеСоединениеOpenSSL);  
	Попытка
		ТекДатаЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			СоединениеWeb.ОтправитьДляОбработки(ИмяФайлаЗапроса,"platform/services/ApplicationManagementService",ИмяФайлаОтвета);
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		ТекДатаОтвета = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОтрапортоватьСкоростьОбработкиЗаявки(ТекДатаЗапроса,ТекДатаОтвета, "получил");
		
		УдалитьФайлы(ИмяФайлаЗапроса);
		ТД=Новый ТекстовыйДокумент;
		ТД.Прочитать(ИмяФайлаОтвета,КодировкаТекста.UTF8);//,КодировкаТекста.UTF8);
		ОтветWeb=ТД.ПолучитьТекст();
		УдалитьФайлы(ИмяФайлаОтвета);
	Исключение
		ТекстОшибки = "Ошибка при отправке запроса: "+ОписаниеОшибки();
		
		Если КодСообщения <> "IncomingRobot" Тогда
			ЗаписатьТекстОтветаМеркурий(КодСообщения, ТекстОшибки);
			УстановитьСтатусОшибкаСообщенияМеркурий(СообщениеСсылка);		
		КонецЕсли;
		
		Если Найти(ТекстОшибки,"Timeout was reached") <> 0 Тогда 
		Сообщить("Не удается отправить запрос - срабатывает таймаут. ("+ИспользуемыйТаймаут+" сек.) Попробуйте выполнить запрос еще раз или проверить настройки реквизитов сервера.");		
		Иначе
		Сообщить(ТекстОшибки);		
			
		КонецЕсли;
		
		Возврат(""); 
	КонецПопытки;
	
	
	//ранее для платформы 8.2.19 был такой вариант. Оставим пока тут пылиться.
	//ЗапросWeb = Новый HTTPЗапрос("platform/services/ApplicationManagementService");  
	//ЗапросWeb.УстановитьТелоИзСтроки(Строка);  
	
	//СоединениеWeb = Новый HTTPСоединение(ПараметрыПодключения.Адрес, ПараметрыПодключения.Порт, ПараметрыПодключения.Логин, ПараметрыПодключения.Пароль,,Истина);  
	//ОтветWeb = СоединениеWeb.ОтправитьДляОбработки(ЗапросWeb);  
	
	//Если (ОтветWeb.КодСостояния <> 200) Тогда 
	//	ТекстОшибки = "Ошибка при отправке запроса";
	//	
	//	Если КодСообщения <> "IncomingRobot" Тогда
	//		ЗаписатьТекстОтветаМеркурий(КодСообщения, ТекстОшибки);
	//		УстановитьСтатусОшибкаСообщенияМеркурий(СообщениеСсылка);		
	//	КонецЕсли;
	//	
	//	Сообщить(ТекстОшибки);		
	//	Возврат(""); 
	//КонецЕсли;
	//ОтветXML = Новый ЧтениеXML;  
	//ОтветXML.УстановитьСтроку(ОтветWeb.ПолучитьТелоКакСтроку("UTF-8"));  
	//Конец пылящегося старого механизма
	
	ОтветXML = Новый ЧтениеXML;  
	ОтветXML.УстановитьСтроку(ОтветWeb);  
	
	MercAppDO = КорневаяФабрика().ПрочитатьXML(ОтветXML, EnvelopeDO.Тип()).Body.submitApplicationResponse.application;  
	
	// ACCEPTED    принята.        //основной ответ
	
	// REJECTED    отклонена.      //с вероятностью близкой к 100% - мы никогда не получим эти ответы сразу
	// IN_PROCESS  обрабатывается.  
	// COMPLETED   успешно обработана.  
	Если MercAppDO.status = "REJECTED" ИЛИ
		(MercAppDO.status <> "ACCEPTED" 
		И MercAppDO.status <> "IN_PROCESS" 
		И MercAppDO.status <> "COMPLETED")
		Тогда 
		ТекстОшибки = "Запрос вернулся со статусом " + MercAppDO.status;
		ЗаписатьТекстОтветаМеркурий(MercAppDO.applicationId, ТекстОшибки);
		Сообщить(ТекстОшибки);
		УстановитьСтатусОшибкаСообщенияМеркурий(СообщениеСсылка);		
		
		Возврат("");
		
	КонецЕсли;
	
	Если ВернутьapplicationId<>Неопределено Тогда 
		ВернутьapplicationId = MercAppDO.applicationId;
	КонецЕсли;
	
	
	Если ДождатьсяРезультата=Истина Тогда
		ОсновнойМодуль.Состояние_КонтурEDI(?(Значениезаполнено(КодСообщения),"Дожидаюсь ответа на запрос по сообщению: "+КодСообщения,"Ожидаю ответ Меркурия на служебный запрос. Проверил в: "+текущаяДата()));
		//тогда необходимо сразу вернуть результат в виде ответа XDTO
		applicationId = MercAppDO.applicationId;
		Пока Истина Цикл
			
	//Старый вариант		
	//Ответ = ЗапроситьРезультатОбработкиЗаявкиМеркурий(applicationId);
	//
	//Если (Ответ.КодСостояния <> 200) Тогда 
	//	ТекстОшибки = "Ошибка при получении ответа на запрос";
	//	Сообщить(ТекстОшибки);
	//КонецЕсли;
	//// чтение ответа  
	//ОтветXML = Новый ЧтениеXML;  
	//ОтветXML.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку("UTF-8"));
	//MercAppDO = КорневаяФабрика().ПрочитатьXML(ОтветXML, EnvelopeDO.Тип()).Body.receiveApplicationResultResponse.application;
	
	//Новый вариант
	
			MercAppDO = ЗапроситьРезультатОбработкиЗаявкиМеркурий(applicationId,ПараметрыПодключения,ДождатьсяРезультата);
			
			// ACCEPTED    принята.       
			// REJECTED    отклонена.      
			// IN_PROCESS  обрабатывается.  
			// COMPLETED   успешно обработана.  
			Если ДождатьсяРезультата = Истина И ВыводитьСкоростьРаботыСервераМеркурий = Истина И MercAppDO.Status = "REJECTED" ИЛИ MercAppDO.Status = "COMPLETED" Тогда
				ОтрапортоватьСкоростьОбработкиЗаявки(ТекДатаЗапроса,ТекущаяУниверсальнаяДатаВМиллисекундах());
			КонецЕсли;
			
			Если MercAppDO.Status = "REJECTED" Тогда
				//Пока что хотя быСообщим об ошибках
				Для Каждого Ошибка Из MercAppDO.errors.error Цикл
					Сообщить("Заявка отклонена: "+Ошибка.code+Ошибка.__content)
				КонецЦикла;
				
				Возврат Неопределено;
				Прервать;
			ИначеЕсли MercAppDO.Status = "COMPLETED" Тогда
				Возврат MercAppDO;
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
	ИначеЕсли КодСообщения <> "IncomingRobot" Тогда
		
		ЗаписатьApplicationIdСообщенияМеркурий(СообщениеСсылка,MercAppDO.applicationId); //по этому идентификатору в будущем ходить - проверять
		
		Если MercAppDO.status = "ACCEPTED"
			ИЛИ MercAppDO.status = "IN_PROCESS" Тогда
			УстановитьСтатусСообщенияМеркурийПоСтатусуapplicationId(СообщениеСсылка,MercAppDO.applicationId,"Обрабатывается");
		КонецЕсли;
		
		Если MercAppDO.status = "COMPLETED"  Тогда
			
			УстановитьСтатусСообщенияМеркурийПоСтатусуapplicationId(СообщениеСсылка,MercAppDO.applicationId,"Выполнен");
			ЗаписатьОтветМеркурий(applicationId, Строка(MercAppDO.Status));

		КонецЕсли;
		
		//сразу - вдруг на боевом сервере когда-нибудь у нас случится супер скорость
		//ПроверитьОбновленияСтатусаЗаявки(MercAppDO.applicationId); 
		//возможно потребуется выпилить чтобы не спамить впустую если чуда не случится
		//так и случилось - практика показала что это пустая трата времени (производительность падает в 1,5 раза с этой строчкой)
	КонецЕсли;
	

КонецФункции // ВыполнитьЗапрос()

Функция ЗапроситьРезультатОбработкиЗаявкиМеркурий(applicationId,ПараметрыПодключения=Неопределено,ДождатьсяРезультата=Ложь)
	
	Прокси = ПолучитьWSПроксиApplicationManagementsService();
	
	Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
	Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");	
	
	ТипWSПараметраAPIKey = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/application").Получить("APIKey");
	
	Если ПараметрыПодключения <> Неопределено Тогда
		ТекКлючАПИ = ПараметрыПодключения.apiKey;
		ТекissuerId = ПараметрыПодключения.issuerId;
	Иначе
		ТекКлючАПИ = ПолучитьКонстантуEDI("М_КлючAPI");
		ТекissuerId = ПолучитьКонстантуEDI("М_issuerId");
	КонецЕсли;
	
	ТекДатаЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
		///////////////////////////////////////////////////////////////////////////////////
		MercAppDO = Прокси.receiveApplicationResult(ТекКлючАПИ, ТекissuerId, applicationId);
		///////////////////////////////////////////////////////////////////////////////////
	ОсновнойМодуль.Состояние_КонтурEDI("Дожидаюсь ответа на запрос по сообщению: Ожидаю ответ Меркурия на служебный запрос. Проверил в: "+текущаяДата());
	ТекДатаОтвета = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ДождатьсяРезультата = Ложь И ВыводитьСкоростьРаботыСервераМеркурий = Истина Тогда
		ОтрапортоватьСкоростьОбработкиЗаявки(ТекДатаЗапроса,ТекДатаОтвета,"отдал ответ на")		
	КонецЕсли;
	Возврат MercAppDO;	
	
	
	
	////старый механизм
	
	//ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика());
	//
	//EnvelopeDO = КорневаяФабрика().Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	//
	//СоединениеWeb = Новый HTTPСоединение(ПараметрыПодключения.Адрес, ПараметрыПодключения.Порт, ПараметрыПодключения.Логин, ПараметрыПодключения.Пароль,,Истина);
	//
	//
	//Если НЕ ЗначениеЗаполнено(applicationId) Тогда
	//	Возврат неопределено;
	//КонецЕсли;
	//
	//receiveRequestDO = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/application/ws-definitions", "receiveApplicationResultRequest");
	//receiveRequestDO.apiKey			= ПараметрыПодключения.apiKey;
	//receiveRequestDO.issuerID 		= ПараметрыПодключения.issuerID;
	//
	//receiveRequestDO.applicationId 	= applicationId;
	//	
	//EnvelopeDO.Body = КорневаяФабрика.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Body");	
	//EnvelopeDO.Body.Добавить(ФормаXML.Элемент, receiveRequestDO.Тип().URIПространстваИмен, "receiveApplicationResultRequest", receiveRequestDO);
	//
	//ТелоXML = Новый ЗаписьXML;  
	//ТелоXML.УстановитьСтроку("UTF-8");  
	//КорневаяФабрика.ЗаписатьXML(ТелоXML, EnvelopeDO);  
	//Строка = ТелоXML.Закрыть();
	//
	//ЗапросWeb = Новый HTTPЗапрос("platform/services/ApplicationManagementService");  
	//ЗапросWeb.УстановитьТелоИзСтроки(Строка);
	//
	//HTTPОтвет = СоединениеWeb.ОтправитьДляОбработки(ЗапросWeb);
	//ТекстXML = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8");
	//
	//ОтветXML = Новый ЧтениеXML;  
	//ОтветXML.УстановитьСтроку(ТекстXML);

	//MercAppDO = КорневаяФабрика().ПрочитатьXML(ОтветXML, EnvelopeDO.Тип());  
	//
	//Возврат MercAppDO;
	
КонецФункции

Процедура ПроверитьОбновленияСтатусаЗаявки(applicationId, ПараметрыПодключения = Неопределено)
	
	MercAppDO = ЗапроситьРезультатОбработкиЗаявкиМеркурий(applicationId,ПараметрыПодключения);
	
	//старый механизм
	//EnvelopeDO = КорневаяФабрика().Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	//ОтветWeb = ЗапроситьРезультатОбработкиЗаявкиМеркурий(applicationId);
	//
	//Если (ОтветWeb.КодСостояния <> 200) Тогда 
	//	ТекстОшибки = "Ошибка при получении ответа на запрос";
	//	ЗаписатьТекстОтветаМеркурий(applicationId, ТекстОшибки);
	//	Сообщить(ТекстОшибки);
	//	УстановитьСтатусСообщенияМеркурийПоСтатусуapplicationId(,applicationId,"Ошибка");
	//КонецЕсли;
	//
	//// чтение ответа  
	//ОтветXML = Новый ЧтениеXML;  
	//ОтветXML.УстановитьСтроку(ОтветWeb.ПолучитьТелоКакСтроку("UTF-8"));
	//MercAppDO = КорневаяФабрика.ПрочитатьXML(ОтветXML, EnvelopeDO.Тип()).Body.receiveApplicationResultResponse.application;
	
	// ACCEPTED    принята.       
	// REJECTED    отклонена.      
	// IN_PROCESS  обрабатывается.  
	// COMPLETED   успешно обработана.
	
	Если MercAppDO.Status = "ACCEPTED" 
		ИЛИ MercAppDO.Status = "IN_PROCESS"
		Тогда
		
		УстановитьСтатусСообщенияМеркурийПоСтатусуapplicationId(,applicationId,"Обрабатывается");
		
	ИначеЕсли MercAppDO.Status = "REJECTED" Тогда
		
		УстановитьСтатусСообщенияМеркурийПоСтатусуapplicationId(,applicationId,"Ошибка");
		
		//ОтветСтрока = ОтветWeb.ПолучитьТелоКакСтроку("UTF-8");
		ТекстОшибок ="";
		Для Каждого Ошибка Из MercAppDO.errors.error Цикл
			ТекстОшибок = ТекстОшибок + ВычислитьXDTO(Ошибка,"code") +" "+  ВычислитьXDTO(Ошибка,"__content") +Символы.ПС;
		КонецЦикла;
		
		ЗаписатьОтветМеркурий(applicationId, Строка(MercAppDO.Status), ТекстОшибок);
		
	ИначеЕсли MercAppDO.Status = "COMPLETED" Тогда
		
		ЗапомнитьНомераВСД(applicationId, MercAppDO);
		УстановитьСтатусСообщенияМеркурийПоСтатусуapplicationId(,applicationId,"Выполнен");
		ЗаписатьОтветМеркурий(applicationId, Строка(MercAppDO.Status));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапомнитьНомераВСД(applicationId, MercAppDO)
	
	//взять сообщение, найти там строки и проставить туда номера и uuid + оформленного ВСД
	СообщениеМеркурийСсылка = ПолучитьСообщениеМеркурийПоapplicationId(applicationId);
	
	Если СообщениеМеркурийСсылка<>Неопределено Тогда
		Если СообщениеМеркурийСсылка.ТипСообщения = "M_PRD" Тогда
			СтрокиВСДXDTO = ВычислитьXDTO(MercAppDO,"result.registerProductiveBatchResponse.vetDocument");
		ИначеЕсли СообщениеМеркурийСсылка.ТипСообщения = "M_MOV" Тогда
			СтрокиВСДXDTO = ВычислитьXDTO(MercAppDO,"result.PrepareOutcomingConsignmentResponse.vetDocument");
		ИначеЕсли СообщениеМеркурийСсылка.ТипСообщения = "M_DES" Тогда
			СтрокиВСДXDTO = ВычислитьXDTO(MercAppDO,"result.PrepareOutcomingConsignmentResponse.vetDocument");
		ИначеЕсли СообщениеМеркурийСсылка.ТипСообщения = "M_REC" Тогда
			СтрокиВСДXDTO = ВычислитьXDTO(MercAppDO,"result.processIncomingConsignmentResponse.vetDocument");
		КонецЕсли;
		Если СтрокиВСДXDTO <> Неопределено Тогда
			
			//прочитаем товары из полученного ВСД, сопоставим их с исходными товарами и проставим номера ВСД в исходное сообщений
			СообщениеСВходящимиВСД = ПолучитьСообщениеВходящейТТН(); //просто пустое сообщение
			ЗаполнитьСообщениеВходящегоВСД(СообщениеСВходящимиВСД,СтрокиВСДXDTO,СообщениеМеркурийСсылка.ТипСообщения);
			ТоварыПоВСД = СообщениеСВходящимиВСД.Товары;
			
			//КонвертироватьТабличнуюЧастьТранзакцииМеркурийв1С(ВходящееСообщение,"Товары");  //кажется что конвертировать не надо т.к. можно случайно сконвертировать иначе чем было 
			
			ИсходноеСообщение = ОсновнойМодуль.ПрочитатьСообщение(СообщениеМеркурийСсылка);
			
			Если ТипЗНЧ(ИсходноеСообщение) = Тип("Структура") Тогда
				РезультатСопоставления = СопоставитьСозданныеВСДСоСтрокамиТранзакции(ИсходноеСообщение.Товары,ТоварыПоВСД,СообщениеМеркурийСсылка.ТипСообщения);
				
				Если РезультатСопоставления.ТаблицаОшибок.Количество() < ИсходноеСообщение.Товары.Количество() Тогда
					//что-то было разнесено
					//сохраним сообщение
					СообщениеОбъект = СообщениеМеркурийСсылка.ПолучитьОбъект();
					СообщениеОбъект.Хранилище = Новый ХранилищеЗначения(ИсходноеСообщение,Новый СжатиеДанных(9));
					СообщениеОбъект.Записать();
				КонецЕсли;
				
				Если  РезультатСопоставления.Успешно = Ложь Тогда
					Сообщить("Не смог сопоставить пришедшие всд со строками исходного сообщения:");
					Для Каждого Ошибка ИЗ РезультатСопоставления.ТаблицаОшибок Цикл
						Сообщить(Ошибка.ТекстОшибки);
					КонецЦикла;
					
				КонецЕсли; //успешно проставили ВСД
				
			КонецЕсли; //удалось прочитать исходное сообщение
		КонецЕсли;//есть строки ВСД XDTO
		
	КонецЕсли;//нашли ссылку сообщения
	
КонецПроцедуры

Функция СопоставитьСозданныеВСДСоСтрокамиТранзакции(ТоварыИсходные,ТоварыПоВСД,ТипСообщения)
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	Для каждого СтрокаСозданнойВСД Из ТоварыПоВСД Цикл
		
		Если СтрокаСозданнойВСД.Статус <> "CONFIRMED" 
			И СтрокаСозданнойВСД.Статус <> "UTILIZED"
			Тогда //только ВСД на подтверждение
			Продолжить;
		КонецЕсли;
		
		Отбор = СоздатьОтборПоискаПоСозданномуВСД(СтрокаСозданнойВСД,ТипСообщения);
		НайденныеСтрокиИсходногоСообщения = ТоварыИсходные.НайтиСтроки(Отбор);
		
		Если НайденныеСтрокиИсходногоСообщения.Количество() = 0 Тогда
			НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
			Новаяошибка.ТекстОшибки = "Не найдена строка товаров для ВСД: "+СтрокаСозданнойВСД.ВетСертификатUUID;
			//ИначеЕсли НайденныеСтрокиИсходногоСообщения.Количество() > 1 Тогда
			//НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
			//Новаяошибка.ТексОшибки = "Найдено более 1 строки товаров для ВСД: "+СтрокаСозданнойВСД.ВетСертификатUUID;
		Иначе
			ХотьЧтоТоРазнесли = Истина;
			    ИстиннаяСтрока=НайденныеСтрокиИсходногоСообщения[0];
				ИстиннаяСтрока.ВетСертификатUUID = СтрокаСозданнойВСД.ВетСертификатUUID;
				ИстиннаяСтрока.ВетСертификатДата = СтрокаСозданнойВСД.ВетСертификатДата;
				ИстиннаяСтрока.ВетСертификатНомер = СтрокаСозданнойВСД.ВетСертификатНомер;
				ИстиннаяСтрока.Статус = СтрокаСозданнойВСД.Статус;
		КонецЕсли;
	КонецЦикла;                           
	
	//и надо проверить что разнеслись все строки
	Если ТипСообщения = "M_REC" Тогда
		//в сообщении M_REC идентификаторы ВСД приезжают по одному
	Иначе
		ОтборПустых = Новый Структура();
		ОтборПустых.Вставить("ВетСертификатUUID",""); 
		НайденыПустые = ТоварыИсходные.НайтиСтроки(ОтборПустых);
		Если НайденыПустые.количество()>0 ТОгда
			НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
			Новаяошибка.ТекстОшибки = "По сообщению получены идентификаторы ВСД не по всем строкам";
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.ТаблицаОшибок.Количество()=0 Тогда
		Результат.Успешно = Истина;
	Иначе
		Результат.Успешно = Ложь;
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

Функция СоздатьОтборПоискаПоСозданномуВСД(СтрокаСозданнойВСД,ТипСообщения)

		Отбор = Новый Структура();
		Отбор.Вставить("GUID",СтрокаСозданнойВСД.GUID);
		Отбор.Вставить("UnitUUID",СтрокаСозданнойВСД.UnitUUID);
		Отбор.Вставить("ДатаПроизводства",СтрокаСозданнойВСД.ДатаПроизводства);
		Отбор.Вставить("ДатаПроизводства2",СтрокаСозданнойВСД.ДатаПроизводства2);
		Отбор.Вставить("СрокГодности",СтрокаСозданнойВСД.СрокГодности);
		Отбор.Вставить("СрокГодности2",СтрокаСозданнойВСД.СрокГодности2);
		Отбор.Вставить("Скоропортящаяся",СтрокаСозданнойВСД.Скоропортящаяся);
		Отбор.Вставить("Количество",СтрокаСозданнойВСД.Количество);
		Отбор.Вставить("КоличествоУпаковок",СтрокаСозданнойВСД.КоличествоУпаковок);
		Если ЗначениеЗаполнено(СтрокаСозданнойВСД.КоличествоУпаковок) тогда
			Отбор.Вставить("ЕдиницаИзмеренияУпаковокUUID",?(СтрокаСозданнойВСД.ЕдиницаИзмеренияУпаковокUUID=Неопределено,"",СтрокаСозданнойВСД.ЕдиницаИзмеренияУпаковокUUID));
		КонецЕсли;
		
		Если ТипСообщения = "M_PRD" ИЛИ ТипСообщения = "M_DES" ИЛИ ТипСообщения = "M_MOV" ТОгда
			//Для Производства не надо сравнивать эти 2 поля а для перевозок - в исходном сообщении они могут отсутствовать.
		Иначе
			Если ЗначениеЗаполнено(СтрокаСозданнойВСД.Маркировка) Тогда
				Отбор.Вставить("Маркировка",СтрокаСозданнойВСД.Маркировка);
			КонецЕсли;
			Отбор.Вставить("ПлощадкаПроизводительGUID",СтрокаСозданнойВСД.ПлощадкаПроизводительGUID);
			Отбор.Вставить("СтранаUUID",СтрокаСозданнойВСД.СтранаUUID);   //- разобраться почему в сохраненном сообщении нет СтранаUUID
		КонецЕсли;
		
		Отбор.Вставить("ВетСертификатUUID","");      //нам нужны те строки где еще нет сертификата - ох, если будут одинаковые строки с последующей отгрузкой на РЦ с последующим развозом в магазины....... то вроде все ок, гасить то их все равно будут на самом RC
		
		Возврат Отбор;
		
КонецФункции // СоздатьОтборПоискаПоСозданномуВСД()


Процедура ЗаписатьОтветМеркурий(ЗНАЧ applicationId, ТекстОтвета,ТекстОшибок="") Экспорт    //объединить с ЗаписатьТекстЗапросаМеркурий
	
	СообщениеСсылка = ПолучитьСообщениеМеркурийПоapplicationId(applicationId);
	Если СообщениеСсылка = Неопределено
		Тогда Возврат;
	КонецЕсли;
	
	СообщениеОбъект = СообщениеСсылка.получитьОбъект();
	
	Если СообщениеОбъект = Неопределено 
		Тогда 
		Возврат;
	Иначе
		ЗаписьЗапроса=СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
		
		ЗаписьЗапроса.ИмяРеквизита = "Ответ_"+applicationId;
		ЗаписьЗапроса.ЗначениеСтрока = ТекстОтвета;
		
		Если Не ТекстОшибок="" Тогда
			СообщениеОбъект.ОписаниеОшибки = ТекстОшибок;
		КонецЕсли;
		
		СообщениеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

//Работа со справочником Сообщений

Функция СоздатьСообщениеМеркурий(Сообщение) Экспорт
	
	СообщениеОбъект = Справочники.КонтурEDI_Сообщения.СоздатьЭлемент();
	
	ЗаполнитьРеквизитыОбъектаСообщенияИзСтруктурыМеркурий(СообщениеОбъект,Сообщение);
	
	СообщениеОбъект.Записать();
	
	Сообщение.СообщениеСсылка = СообщениеОбъект.Ссылка;
	
	Возврат(СообщениеОбъект.Код);
	
КонецФункции

Процедура ЗаполнитьРеквизитыОбъектаСообщенияИзСтруктурыМеркурий(СообщениеОбъект,СтруктураСообщения)

	Если Не ЗначениеЗаполнено(СтруктураСообщения.Статус) Тогда
		СообщениеОбъект.Статус = "ОжидаетОтправки";//статус по умолчанию для новых сообщений
	Иначе
		СообщениеОбъект.Статус = СтруктураСообщения.Статус;
	КонецЕсли;
	
	Если СообщениеОбъект.Статус = "Rejected" Тогда
		СообщениеОбъект.Статус = "Отклонен";//это единственный случай смены статуса, на будущее перенести в СохранитьОбъектСообщения.
	КонецЕсли;
	
	Если СтруктураСообщения.Статус = "Оформлен" И СтруктураСообщения.ТипСообщения = "M_INC" Тогда
		СообщениеОбъект.Направление = "Входящее";
		СообщениеОбъект.ТребуемоеДействие = "Погасить входящие ВСД";
	Иначе
		СообщениеОбъект.Направление = СтруктураСообщения.Направление;
	КонецЕсли;	
	
	//СообщениеОбъект.Контрагент = ?(СтруктураСообщения.ТипСообщения = "M_INC",СтруктураСообщения.ХозяйствующийСубъект1С,СтруктураСообщения.ХозяйствующийСубъектПолучатель1С);
	
	СообщениеОбъект.Организация = СтруктураСообщения.Организация;
	СообщениеОбъект.ТипСообщения = СтруктураСообщения.ТипСообщения;
	СообщениеОбъект.ДатаЗагрузки = ТекущаяДата();
	СообщениеОбъект.ДатаДокумента = СтруктураСообщения.ДокументEDI.Дата;
	СообщениеОбъект.ДатаПоставки = ?(ЗначениеЗаполнено(СтруктураСообщения.ДатаПоставки),СтруктураСообщения.ДатаПоставки,СтруктураСообщения.ДокументEDI.Дата);
	СообщениеОбъект.НомерДокумента = СтруктураСообщения.ДокументEDI.Номер;
	
	СообщениеОбъект.Партнер = СтруктураСообщения.Партнер;
	СообщениеОбъект.Документ = СтруктураСообщения.ДокументСсылка;
	
	Если СтруктураСообщения.ТипСообщения = "M_INC" И СтруктураСообщения.ДокументEDI.Номер = "" Тогда
		Попытка
			СообщениеОбъект.ID = СтруктураСообщения.Товары[0].UUID;  //для входящих ВСД без Номера ТТН запишем в ID UUID
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	СообщениеОбъект.Хранилище = Новый ХранилищеЗначения(СтруктураСообщения,Новый СжатиеДанных(9));
	
	//СообщениеОбъект.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	
	//незавершенное Производство
	Если СообщениеОбъект.ТипСообщения = "M_PRD"
		И СообщениеОбъект.Статус = "ОжидаетОтправки"
		И СтруктураСообщения.Завершена = Ложь 
		И ЗначениеЗаполнено(СтруктураСообщения.ИдентификаторПроизводственнойТранзакции)
		Тогда
		НовыйДопРеквизит 				= СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
		НовыйДопРеквизит.ИмяРеквизита 	= "ИдентификаторПроизводственнойТранзакции";
		НовыйДопРеквизит.Значение 		= СтруктураСообщения.ИдентификаторПроизводственнойТранзакции;
		НовыйДопРеквизит 				= СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
		НовыйДопРеквизит.ИмяРеквизита 	= "ТранзакцияЗавершена";
		НовыйДопРеквизит.Значение 		= Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьApplicationIdСообщенияМеркурий(СообщениеСсылка,applicationId)

	СообщениеМеркурийОбъект = СообщениеСсылка.ПолучитьОбъект();
	НовыйapplicationId = СообщениеМеркурийОбъект.ДополнительныеРеквизиты.Добавить();
	НовыйapplicationId.ИмяРеквизита = "applicationId";
	НовыйapplicationId.Значение = applicationId;
    СообщениеМеркурийОбъект.Записать();
	
КонецПроцедуры

Процедура УстановитьСтатусОшибкаСообщенияМеркурий(СообщениеМеркурийСсылка=Неопределено)
	
	НовыйСтатус = "Ошибка";
	НовоеТребуемоеДействие = "Переотправить транзакцию";
	
	Если СообщениеМеркурийСсылка<>Неопределено Тогда
		СообщениеМеркурийОбъект = СообщениеМеркурийСсылка.ПолучитьОбъект();
		СообщениеМеркурийОбъект.ТребуемоеДействие =	НовоеТребуемоеДействие;
		СообщениеМеркурийОбъект.Статус =	НовыйСтатус;
		СообщениеМеркурийОбъект.Записать();
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьСтатусСообщенияМеркурийПоСтатусуapplicationId(СообщениеМеркурийСсылка=Неопределено,applicationId,НовыйСтатус)
	
	Если СообщениеМеркурийСсылка=Неопределено Тогда
		
		СообщениеМеркурийСсылка = ПолучитьСообщениеМеркурийПоapplicationId(applicationId);
		
	КонецЕсли;
	
	Если СообщениеМеркурийСсылка<>Неопределено Тогда
		СообщениеМеркурийОбъект = СообщениеМеркурийСсылка.ПолучитьОбъект();
		
		
		НайденнаяСтрокаapplicationId = СообщениеМеркурийОбъект.ДополнительныеРеквизиты.Найти(applicationId,"Значение");
		
		Если НайденнаяСтрокаapplicationId<> неопределено Тогда
			
			НайденнаяСтрокаapplicationId.ИмяРеквизита = НовыйСтатус;
			
			АнализСообщения = ПолучитьТребуемоеДействиеПоСтатусамСообщенияМеркурий(СообщениеМеркурийОбъект.ДополнительныеРеквизиты);
			
			НовоеТребуемоеДействие = АнализСообщения.ТребуемоеДействие;
			НовыйСтатус = АнализСообщения.Статус;
			
			Если НовоеТребуемоеДействие <> Неопределено Тогда 
				СообщениеМеркурийОбъект.ТребуемоеДействие =	НовоеТребуемоеДействие;
			КонецЕсли;
			Если НовыйСтатус <> Неопределено Тогда 
				СообщениеМеркурийОбъект.Статус =	НовыйСтатус;
			КонецЕсли;
			
			Если НовыйСтатус = "Выполнен" Тогда
				СообщениеМеркурийОбъект.Архив = Истина;
			Конецесли;
			
			СообщениеМеркурийОбъект.Записать();
			
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТребуемоеДействиеПоСтатусамСообщенияМеркурий(ДопРеквизитыСообщения)
	
	//принцип такой: если хоть что-то обрабатывается - значит всё сообщение обрабатывается, если хоть где-то ошибка - значит все сообщение ошибка
	
	Статус = "";
	ТребуемоеДействие = "";
	
	Если ДопРеквизитыСообщения.Найти("Выполнен","ИмяРеквизита")<>неопределено Тогда   //есть завершенные
		ТребуемоеДействие = "Работа завершена";
		Статус = "Выполнен"
	КонецЕсли;
	
	Если ДопРеквизитыСообщения.Найти("Обрабатывается","ИмяРеквизита")<>неопределено Тогда   //есть обрабатывающиеся
		ТребуемоеДействие = "Обрабатывается";
		Статус = "Обрабатывается"
	КонецЕсли;
	
	Если ДопРеквизитыСообщения.Найти("Ошибка","ИмяРеквизита")<>неопределено Тогда   //есть ошибки
		ТребуемоеДействие = "Переотправить транзакцию";
		Статус = "Ошибка"
	КонецЕсли;
	
	Возврат Новый Структура("Статус,ТребуемоеДействие",Статус,ТребуемоеДействие);
	
КонецФункции

Функция ПолучитьСообщениеСсылкаМеркурий(ЗНАЧ КодСообщения)

	Если Не ЗначениеЗаполнено(КодСообщения) 
		Тогда 
		Возврат Неопределено; 
	КонецЕсли;
	
	ПозицияВСД=Найти(КодСообщения,"_ВСД_");
	Если ПозицияВСД > 0 Тогда
		КодСообщения = Лев(КодСообщения,ПозицияВСД-1);
	КонецЕсли;
	
	СообщениеМеркурийСсылка = Справочники.КонтурEDI_Сообщения.НайтиПоКоду(КодСообщения);
	
	Если Не ЗначениеЗаполнено(СообщениеМеркурийСсылка) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не нашел сообщение меркурий: " + КодСообщения;
		Сообщение.Сообщить();
		Возврат Неопределено;
	Иначе
    	Возврат(СообщениеМеркурийСсылка);
	КонецЕсли;

КонецФункции // ПолучитьЗапись()

Функция ПолучитьСообщениеОбъектМеркурий(КодСообщения)
	
	СообщениеМеркурийСсылка = ПолучитьСообщениеСсылкаМеркурий(КодСообщения);
	
	Если Не ЗначениеЗаполнено(СообщениеМеркурийСсылка) Тогда
		Возврат Неопределено;
	Иначе
		СообщениеМеркурий = СообщениеМеркурийСсылка.ПолучитьОбъект();
    	Возврат(СообщениеМеркурий);
	КонецЕсли;

КонецФункции // ПолучитьЗапись()

Процедура ЗаписатьТекстЗапросаМеркурий(ЗНАЧ Код, ТекстЗапроса,ВСДUUID=неопределено) Экспорт
	
	СообщениеОбъект = ПолучитьСообщениеОбъектМеркурий(Код);
	
	Если СообщениеОбъект = Неопределено 
		Тогда 
		Возврат;
	Иначе
		ЗаписьЗапроса=СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
		Если ВСДUUID=Неопределено ИЛИ ВСДUUID="" Тогда
			ЗаписьЗапроса.ИмяРеквизита = "Запрос";
		Иначе
			ЗаписьЗапроса.ИмяРеквизита = "Запрос_ВСД_"+ВСДUUID;
		КонецЕсли;
		ЗаписьЗапроса.ЗначениеСтрока = ТекстЗапроса;
		СообщениеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьТекстОтветаМеркурий(ЗНАЧ applicationId, ТекстОтвета) Экспорт    //объединить с ЗаписатьТекстЗапросаМеркурий
	
	СообщениеСсылка = ПолучитьСообщениеМеркурийПоapplicationId(applicationId);
	Если СообщениеСсылка = Неопределено
		Тогда Возврат;
	КонецЕсли;
	
	СообщениеОбъект = СообщениеСсылка.получитьОбъект();
	
	Если СообщениеОбъект = Неопределено 
		Тогда 
		Возврат;
	Иначе
		ЗаписьЗапроса=СообщениеОбъект.ДополнительныеРеквизиты.Добавить();
		
		ЗаписьЗапроса.ИмяРеквизита = "Ответ_"+applicationId;
		ЗаписьЗапроса.ЗначениеСтрока = ТекстОтвета;
		СообщениеОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСообщениеМеркурийПоapplicationId(applicationId)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Ссылка
	|ИЗ
	|	Справочник.КонтурEDI_Сообщения.ДополнительныеРеквизиты КАК КонтурEDI_СообщенияДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_СообщенияДополнительныеРеквизиты.Значение = &applicationId";
	
	Запрос.УстановитьПараметр("applicationId",applicationId);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьWSПроксиСправочникЕдиницИзмерения() Экспорт
	
	Если ИспользуемыеWSПрокси().WSПроксиСправочникЕдиницИзмерения = Неопределено Тогда
		
		Прокси = Новый WSПрокси(ПолучитьОпределениеПроксиИзМакета("DictionaryService_test_14"),
		"http://api.vetrf.ru/schema/cdm/registry/service",   
		"DictionaryServiceBindingQSService",  
		"DictionaryServiceBindingQSPort"); 
		
		//альтернативный способ (требует добавления в конфигурацию WS-ссылок)
		//Прокси = WSСсылки.WSDictionaryServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "DictionaryServiceBindingQSService", "DictionaryServiceBindingQSPort");
		
		Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
		Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");	
		ИспользуемыеПрокси.WSПроксиСправочникЕдиницИзмерения = Прокси;
		
	Иначе
		Прокси = ИспользуемыеWSПрокси().WSПроксиСправочникЕдиницИзмерения; 
	КонецЕсли;
	
	Возврат(Прокси);
	
КонецФункции

Функция ПолучитьWSПроксиСправочникПродукции() Экспорт
	
	Если ИспользуемыеWSПрокси().WSПроксиСправочникПродукции = Неопределено Тогда
		
		Прокси = Новый WSПрокси(ПолучитьОпределениеПроксиИзМакета("ProductService_test_14"),
		"http://api.vetrf.ru/schema/cdm/registry/service",   
		"ProductServiceBindingQSService",  
		"ProductServiceBindingQSPort");
		
		//альтернативный способ (требует добавления в конфигурацию WS-ссылок)
		//Прокси = WSСсылки.WSProductServiceBindingQSServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "ProductServiceBindingQSService", "ProductServiceBindingQSPort");
		Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
		Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");	
		ИспользуемыеПрокси.WSПроксиСправочникПродукции = Прокси;
		
	Иначе
		Прокси = ИспользуемыеWSПрокси().WSПроксиСправочникПродукции; 
	КонецЕсли;
	
	Возврат(Прокси);
	
КонецФункции

Функция ПолучитьWSПроксиСправочникИкар() Экспорт
	
	Если ИспользуемыеWSПрокси().WSПроксиСправочникИкар = Неопределено Тогда
		Прокси = Новый WSПрокси(ПолучитьОпределениеПроксиИзМакета("IkarService_test_14"),
		"http://api.vetrf.ru/schema/cdm/registry/service",   
		"IkarServiceBindingQSService",  
		"IkarServiceBindingQSPort");
		
		//альтернативный способ (требует добавления в конфигурацию WS-ссылок)
		//Прокси = WSСсылки.WSIkarServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "IkarServiceBindingQSService", "IkarServiceBindingQSPort");
		Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
		Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");	
		ИспользуемыеПрокси.WSПроксиСправочникИкар = Прокси;
		
	Иначе
		Прокси = ИспользуемыеWSПрокси().WSПроксиСправочникИкар; 
	КонецЕсли;
	
	Возврат(Прокси);
	
КонецФункции



Функция ПолучитьСписокТиповПродукцииВетис() Экспорт
	
	Список = Новый СписокЗначений();
	Список.Добавить(1, "Мясо и мясопродукты");
	Список.Добавить(2, "Корма и кормовые добавки");
	Список.Добавить(3, "Живые животные");
	Список.Добавить(4, "Лекарственные средства");
	Список.Добавить(5, "Пищевые продукты");
	Список.Добавить(6, "Непищевые продукты и другое");
	Список.Добавить(7, "Рыба и морепродукты");
	Список.Добавить(8, "--");
	Возврат(Список);
	
КонецФункции

Функция ДеревоПродукцииВетис() Экспорт
	
	КС10 = Новый КвалификаторыСтроки(36);
	КС3 = Новый КвалификаторыСтроки(36);
	КС36 = Новый КвалификаторыСтроки(36);
	КС45 = Новый КвалификаторыСтроки(45);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТипов10 = Новый ОписаниеТипов(Массив, , КС10);
	ОписаниеТипов3 = Новый ОписаниеТипов(Массив, , КС3);
	ОписаниеТипов36 = Новый ОписаниеТипов(Массив, , КС36);
	ОписаниеТипов45 = Новый ОписаниеТипов(Массив, , КС45);
	
	ДеревоМеркурий = новый ДеревоЗначений;
	ДеревоМеркурий.Колонки.Добавить("Наименование",ОписаниеТипов45,,40);
	ДеревоМеркурий.Колонки.Добавить("Код",ОписаниеТипов10,,4);
	ДеревоМеркурий.Колонки.Добавить("Статус",ОписаниеТипов3,,3);
	ДеревоМеркурий.Колонки.Добавить("GUID",ОписаниеТипов36,,36);
	
	ТаблицаМеркурия = ТаблицаПродукцииВетис();
	
	ТаблицаОглавленияНоменклатуры = ТаблицаМеркурия.Скопировать();
	ТаблицаОглавленияНоменклатуры.Свернуть("productType,productGUID,НаименованиеТипаПродукции");
	
	СписокГлавКлассификатора = ПолучитьСписокТиповПродукцииВетис();
	
	Для Каждого Строка1Ветис Из СписокГлавКлассификатора Цикл
		Строка1Уровня = ДеревоМеркурий.Строки.Добавить();
		Строка1Уровня.Наименование = ""+Строка1Ветис.Значение +". "+ Строка1Ветис.Представление;
		СтрокиОглавления = ТаблицаОглавленияНоменклатуры.НайтиСтроки(Новый Структура("productType",Строка1Ветис.Значение));
		Для Каждого Строка2Ветис Из СтрокиОглавления Цикл
			Строка2Уровня = Строка1Уровня.Строки.Добавить();
			Строка2Уровня.Наименование = "Тип: "+Строка2Ветис.НаименованиеТипаПродукции;
			Строка2Уровня.GUID = Строка2Ветис.productGUID;
			//Строка2Уровня.Статус = Строка2Ветис;
			//Строка2Уровня.Код = Строка2Ветис;
			
			СтрокиКлассификатора= ТаблицаМеркурия.НайтиСтроки(Новый Структура("productType,productGUID",Строка1Ветис.Значение,Строка2Ветис.productGUID));
			Для Каждого Строка3Ветис Из СтрокиКлассификатора Цикл
				Строка3Уровня = Строка2Уровня.Строки.Добавить();
				Строка3Уровня.Наименование = Строка3Ветис.НаименованиеВидаПродукции;
				Строка3Уровня.GUID = Строка3Ветис.subProductGUID;
				Строка3Уровня.Статус = Строка3Ветис.Статус;
				Строка3Уровня.Код = Строка3Ветис.Код;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат ДеревоМеркурий;
	
КонецФункции // ДеревоПродукцииВетис()

Функция ТаблицаПродукцииВетис(ОбновитьИзМеркурия = Ложь) Экспорт

	Если ТаблицаПродукцииВетис <> неопределено
		И (Не ОбновитьИзМеркурия)
		И ТаблицаПродукцииВетис.Количество()>0 Тогда
		Возврат ТаблицаПродукцииВетис;
	КонецЕсли;
	
	СохраненнаяТаблица = ПолучитьНастройкуМеркурий("ТаблицаПродукцииВетис");
	Если (Не ОбновитьИзМеркурия)
		И СохраненнаяТаблица<> Неопределено 
		И СохраненнаяТаблица.ТаблицаПродукцииВетис <> Неопределено Тогда
		ТаблицаПродукцииВетис = СохраненнаяТаблица.ТаблицаПродукцииВетис;
		Возврат ТаблицаПродукцииВетис;
	КонецЕсли;
	
	Прокси = ПолучитьWSПроксиСправочникПродукции();
	
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 100;	
	
	Смещение = 0;
	
	ТаблицаПродукцииВетис = Новый ТаблицаЗначений;
	ТаблицаПродукцииВетис.Колонки.Добавить("productType");
	ТаблицаПродукцииВетис.Колонки.Добавить("productGUID");
	ТаблицаПродукцииВетис.Колонки.Добавить("НаименованиеТипаПродукции");
	ТаблицаПродукцииВетис.Колонки.Добавить("subProductGUID");
	ТаблицаПродукцииВетис.Колонки.Добавить("НаименованиеВидаПродукции");
	ТаблицаПродукцииВетис.Колонки.Добавить("Статус");
	ТаблицаПродукцииВетис.Колонки.Добавить("Код");
	
	РазделыПродукцииСКоторымиРаботаем = ПолучитьКонстантуEDI("M_ВидыПродукции");
	Если НЕ ЗначениеЗаполнено(РазделыПродукцииСКоторымиРаботаем) Тогда 
		РазделыПродукцииСКоторымиРаботаем = "1,2,3,4,5,6,7";
	КонецЕсли;
	МассивТиповПродукции = ОсновнойМодуль.EDI_РазложитьСтрокуВМассивСлов(РазделыПродукцииСКоторымиРаботаем,",");
	
	Для Каждого ТипПродукцииСтрока Из МассивТиповПродукции Цикл
		ТипПродукции = Число(ТипПродукцииСтрока);
		Смещение = 0;
			
		Пока Истина Цикл
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			ListOptions.offset = Смещение;
			Попытка
				Ответ = Прокси.GetProductByTypeList(ListOptions, ТипПродукции);
			Исключение
				Прервать;  // на рефакторинг - сделать как в EDI 2 попытки
			КонецПопытки;
			Смещение = Смещение + 100;
			КоличествоВПачке = Ответ.Product.Количество();
			
			Для Каждого стр из Ответ.Product Цикл
				Смещениеsub = 0;
				//ТекСтрока = Дерево.Строки.Добавить();
				//ЗаполнитьТекСтроку(ТекСтрока, стр);
				Пока Истина Цикл
					#Если Клиент Тогда
					ОбработкаПрерыванияПользователя();
					#КонецЕсли
					ListOptions.offset = Смещениеsub;
					Попытка 
						Ответsub = Прокси.GetSubProductByProductList(ListOptions, стр.GUID);
					Исключение
						Прервать; // на рефакторинг - сделать как в EDI 2 попытки
					КонецПопытки;
					
					ОсновнойМодуль.Состояние_КонтурEDI("Опрашиваю классификатор продукции "+стр.name);
					//Теперь спросить дочерние
					Для Каждого стрsub из Ответsub.subProduct Цикл
						#Если Клиент Тогда
						ОбработкаПрерыванияПользователя();
						#КонецЕсли
						НоваяСтрокаТаблицы = ТаблицаПродукцииВетис.Добавить();
						НоваяСтрокаТаблицы.productType = ТипПродукции;
						НоваяСтрокаТаблицы.productGUID = стр.GUID;
						НоваяСтрокаТаблицы.НаименованиеТипаПродукции = стр.name;
						НоваяСтрокаТаблицы.subProductGUID = стрsub.GUID;
						НоваяСтрокаТаблицы.НаименованиеВидаПродукции = стрsub.name;
						НоваяСтрокаТаблицы.Код = стрsub.code;
						НоваяСтрокаТаблицы.Статус = стрsub.status;
					КонецЦикла;
					Смещениеsub = Смещениеsub + 100;
					КоличествоВПачкеsub = Ответsub.subProduct.Количество();
					Если КоличествоВПачкеsub < 100 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если КоличествоВПачке < 100 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаПродукцииВетис<>неопределено
		И ТаблицаПродукцииВетис.Количество()>0 Тогда
		СохранитьНастройкуМеркурий("ТаблицаПродукцииВетис",ТаблицаПродукцииВетис);
	КонецЕсли;
	
	Возврат ТаблицаПродукцииВетис;
	
КонецФункции // ТаблицаПродукцииВетис()

Функция ПолучитьproductGUIDиproductTypeПоsubProductGUID(subProductGUID)
	
	СтруктураВозврата = Новый Структура("productType, productGUID",);
	
	Если ЗначениеЗаполнено(subProductGUID) Тогда
		НайденнаяСтрока = ТаблицаПродукцииВетис().Найти(subProductGUID,"subProductGUID");
		Если НайденнаяСтрока<>Неопределено Тогда
			СтруктураВозврата.productType = НайденнаяСтрока.productType;
			СтруктураВозврата.productGUID = НайденнаяСтрока.productGUID;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
	
КонецФункции

//Сохранение настроек Меркурий
Функция ПолучитьКлючСохраненияНастроекМеркурий()
	
	Возврат "КонтурEDI/СохраненныеНастройкиМеркурий";
		
КонецФункции
	
Процедура СохранитьНастройкуМеркурий(ИмяНастройкиБезПрефикса,ТаблицаМеркурий) Экспорт
	
	ИмяНастройки = "Меркурий_"+ИмяНастройкиБезПрефикса;
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить(ИмяНастройкиБезПрефикса,						ТаблицаМеркурий);
	
	Попытка
		Выполнить("ХранилищеОбщихНастроек.Сохранить(ПолучитьКлючСохраненияНастроекМеркурий(),ИмяНастройки,СтруктураНастроек);");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСписокНастроекМеркурий() Экспорт
	
	СписокНастроек = Новый СписокЗначений;
	Если ОсновнойМодуль.КонтурEDI_ВерсияПлатформы()<>"81" Тогда
		Попытка
			Выполнить("СписокНастроек = ХранилищеОбщихНастроек.ПолучитьСписок(ПолучитьКлючСохраненияНастроекМеркурий());");
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат СписокНастроек;
	
КонецФункции

Функция ПолучитьНастройкуМеркурий(ИмяНастройки) Экспорт
	
	ИмяНастройки = "Меркурий_"+ИмяНастройки;
	
	ЗначениеНастройки = Неопределено;
	Попытка
		Выполнить("ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(ПолучитьКлючСохраненияНастроекМеркурий(),ИмяНастройки);");
	Исключение
	КонецПопытки;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

Функция ПолучитьМеркурийComplexDate(Дата) Экспорт
	
	ДатаМеркурий = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/base", "ComplexDate");
	
	Если  ЗначениеЗаполнено(Дата) Тогда
		ДатаМеркурий.year		= Год(Дата);
		ДатаМеркурий.month	= Формат(Месяц(Дата),"ЧЦ=2; ЧВН=");
		ДатаМеркурий.day		= Формат(День(Дата),"ЧЦ=2; ЧВН=");
		ДатаМеркурий.hour		= Час(Дата);
	Иначе
	КонецЕсли;
	Возврат(ДатаМеркурий);
	
КонецФункции

Функция ПолучитьМеркурийДатуИзОтвета(ДатаОтвета) Экспорт
	
	Если ДатаОтвета=Неопределено Тогда
		Возврат Дата(1,1,1)
	КонецЕсли;
	
	Попытка
		Год = ВычислитьXDTO(ДатаОтвета,"year"); 
		Месяц = ВычислитьXDTO(ДатаОтвета,"month"); 
		День = ВычислитьXDTO(ДатаОтвета,"day"); 
		Час = ВычислитьXDTO(ДатаОтвета,"hour"); 
		Возврат(Дата(?(ЗначениеЗаполнено(Год),Год,1),?(ЗначениеЗаполнено(Месяц),Месяц,1),?(ЗначениеЗаполнено(День),День,1),?(ЗначениеЗаполнено(Час),Час,0),0,0));
	Исключение
		Возврат Дата(1,1,1)
	КонецПопытки;
	
КонецФункции 


Функция ПолучитьИмяМетодаМеркурийПоТипуСообщения(ТипСообщения) Экспорт

	Если ТипСообщения = "M_DES" Тогда
		Возврат "PrepareOutcomingConsignmentRequest";
	ИначеЕсли ТипСообщения = "M_MOV" Тогда
		Возврат "PrepareOutcomingConsignmentRequest";
	ИначеЕсли ТипСообщения = "M_INC" Тогда
		Возврат "ProcessIncomingConsignmentRequest";
	ИначеЕсли ТипСообщения = "M_REC" Тогда
		Возврат "ProcessIncomingConsignmentRequest";
	ИначеЕсли ТипСообщения = "M_PRD" Тогда
		Возврат "RegisterProductiveBatchRequest";
	//ИначеЕсли ТипСообщения = "" Тогда
	Иначе
		ВызватьИсключение "Не знаю имя метода Меркурий";
	КонецЕсли;		

КонецФункции // ПолучитьИмяМетодаМеркурийПоТипуСообщения()
Функция ПолучитьНазваниеТранзакцииПоТипуСообщения(ТипСообщения)Экспорт
	Если ТипСообщения = "M_DES" Тогда
		Возврат "Перемещение со сменой собственника (M_DES)";
	ИначеЕсли ТипСообщения = "M_MOV" Тогда
		Возврат "Перемещение без смены собственника (M_MOV)";
	ИначеЕсли ТипСообщения = "M_REC" Тогда
		Возврат "Отражение записи входного журнала (M_REC)";
	ИначеЕсли ТипСообщения = "M_PRD" Тогда
		Возврат "Производственная операция (M_PRD)";
	ИначеЕсли ТипСообщения = "M_INC" Тогда
		Возврат "Входящие электронные ВСД (M_INC)";
	ИначеЕсли ТипСообщения = "M_REC" Тогда
		Возврат "Входящие бумажные ВСД (M_REC)";
	//ИначеЕсли ТипСообщения = "" Тогда
	Иначе
		Возврат "Транзакция "+ТипСообщения;
	КонецЕсли;		

КонецФункции // ПолучитьНазваниеТранзакцииПоТипуСообщения()

Функция ПолучитьСписокЭлементовСправочникаМеркурий(ИмяСправочника,ЗНАЧ Владелец = Неопределено) Экспорт
	
	СтандартнаяОбработкаEDI = Истина;
	
	СписокЭлементовСправочника = ОбработкаСобытияПодключаемогоМодуля("ПолучитьСписокЭлементовСправочникаМеркурий",СтандартнаяОбработкаEDI,
								Новый Структура("ИмяСправочника,Владелец",
								ИмяСправочника,Владелец));
	
	Если Не СтандартнаяОбработкаEDI Тогда
		
		Возврат СписокЭлементовСправочника;
		
	КонецЕсли;
	
	Если ИмяСправочника = "МеркурийХС" 
		ИЛИ ИмяСправочника = "МеркурийПлощадка" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка,
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.НомерСтроки,
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита,
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение,
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ЗначениеСтрока,
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ЗначениеХранилищеЗначения,
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.Наименование
		               |ПОМЕСТИТЬ ВТ_ДанныеСправочника
		               |ИЗ
		               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
		               |ГДЕ
		               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ИмяСправочника
		               |	И НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ПометкаУдаления
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ДанныеСправочника.Ссылка,
		               |	ВТ_ДанныеСправочника.Значение КАК ЗначениеGUID,
		               |	ВТ_ДанныеСправочника.Наименование
		               |ПОМЕСТИТЬ ВТ_GUID
		               |ИЗ
		               |	ВТ_ДанныеСправочника КАК ВТ_ДанныеСправочника
		               |ГДЕ
		               |	ВТ_ДанныеСправочника.ИмяРеквизита = ""GUID""
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ДанныеСправочника.Ссылка,
		               |	ВТ_ДанныеСправочника.Значение КАК ЗначениеОбъект,
		               |	ВТ_ДанныеСправочника.Наименование
		               |ПОМЕСТИТЬ ВТ_Объекты
		               |ИЗ
		               |	ВТ_ДанныеСправочника КАК ВТ_ДанныеСправочника
		               |ГДЕ
		               |	ВТ_ДанныеСправочника.ИмяРеквизита = ""Объект""
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ДанныеСправочника.Ссылка,
		               |	ВТ_ДанныеСправочника.Значение КАК Наш
		               |ПОМЕСТИТЬ ВТ_Наш
		               |ИЗ
		               |	ВТ_ДанныеСправочника КАК ВТ_ДанныеСправочника
		               |ГДЕ
		               |	ВТ_ДанныеСправочника.ИмяРеквизита = ""Наш""
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Объекты.ЗначениеОбъект КАК СвязанныйСправочник,
		               |	ВТ_GUID.ЗначениеGUID КАК GUID,
		               |	ВТ_Объекты.Наименование,
		               |	ЕСТЬNULL(ВТ_Наш.Наш, ЛОЖЬ) КАК Наш,
		               |	ВТ_Объекты.Ссылка КАК ДопСправочникСсылка
		               |ИЗ
		               |	ВТ_Объекты КАК ВТ_Объекты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_GUID КАК ВТ_GUID
		               |		ПО ВТ_Объекты.Ссылка = ВТ_GUID.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Наш КАК ВТ_Наш
		               |		ПО ВТ_Объекты.Ссылка = ВТ_Наш.Ссылка
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Наш УБЫВ";
		
		Запрос.УстановитьПараметр("ИмяСправочника",ИмяСправочника );
		
		Результат = Запрос.Выполнить();
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли ИмяСправочника = "МеркурийУчетнаяЗапись" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтурEDI_ДополнительныеСправочники.Ссылка
		|ИЗ
		|	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
		|ГДЕ
		|	КонтурEDI_ДополнительныеСправочники.ИмяСправочника = ""МеркурийУчетнаяЗапись""";
		
		Возврат Запрос.Выполнить().Выгрузить();
		
		
	КонецЕсли;
	
КонецФункции

Функция СохранитьСписокЭлементовСправочникаМеркурий(ИмяСправочника,ТаблицаНовых) Экспорт
	
	Отказ = Ложь;
	
	ТаблицаТекущих = ПолучитьСписокЭлементовСправочникаМеркурий(ИмяСправочника);
	
	ТаблицаТекущих.Колонки.Добавить("Признак");
	ТаблицаТекущих.ЗаполнитьЗначения(Ложь,"Признак");
	
	ТаблицаТекущих.Индексы.Добавить("СвязанныйСправочник");
	
	// мы знаем, что объект(контрагент) в каждой из таблиц встречается один раз, так что можем спокойно сравнивать по нему
	Для Каждого Стр Из ТаблицаНовых Цикл
		
		// забиваем на пустые строки
		Если НЕ ЗначениеЗаполнено(Стр.GUID) И НЕ ЗначениеЗаполнено(Стр.СвязанныйСправочник) Тогда
			Продолжить;
		КонецЕсли;
		
		//Если НЕ НайденнаяСтрока = Неопределено Тогда
		//	
		//	Если (НЕ НайденнаяСтрока.GUID = Стр.GUID)
		//		ИЛИ (НЕ НайденнаяСтрока.Наш = Стр.Наш) Тогда
				
		ЗаписатьЭлементСправочникаМеркурий(ИмяСправочника, Стр.СвязанныйСправочник, Стр.GUID, Отказ, Стр.Наш, Стр.ДопСправочникСсылка);
		НайденнаяСтрока = ТаблицаТекущих.Найти(Стр.СвязанныйСправочник,"СвязанныйСправочник");
		
		Если НайденнаяСтрока <> Неопределено ТОгда
			НайденнаяСтрока.Признак = Истина;
		КонецЕсли;
				
		//	КонецЕсли;	
		//	
		//	
		//Иначе
		//	
		//	ЗаписатьЭлементСправочникаМеркурий(ИмяСправочника, Стр.СвязанныйСправочник, Стр.GUID, Отказ, Стр.Наш);
		//	
		//КонецЕсли;
		
		Если Отказ Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	//// очистим свойства исключенных контрагентов
	//
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Признак",Ложь);
	
	НайденныеСтроки = ТаблицаТекущих.НайтиСтроки(СтруктураОтбора);
	Для Каждого Стр ИЗ НайденныеСтроки Цикл
		
		УдалитьОбъектМеркурий(Стр.СвязанныйСправочник, Стр.GUID, ИмяСправочника);
		
	КонецЦикла;	
	

КонецФункции // СохранитьСписокЭлементовСправочникаМеркурий()

Функция УдалитьОбъектМеркурий(Объект, GUID, ИмяСправочника)

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
|ПОМЕСТИТЬ ВТ_НайденныеПоGUID
|ИЗ
|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
|ГДЕ
|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ИмяСправочника
|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""GUID""
|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = &GUID
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
|ПОМЕСТИТЬ ВТ_НайденныеПоОбъекту
|ИЗ
|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
|ГДЕ
|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ИмяСправочника
|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""Объект""
|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = &Объект
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ_НайденныеПоGUID.Ссылка
|ИЗ
|	ВТ_НайденныеПоGUID КАК ВТ_НайденныеПоGUID
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НайденныеПоОбъекту КАК ВТ_НайденныеПоОбъекту
|		ПО ВТ_НайденныеПоGUID.Ссылка = ВТ_НайденныеПоОбъекту.Ссылка";

Запрос.УстановитьПараметр("ИмяСправочника", ИмяСправочника);
Запрос.УстановитьПараметр("GUID", GUID);
Запрос.УстановитьПараметр("Объект", Объект);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Пока Выборка.Следующий() Цикл

	ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
	ОбъектСправочника.УстановитьПометкуУдаления(Истина);

КонецЦикла;
	

КонецФункции // УдалитьОбъектМеркурий()

Функция ПолучитьСоответствияВсехЕдиницИзмеренияМеркурий() Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеСправочники.Ссылка
	               |ПОМЕСТИТЬ ВТ_СправочникСоответствийЕИ
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеСправочники.ИмяСправочника = &ИмяСправочника
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеРеквизиты.Объект,
	               |	КонтурEDI_ДополнительныеРеквизиты.Свойство,
	               |	КонтурEDI_ДополнительныеРеквизиты.Значение
	               |ПОМЕСТИТЬ ВТ_СвойстваСправочникаСоответствийЕИ
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	               |ГДЕ
	               |	(КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИ_GUID""
	               |			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИ_UUID""
	               |			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИ_Соответствие""
	               |			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИ_Наименование"")
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СправочникСоответствийЕИ.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(СвойствоGUID.Значение, """") КАК GUID,
	               |	ЕСТЬNULL(СвойствоUUID.Значение, """") КАК UUID,
	               |	ЕСТЬNULL(СвойствоНаименование.Значение, """") КАК Наименование,
	               |	ЕСТЬNULL(Соответствие.Значение, """") КАК Соответствие
	               |ИЗ
	               |	ВТ_СправочникСоответствийЕИ КАК ВТ_СправочникСоответствийЕИ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК СвойствоGUID
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = СвойствоGUID.Объект
	               |			И (СвойствоGUID.Свойство = ""Меркурий_ЕИ_GUID"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК СвойствоUUID
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = СвойствоUUID.Объект
	               |			И (СвойствоUUID.Свойство = ""Меркурий_ЕИ_UUID"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК СвойствоНаименование
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = СвойствоНаименование.Объект
	               |			И (СвойствоНаименование.Свойство = ""Меркурий_ЕИ_Наименование"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК Соответствие
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = Соответствие.Объект
	               |			И (Соответствие.Свойство = ""Меркурий_ЕИ_Соответствие"")";
	
	Запрос.УстановитьПараметр("ИмяСправочника","Меркурий_КлассификаторЕдиницИзмерения");
	
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	
	Возврат ТЗ;
	
КонецФункции // КлассификаторЕдиницИзмеренияМеркурий()

Функция ПолучитьСоответствияВсехЕдиницИзмеренияУпаковокМеркурий() Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеСправочники.Ссылка
	               |ПОМЕСТИТЬ ВТ_СправочникСоответствийЕИ
	               |ИЗ
	               |	Справочник.КонтурEDI_ДополнительныеСправочники КАК КонтурEDI_ДополнительныеСправочники
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеСправочники.ИмяСправочника = &ИмяСправочника
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеРеквизиты.Объект,
	               |	КонтурEDI_ДополнительныеРеквизиты.Свойство,
	               |	КонтурEDI_ДополнительныеРеквизиты.Значение
	               |ПОМЕСТИТЬ ВТ_СвойстваСправочникаСоответствийЕИ
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	               |ГДЕ
	               |	(КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИУп_UUID""
	               |			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИУп_Соответствие""
	               |			ИЛИ КонтурEDI_ДополнительныеРеквизиты.Свойство = ""Меркурий_ЕИУп_Наименование"")
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СправочникСоответствийЕИ.Ссылка КАК Ссылка,
	               |	ЕСТЬNULL(СвойствоUUID.Значение, """") КАК UUID,
	               |	ЕСТЬNULL(СвойствоНаименование.Значение, """") КАК Наименование,
	               |	ЕСТЬNULL(Соответствие.Значение, """") КАК Соответствие
	               |ИЗ
	               |	ВТ_СправочникСоответствийЕИ КАК ВТ_СправочникСоответствийЕИ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК СвойствоUUID
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = СвойствоUUID.Объект
	               |			И (СвойствоUUID.Свойство = ""Меркурий_ЕИУп_UUID"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК СвойствоНаименование
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = СвойствоНаименование.Объект
	               |			И (СвойствоНаименование.Свойство = ""Меркурий_ЕИУп_Наименование"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СвойстваСправочникаСоответствийЕИ КАК Соответствие
	               |		ПО ВТ_СправочникСоответствийЕИ.Ссылка = Соответствие.Объект
	               |			И (Соответствие.Свойство = ""Меркурий_ЕИУп_Соответствие"")";
	
	Запрос.УстановитьПараметр("ИмяСправочника","Меркурий_КлассификаторЕдиницИзмеренияУпаковок");
	
	Результат = Запрос.Выполнить();
	ТЗ = Результат.Выгрузить();
	
	Возврат ТЗ;
	
КонецФункции // КлассификаторЕдиницИзмеренияМеркурий()

Функция ПолучитьКлассификаторЕдиницИзмеренияМеркурий() Экспорт
	
	Прокси = ПолучитьWSПроксиСправочникЕдиницИзмерения();
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;
	ListOptions.offset = 0;
	
	Ответ = Прокси.GetUnitList(ListOptions);

	ТаблицаЕдиницИзмеренияМеркурий = Новый ТаблицаЗначений();
	ТаблицаЕдиницИзмеренияМеркурий.Колонки.Добавить("Наименование");
	ТаблицаЕдиницИзмеренияМеркурий.Колонки.Добавить("GUID");
	ТаблицаЕдиницИзмеренияМеркурий.Колонки.Добавить("UUID");
	ТаблицаЕдиницИзмеренияМеркурий.Колонки.Добавить("КратнаЧему");
	ТаблицаЕдиницИзмеренияМеркурий.Колонки.Добавить("КратнаКоэффициент");
	
	Для Каждого ЭлементКлассификатора Из Ответ.unit Цикл
		
		Если ЭлементКлассификатора.active Тогда
			НоваяСтрока = ТаблицаЕдиницИзмеренияМеркурий.Добавить();
			НоваяСтрока.Наименование = ЭлементКлассификатора.name;
			НоваяСтрока.GUID = ЭлементКлассификатора.guid;
			НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
			Если ЭлементКлассификатора.factor <> 1 Тогда
				НоваяСтрока.КратнаЧему = ЭлементКлассификатора.commonUnitGuid;
				НоваяСтрока.КратнаКоэффициент = ЭлементКлассификатора.factor;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаЕдиницИзмеренияМеркурий Цикл
		Если ЗначениеЗаполнено(Строка.КратнаЧему) Тогда
			Попытка
				Строка.КратнаЧему = ТаблицаЕдиницИзмеренияМеркурий.Найти(Строка.КратнаЧему,"GUID").Наименование;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЕдиницИзмеренияМеркурий;
	
КонецФункции

Функция ПолучитьТиповыеВариантыБлагополучияМестности() Экспорт
	
	ТаблицаБлагополучий = новый ТаблицаЗначений;
	ТаблицаБлагополучий.Колонки.Добавить("БлагополучиеМестности", новый ОписаниеТипов("Строка"));
	
	НоваяСтрока = ТаблицаБлагополучий.Добавить();
	НоваяСтрока.БлагополучиеМестности = "Местность благополучна по заразным болезням животных";
	НоваяСтрока = ТаблицаБлагополучий.Добавить();
	НоваяСтрока.БлагополучиеМестности = "Местность НЕблагополучна по заразным болезням животных";
	НоваяСтрока = ТаблицаБлагополучий.Добавить();
	НоваяСтрока.БлагополучиеМестности = "Местность неопределенная по заразным болезням животных";
	Возврат ТаблицаБлагополучий;
	
КонецФункции

Функция ПолучитьКлассификаторЦелейМеркурий(ОбновитьИзМеркурия = Ложь) Экспорт
	
	//если уже инициализированы
	Если КлассификаторЦелейМеркурий <> неопределено Тогда
		Возврат КлассификаторЦелейМеркурий;
	КонецЕсли;
	
	//если сохранили пользователю
	Попытка
	СохраненнаяТаблица = ПолучитьНастройкуМеркурий("КлассификаторЦелейМеркурий");
	Если (Не ОбновитьИзМеркурия)
		И СохраненнаяТаблица<> Неопределено 
		И СохраненнаяТаблица.КлассификаторЦелейМеркурий <> Неопределено Тогда
		КлассификаторЦелейМеркурий = СохраненнаяТаблица.КлассификаторЦелейМеркурий;
		Возврат КлассификаторЦелейМеркурий;
	КонецЕсли;
	Исключение
	//на случай если переименуем
	КонецПопытки;
	Прокси = ПолучитьWSПроксиСправочникЕдиницИзмерения();
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;
	ListOptions.offset = 0;
	
	Ответ = Прокси.GetPurposeList(ListOptions);

	КлассификаторЦелейМеркурий = Новый ТаблицаЗначений();
	КлассификаторЦелейМеркурий.Колонки.Добавить("Наименование");
	КлассификаторЦелейМеркурий.Колонки.Добавить("GUID");
	КлассификаторЦелейМеркурий.Колонки.Добавить("UUID");
	
	Для Каждого ЭлементКлассификатора Из Ответ.purpose Цикл
		
		Если ЭлементКлассификатора.active Тогда
			НоваяСтрока = КлассификаторЦелейМеркурий.Добавить();
			НоваяСтрока.Наименование = ЭлементКлассификатора.name;
			НоваяСтрока.GUID = ЭлементКлассификатора.guid;
			НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьНастройкуМеркурий("КлассификаторЦелейМеркурий",КлассификаторЦелейМеркурий);
	
	Возврат КлассификаторЦелейМеркурий;
	
КонецФункции

Функция ПолучитьКлассификаторСтранМеркурий(ОбновитьИзМеркурия = Ложь) Экспорт
	
	//если уже инициализированы
	Если КлассификаторСтранМеркурий <> неопределено Тогда
		Возврат КлассификаторСтранМеркурий;
	КонецЕсли;
	
	//если сохранили пользователю
	Попытка
	СохраненнаяТаблица = ПолучитьНастройкуМеркурий("КлассификаторСтранМеркурий");
	Если (Не ОбновитьИзМеркурия)
		И СохраненнаяТаблица<> Неопределено 
		И СохраненнаяТаблица.КлассификаторСтранМеркурий <> Неопределено Тогда
		КлассификаторСтранМеркурий = СохраненнаяТаблица.КлассификаторСтранМеркурий;
		Возврат КлассификаторСтранМеркурий;
	КонецЕсли;
	Исключение
	//на случай если переименуем
	КонецПопытки;
	Прокси = ПолучитьWSПроксиСправочникИкар();
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;
	ListOptions.offset = 0;
	
	Ответ = Прокси.GetAllCountryList(ListOptions);

	КлассификаторСтранМеркурий = Новый ТаблицаЗначений();
	КлассификаторСтранМеркурий.Колонки.Добавить("Наименование");
	КлассификаторСтранМеркурий.Колонки.Добавить("GUID");
	КлассификаторСтранМеркурий.Колонки.Добавить("UUID");
	КлассификаторСтранМеркурий.Колонки.Добавить("Код");
	
	Для Каждого ЭлементКлассификатора Из Ответ.country Цикл
		
		Если ЭлементКлассификатора.active Тогда
			НоваяСтрока = КлассификаторСтранМеркурий.Добавить();
			НоваяСтрока.Наименование = ЭлементКлассификатора.name;
			НоваяСтрока.GUID = ЭлементКлассификатора.guid;
			НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
			НоваяСтрока.Код = ЭлементКлассификатора.code;
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьНастройкуМеркурий("КлассификаторСтранМеркурий",КлассификаторСтранМеркурий);
	
	Возврат КлассификаторСтранМеркурий;
	
КонецФункции

Функция ПолучитьКлассификаторРегионовМеркурий(ОбновитьИзМеркурия = Ложь,СтранаGUID) Экспорт
	
	//если уже инициализированы
	Если КлассификаторРегионовМеркурий <> неопределено Тогда
		Возврат КлассификаторРегионовМеркурий;
	КонецЕсли;
	
	//если сохранили пользователю
	Попытка
	СохраненнаяТаблица = ПолучитьНастройкуМеркурий("КлассификаторРегионовМеркурий");
	Если (Не ОбновитьИзМеркурия)
		И СтранаGUID = "74a3cbb1-56fa-94f3-ab3f-e8db4940d96b"    //кэшируем только РФ
		И СохраненнаяТаблица<> Неопределено 
		И СохраненнаяТаблица.КлассификаторРегионовМеркурий <> Неопределено Тогда
		КлассификаторРегионовМеркурий = СохраненнаяТаблица.КлассификаторРегионовМеркурий;
		Возврат КлассификаторРегионовМеркурий;
	КонецЕсли;
	Исключение
	//на случай если переименуем
	КонецПопытки;

	КлассификаторРегионовМеркурий = ПолучитьАдресныйКлассификаторПоИмениМетода("GetRegionListByCountry",СтранаGUID,"region");

	//
	//Прокси = ПолучитьWSПроксиСправочникИкар();
	//ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	//ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	//ListOptions.count = 1000;
	//ListOptions.offset = 0;
	//
	//Ответ = Прокси.GetRegionListByCountry(ListOptions, СтранаGUID);

	//КлассификаторРегионовМеркурий = Новый ТаблицаЗначений();
	//КлассификаторРегионовМеркурий.Колонки.Добавить("Наименование");
	//КлассификаторРегионовМеркурий.Колонки.Добавить("GUID");
	//КлассификаторРегионовМеркурий.Колонки.Добавить("UUID");
	//КлассификаторРегионовМеркурий.Колонки.Добавить("Код");
	//КлассификаторРегионовМеркурий.Колонки.Добавить("Представление");
	//
	//Для Каждого ЭлементКлассификатора Из Ответ.region Цикл
	//	
	//	Если ЭлементКлассификатора.active Тогда
	//		НоваяСтрока = КлассификаторРегионовМеркурий.Добавить();
	//		НоваяСтрока.Наименование = ЭлементКлассификатора.name;
	//		НоваяСтрока.GUID = ЭлементКлассификатора.guid;
	//		НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
	//		НоваяСтрока.Код = ЭлементКлассификатора.regionCode;
	//		НоваяСтрока.Представление = ЭлементКлассификатора.view;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Если СтранаGUID = "74a3cbb1-56fa-94f3-ab3f-e8db4940d96b" Тогда   //кэшируем только РФ
		СохранитьНастройкуМеркурий("КлассификаторРегионовМеркурий",КлассификаторРегионовМеркурий);
	КонецЕсли;
	
	Возврат КлассификаторРегионовМеркурий;
	
КонецФункции

Функция ПолучитьКлассификаторРайоновРегионаМеркурий(РайонGUID) Экспорт  //district
	
	Возврат ПолучитьАдресныйКлассификаторПоИмениМетода("GetDistrictListByRegion",РайонGUID,"district");
	
	//Прокси = ПолучитьWSПроксиСправочникИкар();
	//ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	//ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	//ListOptions.count = 1000;
	//ListOptions.offset = 0;
	//
	//Ответ = Прокси.GetDistrictListByRegion(ListOptions, РайонGUID);

	//КлассификаторРайоновРегионаМеркурий = Новый ТаблицаЗначений();
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("Наименование");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("GUID");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("UUID");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("Код");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("Представление");
	//
	//Для Каждого ЭлементКлассификатора Из Ответ.district Цикл
	//	
	//	Если ЭлементКлассификатора.active Тогда
	//		НоваяСтрока = КлассификаторРайоновРегионаМеркурий.Добавить();
	//		НоваяСтрока.Наименование = ЭлементКлассификатора.name;
	//		НоваяСтрока.GUID = ЭлементКлассификатора.guid;
	//		НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
	//		НоваяСтрока.Код = ЭлементКлассификатора.regionCode;
	//		НоваяСтрока.Представление = ЭлементКлассификатора.view;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Возврат КлассификаторРайоновРегионаМеркурий;
	//
КонецФункции

Функция ПолучитьКлассификаторНасПунктовРегионаМеркурий(РегионGUID) Экспорт  //district
	
	Возврат ПолучитьАдресныйКлассификаторПоИмениМетода("GetLocalityListByRegion",РегионGUID,"locality");
	//
	//Прокси = ПолучитьWSПроксиСправочникИкар();
	//ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	//ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	//ListOptions.count = 1000;
	//ListOptions.offset = 0;
	//
	//Ответ = Прокси.GetLocalityListByRegion(ListOptions, РегионGUID);
	//
	//КлассификаторРайоновРегионаМеркурий = Новый ТаблицаЗначений();
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("Наименование");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("GUID");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("UUID");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("Код");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("Представление");
	//
	//Для Каждого ЭлементКлассификатора Из Ответ.locality Цикл
	//	
	//	Если ЭлементКлассификатора.active Тогда
	//		НоваяСтрока = КлассификаторРайоновРегионаМеркурий.Добавить();
	//		НоваяСтрока.Наименование = ЭлементКлассификатора.name;
	//		НоваяСтрока.GUID = ЭлементКлассификатора.guid;
	//		НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
	//		НоваяСтрока.Код = ЭлементКлассификатора.regionCode;
	//		НоваяСтрока.Представление = ЭлементКлассификатора.view;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Возврат КлассификаторРайоновРегионаМеркурий;
	
КонецФункции

Функция ПолучитьКлассификаторНасПунктовРайонаМеркурий(РайонGUID) Экспорт  //или нас пунктов в пределах подчинения головному населенному пункту
	
	Возврат ПолучитьАдресныйКлассификаторПоИмениМетода("GetLocalityListByDistrict",РайонGUID,"locality");
	
	
	//Прокси = ПолучитьWSПроксиСправочникИкар();

	//ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	//ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	//ListOptions.count = 1000;
	//ListOptions.offset = 0;
	//
	//Ответ = Прокси.GetLocalityListByDistrict(ListOptions, РайонGUID);

	//КлассификаторРайоновРегионаМеркурий = Новый ТаблицаЗначений();
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("Наименование");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("GUID");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("UUID");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("Код");
	//КлассификаторРайоновРегионаМеркурий.Колонки.Добавить("Представление");
	//
	//Для Каждого ЭлементКлассификатора Из Ответ.locality Цикл
	//	
	//	Если ЭлементКлассификатора.active Тогда
	//		НоваяСтрока = КлассификаторРайоновРегионаМеркурий.Добавить();
	//		НоваяСтрока.Наименование = ЭлементКлассификатора.name;
	//		НоваяСтрока.GUID = ЭлементКлассификатора.guid;
	//		НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
	//		НоваяСтрока.Код = ЭлементКлассификатора.regionCode;
	//		НоваяСтрока.Представление = ЭлементКлассификатора.view;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	//Возврат КлассификаторРайоновРегионаМеркурий;
	
КонецФункции

Функция ПолучитьКлассификаторУлицНаселенногоПунктаМеркурий(НаселенныйПунктGUID,ОбновитьССервера = Ложь) Экспорт  //district //или город федерального значения
	ТекGUID = НаселенныйПунктGUID;
	ТекGUIDБезДефисов = СтрЗаменить(ТекGUID,"-",""); //это надо для того чтобы закэшировать большие списки
	
	Если ОбновитьССервера = Ложь
		И ЭтоGUIDГородаФедеральногоЗначения(НаселенныйПунктGUID) Тогда
		СохраненнаяСтруктура = ПолучитьНастройкуМеркурий("ГородФЗ"+ТекGUIDБезДефисов);
		Если СохраненнаяСтруктура<>Неопределено Тогда
			СохраненнаяТаблицаУлиц = Новый ТаблицаЗначений();
			Если СохраненнаяСтруктура.Свойство("ГородФЗ"+ТекGUIDБезДефисов,СохраненнаяТаблицаУлиц) Тогда
				Возврат СохраненнаяТаблицаУлиц;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	ТаблицаУлиц = ПолучитьАдресныйКлассификаторПоИмениМетода("GetStreetListByLocality",НаселенныйПунктGUID,"street");
	
	Если ЭтоGUIDГородаФедеральногоЗначения(НаселенныйПунктGUID) Тогда
		СохранитьНастройкуМеркурий("ГородФЗ"+ТекGUIDБезДефисов,ТаблицаУлиц);
	КонецЕсли;
	
	Возврат ТаблицаУлиц;
	
КонецФункции

Функция ПолучитьАдресныйКлассификаторПоИмениМетода(ИмяМетода,GUID,НазваниеЭлементаКоллекции) Экспорт
	
	Классификатор = Новый ТаблицаЗначений();
	Классификатор.Колонки.Добавить("Наименование");
	Классификатор.Колонки.Добавить("GUID");
	Классификатор.Колонки.Добавить("UUID");
	Классификатор.Колонки.Добавить("Код");
	Классификатор.Колонки.Добавить("Представление");
	
	Прокси = ПолучитьWSПроксиСправочникИкар();
	ВычитанПолностью = Ложь;
	Итерация = 0;
	Пока Не ВычитанПолностью Цикл
		
		ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
		ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
		ListOptions.count = 1000;
		ListOptions.offset = Итерация*1000;
		
		Ответ = Неопределено;
		
		Попытка
			Выполнить("Ответ = Прокси."+ИмяМетода+"(ListOptions, GUID)");
		Исключение
			Сообщить("Не смог получить: "+ИмяМетода+" по GUID: "+GUID);
			Возврат Классификатор; 
		КонецПопытки;
		
		СписокXDTO =  Ответ.ПолучитьСписок(НазваниеЭлементаКоллекции);
		Для Каждого ЭлементКлассификатора Из СписокXDTO Цикл
			Если ЭлементКлассификатора.active Тогда
				НоваяСтрока = Классификатор.Добавить();
				НоваяСтрока.Наименование = ЭлементКлассификатора.name;
				НоваяСтрока.GUID = ЭлементКлассификатора.guid;
				НоваяСтрока.UUID = ЭлементКлассификатора.uuid;
				НоваяСтрока.Код = ЭлементКлассификатора.regionCode;
				НоваяСтрока.Представление = ЭлементКлассификатора.view;
			КонецЕсли;
		КонецЦикла;
		
		Если Ответ.offset + Ответ.count = Ответ.total Тогда
			ВычитанПолностью = Истина;
		КонецЕсли;
		
		Итерация=Итерация+1;
	КонецЦикла;
	
	Возврат Классификатор;
	
КонецФункции

	

Функция ПолучитьОКОПФМеркурий() Экспорт
	Если ОКОПФ<>Неопределено Тогда
		Возврат ОКОПФ;
	КонецЕсли;
		
	//инициализация
	ДанныеМакета = МеркурийЗагрузитьКлассификаторИзМакета("МеркурийОКОПФ");
	ОКОПФ = Новый ТаблицаЗначений();
	ОКОПФ.Колонки.Добавить("Код");
	ОКОПФ.Колонки.Добавить("Наименование");
	
	Для каждого СтрокаСписка Из ДанныеМакета Цикл
		
		НоваяСтрока = ОКОПФ.Добавить();
		НоваяСтрока.Наименование = СтрокаСписка.Представление;
		НоваяСтрока.Код = СтрокаСписка.Значение;
	
	КонецЦикла;
	
	Возврат ОКОПФ;
	
КонецФункции

Функция ПолучитьКлассификаторЕдиницИзмеренияУпаковокМеркурий() Экспорт
	
	КлассификаторУпаковок = МеркурийЗагрузитьКлассификаторИзМакета("МеркурийУпаковки");
	ТабКлассификаторУпаковок = Новый ТаблицаЗначений();
	ТабКлассификаторУпаковок.Колонки.Добавить("Наименование");
	ТабКлассификаторУпаковок.Колонки.Добавить("UUID");
	
	Для каждого СтрокаСписка Из КлассификаторУпаковок Цикл
		
		НоваяСтрока = ТабКлассификаторУпаковок.Добавить();
		НоваяСтрока.Наименование = СтрокаСписка.Представление;
		НоваяСтрока.UUID = СтрокаСписка.Значение;
	
	КонецЦикла;
	
	Возврат ТабКлассификаторУпаковок;
	
КонецФункции

Функция МеркурийЗагрузитьКлассификаторИзМакета(Тип) Экспорт //Задублировали для того чтобы можно было классификатор кинуть в Этот Модуль
	
	Результат = ОсновнойМодуль.ЭДО_Кэш_Прочитать("Классификатор_"+Тип);
	
	Если Результат=Неопределено Тогда
		
		Результат = Новый СписокЗначений;
		
		Макет = ПолучитьМакет("Классификатор_"+Тип);
		Таб = Макет.ПолучитьОбласть("Данные");
		
		Для Сч=1 По Таб.ВысотаТаблицы Цикл
			
			НомерСтроки = Формат(сч,"ЧГ=");
			
			ТекстЗначения = Таб.Область("R"+НомерСтроки+"C1").Текст;
			ТекстПредставления = Таб.Область("R"+НомерСтроки+"C2").Текст;
			
			Результат.Добавить(ТекстЗначения,ТекстПредставления);
			
		КонецЦикла;
		
		ОсновнойМодуль.ЭДО_Кэш_Поместить("Классификатор_"+Тип,Результат);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции


Процедура ЗаписатьЭлементСправочникаМеркурий(ИмяСправочника, Объект, GUID, 	Отказ, Наш = Ложь, ДопСправочникСсылка=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ДопСправочникСсылка) Тогда
		НовыйЭлементСправочника = ДопСправочникСсылка.ПолучитьОбъект();
	Иначе
		НовыйЭлементСправочника = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
	КонецЕсли;
	НовыйЭлементСправочника.Наименование = Строка(Объект);
	НовыйЭлементСправочника.ИмяСправочника = СокрЛП(ИмяСправочника);
	
	СвойствоGUID = НовыйЭлементСправочника.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	Если Не ЗначениеЗаполнено(СвойствоGUID) Тогда
		СвойствоGUID = НовыйЭлементСправочника.ДополнительныеРеквизиты.Добавить();
	КонецЕсли;
	СвойствоGUID.ИмяРеквизита = "GUID";
	СвойствоGUID.Значение = GUID;
	
	СвойствоОбъект = НовыйЭлементСправочника.ДополнительныеРеквизиты.Найти("Объект","ИмяРеквизита");
	Если Не ЗначениеЗаполнено(СвойствоОбъект) Тогда
		СвойствоОбъект = НовыйЭлементСправочника.ДополнительныеРеквизиты.Добавить();
	КонецЕсли;
	СвойствоОбъект.ИмяРеквизита = "Объект";
	СвойствоОбъект.Значение = Объект;
	
	СвойствоНаш = НовыйЭлементСправочника.ДополнительныеРеквизиты.Найти("Наш","ИмяРеквизита");
	Если Не ЗначениеЗаполнено(СвойствоНаш) Тогда
		СвойствоНаш = НовыйЭлементСправочника.ДополнительныеРеквизиты.Добавить();
	КонецЕсли;
	СвойствоНаш.ИмяРеквизита = "Наш";
	СвойствоНаш.Значение = Наш;
	НовыйЭлементСправочника.ПометкаУдаления = ложь;
	
	НовыйЭлементСправочника.Записать();
	
КонецПроцедуры

Функция ПолучитьИзмененияЗаписейСкладскогоЖурналаЗаИнтервал(GUIDПлощадки,ДатаС,ДатаПо) Экспорт //эти даты ждем по московскому времени
	
	ТаблицаНовыхЗаписей = ПолучитьПустуюТаблицуДляХраненияПартий();
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),,GUIDПлощадки);
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("Наименование", 		"getStockEntryChangesListRequest");
	ПараметрыФункции.Вставить("initiator", 			ПараметрыПодключения.user);
	ПараметрыФункции.Вставить("enterpriseGuid",		GUIDПлощадки);
	ПараметрыФункции.Вставить("localTransactionId", "");
	DateInterval = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/base", "DateInterval");
	
	DateInterval.beginDate = ДатаС - СмещениеЧасовОтМосквы*3600;
	//всегда будем спрашивать на тек дату
	//DateInterval.endDate = Формат(ДатаПо, "ДФ=yyyy-MM-ddTЧЧ:мм:сс")+НашЧасовойпоясПостфикс;
	ПараметрыФункции.Вставить("updateDateInterval", DateInterval);
	
	Смещение = 0;
	
	//Вычитываем все записи журнала
	Пока Истина Цикл
		ПараметрыПодключения.ListOptions.offset = Смещение;
		ПараметрыФункции.Вставить("listOptions", ПараметрыПодключения.ListOptions);		
		//Дожидаться результата
		ОтветXDTO = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "getStockEntryChangesListRequest", Истина);
		
		Если ОтветXDTO = "" Тогда
			Возврат ТаблицаНовыхЗаписей;
		КонецЕсли;
		
		ОтветСписокТоваровXDTO = ОтветXDTO.result.getStockEntryChangesListResponse.stockEntryList;
		
		Если Число(ОтветСписокТоваровXDTO.Count) = 0 Тогда 
			Прервать;
			Возврат ТаблицаНовыхЗаписей;
		КонецЕсли;
		
		//Обработка строк	
		/////////////////////////////////////////////////////////////////
		Если Число(ОтветСписокТоваровXDTO.total) = 0 Тогда
			Возврат ТаблицаНовыхЗаписей;
		ИначеЕсли Число(ОтветСписокТоваровXDTO.total) = 1 Тогда
			ЕдинственнаяСтрока = ОтветСписокТоваровXDTO.stockEntry;
			СписокstockEntry = Новый Массив;
			СписокstockEntry.Добавить(ЕдинственнаяСтрока);
		Иначе
			СписокstockEntry = ОтветСписокТоваровXDTO.stockEntry;
		КонецЕсли;
		
		Для Каждого СтрокаОстатков из СписокstockEntry Цикл
			
			ПартияОстатков = СтрокаОстатков.batch;
			//здесь нам нужны все строки так как нам будут рассказывать про устаревание наших партий
			//Если НРег(СтрокаОстатков.active)<>"true" 
			//	ИЛИ СтрокаОстатков.status = "400" ИЛИ СтрокаОстатков.status = "410" ИЛИ СтрокаОстатков.status = "420" ИЛИ СтрокаОстатков.status = "430" ИЛИ СтрокаОстатков.status = "201" 
			//	ИЛИ Число(ПартияОстатков.volume) = 0 Тогда
			//	Продолжить;
			//КонецЕсли;
			
			стр = ТаблицаНовыхЗаписей.Добавить();
			
			ЗаполнитьСтрокуПартииИз_stockEntry(стр,СтрокаОстатков);
			
		КонецЦикла;
		/////////////////////////////////////////////////////////////////	
		
		Если Число(ОтветСписокТоваровXDTO.Count) + Смещение >= Число(ОтветСписокТоваровXDTO.Total) Тогда 
			Прервать; 
		КонецЕсли;
		Смещение = Смещение + ПараметрыПодключения.ListOptions.Count;
	КонецЦикла;
	
	Возврат ТаблицаНовыхЗаписей;

КонецФункции

Функция ЗаполнитьСкладскойЖурналПлощадки(GUIDПлощадки,ОбновитьКЭШ=Ложь)
	GUIDБезДефисов = СтрЗаменить(GUIDПлощадки,"-","");
	Если ОперативныйСкладскойЖурнал = Неопределено Тогда
		ОперативныйСкладскойЖурнал = Новый Структура();
	КонецЕсли;
	
	ДатаАктуальностиПлощадки = Дата(1,1,1);
	ОперативныйСкладскойЖурнал.Свойство("Актуальность"+GUIDБезДефисов,ДатаАктуальностиПлощадки);
	СтараяТаблицаДанных = Неопределено;
	ОперативныйСкладскойЖурнал.Свойство("Данные"+GUIDБезДефисов,СтараяТаблицаДанных);
	
	Если ДатаАктуальностиПлощадки = Дата(1,1,1) 
		ИЛИ ДатаАктуальностиПлощадки = Неопределено 
		ИЛИ СтараяТаблицаДанных = Неопределено 
		ИЛИ ОбновитьКЭШ = Истина Тогда
		
		ОсновнойМодуль.Состояние_КонтурEDI("Читаю весь складской журнал.");
		ДатаЗапроса= ТекущаяДата();
		ОперативныйСкладскойЖурнал.Вставить("Данные"+GUIDБезДефисов,ЗапроситьИзМеркурияВсеЗаписиСкладскогоЖурнала(GUIDПлощадки));
		ОперативныйСкладскойЖурнал.Вставить("Актуальность"+GUIDБезДефисов,ДатаЗапроса);
	Иначе
		ОсновнойМодуль.Состояние_КонтурEDI("Проверяю актуальность складского журнала.");
		СтараяТаблицаДанных = Неопределено;
		ОперативныйСкладскойЖурнал.Свойство("Данные"+GUIDБезДефисов,СтараяТаблицаДанных);
		ДатаЗапроса= ТекущаяДата();
		
		//каждый раз, получая данные мы уничтожаем Использованное количество.
		//ИспользованноеЕоличество может жить только в КЭШе и только в пакетном режиме выполнения транзакций.
		Если СтараяТаблицаДанных.Колонки.Найти("КоличествоИспользовано") <> Неопределено Тогда
			СтараяТаблицаДанных.Колонки.Удалить("КоличествоИспользовано");
		КонецЕсли;
		
        ДополнитьСтаруюТаблицуДанныхПлощадки(GUIDПлощадки,СтараяТаблицаДанных);
		ОперативныйСкладскойЖурнал.Вставить("Данные"+GUIDБезДефисов,СтараяТаблицаДанных);
		ОперативныйСкладскойЖурнал.Вставить("Актуальность"+GUIDБезДефисов,ДатаЗапроса);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ДополнитьСкладскойЖурналИзменениями()

Функция ДополнитьСтаруюТаблицуДанныхПлощадки(GUIDПлощадки,СтараяТаблицаДанных)
	
	GUIDБезДефисов = СтрЗаменить(GUIDПлощадки,"-","");
	
	ДатаАктуальностиПлощадки = Неопределено;
	ОперативныйСкладскойЖурнал.Свойство("Актуальность"+GUIDБезДефисов,ДатаАктуальностиПлощадки);
	
	ТаблицаНовыхЗаписей = ПолучитьИзмененияЗаписейСкладскогоЖурналаЗаИнтервал(GUIDПлощадки,ДатаАктуальностиПлощадки,ТекущаяДата());
	
	//Отразить
	Для Каждого СтрокаНовыхПартий ИЗ ТаблицаНовыхЗаписей Цикл
		НайденнаяСтарая = СтараяТаблицаДанных.Найти(СтрокаНовыхПартий.GUID_Партии,"GUID_Партии");
		Если НайденнаяСтарая = Неопределено Тогда
			//если это активная партия - с ненулевым количеством то добавляем
			Если СтрокаНовыхПартий.Активная и СтрокаНовыхПартий.Остаток >0 тогда
				НоваяПартия = СтараяТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяПартия,СтрокаНовыхПартий);//докинули
			КонецЕсли;
		Иначе
			//найдена строка присваиваем все как есть
			ЗаполнитьЗначенияСвойств(НайденнаяСтарая,СтрокаНовыхПартий);
		КонецЕсли;
		
	КонецЦикла;
	
	//теперь обойти и повыкидывать строки с 0 количеством и не активные
	ВсегоСтрок= СтараяТаблицаДанных.количество();
	
	Для й=1 по ВсегоСтрок Цикл
		СтрокаОбходаСнизуВверх = СтараяТаблицаДанных[ВсегоСтрок-й];
		Если СтрокаОбходаСнизуВверх.Остаток = 0
			ИЛИ СтрокаОбходаСнизуВверх.Активная = Ложь Тогда
			СтараяТаблицаДанных.Удалить(СтрокаОбходаСнизуВверх);
		КонецЕсли;
	КонецЦикла;
	
	//надо бы достать номенклатуру там где заполнен productItemUUID 
	ЗаполнитьНоменклатуруСкладскогоЖурнала(СтараяТаблицаДанных);
	
	Если ПакетныйРежим = Истина Тогда
		GUIDБезДефисов = СтрЗаменить(GUIDПлощадки,"-","");
		ОсновнойМодуль.ЭДО_Кэш_Поместить("Меркурий_СкладскойЖурнал"+GUIDБезДефисов,СтараяТаблицаДанных);
	КонецЕсли;
	
	
	Возврат СтараяТаблицаДанных;

КонецФункции // ДополнитьСкладскойЖурналИзменениями()

Процедура СоздатьОперативныйСкладскойЖурналПлощадки(GUIDПлощадки)
	GUIDБезДефисов = СтрЗаменить(GUIDПлощадки,"-","");
	Если ОперативныйСкладскойЖурнал = Неопределено Тогда
		ОперативныйСкладскойЖурнал = Новый Структура();
	КонецЕсли;
	
	ОперативныйСкладскойЖурнал.Вставить("Актуальность"+GUIDБезДефисов,Дата(1,1,1));
	ОперативныйСкладскойЖурнал.Вставить("Данные"+GUIDБезДефисов,ПолучитьПустуюТаблицуДляХраненияПартий());
	
	
КонецПроцедуры


Функция ПолучитьПустуюТаблицуДляХраненияПартий() Экспорт
	
	КЧ = Новый КвалификаторыЧисла(12,3);
	КС = Новый КвалификаторыСтроки(36);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповGUID = Новый ОписаниеТипов(Массив, , КС);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(Массив, , ,КЧ);
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Активная",Новый ОписаниеТипов("Булево"));
	ТаблицаОстатков.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов(ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("Номенклатура")));
	ТаблицаОстатков.Колонки.Добавить("Наименование");
	ТаблицаОстатков.Колонки.Добавить("Остаток",ОписаниеТиповЧ);
	ТаблицаОстатков.Колонки.Добавить("ОстатокУпаковок",ОписаниеТиповЧ);
	ТаблицаОстатков.Колонки.Добавить("ДатаВыпуска",Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ДатаВыпуска2",Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ГоденДо",Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("ГоденДо2",Новый ОписаниеТипов("Дата"));
	//ТаблицаОстатков.Колонки.Добавить("Производитель");  // вот эти 2 колонки тоже идентификаторы партии!
	//ТаблицаОстатков.Колонки.Добавить("Маркировки");
	ТаблицаОстатков.Колонки.Добавить("НомерЗаписи",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("GUID_Партии",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("UUID_Партии",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("unitUUID",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("ЕдиницаИзмеренияУпаковокUUID",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("subProductGuid",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("productItemUUID",	ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("Скоропортящаяся",Новый ОписаниеТипов("Булево"));
	ТаблицаОстатков.Колонки.Добавить("ProducerGUID",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("СтранаUUID",ОписаниеТиповGUID);
	ТаблицаОстатков.Колонки.Добавить("ВладелецGUID",ОписаниеТиповGUID);
	
	Возврат ТаблицаОстатков
	
КонецФункции

Функция ЗаполнитьСтрокуПартииИз_stockEntry(стр,СтрокаОстатков)
	
			ПартияОстатков = СтрокаОстатков.batch;
	
			СписокСвойств = ПартияОстатков.Свойства();
			
			стр.Активная = СтрокаОстатков.active = "true";
			
			стр.ДатаВыпуска 	= ПолучитьМеркурийДатуИзОтвета(ПартияОстатков.DateOfProduction.firstdate);
			Если ПартияОстатков.DateOfProduction.Свойства().Получить("seconddate")<>Неопределено Тогда
				стр.ДатаВыпуска2 	= ПолучитьМеркурийДатуИзОтвета(ПартияОстатков.DateOfProduction.seconddate);
			КонецЕсли;
			
			Если СписокСвойств.Получить("expirydate") <> Неопределено Тогда
				стр.ГоденДо 		= ПолучитьМеркурийДатуИзОтвета(ПартияОстатков.expirydate.firstdate);
				Если ПартияОстатков.expirydate.Свойства().Получить("seconddate")<>Неопределено Тогда
					стр.ГоденДо2 		= ПолучитьМеркурийДатуИзОтвета(ПартияОстатков.expirydate.seconddate);
				КонецЕсли;
			КонецЕсли;
			стр.НомерЗаписи    = СтрокаОстатков.entryNumber;
			Если ПартияОстатков.Свойства().Получить("productItem") <> Неопределено Тогда
				Если ВычислитьXDTO(ПартияОстатков,"productItem.uuid") <> Неопределено Тогда
					стр.productItemUUID = ВычислитьXDTO(ПартияОстатков,"productItem.uuid");
				КонецЕсли;
				Если ВычислитьXDTO(ПартияОстатков,"productItem.name") <> Неопределено Тогда
					стр.Наименование = ВычислитьXDTO(ПартияОстатков,"productItem.name");
				КонецЕсли;
			КонецЕсли;
			стр.subProductGuid 	= ПартияОстатков.subProduct.guid;
			
			//возьмем первую строку производителя, если она единственная
			ProducerGUID = ВычислитьXDTO(ПартияОстатков,"producerList.producer.enterprise.guid");
			Если ProducerGUID <> Неопределено Тогда
				стр.ProducerGUID = ProducerGUID;
			КонецЕсли;
			//СтранаGUID
			СтранаUUID = ВычислитьXDTO(ПартияОстатков,"countryOfOrigin.uuid");
			Если СтранаUUID <> Неопределено Тогда
				стр.СтранаUUID = СтранаUUID;
			КонецЕсли;
			
			стр.unitUUID						= ПартияОстатков.unit.uuid;
			Если ПартияОстатков.Свойства().Получить("packingList")<>Неопределено Тогда  //упаковок может и не быть
				стр.ЕдиницаИзмеренияУпаковокUUID	= ВычислитьXDTO(ПартияОстатков,"packingList.packingForm.uuid");
			КонецЕсли;
			
			стр.Остаток			= ПреобразоватьКоличествоИзМ_В1С(ПартияОстатков.Volume);
			стр.ОстатокУпаковок	= ПреобразоватьКоличествоИзМ_В1С(ПартияОстатков.packingAmount);
			стр.Скоропортящаяся = Булево(ПартияОстатков.perishable);
			
			стр.ВладелецGUID 	= ВычислитьXDTO(ПартияОстатков.owner,"guid");
			
			//избыточные
			//стр.productGuid 	= ПартияОстатков.product.guid;
			//стр.productType		= ПартияОстатков.productType;
			
			стр.GUID_Партии		= ВычислитьXDTO(СтрокаОстатков,"guid");
			стр.UUID_Партии		= ВычислитьXDTO(СтрокаОстатков,"uuid");
КонецФункции

Функция ПреобразоватьКоличествоИзМ_В1С(СтрокаСКоличеством)
	
	ПозицияЕ = Найти(СтрокаСКоличеством,"E");
	Если ПозицияЕ = 0 Тогда	
		Возврат Число(СтрокаСКоличеством);
	Иначе
		ПослеЕ = Сред(СтрокаСКоличеством,ПозицияЕ+1);
		Порядок = Число(ПослеЕ);
		
		Значение = Число(Лев(СтрокаСКоличеством,ПозицияЕ-1)) * Pow(10,Порядок);
		
		Возврат Значение;                       
	КонецЕсли;
	
КонецФункции

Функция ЗапроситьИзМеркурияВсеЗаписиСкладскогоЖурнала(GUIDПлощадки)
	//получим складской остаток
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),,GUIDПлощадки);
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("Наименование", 		"getStockEntryListRequest");
	ПараметрыФункции.Вставить("initiator", 			ПараметрыПодключения.user);
	ПараметрыФункции.Вставить("enterpriseGuid",		GUIDПлощадки);
	ПараметрыФункции.Вставить("localTransactionId", "");
	
	ТаблицаОстатков = ПолучитьПустуюТаблицуДляХраненияПартий();
	                                  
	ТаблицаОстатков.Очистить();           
	Смещение = 0;
	
	//Вычитываем все записи журнала
	Пока Истина Цикл
		ПараметрыПодключения.ListOptions.offset = Смещение;
		ПараметрыФункции.Вставить("listOptions", ПараметрыПодключения.ListOptions);		
		//Дожидаться результата
		Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "getStockEntryListRequest", Истина);
		
		Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
			Прервать;	
		КонецЕсли;
		
		ОтветСписокТоваровXDTO = Ответ.result.getStockEntryListResponse.stockEntryList;
		
		Если ОтветСписокТоваровXDTO.Count = 0 Тогда 
			Прервать; 
		КонецЕсли;
		
		//Обработка строк	
		/////////////////////////////////////////////////////////////////
		Если ОтветСписокТоваровXDTO.total = "0" Тогда
			Возврат ТаблицаОстатков;
		ИначеЕсли ОтветСписокТоваровXDTO.total = "1" Тогда
			ЕдинственнаяСтрока = ОтветСписокТоваровXDTO.stockEntry;
			СписокstockEntry = Новый Массив;
			СписокstockEntry.Добавить(ЕдинственнаяСтрока);
		Иначе
			СписокstockEntry = ОтветСписокТоваровXDTO.stockEntry;
		КонецЕсли;
		
		Для Каждого СтрокаОстатков из СписокstockEntry Цикл
			
			ПартияОстатков = СтрокаОстатков.batch;
			//Не подходят не активные строки и строки где остаток равен 0
			Если НРег(СтрокаОстатков.active)<>"true" 
				ИЛИ СтрокаОстатков.status = "400" ИЛИ СтрокаОстатков.status = "410" ИЛИ СтрокаОстатков.status = "420" ИЛИ СтрокаОстатков.status = "430" ИЛИ СтрокаОстатков.status = "201" 
				ИЛИ ПреобразоватьКоличествоИзМ_В1С(ПартияОстатков.volume) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			стр = ТаблицаОстатков.Добавить();
			
			ЗаполнитьСтрокуПартииИз_stockEntry(стр,СтрокаОстатков);
			
		КонецЦикла;
		/////////////////////////////////////////////////////////////////	
		
		Если Число(ОтветСписокТоваровXDTO.Count) + Смещение >= Число(ОтветСписокТоваровXDTO.Total) Тогда 
			Прервать; 
		КонецЕсли;
		Смещение = Смещение + ПараметрыПодключения.ListOptions.Count;
		
	КонецЦикла;
	//надо бы достать свою номенклатуру там где заполнен productItemUUID 
	ЗаполнитьНоменклатуруСкладскогоЖурнала(ТаблицаОстатков);
	
	Если ПакетныйРежим = Истина Тогда
		GUIDБезДефисов = СтрЗаменить(GUIDПлощадки,"-","");
		ОсновнойМодуль.ЭДО_Кэш_Поместить("Меркурий_СкладскойЖурнал"+GUIDБезДефисов,ТаблицаОстатков);
	КонецЕсли;
	
	Возврат ТаблицаОстатков;
	
КонецФункции


Функция ПолучитьЗаписиСкладскогоЖурнала(GUIDПлощадки,ОбновитьКЭШ = Ложь) Экспорт  //Сообщение.ПлощадкаEDI.GUID
	
	GUIDБезДефисов = СтрЗаменить(GUIDПлощадки,"-","");
	
	Если ПакетныйРежим = Истина Тогда
		СохраненныйЖурнал = ОсновнойМодуль.ЭДО_Кэш_Прочитать("Меркурий_СкладскойЖурнал"+GUIDБезДефисов);
		
		Если НЕ СохраненныйЖурнал=Неопределено Тогда
			Возврат СохраненныйЖурнал;
		КонецЕсли;
	КонецЕсли;
	
	ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю складской журнал.");
	
	// сохраненный КЭШ СохраненныйСкладскойЖурнал
	Если ОперативныйСкладскойЖурнал = Неопределено и ОбновитьКЭШ = Ложь Тогда
		
		СохраненныйЖурналПродукции = ПолучитьНастройкуМеркурий("СохраненныйСкладскойЖурнал");
		Если СохраненныйЖурналПродукции = Неопределено или НЕ СохраненныйЖурналПродукции.Свойство("СохраненныйСкладскойЖурнал") Тогда 
			СоздатьОперативныйСкладскойЖурналПлощадки(GUIDПлощадки);
		Иначе
			ОперативныйСкладскойЖурнал = СохраненныйЖурналПродукции.СохраненныйСкладскойЖурнал;
		КонецЕсли;
	КонецЕсли;
	
	//формирует актуальные данные в ОперативныйСкладскойЖурнал
	ЗаполнитьСкладскойЖурналПлощадки(GUIDПлощадки,ОбновитьКЭШ);
	
	//теперь сохраним в СохраненныйСкладскойЖурнал
	СохранитьНастройкуМеркурий("СохраненныйСкладскойЖурнал",ОперативныйСкладскойЖурнал);
	
	АктуализированныйЖурнал = Неопределено;
	ОперативныйСкладскойЖурнал.Свойство("Данные"+GUIDБезДефисов,АктуализированныйЖурнал);

	Возврат АктуализированныйЖурнал;
	
КонецФункции // ПолучитьЗаписиСкладскогоЖурнала()

Процедура ЗаполнитьНоменклатуруСкладскогоЖурнала(ТаблицаОстатков)
	
	ОбновленныеproductItemUUID = Новый ТаблицаЗначений;
	ОбновленныеproductItemUUID.Колонки.Добавить("СтарыйUUID");
	ОбновленныеproductItemUUID.Колонки.Добавить("АктуальныйUUID");
	ОбновленныеproductItemUUID.Колонки.Добавить("Наименование");
	
	КэшУчетныхЗаписей();
	
	ТаблицаproductItemUUID = ПолучитьТаблицу_productItemДляСкладскогоОстатка(ТаблицаОстатков.ВыгрузитьКолонку("productItemUUID"));
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		Если ЗначениеЗаполнено(СтрокаОстатков.productItemUUID) Тогда
			
			НайденоВКэшеОбновлений = ОбновленныеproductItemUUID.Найти(СтрокаОстатков.productItemUUID,"СтарыйUUID");
			Если НайденоВКэшеОбновлений<>Неопределено Тогда 
				СтрокаОстатков.productItemUUID = НайденоВКэшеОбновлений.АктуальныйUUID;
				Если ЗначениеЗаполнено(НайденоВКэшеОбновлений.Наименование) и Не ЗначениеЗаполнено(СтрокаОстатков.Наименование)Тогда
					СтрокаОстатков.Наименование = НайденоВКэшеОбновлений.Наименование;
				КонецЕсли;
			КонецЕсли;
			
			НайденнаяНоменклатура = ТаблицаproductItemUUID.Найти(СтрокаОстатков.productItemUUID,"productItemUUID");
			Если НайденнаяНоменклатура<>Неопределено Тогда 
				СтрокаОстатков.Номенклатура = НайденнаяНоменклатура.Номенклатура;
				СтрокаОстатков.Наименование = "";
			Иначе
				//возможно запись уже не та? - надо спросить и подменить UUID если это так
				//НО! требуется сделать это только если производитель - это наша площадка!
				Если ЗначениеЗаполнено(СтрокаОстатков.ProducerGUID) 
					И КэшУчетныхЗаписей().Найти(СтрокаОстатков.ProducerGUID,"ПлощадкаGUID")<>Неопределено Тогда //Это наша площадка
					//Сообщить("По продукту: "+СтрокаОстатков.productItemUUID+" устарел UUID, обновляю");
					РезультатОпределенияСвежегоUUID = ПолучитьСамуюСвежую_productItemUUID_ПоUUID(СтрокаОстатков.productItemUUID);
					Если РезультатОпределенияСвежегоUUID.Успешно Тогда
						
						НоваяСтрока = ОбновленныеproductItemUUID.Добавить();
						НоваяСтрока.СтарыйUUID = СтрокаОстатков.productItemUUID;
						НоваяСтрока.АктуальныйUUID = РезультатОпределенияСвежегоUUID.ПоследнийUUID;
						НоваяСтрока.Наименование = РезультатОпределенияСвежегоUUID.Наименование;
						
						СтрокаОстатков.productItemUUID = РезультатОпределенияСвежегоUUID.ПоследнийUUID;
						//и попробовать заново найти номенклатуру
						НайденнаяНоменклатура = ТаблицаproductItemUUID.Найти(СтрокаОстатков.productItemUUID,"productItemUUID");
						Если НайденнаяНоменклатура<>Неопределено Тогда 
							СтрокаОстатков.Номенклатура = НайденнаяНоменклатура.Номенклатура;
						КонецЕсли;
					Иначе
						//Сообщить("По продукту: "+СтрокаОстатков.productItemUUID+" не смог узнать свежий UUID");
					КонецЕсли;
				КонецЕсли;
				
				//Если у нас так и осталась незаполненной номенклатура - то поставим хотя бы наименование (это должно быть номенклатура чужой площадки)
				Если Не ЗначениеЗаполнено(СтрокаОстатков.Наименование) и НЕ ЗначениеЗаполнено(СтрокаОстатков.Номенклатура) Тогда
					НайденоВКэшеОбновлений = ОбновленныеproductItemUUID.Найти(СтрокаОстатков.productItemUUID,"СтарыйUUID");
					Если НайденоВКэшеОбновлений<>Неопределено Тогда 
						СтрокаОстатков.Наименование = НайденоВКэшеОбновлений.Наименование;
					Иначе
						РезультатОпределенияСвежегоUUID = ПолучитьСамуюСвежую_productItemUUID_ПоUUID(СтрокаОстатков.productItemUUID);
						Если РезультатОпределенияСвежегоUUID.Успешно Тогда
							СтрокаОстатков.Наименование = РезультатОпределенияСвежегоUUID.Наименование;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				//и в завершении - если мы нашли номенклатуру - то точно чистим наименование - так мы отделяем продукцию произведенную нами от не нашей
				Если ЗначениеЗаполнено(СтрокаОстатков.Наименование) и ЗначениеЗаполнено(СтрокаОстатков.Номенклатура) Тогда
					СтрокаОстатков.Наименование = "";
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьТранзакциюМеркурий(Сообщение,Параметры = Неопределено) Экспорт
	
	ТаблицаОшибок = ОсновнойМодуль.ИнициализироватьТаблицуОшибок();
	
	ОбязательныеПоля = ПолучитьОбязательныеПоляТранзакцииМеркурий(Сообщение);
	
	МетаданныеСообщения = ПолучитьМетаданныеСообщенияМеркурий(Сообщение.ТипСообщения, Сообщение.Направление);
	
	ПроверитьПоляТранзакцииМеркурий(Сообщение, МетаданныеСообщения, ТаблицаОшибок, "", , , ОбязательныеПоля);
	
	ВыполнитьСложныеПроверки(Сообщение, ТаблицаОшибок);
	
	//Результаты
	РезультатПроверки = Новый Структура();
	Если ТаблицаОшибок.Количество() = 0 Тогда
		РезультатПроверки.Вставить("Успешно",Истина);
	Иначе
		РезультатПроверки.Вставить("Успешно",Ложь);
		РезультатПроверки.Вставить("СписокОшибок",ТаблицаОшибок);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции


Функция ПолучитьОбязательныеПоляТранзакцииМеркурий(Сообщение) Экспорт
	
	ТаблицаОбязательныхПолей = Новый ТаблицаЗначений;
	ТаблицаОбязательныхПолей.Колонки.Добавить("ИмяПоля");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ИмяПоляУсловия");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ВидСравнения");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ЗначениеПоляУсловия");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ПравилоПроверки");
	
	ТаблицаОбязательныхПолей.Индексы.Добавить("ИмяПоля");
	
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ПлощадкаEDI.GUID");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ХозяйствующийСубъектEDI.GUID");
	
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ДокументEDI.Номер");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ДокументEDI.Дата");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ДатаОтгрузки");
	
	Если Сообщение.ТипСообщения = "M_DES" 
		ИЛИ Сообщение.ТипСообщения = "M_MOV" Тогда
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ПлощадкаПолучательEDI.GUID");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "ХозяйствующийСубъектПолучательEDI.GUID");
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_DES" 
		ИЛИ Сообщение.ТипСообщения = "M_MOV" 
		ИЛИ Сообщение.ТипСообщения = "M_REC" Тогда
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Транспорт.ВидТранспорта");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Транспорт.СпособХраненияПриПеревозке");
	КонецЕсли;
	
	//Таб части        
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.GUID");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.unitUUID");
	ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.Количество");
	
	Если Сообщение.ТипСообщения = "M_REC" Тогда
		//нам необходимо внести все сведения из всд вручную
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ДатаПроизводства");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.СрокГодности");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.СтранаUUID");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатДата");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатСерия");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатНомер");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатФорма");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатВрачФИО");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатВрачДолжность");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатБлагополучиеМестности");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ВетСертификатСпособХраненияПриПеревозке");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ПлощадкаПроизводитель");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ПлощадкаПроизводительGUID");
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ЦельEDI");
		
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_INC" Тогда
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.СтатусРасхождений");//переделать на документ
	КонецЕсли;
		
	Если Сообщение.ТипСообщения = "M_PRD" Тогда
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Сырье.GUID");
		Если ПолучитьКонстантуEDI("М_ИспользоватьНезавершенноеПроизводство")<>Истина Тогда
			ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Сырье.unitUUID");
			ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Сырье.Количество");
		КонецЕсли;
	КонецЕсли;
		
	Если Сообщение.ТипСообщения = "M_DES" 
		ИЛИ Сообщение.ТипСообщения = "M_MOV" Тогда
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Товары.ИсходнаяПартияGUID");
	ИначеЕсли Сообщение.ТипСообщения = "M_PRD" Тогда	
		ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей, "Сырье.ИсходнаяПартияGUID");
	КонецЕсли;
	
	Возврат ТаблицаОбязательныхПолей;
	
КонецФункции // ПолучитьОбязательныеПоляТранзакции(Сообщение()

Процедура ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей,Имя)

	ОсновнойМодуль.ДобавитьОбязательноеПоле(ТаблицаОбязательныхПолей,Имя);	

КонецПроцедуры

Процедура ВыполнитьСложныеПроверки(Сообщение, ТаблицаОшибок)

	Если Сообщение.ТипСообщения = "M_PRD"
		И Сообщение.Завершена = Ложь
		И (Не ЗначениеЗаполнено(Сообщение.ИдентификаторПроизводственнойТранзакции)) Тогда
		
		ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"","","","Не указан идентификатор производственной транзакции незавершенного производства!");
	КонецЕсли;
	
	Если Сообщение.ТипСообщения = "M_DES"
		И ЗначениеЗаполнено(Сообщение.Перевозчик1С) 
		И НЕ ЗначениеЗаполнено(Сообщение.ПеревозчикEDI.GUID) Тогда
		
		ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"","","","Не сопоставлена с Меркурием фирма - перевозчик");
	КонецЕсли;
	
	//Ааавтомобиль //или ЖД или авиа или судно
	Если Сообщение.ТипСообщения = "M_DES" 
		ИЛИ Сообщение.ТипСообщения = "M_MOV"
		ИЛИ Сообщение.ТипСообщения = "M_REC" Тогда
		Если Не ЗначениеЗаполнено(Сообщение.Транспорт.НомерАвиарейса)
			И Не ЗначениеЗаполнено(Сообщение.Транспорт.НомерВагона)
			И Не ЗначениеЗаполнено(Сообщение.Транспорт.НомерКонтейнера)
			И Не ЗначениеЗаполнено(Сообщение.Транспорт.НомерТранспортногоСредства)
			Тогда
			ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,"","","","Укажите хотя бы один из идентификаторов транспорта. (номер а/м, вагона итд.)");
		КонецЕсли;
	КонецЕсли;
	
	//ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,"Неверная структура сообщения! Отстутствует поле "+ПолныйПутьКПолю+"!",Истина);
	
КонецПроцедуры


Процедура ПроверитьПоляТранзакцииМеркурий(Сообщение, МетаданныеСообщения, ТаблицаОшибок, ТекПутьКПолю, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, ОбязательныеПоля) Экспорт
	
	Если МетаданныеСообщения.Колонки.Найти("Принадлежность") = Неопределено Тогда
		ЕстьПринадлежность = Ложь;
	Иначе
		ЕстьПринадлежность = Истина;
	КонецЕсли;
	
	Для Каждого Стр Из МетаданныеСообщения Цикл
		
		// алкогольные реквизиты не валидируем!
		
		Если ЕстьПринадлежность Тогда
			
			Если Стр.Принадлежность = "=" Тогда
				ПутьКПолю = Стр.ИмяПоля;
			ИначеЕсли Стр.Принадлежность = "EDI" Тогда
				ПутьКПолю = Стр.ИмяПоля;
			ИначеЕсли Стр.Принадлежность = Неопределено Тогда
				ПутьКПолю = Стр.ИмяПоля + "EDI";
			Иначе 
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			ПутьКПолю = Стр.ИмяПоля;
			
		КонецЕсли;
		
		ПолныйПутьКПолю = ПутьКПолю;
		Если НЕ ТекПутьКПолю = "" Тогда
			
			ПолныйПутьКПолю = ТекПутьКПолю+"."+ПутьКПолю;
			
		КонецЕсли;
		
		ЗначениеПоля = Неопределено;
		
		Если ТипЗнч(Сообщение) = Тип("Структура") Тогда
			
			Если (НЕ ЗначениеЗаполнено(Стр.ИмяТаблицы) И НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти)) ИЛИ Стр.ТипEDI = "ТабличнаяЧасть" Тогда
				Если НЕ Сообщение.Свойство(ПутьКПолю,ЗначениеПоля) Тогда
					
					ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,"Неверная структура сообщения! Отстутствует поле "+ПолныйПутьКПолю+"!",Истина);
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Попытка
				ЗначениеПоля = Сообщение[ПутьКПолю];
			Исключение
				ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,"Неверная структура сообщения! Отстутствует поле "+ПолныйПутьКПолю+"!",Истина);
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
		Если Стр.ТипEDI = "ТабличнаяЧасть" Тогда
			
			// копируем метаданные сообщения по этой таблице
			ОтборПолейТаблицы = Новый Структура("ИмяТаблицы",Стр.ИмяТаблицы);
			
			МетаданныеТабличнойЧасти = МетаданныеСообщения.Скопировать(ОтборПолейТаблицы);
			
			НайденнаяСтрока = МетаданныеТабличнойЧасти.Найти(Стр.ИмяТаблицы,"ИмяПоля");
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				МетаданныеТабличнойЧасти.Удалить(НайденнаяСтрока);
			КонецЕсли;
			
			НайденнаяСтрока = ОбязательныеПоля.Найти(ПолныйПутьКПолю,"ИмяПоля");
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Если Сообщение[Стр.ИмяТаблицы].Количество() = 0 Тогда
					ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,Стр.ИмяТаблицы,0,"Табличная часть """+Стр.ИмяТаблицы+""" должна быть заполнена!");
				КонецЕсли;
			КонецЕсли;
			
			НомерСтрокиТаблицы = 0;
			
			Для каждого СтрокаТаблицы ИЗ Сообщение[Стр.ИмяТаблицы] Цикл
				
				НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;
				
				ОсновнойМодуль.ПроверитьПоляСообщенияEDI(СтрокаТаблицы, МетаданныеТабличнойЧасти, ТаблицаОшибок, ПолныйПутьКПолю, Стр.ИмяТаблицы, НомерСтрокиТаблицы, ОбязательныеПоля);
				
				
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ИмяТабличнойЧасти) И ЗначениеЗаполнено(Стр.ИмяТаблицы) Тогда
			
			Продолжить;
			
		ИначеЕсли Стр.ТипEDI = "Структура" Тогда
			
			Если ТипЗнч(ЗначениеПоля) = Тип("Структура") Тогда
				
				ТаблицаОшибокПоля	= ОсновнойМодуль.ИнициализироватьТаблицуОшибок();
				СтруктураСообщения	= ОсновнойМодуль.ПолучитьМетаданныеПоляСообщения(Стр.ВидСтруктурыEDI);
				
				// рекурсивно проверим вложенные структуры
				ПроверитьПоляТранзакцииМеркурий(ЗначениеПоля, СтруктураСообщения, ТаблицаОшибокПоля, ПолныйПутьКПолю,ИмяТабличнойЧасти,НомерСтроки, ОбязательныеПоля);
				
				Если ТаблицаОшибокПоля.Количество()>0 Тогда
					Для Каждого ОшибкаПоля Из ТаблицаОшибокПоля Цикл
						ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,Стр.ИмяПоля + ": " + ОшибкаПоля.СведенияОбОшибках);
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,"Неверная структура сообщения! Поле "+ПолныйПутьКПолю+" должно иметь тип ""Структура""!",Истина);
				
			КонецЕсли;
			
		Иначе
			
			// проверяем заполнение обязательного поля
			
			ТипEDI = Стр.ТипEDI;
			ПроверятьЗаполнениеПоля = Ложь;
			
			НайденныеСтроки = ОбязательныеПоля.НайтиСтроки(Новый Структура("ИмяПоля",ПолныйПутьКПолю));
			
			Для Каждого ПроверкаОбязательности Из НайденныеСтроки Цикл
				
				ПроверятьЗаполнениеПоля = Истина;
				
				УсловиеОбязательности = ПроверкаОбязательности.ИмяПоляУсловия;
				
				Если НЕ УсловиеОбязательности = Неопределено Тогда
					
					ПроверятьЗаполнениеПоля = Ложь;
					
					Если ПроверкаОбязательности.ВидСравнения = "равно" Тогда
						Если Сообщение[ПроверкаОбязательности.ИмяПоляУсловия] = ПроверкаОбязательности.ЗначениеПоляУсловия Тогда
							
							Если НЕ ПроверкаОбязательности.ПравилоПроверки = Неопределено Тогда
								
								ТипEDI = ПроверкаОбязательности.ПравилоПроверки;
								
							КонецЕсли;
							
							ПроверятьЗаполнениеПоля = Истина;
							
							Прервать;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПроверятьЗаполнениеПоля Тогда
				Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
					
					СообщениеОбОшибке = ДополнитьСообщениеОбОшибке(ТекПутьКПолю,ПутьКПолю);
					ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,СообщениеОбОшибке,Истина);
					
					Продолжить;
					
				КонецЕсли;
			КонецЕсли;
			
			// проверяем значение
			
			РезультатПроверки = ПроверитьЗначениеМеркурий(ЗначениеПоля, ТипEDI);
			
			Если НЕ РезультатПроверки.Успешно Тогда
				Для Каждого СтрокаОшибки Из РезультатПроверки.ТаблицаОшибок Цикл
					
					ОсновнойМодуль.ЗафиксироватьОшибку(ТаблицаОшибок,ПутьКПолю,ИмяТабличнойЧасти,НомерСтроки,СтрокаОшибки);
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДополнитьСообщениеОбОшибке(ТекПутьКПолю,ПутьКПолю) //клон из Основного модуля, однако будет развиваться отдельно от Основного
	
	Если Найти(ТекПутьКПолю, "ГрузоотправительEDI")>0 И СокрЛП(ПутьКПолю) = "Регион" Тогда
		СообщениеОбОшибке = "Не заполнено поле Регион в Фактическом адресе";
	ИначеЕсли Найти(ТекПутьКПолю, "ПродавецEDI")>0 И СокрЛП(ПутьКПолю) = "Регион" Тогда
		СообщениеОбОшибке = "Не заполнено поле Регион в Юридическом адресе";
	ИначеЕсли Найти(ТекПутьКПолю, "ПокупательEDI")>0 И СокрЛП(ПутьКПолю) = "Регион" Тогда
		СообщениеОбОшибке = "Не заполнено поле Регион в Юридическом адресе";	
	Иначе
		СообщениеОбОшибке = "Не заполнено обязательное поле "+ПутьКПолю+"!";
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;	

КонецФункции

Функция ПолучитьНастройкуВыводаСсылокНаОбъектыМеркурий() Экспорт
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("ИмяПоля");
	ТаблицаНастроек.Колонки.Добавить("ТипСсылки");
	ТаблицаНастроек.Колонки.Добавить("ТекстСсылки");
	
	ТаблицаНастроек.Индексы.Добавить("ИмяПоля");
	
	//Будь мужиком, напиши кусок!
	
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Покупатель1С",			"КарточкаКонтрагента",  "Установить соответствие");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Продавец1С",			"КарточкаКонтрагента",  "Установить соответствие");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Грузоотправитель1С",	"КарточкаКонтрагента",  "Установить соответствие");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Грузополучатель1С",		"КарточкаКонтрагента",  "Установить соответствие");
	//	
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "ПокупательEDI",			"КарточкаКонтрагента",  "Открыть карточку организации");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "ПродавецEDI",			"КарточкаКонтрагента",  "Открыть карточку продавца");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "ГрузоотправительEDI",	"КарточкаКонтрагента",  "Открыть карточку грузоотправителя");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "ГрузополучательEDI",	"КарточкаКонтрагента",  "Открыть карточку грузополучателя");
	//
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "СтавкаНДСEDI",			"Документ1С", 		    "Открыть документ");
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "Комментарий",			"Документ1С", 		    "Открыть документ");
	//
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "GTIN",                  "НоменклатураСсылка",   "Заполнить штрихкод");
	//
	//ДобавитьНастройкуВыводаСсылки(ТаблицаНастроек, "СтатусДиадок",			"ДокументДиадок", 		"Открыть документ");
		
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ПроверитьЗначениеМеркурий(Значение, Тип)
	
	Результат = Новый Структура("Успешно",Истина);//тоже можно кэшировать, наверное
	//таблицу ошибок будем добавлять только тогда, когда будут сами ошибки
	
	// т.к. в этой функции мы проверяем само значение, а не его наличие, то возвращаем "Успешно" в случае переданного пустого значения
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Значение);
	
	//врата ORDRSP
	если ТипЗначения = Тип("СписокЗначений") тогда 
		Возврат Результат;
	конецесли;
//	
	Если НЕ ТипЗначения = Тип("Строка") И НЕ ТипЗначения = Тип("Число") И НЕ ТипЗначения = Тип("Булево") И НЕ ТипЗначения = Тип("Дата") Тогда
		
		Результат.Вставить("ТаблицаОшибок",Новый Массив);//так быстрее
		Результат.ТаблицаОшибок.Добавить("Значение должно иметь один из примитивных типов: ""Строка"", ""Число"", ""Булево"", ""Дата"" вместо """+ТипЗначения+""".");
		Результат.Успешно = Ложь;
		Возврат Результат;
		
	КонецЕсли;
	
	// Классификаторы и свои справочники
	
	Если	Тип = "Валюта" 
		ИЛИ Тип = "КодРегиона" 
		ИЛИ Тип = "КодСтраны" 
		ИЛИ Тип = "КодЕдиницы"
		ИЛИ Тип = "Статус"
		ИЛИ Тип = "СтавкаНДС"
		ИЛИ Тип = "ТипСообщения"
		ИЛИ Тип = "Направление"
		ИЛИ Тип = "ТипСФ"
		ИЛИ Тип = "ВидЮрФизЛица"
		ИЛИ Тип = "ВидАдреса" Тогда
		
		//Если СписокДопустимыхСодержитЗначение(Значение,Тип) Тогда
		//	
		//	Возврат Результат;
		//	
		//Иначе
		//	
		//	Если Тип = "Валюта" Тогда
		//		КодОшибки = "Стандарт";
		//		ФорматЗначения = "ISO-4217 (3-alpha)";
		//	ИначеЕсли Тип = "КодРегиона" Тогда	
		//		КодОшибки = "Стандарт";
		//		ФорматЗначения = "ISO 3166-2";
		//	ИначеЕсли Тип = "КодСтраны" Тогда
		//		КодОшибки = "Стандарт";
		//		ФорматЗначения = "ISO 3166";
		//	ИначеЕсли Тип = "КодЕдиницы" Тогда
		//		КодОшибки = "ЕдИзм";
		//	Иначе
		//		КодОшибки = "НеВСписке";
		//		ФорматЗначения = ПолучитьДопустимыеЗначенияСтрокой(Тип);
		//	КонецЕсли;
		//		
		//	Результат.Успешно = Ложь;
		//	Результат.Вставить("ТаблицаОшибок",Новый Массив);//так быстрее
		//	Результат.ТаблицаОшибок.Добавить(ПолучитьТекстОшибки(Значение,КодОшибки,ФорматЗначения));
		//	
		//КонецЕсли;
		
	ИначеЕсли Тип = "GLN" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 13, Результат);
		
	ИначеЕсли Тип = "GUID"  Тогда	
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноСимволов", 36, Результат);
		
	ИначеЕсли Тип = "ИНН_ЮЛ" Тогда	
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "ИНН", 		"",	 Результат);
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 10, Результат);
		
	ИначеЕсли Тип = "ИНН_ФЛ" Тогда	
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "ИНН", 		"",	 Результат);
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 12, Результат);
		
	ИначеЕсли Тип = "КПП" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 9, Результат);
		
	ИначеЕсли Тип = "БИК" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 9, Результат);
		
	ИначеЕсли Тип = "НомерСчета" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "НеБольшеЦифр", 20, Результат);
		
	ИначеЕсли Тип = "НомерДокумента" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "НеБольшеСимволов", 70, Результат);
		
	ИначеЕсли Тип = "Артикул" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "НеБольшеСимволов", 35, Результат);
		
	ИначеЕсли Тип = "НомерГТД" Тогда
		
		Стр = СтрЗаменить(Значение," ","");
		Стр = СтрЗаменить(Стр,"\","");
		Стр = СтрЗаменить(Стр,"/","");
		
		Если СтрДлина(Стр)>70 Тогда
			Результат.Успешно = Ложь;
			Результат.Вставить("ТаблицаОшибок",Новый Массив);//так быстрее
			Результат.ТаблицаОшибок.Добавить("Номер ГТД не может быть длиннее 70 символов");
		КонецЕсли;
		
	ИначеЕсли Тип = "Индекс" Тогда
		
		ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "РовноЦифр", 6, Результат);
		
	ИначеЕсли Лев(Тип,6) = "Строка" Тогда
		
		Если НЕ Тип = "Строка" Тогда
			
			ЧислоСимволов = Число(СтрЗаменить(Тип,"Строка",""));
			ОсновнойМодуль.ПроверитьЗначениеПоШаблону(Значение, "НеБольшеСимволов", ЧислоСимволов, Результат);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиДопРеквизитыКарточкиСообщенияМеркурий(Сообщение,ДополнительныеРеквизиты) Экспорт
	
	ДополнительныеРеквизиты.Очистить();
	
	Если Сообщение.ТипСообщения = "M_DES" ИЛИ Сообщение.ТипСообщения = "M_MOV" Тогда
		ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"Цель1С",Сообщение.Цель1С);
		ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"БлагополучиеМестности",Сообщение.БлагополучиеМестности);
		ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"РазрешениеНаВывозНомер",Сообщение.РазрешениеНаВывозНомер);
		ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"РазрешениеНаВывозДата",Сообщение.РазрешениеНаВывозДата);
		ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"ВетСертификатОсобыеОтметки",Сообщение.ВетСертификатОсобыеОтметки);
	КонецЕсли;
	
	Если (Сообщение.ТипСообщения = "M_PRD" И Сообщение.Завершена = Ложь)
		ИЛИ (Сообщение.ТипСообщения = "M_PRD" И Сообщение.Завершена = Истина И ЗначениеЗаполнено(Сообщение.ИдентификаторПроизводственнойТранзакции)) Тогда
		ВывестиДопРеквизитМеркурий(ДополнительныеРеквизиты,"ИдентификаторПроизводственнойТранзакции",Сообщение.ИдентификаторПроизводственнойТранзакции);
	КонецЕсли;
	//бросить ПМ
	
КонецПроцедуры

Процедура ПрисвоитьДопРеквизитыВСообщение(Сообщение,ДополнительныеРеквизиты) Экспорт

	Для Каждого СтрокаРеквизита Из ДополнительныеРеквизиты Цикл
		
		Если ЗначениеЗаполнено(СтрокаРеквизита.Значение) И
			ЗначениеЗаполнено(СтрокаРеквизита.Реквизит) Тогда
			Попытка
			
			   Выполнить("Сообщение."+СтрокаРеквизита.Реквизит+" = СтрокаРеквизита.Значение");
			
		   Исключение
			   
		   КонецПопытки;
	   КонецЕсли;
	   
   КонецЦикла;
   
   
   
КонецПроцедуры


Процедура ВывестиДопРеквизитМеркурий(Таблица,ИмяРеквизита,ЗначениеРеквизита) //в таблицу на форме (УФ или ОФ)
   
   НоваяСтрока = Таблица.Добавить();
   НоваяСтрока.Реквизит = ИмяРеквизита;
   НоваяСтрока.Значение = ЗначениеРеквизита;
   
КонецПроцедуры

Функция ПолучитьОбязательныеПоляТранзакцииМеркурийДляКарточкиСообщения(ТипСообщения,Направление) Экспорт
	
	ТаблицаПолей = Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ИмяПоля");
	ТаблицаПолей.Колонки.Добавить("ИмяТабличнойЧасти");
	
	//ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Продавец1С");
	//ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Покупатель1С");
	
	Если ТипСообщения = "M_DES"
		ИЛИ ТипСообщения = "M_MOV" Тогда
		
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"ИсходнаяПартияGUID",		"Товары");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"unitUUID",					"Товары");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"guid",						"Товары");
		
	ИначеЕсли ТипСообщения = "M_PRD" Тогда
		
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"unitUUID",					"Товары");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"guid",						"Товары");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"ИсходнаяПартияGUID",		"Сырье");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"unitUUID",					"Сырье");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"guid",						"Сырье");
		ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Количество",				"Сырье");
		
	КонецЕсли;
	
	ОсновнойМодуль.ДобавитьОбязательноеПолеСообщения(ТаблицаПолей,	"Количество",				"Товары");
	
	Возврат ТаблицаПолей;
	
КонецФункции

Функция КонвертироватьТранзакциюМеркурий_В_1С(Сообщение) Экспорт

	Если Сообщение.Направление <> "Входящее" Тогда
		ВызватьИсключение "Метод вызывается только для входящих сообщений";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.Партнер) Тогда
		Сообщение.Партнер = ПартнерМеркурий();
	КонецЕсли;
	
	КонвертироватьШапкуТранзакцииМеркурийв1С(Сообщение);
	КонвертироватьТабличнуюЧастьТранзакцииМеркурийв1С(Сообщение,"Товары");
	
	СтандартнаяОбработкаEDI = Истина;
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ПослеКонвертацииСообщенияEDIв1С",СтандартнаяОбработкаEDI,
			Новый Структура("Сообщение",
			Сообщение));
			
	Если РезультатПМ <> Неопределено Тогда
		Сообщение = РезультатПМ;
	КонецЕсли;

КонецФункции // КонвертироватьТранзакциюМеркурий_В_1С(Сообщение)()

Функция КонвертироватьШапкуТранзакцииМеркурийв1С(Сообщение) Экспорт

	Сообщение.ХозяйствующийСубъект1С 				= КонвертироватьЗначениеМеркурийв1C(Сообщение.ХозяйствующийСубъектEDI.GUID,,"МеркурийХС");		
	Если Сообщение.Свойство("ХозяйствующийСубъектПолучательEDI") ТОгда
		Сообщение.ХозяйствующийСубъектПолучатель1С 	= КонвертироватьЗначениеМеркурийв1C(Сообщение.ХозяйствующийСубъектПолучательEDI.GUID,,"МеркурийХС");		
	КонецЕсли;
	
	//Площадки
	Сообщение.Площадка1С 							= КонвертироватьЗначениеМеркурийв1C(Сообщение.ПлощадкаEDI.GUID,,"МеркурийПлощадка");
	Если Сообщение.Свойство("ПлощадкаПолучательEDI") ТОгда
		Сообщение.ПлощадкаПолучатель1С 				= КонвертироватьЗначениеМеркурийв1C(Сообщение.ПлощадкаПолучательEDI.GUID,,"МеркурийПлощадка");
	КонецЕсли;
	
	Сообщение.Цель1С = КонвертироватьЗначениеМеркурийв1C(Сообщение.ЦельEDI.GUID,,"МеркурийЦель");//"5b91af60-e089-11e1-bcf3-b499babae7ea"; //Заглушка
	Если Не ЗначениеЗаполнено(Сообщение.ДатаОтгрузки) И ЗначениеЗаполнено(Сообщение.ДатаПоставки) Тогда
		Сообщение.ДатаОтгрузки = Сообщение.ДатаПоставки;
	КонецЕсли;
	
	//Сообщение.Документ1С = Надо пробовать искать приходную накладную как-то по этим waybiilNumber и waybillDate ДокументEDI.Номер  ДокументEDI.Дата

КонецФункции // (Сообщение)()

Функция КонвертироватьЗначениеМеркурийв1C(Значение, Тип1С =  Неопределено, ТипМеркурий, Сообщение =  Неопределено) Экспорт

	
	СтандартнаяОбработкаEDI = Истина;
	
	РезультатКонвертации = ОбработкаСобытияПодключаемогоМодуля("КонвертироватьЗначениеМеркурийв1C",СтандартнаяОбработкаEDI,
			Новый Структура("ЗначениеEDI,ТипПоляEDI,ТипПоля1C,Сообщение",
			Значение, ТипМеркурий, Тип1С, Сообщение));

	Если Не СтандартнаяОбработкаEDI Тогда
		Возврат РезультатКонвертации;
	КонецЕсли;
	
	Если ТипМеркурий = "МеркурийХС" Тогда
		
		Возврат ПреобразоватьЮрФизЛицоПлощадку_Меркурий_в_1С(Значение,ТипМеркурий);
		
	ИначеЕсли ТипМеркурий = "МеркурийПлощадка" Тогда
		
		Возврат ПреобразоватьЮрФизЛицоПлощадку_Меркурий_в_1С(Значение,ТипМеркурий);
		
	ИначеЕсли ТипМеркурий = "МеркурийЦель" Тогда
		
		Возврат ПреобразоватьЦель_Меркурий_в_1С(Значение,ТипМеркурий);
		
	КонецЕсли;
	
КонецФункции // КонвертироватьЗначениеМеркурийв1C()

Функция ПреобразоватьЮрФизЛицоПлощадку_Меркурий_в_1С(GUID,ТипМеркурий)
    
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
               |ПОМЕСТИТЬ ВТ_ЭлементыДопСправочника
               |ИЗ
               |	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
               |ГДЕ
               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ИмяСправочника
               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""GUID""
               |	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = &GUID
               |	И НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ПометкаУдаления
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение
               |ИЗ
               |	ВТ_ЭлементыДопСправочника КАК ВТ_ЭлементыДопСправочника
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
               |		ПО ВТ_ЭлементыДопСправочника.Ссылка = КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
               |			И (КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""Объект"")
               |ГДЕ
               |	НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение ЕСТЬ NULL ";

Запрос.УстановитьПараметр("GUID",GUID);
Запрос.УстановитьПараметр("ИмяСправочника",ТипМеркурий);

Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();

Если Выборка.Следующий() Тогда
	
	Возврат Выборка.Значение;
Иначе
	Возврат Неопределено;
	
КонецЕсли;

КонецФункции //

Функция ПреобразоватьЦель_Меркурий_в_1С(GUID,ТипМеркурий)

	Если ЗначениеЗаполнено(GUID) Тогда
		
		Классификатор = ПолучитьКлассификаторЦелейМеркурий();
		НайденноеЗначение = Классификатор.Найти(GUID,"GUID");
		Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
			Возврат НайденноеЗначение.Наименование;
		Иначе
			Возврат "";
		Конецесли;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции // 


Функция КонвертироватьТабличнуюЧастьТранзакцииМеркурийв1С(Сообщение,ИмяТабличнойЧасти = "Товары")
	//конвертируем:
	//страну
	//производителя
	//единицу измерения
	//номенклатуру
	
	//если есть то упаковку
	
	ТабличнаяЧастьСообщения = Сообщение[ИмяТабличнойЧасти];
	
	ТаблицаТоваров = ТабличнаяЧастьСообщения.Скопировать(,"GTIN, GUID");
	ТаблицаТоваров.Колонки.GUID.Имя = "GUID";
	
	ТаблицаСоответствий = КонвертироватьТоварыМеркурийв1С(ТаблицаТоваров,Сообщение); // передаем сообщения, т.к. поиск номенклатуры может зависеть от полей шапки (контрагента, договора и проч.)
	
	ТаблицаСоответствийЕдиницИзмерения = ПолучитьТаблицуСоответствийЕдиницИзмеренияМеркурий();
	ТаблицаСоответствийЕдиницИзмеренияУпаковок = ПолучитьСоответствияВсехЕдиницИзмеренияУпаковокМеркурий();
	
	ТабличнаяЧастьСообщения.Индексы.Добавить("GTIN, GUID");
	
	Для Каждого Стр Из ТаблицаСоответствий Цикл
		
		Если ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("GTIN",				Стр.GTIN);
			СтруктураОтбора.Вставить("GUID",				Стр.КодТовараСторонний);
			
			НайденныеСтроки = ТабличнаяЧастьСообщения.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаТоваров Из НайденныеСтроки Цикл
				
				СтрокаТоваров.Номенклатура					= Стр.Номенклатура;
			КонецЦикла;		
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТоваров Из ТабличнаяЧастьСообщения Цикл
		
		НайденнаяЕИ = ТаблицаСоответствийЕдиницИзмерения.Найти(СтрокаТоваров.unitUUID,"UUID");
		Если ЗначениеЗаполнено(НайденнаяЕИ) Тогда
			СтрокаТоваров.ЕдиницаИзмерения          = НайденнаяЕИ.Соответствие; 
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТоваров.ЕдиницаИзмеренияУпаковокUUID) Тогда
			НайденнаяЕИУп = ТаблицаСоответствийЕдиницИзмеренияУпаковок.Найти(СтрокаТоваров.ЕдиницаИзмеренияУпаковокUUID,"UUID");
			Если ЗначениеЗаполнено(НайденнаяЕИУп) Тогда
				СтрокаТоваров.ЕдиницаИзмеренияУпаковок  = НайденнаяЕИУп.Соответствие;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТоваров.Страна						= ПреобразоватьСтрану_Меркурий_в_1С(СтрокаТоваров.СтранаUUID);
		
		СтрокаТоваров.Цель1С						= ПреобразоватьЦель_Меркурий_в_1С(СтрокаТоваров.ЦельEDI,"МеркурийЦель");
		
		СтрокаТоваров.ПлощадкаПроизводитель			= ПреобразоватьЮрФизЛицоПлощадку_Меркурий_в_1С(СтрокаТоваров.ПлощадкаПроизводительGUID,"МеркурийПлощадка");
		
	КонецЦикла;
	
	
	
	
КонецФункции // КонвертироватьТабличнуюЧастьТранзакцииМеркурийв1С(Сообщение,"Товары")()

Функция ПреобразоватьСтрану_Меркурий_в_1С(СтранаUUID)
	
	//на рефакторинг - приделать соответствия прямо в классификатор!!!
	текКлассификатор = ПолучитьКлассификаторСтранМеркурий();
	НайденныйЭлементСправочника = неопределено;
	Попытка	
		Если текКлассификатор<>неопределено Тогда
			НайденныйЭлементКлассификатора = текКлассификатор.Найти(СтранаUUID,"UUID");
			текМенеджерСправочника = Справочники[ОсновнойМодуль.ПолучитьТипЗначенияОбъекта("МеркурийСтраныМира",Истина,Истина)];
			НайденныйЭлементСправочника = текМенеджерСправочника.НайтиПоРеквизиту("НаименованиеПолное",НайденныйЭлементКлассификатора.Наименование);
			Если ЗначениеЗаполнено(НайденныйЭлементСправочника) Тогда 
				Возврат НайденныйЭлементСправочника;
			Иначе
				НайденныйЭлементСправочника = текМенеджерСправочника.НайтиПоРеквизиту("КодАльфа2",НайденныйЭлементКлассификатора.Код);
				Если ЗначениеЗаполнено(НайденныйЭлементСправочника) Тогда 
					Возврат НайденныйЭлементСправочника;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(НайденныйЭлементСправочника) Тогда 
		Возврат ОсновнойМодуль.ПолучитьПустуюСсылкуОбъекта("МеркурийСтраныМира");
	КонецЕсли;
	
КонецФункции // ПреобразоватьСтрану_Меркурий_в_1С()


Функция КонвертироватьТоварыМеркурийв1С(Знач ТаблицаТоваров, Сообщение)
	
	
	ТаблицаТоваров.Колонки.Добавить("КодТовараСторонний",Новый ОписаниеТипов("Строка", ,
													Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	Для Каждого Стр Из ТаблицаТоваров Цикл
		Стр.КодТовараСторонний = Стр.GUID;
	КонецЦикла;
	ТаблицаТоваров.Колонки.Удалить("GUID");
	ТекстЗапросаПоРегиструСоответствий = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.GTIN,
	|	Таб.КодТовараСторонний КАК КодТовараСторонний,
	|	"""" КАК КодЕдиницыИзмеренияEDI,
	|	"""" КАК КодТовараСвой,
	|	"""" КАК КодТовараСвойЧисло
	|ПОМЕСТИТЬ ТабТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабТоваров.GTIN КАК GTIN,
	|	ТабТоваров.КодТовараСторонний КАК КодТовараСторонний,
	|	ТабТоваров.КодТовараСвой КАК КодТовараСвой,
	|	ТабТоваров.КодЕдиницыИзмеренияEDI КАК КодЕдиницыИзмеренияEDI,
	|	КонтурEDI_СоответствияТоваров.Номенклатура,
	|	КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры,
	|	КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
	|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С
	|ПОМЕСТИТЬ ТабСоответствий_КонтурEDI
	|ИЗ
	|	ТабТоваров КАК ТабТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	|		ПО (КонтурEDI_СоответствияТоваров.Партнер = &Партнер)
	|			И (ВЫБОР
	|				КОГДА &СинхронизироватьТоварыТолькоПоGTIN
	|						И ТабТоваров.GTIN <> """"
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТабТоваров.КодТовараСторонний = КонтурEDI_СоответствияТоваров.КодТовараПартнера
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА &СинхронизироватьТоварыТолькоПоКодуПартнера
	|						И ТабТоваров.КодТовараСторонний <> """"
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТабТоваров.GTIN = КонтурEDI_СоответствияТоваров.GTIN
	|						ИЛИ ТабТоваров.GTIN = """"
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &БратьОсновноеСоответствие
	|				ТОГДА КонтурEDI_СоответствияТоваров.ОсновноеСоответствие
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	GTIN,
	|	КодТовараСторонний,
	|	КодТовараСвой";
	
	//Теперь вторая часть запроса
	ТекстЗапросаПоШтрихкодам = "";
	
		//здесь не ищем штрихкоды, что нашли в регистре "КонтурEDI_СоответствияТоваров", то и выкатим
		ТекстЗапросаПоШтрихкодам = 
		"ВЫБРАТЬ
		|	ТаблицаТоваровИсходная.GTIN,
		|	ТаблицаТоваровИсходная.КодТовараСвой,
		|	ТаблицаТоваровИсходная.КодТовараСторонний,
		|	ТаблицаТоваровИсходная.КодЕдиницыИзмеренияEDI,
		|	ТаблицаСоответствий.Номенклатура,
		|	ТаблицаСоответствий.ХарактеристикаНоменклатуры,
		|	ТаблицаСоответствий.ЕдиницаИзмерения,
		|	ТаблицаСоответствий.КоэффициентEDIВ1С
		|ИЗ
		|	ТабТоваров КАК ТаблицаТоваровИсходная
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабСоответствий_КонтурEDI КАК ТаблицаСоответствий
		|		ПО ТаблицаТоваровИсходная.КодТовараСторонний = ТаблицаСоответствий.КодТовараСторонний"
		;
		
	ЗапросПоСоответствиям = ОсновнойМодуль.ИнициализироватьЗапрос_КонтурEDI(ВнешнееХранилище);
	
	ПартнерСообщения = Сообщение.ХозяйствующийСубъект1С;
	
	СинхронизироватьТоварыТолькоПоGTIN = 			(ОсновнойМодуль.ПолучитьЗначениеСвойстваОбъектаEDI(ПартнерСообщения, "СинхронизироватьТоварыТолькоПоGTIN") = Истина);
	СинхронизироватьТоварыТолькоПоКодуПартнера = 	(ОсновнойМодуль.ПолучитьЗначениеСвойстваОбъектаEDI(ПартнерСообщения, "СинхронизироватьТоварыТолькоПоКодуПартнера") = Истина);
	ЗапросПоСоответствиям.УстановитьПараметр("СинхронизироватьТоварыТолькоПоGTIN",			СинхронизироватьТоварыТолькоПоGTIN);
	ЗапросПоСоответствиям.УстановитьПараметр("СинхронизироватьТоварыТолькоПоКодуПартнера",	СинхронизироватьТоварыТолькоПоКодуПартнера);
	
	ЗапросПоСоответствиям.УстановитьПараметр("Партнер",ПартнерСообщения);
	ЗапросПоСоответствиям.УстановитьПараметр("ТаблицаТоваров",?(ВнешнееХранилище,ОсновнойМодуль.ПоместитьТаблицуВоВнешнююБазу(ТаблицаТоваров),ТаблицаТоваров));			   
	ЗапросПоСоответствиям.УстановитьПараметр("БратьОсновноеСоответствие",истина);//если мы - поставщик, то берем только основное соответствие
	
	ЗапросПоСоответствиям.Текст = ТекстЗапросаПоРегиструСоответствий;
	
	//событие, позволяющее переопределить конвертацию EDI в 1С
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимРаботы",	"Поставщик");
	ДополнительныеПараметры.Вставить("Сообщение",	Сообщение);
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьЗапросКонвертацииТоваровМеркурийв1С",,
		Новый Структура("Запрос,ДополнительныеПараметры",
			ЗапросПоСоответствиям,ДополнительныеПараметры));
			
	Если РезультатПМ <> Неопределено Тогда
		ЗапросПоСоответствиям = РезультатПМ;
	КонецЕсли;
	
	ЗапросПоСоответствиям.Выполнить();//создали  врем.таблицу "ТабСоответствий_КонтурEDI"
	
	
	ЗапросПоСоответствиям.Текст = ТекстЗапросаПоШтрихкодам;
	
	ТЗ = ЗапросПоСоответствиям.Выполнить().Выгрузить();
	
	//Для отладки: ВремТабДляПросмотра = ПросмотретьВременнуюТаблицуЗапроса(ЗапросПоСоответствиям,"ТабТоваров")//"ТабСоответствий_КонтурEDI", "ВТ_НайденныеСоответствия"
	
	ЗапросПоСоответствиям = Неопределено;
	
	Возврат ТЗ;
	

КонецФункции // КонвертироватьТоварыМеркурийв1С()

Функция ПолучитьТаблицуСоответствийДляТоваров1СМеркурий(ТаблицаТоваров, ВладелецСпискаТоваров, ИскатьТоварПоШК =  Ложь) Экспорт
	//Отличие от EDI только в том что конвертируем мы без учета единицы измерения.
	
	ЗапросКонвертацииТоваров1СвEDI = ОсновнойМодуль.ИнициализироватьЗапрос_КонтурEDI(Ложь);
	ЗапросКонвертацииТоваров1СвEDI.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	ЗапросКонвертацииТоваров1СвEDI.УстановитьПараметр("ИскатьТоварПоШК",ИскатьТоварПоШК);
	
	//1. Передадим ТаблицаТоваров в параметры запроса и закинем во временную таблицу "ТабТоваров". Попутно протянем в поле "КодТовараСвой" код товара из справочника "Номенклатура" или его местного аналога.
	
	ЗапросКонвертацииТоваров1СвEDI.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.Номенклатура КАК Номенклатура,
	|	Таб.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Таб.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ _ТабТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК Таб
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	_ТабТоваров.Номенклатура,
	|	_ТабТоваров.ХарактеристикаНоменклатуры,
	|	_ТабТоваров.ЕдиницаИзмерения,
	|	_ТабТоваров.Номенклатура.Код КАК КодТовараСвой
	|ПОМЕСТИТЬ ТабТоваров
	|ИЗ
	|	_ТабТоваров КАК _ТабТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ _ТабТоваров"
	;
	
	//2. Соединим ТабТоваров с РС "КонтурEDI_СоответствияТоваров"
	//	и дополнительно с РС "Штрихкоды" , если мы в режиме покупателя
	
	Если ИскатьТоварПоШК Тогда//мы торговая сеть
		
		ТекстЗапросаПоШтрихкодам = ОсновнойМодуль.ПолучитьТекстЗапросаПоШтрихкодамНоменклатуры();//все запросы убраны в макет СКД с возможностью кастомизации через ПМ.
		
		ЗапросКонвертацииТоваров1СвEDI.Текст = ЗапросКонвертацииТоваров1СвEDI.Текст 
		+ " 
		|; 
		|" 
		+ ТекстЗапросаПоШтрихкодам;//проверить ВХ
		
		ТекстЗапросаПоРегиструСоответствий = 
		"ВЫБРАТЬ
		|	ТабТоваров.Номенклатура,
		|	ТабТоваров.ХарактеристикаНоменклатуры,
		|	ТабТоваров.ЕдиницаИзмерения,
		|	ТабТоваров.КодТовараСвой,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КодЕдиницыИзмеренияEDI, """") КАК КодЕдиницыИзмеренияEDI,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.НаименованиеПартнера, """") КАК НаименованиеПартнера,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.GTIN, ВТШтрихкодыТоваров.GTIN) КАК GTIN,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КодТовараПартнера, """") КАК КодТовараСторонний,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КоэффициентEDIВ1С, """") КАК КоэффициентEDIВ1С
		|ИЗ
		|	ТабТоваров КАК ТабТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтурEDI_СоответствияТоваров.Номенклатура КАК Номенклатура,
		|			КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
		|			КонтурEDI_СоответствияТоваров.ЕдиницаEDI КАК КодЕдиницыИзмеренияEDI,
		|			КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С,
		|			КонтурEDI_СоответствияТоваров.GTIN КАК GTIN,
		|			КонтурEDI_СоответствияТоваров.НаименованиеПартнера КАК НаименованиеПартнера,
		|			КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК КодТовараПартнера
		|		ИЗ
		|			РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
		|		ГДЕ
		|			КонтурEDI_СоответствияТоваров.Партнер = &Партнер
		|			И КонтурEDI_СоответствияТоваров.Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ.Номенклатура
		|					ИЗ
		|						ТабТоваров КАК ВТ)) КАК СоответствияТоваров_КонтурEDI
		|		ПО ТабТоваров.Номенклатура = СоответствияТоваров_КонтурEDI.Номенклатура
		|			И ТабТоваров.ЕдиницаИзмерения = СоответствияТоваров_КонтурEDI.ЕдиницаИзмерения
		|			И (СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры = НЕОПРЕДЕЛЕНО
		|				ИЛИ ТабТоваров.ХарактеристикаНоменклатуры = СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтрихкодыТоваров КАК ВТШтрихкодыТоваров
		|		ПО ТабТоваров.Номенклатура = ВТШтрихкодыТоваров.Номенклатура
		|			И ТабТоваров.ЕдиницаИзмерения = ВТШтрихкодыТоваров.ЕдиницаИзмерения
		|			И (ВТШтрихкодыТоваров.ХарактеристикаНоменклатуры = НЕОПРЕДЕЛЕНО
		|				ИЛИ ТабТоваров.ХарактеристикаНоменклатуры = ВТШтрихкодыТоваров.ХарактеристикаНоменклатуры)";
		
	Иначе//мы поставщик
		
		ТекстЗапросаПоРегиструСоответствий = 
		"ВЫБРАТЬ
		|	ТабТоваров.Номенклатура,
		|	ТабТоваров.ХарактеристикаНоменклатуры,
		|	ТабТоваров.ЕдиницаИзмерения,
		|	ТабТоваров.КодТовараСвой,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.НаименованиеПартнера, """") КАК НаименованиеПартнера,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.GTIN, ""              "") КАК GTIN,
		|	ЕСТЬNULL(СоответствияТоваров_КонтурEDI.КодТовараПартнера, """") КАК КодТовараСторонний,
		|	СоответствияТоваров_КонтурEDI.КодЕдиницыИзмеренияEDI КАК КодЕдиницыИзмеренияEDI,
		|	СоответствияТоваров_КонтурEDI.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С
		|ИЗ
		|	ТабТоваров КАК ТабТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			КонтурEDI_СоответствияТоваров.Номенклатура КАК Номенклатура,
		|			КонтурEDI_СоответствияТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|			КонтурEDI_СоответствияТоваров.Единица КАК ЕдиницаИзмерения,
		|			КонтурEDI_СоответствияТоваров.GTIN КАК GTIN,
		|			КонтурEDI_СоответствияТоваров.НаименованиеПартнера КАК НаименованиеПартнера,
		|			КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК КодТовараПартнера,
		|			КонтурEDI_СоответствияТоваров.ЕдиницаEDI КАК КодЕдиницыИзмеренияEDI,
		|			КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентEDIВ1С
		|		ИЗ
		|			РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
		|		ГДЕ
		|			КонтурEDI_СоответствияТоваров.Партнер = &Партнер
		|			И КонтурEDI_СоответствияТоваров.Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ.Номенклатура
		|					ИЗ
		|						ТабТоваров КАК ВТ)) КАК СоответствияТоваров_КонтурEDI
		|		ПО ТабТоваров.Номенклатура = СоответствияТоваров_КонтурEDI.Номенклатура
		//|			И ТабТоваров.ЕдиницаИзмерения = СоответствияТоваров_КонтурEDI.ЕдиницаИзмерения
		|			И (СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры = НЕОПРЕДЕЛЕНО
		|				ИЛИ ТабТоваров.ХарактеристикаНоменклатуры = СоответствияТоваров_КонтурEDI.ХарактеристикаНоменклатуры)";
		
	КонецЕсли;
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьЗапросКонвертацииТоваров1СвEDI",,
			Новый Структура("Запрос,ДополнительныеПараметры",
			ЗапросКонвертацииТоваров1СвEDI,));
			
	Если РезультатПМ <> Неопределено Тогда
		ЗапросКонвертацииТоваров1СвEDI = РезультатПМ;
	КонецЕсли;
	
	ОсновнойМодуль.ПреобразоватьТипыЕдиницыИзмеренияЗапросаУТ11_УНФ(ЗапросКонвертацииТоваров1СвEDI);
	Если ОсновнойМодуль.ОпределитьРелизКонфигурации()="11.2" Тогда
		ЗапросКонвертацииТоваров1СвEDI.Текст = СтрЗаменить(ЗапросКонвертацииТоваров1СвEDI.Текст,"Справочник.ЕдиницыИзмерения","Справочник.УпаковкиЕдиницыИзмерения");	
	КонецЕсли;	
	ЗапросКонвертацииТоваров1СвEDI.Выполнить();//создадим ТабТоваров и, если мы покупатель, то ВТШтрихкодыТоваров
	
	Если ВнешнееХранилище Тогда
		
	Иначе//объекты в составе конфигурации
		
		ЗапросКонвертацииТоваров1СвEDI.Текст = ТекстЗапросаПоРегиструСоответствий;
		ЗапросКонвертацииТоваров1СвEDI.УстановитьПараметр("Партнер",	ВладелецСпискаТоваров);

		//событие, позволяющее переопределить получение по ШК "ИзменитьЗапросПоРегиструСоответствий"
		ДополнительныеПараметры= новый Структура;
		ДополнительныеПараметры.Вставить("ИскатьТоварПоШК",ИскатьТоварПоШК);
		РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьЗапросПоРегиструСоответствий",,
		Новый Структура("Запрос,ДополнительныеПараметры",
		ЗапросКонвертацииТоваров1СвEDI,ДополнительныеПараметры));
		
		Если РезультатПМ <> Неопределено Тогда
			ЗапросКонвертацииТоваров1СвEDI = РезультатПМ;
		КонецЕсли;

		ТаблицаТоваровССоответствиями = ЗапросКонвертацииТоваров1СвEDI.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат ТаблицаТоваровССоответствиями;
	
КонецФункции

//работа с сервисом Цербер

Функция ИнициализироватьТаблицуДляХС() Экспорт

	ТаблицаЦерберХС = Новый ТаблицаЗначений;
	ТаблицаЦерберХС.Колонки.Добавить("name",,"Наименование");
	ТаблицаЦерберХС.Колонки.Добавить("inn",,"ИНН");
	ТаблицаЦерберХС.Колонки.Добавить("Адрес");
	ТаблицаЦерберХС.Колонки.Добавить("guid");
	ТаблицаЦерберХС.Колонки.Добавить("active");
	ТаблицаЦерберХС.Колонки.Добавить("createDate");
	ТаблицаЦерберХС.Колонки.Добавить("updateDate");
	ТаблицаЦерберХС.Колонки.Добавить("fullName");
	ТаблицаЦерберХС.Колонки.Добавить("kpp");
	ТаблицаЦерберХС.Колонки.Добавить("ogrn");
	ТаблицаЦерберХС.Колонки.Добавить("passport");
	ТаблицаЦерберХС.Колонки.Добавить("fio");
	ТаблицаЦерберХС.Колонки.Добавить("type");
	
Возврат ТаблицаЦерберХС;

КонецФункции // ПолучитьТаблицуДляХС()

Функция ИнициализироватьТаблицуДляПлощадки() Экспорт

	ТаблицаЦерберПлощадки = Новый ТаблицаЗначений;
	ТаблицаЦерберПлощадки.Колонки.Добавить("name",,"Наименование");
	ТаблицаЦерберПлощадки.Колонки.Добавить("Адрес");
	ТаблицаЦерберПлощадки.Колонки.Добавить("guid");
	ТаблицаЦерберПлощадки.Колонки.Добавить("active");
	ТаблицаЦерберПлощадки.Колонки.Добавить("createDate");
	ТаблицаЦерберПлощадки.Колонки.Добавить("updateDate");
	ТаблицаЦерберПлощадки.Колонки.Добавить("englishName");
	ТаблицаЦерберПлощадки.Колонки.Добавить("type");
	ТаблицаЦерберПлощадки.Колонки.Добавить("numberList");
	ТаблицаЦерберПлощадки.Колонки.Добавить("activityList");
	                                       
	Возврат ТаблицаЦерберПлощадки;

КонецФункции // ИнициализироватьТаблицуДляПлощадки()

Функция ПолучитьWSПроксиEnterpriseService() Экспорт
	
	Если ИспользуемыеWSПрокси().WSПроксиEnterpriseService = Неопределено Тогда
		Прокси = Новый WSПрокси(ПолучитьОпределениеПроксиИзМакета("EnterpriseService_test_14"),
		"http://api.vetrf.ru/schema/cdm/registry/service",   
		"EnterpriseServiceBindingQSService",  
		"EnterpriseServiceBindingQSPort"); 
		
		//альтернативный способ (требует добавления в конфигурацию WS-ссылок)
		//Прокси = WSСсылки.WSEnterpriseServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/registry/service", "EnterpriseServiceBindingQSService", "EnterpriseServiceBindingQSPort");
		
		Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
		Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");	
		ИспользуемыеПрокси.WSПроксиEnterpriseService = Прокси;
	Иначе
		Прокси = ИспользуемыеWSПрокси().WSПроксиEnterpriseService; 
	КонецЕсли;
	
	Возврат(Прокси);
	
КонецФункции // ПолучитьПроксиEnterprise()

Функция ПолучитьСписокХСПоИНН(ИНН) Экспорт

	ТаблицаНайденных = ИнициализироватьТаблицуДляХС();
	
	WSПрокси = ПолучитьWSПроксиEnterpriseService();
	
	ТипWSПараметра = WSПрокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = WSПрокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;	
	
	Смещение = 0;
	
	businessEntity = WSПрокси.ФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "BusinessEntity");
	
	businessEntity.inn = ИНН;
	
	//Если ЗначениеЗаполнено(ПолноеНаименование) Тогда
	//	businessEntity.fullName = ПолноеНаименование;
	//КонецЕсли;
	
	//ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю контрагентов");
	#Если Клиент Тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли
	ListOptions.offset = Смещение;
	Попытка
		Ответ = WSПрокси.GetBusinessEntityList(ListOptions, businessEntity);
	Исключение
		Сообщить("Не смог спросить Меркурий");
		Сообщить("Описание Ошибки");
	КонецПопытки;
	Для Каждого стр из Ответ.businessEntity Цикл
		стр1 = ТаблицаНайденных.Добавить();
		ЗаполнитьЗначенияСвойств(стр1, стр);
		стр1.Адрес = ВычислитьXDTO(Ответ,"juridicalAddress.addressView");
	КонецЦикла;
	
	Возврат ТаблицаНайденных;
	
КонецФункции // ПолучитьСписокХСПоИНН()

Функция ПолучитьХСПоGUID(GUID) Экспорт
	
	ТаблицаНайденных = ИнициализироватьТаблицуДляХС();
	
	Если Не ЗначениеЗаполнено(GUID) Тогда
		
		Возврат ТаблицаНайденных;
		
	КонецЕсли;
	
	WSПрокси = ПолучитьWSПроксиEnterpriseService();
	
	ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю данные о Хоз Субъекте по GUID: "+GUID);
	Попытка
		Ответ = WSПрокси.GetBusinessEntityByGuid(GUID);
	Исключение
		Сообщить("Не смог получить ответ от ГИС Цербер");
		Сообщить(ОписаниеОшибки());
		Возврат ТаблицаНайденных;
	КонецПопытки;
	
	Попытка
		стр1 = ТаблицаНайденных.Добавить();
		ЗаполнитьЗначенияСвойств(стр1, Ответ);
		стр1.Адрес = ВычислитьXDTO(Ответ,"juridicalAddress.addressView");
	Исключение
		Сообщить("Не смог разобрать ответ от ГИС Цербер");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ТаблицаНайденных;
	
КонецФункции

Функция ЗарегистрироватьНовыйХС(Объект1С,ИНН,Адрес,Наименование,ОГРН) Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	modificationOperation =  КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "BEModificationOperation");
	modificationOperation.type = "CREATE";
	
	businessEntity = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "BusinessEntity");
	
	ЮрЛицоEDI = ОсновнойМодуль.ПреобразоватьЮрФизЛицо_1С_в_EDI(Объект1С,"Юридический",Ложь);
	
	Если Не ЗначениеЗаполнено(Адрес) И ЗначениеЗаполнено(ЮрЛицоEDI.Адрес.Представление) Тогда
		Адрес = ЮрЛицоEDI.Адрес.Представление;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Сообщить("Не могу понять Адрес, пожалуйста вручную");
		Результат.Успешно = Ложь;
		НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
		Новаяошибка.ТекстОшибки = "Запрос отвергнут Меркурием";
		Возврат ""
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) ТОгда
		businessEntity.inn  = ИНН ;
	ИначеЕсли ЗначениеЗаполнено(ЮрЛицоEDI.ИНН) ТОгда
		businessEntity.inn  = ЮрЛицоEDI.ИНН;
		ИНН = ЮрЛицоEDI.ИНН;
	КонецЕсли;
	
	//разбираемся с типом ХС
	Если ЮрЛицоEDI.Вид = "ЮрЛицо" Тогда
		businessEntity.type  = 1;   //ЮЛ
		//обязательный ОГРН для ЮЛ
		businessEntity.ogrn = ОГРН;
		Если Не ЗначениеЗаполнено(ОГРН) Тогда
			Сообщить("Не могу определить ОГРН, укажите, пожалуйста вручную");
			Результат.Успешно = Ложь;
			НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
			Новаяошибка.ТекстОшибки = "Запрос отвергнут Меркурием";
			Возврат ""
		КонецЕсли;
		НайденнаяПФ = ПолучитьОКОПФМеркурий().Найти(Объект1С.ОКОПФ.НаименованиеПолное,"Наименование");
		
		Если Не ЗначениеЗаполнено(НайденнаяПФ) Тогда
			Сообщить("Не могу определить ОКОПФ, проверьте что указана в контрагенте");
			Результат.Успешно = Ложь;
			НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
			Новаяошибка.ТекстОшибки = "Запрос отвергнут Меркурием";
			Возврат ""
		КонецЕсли;
		
		businessEntity.incorporationForm = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "IncorporationForm");
		xmlЗаполнитьЗначениеXDTO(businessEntity.incorporationForm,"code",НайденнаяПФ.Код);	
	Иначе
		
		Если ЗначениеЗаполнено(ЮрЛицоEDI.Фамилия) Тогда
			xmlЗаполнитьЗначениеXDTO(businessEntity,"fio",СокрЛП(ЮрЛицоEDI.Фамилия+" "+ЮрЛицоEDI.Имя+" "+ЮрЛицоEDI.Отчество));	
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН) ТОгда
			businessEntity.type  = 3;   //ИП
		Иначе
			businessEntity.type  = 2;    //просто физик, без ИП
		КонецЕсли;
	КонецЕсли;
	
	
	juridicalAddress = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/ikar", "Address");
	ЗаполнитьАдресОбъектаXDTO(Адрес, juridicalAddress, , Объект1С);	
	businessEntity.juridicalAddress = juridicalAddress;
	
	Если ЗначениеЗаполнено(ЮрЛицоEDI.КПП) Тогда
		businessEntity.kpp = ЮрЛицоEDI.КПП;
	КонецЕсли;
	Если ЗначениеЗаполнено(Наименование) Тогда
		businessEntity.name = Наименование;
		businessEntity.fullname = ЮрЛицоEDI.Наименование;
	ИначеЕсли ЗначениеЗаполнено(ЮрЛицоEDI.Наименование) Тогда
		businessEntity.name = ЮрЛицоEDI.Наименование;
		businessEntity.fullname = ЮрЛицоEDI.Наименование;
	КонецЕсли;
	
	//у нас в списке будет 1 b.e.
	resultingList = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "BusinessEntityList");
    resultingList.businessEntity.Добавить(businessEntity);
	resultingList.count = resultingList.businessEntity.Количество();
	resultingList.total = resultingList.businessEntity.Количество();
	resultingList.offset = 0;
	
	modificationOperation.resultingList = resultingList;
	modificationOperation.reason = "Нет созданного ХС, предварительная проверка по ИНН произведена.";
	                         
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика());
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("localTransactionId", 		"IncomingRobot");
	ПараметрыФункции.Вставить("initiator", 					ПараметрыПодключения.user);
	ПараметрыФункции.Вставить("modificationOperation",		modificationOperation);
	//Дожидаться результата
	Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "ModifyBusinessEntityRequest", Истина);
	
	Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
		Результат.Успешно = Ложь;
		НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
		Новаяошибка.ТекстОшибки = "Запрос отвергнут Меркурием";
		Возврат ""
	Иначе
		GUIDСозданногоХС = Ответ.result.modifyBusinessEntityResponse.businessEntity.guid; //вот тут в общем случае список XDTO!!
		Возврат GUIDСозданногоХС;
		
	КонецЕсли;
	
КонецФункции // СоздатьХС()

Функция ЗарегистрироватьНовуюПлощадку(Объект1С,ИНН,Адрес,Наименование,ХСВладелецGUID) Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	//нам потребуются:
	//наименование
	//Тип поднадзю объекта
	//Для предприятий - адрес (с регионом )
	//ХСВладелецGUID
	//виды деятельности  (может подойдет UNKNOWN??)
	
	
	Если НЕ ЗначениеЗаполнено(Наименование) тогда
		Сообщить("Укажите Наименование площадки");
		Возврат "";
	КонецЕсли;
	
	enterprise = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "Enterprise");
	xmlЗаполнитьЗначениеXDTO(enterprise,"name",Наименование);
	xmlЗаполнитьЗначениеXDTO(enterprise,"type",1);
	//Адрес
	address = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/ikar", "Address");
	ЗаполнитьАдресОбъектаXDTO(Адрес,address,,Объект1С);	
	enterprise.address = address;
	
	Если address.region.guid = неопределено тогда
		Сообщить("Не могу определить Регион");
		Возврат "";
	КонецЕсли;
	
	//Виды деятельности
	enterprise.activityList = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", 			"EnterpriseActivityList");
	activity = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", 			"EnterpriseActivity");
	activity.Name = "UNKNOWN"; 	
	enterprise.activityList.activity.Добавить(activity);
	enterprise.activityList.count = 1;
	enterprise.activityList.total = 1;
	enterprise.activityList.offset = 0;
	enterprise.owner = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "BusinessEntity");
	xmlЗаполнитьЗначениеXDTO(enterprise.owner,"GUID",ХСВладелецGUID);
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика());
	ПараметрыФункции = ПодготовитьПараметрыФункцииСозданиеПлощадки(enterprise,ПараметрыПодключения);
	
	
	//Дожидаться результата
	Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "ModifyEnterpriseRequest", Истина);

	Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
		Результат.Успешно = Ложь;
		НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
		Новаяошибка.ТекстОшибки = "Запрос отвергнут Меркурием";
		Возврат ""
	Иначе
		GUIDСозданнойПлощадки = Ответ.result.modifyEnterpriseResponse.enterprise.guid; //вот тут в общем случае список XDTO!!
		Возврат GUIDСозданнойПлощадки;
		
	КонецЕсли;
	
КонецФункции // ЗарегистрироватьНовуюПлощадку()

Функция СвязатьПлощадкуСХС(ХСGUID,ПлощадкаGUID) Экспорт
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	Если НЕ ЗначениеЗаполнено(ХСGUID) тогда
		Сообщить("Не знаю GUID ХС! - не могу создать связь");
		Возврат "";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПлощадкаGUID) тогда
		Сообщить("Не знаю GUID Площадки! - не могу создать связь");
		Возврат "";
	КонецЕсли;
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика());
	
	//операция
	modificationOperation =  КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "BEActivityLocationsModificationOperation");
	modificationOperation.type = "CREATE";
	//площадка
	enterprise = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "Enterprise");
	xmlЗаполнитьЗначениеXDTO(enterprise,"GUID",ПлощадкаGUID);
	
	enterpriseList = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "EnterpriseList");
    enterpriseList.enterprise.Добавить(enterprise);
	enterpriseList.count = 1;
	enterpriseList.total = 1;
	enterpriseList.offset = 0;
	
	modificationOperation.enterpriseList = enterpriseList;
	//ХС
	businessEntity = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "BusinessEntity");
	xmlЗаполнитьЗначениеXDTO(businessEntity,"GUID",ХСGUID);
	modificationOperation.businessEntity = businessEntity;
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("localTransactionId", 		"IncomingRobot");
	ПараметрыФункции.Вставить("initiator", 					ПараметрыПодключения.user);
	ПараметрыФункции.Вставить("modificationOperation",		modificationOperation);
	
	//Дожидаться результата
	Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "ModifyActivityLocationsRequest", Истина);

	Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда 
		Результат.Успешно = Ложь;
		НоваяОшибка = Результат.ТаблицаОшибок.Добавить();
		Новаяошибка.ТекстОшибки = "Запрос отвергнут Меркурием";
		Возврат Результат
	Иначе
		Результат.Успешно = Истина;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции // СвязатьПлощадкуСХС()


Процедура ЗаполнитьАдресОбъектаXDTO(Адрес,address,ИспользуемаяФабрикаXDTO = Неопределено, Объект1С = Неопределено)
		
	//Сформируем штатный адрес
	ЮрЛицоEDI = Неопределено;
	Если Объект1С <> Неопределено Тогда
		Попытка //там может оказаться что-то что мы не сможем сконвертировать
			ЮрЛицоEDI = ОсновнойМодуль.ПреобразоватьЮрФизЛицо_1С_в_EDI(Объект1С,"Юридический",Ложь);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ИспользуемаяФабрикаXDTO = Неопределено Тогда //чтобы можно было использовать из разных WS прокси
		ИспользуемаяФабрикаXDTO = КорневаяФабрика();
	КонецЕсли;
	
	//пока что только Россия
	address.country = ИспользуемаяФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/ikar", 			"Country");
	Страна = ПолучитьКлассификаторСтранМеркурий().Найти("RU","Код");
	Если Страна <> неопределено Тогда	
		xmlЗаполнитьЗначениеXDTO(address.country,"GUID",Страна.GUID);
	КонецЕсли;
	
	address.region = ИспользуемаяФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/ikar", 			"Region");
	Регионы = ПолучитьКлассификаторРегионовМеркурий(,Страна.GUID);
	УказанРегион = ЭлементСодержащийсяВАдресе(Регионы,Адрес);
	Если УказанРегион<>неопределено Тогда
		xmlЗаполнитьЗначениеXDTO(address.region,"GUID",УказанРегион.GUID);
	Иначе
		Возврат; //не знаю в каком регионе искать
	КонецЕсли;
	
	Районы = ПолучитьКлассификаторРайоновРегионаМеркурий(УказанРегион.GUID);
	УказанныйРайон = ЭлементСодержащийсяВАдресе(Районы,Адрес);
	
	Если УказанныйРайон=Неопределено тогда
		//возможно региональное подчинение?
		НасПункты = ПолучитьКлассификаторНасПунктовРегионаМеркурий(УказанРегион.GUID);
		УказанныйНасПункт = ЭлементСодержащийсяВАдресе(НасПункты,Адрес);
		Если УказанныйНасПункт<>Неопределено тогда
			address.locality = ИспользуемаяФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/ikar", 			"Locality");
			xmlЗаполнитьЗначениеXDTO(address.locality,"GUID",УказанныйНасПункт.GUID);
		КонецЕсли;
	Иначе //подчинение Районное - укажем district
		address.district = ИспользуемаяФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/ikar", 			"District");
		xmlЗаполнитьЗначениеXDTO(address.district,"GUID",УказанныйРайон.GUID);
		НасПункты = ПолучитьКлассификаторНасПунктовРайонаМеркурий(УказанРегион.GUID);
		УказанныйНасПункт = ЭлементСодержащийсяВАдресе(НасПункты,Адрес);
		Если УказанныйНасПункт<>Неопределено тогда
			address.locality = ИспользуемаяФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/ikar", 			"Locality");
			xmlЗаполнитьЗначениеXDTO(address.locality,"GUID",УказанныйНасПункт.GUID);
		КонецЕсли;
	КонецЕсли;
	
	//попробуем указать sublocality если у нас есть address.locality  (подчиненный населенный пункт)
	УказанныйПодчНасПункт = Неопределено;
	Если УказанныйНасПункт<>Неопределено Тогда 
		ПодчиненныеНП = ПолучитьКлассификаторНасПунктовРайонаМеркурий(address.locality.guid);
		УказанныйПодчНасПункт = ЭлементСодержащийсяВАдресе(ПодчиненныеНП,Адрес);
		Если УказанныйПодчНасПункт<>Неопределено тогда
			address.sublocality = ИспользуемаяФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/ikar", 			"Locality");
			xmlЗаполнитьЗначениеXDTO(address.sublocality,"GUID",УказанныйПодчНасПункт.GUID);
		КонецЕсли;
	КонецЕсли;
	
	//попробуем указать улицу если у нас есть address.locality
	Если УказанныйНасПункт<>Неопределено
		ИЛИ УказанныйПодчНасПункт <> Неопределено Тогда
		Улицы = ПолучитьКлассификаторУлицНаселенногоПунктаМеркурий(?(УказанныйПодчНасПункт <> Неопределено,address.sublocality.guid,address.locality.guid));
		УказаннаяУлица = ЭлементСодержащийсяВАдресе(Улицы,Адрес);
		Если УказаннаяУлица<>Неопределено тогда
			address.street = ИспользуемаяФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/ikar", 			"Street");
			xmlЗаполнитьЗначениеXDTO(address.street,"GUID",УказаннаяУлица.GUID);
		КонецЕсли;
	ИначеЕсли ЭтоGUIDГородаФедеральногоЗначения(address.region.guid)//Улицы Москвы/СПБ/Севастополя
		Тогда
		
		Улицы = ПолучитьКлассификаторУлицНаселенногоПунктаМеркурий(address.region.guid);
		УказаннаяУлица = ЭлементСодержащийсяВАдресе(Улицы,Адрес);
		Если УказаннаяУлица<>Неопределено тогда
			address.street = ИспользуемаяФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/ikar", 			"Street");
			xmlЗаполнитьЗначениеXDTO(address.street,"GUID",УказаннаяУлица.GUID);
		КонецЕсли;
		
	КонецЕсли;
	
	//укажем дом, индекс и room если у нас есть ЮрЛицоEDI (т.е. это НЕ поиск)
	Если ЮрЛицоEDI <> Неопределено Тогда
		Если ЗначениеЗаполнено(ЮрЛицоEDI.Адрес.Дом) Тогда
			xmlЗаполнитьЗначениеXDTO(address,"house",Строка(ЮрЛицоEDI.Адрес.Дом));
		КонецЕсли;
		Если ЗначениеЗаполнено(ЮрЛицоEDI.Адрес.Квартира) Тогда
			xmlЗаполнитьЗначениеXDTO(address,"room",Строка(ЮрЛицоEDI.Адрес.Квартира));
		КонецЕсли;
		Если ЗначениеЗаполнено(ЮрЛицоEDI.Адрес.Индекс) Тогда
			xmlЗаполнитьЗначениеXDTO(address,"postIndex",Строка(ЮрЛицоEDI.Адрес.Индекс));
		КонецЕсли;
	КонецЕсли;
	
	address.addressView = Адрес;
	
КонецПроцедуры

Функция ЭтоGUIDГородаФедеральногоЗначения(guid)
	
	Если //Улицы Москвы/СПБ/Севастополя
		guid="0c5b2444-70a0-4932-980c-b4dc0d3f02b5"
		ИЛИ guid="c2deb16a-0330-4f05-821f-1d09c93331e6"
		ИЛИ guid="6fdecb78-893a-4e3f-a5ba-aa062459463b"
		Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции // ЭтоGUIDГородаФедеральногоЗначения()


Функция ПодготовитьПараметрыФункцииСозданиеПлощадки(enterprise,ПараметрыПодключения)
	
	modificationOperation =  КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "ENTModificationOperation");
	modificationOperation.type = "CREATE";
	
	//у нас в списке будет 1 b.e.
	resultingList = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "EnterpriseList");
    resultingList.enterprise.Добавить(enterprise);
	resultingList.count = resultingList.enterprise.Количество();
	resultingList.total = resultingList.enterprise.Количество();
	resultingList.offset = 0;
	
	modificationOperation.resultingList = resultingList;
	modificationOperation.reason = "Нет созданного объекта, предварительная проверка по адресу произведена.";
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("localTransactionId", 		"IncomingRobot");
	ПараметрыФункции.Вставить("initiator", 					ПараметрыПодключения.user);
	ПараметрыФункции.Вставить("modificationOperation",		modificationOperation);

	Возврат ПараметрыФункции;
	
КонецФункции // ПодготовитьПараметрыФункцииСозданиеХС_Площадки()

Функция ЭлементСодержащийсяВАдресе(Элементы,СтрокаАдреса)
	
	СтрокаАдреса 			= СтрЗаменить(СтрокаАдреса,"ё","е");
	
	Для Каждого Элемент Из Элементы Цикл
		Если Найти(Элемент.Наименование,"ё")<>0 Тогда
			Элемент.Наименование 	= СтрЗаменить(Элемент.Наименование,"ё","е");
		КонецЕсли;
		Если Найти(СтрокаАдреса,Элемент.Наименование)<>0 Тогда
			Возврат Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


Функция ПолучитьПлощадкуПоGUID(GUID) Экспорт
	
	ТаблицаНайденных = ИнициализироватьТаблицуДляХС();
	
	Если Не ЗначениеЗаполнено(GUID) Тогда
		
		Возврат ТаблицаНайденных;
		
	КонецЕсли;
	
	WSПрокси = ПолучитьWSПроксиEnterpriseService();
	
	ОсновнойМодуль.Состояние_КонтурEDI("Запрашиваю данные о площадке по GUID");
	Попытка
		Ответ = WSПрокси.GetEnterpriseByGuid(GUID);
	Исключение
		Сообщить("Не смог получить ответ от ГИС Цербер");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Попытка
		стр1 = ТаблицаНайденных.Добавить();
		ЗаполнитьЗначенияСвойств(стр1, Ответ);
		стр1.Адрес = ВычислитьXDTO(Ответ,"address.addressView");
	Исключение
		Сообщить("Не смог разобрать ответ от ГИС Цербер");
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ТаблицаНайденных;
	
КонецФункции

Функция ПолучитьСписокПредприятийПоGUID(ТекGUID,ОбновитьССервера=Ложь) Экспорт
	
	ТекGUIDБезДефисов = СтрЗаменить(ТекGUID,"-",""); //это надо для того чтобы закэшировать большие списки
	
	ТаблицаНайденных = ИнициализироватьТаблицуДляПлощадки();
	
	WSПрокси = ПолучитьWSПроксиEnterpriseService();
	
	ТипWSПараметра = WSПрокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = WSПрокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;	
	
	
	Попытка
		Ответ = WSПрокси.GetBusinessEntityByGuid(ТекGUID);
	Исключение
		Сообщить("Не смог получить список предприятий по текущему Хозяйствующему субъекту.");
		Возврат ТаблицаНайденных;
	КонецПопытки;
	КоличествоПлощадок = Ответ.activityLocation.Количество();
	
	//При количестве дочерних более 20 - будем кэшировать т.к. очень долго запрашивать
	Если ОбновитьССервера = Ложь
		И КоличествоПлощадок>20 Тогда
		СохраненнаяСтруктура = ПолучитьНастройкуМеркурий("Площадки"+ТекGUIDБезДефисов);
		Если СохраненнаяСтруктура<>Неопределено Тогда
			СохраненнаяТаблицаПлощадок = ТаблицаНайденных;
			Если СохраненнаяСтруктура.Свойство("Площадки"+ТекGUIDБезДефисов,СохраненнаяТаблицаПлощадок) Тогда
				Возврат СохраненнаяТаблицаПлощадок;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоПлощадок>20 Тогда
		ОсновнойМодуль.Состояние_КонтурEDI(""+ТекущаяДата()+" Начал вычитывать "+КоличествоПлощадок+" площадок. Это займет некоторое время. "+?(КоличествоПлощадок > 50,"После чтения площадки будут закэшированы",""));
	КонецЕсли;
	
	//выкачивание всех площадок
	Для Каждого стр из Ответ.activityLocation Цикл
		
		Если ЗначениеЗаполнено(стр.enterprise.guid) Тогда
			ОтветПоПлощадке = WSПрокси.GetEnterpriseByGuid(стр.enterprise.guid);
			стр1 = ТаблицаНайденных.Добавить();
			ЗаполнитьЗначенияСвойств(стр1, ОтветПоПлощадке);
			стр1.Адрес = ВычислитьXDTO(ОтветПоПлощадке,"address.addressView");
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПлощадок > 20 Тогда
		СохранитьНастройкуМеркурий("Площадки"+ТекGUIDБезДефисов,ТаблицаНайденных);
	КонецЕсли;
	
  	Возврат ТаблицаНайденных;
	
КонецФункции // ПолучитьСпискоПредприятийПоGUID()

Функция ПолучитьСписокПредприятийСОтбором(КлючПоиска,АдресПредставление) Экспорт
	
	ТаблицаНайденных = ИнициализироватьТаблицуДляПлощадки();
	
	WSПрокси = ПолучитьWSПроксиEnterpriseService();
	
	ТипWSПараметра = WSПрокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = WSПрокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;	
	
	//Отбор
	enterprise = WSПрокси.ФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise", "Enterprise");
	             
	Если ЗначениеЗаполнено(КлючПоиска) Тогда 
		enterprise.name = КлючПоиска;
	КонецЕсли;
	
	address 	  = WSПрокси.ФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/ikar", "Address"); //этот заполним механизмом парсинга
	addressFilter = WSПрокси.ФабрикаXDTO.Создать("http://api.vetrf.ru/schema/cdm/ikar", "Address"); //этот будем использовать для отбора
	ЗаполнитьАдресОбъектаXDTO(АдресПредставление,address,WSПрокси.ФабрикаXDTO);
	
	//Правила фильтрации ВЕТИС:
	//region	Регион Российской Федерации.	ikar:Region	0..1
	//district	Район региона Российской Федерации.
	//При поиске по району указывать регион не обязательно.
	//ikar:District	0..1
	//locality	Населённый пункт регионального подчинения.
	//По населённым пунктам районного подчинения поиск не осуществляется;
	//При поиске обязательно также указывать регион.
	//ikar:Locality	0..1
	
	//На основании них наш алгоритм:
	//1) Если у нас есть district то указываем его и все
	//2) Если у нас нет  district то 	если есть locality то указываем его и region
	//3) 								если нет  locality то указываем только region
		
	Если address.district <> Неопределено Тогда 
		addressFilter.district = address.district;	
	ИначеЕсли address.locality <> Неопределено Тогда
		addressFilter.locality = address.locality;	
		addressFilter.region 	= address.region;	
	Иначе
		addressFilter.region 	= address.region;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресПредставление) Тогда 
		enterprise.address = addressFilter;
	КонецЕсли;
	
	Попытка
		Ответ = WSПрокси.GetRussianEnterpriseList(ListOptions,enterprise);
		
		Для Каждого стр из Ответ.enterprise Цикл
			
			Если ЗначениеЗаполнено(стр.guid) Тогда
				стр1 = ТаблицаНайденных.Добавить();
				ЗаполнитьЗначенияСвойств(стр1, стр);
				стр1.Адрес = ВычислитьXDTO(стр,"address.addressView");
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		Сообщить("Не смог получить список предприятий c отбором");
		Сообщить(ОписаниеОшибки());
		Возврат ТаблицаНайденных;
	КонецПопытки;
	
	Возврат ТаблицаНайденных;
	
КонецФункции // ПолучитьСписокПредприятийСОтбором()


Процедура МеркурийСвязатьСообщениеСДокументом(Сообщение,ДокументСсылка) Экспорт
	
	ОсновнойМодуль.НачатьТранзакцию_КонтурEDI();
	
	Сообщение.Документ1С		= ДокументСсылка;
	Сообщение.ДокументСсылка	= ДокументСсылка;
	
	СообщениеОбъект = ОсновнойМодуль.ПолучитьОбъектСообщения(Сообщение.СообщениеСсылка);
	СообщениеОбъект.Документ = ДокументСсылка;
	СообщениеОбъект.Хранилище = Новый ХранилищеЗначения(Сообщение,Новый СжатиеДанных(9));

	СообщениеОбъект.Записать();
	
	ОсновнойМодуль.ЗафиксироватьТранзакцию_КонтурEDI();
	
КонецПроцедуры


Функция ПолучитьНастройкиФормыСообщенияМеркурий(ТипСообщения,Направление,СтатусСообщения = Неопределено) Экспорт
	
	СтруктураНастроек = Новый Структура();
	//СтруктураНастроек.Вставить("Заголовок",						ПолучитьЗаголовокФормыСообщения(ТипСообщения,Направление));
	//СтруктураНастроек.Вставить("КнопкиКоманднойПанели",			ПолучитьКнопкиКоманднойПанелиФормыСообщения(ТипСообщения,Направление,СтатусСообщения));
	//СтруктураНастроек.Вставить("НевидимыеПоля",					ПолучитьНевидимыеПоляСообщения(ТипСообщения,Направление,СтатусСообщения));
	//СтруктураНастроек.Вставить("НевидимыеКолонки",				ПолучитьНевидимыеКолонкиСообщения(ТипСообщения,Направление,СтатусСообщения));
	СтруктураНастроек.Вставить("ОбязательныеПоля",				ПолучитьОбязательныеПоляТранзакцииМеркурийДляКарточкиСообщения(ТипСообщения,Направление));
	//СтруктураНастроек.Вставить("ПроверятьПоляПриОткрытииФормы",	Истина);
	//СтруктураНастроек.Вставить("ПроверятьПоля1С",				Истина);
	//СтруктураНастроек.Вставить("ПроверятьПоляEDI",				Ложь);
	//СтруктураНастроек.Вставить("ТолькоПросмотрПолей1С", 		Ложь);
	//СтруктураНастроек.Вставить("ТолькоПросмотрПолейEDI",		Ложь);
	////СтруктураНастроек.Вставить("СоответствиеЮрФизЛиц",		ПолучитьСоответствиеЮрФизЛиц(ТипСообщения,Направление));
	//СтруктураНастроек.Вставить("ПримечанияПолей",				Неопределено);
	
	//СтруктураНастроек.ТолькоПросмотрПолейEDI = Истина;
	
	
	РезультатПМ = ОбработкаСобытияПодключаемогоМодуля("ИзменитьНастройкиФормыСообщения",,
			Новый Структура("ТипСообщения,Направление,СтруктураНастроек",
			ТипСообщения,Направление,СтруктураНастроек));
			
  	Если РезультатПМ <> Неопределено Тогда
		СтруктураНастроек = РезультатПМ.СтруктураНастроек;
	КонецЕсли;

	Возврат СтруктураНастроек;	
	
КонецФункции

//печать

//Печать ВСД
// Подключает компоненту, выполненную по технологии Native API и COM.
// Компонента должна храниться в макете конфигурации в виде ZIP-архива.
//
// Параметры:
//  Идентификатор   - Строка - идентификатор объекта внешней компоненты.
//  ПолноеИмяМакета - Строка - полное имя макета конфигурации, хранящего ZIP-архив.
//
// Возвращаемое значение:
//  AddIn, Неопределено - экземпляр объекта внешней компоненты или Неопределено, если не удалось создать.
//
// Пример:
//
//  ПодключаемыйМодуль = ОбщегоНазначения.ПодключитьКомпонентуИзМакета(
//      "CNameDecl",
//      "ОбщийМакет.КомпонентаСклоненияФИО");
//
//  Если ПодключаемыйМодуль <> Неопределено Тогда 
//      // ПодключаемыйМодуль содержит созданный экземпляр подключенной компоненты.
//  КонецЕсли;
//
//  ПодключаемыйМодуль = Неопределено;
//
Функция ПодключитьКомпонентуИзМакета(Идентификатор, ИмяМакета) Экспорт

	ПодключаемыйМодуль = Неопределено;
	
	// Генерация уникального имени
	СимволическоеИмя = "С" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
	
	Если ПодключитьВнешнююКомпоненту(ПоместитьВоВременноеХранилище(ПолучитьМакет(ИмяМакета)), СимволическоеИмя) Тогда
		
		Попытка
			ПодключаемыйМодуль = Новый("AddIn." + СимволическоеИмя + "." + Идентификатор);
		Исключение
			
			Сообщить("Не удалось подключить модуль "+ИмяМакета+". "+ОписаниеОшибки());
			
			ПодключаемыйМодуль = Неопределено;
			
		КонецПопытки;
		
	Иначе
		
		Сообщить("Не удалось подключить компоненту "+ИмяМакета+"!");
		
	КонецЕсли;
	
	Возврат ПодключаемыйМодуль;
	
КонецФункции

Функция КомпонентаФормированияQRКода(Отказ)
	
	QRCodeGenerator = ПодключитьКомпонентуИзМакета("QRCodeExtension", "КомпонентаПечатиQRКода");//ЭтотОбъект.Метаданные().Макеты.КомпонентаПечатиQRКода.ПолноеИмя());
		
	Если QRCodeGenerator = Неопределено Тогда 
		Сообщить(НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода.'"));
	КонецЕсли;
	
	Возврат QRCodeGenerator;
	
КонецФункции

// Возвращает двоичные данные для формирования QR кода.
//
// Параметры:
//  QRСтрока         - Строка - данные, которые необходимо разместить в QR-коде.
//
//  УровеньКоррекции - Число - уровень погрешности изображения при котором данный QR-код все еще возможно 100%
//                             распознать.
//                     Параметр должен иметь тип целого и принимать одно из 4 допустимых значений:
//                     0(7% погрешности), 1(15% погрешности), 2(25% погрешности), 3(35% погрешности).
//
//  Размер           - Число - определяет длину стороны выходного изображения в пикселях.
//                     Если минимально возможный размер изображения больше этого параметра - код сформирован не будет.
//
// Возвращаемое значение:
//  ДвоичныеДанные  - буфер, содержащий байты PNG-изображения QR-кода.
// 
// Пример:
//  
//  // Выводим на печать QR-код, содержащий в себе информацию зашифрованную по УФЭБС.
//
//  QRСтрока = УправлениеПечатью.ФорматнаяСтрокаУФЭБС(РеквизитыПлатежа);
//  ТекстОшибки = "";
//  ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRСтрока, 0, 190, ТекстОшибки);
//  Если Не ПустаяСтрока(ТекстОшибки)
//      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
//  КонецЕсли;
//
//  КартинкаQRКода = Новый Картинка(ДанныеQRКода);
//  ОбластьМакета.Рисунки.QRКод.Картинка = КартинкаQRКода;
//
Функция ДанныеQRКода(QRСтрока, УровеньКоррекции, Размер) Экспорт
	
	Отказ = Ложь;
	
	ГенераторQRКода = КомпонентаФормированияQRКода(Отказ);
	Если ГенераторQRКода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(QRСтрока, УровеньКоррекции, Размер);
	Исключение
		Сообщить("Ошибка при формировании QR-кода "+QRСтрока+". " + ОписаниеОшибки()); 
	КонецПопытки;
	
	Возврат ДвоичныеДанныеКартинки;
	
КонецФункции

Функция ПолучитьТабличныйДокументПеречняВСД(ДокументРеализации, ПрефиксТестовогоСервера) Экспорт//также используется в макете ВнешняяПечатнаяФормаВСД
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_Сообщения.Хранилище
	               |ИЗ
	               |	Справочник.КонтурEDI_Сообщения КАК КонтурEDI_Сообщения
	               |ГДЕ
	               |	КонтурEDI_Сообщения.Документ = &Документ
	               |	И КонтурEDI_Сообщения.ТипСообщения = ""M_DES""
	               |	И НЕ КонтурEDI_Сообщения.ПометкаУдаления
	               |	И КонтурEDI_Сообщения.Архив = ИСТИНА";
	Запрос.УстановитьПараметр("Документ", ДокументРеализации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Сообщение = Выборка.Хранилище.Получить();
	Иначе
		Сообщить("Данная отгрузка не зарегистрирована в ГИС.Меркурий. Невозможно распечатать ВСД!");
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб = Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	
	Макет = ПолучитьМакет("ПечатьВСД");
	ОбластьДляПечати = Макет.ПолучитьОбласть("ВСДСтрока");
	текДата = ТекущаяДата();
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	Если ЗначениеЗаполнено(Сообщение.Документ1С) Тогда
		ОбластьШапка.Параметры.Номер = Сообщение.Документ1С.Номер;
		ОбластьШапка.Параметры.Дата = Формат(Сообщение.Документ1С.Дата, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьШапка);	
			
	Для Каждого стрТовары из Сообщение.Товары Цикл
		
		Если Не ЗначениеЗаполнено(стрТовары.ВетСертификатUUID) Тогда
			Продолжить;
		КонецЕсли;
		
		УИД = стрТовары.ВетСертификатUUID;
		Если СтрДлина(УИД)<39 Тогда
			УИД = СтрЗаменить(УИД, "-", "");
			Если СтрДлина(УИД) = 32 Тогда
				УИД = Лев(УИД, 4)+"-"+Сред(УИД, 5, 4)+"-"+Сред(УИД, 9, 4)+"-"+Сред(УИД, 13, 4)+"-"+Сред(УИД, 17, 4)+"-"+Сред(УИД, 21, 4)+"-"+Сред(УИД, 25, 4)+"-"+Сред(УИД, 29, 4)
			КонецЕсли;
		КонецЕсли;

		QRСтрока ="https://"+ПрефиксТестовогоСервера+"mercury.vetrf.ru/pub/operatorui?_action=findVetDocumentFormByUuid&uuid="+УИД;
		ДанныеQRКода = ДанныеQRКода(QRСтрока, 1, 120);
		
		Если НЕ ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
			
			Сообщить("Не удалось сформировать QR код");
			
			Возврат Неопределено;
		КонецЕсли;

		ОбластьДляПечати.Параметры.ИдентификаторВСД = ВРЕГ(УИД);
		ОбластьДляПечати.Параметры.Наименование = стрТовары.Номенклатура.Наименование;
		ОбластьДляПечати.Параметры.СрокГодности = стрТовары.СрокГодности;
		ОбластьДляПечати.Параметры.ДатаПроизводства = стрТовары.ДатаПроизводства;
		ОбластьДляПечати.Параметры.Количество = ""+стрТовары.Количество + " ("+стрТовары.ЕдиницаИзмерения+")";
	
		КартинкаQRКода = Новый Картинка(ДанныеQRКода);
		
		ОбластьДляПечати.Рисунки.КартинкаQRКода.Картинка = КартинкаQRКода;
		
		Попытка
			Если НЕ ТабДокумент.ПроверитьВывод(ОбластьДляПечати) Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		ТабДокумент.Вывести(ОбластьДляПечати);
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции



Функция ПолучитьДопРеквизитЭлементаДопСправочника(Элемент,ИмяРеквизита) Экспорт
	
	ДопРеквизиты = Элемент.Ссылка.ДополнительныеРеквизиты;
	СтрокаСРеквизитом = ДопРеквизиты.Найти(ИмяРеквизита,"ИмяРеквизита"); 
	Если СтрокаСРеквизитом = Неопределено Тогда 
		Возврат Неопределено;
	Иначе
		Возврат СтрокаСРеквизитом.Значение;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьАртикулНаименованиеИШтрихкодТаблицыПродукцииПроизводителя(ТаблицаПродукцияПроизводителя) Экспорт

	СтандартнаяОбработкаEDI = Истина;
	ОбработкаСобытияПодключаемогоМодуля("МеркурийЗаполнитьТаблицуПродукцииПроизводителя",СтандартнаяОбработкаEDI,
			Новый Структура("ТаблицаПродукцияПроизводителя",	ТаблицаПродукцияПроизводителя));
			

КонецПроцедуры

Функция ПолучитьСписокНашихПлощадок() Экспорт//возвращаемСписок Площадок - элементов справочника

	Возврат ПолучитьСписокНашихЭлементовСправочника("МеркурийПлощадка");	

КонецФункции // ПолучитьСписокНашихПлощадок()

Функция ПолучитьСписокНашихОрганизаций() Экспорт

	Возврат ПолучитьСписокНашихЭлементовСправочника("МеркурийХС");	

КонецФункции // ПолучитьСписокНашихОрганизаций()

Функция ПолучитьСписокНашихЭлементовСправочника(ИмяСправочника) Экспорт//возвращаемСписок Площадок - элементов справочника

	ТаблицаВсехЭлементов = ПолучитьСписокЭлементовСправочникаМеркурий(ИмяСправочника);
	НашиЭлементы = ТаблицаВсехЭлементов.НайтиСтроки(Новый Структура("Наш",Истина));
	
	СписокНашихЭлементов = Новый СписокЗначений;
	
	Для Каждого НашЭлемент Из НашиЭлементы Цикл
		НоваяПлощадка = СписокНашихЭлементов.Добавить(НашЭлемент.ДопСправочникСсылка,НашЭлемент.Наименование+" / "+НашЭлемент.GUID);
	КонецЦикла;
	
	Возврат СписокНашихЭлементов

КонецФункции // ПолучитьСписокНашихПлощадок()

Функция ПолучитьКаталогПродукцииПоПлощадке(GUIDПлощадки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтурEDI_СоответствияТоваров.Номенклатура,
	               |	КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК subProductGUID
	               |ПОМЕСТИТЬ СопоставленныеПозиции
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
	               |ГДЕ
	               |	КонтурEDI_СоответствияТоваров.Партнер = &ПартнерМеркурий
	               |	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> """"
	               |	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> ""00000000-0000-0000-0000-000000000000""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеРеквизиты.Значение КАК UUID,
	               |	КонтурEDI_ДополнительныеРеквизиты.Объект КАК Номенклатура
	               |ПОМЕСТИТЬ ВТ_СохраненныеproductItemUUID
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеРеквизиты.Свойство = &СвойствоproductItemUUID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КонтурEDI_ДополнительныеРеквизиты.Значение КАК GUID,
	               |	КонтурEDI_ДополнительныеРеквизиты.Объект КАК Номенклатура
	               |ПОМЕСТИТЬ ВТ_СохраненныеproductItemGUID
	               |ИЗ
	               |	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	               |ГДЕ
	               |	КонтурEDI_ДополнительныеРеквизиты.Свойство = &СвойствоproductItemGUID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СопоставленныеПозиции.Номенклатура, ВТ_СохраненныеproductItemUUID.Номенклатура) КАК Номенклатура,
	               |	ЕСТЬNULL(ВТ_СохраненныеproductItemUUID.UUID, """") КАК productItemUUID,
	               |	СопоставленныеПозиции.subProductGUID,
	               |	ЕСТЬNULL(ВТ_СохраненныеproductItemGUID.GUID, """") КАК productItemGUID
	               |ИЗ
	               |	СопоставленныеПозиции КАК СопоставленныеПозиции
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СохраненныеproductItemUUID КАК ВТ_СохраненныеproductItemUUID
	               |		ПО СопоставленныеПозиции.Номенклатура = ВТ_СохраненныеproductItemUUID.Номенклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СохраненныеproductItemGUID КАК ВТ_СохраненныеproductItemGUID
	               |		ПО СопоставленныеПозиции.Номенклатура = ВТ_СохраненныеproductItemGUID.Номенклатура";
	
	Запрос.УстановитьПараметр("СвойствоproductItemUUID", "ПлощадкаUUID"+GUIDПлощадки);
	Запрос.УстановитьПараметр("СвойствоproductItemGUID", "GUIDнаПлощ"+GUIDПлощадки);
	Запрос.УстановитьПараметр("ПартнерМеркурий", ПартнерМеркурий());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Результат.Выгрузить();	
	
КонецФункции

Функция ПересоздатьКолонкуТаблицы(Таблица,ИмяКолонки,ТипКолонки = "Булево") Экспорт
	
	Если Таблица.Колонки.Найти(ИмяКолонки)= Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов(ТипКолонки));
	Иначе
		Таблица.Колонки.Удалить(Таблица.Колонки.Найти(ИмяКолонки));
		Таблица.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов(ТипКолонки));
	КонецЕсли;
	
КонецФункции

Процедура ОпубликоватьКаталогПлощадки(GUIDПлощадки,ТаблицаПродукцияПроизводителя) Экспорт
	
	ОсновнойМодуль.Состояние_КонтурEDI("Публикую каталог.");
	Всего = ТаблицаПродукцияПроизводителя.Количество();
	й=0;
	ПересоздатьКолонкуТаблицы(ТаблицаПродукцияПроизводителя,"applicationId","Строка");
	
	Для Каждого СтрокаТаблицыПродукции Из ТаблицаПродукцияПроизводителя Цикл
		
		Если НЕ СтрокаТаблицыПродукции.Пометка Тогда
			Продолжить;
		КонецЕсли;		

		й=й+1; ОсновнойМодуль.Состояние_КонтурEDI(""+й+"/"+Всего);
		//определим принадлежность
		Если Не ЕстьЧтоОбновлятьПоТовару(СтрокаТаблицыПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Значениезаполнено(СтрокаТаблицыПродукции.productItemUUID) Тогда
			Если Значениезаполнено(СтрокаТаблицыПродукции.Номенклатура) ТОгда
				ТипОперацииСТоваром = "UPDATE";
			Иначе
				ТипОперацииСТоваром = "DELETE";
			КонецЕсли;
		Иначе
			ТипОперацииСТоваром = "CREATE";
		КонецЕсли;
		
		ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),,GUIDПлощадки);
		//собираем табличку (пока что только 1 строка разрешена сервисом) 
		modificationOperation = 	КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/production", 			"PSLModificationOperation");
		modificationOperation.type = ТипОперацииСТоваром;
		enterprise = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "Enterprise");
		xmlЗаполнитьЗначениеXDTO(enterprise,"GUID",GUIDПлощадки);
		modificationOperation.enterprise = enterprise;
		resultingList =  КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/production",  "ProductItemList");
		resultingList.count = 1;
		resultingList.total = 1;
		resultingList.offset = 0;
		ProductItem = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/production",  "ProductItem");
		ProductItem.name = СтрокаТаблицыПродукции.Наименование;
		ProductItem.code = СтрокаТаблицыПродукции.Артикул;
		ProductItem.subProduct = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/production",  "SubProduct");
		ProductItem.product = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/argus/production",  "Product");
		xmlЗаполнитьЗначениеXDTO(ProductItem,"correspondToGost",СтрокаТаблицыПродукции.СоответствуетГОСТу);
		//xmlЗаполнитьЗначениеXDTO(ProductItem,"correspondToGost",Истина);
		xmlЗаполнитьЗначениеXDTO(ProductItem,"gost",СтрокаТаблицыПродукции.GOST);
		
		Если ЗначениеЗаполнено(СтрокаТаблицыПродукции.productItemUUID) Тогда
			xmlЗаполнитьЗначениеXDTO(ProductItem,"uuid",СтрокаТаблицыПродукции.productItemUUID);
		КонецЕсли;
		
		ProductItem.subProduct.GUID = ?(ТипОперацииСТоваром = "DELETE",СтрокаТаблицыПродукции.subProductGuidМеркурий,СтрокаТаблицыПродукции.subProductGuid);
		СтруктураВерхнихУровней = ПолучитьproductGUIDиproductTypeПоsubProductGUID(ProductItem.subProduct.GUID);
		
		Если Не ЗначениеЗаполнено(СтруктураВерхнихУровней.productGUID) ИЛИ НЕ(СтруктураВерхнихУровней.productType) Тогда
			Сообщить("ОООпс, проблема с subProductGUID "+СтрокаТаблицыПродукции.subProductGuid+" - кажется что он, либо неактуален, либо не соответствует выбранным в настройке типам (1 уровень классификации)");
			Продолжить;
		КонецЕсли;
		
		ProductItem.product.GUID = СтруктураВерхнихУровней.productGUID; 
		ProductItem.productType = СтруктураВерхнихУровней.productType; 
		resultingList.productItem.Добавить(ProductItem);
		
		Если ТипОперацииСТоваром = "DELETE" Тогда
			modificationOperation.affectedList = resultingList;	
		Иначе
			modificationOperation.resultingList = resultingList;	
		КонецЕсли;
		
		ПараметрыФункции = Новый Структура();
		ПараметрыФункции.Вставить("Наименование", 		"modifyProducerStockListRequest");
		ПараметрыФункции.Вставить("localTransactionId", "IncomingRobot");
		ПараметрыФункции.Вставить("initiator", 			ПараметрыПодключения.user);
		ПараметрыФункции.Вставить("modificationOperation",		modificationOperation);
		
		//ПараметрыПодключения.ListOptions.offset = 0;
		//
		//ПараметрыФункции.Вставить("listOptions", ПараметрыПодключения.ListOptions);		
		
		//Не Дожидаться результата, а обойти потом
		Ответ = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "ModifyProducerStockListRequest", Ложь,СтрокаТаблицыПродукции.applicationId);
		
		Если ТипЗнч(Ответ) <> Тип("ОбъектXDTO") Тогда  //операция не прошла
			Продолжить;	
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверитьВыполнениеТаблицыТранзакций(ТаблицаПродукцияПроизводителя,ПараметрыПодключения,GUIDПлощадки);
	
КонецПроцедуры

Функция ПроверитьВыполнениеТаблицыТранзакций(ТаблицаСодержащаяКолонкуapplicationId,ПараметрыПодключения,GUIDПлощадки)
	//пока что задача - только выгураться в комментарии что что-то пошло не так
	
	Если ТаблицаСодержащаяКолонкуapplicationId.Колонки.Найти("applicationId") <> Неопределено Тогда 
		й=0;
		Всего = ТаблицаСодержащаяКолонкуapplicationId.количество();
		Для Каждого СтрокаСТранзакцией Из ТаблицаСодержащаяКолонкуapplicationId Цикл
			й=й+1; ОсновнойМодуль.Состояние_КонтурEDI(""+й+"/"+Всего+" Проверяю успешность публикации...");
			Если ЗначениеЗаполнено(СтрокаСТранзакцией.applicationId) Тогда 
				MercAppDO = ЗапроситьРезультатОбработкиЗаявкиМеркурий(СтрокаСТранзакцией.applicationId,ПараметрыПодключения,Истина);
				ЗапомнитьUUIDиGUIDНоменклатуры(СтрокаСТранзакцией,MercAppDO,GUIDПлощадки);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции


Функция ЕстьЧтоОбновлятьПоТовару(ДанныеСтроки)Экспорт
	
	ЕстьРасхождения = Ложь;
	
	МассивСравниваемых=	ОсновнойМодуль.РазложитьСтроку(ПолучитьПоляСверкиСтрокиКаталогаПлощадки(),",");
	
	Для Каждого ЭлементСравнения Из МассивСравниваемых Цикл
		ЕстьРасхождение = ложь;
		Выполнить("ЕстьРасхождение = ДанныеСтроки."+ЭлементСравнения+"<> ДанныеСтроки."+ЭлементСравнения+"Меркурий");
		Если ЕстьРасхождение тогда
			ЕстьРасхождения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьРасхождения;
	
КонецФункции

Функция ПолучитьПоляСверкиСтрокиКаталогаПлощадки() Экспорт
	
	Возврат "GOST,Наименование,subProductGuid,GTIN,СоответствуетГОСТу";
	
КонецФункции

Функция ПрочитатьКаталогПлощадки(GUIDПлощадки) Экспорт
	
	ОсновнойМодуль.Состояние_КонтурEDI("Вычитываю данные Меркурий");
	МассивSubProduct = ПолучитьМассивСопоставленныхSubProduct();
	
	ТаблицаПродукцияПроизводителя = новый ТаблицаЗначений;
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("Артикул");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("Наименование");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("GTIN");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("productItemUUID");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("СоответствуетГОСТу");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("GOST");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("subProductGuid");
	ТаблицаПродукцияПроизводителя.Колонки.Добавить("productItemGUID");
	
	//GetProductItemList
	
	Прокси = ПолучитьWSПроксиСправочникПродукции();
	ТипWSПараметра = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("ListOptions");
	ListOptions = Прокси.ФабрикаXDTO.Создать(ТипWSПараметра);
	ListOptions.count = 1000;	
	
	Для Каждого ВариантSubProduct Из МассивSubProduct Цикл	
		Смещение = 0;
		Пока Истина Цикл
			#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			ListOptions.offset = Смещение;
			ТипWSПараметраsubProductUUID = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/base").Получить("UUID");
			subProduct = Прокси.ФабрикаXDTO.Создать(ТипWSПараметраsubProductUUID);
			Попытка
				Ответ = Прокси.GetProductItemList(ListOptions,ВариантSubProduct,GUIDПлощадки);
			Исключение
				//Сообщить(ОписаниеОшибки());
				Прервать;  // на рефакторинг - сделать как в EDI 2 попытки
			КонецПопытки;
			
			Для Каждого стр из Ответ.productItem Цикл
				#Если Клиент Тогда
				ОбработкаПрерыванияПользователя();
				#КонецЕсли
				НоваяСтрокаТаблицы = ТаблицаПродукцияПроизводителя.Добавить();
				НоваяСтрокаТаблицы.Артикул 				= стр.code;
				НоваяСтрокаТаблицы.Наименование 		= стр.name;
				НоваяСтрокаТаблицы.СоответствуетГОСТу 	= стр.correspondToGost;
				НоваяСтрокаТаблицы.GOST 				= стр.GOST;
				НоваяСтрокаТаблицы.productItemUUID 		= стр.UUID;
				НоваяСтрокаТаблицы.productItemGUID 		= стр.GUID;
				НоваяСтрокаТаблицы.subProductGuid 		= стр.subProduct.Guid;
			КонецЦикла;
			
			Если Ответ.Count + Смещение >= Ответ.Total Тогда 
				Прервать; 
			КонецЕсли;
			
			Смещение = Смещение + 1000;
			
		КонецЦикла;
	КонецЦикла;
	
	ОсновнойМодуль.Состояние_КонтурEDI("Продукция прощадки Прочитана, сопоставляю");
	Возврат ТаблицаПродукцияПроизводителя;
	
КонецФункции

Функция ПолучитьМассивСопоставленныхSubProduct() Экспорт

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	КонтурEDI_СоответствияТоваров.КодТовараПартнера КАК subPruductGUID
               |ИЗ
               |	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
               |ГДЕ
               |	КонтурEDI_СоответствияТоваров.Партнер = &Партнер
               |	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> ""00000000-0000-0000-0000-000000000000""";

Запрос.УстановитьПараметр("Партнер",ПартнерМеркурий() );

Результат = Запрос.Выполнить();

Возврат Результат.Выгрузить().ВыгрузитьКолонку("subPruductGUID");	

КонецФункции // ПолучитьМассивСопоставленныхSubProduct()

Процедура ЗаписатьСообщение(Сообщение) Экспорт
	
	СообщениеОбъект = Сообщение.СообщениеСсылка.ПолучитьОбъект();
	СообщениеОбъект.Хранилище = Новый ХранилищеЗначения(Сообщение,Новый СжатиеДанных(9));
	
	Если Сообщение.Статус = "Аннулирован" ИЛИ  Сообщение.Статус = "АннулированЧастично" Тогда 
		СообщениеОбъект.Статус = Сообщение.Статус;	
	КонецЕсли;
	
	СообщениеОбъект.Записать();
	
КонецПроцедуры

Процедура ПрисвоитьСоответствиеНоменклатуры(Ссылка,GUID,НаименованиеМеркурий,ПартнерМеркурий,Коэффициент = неопределено) Экспорт
	ОчиститьСоответствиеНоменклатуры(Ссылка,GUID,НаименованиеМеркурий,ПартнерМеркурий,Коэффициент = неопределено);
	
	МенеджерЗаписиСоответствийТоваров = РегистрыСведений.КонтурEDI_СоответствияТоваров.СоздатьМенеджерЗаписи();
	
		МенеджерЗаписиСоответствийТоваров.Партнер						= ПартнерМеркурий;
		МенеджерЗаписиСоответствийТоваров.Номенклатура					= Ссылка;
		
			Если ОсновнойМодуль.ИмяКонфигурации1С = "ТКПТ" Тогда
				ЕдиницаИзмерения = Ссылка.ОсновнаяЕдиницаИзмерения;
				
			ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "ДалионУМ" Тогда
				ЕдиницаИзмерения = Ссылка.БазоваяЕдиницаИзмерения;		
				
			ИначеЕсли НЕ ОсновнойМодуль.ИмяКонфигурации1С = "БП" Тогда
				ЕдиницаИзмерения = Ссылка.ЕдиницаХраненияОстатков;

			ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "УФ_БП" Тогда
				ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;

			ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "УФ_УТ" Тогда
				ЕдиницаИзмерения = Ссылка.ЕдиницаИзмерения;
				
			Иначе
				ЕдиницаИзмерения = Ссылка.БазоваяЕдиницаИзмерения;
			КонецЕсли;
		
		МенеджерЗаписиСоответствийТоваров.Единица						= ЕдиницаИзмерения;
		
		//МенеджерЗаписиСоответствийТоваров.Прочитать();
		//МенеджерЗаписиСоответствийТоваров.Удалить();
		
	
		МенеджерЗаписиСоответствийТоваров.КодТовараПартнера				= СокрЛП(GUID);
		МенеджерЗаписиСоответствийТоваров.НаименованиеПартнера			= СокрЛП(НаименованиеМеркурий);
		
		Если ЗначениеЗаполнено(Коэффициент) Тогда
			МенеджерЗаписиСоответствийТоваров.КоэффициентEDIВ1С			= Число(Коэффициент);
		КонецЕсли;
		
		МенеджерЗаписиСоответствийТоваров.Записать();
		

КонецПроцедуры

Процедура ОчиститьСоответствиеНоменклатуры(Ссылка,GUID=Неопределено,НаименованиеМеркурий = Неопределено,ПартнерМеркурий=Неопределено,Коэффициент = неопределено)
	
	Если ПартнерМеркурий = Неопределено Тогда 
		ПартнерМеркурий = ПартнерМеркурий();
	КонецЕсли;
	
	НаборЗаписейСоответствийТоваров = РегистрыСведений.КонтурEDI_СоответствияТоваров.СоздатьНаборЗаписей();
	
	НаборЗаписейСоответствийТоваров.Отбор.Партнер.Установить(ПартнерМеркурий);
	НаборЗаписейСоответствийТоваров.Отбор.Номенклатура.Установить(Ссылка);
	
	//Если ОсновнойМодуль.ИмяКонфигурации1С = "ТКПТ" Тогда
	//	ЕдиницаИзмерения = Ссылка.ОсновнаяЕдиницаИзмерения;
	//	
	//ИначеЕсли ОсновнойМодуль.ИмяКонфигурации1С = "ДалионУМ" Тогда
	//	ЕдиницаИзмерения = Ссылка.БазоваяЕдиницаИзмерения;		
	//	
	//ИначеЕсли НЕ ОсновнойМодуль.ИмяКонфигурации1С = "БП" Тогда
	//	ЕдиницаИзмерения = Ссылка.ЕдиницаХраненияОстатков;
	//	
	//Иначе
	//	ЕдиницаИзмерения = Ссылка.БазоваяЕдиницаИзмерения;
	//КонецЕсли;
	
	//НаборЗаписейСоответствийТоваров.Отбор.Единица.Установить(ЕдиницаИзмерения);
	
	НаборЗаписейСоответствийТоваров.Прочитать();
	Если НаборЗаписейСоответствийТоваров.Количество()>0 Тогда 
		НаборЗаписейСоответствийТоваров.Очистить();
		НаборЗаписейСоответствийТоваров.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ВсеСтрокиТоваровАннулированы(Товары) Экспорт
	
	Для каждого СтрокаТоваров Из Товары Цикл
	
		Если СтрокаТоваров.Аннулирован<> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ВсеСтрокиСообщенияАннулированы()


Функция ЗаполнитьДанныеДляИнвентаризации(ДатаЗапросаОстатков1С,ТабИнвентаризация,Организация,ОрганизацияGUID,Площадка,ПлощадкаGUID) Экспорт 

	ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьИнвентаризацию",,Новый Структура("ДатаЗапросаОстатков1С,ТабИнвентаризация,Организация,ОрганизацияGUID,Площадка,ПлощадкаGUID",ДатаЗапросаОстатков1С,ТабИнвентаризация,Организация,ОрганизацияGUID,Площадка,ПлощадкаGUID));

КонецФункции // ЗаполнитьДанныеДляИнвентаризации()

Функция ОтразитьРезультатыИнвентаризации(Инвентаризация,GUIDПлощадки,GUIDХозСуб,ДатаИнвентаризации) Экспорт
	
	МассивapplicationId = Новый Массив;
	//ЗапроситьРезультатОбработкиЗаявкиМеркурий(applicationId,ПараметрыПодключения,ДождатьсяРезультата)
	
	КвантИнвентаризации = 100;  //от 100 до 500
	
	ВыделенныеСтрокиКОбработкеИнвентаризации = Инвентаризация.НайтиСтроки(Новый Структура("Пометка",Истина));
	
	ОсновнойМодуль.Состояние_КонтурEDI("Публикую инвентаризацию");
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),GUIDХозСуб,GUIDПлощадки);
	
	ПараметрыТранзакции = Новый Структура();
	
	ПараметрыТранзакции.Вставить("localTransactionId",	"IncomingRobot");
	ПараметрыТранзакции.Вставить("initiator", 			ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),GUIDХозСуб).user);
	
	businessEntity =  КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "BusinessEntity");
	xmlЗаполнитьЗначениеXDTO(businessEntity,"GUID",GUIDХозСуб);
	ПараметрыТранзакции.Вставить("businessEntity",		businessEntity);
	
	enterprise = КорневаяФабрика.Создать("http://api.vetrf.ru/schema/cdm/cerberus/enterprise",  "Enterprise");
	xmlЗаполнитьЗначениеXDTO(enterprise,"GUID",GUIDПлощадки);
	ПараметрыТранзакции.Вставить("enterprise", 			enterprise);	
	
	//inventoryDate = ПолучитьМеркурийComplexDate(ДатаИнвентаризации);     КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "StockEntry")
	ПараметрыТранзакции.Вставить("inventoryDate", 		ОсновнойМодуль.Дата1С_в_ДатаXML(ДатаИнвентаризации));
	
	ПараметрыТранзакции.Вставить("responsible", 		ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),GUIDХозСуб).user);
	
	ОбщееКоличествоСтрок = ВыделенныеСтрокиКОбработкеИнвентаризации.Количество();
	КоличествоИнвентаризаций = Окр((ОбщееКоличествоСтрок/КвантИнвентаризации)+0.499999,0,РежимОкругления.Окр15как20);
	
	Для Смещение=0 По КоличествоИнвентаризаций-1 Цикл
		
		//сами различия
		stockDiscrepancy = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document",  "StockDiscrepancy");
		stockDiscrepancy.resultingList = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "StockEntryList");
		
		ОтразилиСтрок = 0;
		
		Для й = 1 По КвантИнвентаризации Цикл
			Если (Смещение*КвантИнвентаризации)+й > ОбщееКоличествоСтрок Тогда 
				Прервать;
			КонецЕсли;
			
			СтрокаИнвентаризации = ВыделенныеСтрокиКОбработкеИнвентаризации[(Смещение*КвантИнвентаризации)+й-1];	
			
			Если СтрокаИнвентаризации.Пометка = Ложь Тогда Продолжить; КонецЕсли; //перестраховка
			
			Если Значениезаполнено(СтрокаИнвентаризации.UUID_Партии) Тогда 
				МасиивПодходящихСтрок = ОсновнойМодуль.EDI_РазложитьСтрокуВМассивСлов(СтрокаИнвентаризации.UUID_Партии,",");
				
				
				Если МасиивПодходящихСтрок.Количество() = 1 Тогда
					//можем как уменьшить так и увеличить количество
					StockEntry	= КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "StockEntry");
					xmlЗаполнитьЗначениеXDTO(stockEntry,"uuid",МасиивПодходящихСтрок[0]);
					ЗаписатьСтрокуИнвентаризацииМеркурий_XDTO(StockEntry,СтрокаИнвентаризации,GUIDХозСуб); // эта запись либо расходует либо приходует товар
					ОтразилиСтрок = ОтразилиСтрок +1;
					stockDiscrepancy.resultingList.stockEntry.Добавить(StockEntry);
					
				Иначе
					//мы схлопнули позиции в 1 строку и потеряли разбивку по количеству.
					//такие записи мы можем только списать
					Если СтрокаИнвентаризации.Количество = 0 Тогда 
						Для Каждого ЭлементМассиваUUID_Партии Из МасиивПодходящихСтрок Цикл
							StockEntry	= КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "StockEntry");
							xmlЗаполнитьЗначениеXDTO(stockEntry,"uuid",ЭлементМассиваUUID_Партии);
							ЗаписатьСтрокуИнвентаризацииМеркурий_XDTO(StockEntry,СтрокаИнвентаризации,GUIDХозСуб); // эта запись либо расходует либо приходует товар
							ОтразилиСтрок = ОтразилиСтрок +1;
							stockDiscrepancy.resultingList.stockEntry.Добавить(StockEntry);
							
						КонецЦикла;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				//эта запись гарантированно приходует товар
				StockEntry	= КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "StockEntry");
				ЗаписатьСтрокуИнвентаризацииМеркурий_XDTO(StockEntry,СтрокаИнвентаризации,GUIDХозСуб);
				ОтразилиСтрок = ОтразилиСтрок +1;
				stockDiscrepancy.resultingList.stockEntry.Добавить(StockEntry);
			КонецЕсли;
			
		КонецЦикла;
		ВсегоСтрок = stockDiscrepancy.resultingList.stockEntry.Количество();
		
		stockDiscrepancy.resultingList.count = ВсегоСтрок;
		stockDiscrepancy.resultingList.total = ВсегоСтрок;
		stockDiscrepancy.resultingList.offset = 0;  //рано или поздно наткнемся на 1000+строк и придется разбивать
		
		
		stockDiscrepancys = Новый СписокЗначений();
		stockDiscrepancys.Добавить(stockDiscrepancy);
		МассивСписковXDTO = Новый Массив();
		МассивСписковXDTO.Добавить("stockDiscrepancy");
		МассивСписковXDTO.Добавить("discrepancyReport");
		
		ПараметрыТранзакции.Вставить("stockDiscrepancy", 	stockDiscrepancys);     //это список XDTO в терминах аппликэйшена 
		
		discrepancyReport = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/mercury/vet-document", "DiscrepancyReport");
		discrepancyReport.description = "Тестовая Инвентаризация";
		discrepancyReports = Новый СписокЗначений();
		discrepancyReports.Добавить(discrepancyReport);
		ПараметрыТранзакции.Вставить("discrepancyReport", 	discrepancyReports);	//это список XDTO в терминах аппликэйшена 
		
		
		
		ПараметрыТранзакции.Вставить("Наименование", 		"ResolveDiscrepancyRequest");
		
		ПараметрыТранзакции.Вставить("МассивСписков", 		МассивСписковXDTO);	
		
		applicationId = "";
		ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыТранзакции, ПараметрыПодключения, "ResolveDiscrepancyRequest",Ложь,applicationId);
		МассивapplicationId.добавить(applicationId);
		
		Сообщить("Отправлена Инвентаризация на "+ВсегоСтрок+" строк, на её обработку серверу потребуется какое-то время");
	КонецЦикла;
	
	Сообщить("Ожидаю пока Меркурий обработает опубликованную инвентаризаию");
	Для Каждого applicationId Из МассивapplicationId Цикл
		Пока Истина Цикл
		MercAppDO = ЗапроситьРезультатОбработкиЗаявкиМеркурий(applicationId,ПараметрыПодключения,Истина);
			
			Если MercAppDO.Status = "REJECTED" Тогда
				//Пока что хотя быСообщим об ошибках
				Для Каждого Ошибка Из MercAppDO.errors.error Цикл
					Сообщить(""+applicationId+" Заявка отклонена: "+Ошибка.code+Ошибка.__content)
				КонецЦикла;
				Прервать;
			ИначеЕсли MercAppDO.Status = "COMPLETED" Тогда
				Сообщить(""+applicationId+" Успешно выполнен");
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	
	Возврат Истина;
	
КонецФункции // ОтразитьРезультатыИнвентаризации()

//Форма настроек - общие процедуры для ОФ и УФ

Процедура НастройкиЗаписатьЕдиницыИзмерения(ЕдиницыИзмерения) Экспорт
	
	Для Каждого СтрокаЕИ Из ЕдиницыИзмерения Цикл
		
		Если Значениезаполнено(СтрокаЕИ.Соответствие) Тогда
			
			Если НЕ Значениезаполнено(СтрокаЕИ.Ссылка) Тогда
				НовыйЭлемент = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
				НовыйЭлемент.Наименование = СтрокаЕИ.Наименование;
				НовыйЭлемент.ИмяСправочника = "Меркурий_КлассификаторЕдиницИзмерения";
				НовыйЭлемент.Записать();
				СтрокаЕИ.Ссылка = НовыйЭлемент.Ссылка;
			КонецЕсли;
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИ_GUID",СтрокаЕИ.GUID);
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИ_UUID",СтрокаЕИ.UUID);
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИ_Наименование",СтрокаЕИ.Наименование);
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИ_Соответствие",СтрокаЕИ.Соответствие);
			
			
		Иначе
			Если НЕ Значениезаполнено(СтрокаЕИ.Ссылка) Тогда
				//и не было 
			Иначе
			ОсновнойМодуль.УдалитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИ_Соответствие");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура НастройкиЗаписатьЕдиницыИзмеренияУпаковок(ЕдиницыИзмеренияУпаковок) Экспорт
	
	Для Каждого СтрокаЕИ Из ЕдиницыИзмеренияУпаковок Цикл
		
		Если Значениезаполнено(СтрокаЕИ.Соответствие) Тогда
			
			Если НЕ Значениезаполнено(СтрокаЕИ.Ссылка) Тогда
				НовыйЭлемент = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
				НовыйЭлемент.Наименование = СтрокаЕИ.Наименование;
				НовыйЭлемент.ИмяСправочника = "Меркурий_КлассификаторЕдиницИзмеренияУпаковок";
				НовыйЭлемент.Записать();
				СтрокаЕИ.Ссылка = НовыйЭлемент.Ссылка;
			КонецЕсли;
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИУп_UUID",СтрокаЕИ.UUID);
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИУп_Наименование",СтрокаЕИ.Наименование);
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИУп_Соответствие",СтрокаЕИ.Соответствие);
			
			
		Иначе
			Если НЕ Значениезаполнено(СтрокаЕИ.Ссылка) Тогда
				//и не было 
			Иначе
			ОсновнойМодуль.УдалитьЗначениеСвойстваОбъекта(СтрокаЕИ.Ссылка,"Меркурий_ЕИУп_Соответствие");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;


КонецПроцедуры

Процедура НастройкиХСЗаполнитьАвтоматически(ХозяйствующиеСубъекты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслуг.Контрагент
	|ПОМЕСТИТЬ ВТ_ДокументыПриходРасход
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Дата МЕЖДУ &ДатаС И &ДатаПо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслуг.Контрагент
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаС И &ДатаПо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДокументыПриходРасход.Контрагент
	|ПОМЕСТИТЬ ВТ_ДокументыПриходРасходУникальные
	|ИЗ
	|	ВТ_ДокументыПриходРасход КАК ВТ_ДокументыПриходРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Значение
	|ПОМЕСТИТЬ ВТ_НастроенныеХС
	|ИЗ
	|	Справочник.КонтурEDI_ДополнительныеСправочники.ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = ""Объект""
	|	И КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = ""МеркурийХС""
	|	И НЕ КонтурEDI_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ПометкаУдаления//МУФ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыПриходРасходУникальные.Контрагент
	|ИЗ
	|	ВТ_ДокументыПриходРасходУникальные КАК ВТ_ДокументыПриходРасходУникальные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастроенныеХС КАК ВТ_НастроенныеХС
	|		ПО ВТ_ДокументыПриходРасходУникальные.Контрагент = ВТ_НастроенныеХС.Значение
	|ГДЕ
	|	ВТ_НастроенныеХС.Значение ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ДатаС", ДобавитьМесяц(ТекущаяДата(),-3));
	Запрос.УстановитьПараметр("ДатаПо",ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ВсегоКонтрагентовДляПроверки = Выборка.Количество();
	й=0;
	Пока Выборка.Следующий() Цикл
		й=й+1;
	    //Состояние(""+й+"/"+ВсегоКонтрагентовДляПроверки+" Пробую автоматически сопоставить ... "+Выборка.Контрагент);//МУФ
		Если ЗначениеЗаполнено(Выборка.Контрагент.ИНН) Тогда
			
			НайденоПоИНН = ПолучитьСписокХСПоИНН(Выборка.Контрагент.ИНН);
			Если НайденоПоИНН<>Неопределено И
				НайденоПоИНН.Количество() = 1 Тогда
				
				НоваяСтрока = ХозяйствующиеСубъекты.Добавить();
				НоваяСтрока.СвязанныйСправочник = Выборка.Контрагент;
				НоваяСтрока.Наименование 		= НайденоПоИНН[0].fullName;
				НоваяСтрока.GUID 				= НайденоПоИНН[0].guid;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастройкиПрисвоитьКоэффициент(НовыйКоэффициент, ВыделенныеСтроки) Экспорт
	
	Для каждого ВыделеннаяСтрокаНоменклатуры Из ВыделенныеСтроки Цикл
		
		Если ВыделеннаяСтрокаНоменклатуры.ЭтоГруппа = Ложь Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 	"ВЫБРАТЬ
			|	МАКСИМУМ(ЕСТЬNULL(КонтурEDI_СоответствияТоваров.КодТовараПартнера, """")) КАК GUID,
			|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.НаименованиеПартнера, """") КАК НаименованиеМеркурий,
			|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С КАК КоэффициентУмножения
			|ИЗ
			|	РегистрСведений.КонтурEDI_СоответствияТоваров КАК КонтурEDI_СоответствияТоваров
			|ГДЕ
			|	КонтурEDI_СоответствияТоваров.Номенклатура = &Номенклатура
			|	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> """"
			|	И КонтурEDI_СоответствияТоваров.КодТовараПартнера <> &НулевойGUID
			|	И КонтурEDI_СоответствияТоваров.Партнер = &ПартнерМеркурий
			|
			|СГРУППИРОВАТЬ ПО
			|	ЕСТЬNULL(КонтурEDI_СоответствияТоваров.НаименованиеПартнера, """"),
			|	КонтурEDI_СоответствияТоваров.КоэффициентEDIВ1С";
			
			Запрос.УстановитьПараметр("Номенклатура", ВыделеннаяСтрокаНоменклатуры.Ссылка);
			Запрос.УстановитьПараметр("НулевойGUID", НулевойGUID);
			Запрос.УстановитьПараметр("ПартнерМеркурий", ПартнерМеркурий());
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				ПрисвоитьСоответствиеНоменклатуры(ВыделеннаяСтрокаНоменклатуры.Ссылка,Выборка.GUID,Выборка.НаименованиеМеркурий,ПартнерМеркурий(),НовыйКоэффициент);
				//Если Коэффициент = "" тогда 
				//	ВвестиЧисло(Коэффициент,"Укажите на что умножить количество",10,4);
				//КонецЕсли;
				//ПрисвоитьКоэффициентСоответствияНоменклатуры(ВыделеннаяСтрокаНоменклатуры.Ссылка,Выборка.GUID,Выборка.НаименованиеМеркурий,ПартнерМеркурий(),НовыйКоэффициент);
				//Иначе
				//	Сообщить(""+ВыделеннаяСтрокаНоменклатуры.Ссылка+"Нельзя установить коэффициент без соответствия.");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура НастройкиЗаписатьУчетныеЗаписи(УчетныеЗаписи) Экспорт
	НачатьТранзакцию();
	
	ТаблицаТекХС = ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийУчетнаяЗапись", Неопределено);
	ТаблицаТекХС.колонки.Добавить("Наименование");
	ТаблицаТекХС.колонки.Добавить("IssuerId");
	ТаблицаТекХС.колонки.Добавить("ЕстьВСохраняемойТаблице");
	
	Для Каждого Стр Из ТаблицаТекХС Цикл
		Стр.Наименование = СокрЛП(Стр.Ссылка.Наименование);
		Стр.IssuerId = ПолучитьДопРеквизитЭлементаДопСправочника(Стр.Ссылка,"IssuerId");
	КонецЦикла;
	
	Для Каждого СтрокаУЗ Из УчетныеЗаписи Цикл
		НайденныйСуществующийЭлемент = ТаблицаТекХС.Найти(СтрокаУЗ.IssuerId,"IssuerId");
		
		Если ЗначениеЗаполнено(НайденныйСуществующийЭлемент) Тогда
			НайденныйСуществующийЭлемент.ЕстьВСохраняемойТаблице = Истина;
			ДопСправочникСсылка = НайденныйСуществующийЭлемент.Ссылка;
			НовыйЭлементСправочника = ДопСправочникСсылка.ПолучитьОбъект();
			НовыйЭлементСправочника.ИмяСправочника = "МеркурийУчетнаяЗапись";
		Иначе
			НовыйЭлементСправочника = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			НовыйЭлементСправочника.ИмяСправочника = "МеркурийУчетнаяЗапись";
			НовыйЭлементСправочника.Наименование = СтрокаУЗ.ЛогинAPI;
		КонецЕсли;
		
		ДопРеквизиты = НовыйЭлементСправочника.ДополнительныеРеквизиты; 
		
		Для Каждого Колонка Из УчетныеЗаписи.Колонки Цикл
			
			НайденныйДопРеквизит = ДопРеквизиты.Найти(Колонка.Имя,"ИмяРеквизита");
			Если НайденныйДопРеквизит=Неопределено Тогда
				НайденныйДопРеквизит = ДопРеквизиты.Добавить();
				НайденныйДопРеквизит.ИмяРеквизита = Колонка.Имя;
			КонецЕсли;
			ЗначениеВКолонке = "";
			Выполнить("ЗначениеВКолонке = СтрокаУЗ."+Колонка.Имя); 
			НайденныйДопРеквизит.Значение = СокрЛП(ЗначениеВКолонке);
			
		КонецЦикла;
		НовыйЭлементСправочника.Записать();
	КонецЦикла;
	
	Для Каждого Стр Из ТаблицаТекХС Цикл
		Если НЕ Стр.ЕстьВСохраняемойТаблице = Истина Тогда 
			ОсновнойМодуль.УдалитьЭлементСправочника("МеркурийУчетнаяЗапись",Стр.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры


Процедура НастройкиИнвентаризацияПрочитатьСведенияИзМеркурия(Инвентаризация, Организация, ОрганизацияGUID, Площадка, ПлощадкаGUID) Экспорт
	
	ОстаткиПоПлощадке = ПолучитьЗаписиСкладскогоЖурнала(ПлощадкаGUID).Скопировать();
	
	ПересоздатьКолонкуТаблицы(ОстаткиПоПлощадке,"НайденаВ1С");

	//обойдем данные 1С и найдем по ним соотв. Меркурия
	Для Каждого СтрокаПоБазе Из Инвентаризация Цикл   //если нет productItemUUID - то будем искать по пустому productItemUUID 
		НайденоВМеркурии = ОстаткиПоПлощадке.НайтиСтроки(Новый Структура("productItemUUID,ДатаВыпуска,ГоденДо,unitUUID,subProductGuid,НайденаВ1С,ВладелецGUID",СтрокаПоБазе.productItemUUID,СтрокаПоБазе.ДатаПроизводства,СтрокаПоБазе.СрокГодности,СтрокаПоБазе.unitUUID,СтрокаПоБазе.GUID,Ложь,СтрокаПоБазе.ОрганизацияGUID));
			Если НайденоВМеркурии.Количество()>0 Тогда
				КоличествоНакоплено = 0;
				СписокGUIDПартий = "";
				СписокUUIDПартий = "";
				Для Каждого НайденнаяВМеркурии Из НайденоВМеркурии Цикл
					НайденнаяВМеркурии.НайденаВ1С = Истина;
					КоличествоНакоплено = КоличествоНакоплено+НайденнаяВМеркурии.Остаток;
					СписокGUIDПартий = ?(СписокGUIDПартий = "",НайденнаяВМеркурии.GUID_Партии,СписокGUIDПартий+","+НайденнаяВМеркурии.GUID_Партии);
					СписокUUIDПартий = ?(СписокUUIDПартий = "",НайденнаяВМеркурии.UUID_Партии,СписокGUIDПартий+","+НайденнаяВМеркурии.UUID_Партии);
				КонецЦикла;
				СтрокаПоБазе.КоличествоТекМеркурий = КоличествоНакоплено;
				СтрокаПоБазе.GUID_Партии = СписокGUIDПартий;
				СтрокаПоБазе.UUID_Партии = СписокUUIDПартий;
				
			КонецЕсли;
		
	КонецЦикла;
		
	Для каждого СтрокаИзМеркурия Из ОстаткиПоПлощадке Цикл
	
		Если СтрокаИзМеркурия.НайденаВ1С = Ложь
			И ОрганизацияGUID = СтрокаИзМеркурия.ВладелецGUID Тогда
			
			НоваяСтрокаЕстьВМеркурииНетВ1С = Инвентаризация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЕстьВМеркурииНетВ1С,СтрокаИзМеркурия);
			НоваяСтрокаЕстьВМеркурииНетВ1С.GUID = СтрокаИзМеркурия.subProductGuid; 
			НоваяСтрокаЕстьВМеркурииНетВ1С.ДатаПроизводства = СтрокаИзМеркурия.ДатаВыпуска; 
			НоваяСтрокаЕстьВМеркурииНетВ1С.СрокГодности = СтрокаИзМеркурия.ГоденДо; 
			НоваяСтрокаЕстьВМеркурииНетВ1С.КоличествоТекМеркурий = СтрокаИзМеркурия.Остаток;
			НоваяСтрокаЕстьВМеркурииНетВ1С.организация = Организация;
			НоваяСтрокаЕстьВМеркурииНетВ1С.организацияGUID = ОрганизацияGUID;
			НоваяСтрокаЕстьВМеркурииНетВ1С.Площадка = Площадка;
			НоваяСтрокаЕстьВМеркурииНетВ1С.ПлощадкаGUID = ПлощадкаGUID;
			НоваяСтрокаЕстьВМеркурииНетВ1С.ПлощадкаПроизводительGUID = СтрокаИзМеркурия.ProducerGUID;
			НоваяСтрокаЕстьВМеркурииНетВ1С.СтранаUUID = СтрокаИзМеркурия.СтранаUUID;
			НоваяСтрокаЕстьВМеркурииНетВ1С.Наименование = СтрокаИзМеркурия.Наименование;
			НоваяСтрокаЕстьВМеркурииНетВ1С.ОрганизацияGUID = СтрокаИзМеркурия.ВладелецGUID;
			НоваяСтрокаЕстьВМеркурииНетВ1С.Организация = Организация; //из формы
		КонецЕсли;                               
	
	КонецЦикла;
	
	Для каждого Строка Из Инвентаризация Цикл
		Если Строка.Количество<>0 
			И Строка.Количество<>Строка.КоличествоТекМеркурий Тогда
			Строка.Пометка = Истина;
		Иначе
			Строка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция НастройкиПродукцияПроизводителяОбновить(ТаблицаПродукцияПроизводителя, ПлощадкаПроизводитель) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлощадкаПроизводитель) Тогда
		Возврат "Выберите площадку";
	КонецЕсли;
	
	ТаблицаПродукцияПроизводителя.Очистить();
	
	СтрокаСGUID = ПлощадкаПроизводитель.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	Если СтрокаСGUID = Неопределено Тогда
		Возврат "Похоже что возникли проблемы с определением GUID выбранной вами площадки"; 
	КонецЕсли;
	GUIDПлощадки = СтрокаСGUID.Значение;
	
	Если ЗначениеЗаполнено(GUIDПлощадки) Тогда
		СохраненнаяПродукция = ПолучитьКаталогПродукцииПоПлощадке(GUIDПлощадки);
		
		Для Каждого СтрокаПродукции Из СохраненнаяПродукция Цикл
			НоваяСтрока = ТаблицаПродукцияПроизводителя.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПродукции);
			НоваяСтрока.Наименование = СокрЛП(НоваяСтрока.Наименование);
			НоваяСтрока.GOST = СокрЛП(НоваяСтрока.GOST);
			НоваяСтрока.Артикул = СокрЛП(НоваяСтрока.Артикул);
			НоваяСтрока.GTIN = СокрЛП(НоваяСтрока.GTIN);
		КонецЦикла;
		
	Иначе
		Возврат "Похоже что возникли проблемы с определением GUID выбранной вами площадки";
	КонецЕсли;

	Возврат "";
	
КонецФункции

Функция НастройкиПродукцияПроизводителяПрочитатьКаталогПлощадкиМеркурий(ТаблицаПродукцияПроизводителя, ПлощадкаПроизводитель) Экспорт
	
	Если Не ЗначениеЗаполнено(ПлощадкаПроизводитель) Тогда
		Возврат "Выберите площадку";
	КонецЕсли;

	СтрокаСGUID = ПлощадкаПроизводитель.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	Если СтрокаСGUID = Неопределено Тогда
		Возврат "Похоже что возникли проблемы с определением GUID выбранной вами площадки"; 
	КонецЕсли;
	
	ТаблицаИзМеркурия = ПрочитатьКаталогПлощадки(СтрокаСGUID.Значение);
	//
	//распихать данные по нашей таблице
	
	Для Каждого ЭлементМеркурия Из ТаблицаИзМеркурия Цикл
		НайденнаяСтрокаПродукции = ТаблицаПродукцияПроизводителя.Найти(ЭлементМеркурия.productItemUUID,"productItemUUID");
		Если НайденнаяСтрокаПродукции = Неопределено Тогда
			//не нашлось по UUID - возможно он сменился, поищем по GUID
			НайденнаяСтрокаПродукцииПоGUID = ТаблицаПродукцияПроизводителя.Найти(ЭлементМеркурия.productItemGUID,"productItemGUID");
			Если НайденнаяСтрокаПродукцииПоGUID = Неопределено Тогда //что-то не наше совсем
				НайденнаяСтрокаПродукции = ТаблицаПродукцияПроизводителя.Добавить();
				НайденнаяСтрокаПродукции.productItemUUID = ЭлементМеркурия.productItemUUID;
				НайденнаяСтрокаПродукции.productItemGUID = ЭлементМеркурия.productItemGUID;
			Иначе
				//надо отразить что у нас сменился UUID продукции
				ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(НайденнаяСтрокаПродукцииПоGUID.Номенклатура,"ПлощадкаUUID"+СтрокаСGUID.Значение,ЭлементМеркурия.productItemUUID);
                НайденнаяСтрокаПродукции = НайденнаяСтрокаПродукцииПоGUID;
				НайденнаяСтрокаПродукции.productItemUUID = ЭлементМеркурия.productItemUUID;
			КонецЕсли;
		КонецЕсли;
		НайденнаяСтрокаПродукции.productItemGUID = ЭлементМеркурия.productItemGUID;
		НайденнаяСтрокаПродукции.АртикулМеркурий = ЭлементМеркурия.Артикул;
		НайденнаяСтрокаПродукции.НаименованиеМеркурий = ЭлементМеркурия.Наименование;
		НайденнаяСтрокаПродукции.GTINМеркурий = ЭлементМеркурия.GTIN;
		НайденнаяСтрокаПродукции.subProductGuidМеркурий = ЭлементМеркурия.subProductGuid;
		НайденнаяСтрокаПродукции.GOSTМеркурий = ЭлементМеркурия.GOST;
		НайденнаяСтрокаПродукции.СоответствуетГОСТуМеркурий = ЭлементМеркурия.СоответствуетГОСТу;
	КонецЦикла;

	Возврат "";
	
КонецФункции

// Форма приветствия (и ввода реквизитов для подключения) - общие процедуры для ОФ и УФ

Функция ПриветствиеЕстьНеобходимыеМетаданные(СтрокаМетаданных, НеИскатьВоВХ = Ложь) Экспорт//Приветствие.Удалить (ОРИГИНАЛ) ЕстьНеобходимыеМетаданные(СтрокаМетаданных, НеИскатьВоВХ = Ложь)
	
	ТекПолеМетаданных = Метаданные;
	
	МассивИмен = ПриветствиеEDI_РазложитьСтрокуВМассивСлов(СтрокаМетаданных,".");

	КоличествоИмен = МассивИмен.Количество();
	
	// КоличествоИмен = 2 для проверки наличия объекта, например 					Справочники.КонтурEDI_Сообщения
	// КоличествоИмен = 4 для проверки наличия реквизита\ресурса и т.д., например	Справочники.КонтурEDI_Сообщения.Реквизиты.Организация
	// КоличествоИмен = 6 для проверки наличия реквизита таб. части, например		Справочники.КонтурEDI_Сообщения.ТабличныеЧасти.ДополнительныеРеквизиты.Реквизиты.ЗначениеСтрока
	
	Если НЕ (КоличествоИмен = 2 ИЛИ КоличествоИмен = 4 ИЛИ КоличествоИмен = 6) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоПоисков = КоличествоИмен/2;
	Для н = 1 По КоличествоПоисков Цикл
		ТекПолеМетаданных = ТекПолеМетаданных[МассивИмен[н*2-2]].Найти(МассивИмен[н*2-1]);
		Если ТекПолеМетаданных = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции

Функция ПриветствиеEDI_РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов="") Экспорт //Приветствие.Удалить (ОРИГИНАЛ) EDI_РазложитьСтрокуВМассивСлов
	
	Слова = Новый Массив;
	
	Для Сч = 1 По СтрДлина(РазделителиСлов) Цикл
		Строка = СтрЗаменить(Строка,Сред(РазделителиСлов,Сч,1),Символы.ПС);
	КонецЦикла;
	
	Для Сч=1 По СтрЧислоСтрок(Строка) Цикл
		ТекСлово = СокрЛП(СтрПолучитьСтроку(Строка,Сч));
		Если ТекСлово<>"" Тогда
			Слова.Добавить(ТекСлово);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Слова;
	
КонецФункции

Процедура ПриветствиеКонтрольМетаданных(ЭлементыФормы) Экспорт //Приветствие - вставить в ПриОткрытии() (ОРИГИНАЛ) //ЭлементыФормы (или Элементы для УФ):ПодключитьМодульEDI, Приветствие
	
	МодульEDIПодключен = Ложь;
	МодульEDIПодходящий = Ложь;
	МодульМеркурийПодключен = Ложь;
	ДлинаКодаТовара36Символов = Ложь;	
	
	Если ПриветствиеЕстьНеобходимыеМетаданные("РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты") Тогда 
		МодульEDIПодключен = Истина;
		
		Если ПриветствиеЕстьНеобходимыеМетаданные("РегистрыСведений.КонтурEDI_СоответствияТоваров") Тогда 
			ДлинаРеквизитаКодТовара=35;
			Попытка
				Выполнить("ДлинаРеквизитаКодТовара=Метаданные.РегистрыСведений.КонтурEDI_СоответствияТоваров.Ресурсы.КодТовараПартнера.Тип.КвалификаторыСтроки.Длина");
				Если ДлинаРеквизитаКодТовара >=36 Тогда
					ДлинаКодаТовара36Символов = Истина;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		НаборЗаписей = Неопределено;
		Выполнить("НаборЗаписей = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьНаборЗаписей()");
		НаборЗаписей.Отбор.Свойство.Установить("МодульМеркурийПуть");
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда
			МодульМеркурийПодключен = Истина;
		КонецЕсли;
		
		
		НаборЗаписей = Неопределено;
		Выполнить("НаборЗаписей = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьНаборЗаписей()");
		НаборЗаписей.Отбор.Свойство.Установить("НомерВерсии");
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 1 Тогда
			РешениеОСовместимости = СовместимСМодулемEDI(НаборЗаписей[0].Значение);
			Если РешениеОСовместимости.ПродолжитьЗапуск = Истина Тогда
				МодульEDIПодходящий = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если МодульМеркурийПодключен Тогда
		Если ДлинаКодаТовара36Символов Тогда
			ЭлементыФормы.ПодключитьМодульEDI.Видимость = Истина;
			ЭлементыФормы.Приветствие.Заголовок = "Вы уже подключили модуль Меркурий."+Символы.ПС+"Работайте с ВСД, запуская модуль EDI."+Символы.ПС+"Вы можете изменить дислокацию модуля Меркурий на ту, откуда Вы его только что запустили, нажатием на ""Изменить расположение на текущее""";
			ЭлементыФормы.ПодключитьМодульEDI.Заголовок = "Изменить расположение на текущее";
			ЭлементыФормы.ПодключитьМодульEDI.Видимость = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		ЭлементыФормы.Отключить.Видимость = Ложь;
	КонецЕсли;
	
	Если МодульEDIПодходящий Тогда 
		Если ДлинаКодаТовара36Символов Тогда
			ЭлементыФормы.ПодключитьМодульEDI.Видимость = Истина;
			СтандартноеПриветствие = "Модуль ""Меркурий"" не предназначен для интерактивного запуска. 
										|Работа предусмотрена только режиме ""подключения"" к модулю 
										|Контур.EDI.";
			ЭлементыФормы.Приветствие.Заголовок = СтандартноеПриветствие +Символы.ПС+ "Ваш Модуль EDI подходит для работы, осталось только подключить Меркурий к EDI.";
		Иначе
		    //модуль EDI подходит но длина "КонтурEDI_СоответствияТоваров.КодТовараПартнера" менее 36 символов
			ЭлементыФормы.Приветствие.Заголовок = "Ваш Модуль EDI подходит для работы, однако длина реквизита регистра сведений ""КонтурEDI_СоответствияТоваров.КодТовараПартнера"" менее 36 символов. Откройте Конфигуратор, увеличьте его длину до 36 и обновите конфигурацию."+Символы.ПС+"После этого сразу можно будет подключить Меркурий к EDI!";
			ЭлементыФормы.ПодключитьМодульEDI.Заголовок = "Увеличьте длину реквизита КодТовараПартнера до 36 знаков.";
			ЭлементыФормы.ПодключитьМодульEDI.Видимость = Истина;
			ЭлементыФормы.ПодключитьМодульEDI.Доступность = Ложь;
		КонецЕсли;
	ИначеЕсли МодульEDIПодключен Тогда
		ЭлементыФормы.Приветствие.Заголовок = ЭлементыФормы.Приветствие.Заголовок +Символы.ПС+ "Ваш Модуль EDI НЕ подходит для работы. Обновите его на последнюю версию.";
	Иначе
		//дефолт на форме
	КонецЕсли;

	
КонецПроцедуры

Функция ПриветствиеПодключитьМодульEDI() Экспорт//Приветствие - ПодключитьМодульЕДИ (выдран кусок) //ЭлементыФормы: Отключить
	
	Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
	
	Запись.Объект			= Неопределено;
	Запись.Свойство			= "МодульМеркурийПуть";
	Запись.Значение			= ЭтотОбъект.ИспользуемоеИмяФайла;
	
	ТекстОшибки = "";
	Попытка
		Запись.Записать();
		//ЭлементыФормы.Отключить.Видимость = Истина;
	Исключение
		//Отказ = Истина;
		ТекстОшибки = ОписаниеОшибки() + "
		|Возникла непридвиденная проблема с подключением модуля Меркурий";
		Возврат ТекстОшибки;
	КонецПопытки;
	
	Попытка
		
		//Теперь надо добавить партнера если еще не добавлен
		НовыйПартнерМеркурий = Неопределено;
		Выполнить("НовыйПартнерМеркурий = Справочники.КонтурEDI_ДополнительныеСправочники.НайтиПоНаименованию(""Меркурий"")");
		Если Не ЗначениеЗаполнено(НовыйПартнерМеркурий) Тогда
			
			НовыйПартнерМеркурий = Справочники.КонтурEDI_ДополнительныеСправочники.СоздатьЭлемент();
			НовыйПартнерМеркурий.Наименование = "Меркурий";
			НовыйПартнерМеркурий.ИмяСправочника = "Партнеры";
			НовыйПартнерМеркурий.Записать();
			
			Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
			Запись.Объект			= НовыйПартнерМеркурий.Ссылка;
			Запись.Свойство			= "GLN_Партнера";
			Запись.Значение			= "0000000000000";
			Запись.Записать();
			
			
		КонецЕсли;
		//ТекстПредупреждения =  "Модуль подключен. Теперь перезапустите модуль EDI и не забудьте ознакомиться с приложенной инструкцией
		//|Попытки сэкономить время при изучении инструкции приведут к его серьезной потере в будущем.";
		//ЭлементыФормы.Приветствие.Заголовок = ТекстПредупреждения;
		Возврат "";
		
	Исключение
		ТекстОшибки = ОписаниеОшибки() + "
		|Возникла непридвиденная проблема с добавлением Партнера Меркурий, возможно не обновлены объекты модуля Контур.EDI";
		Возврат ТекстОшибки;
	КонецПопытки;

КонецФункции

Функция ПриветствиеОтключитьМодульEDI(Элемент, ЭлементыФормы) Экспорт//Приветствие - ПодключитьМодульЕДИ (выдран кусок) //ЭлементыФормы: Отключить
	
	Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
	
	Запись.Объект			= Неопределено;
	Запись.Свойство			= "МодульМеркурийПуть";
	
	Попытка
		Запись.Удалить();
		ПриветствиеКонтрольМетаданных(ЭлементыФормы);
		ЭлементыФормы.ПодключитьМодульEDI.Заголовок = "Подключить";
		ЭлементыФормы.Отключить.Видимость = Ложь;
		Возврат "Модуль отключен. Теперь перезапустите модуль EDI";
	Исключение
		//Сообщить(ОписаниеОшибки());
		//Отказ = Истина;
		Возврат "Возникла непридвиденная проблема с отключением модуля Меркурий: "+ОписаниеОшибки();
	КонецПопытки;
	
КонецФункции

Функция ПриветствиеПроверитьПодключение(ПараметрыПодключения) Экспорт
	
	//чето я пока не понял как проверить реквизиты подключения
	
	//Прокси = Новый WSПрокси(локПолучитьОпределениеПроксиИзМакета("ApplicationManagementsService_test_14"),
	//"http://api.vetrf.ru/schema/cdm/application/service",   
	//"ApplicationManagementServiceBindingQSService",  
	//"ApplicationManagementServiceBindingQSPort"); 
	//
	//Прокси.Пользователь = ЛогинAPI;
	//Прокси.Пароль 		= ПарольAPI;	
	//
	//ТипWSПараметраAPIKey = Прокси.ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/application").Получить("APIKey");
	//ТекКлючАПИ = КлючAPI;
	//ТекissuerId = IssuerID;
	//
	//applicationId = IssuerID;
	//
	//Попытка
	//	MercAppDO = Прокси.receiveApplicationResult(ТекКлючАПИ, ТекissuerId, applicationId);
	//	//разобрать ответ и если ошибка авторизации то 
	//	//возврат Ложь;
		
		//сохранить как дефолтные
		локУстановитьКонстантуEDI("М_ЛогинAPI", 		ПараметрыПодключения.ЛогинAPI);
		локУстановитьКонстантуEDI("М_ПарольAPI", 		ПараметрыПодключения.ПарольAPI);
		локУстановитьКонстантуEDI("М_КлючAPI", 			ПараметрыПодключения.КлючAPI);
		локУстановитьКонстантуEDI("М_issuerId", 		ПараметрыПодключения.IssuerID);
		локУстановитьКонстантуEDI("М_ЛогинПользователя", ПараметрыПодключения.ЛогинПользователя);
		
		локУстановитьКонстантуEDI("М_ИспользуетсяТестовыйAPI", ПараметрыПодключения.НачинаемРаботуНаТестовомСервере);
		
		Возврат Истина;
	//Исключение
	//   Сообщить(ОписаниеОшибки());
	//   Возврат Ложь;
	//КонецПопытки;
	
КонецФункции // ПроверитьПодключение()

Функция МодальностьЗапрещена() Экспорт
	СисИнфо = Новый СистемнаяИнформация;
	ТекВерсияПлатформы=СисИнфо.ВерсияПриложения;
	Остаток=Сред(СокрЛП(ТекВерсияПлатформы),3);  //и так ясно что "8." - в топку
	ВтораяЦифраВерсии=Число(Лев(Остаток,1)); //да полюбому 8.10.х не будет
	Остаток=Сред(СокрЛП(Остаток),3);
	ТретьяЦифраВерсии=Число(Лев(Остаток,Найти(Остаток,".")-1));
	
	Если (ВтораяЦифраВерсии=3 и ТретьяЦифраВерсии>=4) или ВтораяЦифраВерсии>3 Тогда 
		Попытка
			Если Строка(Метаданные.РежимИспользованияМодальности)  = "Использовать" Тогда 
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		Исключение
			//платфома не в курсе что есть режим отказа от модальности
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция локПолучитьКонстантуEDI(ИмяКонстанты) Экспорт

Возврат локПолучитьЗначениеСвойстваОбъектаEDI(Неопределено, ИмяКонстанты)	

КонецФункции // локПолучитьКонстантуEDI()

Функция локПолучитьЗначениеСвойстваОбъектаEDI(Объект, ИмяСвойства) Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтурEDI_ДополнительныеРеквизиты.Значение,
	|	КонтурEDI_ДополнительныеРеквизиты.ЗначениеСтрока
	|ИЗ
	|	РегистрСведений.КонтурEDI_ДополнительныеРеквизиты КАК КонтурEDI_ДополнительныеРеквизиты
	|ГДЕ
	|	КонтурEDI_ДополнительныеРеквизиты.Свойство = &Свойство
	|	И КонтурEDI_ДополнительныеРеквизиты.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Свойство",	ИмяСвойства);
	Запрос.УстановитьПараметр("Объект",		Объект);
	
	ТекЗначение = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекЗначение = локПреобразоватьСохраненноеЗначение(Выборка.Значение,Выборка.ЗначениеСтрока);

	КонецЕсли;
	
	Возврат ТекЗначение;
	
КонецФункции

Функция локПреобразоватьСохраненноеЗначение(Значение,ЗначениеСтрока) Экспорт
	
	ТекЗначение = Значение;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Если Лев(Значение,3)="{""#" Тогда
			ТекЗначение = ЗначениеИзСтрокиВнутр(Значение);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ЗначениеСтрока) Тогда
		ТекЗначение = ЗначениеСтрока;
		Если Лев(ЗначениеСтрока,3)="{""#" Тогда
			ТекЗначение = ЗначениеИзСтрокиВнутр(ЗначениеСтрока);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ТекЗначение;
	
КонецФункции

Функция локУстановитьКонстантуEDI(ИмяКонстанты,ЗначениеКонстанты) Экспорт
	
	локУстановитьЗначениеСвойстваОбъекта(Неопределено,ИмяКонстанты,ЗначениеКонстанты);
	
КонецФункции

Функция локУстановитьЗначениеСвойстваОбъекта(Объект, ИмяСвойства,Знач Значение,Отказ = Ложь) Экспорт 

	ЗначениеНеограниченнаяСтрока = "";
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Если СтрДлина(Значение)>255 Тогда
			ЗначениеНеограниченнаяСтрока = Значение;
			Значение = "";
		КонецЕсли;
	КонецЕсли;
	
		Запись = РегистрыСведений.КонтурEDI_ДополнительныеРеквизиты.СоздатьМенеджерЗаписи();
		
		Запись.Объект			= Объект;
		Запись.Свойство			= ИмяСвойства;
		Запись.Значение			= Значение;
	
		Запись.ЗначениеСтрока = ЗначениеНеограниченнаяСтрока;
		
	Попытка
		Запись.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;
		
КонецФункции

Функция локПолучитьОпределениеПроксиИзМакета(ИмяМакета) Экспорт

	//ФайлWSDL = ПолучитьИмяВременногоФайла("wsdl");
	//ПолучитьМакет(ИмяМакета).Записать(ФайлWSDL);
	//Определение = Новый WSОпределения(ФайлWSDL);
	//УдалитьФайлы(ФайлWSDL);
	//
	//Возврат Определение;
	
КонецФункции 


//инициализация WS-ссылок
Процедура СоздатьПустуюСтруктуруИспользуемыеПрокси()

	ИспользуемыеПрокси = Новый Структура("WSПроксиApplicationManagementsService,WSПроксиСправочникЕдиницИзмерения,WSПроксиСправочникПродукции,WSПроксиСправочникИкар,WSПроксиEnterpriseService");	

КонецПроцедуры

Функция ПолучитьОпределениеПроксиИзМакета(ИмяМакета)

	ФайлWSDL = ПолучитьИмяВременногоФайла("wsdl");
	ПолучитьМакет(ИмяМакета).Записать(ФайлWSDL);
    Определение = Новый WSОпределения(ФайлWSDL);
	УдалитьФайлы(ФайлWSDL);
	
	Возврат Определение;
	
КонецФункции 

Функция ИспользуемыеWSПрокси()
	
	Если ИспользуемыеПрокси = Неопределено Тогда 
		СоздатьПустуюСтруктуруИспользуемыеПрокси();
		Возврат ИспользуемыеПрокси;
	Иначе
		Возврат ИспользуемыеПрокси;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьWSПроксиApplicationManagementsService() Экспорт
	
	Если ИспользуемыеWSПрокси().WSПроксиApplicationManagementsService = Неопределено Тогда
		
		Прокси = Новый WSПрокси(ПолучитьОпределениеПроксиИзМакета("ApplicationManagementsService_test_14"),
		"http://api.vetrf.ru/schema/cdm/application/service",   
		"ApplicationManagementServiceBindingQSService",  
		"ApplicationManagementServiceBindingQSPort"); 
		
		//альтернативный способ (требует добавления в конфигурацию WS-ссылок)
		//Прокси = WSСсылки.WSApplicationManagementsServiceTest.СоздатьWSПрокси("http://api.vetrf.ru/schema/cdm/application/service", "ApplicationManagementServiceBindingQSService", "ApplicationManagementServiceBindingQSPort");
		
		Прокси.Пользователь = ПолучитьКонстантуEDI("М_ЛогинAPI");
		Прокси.Пароль 		= ПолучитьКонстантуEDI("М_ПарольAPI");
		ИспользуемыеПрокси.WSПроксиApplicationManagementsService = Прокси;
	Иначе
		Прокси = ИспользуемыеWSПрокси().WSПроксиApplicationManagementsService; 
	КонецЕсли;
	
	Возврат(Прокси);
	
КонецФункции

Функция ПолучитьФабрикуXDTOМеркурий()
	
	Пакеты = Новый Массив;
	МассивПутей = Новый Массив;
	
	Для й=1 По 10 Цикл
		ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
		ПолучитьМакет("СхемаМеркурий"+й).Записать(ФайлСхемы);
		МассивПутей.Добавить(ФайлСхемы); 
	КонецЦикла;	
	
	ВременнаяФабрика = СоздатьФабрикуXDTO(МассивПутей);
	
	Для Каждого ПутьУдаления Из МассивПутей Цикл
		УдалитьФайлы(ПутьУдаления);
	КонецЦикла;

	Возврат ВременнаяФабрика;
	
КонецФункции

//неразобранное
Функция ПустаяТаблицаДляВСД()
	
	//это ключевая таблица группировки ВСД по документам ПТУ а также соотнесения со списком ТД
	ТаблицаВСД = Новый ТаблицаЗначений();
	//ТаблицаВСД.Колонки.Добавить("НомерВСД");     вот жалко им что ли было сразу номер отдать!
	ТаблицаВСД.Колонки.Добавить("ДатаВСД",Новый ОписаниеТипов("Дата", , ,
	Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаВСД.Колонки.Добавить("НомерТТН",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(70, ДопустимаяДлина.Переменная)));
	ТаблицаВСД.Колонки.Добавить("ДатаТТН",Новый ОписаниеТипов("Дата", , ,
	Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаВСД.Колонки.Добавить("ВсдUUID",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
	ТаблицаВСД.Колонки.Добавить("Статус",Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(9, ДопустимаяДлина.Переменная)));
	ТаблицаВСД.Колонки.Добавить("_ОбъектXDTO");
	
	Возврат ТаблицаВСД;
	
КонецФункции

Функция ПолучитьВсеОформленныеВСДПлощадки(GUIDПлощадки,ВычиталиВсеОформленные)
	
	ТаблицаВСД = ПустаяТаблицаДляВСД();
	
	Смещение = 0;
	ВсегоСтрок = 1;
	Прочитали = 0;
	ВсеВычитанныеВСД_XDTO = Новый Массив;
	
	Результат = Новый Структура("ТаблицаВСД",ТаблицаВСД);

	Пока Прочитали<ВсегоСтрок Цикл
		
		ОтветWeb = СписокВходящихОформленныхВСДМеркурий(GUIDПлощадки,Смещение);
		
		Если ОтветWeb<>Неопределено и ОтветWeb.result.getVetDocumentListResponse.vetDocumentList.count <> "0" Тогда
			СписокВСДXDTO = ОтветWeb.result.getVetDocumentListResponse.vetDocumentList.vetDocument;
			
			ДополнитьТаблицуПоВходящимВСДИзФрагментаОтвета(Результат.ТаблицаВСД,СписокВСДXDTO);
			
			ВсегоСтрок = Число(ОтветWeb.result.getVetDocumentListResponse.vetDocumentList.total);
			Прочитали = Смещение+Число(ОтветWeb.result.getVetDocumentListResponse.vetDocumentList.count);
			Смещение = Прочитали;  //для нового запроса
			Если Прочитали>=ВсегоСтрок Тогда 
				ВычиталиВсеОформленные = Истина;
			КонецЕсли;
		Иначе
			Сообщить("Не смог полностью вычитать входящие элВСД");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИзмененияВСДЗаПериод(GUIDПлощадки,ДатаС,ДатаПо=Неопределено)
	
	ТаблицаВСД = ПустаяТаблицаДляВСД();
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияМеркурий(КорневаяФабрика(),,GUIDПлощадки);
	
	ПараметрыФункции = Новый Структура();
	ПараметрыФункции.Вставить("Наименование", 		"getVetDocumentChangesListRequest");
	ПараметрыФункции.Вставить("initiator", 			ПараметрыПодключения.user);
	ПараметрыФункции.Вставить("enterpriseGuid",		GUIDПлощадки);
	ПараметрыФункции.Вставить("localTransactionId", "");
	DateInterval = КорневаяФабрика().Создать("http://api.vetrf.ru/schema/cdm/base", "DateInterval");
	
	DateInterval.beginDate = ДатаС - СмещениеЧасовОтМосквы*3600;
	//всегда будем спрашивать на тек дату
	//DateInterval.endDate = Формат(ДатаПо, "ДФ=yyyy-MM-ddTЧЧ:мм:сс")+НашЧасовойпоясПостфикс;
	ПараметрыФункции.Вставить("updateDateInterval", DateInterval);
	
	Смещение = 0;
	
	ВсеВычитанныеВСД_XDTO = Новый Массив();
	Результат = Новый Структура("ТаблицаВСД",ТаблицаВСД);
	
	//Вычитываем все записи журнала
	Пока Истина Цикл
		ПараметрыПодключения.ListOptions.offset = Смещение;
		ПараметрыФункции.Вставить("listOptions", ПараметрыПодключения.ListOptions);		
		//Дожидаться результата
		ОтветXDTO = ВыполнитьЗапросМеркурийApplication(КорневаяФабрика(), ПараметрыФункции, ПараметрыПодключения, "getVetDocumentChangesListRequest", Истина);
		ОтветСписокВСДTO = ОтветXDTO.result.getVetDocumentChangesListResponse.vetDocumentList;
		
		Если Число(ОтветСписокВСДTO.Count) = 0 Тогда 
			Прервать;
			Возврат Результат;
		КонецЕсли;
		
		//Обработка строк	
		/////////////////////////////////////////////////////////////////
		Если Число(ОтветСписокВСДTO.total) = 0 Тогда
			Возврат Результат;
		ИначеЕсли Число(ОтветСписокВСДTO.total) = 1 Тогда
			ЕдинственнаяСтрока = ОтветСписокВСДTO.vetDocument;
			СписокvetDocument = Новый Массив;
			СписокvetDocument.Добавить(ЕдинственнаяСтрока);
		Иначе
			СписокvetDocument = ОтветСписокВСДTO.vetDocument;
		КонецЕсли;
		
		ДополнитьТаблицуПоВходящимВСДИзФрагментаОтвета(Результат.ТаблицаВСД,СписокvetDocument);			
		
		///////////////////////////////////////////////////////////////	
		
		Если Число(ОтветСписокВСДTO.Count) + Смещение >= Число(ОтветСписокВСДTO.Total) Тогда 
			Прервать; 
		КонецЕсли;
		Смещение = Смещение + ПараметрыПодключения.ListOptions.Count;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьВСДИЗаполнитьСообщение(GUIDПлощадки,ИдентификаторыСверткиТТН,ТаблицаВСД)
	
	Если ИдентификаторыСверткиТТН.НомерТТН = "" Тогда 
		НайденныеВСД =  ТаблицаВСД.НайтиСтроки(Новый структура("ВсдUUID",ИдентификаторыСверткиТТН.ВсдUUID));
	Иначе
		НайденныеВСД =  ТаблицаВСД.НайтиСтроки(Новый структура("НомерТТН",ИдентификаторыСверткиТТН.НомерТТН));
	КонецЕсли;
	
	//СтрокиВСДXDTO=ПолучитьСтрокиВСДXDTOПоТТН(GUIDПлощадки,НайденныеВСД);
	
	
	
	////Завернуть на существующую
	////это ключи по которым была свертка (3 шт.)
	//Сообщение.ДокументEDI.Номер = ВычислитьXDTO(ИсточникДляШапки,"waybillNumber");
	//Сообщение.ДокументEDI.Дата = ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(ИсточникДляШапки,"waybillDate"));
	//Сообщение.ДатаПоставки = ПреобразоватьДатуwaybillDate_В_1С(ВычислитьXDTO(ИсточникДляШапки,"issueDate"));
	//
	//
	//Сообщение.Партнер = ПартнерМеркурий();
	//Сообщение.Статус = "Оформлен";
	//Сообщение.ПлощадкаEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.enterprise.guid");
	//Сообщение.ПлощадкаEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.enterprise.uuid");
	//Сообщение.ПлощадкаПолучательEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.enterprise.guid");
	//Сообщение.ПлощадкаПолучательEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.enterprise.uuid");
	//
	//Сообщение.ХозяйствующийСубъектEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.businessEntity.guid");
	//Сообщение.ХозяйствующийСубъектEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignor.businessEntity.uuid");
	//Сообщение.ХозяйствующийСубъектПолучательEDI.GUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.businessEntity.guid");
	//Сообщение.ХозяйствующийСубъектПолучательEDI.UUID = ВычислитьXDTO(ИсточникДляШапки,"consignee.businessEntity.uuid");
	////следует сразу сконвертировать в Организацию  т.к. этоn реквизит поеltn в реквизит справочника
	//Сообщение.Организация 	= КонвертироватьЗначениеМеркурийв1C(Сообщение.ХозяйствующийСубъектПолучательEDI.GUID,,"МеркурийХС");
	//
	////transportInfo
	//Сообщение.Транспорт.ВидТранспорта = ВычислитьXDTO(ИсточникДляШапки,"transportInfo.transportType");	
	//Сообщение.Транспорт.НомерТранспортногоСредства = ВычислитьXDTO(ИсточникДляШапки,"transportInfo.transportNumber.vehicleNumber");	
	//Сообщение.Транспорт.СпособХраненияПриПеревозке = ВычислитьXDTO(ИсточникДляШапки,"transportStorageType");
	//
	//Если ТипЗнч(СтрокиВСДXDTO) = Тип("ОбъектXDTO") Тогда
	//	СтрокаТоваровXDTO = СтрокиВСДXDTO;
	//		НоваяСтрокаТоваровСообщения = Сообщение.Товары.Добавить();
	//		НоваяСтрокаТоваровСообщения.НомерСтроки = 1;
	//		ЗаполнитьСтрокуСообщенияИзXDTO(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO);
	//ИначеЕсли ТипЗнч(СтрокиВСДXDTO) = Тип("СписокXDTO")
	//	ИЛИ ТипЗнч(СтрокиВСДXDTO) = Тип("Массив") Тогда
	//	й=0;
	//	Для Каждого СтрокаТоваровXDTO Из СтрокиВСДXDTO Цикл
	//		//здесь также будут прилетать ВСД которые в данный момент не нужны (например, уничтожение исходных партий)
	//		//Такие ВСД следует пропустить
	//		Если ТипСообщения = "M_DES" Тогда
	//			Если СтрокаТоваровXDTO.type <> "TRANSPORT" Тогда
	//				Продолжить;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//		й=й+1;
	//		НоваяСтрокаТоваровСообщения = Сообщение.Товары.Добавить();
	//		НоваяСтрокаТоваровСообщения.НомерСтроки = й;
	//		ЗаполнитьСтрокуСообщенияИзXDTO(НоваяСтрокаТоваровСообщения,СтрокаТоваровXDTO);
	//	КонецЦикла;
	//КонецЕсли;
	
КонецФункции // КонвертироватьВходящийВСД_EDI_В_1С()

Процедура УдалитьТранзакциюМеркурий(Сообщение) Экспорт

	ОсновнойМодуль.УдалитьСообщение(Сообщение);

КонецПроцедуры

Функция ПолучитьТаблицуНашихПлощадок() Экспорт
	
	Площадки = ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийПлощадка");
	НашиПлощадки = Площадки.Скопировать();
	НашиПлощадки.Очистить();
	Для Каждого СтрПлощадка из Площадки Цикл
		Если СтрПлощадка.Наш = Истина Тогда
			НоваяСтр = НашиПлощадки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр,СтрПлощадка);
		КонецЕсли;
	КонецЦикла;
    Возврат НашиПлощадки;
	
КонецФункции

Функция СписокФормВСД() Экспорт
	
	//http://help.vetrf.ru/wiki/VetDocumentForm
	
	Список = Новый СписокЗначений();
	//наиболее частые
	Список.Добавить("LIC2", "Ф. 2 свидетельства. Оформляется на сырьё животного происхождения.");
	Список.Добавить("NOTE4", "Ф. 4 справки. Оформляется при перевозке любого вида продукции внутри одного района.");
	
	Список.Добавить("CERTCU1", "Ф. 1 сертификата ТС.");
	Список.Добавить("LIC1", "Ф. 1 свидетельства. Оформляется на живых животных, биологические объекты (генетически материал).");
	Список.Добавить("CERTCU2", "Ф. 2 сертификата ТС.");
	Список.Добавить("CERTCU3", "Ф. 3 сертификата ТС.");
	Список.Добавить("LIC3", "Ф. 3 свидетельства. Оформляется на техническое сырьё; корма; биологические отходы");
	Список.Добавить("CERT5I", "Ф. 5i сертификата.");
	Список.Добавить("CERT61", "Ф. 6.1 сертификата.");
	Список.Добавить("CERT62", "Ф. 6.2 сертификата.");
	Список.Добавить("CERT63", "Ф. 6.3 сертификата.");
	
	Возврат Список;
	
КонецФункции

//мы можем получить от Меркурия определенные новости о том что нам необходимо сделать
//например может прийти ошибка что мы пытались отправить устаревшую UUID - 
//тогда нам надо предпринять определенные действия по исправлению
Процедура ОбработатьСпецифическиеОшибкиМеркурия(Сообщение,ОписаниеОшибки,СообщениеСсылка) Экспорт
	
		
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Сообщение)<>Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	
	//Проверки
	
	//Проверка того что устарел ProducItemUUID по строке товаров
	Если Найти(ОписаниеОшибки,"MERC15023")<>0  Тогда
		АвтоматическиОбработатьОшибкуProducItemUUID(Результат,Сообщение,ОписаниеОшибки,СообщениеСсылка,"MERC15023");
	КонецЕсли;
	Если Найти(ОписаниеОшибки,"MERC14023")<>0  Тогда
		АвтоматическиОбработатьОшибкуProducItemUUID(Результат,Сообщение,ОписаниеОшибки,СообщениеСсылка,"MERC14023");
	КонецЕсли;
	
	Если Результат.ТаблицаОшибок.Количество()>0 Тогда 
		Сообщить("При автоматической обработке ошибок случилась нештатная ситуация:");
		Для каждого Ошибка Из Результат.ТаблицаОшибок Цикл
			Сообщить(Ошибка.ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура АвтоматическиОбработатьОшибкуProducItemUUID(Результат,Сообщение,ОписаниеОшибки,СообщениеСсылка,КодОшибки)
	
	УспешныеЗамены = Истина;
	//следует обновить в сообщении все ProducItemUUID
	Если Сообщение.Свойство("Товары") Тогда
		Для Каждого СтрокаТоваров Из Сообщение.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТоваров.productItemUUID) Тогда 
				Попытка
					АнализproductItemUUID = ПолучитьСамуюСвежую_productItemUUID_ПоUUID(СтрокаТоваров.productItemUUID);
					Если АнализproductItemUUID.Успешно Тогда
						Если АнализproductItemUUID.Активен = Истина Тогда
							СтрокаТоваров.productItemUUID = АнализproductItemUUID.ПоследнийUUID;
						Иначе
							СтрокаТоваров.productItemUUID = "";
							СтрокаТоваров.Наименование = АнализproductItemUUID.Наименование;
						КонецЕсли;
					КонецЕсли;
				Исключение
					УспешныеЗамены = Ложь;
					Ошибка = Результат.ТаблицаОшибок.Добавить();
					Ошибка.ТекстОшибки = КодОшибки+" Не смог обновить productItemUUID";
					//тогда проще вообще очистить его
					СтрокаТоваров.productItemUUID = "";
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Сохранить это сообщение с модернизированным productItemUUID
	Если Найти(ОписаниеОшибки,"Уже исправлено автоматически("+КодОшибки+")")=0 И ЗначениеЗаполнено(СообщениеСсылка) Тогда 
		ОбъектСообщения = СообщениеСсылка.ПолучитьОбъект();
		ОбъектСообщения.ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки,КодОшибки,"Уже исправлено автоматически("+КодОшибки+")");
		ОбъектСообщения.Хранилище = Новый ХранилищеЗначения(Сообщение,Новый СжатиеДанных(9));
		ОбъектСообщения.Записать();
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗапомнитьUUIDиGUIDНоменклатуры(СтрокаТаблицыПродукции,Ответ,GUIDПлощадки)
		
		//запомнить UUID
		ОтветСписокТоваровXDTO = Ответ.result.modifyProducerStockListResponse.productItemList;
		
		Если ОтветСписокТоваровXDTO.Count = 0 Тогда 
			Возврат; 
		КонецЕсли;
		
		UUIDНовойЗаписи ="";
		
		СтрокиТовара = ОтветСписокТоваровXDTO.productItem;
		
		Если ТипЗнч(СтрокиТовара) = Тип("ОбъектXDTO") Тогда
			ВремМассив = Новый Массив;
			ВремМассив.Добавить(СтрокиТовара);
			КоллекцияРезультата = ВремМассив;
		Иначе
			КоллекцияРезультата = СтрокиТовара;
		КонецЕсли;
		
		ЕстьАктивнаяПозиция = Ложь;
		Для Каждого СтрокаТовара Из КоллекцияРезультата Цикл
			//Не подходят не активные строки и с плохим статусом: (http://help.vetrf.ru/wiki/VersionStatus)
			Если НРег(СтрокаТовара.active)<>"true" 
				ИЛИ СтрокаТовара.status = "400" ИЛИ СтрокаТовара.status = "410" ИЛИ СтрокаТовара.status = "420" ИЛИ СтрокаТовара.status = "430" ИЛИ СтрокаТовара.status = "201" Тогда 
				Продолжить;
			КонецЕсли;
			ЕстьАктивнаяПозиция = Истина;
			UUIDЗаписи = СтрокаТовара.uuid;
			GUIDЗаписи = СтрокаТовара.guid;
		КонецЦикла;
		
		Если ЕстьАктивнаяПозиция Тогда// ТипОперацииСТоваром <> "DELETE" Тогда
			//непосредственно запоминание
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаТаблицыПродукции.Номенклатура,"ПлощадкаUUID"+GUIDПлощадки,UUIDЗаписи);
			ОсновнойМодуль.УстановитьЗначениеСвойстваОбъекта(СтрокаТаблицыПродукции.Номенклатура,"GUIDнаПлощ"+GUIDПлощадки,GUIDЗаписи);
			СтрокаТаблицыПродукции.productItemUUID = UUIDЗаписи;
			СтрокаТаблицыПродукции.productItemGUID = GUIDЗаписи;
			
			//заполним в табличке
			//СтрокаТаблицыПродукции.Артикул = СтрокаТовара.code;
			СтрокаТаблицыПродукции.НаименованиеМеркурий = СтрокаТовара.name;
			СтрокаТаблицыПродукции.GOSTМеркурий = ОсновнойМодуль.ПолучитьЗначениеСвойстваXDTO(СтрокаТовара,"GOST");
			СтрокаТаблицыПродукции.subProductGuidМеркурий = СтрокаТовара.subProduct.Guid;
			СтрокаТаблицыПродукции.productItemUUID = СтрокаТовара.UUID;
			СтрокаТаблицыПродукции.productItemGUID = СтрокаТовара.GUID;
		Иначе 
			//забыть если что забывать
			Если ЗначениеЗаполнено(СтрокаТаблицыПродукции.productItemGUID) Тогда
				ОсновнойМодуль.УдалитьЗначениеСвойстваОбъекта(СтрокаТаблицыПродукции.Номенклатура,"GUIDнаПлощ"+GUIDПлощадки);
				СтрокаТаблицыПродукции.productItemGUID = "";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицыПродукции.productItemUUID) Тогда
				ОсновнойМодуль.УдалитьЗначениеСвойстваОбъекта(СтрокаТаблицыПродукции.Номенклатура,"ПлощадкаUUID"+GUIDПлощадки);
				СтрокаТаблицыПродукции.productItemUUID = "";
			КонецЕсли;
		КонецЕсли;
	
КонецПроцедуры

Функция ЗапроситьСведенияО_productItem_ПоUUID(UUID) Экспорт
	
	РезультатФункции = Новый Структура("Успешно,Найден,Активен,НоваяВерсияUUID,GUID,UUID,Наименование,subProductGUID,Артикул,ГОСТ,СоответствуетГОСТ");
	Попытка
		Состояние("Запрашиваю сведения о товаре "+UUID);
		Прокси = ПолучитьWSПроксиСправочникПродукции();
		Ответ = Прокси.GetProductItemByUuid(UUID);
		
		Если ТипЗнч(Ответ) = тип("ОбъектXDTO") Тогда 
			РезультатФункции.Найден = Истина;
			РезультатФункции.Успешно = Истина;
			РезультатФункции.Активен = ВычислитьXDTO(Ответ,"active");
			РезультатФункции.НоваяВерсияUUID = ВычислитьXDTO(Ответ,"next");
			РезультатФункции.GUID = ВычислитьXDTO(Ответ,"guid");
			РезультатФункции.UUID = ВычислитьXDTO(Ответ,"uuid");
			РезультатФункции.Наименование = ВычислитьXDTO(Ответ,"name");
			РезультатФункции.subProductGUID = ВычислитьXDTO(Ответ,"subProduct.GUID");
			РезультатФункции.Артикул = ВычислитьXDTO(Ответ,"code");
			РезультатФункции.ГОСТ = ВычислитьXDTO(Ответ,"GOST");
			РезультатФункции.СоответствуетГОСТ = ВычислитьXDTO(Ответ,"correspondtoGOST");
			
		Иначе
			РезультатФункции.Успешно = Ложь;
		КонецЕсли;
		
	Исключение
		РезультатФункции.Успешно = Ложь;
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции // ЗапроситьСведенияОproductItem()

Функция ПолучитьПредставлениеsubProductGUID(subProductGUID) Экспорт
	
	НайденноеИмяМеркурий = ТаблицаПродукцииВетис().Найти(subProductGUID,"subProductGUID");
	
	Если Значениезаполнено(НайденноеИмяМеркурий) Тогда
		Представление = ""+НайденноеИмяМеркурий.Код+" "+НайденноеИмяМеркурий.НаименованиеВидаПродукции+" ("+subProductGUID+")";
	Иначе
		Представление = "("+subProductGUID+")";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции // ПолучитьПредставлениеsubProductGUID()


Функция ПолучитьСамуюСвежую_productItemUUID_ПоUUID(ЗНАЧ UUID)
	
	Результат = ОсновнойМодуль.ИнициализироватьСтруктуруРезультатаФункции();
	Результат.Вставить("ПоследнийUUID");
	Результат.Вставить("ПереданныйЯвляетсяПоследним");
	Результат.Вставить("Наименование");
	Результат.Вставить("Активен");
	
	ЕстьСвежее = Истина;
	ТекUUID = UUID;
	Пока ЕстьСвежее Цикл
		ТекВерсия = ЗапроситьСведенияО_productItem_ПоUUID(ТекUUID);
		Если ТекВерсия.Успешно = Истина Тогда
			Если ТекВерсия.НоваяВерсияUUID = Неопределено Тогда 
				//перед нами актуальный
				ЕстьСвежее = Ложь;
				Результат.Активен = ТекВерсия.Активен;
				Результат.ПоследнийUUID = ТекUUID;
				Результат.Наименование = ТекВерсия.Наименование;
				Результат.ПереданныйЯвляетсяПоследним = (ТекUUID = UUID);
				Результат.Успешно = Истина;
			Иначе
				//поищем дальше
				ТекUUID = ТекВерсия.НоваяВерсияUUID;
			КонецЕсли;
		Иначе 
			Результат.Успешно = Ложь;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


//заголовки
Функция ПолучитьНомерРелиза_КонтурEDI() Экспорт
	               
	Возврат "M.02.015b";
	
КонецФункции

Функция СовместимСМодулемEDI(НомерВерсииEDI) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ПродолжитьЗапуск",Истина);
	Результат.Вставить("ТекстОшибки","");
	
	СовместимРедакцияEDI 	= 3;     //минимум "4.03.019.033";
	СовместимВыпускEDI 		= 19;
	СовместимСборкаEDI 		= 41;
	
	//и теперь собственно проверки
	Попытка
		НомерРедакцииEDI = Число(Сред(НомерВерсииEDI,3,2));
		НомерВыпускаEDI = Число(Сред(НомерВерсииEDI,6,3));
		НомерСборкиEDI = 1;
	Исключение
		Результат.ПродолжитьЗапуск = Ложь;
		Результат.ТекстОшибки = "Не смог определить версию модуля EDI. Модуль Меркурий не может быть подключен. Требуется версия модуля EDI не менее: 4."+Формат(СовместимРедакцияEDI,"ЧЦ=2; ЧВН=")+"."+Формат(СовместимВыпускEDI,"ЧЦ=3; ЧВН=")+"."+Формат(СовместимСборкаEDI,"ЧЦ=3; ЧВН=");
		Возврат Результат;
	КонецПопытки;
	
	ЗапустилиСтарую = Ложь;
	
	Если НомерРедакцииEDI < СовместимРедакцияEDI Тогда
		ЗапустилиСтарую = Истина;				
	ИначеЕсли (НомерРедакцииEDI=СовместимРедакцияEDI) и (НомерВыпускаEDI < СовместимВыпускEDI) Тогда
		ЗапустилиСтарую = Истина;
	Иначе
		Если (НомерРедакцииEDI=СовместимРедакцияEDI) и (НомерВыпускаEDI=СовместимВыпускEDI) Тогда
			
			Если ОсновнойМодуль.ТолькоЦифрыВСтроке_КонтурEDI(СтрЗаменить(НомерСборкиEDI,"b","")) тогда
				НомерСборкиEDI = Сред(НомерВерсииEDI,10);
				НомерСборкиEDI = СтрЗаменить(НомерСборкиEDI,"b",""); //уберем признак бэта версии
				НомерСборкиEDI = Число(НомерСборкиEDI);
			КонецЕсли;
			
			Если (НомерСборкиEDI < СовместимСборкаEDI)  Тогда
				ЗапустилиСтарую = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапустилиСтарую Тогда
		Результат.ПродолжитьЗапуск = Ложь;
		Результат.ТекстОшибки = "Модуль Меркурий не может быть подключен. Требуется версия модуля EDI не менее: 4."+Формат(СовместимРедакцияEDI,"ЧЦ=2; ЧВН=")+"."+Формат(СовместимВыпускEDI,"ЧЦ=3; ЧВН=")+"."+Формат(СовместимСборкаEDI,"ЧЦ=3; ЧВН=");
		Возврат Результат;	
	КонецЕсли;
	
	//ДлинаКодаТовара36Символов = Ложь;	//решено убрать и оставить только в форме приветствия Меркурия
	//ДлинаРеквизитаКодТовара=35;
	//Попытка
	//	Выполнить("ДлинаРеквизитаКодТовара=Метаданные.РегистрыСведений.КонтурEDI_СоответствияТоваров.Ресурсы.КодТовараПартнера.Тип.КвалификаторыСтроки.Длина");
	//	Если ДлинаРеквизитаКодТовара >=36 Тогда
	//		ДлинаКодаТовара36Символов = Истина;
	//	КонецЕсли;
	//Исключение
	//КонецПопытки;
	ДлинаКодаТовара36Символов = Истина;	
	
	Если ДлинаКодаТовара36Символов <> истина Тогда
		Результат.ПродолжитьЗапуск = Ложь;
		Результат.ТекстОшибки = "Модуль Меркурий не может быть подключен так как длина реквизита регистра сведений ""КонтурEDI_СоответствияТоваров.КодТовараПартнера"" менее 36 символов. Откройте Конфигуратор, увеличьте его длину до 36 и обновите конфигурацию.";
		Возврат Результат;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
