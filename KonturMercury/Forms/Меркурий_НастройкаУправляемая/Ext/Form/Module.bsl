&НаСервере
Перем ОбработкаОбъект;
Перем ОснМодуль;

&НаСервере
Перем ОсобенностиСообщений;

//сделать:
//-НетПотериДанныхИЛИПользовательНаНееИдет
//-По аналогии с ОФ ТаблицаПродукцияПроизводителяПриВыводеСтроки - вызов ВыделитьРасхождения
//-Сделать недоступными ячейки табличных частей

//******************************* Общие **********************************

&НаСервере
Функция МодульОбъекта()

	Если ОбработкаОбъект=Неопределено Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ОсновнойМодуль = ОсновнойМодуль();
		
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаСервере
Функция ОсновнойМодуль()
	Если ОснМодуль = Неопределено Тогда
		ОснМодуль = ПолучитьИзВременногоХранилища(Параметры.АдресХранилища).ОбработкаОбъект;
	КонецЕсли;
	Возврат ОснМодуль;
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ИмяОбработчика = Неопределено, ПараметрыОбработчика = Неопределено, ВладелецОбработчика = Неопределено,РежимБлокирования = Неопределено)
	//отказ от модальности
	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования=	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	КонецЕсли;
	
	Если ПараметрыФормы=Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресХранилища",			Параметры.АдресХранилища);
	ПараметрыФормы.Вставить("IDОсновнойФормы",			Параметры.IDОсновнойФормы);
	ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",	Параметры.КэшироватьМодульОбъекта);
	
	Если ВладелецОбработчика = Неопределено Тогда
		ВладелецОбработчика=	ЭтаФорма;
	КонецЕсли;
	
	Если ИмяОбработчика = Неопределено Тогда
		ОписаниеОбработчика=	Неопределено;
	Иначе	
		ОписаниеОбработчика=	Новый ОписаниеОповещения(ИмяОбработчика, ВладелецОбработчика, ПараметрыОбработчика);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, ВладелецОбработчика, , , ,  ОписаниеОбработчика, РежимБлокирования);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФормуОбработки(ПолноеИмяФормы, ПараметрыФормы = Неопределено , ВладелецФормы  = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь)
	
	Если ПараметрыФормы=Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	Если ВладелецФормы = Неопределено Тогда
		ВладелецФормы =	ЭтаФорма;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресХранилища",							Параметры.АдресХранилища);
	//ПараметрыФормы.Вставить("IDОсновнойФормы",							Параметры.IDОсновнойФормы);
	//ПараметрыФормы.Вставить("КэшироватьМодульОбъекта",					Параметры.КэшироватьМодульОбъекта);
	
	ПолучаемаяФорма=	ПолучитьФорму(ПолноеИмяФормы
										, ПараметрыФормы
										, ВладелецФормы
										, КлючУникальности);
	
	Если НЕ ВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы=	ВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьОрганизациюПлощадкуОповещение(ВыбЭлемент, ОрганизацияИлиПлощадка) Экспорт
	
	Если Не ВыбЭлемент = Неопределено Тогда
		Если ОрганизацияИлиПлощадка = "Организация" Тогда
			Организация = ВыбЭлемент.Значение;
			ОрганизацияGUID = ПолучитьДопРеквизитЭлементаДопСправочника(Организация,"GUID");
		ИначеЕсли ОрганизацияИлиПлощадка = "Площадка" Тогда
			Площадка = ВыбЭлемент.Значение;
			ПлощадкаGUID = ПолучитьДопРеквизитЭлементаДопСправочника(Площадка,"GUID");
		ИначеЕсли ОрганизацияИлиПлощадка = "ПлощадкаПроизводитель" Тогда
			ПлощадкаПроизводитель = ВыбЭлемент.Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПлощадкаНачалоВыбора(ОрганизацияИлиПлощадка, ЭлементФормы)
	СтандартнаяОбработка = Ложь;
	
	//если это не площадка производителя!!!
	//ОрганизацияGUID = "";
	////Если НетПотериДанныхИЛИПользовательНаНееИдет() Тогда
		Инвентаризация.Очистить();
	////Иначе
	////	Возврат;
	////КонецЕсли;
	//
	СписокЭлем = ИнвентаризацияПолучитьСписокОрганизацийПлощадок(ОрганизацияИлиПлощадка);
	Если СписокЭлем.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Похоже что вы еще не сопоставили ни одной своей организации/площадки",,"Контур.Меркурий");
	КонецЕсли;
	
	Если Параметры.МодальностьЗапрещена Тогда
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ВыбратьОрганизациюПлощадкуОповещение", ЭтаФорма, ОрганизацияИлиПлощадка), СписокЭлем, ЭлементФормы);
	Иначе
		ВыбЭлемент = ВыбратьИзСписка(СписокЭлем, ЭлементФормы);
		ВыбратьОрганизациюПлощадкуОповещение(ВыбЭлемент, ОрганизацияИлиПлощадка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	
	//УчетныеЗаписи
	ТаблицаТекХС = МодульОбъекта().ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийУчетнаяЗапись", Неопределено);
	Для Каждого Эл Из ТаблицаТекХС Цикл
		НоваяУЗ = УчетныеЗаписи.Добавить();
		НоваяУЗ.ЛогинAPI 	= МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"ЛогинAPI");
		НоваяУЗ.ПарольAPI 	= МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"ПарольAPI");
		НоваяУЗ.APIKey 		= МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"APIKey");
		НоваяУЗ.ЛогинПользователя = МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"ЛогинПользователя");
		НоваяУЗ.IssuerId 	= МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(Эл,"IssuerId");
	КонецЦикла;	

	 
	МассивНастроек=ОсновнойМодуль().ПолучитьМассивДополнительныхНастроекИзМакета("Меркурий");
	СтруктураНастроек=Новый Структура;
	Для Каждого Эл Из МассивНастроек Цикл
		СтруктураНастроек.Вставить(Эл,ОсновнойМодуль().ПолучитьКонстантуEDI(Эл));
	КонецЦикла;	
	
	ДеревоОбъект=РеквизитФормыВЗначение("ДеревоНастроек");
	ОсновнойМодуль().СоздатьДеревоНастроек(ДеревоОбъект,"Меркурий",СтруктураНастроек);
	ЗначениеВРеквизитФормы(ДеревоОбъект,"ДеревоНастроек");
	
	
	Попытка
		СправочникНоменклатуры.Параметры.УстановитьЗначениеПараметра("Партнер",  МодульОбъекта().ПартнерМеркурий());
		//Дерево Ветис
		дзНоменклатураМеркурий = МодульОбъекта().ДеревоПродукцииВетис();
		ЗначениеВРеквизитФормы(дзНоменклатураМеркурий,"НоменклатураМеркурий");
		
		//Хоз субъекты
		//ХозяйствующиеСубъекты.Очистить();
		ТаблицаТекХС = МодульОбъекта().ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийХС", Неопределено);
	
		Для Каждого СтрокаХС Из ТаблицаТекХС Цикл
			НоваяСтрока = ХозяйствующиеСубъекты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаХС); 
		КонецЦикла;
	
		//Площадки
		//Предприятия.Очистить();
		ТаблицаТекПредприятий = МодульОбъекта().ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийПлощадка", Неопределено);
	
		Для Каждого СтрокаПП Из ТаблицаТекПредприятий Цикл
			НоваяСтрока = Предприятия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПП); 
		КонецЦикла;
	
		//Единицы измерения
		тзЕдиницыИзмерения = МодульОбъекта().ПолучитьСоответствияВсехЕдиницИзмеренияМеркурий();
		ЗначениеВРеквизитФормы(тзЕдиницыИзмерения,"ЕдиницыИзмерения");
	
		тзЕдиницыИзмеренияУпаковок = МодульОбъекта().ПолучитьСоответствияВсехЕдиницИзмеренияУпаковокМеркурий();
		ЗначениеВРеквизитФормы(тзЕдиницыИзмеренияУпаковок,"ЕдиницыИзмеренияУпаковок");
		
		Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(ТаблицаТекХС.ВыгрузитьКолонку("СвязанныйСправочник"));
	
	Исключение
		Сообщить("Похоже, тут какая-то ошибка, обратитесь к внедренцу."+ОписаниеОшибки())
	КонецПопытки;


КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	СтруктураНастроек=Новый Структура;
	ОсновнойМодуль().ДобавитьСтрокиДереваВСтруктуру(ДеревоНастроек,СтруктураНастроек);
	
	//возможно валидации ....
	
	Для Каждого Эл из СтруктураНастроек Цикл
		ОсновнойМодуль().УстановитьКонстантуEDI(Эл.Ключ, Эл.Значение);
	КонецЦикла;
	
	////ЗаписатьЕдиницыИзмерения
	МодульОбъекта().НастройкиЗаписатьЕдиницыИзмерения(ЕдиницыИзмерения);
	МодульОбъекта().НастройкиЗаписатьЕдиницыИзмеренияУпаковок(ЕдиницыИзмеренияУпаковок);
	
	//кажется что кнопка Записать должна стать общей для всех вкладок.
	//подумать и возможно переделат ьна сохранение всего (с другой стороны мы не дадим сохранить тек. данные из-зи другой закладки)
	
	ОсновнойМодуль().НачатьТранзакцию_КонтурEDI();
	МодульОбъекта().СохранитьСписокЭлементовСправочникаМеркурий("МеркурийХС",ХозяйствующиеСубъекты);
	МодульОбъекта().СохранитьСписокЭлементовСправочникаМеркурий("МеркурийПлощадка",Предприятия);
	ОсновнойМодуль().ЗафиксироватьТранзакцию_КонтурEDI();

КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьНаСервере();
КонецПроцедуры

//******************************* Учетные записи **********************************

&НаКлиенте
Процедура УчетныеЗаписиДобавить(Команда)
	УчетныеЗаписи.Добавить();
КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиУдалить(Команда)
	текДанные = Элементы.УчетныеЗаписи.ТекущиеДанные;
	Если НЕ текДанные = Неопределено Тогда
		УчетныеЗаписи.Удалить(УчетныеЗаписи.Индекс(текДанные));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УчетныеЗаписиЗаписатьНаСервере()
	МодульОбъекта().НастройкиЗаписатьУчетныеЗаписи(РеквизитФормыВЗначение("УчетныеЗаписи"));
КонецПроцедуры

&НаКлиенте
Процедура УчетныеЗаписиЗаписать(Команда)
	УчетныеЗаписиЗаписатьНаСервере();
КонецПроцедуры

//******************************* Номенклатура **********************************
&НаСервере
Процедура ДополнитьЕдиницыИзМеркурияНаСервере()
	ТаблицаЕдиницИзмеренияМеркурий = МодульОбъекта().ПолучитьКлассификаторЕдиницИзмеренияМеркурий();

	тзЕдиницыИзмерения = РеквизитФормыВЗначение("ЕдиницыИзмерения");
	Для каждого СтрокаКлассификатора Из ТаблицаЕдиницИзмеренияМеркурий Цикл
		Если тзЕдиницыИзмерения.Найти(СтрокаКлассификатора.GUID,"GUID") = Неопределено 
			И тзЕдиницыИзмерения.Найти(СтрокаКлассификатора.UUID,"UUID") = Неопределено
			Тогда
			НоваяСтрока = ЕдиницыИзмерения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКлассификатора);
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьЕдиницыИзМеркурия(Команда)
	
	ДополнитьЕдиницыИзМеркурияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьЕдиницыУпаковокИзМеркурияНаСервере()
	
	ТаблицаЕдиницИзмеренияУпаковокМеркурий = МодульОбъекта().ПолучитьКлассификаторЕдиницИзмеренияУпаковокМеркурий();

	тзЕдиницыИзмеренияУпаковок = РеквизитФормыВЗначение("ЕдиницыИзмеренияУпаковок");
	Для каждого СтрокаКлассификатора Из ТаблицаЕдиницИзмеренияУпаковокМеркурий Цикл
		Если тзЕдиницыИзмеренияУпаковок.Найти(СтрокаКлассификатора.UUID,"UUID") = Неопределено
			Тогда
			НоваяСтрока = ЕдиницыИзмеренияУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаКлассификатора);
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьЕдиницыУпаковокИзМеркурия(Команда)
	ДополнитьЕдиницыУпаковокИзМеркурияНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоответствияТоваровПрисвоитьНаСервере(Знач ВыделенныеСтрокиНоменклатуры, МеркурийGUID, МеркурийНаименование)
	
	ПартнерМеркурий = МодульОбъекта().ПартнерМеркурий();
	
	Для каждого ВыделеннаяСтрокаНоменклатуры Из ВыделенныеСтрокиНоменклатуры Цикл
		Если ВыделеннаяСтрокаНоменклатуры.ЭтоГруппа = Ложь Тогда
			МодульОбъекта().ПрисвоитьСоответствиеНоменклатуры(ВыделеннаяСтрокаНоменклатуры,МеркурийGUID,МеркурийНаименование,ПартнерМеркурий);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствияТоваровПрисвоить(Команда)
	
	текДанные = Элементы.НоменклатураМеркурий.ТекущиеДанные;
	Если СокрЛП(текДанные.Код) = "" Тогда
		Сообщить("Необходимо выбрать дочерний элемент классификации Меркурий, а не групповой");
	Иначе
		СоответствияТоваровПрисвоитьНаСервере(Элементы.СправочникНоменклатуры.ВыделенныеСтроки, текДанные.GUID, текДанные.Наименование);
		Элементы.СправочникНоменклатуры.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоответствияТоваровСделатьНеподнадзорным(Команда)
	СоответствияТоваровПрисвоитьНаСервере(Элементы.СправочникНоменклатуры.ВыделенныеСтроки, "00000000-0000-0000-0000-000000000000", "Не является поднадзорным");
	Элементы.СправочникНоменклатуры.Обновить();
КонецПроцедуры

&НаСервере
Процедура СоответствияТоваровОбработчикПрисвоенияКоэффициента(Коэффициент, ВыделенныеСтроки)
	МодульОбъекта().НастройкиПрисвоитьКоэффициент(Коэффициент, ВыделенныеСтроки);
	Элементы.СправочникНоменклатуры.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СоответствияТоваровПрисвоитьКоэффициент(Команда)
	
	ТекстВопроса = "Укажите, на что умножить количество";
	ВыделенныеСтроки = Элементы.СправочникНоменклатуры.ВыделенныеСтроки;
	Коэффициент = 0;
	
	Если Параметры.МодальностьЗапрещена Тогда
		ПоказатьВводЧисла(Новый ОписаниеОповещения("СоответствияТоваровОбработчикПрисвоенияКоэффициента", ЭтаФорма, ВыделенныеСтроки), Коэффициент, ТекстВопроса, 10, 4);
	Иначе
		Если ВвестиЧисло(Коэффициент, ТекстВопроса, 10, 40) Тогда
			СоответствияТоваровОбработчикПрисвоенияКоэффициента(Коэффициент,ВыделенныеСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СправочникНоменклатурыКоэффициентУмноженияПриИзмененииНаСервере(Коэффициент)
КонецПроцедуры

&НаКлиенте
Процедура СправочникНоменклатурыКоэффициентУмноженияПриИзменении(Элемент)
КонецПроцедуры

//******************************* ХС и площадки **********************************

&НаСервере
Процедура ХСЗаполнитьАвтоматическиНаСервере()
	МодульОбъекта().НастройкиХСЗаполнитьАвтоматически(ХозяйствующиеСубъекты);
КонецПроцедуры

&НаКлиенте
Процедура ХСЗаполнитьАвтоматически(Команда)
	ХСЗаполнитьАвтоматическиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ХСДобавить(Команда)
	НоваяСтрока = ХозяйствующиеСубъекты.Добавить();
КонецПроцедуры

&НаКлиенте
Процедура ХСУдалить(Команда)
	Если НЕ Элементы.ХозяйствующиеСубъекты.ТекущиеДанные = Неопределено Тогда
		ХозяйствующиеСубъекты.Удалить(ХозяйствующиеСубъекты.Индекс(Элементы.ХозяйствующиеСубъекты.ТекущиеДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующиеСубъектыОбработчикВыбораСвязанногоСправочника(ВыбраннаяСтрокаХС, Парам2) Экспорт
	Если ВыбраннаяСтрокаХС <> неопределено Тогда
		Элементы.ХозяйствующиеСубъекты.ТекущиеДанные.GUID = ВыбраннаяСтрокаХС.GUID;
		Элементы.ХозяйствующиеСубъекты.ТекущиеДанные.Наименование = ВыбраннаяСтрокаХС.name;//fullName;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ХозяйствующиеСубъектыСвязанныйСправочникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ХозяйствующиеСубъекты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.СвязанныйСправочник) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВариантПоиска", 2);//По ИНН связанного справочника
		ПараметрыФормы.Вставить("АдресХранилища", Параметры.АдресХранилища);
		
		ПараметрыФормы.Вставить("СвязанныйСправочник", Элементы.ХозяйствующиеСубъекты.ТекущиеДанные.СвязанныйСправочник);
		
		Если Параметры.МодальностьЗапрещена Тогда 
			ОткрытьФормуОбъектаМодально(Параметры.ПутьКФормамМеркурий+"Меркурий_ВыборХСПлощадкиУправляемая", ПараметрыФормы, "ХозяйствующиеСубъектыОбработчикВыбораСвязанногоСправочника");
		Иначе
			ВыбраннаяСтрока = ПолучитьФормуОбработки(Параметры.ПутьКФормамМеркурий+"Меркурий_ВыборХСПлощадкиУправляемая",ПараметрыФормы).ОткрытьМодально();
			ХозяйствующиеСубъектыОбработчикВыбораСвязанногоСправочника(ВыбраннаяСтрока, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияДобавить(Команда)
	НоваяСтрока = Предприятия.Добавить();
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияУдалить(Команда)
	Если НЕ Элементы.Предприятия.ТекущиеДанные = Неопределено Тогда
		Предприятия.Удалить(Предприятия.Индекс(Элементы.Предприятия.ТекущиеДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияОбработчикВыбораПлощадки(ВыбраннаяСтрока, Парам2) Экспорт
	Если ВыбраннаяСтрока <> Неопределено Тогда
		НоваяСтрока = Предприятия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбраннаяСтрока);
		НоваяСтрока.Наименование = ВыбраннаяСтрока.name;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияДобавитьСвязанныеСТекущимХС(ОбновитьССервера = Ложь)
	
	ТекущиеДанные = Элементы.ХозяйствующиеСубъекты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено или Не ЗначениеЗаполнено(ТекущиеДанные.GUID) Тогда
		
		ПоказатьПредупреждение(,"Необходимо сначала заполнить GUID Хозяйствующего субъекта",,"Контур.Меркурий");
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантПоиска", 1);//по ГУИД ХС
	ПараметрыФормы.Вставить("АдресХранилища", Параметры.АдресХранилища);
	
	ПараметрыФормы.Вставить("ХС_GUID", ТекущиеДанные.GUID);
	ПараметрыФормы.Вставить("ОбновитьССервера", ОбновитьССервера);
	
	
	Если Параметры.МодальностьЗапрещена Тогда 
		ОткрытьФормуОбъектаМодально(Параметры.ПутьКФормамМеркурий+"Меркурий_ВыборХСПлощадкиУправляемая", ПараметрыФормы,"ПредприятияОбработчикВыбораПлощадки");//,ПараметрыФормы.ВыбранноеЗначение);
	Иначе
		ВыбраннаяСтрока = ПолучитьФормуОбработки(Параметры.ПутьКФормамМеркурий+"Меркурий_ВыборХСПлощадкиУправляемая",ПараметрыФормы).ОткрытьМодально();
		ПредприятияОбработчикВыбораПлощадки(ВыбраннаяСтрока, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияДобавитьСвязанную(Команда)
	ПредприятияДобавитьСвязанныеСТекущимХС(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияДобавитьСвязаннуюОбновить(Команда)
	ПредприятияДобавитьСвязанныеСТекущимХС(Истина);
КонецПроцедуры

//******************************* Складской журнал **********************************

&НаСервере
Функция СкладскойЖурналПолучитьСписокПлощадок()
	
	СписокПлощадок = Новый СписокЗначений;
	
	Площадки = МодульОбъекта().ПолучитьСписокЭлементовСправочникаМеркурий("МеркурийПлощадка");
	Для Каждого СтрПлощадка из Площадки Цикл
		Если СтрПлощадка.Наш = Истина Тогда
			СписокПлощадок.Добавить(СтрПлощадка.GUID, СтрПлощадка.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПлощадок;
	
КонецФункции

&НаСервере
Функция СкладскойЖурналЗаполнитьПоПлощадкеНаСервере(Площадка)
	
	Если ЗначениеЗаполнено(Площадка) Тогда 
		ЗаполненныйЖурнал = МодульОбъекта().ПолучитьЗаписиСкладскогоЖурнала(Площадка);
		ЗаполненныйЖурнал.Сортировать("ВладелецGUID"); //чтобы упорядочить по ХС и чтобы потом чуть ниже кэш работал хорошо
		СкладскойЖурнал.Очистить();
		Для Каждого СтркаПлощадки Из ЗаполненныйЖурнал Цикл
			НоваяСтрокаСЖ = СкладскойЖурнал.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСЖ,СтркаПлощадки);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СкладскойЖурналЗаполнитьПоПлощадке(ВыбЭлемент, Парам2 = Неопределено) Экспорт
	Если НЕ ВыбЭлемент = Неопределено Тогда
		СкладскойЖурналЗаполнитьПоПлощадкеНаСервере(ВыбЭлемент.Значение);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СкладскойЖурналОбновить(Команда)
	
	СписокПлощадок = СкладскойЖурналПолучитьСписокПлощадок();
	Если СписокПлощадок.Количество() = 1 Тогда
		Параметры.ВыбраннаяПлощадка = СписокПлощадок.Получить(0).Значение;
		СкладскойЖурналЗаполнитьПоПлощадке(СписокПлощадок.Получить(0));
	ИначеЕсли СписокПлощадок.Количество() > 1 Тогда
		Если Параметры.МодальностьЗапрещена Тогда
			СписокПлощадок.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("СкладскойЖурналЗаполнитьПоПлощадке", ЭтаФорма), "По какой площадке построить таблицу?");
		Иначе
			ВыбЭлемент = СписокПлощадок.ВыбратьЭлемент("По какой площадке построить таблицу?");
			СкладскойЖурналЗаполнитьПоПлощадке(ВыбЭлемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкладскойЖурналСписатьПартиюНаСервере()
	
	Если Параметры.ВыбраннаяПлощадка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Идентификатор Из Элементы.СкладскойЖурнал.ВыделенныеСтроки Цикл
		СтрокаКСписанию = СкладскойЖурнал.НайтиПоИдентификатору(Идентификатор);
		
		//Если  СтрокаКСписанию.Устарела =Истина Тогда Продолжить; КонецЕсли;
		
		РезультатСписания = МодульОбъекта().СписатьПартию(СтрокаКСписанию.UUID_Партии,Параметры.ВыбраннаяПлощадка,СтрокаКСписанию.Остаток,СтрокаКСписанию.UnitUUID);
		Если РезультатСписания.Успешно = Истина Тогда 
			СтрокаКСписанию.Устарела = Истина;
			СкладскойЖурнал.Удалить(СкладскойЖурнал.Индекс(СтрокаКСписанию));
		Иначе
			Сообщить("Не удалось списать "+СтрокаКСписанию.Остаток+" партии с UUID:"+СтрокаКСписанию.UUID_Партии);
		КонецЕсли;		
	КонецЦикла;
	Элементы.СкладскойЖурнал.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналСписатьПартию(Команда)
	СкладскойЖурналСписатьПартиюНаСервере();
КонецПроцедуры

&НаСервере
Процедура СкладскойЖурналПрочитатьИсториюНаСервере()
	Если Параметры.ВыбраннаяПлощадка <> Неопределено Тогда
		МодульОбъекта().ПолучитьИзмененияЗаписейСкладскогоЖурналаЗаИнтервал(Параметры.ВыбраннаяПлощадка.GUID,НачалоДня(ТекущаяДата()),ТекущаяДата());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкладскойЖурналПрочитатьИсторию(Команда)
	СкладскойЖурналПрочитатьИсториюНаСервере();
КонецПроцедуры

//******************************* Служебная **********************************

&НаСервере
Процедура СлужебнаяОбновитьКлассификаторыИкарНаСервере()
	МодульОбъекта().ПолучитьКлассификаторСтранМеркурий(Истина);
	МодульОбъекта().ПолучитьКлассификаторРегионовМеркурий(Истина,МодульОбъекта().ПолучитьКлассификаторСтранМеркурий().Найти("RU","Код").GUID);
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяОбновитьКлассификаторыИкар(Команда)
	СлужебнаяОбновитьКлассификаторыИкарНаСервере();
	ПоказатьПредупреждение(,"Обновлен КЭШ классификаторов стран и регионов РФ из Меркурия");
КонецПроцедуры

&НаСервере
Процедура СлужебнаяОбновитьКлассификаторТиповПродукцииНаСервере()
	МодульОбъекта().ТаблицаПродукцииВетис(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяОбновитьКлассификаторТиповПродукции(Команда)
	СлужебнаяОбновитьКлассификаторТиповПродукцииНаСервере();
	ПоказатьПредупреждение(,"Обновлен КЭШ классификаторов типов продукции из Меркурия");
КонецПроцедуры

&НаСервере
Процедура СлужебнаяСохранитьШаблонПодключаемогоМодуляНаСервере(ПолноеИмяФайла)
	МодульОбъекта().ПолучитьМакет("ШаблонПодключаемогоМодуляМеркурий").Записать(ПолноеИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура СлужебнаяСохранитьШаблонПодключаемогоМодуля(Команда)
	ДФ=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДФ.Фильтр="epf|*.epf";
	ДФ.ПолноеИмяФайла="КонтурEDI_ПодключаемыйМодульМеркурий_Шаблон.epf";
	Если ДФ.Выбрать() Тогда
		СлужебнаяСохранитьШаблонПодключаемогоМодуляНаСервере(ДФ.ПолноеИмяФайла);
		ПоказатьПредупреждение(,"Шаблон сохранен во внешнем файле");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ИнвентаризацияПолучитьСписокОрганизацийПлощадок(ОрганизацияИлиПлощадка)
	Если ОрганизацияИлиПлощадка = "Организация" Тогда
		Возврат МодульОбъекта().ПолучитьСписокНашихОрганизаций();
	КонецЕсли;
	Возврат МодульОбъекта().ПолучитьСписокНашихПлощадок();
КонецФункции

&НаСервере
Функция ПолучитьДопРеквизитЭлементаДопСправочника(ЭлементСправочника, ИмяАтрибута)
	Возврат МодульОбъекта().ПолучитьДопРеквизитЭлементаДопСправочника(ЭлементСправочника, ИмяАтрибута);
КонецФункции

//******************************* Инвентаризация **********************************
&НаКлиенте
Функция НетПотериДанныхИЛИПользовательНаНееИдет()
	
	//Если Инвентаризация.Количество()<>0 Тогда
	//	ТекстВопроса = "Для этого потребуется очистить таб часть инвентаризации. Очищаем";
	//	ПоказатьВопрос(Новый ОписаниеОповещения("НетПотериДанныхИЛИПользовательНаНееИдетОповещение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	//	//Если Вопрос("Для этого потребуется очистить таб часть инвентаризации. Очищаем", РежимДиалогаВопрос.ДаНетОтмена) = КодВозвратаДиалога.Да Тогда
	//	//	Возврат Истина;			
	//	//Иначе
	//	//	Возврат Ложь;			
	//	//КонецЕсли;	
	//КонецЕсли;
	
	Возврат Истина;			
	
КонецФункции

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОрганизацияПлощадкаНачалоВыбора("Организация", Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ПлощадкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОрганизацияПлощадкаНачалоВыбора("Площадка", Элемент)
	
КонецПроцедуры

&НаСервере
Процедура ИнвентаризацияЗаполнитьПоДанным1СНаСервере()
	ТабИнвентаризация = РеквизитФормыВЗначение("Инвентаризация");
	МодульОбъекта().ОбработкаСобытияПодключаемогоМодуля("ЗаполнитьИнвентаризацию",,Новый Структура("ДатаЗапросаОстатков1С,ТабИнвентаризация,Организация,ОрганизацияGUID,Площадка,ПлощадкаGUID",ДатаЗапросаОстатков1С,ТабИнвентаризация,Организация,ОрганизацияGUID,Площадка,ПлощадкаGUID));
	ЗначениеВРеквизитФормы(ТабИнвентаризация, "Инвентаризация");
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияЗаполнитьПоДанным1С(Команда)
	
	Если не ЗначениеЗаполнено(ОрганизацияGUID)
		ИЛИ НЕ ЗначениеЗаполнено(ПлощадкаGUID) Тогда
		ПоказатьПредупреждение(,"Укажите оба поля - Организация и Площадка и убедитесь что у них есть соответствия GUID");//GotIt
		Возврат;
	КонецЕсли;
	
	//Если НетПотериДанныхИЛИПользовательНаНееИдет() Тогда
		Инвентаризация.Очистить();
	//Иначе
	//	Возврат;
	//КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаЗапросаОстатков1С) Тогда 
		ДатаЗапросаОстатков1С = ТекущаяДата();
		ПоказатьПредупреждение(,"Раз не указана дата запроса остатков, то будем выбирать на текущий момент."+Символы.ПС+"(Текущая дата установлена в параметр)");//GotIt
	КонецЕсли;

	ИнвентаризацияЗаполнитьПоДанным1СНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИнвентаризацияПрочитатьСведенияМеркурияНаСервере()
	
	МодульОбъекта().НастройкиИнвентаризацияПрочитатьСведенияИзМеркурия(Инвентаризация, ЭтотОбъект.Организация, ЭтотОбъект.ОрганизацияGUID, ЭтотОбъект.Площадка, ЭтотОбъект.ПлощадкаGUID);

КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияПрочитатьСведенияМеркурия(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПлощадкаGUID) Тогда
		ПоказатьПредупреждение(,"Укажите поле Площадка и убедитесь что у него есть соответствие GUID");//GotIt
		Возврат;
	КонецЕсли;
	
	
	ИнвентаризацияПрочитатьСведенияМеркурияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияУстановитьВсе(Команда)
	Для каждого Строка Из Инвентаризация Цикл
		Строка.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияИнвертироватьФлажки(Команда)
	Для каждого Строка Из Инвентаризация Цикл
		Строка.Пометка = НЕ Строка.Пометка;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияОтметитьВыделенные(Команда)
	
	Если Элементы.Инвентаризация.ВыделенныеСтроки.Количество()>1 Тогда
		Для каждого Строка Из Элементы.Инвентаризация.ВыделенныеСтроки Цикл
			Инвентаризация.НайтиПоИдентификатору(Строка).Пометка = Истина;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнвентаризацияОтразитьРасхожденияНаСервере()
	
	Если Не ЗначениеЗаполнено(ДатаНаКоторуюСформироватьИнвентаризацию) Тогда 
		ДатаНаКоторуюСформироватьИнвентаризацию = ТекущаяДата();
	КонецЕсли;
	
	РезультатОтраженияИнвентаризации = МодульОбъекта().ОтразитьРезультатыИнвентаризации(Инвентаризация,ПлощадкаGUID,ОрганизацияGUID,ДатаНаКоторуюСформироватьИнвентаризацию); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвентаризацияОтразитьРасхождения(Команда)
	
	ИнвентаризацияОтразитьРасхожденияНаСервере();
	
	Для каждого Строка Из Инвентаризация Цикл
		Строка.КоличествоТекМеркурий = 0;
		Строка.GUID_Партии = "";
	КонецЦикла;
	
	Инвентаризация.Очистить();
	ИнвентаризацияЗаполнитьПоДанным1С(Неопределено);
	ИнвентаризацияПрочитатьСведенияМеркурия(Неопределено);

	
КонецПроцедуры

//******************************* Продукция производителя **********************************

&НаСервере
Функция ПродукцияПроизводителяОбновитьНаСервере()
	
	ТабПродукции = РеквизитФормыВЗначение("ТаблицаПродукцияПроизводителя");
	ТекстОшибки = МодульОбъекта().НастройкиПродукцияПроизводителяОбновить(ТабПродукции, ПлощадкаПроизводитель);
	Если ТекстОшибки = "" Тогда
		МодульОбъекта().ЗаполнитьАртикулНаименованиеИШтрихкодТаблицыПродукцииПроизводителя(ТабПродукции);
		ТекстОшибки =  МодульОбъекта().НастройкиПродукцияПроизводителяПрочитатьКаталогПлощадкиМеркурий(ТабПродукции, ПлощадкаПроизводитель); //Текст ошибки (если есть)
		ЗначениеВРеквизитФормы(ТабПродукции,"ТаблицаПродукцияПроизводителя");
	КонецЕсли;
	Возврат ТекстОшибки;
	
КонецФункции

&НаКлиенте
Процедура ПлощадкаПроизводительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОрганизацияПлощадкаНачалоВыбора("ПлощадкаПроизводитель", Элемент);
	
	//это не работает для немодальных вызовов
	Если ЗначениеЗаполнено(ПлощадкаПроизводитель) Тогда
		ТекстОшибки = ПродукцияПроизводителяОбновитьНаСервере();
		Если НЕ ТекстОшибки = "" Тогда
			ПоказатьПредупреждение(,ТекстОшибки,,"Контур.Меркурий");
		КонецЕсли;
	КонецЕсли

	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПроизводителяОбновить(Команда)
	
	Если ЗначениеЗаполнено(ПлощадкаПроизводитель) Тогда
		ТекстОшибки = ПродукцияПроизводителяОбновитьНаСервере();
		Если НЕ ТекстОшибки = "" Тогда
			ПоказатьПредупреждение(,ТекстОшибки,,"Контур.Меркурий");
		КонецЕсли;
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПроизводителяУстановитьСнятьВсе(Флаг)
	Для Каждого стр из ТаблицаПродукцияПроизводителя Цикл
		стр.Пометка = Флаг;
	КонецЦикла;
КонецПроцедуры
	
&НаКлиенте
Процедура ПродукцияПроизводителяУстановитьВсе(Команда)
	ПродукцияПроизводителяУстановитьСнятьВсе(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПроизводителяСнятьВсе(Команда)
	ПродукцияПроизводителяУстановитьСнятьВсе(Ложь);
КонецПроцедуры

&НаСервере
Функция ПродукцияПроизводителяОпубликоватьИзмененияНаСервере()
	
	СтрокаСGUID = ПлощадкаПроизводитель.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	Если СтрокаСGUID = Неопределено Тогда
		Возврат "Похоже что возникли проблемы с определением GUID выбранной вами площадки"; 
	КонецЕсли;

	ТабПродукции = РеквизитФормыВЗначение("ТаблицаПродукцияПроизводителя");
	МодульОбъекта().ОпубликоватьКаталогПлощадки(СтрокаСGUID.Значение, ТабПродукции);
	ЗначениеВРеквизитФормы(ТабПродукции,"ТаблицаПродукцияПроизводителя");
	Возврат ПродукцияПроизводителяОбновитьНаСервере();
	
КонецФункции

&НаКлиенте
Процедура ПродукцияПроизводителяОпубликоватьИзменения(Команда)
	ТекстОшибки = ПродукцияПроизводителяОпубликоватьИзмененияНаСервере();
	Если НЕ ТекстОшибки = "" Тогда
		ПоказатьПредупреждение(,ТекстОшибки,,"Контур.Меркурий");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПродукцияПроизводителяПрочитатьКаталогПлощадкиМеркурийНаСервере()
	
	СтрокаСGUID = ПлощадкаПроизводитель.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	Если СтрокаСGUID = Неопределено Тогда
		Возврат "Похоже что возникли проблемы с определением GUID выбранной вами площадки"; 
	КонецЕсли;
	
	ТабПродукции = РеквизитФормыВЗначение("ТаблицаПродукцияПроизводителя");
	МодульОбъекта().НастройкиПродукцияПроизводителяПрочитатьКаталогПлощадкиМеркурий(ТабПродукции, ПлощадкаПроизводитель);
	ЗначениеВРеквизитФормы(ТабПродукции,"ТаблицаПродукцияПроизводителя");
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ПродукцияПроизводителяПрочитатьКаталогПлощадкиМеркурий(Команда)
	
	ТекстОшибки = ПродукцияПроизводителяПрочитатьКаталогПлощадкиМеркурийНаСервере();
	Если НЕ ТекстОшибки = "" Тогда
		ПоказатьПредупреждение(,ТекстОшибки,,"Контур.Меркурий");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПродукцияПроизводителяОчиститьИдентификаторыОтличающихсяНаСервере()
	
	СтрокаСGUID = ПлощадкаПроизводитель.ДополнительныеРеквизиты.Найти("GUID","ИмяРеквизита");
	Если СтрокаСGUID = Неопределено Тогда
		Возврат "Похоже что возникли проблемы с определением GUID выбранной вами площадки"; 
	КонецЕсли;

	Для Каждого СтрокаТаблицыПродукции Из ТаблицаПродукцияПроизводителя ЦИкл
		
		Если Не МодульОбъекта().ЕстьЧтоОбновлятьПоТовару(СтрокаТаблицыПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		ОсновнойМодуль().УдалитьЗначениеСвойстваОбъекта(СтрокаТаблицыПродукции.Номенклатура,"ПлощадкаUUID"+СтрокаСGUID.Значение);
		ОсновнойМодуль().УдалитьЗначениеСвойстваОбъекта(СтрокаТаблицыПродукции.Номенклатура,"GUIDнаПлощ"+СтрокаСGUID.Значение);
	КонецЦикла;
	
	Возврат "";

КонецФункции

&НаКлиенте
Процедура ПродукцияПроизводителяОчиститьИдентификаторыОтличающихся(Команда)
	
	ТекстОшибки = ПродукцияПроизводителяОчиститьИдентификаторыОтличающихсяНаСервере();
	Если НЕ ТекстОшибки = "" Тогда
		ПоказатьПредупреждение(,ТекстОшибки,,"Контур.Меркурий");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияПроизводителяПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПродукцияПроизводителяПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры







